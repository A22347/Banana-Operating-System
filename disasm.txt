
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 04 39 02 c0       	mov    eax,0xc0023904
c0000025:	3d 04 39 02 c0       	cmp    eax,0xc0023904
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 04 39 02 c0       	push   0xc0023904
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 04 39 02 c0       	mov    eax,0xc0023904
c0000051:	2d 04 39 02 c0       	sub    eax,0xc0023904
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 04 39 02 c0       	push   0xc0023904
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb bc ff 01 c0       	mov    ebx,0xc001ffbc
c0000097:	81 eb b8 ff 01 c0    	sub    ebx,0xc001ffb8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b8 ff 01 c0       	mov    esi,0xc001ffb8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 04 39 02 c0       	push   0xc0023904
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 04 39 02 c0       	push   0xc0023904
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 07 52 01 00       	call   c00154b4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e5 51 01 00       	call   c00154b4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 f2 56 01 00       	call   c00159e0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b1 5d 01 00       	call   c00160a8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2d 10 01 00       	jmp    c00113ac <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 c0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0040],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 c0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0040],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 c0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0040],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 c0 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0040],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 c0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0040],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 c4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff3c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 ae 78 01 00       	jmp    c0019650 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 d8 78 01 00       	jmp    c0019690 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 f9 78 01 00       	jmp    c00196d0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 20 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfde0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 20 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfde0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 24 29 02 c0       	mov    edx,0xc0022924
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba dc 00 02 c0       	mov    edx,0xc00200dc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 e2 00 02 c0       	mov    eax,0xc00200e2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf a0 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfe60]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 eb 00 02 c0       	mov    eax,0xc00200eb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 20 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfde0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 70 01 02 c0       	mov    eax,0xc0020170
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 60 01 02 c0       	mov    ebx,0xc0020160
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 40 01 02 c0       	mov    eax,0xc0020140
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 50 01 02 c0       	mov    eax,0xc0020150
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba f2 00 02 c0       	mov    edx,0xc00200f2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba fe 00 02 c0       	mov    edx,0xc00200fe
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 12 01 02 c0       	mov    edx,0xc0020112
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 40 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020540
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 40 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020540
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 40 03 02 c0       	mov    eax,0xc0020340
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 80 02 02 c0       	mov    eax,0xc0020280
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 40 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfdc0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 40 06 02 c0       	push   0xc0020640
c000611b:	e8 cc 3e 01 00       	call   c0019fec <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 4e 06 02 c0       	push   0xc002064e
c0006153:	e8 94 3e 01 00       	call   c0019fec <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 fd 3d 01 00       	call   c0019f90 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 5d 06 02 c0       	push   0xc002065d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 60 06 02 c0       	push   0xc0020660
c0006812:	e8 d5 37 01 00       	call   c0019fec <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 e9 37 01 00       	call   c001a008 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 65 06 02 c0 	mov    DWORD PTR [esp],0xc0020665
c000682c:	e8 bb 37 01 00       	call   c0019fec <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 cb 37 01 00       	call   c001a008 <iso_kprintfd>
c000683d:	c7 04 24 6b 06 02 c0 	mov    DWORD PTR [esp],0xc002066b
c0006844:	e8 a3 37 01 00       	call   c0019fec <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 b3 37 01 00       	call   c001a008 <iso_kprintfd>
c0006855:	c7 04 24 71 06 02 c0 	mov    DWORD PTR [esp],0xc0020671
c000685c:	e8 8b 37 01 00       	call   c0019fec <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 9b 37 01 00       	call   c001a008 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 5d 06 02 c0       	push   0xc002065d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 7a 06 02 c0       	push   0xc002067a
c0006a31:	e8 b6 35 01 00       	call   c0019fec <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 85 06 02 c0       	push   0xc0020685
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 8c 06 02 c0       	push   0xc002068c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 93 06 02 c0       	push   0xc0020693
c0006b48:	e8 9f 34 01 00       	call   c0019fec <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 9e 06 02 c0       	push   0xc002069e
c0006b63:	e8 84 34 01 00       	call   c0019fec <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 9a 9f 00 00       	call   c0010c0c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 2f 5c 00 00       	call   c000c8b0 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 af 06 02 c0       	push   0xc00206af
c0006cb2:	e8 34 a0 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 c8 06 02 c0       	push   0xc00206c8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 2d eb 00 00       	call   c001580c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 3c ed 00 00       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 18 65 01 c0       	push   0xc0016518
c0006d03:	52                   	push   edx
c0006d04:	e8 27 ed 00 00       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 c4 07 02 c0       	push   0xc00207c4
c0006d16:	e8 d0 9f 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 53 a8 00 00       	call   c001157a <KeInitRand()>
c0006d27:	e8 0f fc 00 00       	call   c001693b <Vm::initialise8086()>
c0006d2c:	e8 8f 48 00 00       	call   c000b5c0 <Fs::initVFS()>
c0006d31:	c7 04 24 d5 06 02 c0 	mov    DWORD PTR [esp],0xc00206d5
c0006d38:	e8 ae 9f 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 c4 07 02 c0       	push   0xc00207c4
c0006d5c:	e8 8a 9f 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0006d61:	e8 37 45 00 00       	call   c000b29d <KeInitialiseSymlinks()>
c0006d66:	e8 b9 a4 00 00       	call   c0011224 <KeLoadSystemEnv()>
c0006d6b:	e8 16 a7 00 00       	call   c0011486 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 ef 06 02 c0       	push   0xc00206ef
c0006d7a:	68 f8 06 02 c0       	push   0xc00206f8
c0006d7f:	e8 d4 cc 00 00       	call   c0013a58 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 84 54 00 00       	call   c000c210 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 e8 07 02 c0 	mov    DWORD PTR [esp],0xc00207e8
c0006d93:	e8 53 9f 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 04 5b 00 00       	call   c000c8ae <Device::loadDriversForAll()>
c0006daa:	c7 04 24 00 07 02 c0 	mov    DWORD PTR [esp],0xc0020700
c0006db1:	e8 35 9f 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 11 07 02 c0       	push   0xc0020711
c0006dc5:	e8 58 e4 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 80 e6 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 b4 f0 00 00       	call   c0015e94 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 2d 07 02 c0       	push   0xc002072d
c0006df5:	50                   	push   eax
c0006df6:	e8 2f 5b 00 00       	call   c000c92a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 34 08 02 c0       	mov    edx,0xc0020834
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 c1 80 01 00       	call   c001efb6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 f1 91 00 00       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 ca 91 00 00       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 a8 91 00 00       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 86 91 00 00       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 93 90 00 00       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 6e 90 00 00       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 20 7f 01 00       	call   c001ef70 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 6e 7b 01 00       	call   c001ebe0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 84 90 00 00       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 36 07 02 c0       	push   0xc0020736
c00070e2:	e8 da a2 00 00       	call   c00113c1 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 3c 07 02 c0       	push   0xc002073c
c000711e:	e8 9e a2 00 00       	call   c00113c1 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 d1 89 00 00       	jmp    c000fb3c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 42 07 02 c0       	push   0xc0020742
c00071c3:	0f 94 05 60 31 02 c0 	sete   BYTE PTR ds:0xc0023160
c00071ca:	e8 1c 9b 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 cb 84 00 00       	call   c000f6b0 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 9e 55 00 00       	call   c000c792 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 5a 07 02 c0 	mov    DWORD PTR [esp],0xc002075a
c000720d:	e8 d9 9a 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 b4 8f 00 00       	call   c00101dc <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 5b 55 00 00       	call   c000c792 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 08 08 02 c0       	push   0xc0020808
c0007254:	e8 92 9a 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0007259:	e8 1a 09 01 00       	call   c0017b78 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 74 07 02 c0 	mov    DWORD PTR [esp],0xc0020774
c0007265:	e8 81 9a 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 e6 e8 00 00       	call   c0015b5c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 8f 07 02 c0       	push   0xc002078f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 a0 07 02 c0       	push   0xc00207a0
c00072ed:	e8 cf a0 00 00       	call   c00113c1 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 ad 07 02 c0       	push   0xc00207ad
c0007302:	e8 ba a0 00 00       	call   c00113c1 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 b7 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207b7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 a0 a0 00 00       	jmp    c00113c1 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 31 03 01 00       	call   c0017844 <HalSystemIdle()>
c0007513:	e8 5a 80 01 00       	call   c001f572 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 70 ec 01 c0       	push   0xc001ec70
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 80 ec 01 c0       	push   0xc001ec80
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 8a ec 01 c0       	push   0xc001ec8a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 94 ec 01 c0       	push   0xc001ec94
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 9e ec 01 c0       	push   0xc001ec9e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 a8 ec 01 c0       	push   0xc001eca8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 b2 ec 01 c0       	push   0xc001ecb2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 bc ec 01 c0       	push   0xc001ecbc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 c6 ec 01 c0       	push   0xc001ecc6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 ce ec 01 c0       	push   0xc001ecce
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 d8 ec 01 c0       	push   0xc001ecd8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 e0 ec 01 c0       	push   0xc001ece0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 e8 ec 01 c0       	push   0xc001ece8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 f0 ec 01 c0       	push   0xc001ecf0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 0a ed 01 c0       	push   0xc001ed0a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 12 ed 01 c0       	push   0xc001ed12
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 1c ed 01 c0       	push   0xc001ed1c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 26 ed 01 c0       	push   0xc001ed26
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 30 ed 01 c0       	push   0xc001ed30
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 ca ed 01 c0       	push   0xc001edca
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 d1 ed 01 c0       	push   0xc001edd1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 bc ed 01 c0       	push   0xc001edbc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 c3 ed 01 c0       	push   0xc001edc3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 3a ed 01 c0       	push   0xc001ed3a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 44 ed 01 c0       	push   0xc001ed44
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 4e ed 01 c0       	push   0xc001ed4e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 58 ed 01 c0       	push   0xc001ed58
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 62 ed 01 c0       	push   0xc001ed62
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 6c ed 01 c0       	push   0xc001ed6c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 76 ed 01 c0       	push   0xc001ed76
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 80 ed 01 c0       	push   0xc001ed80
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 8a ed 01 c0       	push   0xc001ed8a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 94 ed 01 c0       	push   0xc001ed94
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 9e ed 01 c0       	push   0xc001ed9e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 a8 ed 01 c0       	push   0xc001eda8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 b2 ed 01 c0       	push   0xc001edb2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 0c ef 01 c0       	push   0xc001ef0c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 16 ef 01 c0       	push   0xc001ef16
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 20 ef 01 c0       	push   0xc001ef20
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 2a ef 01 c0       	push   0xc001ef2a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 34 ef 01 c0       	push   0xc001ef34
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 3e ef 01 c0       	push   0xc001ef3e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 48 ef 01 c0       	push   0xc001ef48
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 52 ef 01 c0       	push   0xc001ef52
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 c6 ec 01 c0       	push   0xc001ecc6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 54 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023154
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 54 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023154
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 54 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023154,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 54 31 02 c0       	mov    eax,ds:0xc0023154
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 58 08 02 c0       	push   0xc0020858
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 88 08 02 c0       	push   0xc0020888
c0007a27:	e8 95 99 00 00       	call   c00113c1 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 8d 08 02 c0       	push   0xc002088d
c0007a3d:	e8 7f 99 00 00       	call   c00113c1 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 94 08 02 c0       	push   0xc0020894
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 06 91 00 00       	call   c0010c6f <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 2f 90 00 00       	call   c0010bb9 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 6a 79 01 00       	call   c001f50a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ac 08 02 c0       	push   0xc00208ac
c0007c31:	e8 8b 97 00 00       	call   c00113c1 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ac 08 02 c0       	push   0xc00208ac
c0007ca2:	e8 1a 97 00 00       	call   c00113c1 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 58 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023158
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 58 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023158
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 58 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023158
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 51 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020951
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 14 96 00 00       	jmp    c00113c1 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 d4 08 02 c0       	push   0xc00208d4
c0007e31:	e8 8b 95 00 00       	call   c00113c1 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 67 09 02 c0       	push   0xc0020967
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 04 09 02 c0       	push   0xc0020904
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 28 09 02 c0       	push   0xc0020928
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 8d 09 02 c0       	push   0xc002098d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 7f 09 02 c0       	push   0xc002097f
c000813c:	e8 80 92 00 00       	call   c00113c1 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba ec 09 02 c0       	mov    edx,0xc00209ec
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 a9 09 02 c0       	push   0xc00209a9
c0008311:	e8 ab 90 00 00       	call   c00113c1 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 21 d9 00 00       	call   c0015c80 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 f9 6f 01 00       	call   c001f3f0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 c6 09 02 c0       	push   0xc00209c6
c000840c:	e8 b0 8f 00 00       	call   c00113c1 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ec 09 02 c0       	mov    edx,0xc00209ec
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 34 0a 02 c0       	mov    edx,0xc0020a34
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 76 51 00 00       	call   c000d66c <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 1c 05 01 00       	call   c0018a38 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 80 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce80]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 80 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce80]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 38 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcfc8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 10 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcff0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 4e 02 01 00       	call   c00188cc <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 ab 02 01 00       	jmp    c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 00 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a00
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 4b 8c 00 00       	jmp    c00113c1 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 e4 38 00 00       	jmp    c000c1b7 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 0e 0a 02 c0       	mov    esi,0xc0020a0e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 b2 fd 00 00       	call   c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 34 0a 02 c0       	mov    edx,0xc0020a34
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 1f 0a 02 c0       	push   0xc0020a1f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 25 0a 02 c0       	push   0xc0020a25
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba fc 0a 02 c0       	mov    edx,0xc0020afc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 c0 31 02 c0       	mov    eax,ds:0xc00231c0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 c0 31 02 c0    	mov    DWORD PTR ds:0xc00231c0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 d7 63 01 00       	call   c001f5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 18 0b 02 c0       	mov    edx,0xc0020b18
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba fc 0a 02 c0       	mov    edx,0xc0020afc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 d7 62 01 00       	call   c001f6ac <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 cb 62 01 00       	call   c001f6b4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 d1 61 01 00       	call   c001f5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 d4 0a 02 c0       	push   0xc0020ad4
c000942c:	e8 90 7f 00 00       	call   c00113c1 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 18 0b 02 c0       	mov    edx,0xc0020b18
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 d6 61 01 00       	call   c001f6ac <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 63 62 01 00       	call   c001f756 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 21 60 01 00       	call   c001f596 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 50 31 02 c0       	push   0xc0023150
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 94 f5 01 c0       	push   0xc001f594
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 c8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231c8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d c8 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231c8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 c4 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231c4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 c4 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00231c4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 c4 31 02 c0    	mov    DWORD PTR ds:0xc00231c4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 2c 0b 02 c0       	push   0xc0020b2c
c0009689:	e8 33 7d 00 00       	call   c00113c1 <KePanic(char const*)>
c000968e:	8b 35 c4 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231c4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d c4 31 02 c0    	mov    DWORD PTR ds:0xc00231c4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 c4 31 02 c0       	mov    eax,ds:0xc00231c4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 c4 31 02 c0    	mov    DWORD PTR ds:0xc00231c4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 c4 31 02 c0       	mov    ds:0xc00231c4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 cc 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231cc
c000975f:	8b 0d d4 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231d4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d cc 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231cc
c000977a:	a1 d0 31 02 c0       	mov    eax,ds:0xc00231d0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d d0 31 02 c0    	cmp    DWORD PTR ds:0xc00231d0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 c0 0d 02 c0       	push   0xc0020dc0
c00097c0:	e8 fc 7b 00 00       	call   c00113c1 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 d7 0d 02 c0       	push   0xc0020dd7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d d0 31 02 c0    	mov    DWORD PTR ds:0xc00231d0,ebx
c0009864:	c6 05 d8 31 02 c0 43 	mov    BYTE PTR ds:0xc00231d8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 d4 31 02 c0       	mov    ds:0xc00231d4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 cc 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00231cc,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 d0 31 02 c0       	mov    eax,ds:0xc00231d0
c0009896:	f7 35 cc 31 02 c0    	div    DWORD PTR ds:0xc00231cc
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 4c 0b 02 c0       	push   0xc0020b4c
c00098d1:	e8 eb 7a 00 00       	call   c00113c1 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ee 0d 02 c0       	push   0xc0020dee
c00099a3:	e8 19 7a 00 00       	call   c00113c1 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 70 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b70
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 b6 79 00 00       	jmp    c00113c1 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 0a 0e 02 c0       	push   0xc0020e0a
c0009a18:	e8 a4 79 00 00       	call   c00113c1 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 26 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020e26
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 5a 79 00 00       	jmp    c00113c1 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 94 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b94
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 b8 0b 02 c0       	push   0xc0020bb8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 20 0c 02 c0       	push   0xc0020c20
c0009dad:	e8 0f 76 00 00       	call   c00113c1 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 44 0c 02 c0       	push   0xc0020c44
c0009e99:	e8 23 75 00 00       	call   c00113c1 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 70 0c 02 c0       	push   0xc0020c70
c0009fed:	e8 cf 73 00 00       	call   c00113c1 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 02 28 00 00       	call   c000ca26 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 40 0e 02 c0       	push   0xc0020e40
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 cc 31 02 c0       	mov    eax,ds:0xc00231cc
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 d8 31 02 c0 	movsx  eax,BYTE PTR ds:0xc00231d8
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 d6 38 00 00       	call   c000dbe0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d cc 31 02 c0    	cmp    DWORD PTR ds:0xc00231cc,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 94 0c 02 c0       	push   0xc0020c94
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 4e 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020e4e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 71 0e 02 c0       	push   0xc0020e71
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 5f 0e 02 c0       	push   0xc0020e5f
c000a3db:	e8 e1 6f 00 00       	call   c00113c1 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 71 0e 02 c0       	push   0xc0020e71
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 cc 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231cc
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 d8 31 02 c0 	movsx  eax,BYTE PTR ds:0xc00231d8
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 ed 36 00 00       	call   c000db74 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 cc 31 02 c0    	cmp    DWORD PTR ds:0xc00231cc,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 84 0e 02 c0       	push   0xc0020e84
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 e4 0c 02 c0       	push   0xc0020ce4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 44 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d44
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 99 0e 02 c0       	push   0xc0020e99
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ad 0e 02 c0       	push   0xc0020ead
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 c0 0e 02 c0       	push   0xc0020ec0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 cd 0e 02 c0       	push   0xc0020ecd
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 e6 0e 02 c0       	push   0xc0020ee6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 e6 0e 02 c0       	push   0xc0020ee6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ee 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eee
c000a7f8:	e8 c4 6b 00 00       	call   c00113c1 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 06 0f 02 c0       	push   0xc0020f06
c000a80a:	e8 b2 6b 00 00       	call   c00113c1 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 0f 0a 02 c0       	mov    esi,0xc0020a0f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 0e 0a 02 c0       	mov    al,ds:0xc0020a0e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 1c 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf0e4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 6c 10 02 c0       	push   0xc002106c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 80 10 02 c0       	push   0xc0021080
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 8a 10 02 c0       	push   0xc002108a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 94 10 02 c0       	push   0xc0021094
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 d8 11 02 c0       	push   0xc00211d8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 9e 10 02 c0       	push   0xc002109e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 f8 11 02 c0       	push   0xc00211f8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 b3 10 02 c0       	push   0xc00210b3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 cd 10 02 c0       	push   0xc00210cd
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 20 12 02 c0       	push   0xc0021220
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 d8 11 02 c0       	push   0xc00211d8
c000abb4:	e8 08 68 00 00       	call   c00113c1 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 68 12 02 c0       	push   0xc0021268
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 68 12 02 c0       	push   0xc0021268
c000abe3:	e8 d9 67 00 00       	call   c00113c1 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 d8 10 02 c0       	push   0xc00210d8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 d8 10 02 c0       	push   0xc00210d8
c000ac0f:	e8 ad 67 00 00       	call   c00113c1 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 f5 10 02 c0       	push   0xc00210f5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 f5 10 02 c0       	push   0xc00210f5
c000ac3b:	e8 81 67 00 00       	call   c00113c1 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 88 12 02 c0       	push   0xc0021288
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 88 12 02 c0       	push   0xc0021288
c000ac67:	e8 55 67 00 00       	call   c00113c1 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ac 12 02 c0       	push   0xc00212ac
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ac 12 02 c0       	push   0xc00212ac
c000ac93:	e8 29 67 00 00       	call   c00113c1 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 11 11 02 c0       	push   0xc0021111
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 11 11 02 c0       	push   0xc0021111
c000acbf:	e8 fd 66 00 00       	call   c00113c1 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 2d 11 02 c0       	push   0xc002112d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 2d 11 02 c0       	push   0xc002112d
c000aceb:	e8 d1 66 00 00       	call   c00113c1 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 cc 12 02 c0       	push   0xc00212cc
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 cc 12 02 c0       	push   0xc00212cc
c000ad17:	e8 a5 66 00 00       	call   c00113c1 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 f0 12 02 c0       	push   0xc00212f0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 f0 12 02 c0       	push   0xc00212f0
c000ad43:	e8 79 66 00 00       	call   c00113c1 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 b1 67 00 00       	call   c001150f <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 0f 13 02 c0       	push   0xc002130f
c000ad97:	e8 25 66 00 00       	call   c00113c1 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 18 13 02 c0       	push   0xc0021318
c000addc:	50                   	push   eax
c000addd:	e8 8e 0a 00 00       	call   c000b870 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 36 13 02 c0       	push   0xc0021336
c000adf1:	e8 cb 65 00 00       	call   c00113c1 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 35 0b 00 00       	call   c000b938 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 50 13 02 c0       	push   0xc0021350
c000ae12:	e8 aa 65 00 00       	call   c00113c1 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 6a 13 02 c0       	push   0xc002136a
c000ae59:	e8 63 65 00 00       	call   c00113c1 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 1f 0b 00 00       	call   c000b996 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 84 13 02 c0       	push   0xc0021384
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	0f 84 de 01 00 00    	je     c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af78:	89 d5                	mov    ebp,edx
c000af7a:	53                   	push   ebx
c000af7b:	53                   	push   ebx
c000af7c:	57                   	push   edi
c000af7d:	68 9e 13 02 c0       	push   0xc002139e
c000af82:	e8 be f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af87:	58                   	pop    eax
c000af88:	5a                   	pop    edx
c000af89:	55                   	push   ebp
c000af8a:	68 ac 13 02 c0       	push   0xc00213ac
c000af8f:	e8 b1 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9b:	e8 16 cb ff ff       	call   c0007ab6 <malloc>
c000afa0:	83 c4 0c             	add    esp,0xc
c000afa3:	89 c3                	mov    ebx,eax
c000afa5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afab:	56                   	push   esi
c000afac:	50                   	push   eax
c000afad:	e8 be 08 00 00       	call   c000b870 <File::File(char const*, Process*)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	85 db                	test   ebx,ebx
c000afb7:	0f 84 68 01 00 00    	je     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000afbd:	83 ec 0c             	sub    esp,0xc
c000afc0:	68 c0 1f 02 c0       	push   0xc0021fc0
c000afc5:	e8 7b f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afca:	5a                   	pop    edx
c000afcb:	59                   	pop    ecx
c000afcc:	6a 01                	push   0x1
c000afce:	53                   	push   ebx
c000afcf:	e8 64 09 00 00       	call   c000b938 <File::open(FileOpenMode)>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	85 c0                	test   eax,eax
c000afd9:	74 0b                	je     c000afe6 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe0:	53                   	push   ebx
c000afe1:	e9 39 01 00 00       	jmp    c000b11f <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afe6:	83 ec 0c             	sub    esp,0xc
c000afe9:	68 a6 09 02 c0       	push   0xc00209a6
c000afee:	e8 52 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff3:	58                   	pop    eax
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affa:	56                   	push   esi
c000affb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afff:	52                   	push   edx
c000b000:	6a 00                	push   0x0
c000b002:	6a 08                	push   0x8
c000b004:	53                   	push   ebx
c000b005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b008:	83 c4 20             	add    esp,0x20
c000b00b:	85 c0                	test   eax,eax
c000b00d:	0f 85 fe 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b013:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b018:	0f 85 f3 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	68 f2 1f 02 c0       	push   0xc0021ff2
c000b026:	e8 1a f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b031:	89 34 24             	mov    DWORD PTR [esp],esi
c000b034:	52                   	push   edx
c000b035:	6a 00                	push   0x0
c000b037:	6a 08                	push   0x8
c000b039:	53                   	push   ebx
c000b03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03d:	83 c4 20             	add    esp,0x20
c000b040:	85 c0                	test   eax,eax
c000b042:	0f 85 c9 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b048:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04d:	0f 85 be 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b053:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b057:	0f 85 f9 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b05d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b061:	0f 85 ef 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b067:	83 ec 0c             	sub    esp,0xc
c000b06a:	68 ba 13 02 c0       	push   0xc00213ba
c000b06f:	e8 d1 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b074:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 a3 0b 00 00       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09f:	75 70                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0a1:	31 ff                	xor    edi,edi
c000b0a3:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0ac:	89 f8                	mov    eax,edi
c000b0ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b2:	73 5d                	jae    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	68 ba 13 02 c0       	push   0xc00213ba
c000b0bc:	e8 84 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c9:	83 c0 f0             	add    eax,0xfffffff0
c000b0cc:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d1:	83 d2 ff             	adc    edx,0xffffffff
c000b0d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	39 c1                	cmp    ecx,eax
c000b0e1:	19 d7                	sbb    edi,edx
c000b0e3:	72 40                	jb     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ea:	56                   	push   esi
c000b0eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ef:	52                   	push   edx
c000b0f0:	50                   	push   eax
c000b0f1:	53                   	push   ebx
c000b0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f5:	83 c4 20             	add    esp,0x20
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 15                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b100:	89 c7                	mov    edi,eax
c000b102:	c1 ff 1f             	sar    edi,0x1f
c000b105:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b109:	75 06                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b10b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10f:	74 19                	je     c000b12a <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 7c 08 00 00       	call   c000b996 <File::close()>
c000b11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	83 c8 ff             	or     eax,0xffffffff
c000b128:	eb 2e                	jmp    c000b158 <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	68 d2 2a 02 c0       	push   0xc0022ad2
c000b132:	e8 0e f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13a:	e8 57 08 00 00       	call   c000b996 <File::close()>
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b147:	c7 04 24 bd 13 02 c0 	mov    DWORD PTR [esp],0xc00213bd
c000b14e:	e8 f2 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	31 c0                	xor    eax,eax
c000b158:	83 c4 3c             	add    esp,0x3c
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	89 c3                	mov    ebx,eax
c000b17a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	50                   	push   eax
c000b185:	e8 e6 06 00 00       	call   c000b870 <File::File(char const*, Process*)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	b8 01 00 00 00       	mov    eax,0x1
c000b192:	85 db                	test   ebx,ebx
c000b194:	0f 84 fb 00 00 00    	je     c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19a:	52                   	push   edx
c000b19b:	52                   	push   edx
c000b19c:	6a 12                	push   0x12
c000b19e:	53                   	push   ebx
c000b19f:	e8 94 07 00 00       	call   c000b938 <File::open(FileOpenMode)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	85 c0                	test   eax,eax
c000b1a9:	74 0b                	je     c000b1b6 <KeCreateSymlink(char const*, char const*)+0x56>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b0:	53                   	push   ebx
c000b1b1:	e9 d4 00 00 00       	jmp    c000b28a <KeCreateSymlink(char const*, char const*)+0x12a>
c000b1b6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1ba:	be c0 13 02 c0       	mov    esi,0xc00213c0
c000b1bf:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c4:	fc                   	cld    
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	56                   	push   esi
c000b1d1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d5:	52                   	push   edx
c000b1d6:	6a 00                	push   0x0
c000b1d8:	6a 08                	push   0x8
c000b1da:	53                   	push   ebx
c000b1db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1de:	83 c4 20             	add    esp,0x20
c000b1e1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e6:	0f 85 90 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ec:	85 c0                	test   eax,eax
c000b1ee:	0f 85 88 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f4:	e8 57 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b200:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 5e                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 5a                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 2d                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 29                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b253:	50                   	push   eax
c000b254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b260:	e8 30 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	e8 29 07 00 00       	call   c000b996 <File::close()>
c000b26d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	31 c0                	xor    eax,eax
c000b27a:	eb 19                	jmp    c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 11 07 00 00       	call   c000b996 <File::close()>
c000b285:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	b8 01 00 00 00       	mov    eax,0x1
c000b295:	83 c4 2c             	add    esp,0x2c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    

c000b29d <KeInitialiseSymlinks()>:
c000b29d:	53                   	push   ebx
c000b29e:	83 ec 10             	sub    esp,0x10
c000b2a1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2ab:	6a 00                	push   0x0
c000b2ad:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b2:	e8 21 59 00 00       	call   c0010bd8 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2be:	e8 f3 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	89 c3                	mov    ebx,eax
c000b2c8:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2ce:	68 18 13 02 c0       	push   0xc0021318
c000b2d3:	50                   	push   eax
c000b2d4:	e8 97 05 00 00       	call   c000b870 <File::File(char const*, Process*)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	85 db                	test   ebx,ebx
c000b2de:	75 10                	jne    c000b2f0 <KeInitialiseSymlinks()+0x53>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	68 c9 13 02 c0       	push   0xc00213c9
c000b2e8:	e8 d4 60 00 00       	call   c00113c1 <KePanic(char const*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 0c             	sub    esp,0xc
c000b2f3:	53                   	push   ebx
c000b2f4:	e8 03 09 00 00       	call   c000bbfc <File::exists()>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	84 c0                	test   al,al
c000b2fe:	75 2d                	jne    c000b32d <KeInitialiseSymlinks()+0x90>
c000b300:	52                   	push   edx
c000b301:	52                   	push   edx
c000b302:	6a 12                	push   0x12
c000b304:	53                   	push   ebx
c000b305:	e8 2e 06 00 00       	call   c000b938 <File::open(FileOpenMode)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	85 c0                	test   eax,eax
c000b30f:	74 10                	je     c000b321 <KeInitialiseSymlinks()+0x84>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 e6 13 02 c0       	push   0xc00213e6
c000b319:	e8 a3 60 00 00       	call   c00113c1 <KePanic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	83 ec 0c             	sub    esp,0xc
c000b324:	53                   	push   ebx
c000b325:	e8 6c 06 00 00       	call   c000b996 <File::close()>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	85 db                	test   ebx,ebx
c000b32f:	74 0c                	je     c000b33d <KeInitialiseSymlinks()+0xa0>
c000b331:	83 ec 0c             	sub    esp,0xc
c000b334:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b336:	53                   	push   ebx
c000b337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	50                   	push   eax
c000b33e:	50                   	push   eax
c000b33f:	68 03 14 02 c0       	push   0xc0021403
c000b344:	68 11 14 02 c0       	push   0xc0021411
c000b349:	e8 12 fe ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c000b34e:	83 c4 18             	add    esp,0x18
c000b351:	5b                   	pop    ebx
c000b352:	c3                   	ret    
c000b353:	90                   	nop

c000b354 <File::read(unsigned long long, void*, int*)>:
c000b354:	53                   	push   ebx
c000b355:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b359:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b35d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b364:	83 f8 19             	cmp    eax,0x19
c000b367:	77 35                	ja     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b369:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b370:	85 c0                	test   eax,eax
c000b372:	74 2a                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b374:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b37a:	85 c0                	test   eax,eax
c000b37c:	74 20                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b37e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b382:	74 21                	je     c000b3a5 <File::read(unsigned long long, void*, int*)+0x51>
c000b384:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b386:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b394:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b398:	5b                   	pop    ebx
c000b399:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b39c:	ff e0                	jmp    eax
c000b39e:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a3:	eb 05                	jmp    c000b3aa <File::read(unsigned long long, void*, int*)+0x56>
c000b3a5:	b8 05 00 00 00       	mov    eax,0x5
c000b3aa:	5b                   	pop    ebx
c000b3ab:	c3                   	ret    

c000b3ac <File::write(unsigned long long, void*, int*)>:
c000b3ac:	53                   	push   ebx
c000b3ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3bc:	83 f8 19             	cmp    eax,0x19
c000b3bf:	77 35                	ja     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	74 2a                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3cc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d2:	85 c0                	test   eax,eax
c000b3d4:	74 20                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3da:	74 21                	je     c000b3fd <File::write(unsigned long long, void*, int*)+0x51>
c000b3dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f0:	5b                   	pop    ebx
c000b3f1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f4:	ff e0                	jmp    eax
c000b3f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3fb:	eb 05                	jmp    c000b402 <File::write(unsigned long long, void*, int*)+0x56>
c000b3fd:	b8 05 00 00 00       	mov    eax,0x5
c000b402:	5b                   	pop    ebx
c000b403:	c3                   	ret    

c000b404 <Directory::read(unsigned long long, void*, int*)>:
c000b404:	53                   	push   ebx
c000b405:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b409:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b40d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b414:	83 f8 19             	cmp    eax,0x19
c000b417:	77 35                	ja     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b419:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b420:	85 c0                	test   eax,eax
c000b422:	74 2a                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b424:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b42a:	85 c0                	test   eax,eax
c000b42c:	74 20                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b432:	74 21                	je     c000b455 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b434:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b436:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b440:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b448:	5b                   	pop    ebx
c000b449:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b44c:	ff e0                	jmp    eax
c000b44e:	b8 0b 00 00 00       	mov    eax,0xb
c000b453:	eb 05                	jmp    c000b45a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b455:	b8 05 00 00 00       	mov    eax,0x5
c000b45a:	5b                   	pop    ebx
c000b45b:	c3                   	ret    

c000b45c <Directory::write(unsigned long long, void*, int*)>:
c000b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b460:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b467:	b8 0b 00 00 00       	mov    eax,0xb
c000b46c:	83 fa 19             	cmp    edx,0x19
c000b46f:	77 18                	ja     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b471:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b478:	85 d2                	test   edx,edx
c000b47a:	74 0d                	je     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b47c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b483:	19 c0                	sbb    eax,eax
c000b485:	83 e0 0a             	and    eax,0xa
c000b488:	40                   	inc    eax
c000b489:	c3                   	ret    

c000b48a <File::isAtty()>:
c000b48a:	31 c0                	xor    eax,eax
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::isAtty()>:
c000b48e:	31 c0                	xor    eax,eax
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b492:	b8 0a 00 00 00       	mov    eax,0xa
c000b497:	c3                   	ret    

c000b498 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b498:	b8 0a 00 00 00       	mov    eax,0xa
c000b49d:	c3                   	ret    

c000b49e <Filesystem::allocateSwapfile(char const*, int)>:
c000b49e:	31 c0                	xor    eax,eax
c000b4a0:	31 d2                	xor    edx,edx
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <File::~File()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	ba f4 14 02 c0       	mov    edx,0xc00214f4
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	89 10                	mov    DWORD PTR [eax],edx
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	50                   	push   eax
c000b4ba:	e8 e5 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	90                   	nop
c000b4c3:	83 c4 0c             	add    esp,0xc
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <File::~File()>:
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d2:	e8 cd ff ff ff       	call   c000b4a4 <File::~File()>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	83 ec 08             	sub    esp,0x8
c000b4dd:	68 14 01 00 00       	push   0x114
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 2d f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 c4 0c             	add    esp,0xc
c000b4f1:	c3                   	ret    

c000b4f2 <Directory::~Directory()>:
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	ba 10 15 02 c0       	mov    edx,0xc0021510
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	89 10                	mov    DWORD PTR [eax],edx
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	83 ec 0c             	sub    esp,0xc
c000b507:	50                   	push   eax
c000b508:	e8 97 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	90                   	nop
c000b511:	83 c4 0c             	add    esp,0xc
c000b514:	c3                   	ret    
c000b515:	90                   	nop

c000b516 <Directory::~Directory()>:
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	83 ec 0c             	sub    esp,0xc
c000b51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b520:	e8 cd ff ff ff       	call   c000b4f2 <Directory::~Directory()>
c000b525:	83 c4 10             	add    esp,0x10
c000b528:	83 ec 08             	sub    esp,0x8
c000b52b:	68 14 01 00 00       	push   0x114
c000b530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b534:	e8 df f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b539:	83 c4 10             	add    esp,0x10
c000b53c:	83 c4 0c             	add    esp,0xc
c000b53f:	c3                   	ret    

c000b540 <Filesystem::Filesystem()>:
c000b540:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000b545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b549:	89 10                	mov    DWORD PTR [eax],edx
c000b54b:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b561:	90                   	nop
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Filesystem::~Filesystem()>:
c000b564:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000b569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56d:	89 10                	mov    DWORD PTR [eax],edx
c000b56f:	90                   	nop
c000b570:	c3                   	ret    
c000b571:	90                   	nop

c000b572 <Filesystem::~Filesystem()>:
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b579:	e8 e6 ff ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c000b57e:	83 c4 04             	add    esp,0x4
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 08                	push   0x8
c000b586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58a:	e8 89 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 0c             	add    esp,0xc
c000b595:	c3                   	ret    

c000b596 <Fs::getcwd(Process*, char*, int)>:
c000b596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59a:	31 c0                	xor    eax,eax
c000b59c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a3:	7d 15                	jge    c000b5ba <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b3:	84 c9                	test   cl,cl
c000b5b5:	74 06                	je     c000b5bd <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b7:	40                   	inc    eax
c000b5b8:	eb e2                	jmp    c000b59c <Fs::getcwd(Process*, char*, int)+0x6>
c000b5ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5bd:	31 c0                	xor    eax,eax
c000b5bf:	c3                   	ret    

c000b5c0 <Fs::initVFS()>:
c000b5c0:	83 ec 18             	sub    esp,0x18
c000b5c3:	6a 08                	push   0x8
c000b5c5:	e8 ec c4 ff ff       	call   c0007ab6 <malloc>
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 1a e2 00 00       	call   c00197ec <FAT::FAT()>
c000b5d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d9:	e8 d8 c4 ff ff       	call   c0007ab6 <malloc>
c000b5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e1:	e8 32 f1 00 00       	call   c001a718 <ISO9660::ISO9660()>
c000b5e6:	83 c4 1c             	add    esp,0x1c
c000b5e9:	c3                   	ret    

c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f4:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5fb:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b602:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b60a:	68 00 04 00 00       	push   0x400
c000b60f:	6a 00                	push   0x0
c000b611:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b615:	57                   	push   edi
c000b616:	e8 d5 4e ff ff       	call   c00004f0 <memset>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b622:	75 0b                	jne    c000b62f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b624:	50                   	push   eax
c000b625:	50                   	push   eax
c000b626:	55                   	push   ebp
c000b627:	57                   	push   edi
c000b628:	e8 13 50 ff ff       	call   c0000640 <strcpy>
c000b62d:	eb 51                	jmp    c000b680 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b62f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b633:	83 f8 5c             	cmp    eax,0x5c
c000b636:	74 05                	je     c000b63d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b638:	83 f8 2f             	cmp    eax,0x2f
c000b63b:	75 1e                	jne    c000b65b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b63d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b644:	8a 00                	mov    al,BYTE PTR [eax]
c000b646:	3c 60                	cmp    al,0x60
c000b648:	7e 03                	jle    c000b64d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b64a:	83 e8 20             	sub    eax,0x20
c000b64d:	88 04 24             	mov    BYTE PTR [esp],al
c000b650:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b657:	50                   	push   eax
c000b658:	50                   	push   eax
c000b659:	eb 1e                	jmp    c000b679 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b65b:	50                   	push   eax
c000b65c:	50                   	push   eax
c000b65d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b664:	57                   	push   edi
c000b665:	e8 d6 4f ff ff       	call   c0000640 <strcpy>
c000b66a:	58                   	pop    eax
c000b66b:	5a                   	pop    edx
c000b66c:	68 43 24 02 c0       	push   0xc0022443
c000b671:	57                   	push   edi
c000b672:	e8 c9 51 ff ff       	call   c0000840 <strcat>
c000b677:	59                   	pop    ecx
c000b678:	58                   	pop    eax
c000b679:	55                   	push   ebp
c000b67a:	57                   	push   edi
c000b67b:	e8 c0 51 ff ff       	call   c0000840 <strcat>
c000b680:	83 c4 10             	add    esp,0x10
c000b683:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b686:	3c 60                	cmp    al,0x60
c000b688:	7e 03                	jle    c000b68d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b68a:	83 e8 20             	sub    eax,0x20
c000b68d:	88 04 24             	mov    BYTE PTR [esp],al
c000b690:	88 06                	mov    BYTE PTR [esi],al
c000b692:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b699:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b69f:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b6a3:	bf 03 00 00 00       	mov    edi,0x3
c000b6a8:	b8 03 00 00 00       	mov    eax,0x3
c000b6ad:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6b1:	89 e9                	mov    ecx,ebp
c000b6b3:	85 ed                	test   ebp,ebp
c000b6b5:	0f 84 97 00 00 00    	je     c000b752 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6bb:	8d 57 01             	lea    edx,[edi+0x1]
c000b6be:	83 fd 2f             	cmp    ebp,0x2f
c000b6c1:	74 05                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6c3:	83 fd 5c             	cmp    ebp,0x5c
c000b6c6:	75 12                	jne    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6c8:	89 c5                	mov    ebp,eax
c000b6ca:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6cf:	74 09                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d1:	40                   	inc    eax
c000b6d2:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6d6:	89 d7                	mov    edi,edx
c000b6d8:	eb d3                	jmp    c000b6ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6da:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6df:	0f be e9             	movsx  ebp,cl
c000b6e2:	75 5e                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e4:	83 fd 2e             	cmp    ebp,0x2e
c000b6e7:	75 59                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e9:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6ed:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6f2:	74 18                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f4:	83 fd 2e             	cmp    ebp,0x2e
c000b6f7:	74 53                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6f9:	89 fa                	mov    edx,edi
c000b6fb:	42                   	inc    edx
c000b6fc:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b700:	83 f9 2f             	cmp    ecx,0x2f
c000b703:	74 f6                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b705:	83 f9 5c             	cmp    ecx,0x5c
c000b708:	74 f1                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b70a:	eb ca                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b70c:	83 fd 2e             	cmp    ebp,0x2e
c000b70f:	74 3b                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b711:	83 f8 03             	cmp    eax,0x3
c000b714:	74 c0                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b716:	42                   	inc    edx
c000b717:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b71b:	83 f9 5c             	cmp    ecx,0x5c
c000b71e:	74 f6                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b720:	83 f9 2f             	cmp    ecx,0x2f
c000b723:	74 f1                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b725:	48                   	dec    eax
c000b726:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b72a:	75 06                	jne    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b72c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b730:	eb f3                	jmp    c000b725 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b732:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b736:	74 07                	je     c000b73f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b738:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b73c:	48                   	dec    eax
c000b73d:	eb f3                	jmp    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b73f:	40                   	inc    eax
c000b740:	eb 94                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b742:	83 fd 5c             	cmp    ebp,0x5c
c000b745:	74 8f                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b747:	83 fd 2f             	cmp    ebp,0x2f
c000b74a:	74 8a                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b74f:	40                   	inc    eax
c000b750:	eb 84                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b752:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b756:	83 ec 0c             	sub    esp,0xc
c000b759:	56                   	push   esi
c000b75a:	e8 11 4e ff ff       	call   c0000570 <strlen>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b767:	75 26                	jne    c000b78f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a5>
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	56                   	push   esi
c000b76d:	e8 fe 4d ff ff       	call   c0000570 <strlen>
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b77a:	74 26                	je     c000b7a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1b8>
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	56                   	push   esi
c000b780:	e8 eb 4d ff ff       	call   c0000570 <strlen>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b78d:	eb c7                	jmp    c000b756 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b78f:	83 ec 0c             	sub    esp,0xc
c000b792:	56                   	push   esi
c000b793:	e8 d8 4d ff ff       	call   c0000570 <strlen>
c000b798:	83 c4 10             	add    esp,0x10
c000b79b:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b7a0:	74 c7                	je     c000b769 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17f>
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	56                   	push   esi
c000b7a6:	e8 c5 4d ff ff       	call   c0000570 <strlen>
c000b7ab:	0f be 7c 06 fe       	movsx  edi,BYTE PTR [esi+eax*1-0x2]
c000b7b0:	89 34 24             	mov    DWORD PTR [esp],esi
c000b7b3:	e8 b8 4d ff ff       	call   c0000570 <strlen>
c000b7b8:	57                   	push   edi
c000b7b9:	0f be 44 06 ff       	movsx  eax,BYTE PTR [esi+eax*1-0x1]
c000b7be:	50                   	push   eax
c000b7bf:	56                   	push   esi
c000b7c0:	68 2f 14 02 c0       	push   0xc002142f
c000b7c5:	e8 7b f1 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b7ca:	83 c4 14             	add    esp,0x14
c000b7cd:	56                   	push   esi
c000b7ce:	e8 9d 4d ff ff       	call   c0000570 <strlen>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	80 7c 06 ff 40       	cmp    BYTE PTR [esi+eax*1-0x1],0x40
c000b7db:	74 04                	je     c000b7e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f7>
c000b7dd:	31 ff                	xor    edi,edi
c000b7df:	eb 66                	jmp    c000b847 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x25d>
c000b7e1:	83 ec 0c             	sub    esp,0xc
c000b7e4:	56                   	push   esi
c000b7e5:	e8 86 4d ff ff       	call   c0000570 <strlen>
c000b7ea:	83 c4 10             	add    esp,0x10
c000b7ed:	80 7c 06 fe 40       	cmp    BYTE PTR [esi+eax*1-0x2],0x40
c000b7f2:	75 e9                	jne    c000b7dd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f3>
c000b7f4:	83 ec 0c             	sub    esp,0xc
c000b7f7:	56                   	push   esi
c000b7f8:	e8 73 4d ff ff       	call   c0000570 <strlen>
c000b7fd:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b802:	89 34 24             	mov    DWORD PTR [esp],esi
c000b805:	e8 66 4d ff ff       	call   c0000570 <strlen>
c000b80a:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b80f:	5b                   	pop    ebx
c000b810:	5f                   	pop    edi
c000b811:	56                   	push   esi
c000b812:	68 42 14 02 c0       	push   0xc0021442
c000b817:	e8 29 f1 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b81c:	83 c4 10             	add    esp,0x10
c000b81f:	eb 43                	jmp    c000b864 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x27a>
c000b821:	50                   	push   eax
c000b822:	50                   	push   eax
c000b823:	56                   	push   esi
c000b824:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b828:	55                   	push   ebp
c000b829:	e8 12 4e ff ff       	call   c0000640 <strcpy>
c000b82e:	5a                   	pop    edx
c000b82f:	59                   	pop    ecx
c000b830:	56                   	push   esi
c000b831:	55                   	push   ebp
c000b832:	e8 14 f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b837:	83 c4 10             	add    esp,0x10
c000b83a:	48                   	dec    eax
c000b83b:	75 27                	jne    c000b864 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x27a>
c000b83d:	8d 47 01             	lea    eax,[edi+0x1]
c000b840:	83 ff 14             	cmp    edi,0x14
c000b843:	74 08                	je     c000b84d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x263>
c000b845:	89 c7                	mov    edi,eax
c000b847:	85 db                	test   ebx,ebx
c000b849:	75 d6                	jne    c000b821 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x237>
c000b84b:	eb 17                	jmp    c000b864 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x27a>
c000b84d:	83 ec 0c             	sub    esp,0xc
c000b850:	bf 15 00 00 00       	mov    edi,0x15
c000b855:	68 57 14 02 c0       	push   0xc0021457
c000b85a:	e8 62 5b 00 00       	call   c00113c1 <KePanic(char const*)>
c000b85f:	83 c4 10             	add    esp,0x10
c000b862:	eb e3                	jmp    c000b847 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x25d>
c000b864:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b86a:	5b                   	pop    ebx
c000b86b:	5e                   	pop    esi
c000b86c:	5f                   	pop    edi
c000b86d:	5d                   	pop    ebp
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <File::File(char const*, Process*)>:
c000b870:	83 ec 0c             	sub    esp,0xc
c000b873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b877:	83 ec 08             	sub    esp,0x8
c000b87a:	6a 00                	push   0x0
c000b87c:	50                   	push   eax
c000b87d:	e8 3c d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b882:	83 c4 10             	add    esp,0x10
c000b885:	ba f4 14 02 c0       	mov    edx,0xc00214f4
c000b88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88e:	89 10                	mov    DWORD PTR [eax],edx
c000b890:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b895:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b899:	0f 95 c0             	setne  al
c000b89c:	0f b6 c0             	movzx  eax,al
c000b89f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b8a3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b8a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8ad:	83 c2 0d             	add    edx,0xd
c000b8b0:	50                   	push   eax
c000b8b1:	51                   	push   ecx
c000b8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b6:	52                   	push   edx
c000b8b7:	e8 2e fd ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b8c6:	83 e8 41             	sub    eax,0x41
c000b8c9:	88 c2                	mov    dl,al
c000b8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8cf:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8e7:	0f b6 c0             	movzx  eax,al
c000b8ea:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8f1:	85 c0                	test   eax,eax
c000b8f3:	74 3e                	je     c000b933 <File::File(char const*, Process*)+0xc3>
c000b8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8ff:	0f b6 c0             	movzx  eax,al
c000b902:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b909:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b90f:	85 c0                	test   eax,eax
c000b911:	75 20                	jne    c000b933 <File::File(char const*, Process*)+0xc3>
c000b913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b917:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b91d:	0f b6 c0             	movzx  eax,al
c000b920:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b927:	83 ec 0c             	sub    esp,0xc
c000b92a:	50                   	push   eax
c000b92b:	e8 82 21 00 00       	call   c000dab2 <LogicalDisk::mount()>
c000b930:	83 c4 10             	add    esp,0x10
c000b933:	90                   	nop
c000b934:	83 c4 0c             	add    esp,0xc
c000b937:	c3                   	ret    

c000b938 <File::open(FileOpenMode)>:
c000b938:	53                   	push   ebx
c000b939:	b8 0b 00 00 00       	mov    eax,0xb
c000b93e:	83 ec 08             	sub    esp,0x8
c000b941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b945:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b94c:	83 fa 19             	cmp    edx,0x19
c000b94f:	77 40                	ja     c000b991 <File::open(FileOpenMode)+0x59>
c000b951:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b958:	85 d2                	test   edx,edx
c000b95a:	74 35                	je     c000b991 <File::open(FileOpenMode)+0x59>
c000b95c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b962:	85 d2                	test   edx,edx
c000b964:	74 2b                	je     c000b991 <File::open(FileOpenMode)+0x59>
c000b966:	b8 06 00 00 00       	mov    eax,0x6
c000b96b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b96f:	75 20                	jne    c000b991 <File::open(FileOpenMode)+0x59>
c000b971:	8b 02                	mov    eax,DWORD PTR [edx]
c000b973:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	51                   	push   ecx
c000b97e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b981:	51                   	push   ecx
c000b982:	52                   	push   edx
c000b983:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	85 c0                	test   eax,eax
c000b98b:	75 04                	jne    c000b991 <File::open(FileOpenMode)+0x59>
c000b98d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b991:	83 c4 08             	add    esp,0x8
c000b994:	5b                   	pop    ebx
c000b995:	c3                   	ret    

c000b996 <File::close()>:
c000b996:	53                   	push   ebx
c000b997:	b8 0b 00 00 00       	mov    eax,0xb
c000b99c:	83 ec 08             	sub    esp,0x8
c000b99f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9aa:	83 f9 19             	cmp    ecx,0x19
c000b9ad:	77 41                	ja     c000b9f0 <File::close()+0x5a>
c000b9af:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9b6:	85 db                	test   ebx,ebx
c000b9b8:	74 36                	je     c000b9f0 <File::close()+0x5a>
c000b9ba:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b9c1:	74 2d                	je     c000b9f0 <File::close()+0x5a>
c000b9c3:	b8 05 00 00 00       	mov    eax,0x5
c000b9c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9cc:	74 22                	je     c000b9f0 <File::close()+0x5a>
c000b9ce:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b9d2:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b9d9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b9df:	53                   	push   ebx
c000b9e0:	53                   	push   ebx
c000b9e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b9e3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b9e9:	50                   	push   eax
c000b9ea:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b9ed:	83 c4 10             	add    esp,0x10
c000b9f0:	83 c4 08             	add    esp,0x8
c000b9f3:	5b                   	pop    ebx
c000b9f4:	c3                   	ret    
c000b9f5:	90                   	nop

c000b9f6 <File::seek(unsigned long long)>:
c000b9f6:	56                   	push   esi
c000b9f7:	53                   	push   ebx
c000b9f8:	b8 0b 00 00 00       	mov    eax,0xb
c000b9fd:	51                   	push   ecx
c000b9fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba06:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba11:	83 fa 19             	cmp    edx,0x19
c000ba14:	77 31                	ja     c000ba47 <File::seek(unsigned long long)+0x51>
c000ba16:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba1d:	85 d2                	test   edx,edx
c000ba1f:	74 26                	je     c000ba47 <File::seek(unsigned long long)+0x51>
c000ba21:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba27:	85 d2                	test   edx,edx
c000ba29:	74 1c                	je     c000ba47 <File::seek(unsigned long long)+0x51>
c000ba2b:	b8 05 00 00 00       	mov    eax,0x5
c000ba30:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba34:	74 11                	je     c000ba47 <File::seek(unsigned long long)+0x51>
c000ba36:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba38:	53                   	push   ebx
c000ba39:	51                   	push   ecx
c000ba3a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba40:	52                   	push   edx
c000ba41:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ba44:	83 c4 10             	add    esp,0x10
c000ba47:	5a                   	pop    edx
c000ba48:	5b                   	pop    ebx
c000ba49:	5e                   	pop    esi
c000ba4a:	c3                   	ret    
c000ba4b:	90                   	nop

c000ba4c <File::truncate(unsigned long long)>:
c000ba4c:	56                   	push   esi
c000ba4d:	53                   	push   ebx
c000ba4e:	b8 0b 00 00 00       	mov    eax,0xb
c000ba53:	51                   	push   ecx
c000ba54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba5c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba67:	83 fa 19             	cmp    edx,0x19
c000ba6a:	77 31                	ja     c000ba9d <File::truncate(unsigned long long)+0x51>
c000ba6c:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba73:	85 d2                	test   edx,edx
c000ba75:	74 26                	je     c000ba9d <File::truncate(unsigned long long)+0x51>
c000ba77:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba7d:	85 d2                	test   edx,edx
c000ba7f:	74 1c                	je     c000ba9d <File::truncate(unsigned long long)+0x51>
c000ba81:	b8 05 00 00 00       	mov    eax,0x5
c000ba86:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba8a:	74 11                	je     c000ba9d <File::truncate(unsigned long long)+0x51>
c000ba8c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba8e:	53                   	push   ebx
c000ba8f:	51                   	push   ecx
c000ba90:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba96:	52                   	push   edx
c000ba97:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	5a                   	pop    edx
c000ba9e:	5b                   	pop    ebx
c000ba9f:	5e                   	pop    esi
c000baa0:	c3                   	ret    
c000baa1:	90                   	nop

c000baa2 <File::tell(unsigned long long*)>:
c000baa2:	83 ec 0c             	sub    esp,0xc
c000baa5:	b8 0b 00 00 00       	mov    eax,0xb
c000baaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000baae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bab5:	83 fa 19             	cmp    edx,0x19
c000bab8:	77 34                	ja     c000baee <File::tell(unsigned long long*)+0x4c>
c000baba:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bac1:	85 d2                	test   edx,edx
c000bac3:	74 29                	je     c000baee <File::tell(unsigned long long*)+0x4c>
c000bac5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bacb:	85 d2                	test   edx,edx
c000bacd:	74 1f                	je     c000baee <File::tell(unsigned long long*)+0x4c>
c000bacf:	b8 05 00 00 00       	mov    eax,0x5
c000bad4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bad8:	74 14                	je     c000baee <File::tell(unsigned long long*)+0x4c>
c000bada:	50                   	push   eax
c000badb:	8b 02                	mov    eax,DWORD PTR [edx]
c000badd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bae1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bae7:	52                   	push   edx
c000bae8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000baeb:	83 c4 10             	add    esp,0x10
c000baee:	83 c4 0c             	add    esp,0xc
c000baf1:	c3                   	ret    

c000baf2 <File::rewind()>:
c000baf2:	83 ec 10             	sub    esp,0x10
c000baf5:	6a 00                	push   0x0
c000baf7:	6a 00                	push   0x0
c000baf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafd:	e8 f4 fe ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c000bb02:	83 c4 1c             	add    esp,0x1c
c000bb05:	c3                   	ret    

c000bb06 <File::unlink()>:
c000bb06:	83 ec 0c             	sub    esp,0xc
c000bb09:	b8 0b 00 00 00       	mov    eax,0xb
c000bb0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb19:	83 f9 19             	cmp    ecx,0x19
c000bb1c:	77 2f                	ja     c000bb4d <File::unlink()+0x47>
c000bb1e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb25:	85 c9                	test   ecx,ecx
c000bb27:	74 24                	je     c000bb4d <File::unlink()+0x47>
c000bb29:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb2f:	85 c9                	test   ecx,ecx
c000bb31:	74 1a                	je     c000bb4d <File::unlink()+0x47>
c000bb33:	b8 06 00 00 00       	mov    eax,0x6
c000bb38:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb3c:	75 0f                	jne    c000bb4d <File::unlink()+0x47>
c000bb3e:	83 c2 0d             	add    edx,0xd
c000bb41:	50                   	push   eax
c000bb42:	50                   	push   eax
c000bb43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb45:	52                   	push   edx
c000bb46:	51                   	push   ecx
c000bb47:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 c4 0c             	add    esp,0xc
c000bb50:	c3                   	ret    
c000bb51:	90                   	nop

c000bb52 <File::rename(char const*)>:
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	b8 0b 00 00 00       	mov    eax,0xb
c000bb5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb65:	83 f9 19             	cmp    ecx,0x19
c000bb68:	77 32                	ja     c000bb9c <File::rename(char const*)+0x4a>
c000bb6a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb71:	85 c9                	test   ecx,ecx
c000bb73:	74 27                	je     c000bb9c <File::rename(char const*)+0x4a>
c000bb75:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb7b:	85 c9                	test   ecx,ecx
c000bb7d:	74 1d                	je     c000bb9c <File::rename(char const*)+0x4a>
c000bb7f:	b8 06 00 00 00       	mov    eax,0x6
c000bb84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb88:	75 12                	jne    c000bb9c <File::rename(char const*)+0x4a>
c000bb8a:	83 c2 0d             	add    edx,0xd
c000bb8d:	50                   	push   eax
c000bb8e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb94:	52                   	push   edx
c000bb95:	51                   	push   ecx
c000bb96:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb99:	83 c4 10             	add    esp,0x10
c000bb9c:	83 c4 0c             	add    esp,0xc
c000bb9f:	c3                   	ret    

c000bba0 <File::chfatattr(unsigned char, unsigned char)>:
c000bba0:	57                   	push   edi
c000bba1:	b8 0b 00 00 00       	mov    eax,0xb
c000bba6:	56                   	push   esi
c000bba7:	53                   	push   ebx
c000bba8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbb0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbb7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bbbb:	83 f9 19             	cmp    ecx,0x19
c000bbbe:	77 37                	ja     c000bbf7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbc0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbc7:	85 c9                	test   ecx,ecx
c000bbc9:	74 2c                	je     c000bbf7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbcb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbd1:	85 c9                	test   ecx,ecx
c000bbd3:	74 22                	je     c000bbf7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbd5:	b8 06 00 00 00       	mov    eax,0x6
c000bbda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbde:	75 17                	jne    c000bbf7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbe0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bbe2:	89 f0                	mov    eax,esi
c000bbe4:	83 c2 0d             	add    edx,0xd
c000bbe7:	0f b6 f0             	movzx  esi,al
c000bbea:	0f b6 db             	movzx  ebx,bl
c000bbed:	56                   	push   esi
c000bbee:	53                   	push   ebx
c000bbef:	52                   	push   edx
c000bbf0:	51                   	push   ecx
c000bbf1:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bbf4:	83 c4 10             	add    esp,0x10
c000bbf7:	5b                   	pop    ebx
c000bbf8:	5e                   	pop    esi
c000bbf9:	5f                   	pop    edi
c000bbfa:	c3                   	ret    
c000bbfb:	90                   	nop

c000bbfc <File::exists()>:
c000bbfc:	83 ec 0c             	sub    esp,0xc
c000bbff:	31 c0                	xor    eax,eax
c000bc01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc0c:	83 f9 19             	cmp    ecx,0x19
c000bc0f:	77 24                	ja     c000bc35 <File::exists()+0x39>
c000bc11:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc18:	85 c9                	test   ecx,ecx
c000bc1a:	74 19                	je     c000bc35 <File::exists()+0x39>
c000bc1c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc22:	85 c9                	test   ecx,ecx
c000bc24:	74 0f                	je     c000bc35 <File::exists()+0x39>
c000bc26:	83 c2 0d             	add    edx,0xd
c000bc29:	50                   	push   eax
c000bc2a:	50                   	push   eax
c000bc2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc2d:	52                   	push   edx
c000bc2e:	51                   	push   ecx
c000bc2f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	83 c4 0c             	add    esp,0xc
c000bc38:	c3                   	ret    
c000bc39:	90                   	nop

c000bc3a <File::stat(unsigned long long*, bool*)>:
c000bc3a:	56                   	push   esi
c000bc3b:	53                   	push   ebx
c000bc3c:	50                   	push   eax
c000bc3d:	b8 0b 00 00 00       	mov    eax,0xb
c000bc42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc55:	83 f9 19             	cmp    ecx,0x19
c000bc58:	77 3d                	ja     c000bc97 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc5a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc61:	85 c9                	test   ecx,ecx
c000bc63:	74 32                	je     c000bc97 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc65:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc6b:	85 c9                	test   ecx,ecx
c000bc6d:	74 28                	je     c000bc97 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc71:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc75:	74 13                	je     c000bc8a <File::stat(unsigned long long*, bool*)+0x50>
c000bc77:	83 ec 04             	sub    esp,0x4
c000bc7a:	56                   	push   esi
c000bc7b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc81:	51                   	push   ecx
c000bc82:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc85:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc88:	eb 0a                	jmp    c000bc94 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc8a:	53                   	push   ebx
c000bc8b:	83 c2 0d             	add    edx,0xd
c000bc8e:	56                   	push   esi
c000bc8f:	52                   	push   edx
c000bc90:	51                   	push   ecx
c000bc91:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc94:	83 c4 10             	add    esp,0x10
c000bc97:	5a                   	pop    edx
c000bc98:	5b                   	pop    ebx
c000bc99:	5e                   	pop    esi
c000bc9a:	c3                   	ret    

c000bc9b <Fs::setcwd(Process*, char*)>:
c000bc9b:	55                   	push   ebp
c000bc9c:	57                   	push   edi
c000bc9d:	56                   	push   esi
c000bc9e:	53                   	push   ebx
c000bc9f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bca5:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bcac:	6a 00                	push   0x0
c000bcae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bcb4:	57                   	push   edi
c000bcb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bcbc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bcc0:	56                   	push   esi
c000bcc1:	e8 24 f9 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bcc6:	89 34 24             	mov    DWORD PTR [esp],esi
c000bcc9:	e8 a2 48 ff ff       	call   c0000570 <strlen>
c000bcce:	83 c4 10             	add    esp,0x10
c000bcd1:	83 f8 02             	cmp    eax,0x2
c000bcd4:	77 15                	ja     c000bceb <Fs::setcwd(Process*, char*)+0x50>
c000bcd6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bcdb:	83 eb 41             	sub    ebx,0x41
c000bcde:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bce5:	85 c0                	test   eax,eax
c000bce7:	75 1c                	jne    c000bd05 <Fs::setcwd(Process*, char*)+0x6a>
c000bce9:	eb 2f                	jmp    c000bd1a <Fs::setcwd(Process*, char*)+0x7f>
c000bceb:	83 ec 0c             	sub    esp,0xc
c000bcee:	56                   	push   esi
c000bcef:	e8 7c 48 ff ff       	call   c0000570 <strlen>
c000bcf4:	83 c4 10             	add    esp,0x10
c000bcf7:	83 f8 03             	cmp    eax,0x3
c000bcfa:	75 57                	jne    c000bd53 <Fs::setcwd(Process*, char*)+0xb8>
c000bcfc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bd01:	75 50                	jne    c000bd53 <Fs::setcwd(Process*, char*)+0xb8>
c000bd03:	eb d1                	jmp    c000bcd6 <Fs::setcwd(Process*, char*)+0x3b>
c000bd05:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bd0c:	75 0c                	jne    c000bd1a <Fs::setcwd(Process*, char*)+0x7f>
c000bd0e:	83 ec 0c             	sub    esp,0xc
c000bd11:	50                   	push   eax
c000bd12:	e8 9b 1d 00 00       	call   c000dab2 <LogicalDisk::mount()>
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	b8 03 00 00 00       	mov    eax,0x3
c000bd1f:	83 fb 19             	cmp    ebx,0x19
c000bd22:	0f 87 c6 00 00 00    	ja     c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bd28:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bd2f:	b8 05 00 00 00       	mov    eax,0x5
c000bd34:	85 d2                	test   edx,edx
c000bd36:	0f 84 b2 00 00 00    	je     c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bd3c:	b8 06 00 00 00       	mov    eax,0x6
c000bd41:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bd48:	0f 85 92 00 00 00    	jne    c000bde0 <Fs::setcwd(Process*, char*)+0x145>
c000bd4e:	e9 9b 00 00 00       	jmp    c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bd53:	83 ec 0c             	sub    esp,0xc
c000bd56:	68 14 01 00 00       	push   0x114
c000bd5b:	e8 56 bd ff ff       	call   c0007ab6 <malloc>
c000bd60:	83 c4 0c             	add    esp,0xc
c000bd63:	89 c3                	mov    ebx,eax
c000bd65:	55                   	push   ebp
c000bd66:	56                   	push   esi
c000bd67:	50                   	push   eax
c000bd68:	e8 03 fb ff ff       	call   c000b870 <File::File(char const*, Process*)>
c000bd6d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd72:	83 c4 0c             	add    esp,0xc
c000bd75:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd79:	50                   	push   eax
c000bd7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd7e:	50                   	push   eax
c000bd7f:	53                   	push   ebx
c000bd80:	e8 b5 fe ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c000bd85:	83 c4 10             	add    esp,0x10
c000bd88:	83 f8 02             	cmp    eax,0x2
c000bd8b:	74 27                	je     c000bdb4 <Fs::setcwd(Process*, char*)+0x119>
c000bd8d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd92:	75 1c                	jne    c000bdb0 <Fs::setcwd(Process*, char*)+0x115>
c000bd94:	b8 02 00 00 00       	mov    eax,0x2
c000bd99:	85 db                	test   ebx,ebx
c000bd9b:	74 51                	je     c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bd9d:	83 ec 0c             	sub    esp,0xc
c000bda0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bda2:	53                   	push   ebx
c000bda3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	b8 02 00 00 00       	mov    eax,0x2
c000bdae:	eb 3e                	jmp    c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bdb0:	85 c0                	test   eax,eax
c000bdb2:	74 1c                	je     c000bdd0 <Fs::setcwd(Process*, char*)+0x135>
c000bdb4:	b8 01 00 00 00       	mov    eax,0x1
c000bdb9:	85 db                	test   ebx,ebx
c000bdbb:	74 31                	je     c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdc2:	53                   	push   ebx
c000bdc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bdc6:	83 c4 10             	add    esp,0x10
c000bdc9:	b8 01 00 00 00       	mov    eax,0x1
c000bdce:	eb 1e                	jmp    c000bdee <Fs::setcwd(Process*, char*)+0x153>
c000bdd0:	85 db                	test   ebx,ebx
c000bdd2:	74 0c                	je     c000bde0 <Fs::setcwd(Process*, char*)+0x145>
c000bdd4:	83 ec 0c             	sub    esp,0xc
c000bdd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdd9:	53                   	push   ebx
c000bdda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	50                   	push   eax
c000bde1:	50                   	push   eax
c000bde2:	56                   	push   esi
c000bde3:	57                   	push   edi
c000bde4:	e8 57 48 ff ff       	call   c0000640 <strcpy>
c000bde9:	83 c4 10             	add    esp,0x10
c000bdec:	31 c0                	xor    eax,eax
c000bdee:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bdf4:	5b                   	pop    ebx
c000bdf5:	5e                   	pop    esi
c000bdf6:	5f                   	pop    edi
c000bdf7:	5d                   	pop    ebp
c000bdf8:	c3                   	ret    
c000bdf9:	90                   	nop

c000bdfa <Directory::Directory(char const*, Process*)>:
c000bdfa:	83 ec 0c             	sub    esp,0xc
c000bdfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be01:	83 ec 08             	sub    esp,0x8
c000be04:	6a 00                	push   0x0
c000be06:	50                   	push   eax
c000be07:	e8 b2 d3 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000be0c:	83 c4 10             	add    esp,0x10
c000be0f:	ba 10 15 02 c0       	mov    edx,0xc0021510
c000be14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be18:	89 10                	mov    DWORD PTR [eax],edx
c000be1a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000be1f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000be23:	0f 95 c0             	setne  al
c000be26:	0f b6 c0             	movzx  eax,al
c000be29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be2d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000be33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be37:	83 c2 0d             	add    edx,0xd
c000be3a:	50                   	push   eax
c000be3b:	51                   	push   ecx
c000be3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be40:	52                   	push   edx
c000be41:	e8 a4 f7 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be46:	83 c4 10             	add    esp,0x10
c000be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be50:	83 e8 41             	sub    eax,0x41
c000be53:	88 c2                	mov    dl,al
c000be55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be59:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be63:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be71:	0f b6 c0             	movzx  eax,al
c000be74:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be7b:	85 c0                	test   eax,eax
c000be7d:	74 3e                	je     c000bebd <Directory::Directory(char const*, Process*)+0xc3>
c000be7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be83:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be89:	0f b6 c0             	movzx  eax,al
c000be8c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be99:	85 c0                	test   eax,eax
c000be9b:	75 20                	jne    c000bebd <Directory::Directory(char const*, Process*)+0xc3>
c000be9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bea7:	0f b6 c0             	movzx  eax,al
c000beaa:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000beb1:	83 ec 0c             	sub    esp,0xc
c000beb4:	50                   	push   eax
c000beb5:	e8 f8 1b 00 00       	call   c000dab2 <LogicalDisk::mount()>
c000beba:	83 c4 10             	add    esp,0x10
c000bebd:	90                   	nop
c000bebe:	83 c4 0c             	add    esp,0xc
c000bec1:	c3                   	ret    

c000bec2 <Directory::open()>:
c000bec2:	53                   	push   ebx
c000bec3:	b8 0b 00 00 00       	mov    eax,0xb
c000bec8:	83 ec 08             	sub    esp,0x8
c000becb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000becf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bed6:	83 fa 19             	cmp    edx,0x19
c000bed9:	77 3d                	ja     c000bf18 <Directory::open()+0x56>
c000bedb:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bee2:	85 d2                	test   edx,edx
c000bee4:	74 32                	je     c000bf18 <Directory::open()+0x56>
c000bee6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000beec:	85 d2                	test   edx,edx
c000beee:	74 28                	je     c000bf18 <Directory::open()+0x56>
c000bef0:	b8 06 00 00 00       	mov    eax,0x6
c000bef5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bef9:	75 1d                	jne    c000bf18 <Directory::open()+0x56>
c000befb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bf01:	50                   	push   eax
c000bf02:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf04:	51                   	push   ecx
c000bf05:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bf08:	51                   	push   ecx
c000bf09:	52                   	push   edx
c000bf0a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bf0d:	83 c4 10             	add    esp,0x10
c000bf10:	85 c0                	test   eax,eax
c000bf12:	75 04                	jne    c000bf18 <Directory::open()+0x56>
c000bf14:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bf18:	83 c4 08             	add    esp,0x8
c000bf1b:	5b                   	pop    ebx
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <Directory::close()>:
c000bf1e:	53                   	push   ebx
c000bf1f:	b8 0b 00 00 00       	mov    eax,0xb
c000bf24:	83 ec 08             	sub    esp,0x8
c000bf27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf2b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf32:	83 f9 19             	cmp    ecx,0x19
c000bf35:	77 41                	ja     c000bf78 <Directory::close()+0x5a>
c000bf37:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf3e:	85 db                	test   ebx,ebx
c000bf40:	74 36                	je     c000bf78 <Directory::close()+0x5a>
c000bf42:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bf49:	74 2d                	je     c000bf78 <Directory::close()+0x5a>
c000bf4b:	b8 05 00 00 00       	mov    eax,0x5
c000bf50:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf54:	74 22                	je     c000bf78 <Directory::close()+0x5a>
c000bf56:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf5a:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf61:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf67:	53                   	push   ebx
c000bf68:	53                   	push   ebx
c000bf69:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf6b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf71:	50                   	push   eax
c000bf72:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	83 c4 08             	add    esp,0x8
c000bf7b:	5b                   	pop    ebx
c000bf7c:	c3                   	ret    
c000bf7d:	90                   	nop

c000bf7e <Directory::unlink()>:
c000bf7e:	83 ec 0c             	sub    esp,0xc
c000bf81:	b8 0b 00 00 00       	mov    eax,0xb
c000bf86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf91:	83 f9 19             	cmp    ecx,0x19
c000bf94:	77 2f                	ja     c000bfc5 <Directory::unlink()+0x47>
c000bf96:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf9d:	85 c9                	test   ecx,ecx
c000bf9f:	74 24                	je     c000bfc5 <Directory::unlink()+0x47>
c000bfa1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfa7:	85 c9                	test   ecx,ecx
c000bfa9:	74 1a                	je     c000bfc5 <Directory::unlink()+0x47>
c000bfab:	b8 06 00 00 00       	mov    eax,0x6
c000bfb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfb4:	75 0f                	jne    c000bfc5 <Directory::unlink()+0x47>
c000bfb6:	83 c2 0d             	add    edx,0xd
c000bfb9:	50                   	push   eax
c000bfba:	50                   	push   eax
c000bfbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfbd:	52                   	push   edx
c000bfbe:	51                   	push   ecx
c000bfbf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bfc2:	83 c4 10             	add    esp,0x10
c000bfc5:	83 c4 0c             	add    esp,0xc
c000bfc8:	c3                   	ret    
c000bfc9:	90                   	nop

c000bfca <Directory::rename(char const*)>:
c000bfca:	83 ec 0c             	sub    esp,0xc
c000bfcd:	b8 0b 00 00 00       	mov    eax,0xb
c000bfd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfd6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfdd:	83 f9 19             	cmp    ecx,0x19
c000bfe0:	77 32                	ja     c000c014 <Directory::rename(char const*)+0x4a>
c000bfe2:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfe9:	85 c9                	test   ecx,ecx
c000bfeb:	74 27                	je     c000c014 <Directory::rename(char const*)+0x4a>
c000bfed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bff3:	85 c9                	test   ecx,ecx
c000bff5:	74 1d                	je     c000c014 <Directory::rename(char const*)+0x4a>
c000bff7:	b8 06 00 00 00       	mov    eax,0x6
c000bffc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c000:	75 12                	jne    c000c014 <Directory::rename(char const*)+0x4a>
c000c002:	83 c2 0d             	add    edx,0xd
c000c005:	50                   	push   eax
c000c006:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c008:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c00c:	52                   	push   edx
c000c00d:	51                   	push   ecx
c000c00e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c011:	83 c4 10             	add    esp,0x10
c000c014:	83 c4 0c             	add    esp,0xc
c000c017:	c3                   	ret    

c000c018 <Directory::exists()>:
c000c018:	83 ec 0c             	sub    esp,0xc
c000c01b:	31 c0                	xor    eax,eax
c000c01d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c021:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c028:	83 f9 19             	cmp    ecx,0x19
c000c02b:	77 24                	ja     c000c051 <Directory::exists()+0x39>
c000c02d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c034:	85 c9                	test   ecx,ecx
c000c036:	74 19                	je     c000c051 <Directory::exists()+0x39>
c000c038:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c03e:	85 c9                	test   ecx,ecx
c000c040:	74 0f                	je     c000c051 <Directory::exists()+0x39>
c000c042:	83 c2 0d             	add    edx,0xd
c000c045:	50                   	push   eax
c000c046:	50                   	push   eax
c000c047:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c049:	52                   	push   edx
c000c04a:	51                   	push   ecx
c000c04b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c04e:	83 c4 10             	add    esp,0x10
c000c051:	83 c4 0c             	add    esp,0xc
c000c054:	c3                   	ret    
c000c055:	90                   	nop

c000c056 <Directory::read(dirent*)>:
c000c056:	83 ec 1c             	sub    esp,0x1c
c000c059:	b8 0b 00 00 00       	mov    eax,0xb
c000c05e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c062:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c069:	83 f9 19             	cmp    ecx,0x19
c000c06c:	77 30                	ja     c000c09e <Directory::read(dirent*)+0x48>
c000c06e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c075:	85 c9                	test   ecx,ecx
c000c077:	74 25                	je     c000c09e <Directory::read(dirent*)+0x48>
c000c079:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c080:	74 1c                	je     c000c09e <Directory::read(dirent*)+0x48>
c000c082:	83 ec 0c             	sub    esp,0xc
c000c085:	8b 02                	mov    eax,DWORD PTR [edx]
c000c087:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c08b:	51                   	push   ecx
c000c08c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c090:	6a 00                	push   0x0
c000c092:	68 10 01 00 00       	push   0x110
c000c097:	52                   	push   edx
c000c098:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c09b:	83 c4 20             	add    esp,0x20
c000c09e:	83 c4 1c             	add    esp,0x1c
c000c0a1:	c3                   	ret    

c000c0a2 <Directory::create()>:
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	b8 0b 00 00 00       	mov    eax,0xb
c000c0aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0b5:	83 f9 19             	cmp    ecx,0x19
c000c0b8:	77 2f                	ja     c000c0e9 <Directory::create()+0x47>
c000c0ba:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c0c1:	85 c9                	test   ecx,ecx
c000c0c3:	74 24                	je     c000c0e9 <Directory::create()+0x47>
c000c0c5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 1a                	je     c000c0e9 <Directory::create()+0x47>
c000c0cf:	b8 06 00 00 00       	mov    eax,0x6
c000c0d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c0d8:	75 0f                	jne    c000c0e9 <Directory::create()+0x47>
c000c0da:	83 c2 0d             	add    edx,0xd
c000c0dd:	50                   	push   eax
c000c0de:	50                   	push   eax
c000c0df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c0e1:	52                   	push   edx
c000c0e2:	51                   	push   ecx
c000c0e3:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c0e6:	83 c4 10             	add    esp,0x10
c000c0e9:	83 c4 0c             	add    esp,0xc
c000c0ec:	c3                   	ret    
c000c0ed:	90                   	nop

c000c0ee <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0ee:	b8 0a 00 00 00       	mov    eax,0xa
c000c0f3:	c3                   	ret    

c000c0f4 <Bus::Bus(char const*)>:
c000c0f4:	83 ec 0c             	sub    esp,0xc
c000c0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fb:	83 ec 08             	sub    esp,0x8
c000c0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c102:	50                   	push   eax
c000c103:	e8 22 08 00 00       	call   c000c92a <Device::Device(char const*)>
c000c108:	83 c4 10             	add    esp,0x10
c000c10b:	ba 2c 15 02 c0       	mov    edx,0xc002152c
c000c110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c114:	89 10                	mov    DWORD PTR [eax],edx
c000c116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c124:	90                   	nop
c000c125:	83 c4 0c             	add    esp,0xc
c000c128:	c3                   	ret    
c000c129:	90                   	nop
c000c12a:	66 90                	xchg   ax,ax

c000c12c <Bus::~Bus()>:
c000c12c:	83 ec 0c             	sub    esp,0xc
c000c12f:	ba 2c 15 02 c0       	mov    edx,0xc002152c
c000c134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c138:	89 10                	mov    DWORD PTR [eax],edx
c000c13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13e:	83 ec 0c             	sub    esp,0xc
c000c141:	50                   	push   eax
c000c142:	e8 4d 05 00 00       	call   c000c694 <Device::~Device()>
c000c147:	83 c4 10             	add    esp,0x10
c000c14a:	90                   	nop
c000c14b:	83 c4 0c             	add    esp,0xc
c000c14e:	c3                   	ret    
c000c14f:	90                   	nop

c000c150 <Bus::~Bus()>:
c000c150:	83 ec 0c             	sub    esp,0xc
c000c153:	83 ec 0c             	sub    esp,0xc
c000c156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15a:	e8 cd ff ff ff       	call   c000c12c <Bus::~Bus()>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	83 ec 08             	sub    esp,0x8
c000c165:	68 58 01 00 00       	push   0x158
c000c16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16e:	e8 a5 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c173:	83 c4 10             	add    esp,0x10
c000c176:	83 c4 0c             	add    esp,0xc
c000c179:	c3                   	ret    

c000c17a <beepThread(void*)>:
c000c17a:	83 ec 0c             	sub    esp,0xc
c000c17d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c182:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c186:	48                   	dec    eax
c000c187:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c18c:	75 01                	jne    c000c18f <beepThread(void*)+0x15>
c000c18e:	fb                   	sti    
c000c18f:	83 ec 0c             	sub    esp,0xc
c000c192:	6b c2 0a             	imul   eax,edx,0xa
c000c195:	50                   	push   eax
c000c196:	e8 15 9e 00 00       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c000c19b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c1a2:	e8 64 bd 00 00       	call   c0017f0b <HalMakeBeep(int)>
c000c1a7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c1af:	83 c4 1c             	add    esp,0x1c
c000c1b2:	e9 dd 9c 00 00       	jmp    c0015e94 <blockTask(TaskState)>

c000c1b7 <Krnl::beep(int, int, bool)>:
c000c1b7:	56                   	push   esi
c000c1b8:	53                   	push   ebx
c000c1b9:	83 ec 10             	sub    esp,0x10
c000c1bc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c1c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c8:	e8 3e bd 00 00       	call   c0017f0b <HalMakeBeep(int)>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 f0                	mov    eax,esi
c000c1d2:	84 c0                	test   al,al
c000c1d4:	74 1e                	je     c000c1f4 <Krnl::beep(int, int, bool)+0x3d>
c000c1d6:	83 ec 0c             	sub    esp,0xc
c000c1d9:	6b db 0a             	imul   ebx,ebx,0xa
c000c1dc:	53                   	push   ebx
c000c1dd:	e8 ce 9d 00 00       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c000c1e2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1ea:	83 c4 14             	add    esp,0x14
c000c1ed:	5b                   	pop    ebx
c000c1ee:	5e                   	pop    esi
c000c1ef:	e9 17 bd 00 00       	jmp    c0017f0b <HalMakeBeep(int)>
c000c1f4:	68 e6 00 00 00       	push   0xe6
c000c1f9:	53                   	push   ebx
c000c1fa:	68 7a c1 00 c0       	push   0xc000c17a
c000c1ff:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c205:	e8 26 98 00 00       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c000c20a:	83 c4 14             	add    esp,0x14
c000c20d:	5b                   	pop    ebx
c000c20e:	5e                   	pop    esi
c000c20f:	c3                   	ret    

c000c210 <User::loadClockSettings(int)>:
c000c210:	53                   	push   ebx
c000c211:	83 ec 14             	sub    esp,0x14
c000c214:	68 14 01 00 00       	push   0x114
c000c219:	e8 98 b8 ff ff       	call   c0007ab6 <malloc>
c000c21e:	83 c4 0c             	add    esp,0xc
c000c221:	89 c3                	mov    ebx,eax
c000c223:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c229:	68 50 15 02 c0       	push   0xc0021550
c000c22e:	50                   	push   eax
c000c22f:	e8 3c f6 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c000c234:	58                   	pop    eax
c000c235:	5a                   	pop    edx
c000c236:	6a 01                	push   0x1
c000c238:	53                   	push   ebx
c000c239:	e8 fa f6 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c000c23e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c241:	e8 50 f7 ff ff       	call   c000b996 <File::close()>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	85 db                	test   ebx,ebx
c000c24b:	74 0f                	je     c000c25c <User::loadClockSettings(int)+0x4c>
c000c24d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c24f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c253:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c256:	83 c4 08             	add    esp,0x8
c000c259:	5b                   	pop    ebx
c000c25a:	ff e0                	jmp    eax
c000c25c:	83 c4 08             	add    esp,0x8
c000c25f:	5b                   	pop    ebx
c000c260:	c3                   	ret    
c000c261:	90                   	nop

c000c262 <Clock::Clock(char const*)>:
c000c262:	83 ec 0c             	sub    esp,0xc
c000c265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c269:	83 ec 08             	sub    esp,0x8
c000c26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c270:	50                   	push   eax
c000c271:	e8 b4 06 00 00       	call   c000c92a <Device::Device(char const*)>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	ba 78 15 02 c0       	mov    edx,0xc0021578
c000c27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c282:	89 10                	mov    DWORD PTR [eax],edx
c000c284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c288:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c292:	90                   	nop
c000c293:	83 c4 0c             	add    esp,0xc
c000c296:	c3                   	ret    
c000c297:	90                   	nop

c000c298 <Clock::~Clock()>:
c000c298:	83 ec 0c             	sub    esp,0xc
c000c29b:	ba 78 15 02 c0       	mov    edx,0xc0021578
c000c2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a4:	89 10                	mov    DWORD PTR [eax],edx
c000c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	50                   	push   eax
c000c2ae:	e8 e1 03 00 00       	call   c000c694 <Device::~Device()>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	90                   	nop
c000c2b7:	83 c4 0c             	add    esp,0xc
c000c2ba:	c3                   	ret    
c000c2bb:	90                   	nop

c000c2bc <Clock::~Clock()>:
c000c2bc:	83 ec 0c             	sub    esp,0xc
c000c2bf:	83 ec 0c             	sub    esp,0xc
c000c2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c6:	e8 cd ff ff ff       	call   c000c298 <Clock::~Clock()>
c000c2cb:	83 c4 10             	add    esp,0x10
c000c2ce:	83 ec 08             	sub    esp,0x8
c000c2d1:	68 58 01 00 00       	push   0x158
c000c2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2da:	e8 39 e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 c4 0c             	add    esp,0xc
c000c2e5:	c3                   	ret    

c000c2e6 <Clock::timeInSecondsLocal()>:
c000c2e6:	53                   	push   ebx
c000c2e7:	83 ec 14             	sub    esp,0x14
c000c2ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2ee:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2f0:	50                   	push   eax
c000c2f1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2f4:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2fb:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c301:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c307:	89 cb                	mov    ebx,ecx
c000c309:	c1 fb 1f             	sar    ebx,0x1f
c000c30c:	01 c8                	add    eax,ecx
c000c30e:	11 da                	adc    edx,ebx
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	31 c9                	xor    ecx,ecx
c000c315:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c31c:	74 05                	je     c000c323 <Clock::timeInSecondsLocal()+0x3d>
c000c31e:	b9 08 07 00 00       	mov    ecx,0x708
c000c323:	31 db                	xor    ebx,ebx
c000c325:	01 c8                	add    eax,ecx
c000c327:	11 da                	adc    edx,ebx
c000c329:	83 c4 08             	add    esp,0x8
c000c32c:	5b                   	pop    ebx
c000c32d:	c3                   	ret    

c000c32e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c32e:	57                   	push   edi
c000c32f:	56                   	push   esi
c000c330:	53                   	push   ebx
c000c331:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c335:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c339:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c33b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c33f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c342:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c349:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c34f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c355:	99                   	cdq    
c000c356:	29 c6                	sub    esi,eax
c000c358:	19 d7                	sbb    edi,edx
c000c35a:	89 f0                	mov    eax,esi
c000c35c:	89 fa                	mov    edx,edi
c000c35e:	31 f6                	xor    esi,esi
c000c360:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c367:	74 05                	je     c000c36e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c369:	be 08 07 00 00       	mov    esi,0x708
c000c36e:	31 ff                	xor    edi,edi
c000c370:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c374:	29 f0                	sub    eax,esi
c000c376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c37a:	19 fa                	sbb    edx,edi
c000c37c:	89 d8                	mov    eax,ebx
c000c37e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c382:	5b                   	pop    ebx
c000c383:	5e                   	pop    esi
c000c384:	5f                   	pop    edi
c000c385:	ff e0                	jmp    eax

c000c387 <datetimeToSeconds(datetime_t)>:
c000c387:	55                   	push   ebp
c000c388:	57                   	push   edi
c000c389:	56                   	push   esi
c000c38a:	53                   	push   ebx
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c392:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c396:	89 d6                	mov    esi,edx
c000c398:	0f b6 c7             	movzx  eax,bh
c000c39b:	c1 ee 10             	shr    esi,0x10
c000c39e:	6b e8 3c             	imul   ebp,eax,0x3c
c000c3a1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c3a7:	0f b6 ce             	movzx  ecx,dh
c000c3aa:	89 df                	mov    edi,ebx
c000c3ac:	49                   	dec    ecx
c000c3ad:	c1 ef 10             	shr    edi,0x10
c000c3b0:	0f b6 db             	movzx  ebx,bl
c000c3b3:	89 f8                	mov    eax,edi
c000c3b5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c3bb:	0f b6 f8             	movzx  edi,al
c000c3be:	0f b6 d2             	movzx  edx,dl
c000c3c1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c3c5:	01 d8                	add    eax,ebx
c000c3c7:	0f b7 de             	movzx  ebx,si
c000c3ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3cd:	c1 f8 1f             	sar    eax,0x1f
c000c3d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3d4:	0f b6 c1             	movzx  eax,cl
c000c3d7:	8b 0c 85 c0 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea40]
c000c3de:	83 f8 01             	cmp    eax,0x1
c000c3e1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c3e5:	76 27                	jbe    c000c40e <datetimeToSeconds(datetime_t)+0x87>
c000c3e7:	83 e6 03             	and    esi,0x3
c000c3ea:	75 22                	jne    c000c40e <datetimeToSeconds(datetime_t)+0x87>
c000c3ec:	31 d2                	xor    edx,edx
c000c3ee:	be 64 00 00 00       	mov    esi,0x64
c000c3f3:	89 d8                	mov    eax,ebx
c000c3f5:	f7 f6                	div    esi
c000c3f7:	85 d2                	test   edx,edx
c000c3f9:	75 12                	jne    c000c40d <datetimeToSeconds(datetime_t)+0x86>
c000c3fb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c401:	be 90 01 00 00       	mov    esi,0x190
c000c406:	99                   	cdq    
c000c407:	f7 fe                	idiv   esi
c000c409:	85 d2                	test   edx,edx
c000c40b:	75 01                	jne    c000c40e <datetimeToSeconds(datetime_t)+0x87>
c000c40d:	41                   	inc    ecx
c000c40e:	83 fb 46             	cmp    ebx,0x46
c000c411:	76 48                	jbe    c000c45b <datetimeToSeconds(datetime_t)+0xd4>
c000c413:	be 46 00 00 00       	mov    esi,0x46
c000c418:	bf 64 00 00 00       	mov    edi,0x64
c000c41d:	bd 90 01 00 00       	mov    ebp,0x190
c000c422:	b8 6d 01 00 00       	mov    eax,0x16d
c000c427:	f7 c6 03 00 00 00    	test   esi,0x3
c000c42d:	75 23                	jne    c000c452 <datetimeToSeconds(datetime_t)+0xcb>
c000c42f:	89 f0                	mov    eax,esi
c000c431:	99                   	cdq    
c000c432:	f7 ff                	idiv   edi
c000c434:	b8 6e 01 00 00       	mov    eax,0x16e
c000c439:	85 d2                	test   edx,edx
c000c43b:	75 15                	jne    c000c452 <datetimeToSeconds(datetime_t)+0xcb>
c000c43d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c443:	99                   	cdq    
c000c444:	f7 fd                	idiv   ebp
c000c446:	83 fa 01             	cmp    edx,0x1
c000c449:	19 c0                	sbb    eax,eax
c000c44b:	f7 d0                	not    eax
c000c44d:	05 6e 01 00 00       	add    eax,0x16e
c000c452:	01 c1                	add    ecx,eax
c000c454:	46                   	inc    esi
c000c455:	39 de                	cmp    esi,ebx
c000c457:	7c c9                	jl     c000c422 <datetimeToSeconds(datetime_t)+0x9b>
c000c459:	eb 34                	jmp    c000c48f <datetimeToSeconds(datetime_t)+0x108>
c000c45b:	74 32                	je     c000c48f <datetimeToSeconds(datetime_t)+0x108>
c000c45d:	b8 45 00 00 00       	mov    eax,0x45
c000c462:	89 c2                	mov    edx,eax
c000c464:	83 e2 03             	and    edx,0x3
c000c467:	39 d8                	cmp    eax,ebx
c000c469:	7e 0f                	jle    c000c47a <datetimeToSeconds(datetime_t)+0xf3>
c000c46b:	83 fa 01             	cmp    edx,0x1
c000c46e:	19 d2                	sbb    edx,edx
c000c470:	48                   	dec    eax
c000c471:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c478:	eb e8                	jmp    c000c462 <datetimeToSeconds(datetime_t)+0xdb>
c000c47a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c47f:	85 d2                	test   edx,edx
c000c481:	75 0a                	jne    c000c48d <datetimeToSeconds(datetime_t)+0x106>
c000c483:	83 fb 01             	cmp    ebx,0x1
c000c486:	19 c0                	sbb    eax,eax
c000c488:	05 6e 01 00 00       	add    eax,0x16e
c000c48d:	29 c1                	sub    ecx,eax
c000c48f:	b8 80 51 01 00       	mov    eax,0x15180
c000c494:	f7 e9                	imul   ecx
c000c496:	03 04 24             	add    eax,DWORD PTR [esp]
c000c499:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c49d:	83 c4 0c             	add    esp,0xc
c000c4a0:	5b                   	pop    ebx
c000c4a1:	5e                   	pop    esi
c000c4a2:	5f                   	pop    edi
c000c4a3:	5d                   	pop    ebp
c000c4a4:	c3                   	ret    
c000c4a5:	90                   	nop

c000c4a6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c4a6:	57                   	push   edi
c000c4a7:	56                   	push   esi
c000c4a8:	53                   	push   ebx
c000c4a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c4ad:	8b 06                	mov    eax,DWORD PTR [esi]
c000c4af:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c4b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4ba:	e8 c8 fe ff ff       	call   c000c387 <datetimeToSeconds(datetime_t)>
c000c4bf:	59                   	pop    ecx
c000c4c0:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c4c7:	5b                   	pop    ebx
c000c4c8:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c4ce:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4d4:	89 cb                	mov    ebx,ecx
c000c4d6:	c1 fb 1f             	sar    ebx,0x1f
c000c4d9:	29 c8                	sub    eax,ecx
c000c4db:	19 da                	sbb    edx,ebx
c000c4dd:	31 c9                	xor    ecx,ecx
c000c4df:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c4e6:	74 05                	je     c000c4ed <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4e8:	b9 08 07 00 00       	mov    ecx,0x708
c000c4ed:	31 db                	xor    ebx,ebx
c000c4ef:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4f3:	29 c8                	sub    eax,ecx
c000c4f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4f9:	19 da                	sbb    edx,ebx
c000c4fb:	89 f8                	mov    eax,edi
c000c4fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c501:	5b                   	pop    ebx
c000c502:	5e                   	pop    esi
c000c503:	5f                   	pop    edi
c000c504:	ff e0                	jmp    eax

c000c506 <secondsToDatetime(unsigned long long)>:
c000c506:	55                   	push   ebp
c000c507:	57                   	push   edi
c000c508:	56                   	push   esi
c000c509:	53                   	push   ebx
c000c50a:	83 ec 1c             	sub    esp,0x1c
c000c50d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c511:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c515:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c519:	6a 00                	push   0x0
c000c51b:	68 80 51 01 00       	push   0x15180
c000c520:	55                   	push   ebp
c000c521:	57                   	push   edi
c000c522:	e8 c9 2d 01 00       	call   c001f2f0 <__udivdi3>
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c534:	6a 00                	push   0x0
c000c536:	68 80 51 01 00       	push   0x15180
c000c53b:	55                   	push   ebp
c000c53c:	57                   	push   edi
c000c53d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c542:	e8 a9 2e 01 00       	call   c001f3f0 <__umoddi3>
c000c547:	83 c4 10             	add    esp,0x10
c000c54a:	99                   	cdq    
c000c54b:	f7 ff                	idiv   edi
c000c54d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c552:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c555:	89 d0                	mov    eax,edx
c000c557:	99                   	cdq    
c000c558:	f7 ff                	idiv   edi
c000c55a:	85 db                	test   ebx,ebx
c000c55c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c55f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c562:	79 11                	jns    c000c575 <secondsToDatetime(unsigned long long)+0x6f>
c000c564:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c568:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c56e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c573:	eb 07                	jmp    c000c57c <secondsToDatetime(unsigned long long)+0x76>
c000c575:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c57a:	89 d8                	mov    eax,ebx
c000c57c:	bf b4 05 00 00       	mov    edi,0x5b4
c000c581:	99                   	cdq    
c000c582:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c587:	f7 f9                	idiv   ecx
c000c589:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c592:	31 d2                	xor    edx,edx
c000c594:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c59c:	01 c3                	add    ebx,eax
c000c59e:	89 d8                	mov    eax,ebx
c000c5a0:	f7 f1                	div    ecx
c000c5a2:	31 d2                	xor    edx,edx
c000c5a4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c5a7:	89 d8                	mov    eax,ebx
c000c5a9:	f7 f7                	div    edi
c000c5ab:	31 d2                	xor    edx,edx
c000c5ad:	29 c1                	sub    ecx,eax
c000c5af:	89 d8                	mov    eax,ebx
c000c5b1:	f7 f5                	div    ebp
c000c5b3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c5b8:	29 c1                	sub    ecx,eax
c000c5ba:	31 d2                	xor    edx,edx
c000c5bc:	89 c8                	mov    eax,ecx
c000c5be:	f7 f5                	div    ebp
c000c5c0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c5c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c5c9:	31 d2                	xor    edx,edx
c000c5cb:	89 c8                	mov    eax,ecx
c000c5cd:	f7 f5                	div    ebp
c000c5cf:	31 d2                	xor    edx,edx
c000c5d1:	01 c3                	add    ebx,eax
c000c5d3:	89 c8                	mov    eax,ecx
c000c5d5:	f7 f7                	div    edi
c000c5d7:	bf 99 00 00 00       	mov    edi,0x99
c000c5dc:	29 c3                	sub    ebx,eax
c000c5de:	31 d2                	xor    edx,edx
c000c5e0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5e8:	29 c3                	sub    ebx,eax
c000c5ea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5ed:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5f0:	bb 05 00 00 00       	mov    ebx,0x5
c000c5f5:	83 c1 02             	add    ecx,0x2
c000c5f8:	89 c8                	mov    eax,ecx
c000c5fa:	f7 f7                	div    edi
c000c5fc:	31 d2                	xor    edx,edx
c000c5fe:	89 c7                	mov    edi,eax
c000c600:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c606:	83 c0 02             	add    eax,0x2
c000c609:	f7 f3                	div    ebx
c000c60b:	89 eb                	mov    ebx,ebp
c000c60d:	29 c3                	sub    ebx,eax
c000c60f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c615:	88 1e                	mov    BYTE PTR [esi],bl
c000c617:	19 c0                	sbb    eax,eax
c000c619:	31 d2                	xor    edx,edx
c000c61b:	83 e0 0c             	and    eax,0xc
c000c61e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c622:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c62a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c62e:	83 f9 01             	cmp    ecx,0x1
c000c631:	0f 96 c2             	setbe  dl
c000c634:	41                   	inc    ecx
c000c635:	01 d0                	add    eax,edx
c000c637:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c63a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c63e:	83 c4 1c             	add    esp,0x1c
c000c641:	89 f0                	mov    eax,esi
c000c643:	5b                   	pop    ebx
c000c644:	5e                   	pop    esi
c000c645:	5f                   	pop    edi
c000c646:	5d                   	pop    ebp
c000c647:	c2 04 00             	ret    0x4

c000c64a <Clock::timeInDatetimeLocal()>:
c000c64a:	53                   	push   ebx
c000c64b:	83 ec 14             	sub    esp,0x14
c000c64e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c652:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c656:	e8 8b fc ff ff       	call   c000c2e6 <Clock::timeInSecondsLocal()>
c000c65b:	83 c4 0c             	add    esp,0xc
c000c65e:	52                   	push   edx
c000c65f:	50                   	push   eax
c000c660:	53                   	push   ebx
c000c661:	e8 a0 fe ff ff       	call   c000c506 <secondsToDatetime(unsigned long long)>
c000c666:	89 d8                	mov    eax,ebx
c000c668:	83 c4 14             	add    esp,0x14
c000c66b:	5b                   	pop    ebx
c000c66c:	c2 04 00             	ret    0x4
c000c66f:	90                   	nop

c000c670 <Device::hibernate()>:
c000c670:	c3                   	ret    
c000c671:	90                   	nop

c000c672 <Device::wake()>:
c000c672:	c3                   	ret    
c000c673:	90                   	nop

c000c674 <Device::detect()>:
c000c674:	c3                   	ret    
c000c675:	90                   	nop

c000c676 <Device::disableLegacy()>:
c000c676:	c3                   	ret    
c000c677:	90                   	nop

c000c678 <Device::powerSaving(PowerSavingLevel)>:
c000c678:	c3                   	ret    
c000c679:	90                   	nop

c000c67a <DriverlessDevice::close(int, int, void*)>:
c000c67a:	31 c0                	xor    eax,eax
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <DriverlessDevice::detect()>:
c000c67e:	c3                   	ret    
c000c67f:	90                   	nop

c000c680 <DriverlessDevice::open(int, int, void*)>:
c000c680:	83 ec 18             	sub    esp,0x18
c000c683:	68 f0 15 02 c0       	push   0xc00215f0
c000c688:	e8 34 4d 00 00       	call   c00113c1 <KePanic(char const*)>
c000c68d:	83 c8 ff             	or     eax,0xffffffff
c000c690:	83 c4 1c             	add    esp,0x1c
c000c693:	c3                   	ret    

c000c694 <Device::~Device()>:
c000c694:	ba 50 16 02 c0       	mov    edx,0xc0021650
c000c699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c69d:	89 10                	mov    DWORD PTR [eax],edx
c000c69f:	90                   	nop
c000c6a0:	c3                   	ret    
c000c6a1:	90                   	nop

c000c6a2 <Device::~Device()>:
c000c6a2:	83 ec 0c             	sub    esp,0xc
c000c6a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c6a9:	e8 e6 ff ff ff       	call   c000c694 <Device::~Device()>
c000c6ae:	83 c4 04             	add    esp,0x4
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	68 58 01 00 00       	push   0x158
c000c6b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6bd:	e8 56 e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c6c2:	83 c4 10             	add    esp,0x10
c000c6c5:	83 c4 0c             	add    esp,0xc
c000c6c8:	c3                   	ret    
c000c6c9:	90                   	nop

c000c6ca <Device::findAndLoadDriver()>:
c000c6ca:	c7 44 24 04 0e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002160e
c000c6d2:	e9 6e e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c6d7:	90                   	nop

c000c6d8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c6d8:	57                   	push   edi
c000c6d9:	b9 09 00 00 00       	mov    ecx,0x9
c000c6de:	56                   	push   esi
c000c6df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c6e3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6e7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6f1:	81 c7 18 01 00 00    	add    edi,0x118
c000c6f7:	fc                   	cld    
c000c6f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6fa:	5e                   	pop    esi
c000c6fb:	5f                   	pop    edi
c000c6fc:	c3                   	ret    
c000c6fd:	90                   	nop

c000c6fe <Device::preOpenACPI(void*, char*, char*)>:
c000c6fe:	57                   	push   edi
c000c6ff:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c704:	56                   	push   esi
c000c705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c709:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c70d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c717:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c71d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c723:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c727:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c729:	b9 0e 00 00 00       	mov    ecx,0xe
c000c72e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c734:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c738:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c73a:	5e                   	pop    esi
c000c73b:	5f                   	pop    edi
c000c73c:	c3                   	ret    
c000c73d:	90                   	nop

c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c73e:	53                   	push   ebx
c000c73f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c743:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c747:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c74b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c74f:	0f b6 c0             	movzx  eax,al
c000c752:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c756:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c75e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c762:	5b                   	pop    ebx
c000c763:	e9 a8 05 00 00       	jmp    c000cd10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c768 <Device::getParent()>:
c000c768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c76c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c772:	c3                   	ret    
c000c773:	90                   	nop

c000c774 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c781:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c785:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c789:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c78d:	e9 e6 06 00 00       	jmp    c000ce78 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c792 <Device::addChild(Device*)>:
c000c792:	53                   	push   ebx
c000c793:	83 ec 08             	sub    esp,0x8
c000c796:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c79a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c79e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c7a4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c7aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c7ac:	85 d2                	test   edx,edx
c000c7ae:	74 04                	je     c000c7b4 <Device::addChild(Device*)+0x22>
c000c7b0:	89 d3                	mov    ebx,edx
c000c7b2:	eb f6                	jmp    c000c7aa <Device::addChild(Device*)+0x18>
c000c7b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c7b7:	83 ec 0c             	sub    esp,0xc
c000c7ba:	6a 08                	push   0x8
c000c7bc:	e8 f5 b2 ff ff       	call   c0007ab6 <malloc>
c000c7c1:	89 03                	mov    DWORD PTR [ebx],eax
c000c7c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7d0:	83 c4 18             	add    esp,0x18
c000c7d3:	5b                   	pop    ebx
c000c7d4:	c3                   	ret    
c000c7d5:	90                   	nop

c000c7d6 <Device::removeAllChildren()>:
c000c7d6:	56                   	push   esi
c000c7d7:	53                   	push   ebx
c000c7d8:	52                   	push   edx
c000c7d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c7dd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c7e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7e6:	74 17                	je     c000c7ff <Device::removeAllChildren()+0x29>
c000c7e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7eb:	85 c0                	test   eax,eax
c000c7ed:	74 0c                	je     c000c7fb <Device::removeAllChildren()+0x25>
c000c7ef:	83 ec 0c             	sub    esp,0xc
c000c7f2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7f4:	50                   	push   eax
c000c7f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7f8:	83 c4 10             	add    esp,0x10
c000c7fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7fd:	eb e4                	jmp    c000c7e3 <Device::removeAllChildren()+0xd>
c000c7ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c805:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c80b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c811:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c818:	58                   	pop    eax
c000c819:	5b                   	pop    ebx
c000c81a:	5e                   	pop    esi
c000c81b:	c3                   	ret    

c000c81c <Device::hibernateAll()>:
c000c81c:	53                   	push   ebx
c000c81d:	83 ec 14             	sub    esp,0x14
c000c820:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c824:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c826:	53                   	push   ebx
c000c827:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c82a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c830:	83 c4 10             	add    esp,0x10
c000c833:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c836:	74 0f                	je     c000c847 <Device::hibernateAll()+0x2b>
c000c838:	83 ec 0c             	sub    esp,0xc
c000c83b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c83e:	e8 d9 ff ff ff       	call   c000c81c <Device::hibernateAll()>
c000c843:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c845:	eb e9                	jmp    c000c830 <Device::hibernateAll()+0x14>
c000c847:	83 c4 08             	add    esp,0x8
c000c84a:	5b                   	pop    ebx
c000c84b:	c3                   	ret    

c000c84c <Device::wakeAll()>:
c000c84c:	53                   	push   ebx
c000c84d:	83 ec 14             	sub    esp,0x14
c000c850:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c854:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c856:	53                   	push   ebx
c000c857:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c85a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c860:	83 c4 10             	add    esp,0x10
c000c863:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c866:	74 0f                	je     c000c877 <Device::wakeAll()+0x2b>
c000c868:	83 ec 0c             	sub    esp,0xc
c000c86b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c86e:	e8 d9 ff ff ff       	call   c000c84c <Device::wakeAll()>
c000c873:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c875:	eb e9                	jmp    c000c860 <Device::wakeAll()+0x14>
c000c877:	83 c4 08             	add    esp,0x8
c000c87a:	5b                   	pop    ebx
c000c87b:	c3                   	ret    

c000c87c <Device::detectAll()>:
c000c87c:	53                   	push   ebx
c000c87d:	83 ec 14             	sub    esp,0x14
c000c880:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c884:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c886:	53                   	push   ebx
c000c887:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c88a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c896:	74 0f                	je     c000c8a7 <Device::detectAll()+0x2b>
c000c898:	83 ec 0c             	sub    esp,0xc
c000c89b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c89e:	e8 d9 ff ff ff       	call   c000c87c <Device::detectAll()>
c000c8a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8a5:	eb e9                	jmp    c000c890 <Device::detectAll()+0x14>
c000c8a7:	83 c4 08             	add    esp,0x8
c000c8aa:	5b                   	pop    ebx
c000c8ab:	c3                   	ret    

c000c8ac <Device::disableLegacyAll()>:
c000c8ac:	c3                   	ret    
c000c8ad:	90                   	nop

c000c8ae <Device::loadDriversForAll()>:
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <Device::closeAll()>:
c000c8b0:	53                   	push   ebx
c000c8b1:	83 ec 08             	sub    esp,0x8
c000c8b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8ba:	6a 00                	push   0x0
c000c8bc:	6a 00                	push   0x0
c000c8be:	6a 00                	push   0x0
c000c8c0:	53                   	push   ebx
c000c8c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c8c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8ca:	83 c4 10             	add    esp,0x10
c000c8cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8d0:	74 0f                	je     c000c8e1 <Device::closeAll()+0x31>
c000c8d2:	83 ec 0c             	sub    esp,0xc
c000c8d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8d8:	e8 d3 ff ff ff       	call   c000c8b0 <Device::closeAll()>
c000c8dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8df:	eb e9                	jmp    c000c8ca <Device::closeAll()+0x1a>
c000c8e1:	83 c4 08             	add    esp,0x8
c000c8e4:	5b                   	pop    ebx
c000c8e5:	c3                   	ret    

c000c8e6 <Device::powerSavingAll(PowerSavingLevel)>:
c000c8e6:	56                   	push   esi
c000c8e7:	53                   	push   ebx
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8ef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8f5:	56                   	push   esi
c000c8f6:	53                   	push   ebx
c000c8f7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c900:	83 c4 10             	add    esp,0x10
c000c903:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c906:	74 0f                	je     c000c917 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c908:	52                   	push   edx
c000c909:	52                   	push   edx
c000c90a:	56                   	push   esi
c000c90b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c90e:	e8 d3 ff ff ff       	call   c000c8e6 <Device::powerSavingAll(PowerSavingLevel)>
c000c913:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c915:	eb e9                	jmp    c000c900 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c917:	58                   	pop    eax
c000c918:	5b                   	pop    ebx
c000c919:	5e                   	pop    esi
c000c91a:	c3                   	ret    
c000c91b:	90                   	nop

c000c91c <Device::setName(char const*)>:
c000c91c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c924:	e9 17 3d ff ff       	jmp    c0000640 <strcpy>
c000c929:	90                   	nop

c000c92a <Device::Device(char const*)>:
c000c92a:	83 ec 1c             	sub    esp,0x1c
c000c92d:	ba 50 16 02 c0       	mov    edx,0xc0021650
c000c932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c936:	89 10                	mov    DWORD PTR [eax],edx
c000c938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c958:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c966:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c970:	83 ec 08             	sub    esp,0x8
c000c973:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c97b:	e8 9c ff ff ff       	call   c000c91c <Device::setName(char const*)>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c98b:	83 ec 0c             	sub    esp,0xc
c000c98e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c992:	e8 1f b1 ff ff       	call   c0007ab6 <malloc>
c000c997:	83 c4 10             	add    esp,0x10
c000c99a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c9ab:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c9bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c9cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ca04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca08:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ca12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca16:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ca20:	90                   	nop
c000ca21:	83 c4 1c             	add    esp,0x1c
c000ca24:	c3                   	ret    
c000ca25:	90                   	nop

c000ca26 <Device::getName()>:
c000ca26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca2a:	05 d0 00 00 00       	add    eax,0xd0
c000ca2f:	c3                   	ret    

c000ca30 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ca30:	83 ec 0c             	sub    esp,0xc
c000ca33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca37:	83 ec 08             	sub    esp,0x8
c000ca3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3e:	50                   	push   eax
c000ca3f:	e8 e6 fe ff ff       	call   c000c92a <Device::Device(char const*)>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	ba 7c 16 02 c0       	mov    edx,0xc002167c
c000ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca50:	89 10                	mov    DWORD PTR [eax],edx
c000ca52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca56:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca60:	90                   	nop
c000ca61:	83 c4 0c             	add    esp,0xc
c000ca64:	c3                   	ret    
c000ca65:	90                   	nop

c000ca66 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca66:	57                   	push   edi
c000ca67:	56                   	push   esi
c000ca68:	53                   	push   ebx
c000ca69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca6d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca75:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca7b:	75 0c                	jne    c000ca89 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca7d:	52                   	push   edx
c000ca7e:	52                   	push   edx
c000ca7f:	53                   	push   ebx
c000ca80:	56                   	push   esi
c000ca81:	e8 1c 2d 01 00       	call   c001f7a2 <LinkedList<Device>::addElement(Device*)>
c000ca86:	83 c4 10             	add    esp,0x10
c000ca89:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca92:	74 12                	je     c000caa6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca94:	50                   	push   eax
c000ca95:	57                   	push   edi
c000ca96:	56                   	push   esi
c000ca97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca9a:	e8 c7 ff ff ff       	call   c000ca66 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	eb e9                	jmp    c000ca8f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000caa6:	5b                   	pop    ebx
c000caa7:	5e                   	pop    esi
c000caa8:	5f                   	pop    edi
c000caa9:	c3                   	ret    

c000caaa <getDevicesOfType(DeviceType)>:
c000caaa:	53                   	push   ebx
c000caab:	83 ec 14             	sub    esp,0x14
c000caae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab2:	53                   	push   ebx
c000cab3:	e8 c6 2d 01 00       	call   c001f87e <LinkedList<Device>::LinkedList()>
c000cab8:	83 c4 0c             	add    esp,0xc
c000cabb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cabf:	53                   	push   ebx
c000cac0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000cac6:	e8 9b ff ff ff       	call   c000ca66 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cacb:	89 d8                	mov    eax,ebx
c000cacd:	83 c4 18             	add    esp,0x18
c000cad0:	5b                   	pop    ebx
c000cad1:	c2 04 00             	ret    0x4

c000cad4 <HardDiskController::HardDiskController(char const*)>:
c000cad4:	83 ec 0c             	sub    esp,0xc
c000cad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cadb:	83 ec 08             	sub    esp,0x8
c000cade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae2:	50                   	push   eax
c000cae3:	e8 42 fe ff ff       	call   c000c92a <Device::Device(char const*)>
c000cae8:	83 c4 10             	add    esp,0x10
c000caeb:	ba a8 16 02 c0       	mov    edx,0xc00216a8
c000caf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf4:	89 10                	mov    DWORD PTR [eax],edx
c000caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cb04:	90                   	nop
c000cb05:	83 c4 0c             	add    esp,0xc
c000cb08:	c3                   	ret    
c000cb09:	90                   	nop
c000cb0a:	66 90                	xchg   ax,ax

c000cb0c <HardDiskController::~HardDiskController()>:
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	ba a8 16 02 c0       	mov    edx,0xc00216a8
c000cb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb18:	89 10                	mov    DWORD PTR [eax],edx
c000cb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1e:	83 ec 0c             	sub    esp,0xc
c000cb21:	50                   	push   eax
c000cb22:	e8 6d fb ff ff       	call   c000c694 <Device::~Device()>
c000cb27:	83 c4 10             	add    esp,0x10
c000cb2a:	90                   	nop
c000cb2b:	83 c4 0c             	add    esp,0xc
c000cb2e:	c3                   	ret    
c000cb2f:	90                   	nop

c000cb30 <HardDiskController::~HardDiskController()>:
c000cb30:	83 ec 0c             	sub    esp,0xc
c000cb33:	83 ec 0c             	sub    esp,0xc
c000cb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb3a:	e8 cd ff ff ff       	call   c000cb0c <HardDiskController::~HardDiskController()>
c000cb3f:	83 c4 10             	add    esp,0x10
c000cb42:	83 ec 08             	sub    esp,0x8
c000cb45:	68 58 01 00 00       	push   0x158
c000cb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb4e:	e8 c5 dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	83 c4 0c             	add    esp,0xc
c000cb59:	c3                   	ret    

c000cb5a <PhysicalDisk::eject()>:
c000cb5a:	83 c8 ff             	or     eax,0xffffffff
c000cb5d:	c3                   	ret    

c000cb5e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb5e:	83 ec 0c             	sub    esp,0xc
c000cb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb65:	83 ec 08             	sub    esp,0x8
c000cb68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb6c:	50                   	push   eax
c000cb6d:	e8 b8 fd ff ff       	call   c000c92a <Device::Device(char const*)>
c000cb72:	83 c4 10             	add    esp,0x10
c000cb75:	ba d4 16 02 c0       	mov    edx,0xc00216d4
c000cb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7e:	89 10                	mov    DWORD PTR [eax],edx
c000cb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb84:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb8f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb9a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cba8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cbac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cbc0:	90                   	nop
c000cbc1:	83 c4 0c             	add    esp,0xc
c000cbc4:	c3                   	ret    
c000cbc5:	90                   	nop

c000cbc6 <PhysicalDisk::startCache()>:
c000cbc6:	56                   	push   esi
c000cbc7:	53                   	push   ebx
c000cbc8:	83 ec 10             	sub    esp,0x10
c000cbcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cbcf:	6a 44                	push   0x44
c000cbd1:	e8 e0 ae ff ff       	call   c0007ab6 <malloc>
c000cbd6:	89 c6                	mov    esi,eax
c000cbd8:	58                   	pop    eax
c000cbd9:	5a                   	pop    edx
c000cbda:	53                   	push   ebx
c000cbdb:	56                   	push   esi
c000cbdc:	e8 7b 17 00 00       	call   c000e35c <VCache::VCache(PhysicalDisk*)>
c000cbe1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cbe7:	83 c4 14             	add    esp,0x14
c000cbea:	5b                   	pop    ebx
c000cbeb:	5e                   	pop    esi
c000cbec:	c3                   	ret    
c000cbed:	90                   	nop

c000cbee <PhysicalDisk::~PhysicalDisk()>:
c000cbee:	83 ec 0c             	sub    esp,0xc
c000cbf1:	ba d4 16 02 c0       	mov    edx,0xc00216d4
c000cbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbfa:	89 10                	mov    DWORD PTR [eax],edx
c000cbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc00:	83 ec 0c             	sub    esp,0xc
c000cc03:	50                   	push   eax
c000cc04:	e8 8b fa ff ff       	call   c000c694 <Device::~Device()>
c000cc09:	83 c4 10             	add    esp,0x10
c000cc0c:	90                   	nop
c000cc0d:	83 c4 0c             	add    esp,0xc
c000cc10:	c3                   	ret    
c000cc11:	90                   	nop

c000cc12 <PhysicalDisk::~PhysicalDisk()>:
c000cc12:	83 ec 0c             	sub    esp,0xc
c000cc15:	83 ec 0c             	sub    esp,0xc
c000cc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1c:	e8 cd ff ff ff       	call   c000cbee <PhysicalDisk::~PhysicalDisk()>
c000cc21:	83 c4 10             	add    esp,0x10
c000cc24:	83 ec 08             	sub    esp,0x8
c000cc27:	68 6c 01 00 00       	push   0x16c
c000cc2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc30:	e8 e3 db ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	83 c4 0c             	add    esp,0xc
c000cc3b:	c3                   	ret    

c000cc3c <int_handler>:
c000cc3c:	55                   	push   ebp
c000cc3d:	57                   	push   edi
c000cc3e:	56                   	push   esi
c000cc3f:	53                   	push   ebx
c000cc40:	83 ec 0c             	sub    esp,0xc
c000cc43:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc47:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc4e:	74 0b                	je     c000cc5b <int_handler+0x1f>
c000cc50:	fa                   	cli    
c000cc51:	f4                   	hlt    
c000cc52:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc59:	75 f5                	jne    c000cc50 <int_handler+0x14>
c000cc5b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc5e:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc61:	83 f8 17             	cmp    eax,0x17
c000cc64:	76 40                	jbe    c000cca6 <int_handler+0x6a>
c000cc66:	c1 e6 04             	shl    esi,0x4
c000cc69:	31 db                	xor    ebx,ebx
c000cc6b:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc71:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc77:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc7b:	85 c0                	test   eax,eax
c000cc7d:	74 13                	je     c000cc92 <int_handler+0x56>
c000cc7f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc82:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc86:	74 2c                	je     c000ccb4 <int_handler+0x78>
c000cc88:	83 ec 08             	sub    esp,0x8
c000cc8b:	52                   	push   edx
c000cc8c:	57                   	push   edi
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	83 c3 01             	add    ebx,0x1
c000cc95:	83 fb 04             	cmp    ebx,0x4
c000cc98:	75 dd                	jne    c000cc77 <int_handler+0x3b>
c000cc9a:	83 c4 0c             	add    esp,0xc
c000cc9d:	31 c0                	xor    eax,eax
c000cc9f:	5b                   	pop    ebx
c000cca0:	31 d2                	xor    edx,edx
c000cca2:	5e                   	pop    esi
c000cca3:	5f                   	pop    edi
c000cca4:	5d                   	pop    ebp
c000cca5:	c3                   	ret    
c000cca6:	83 ec 0c             	sub    esp,0xc
c000cca9:	50                   	push   eax
c000ccaa:	e8 99 b2 00 00       	call   c0017f48 <HalEndOfInterrupt(int)>
c000ccaf:	83 c4 10             	add    esp,0x10
c000ccb2:	eb b2                	jmp    c000cc66 <int_handler+0x2a>
c000ccb4:	83 ec 08             	sub    esp,0x8
c000ccb7:	52                   	push   edx
c000ccb8:	57                   	push   edi
c000ccb9:	ff d0                	call   eax
c000ccbb:	83 c4 10             	add    esp,0x10
c000ccbe:	83 c4 0c             	add    esp,0xc
c000ccc1:	5b                   	pop    ebx
c000ccc2:	5e                   	pop    esi
c000ccc3:	5f                   	pop    edi
c000ccc4:	5d                   	pop    ebp
c000ccc5:	c3                   	ret    

c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ccc6:	56                   	push   esi
c000ccc7:	31 c0                	xor    eax,eax
c000ccc9:	53                   	push   ebx
c000ccca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ccce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccd2:	89 ca                	mov    edx,ecx
c000ccd4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccd8:	c1 e2 04             	shl    edx,0x4
c000ccdb:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cce3:	74 17                	je     c000ccfc <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cce5:	83 c0 01             	add    eax,0x1
c000cce8:	83 f8 04             	cmp    eax,0x4
c000cceb:	75 ee                	jne    c000ccdb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cced:	c7 44 24 0c 04 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021704
c000ccf5:	5b                   	pop    ebx
c000ccf6:	5e                   	pop    esi
c000ccf7:	e9 c5 46 00 00       	jmp    c00113c1 <KePanic(char const*)>
c000ccfc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccff:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cd06:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cd0d:	5b                   	pop    ebx
c000cd0e:	5e                   	pop    esi
c000cd0f:	c3                   	ret    

c000cd10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cd10:	57                   	push   edi
c000cd11:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cd17:	56                   	push   esi
c000cd18:	53                   	push   ebx
c000cd19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd21:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cd28:	74 54                	je     c000cd7e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cd2a:	89 c7                	mov    edi,eax
c000cd2c:	84 c0                	test   al,al
c000cd2e:	74 1d                	je     c000cd4d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cd30:	83 fe 0f             	cmp    esi,0xf
c000cd33:	0f 8f d5 00 00 00    	jg     c000ce0e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cd39:	0f b6 b6 08 32 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcdf8]
c000cd40:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd48:	d1 ef                	shr    edi,1
c000cd4a:	83 e7 01             	and    edi,0x1
c000cd4d:	83 ec 08             	sub    esp,0x8
c000cd50:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd55:	31 db                	xor    ebx,ebx
c000cd57:	50                   	push   eax
c000cd58:	68 11 17 02 c0       	push   0xc0021711
c000cd5d:	e8 e3 db ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd6a:	85 c0                	test   eax,eax
c000cd6c:	7f 55                	jg     c000cdc3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd6e:	83 ec 0c             	sub    esp,0xc
c000cd71:	68 28 17 02 c0       	push   0xc0021728
c000cd76:	e8 46 46 00 00       	call   c00113c1 <KePanic(char const*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd81:	89 f8                	mov    eax,edi
c000cd83:	31 d2                	xor    edx,edx
c000cd85:	c1 e0 04             	shl    eax,0x4
c000cd88:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd8f:	85 c9                	test   ecx,ecx
c000cd91:	0f 84 8e 00 00 00    	je     c000ce25 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd97:	83 c2 01             	add    edx,0x1
c000cd9a:	83 fa 04             	cmp    edx,0x4
c000cd9d:	75 e9                	jne    c000cd88 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd9f:	83 ec 0c             	sub    esp,0xc
c000cda2:	68 7c 17 02 c0       	push   0xc002177c
c000cda7:	e8 15 46 00 00       	call   c00113c1 <KePanic(char const*)>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cdb4:	5b                   	pop    ebx
c000cdb5:	5e                   	pop    esi
c000cdb6:	5f                   	pop    edi
c000cdb7:	c3                   	ret    
c000cdb8:	83 c3 01             	add    ebx,0x1
c000cdbb:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cdc1:	7e ab                	jle    c000cd6e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cdc3:	83 ec 08             	sub    esp,0x8
c000cdc6:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdcd:	56                   	push   esi
c000cdce:	50                   	push   eax
c000cdcf:	e8 fe 18 01 00       	call   c001e6d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	84 c0                	test   al,al
c000cdd9:	74 dd                	je     c000cdb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cddb:	83 ec 04             	sub    esp,0x4
c000cdde:	89 f8                	mov    eax,edi
c000cde0:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cde7:	0f b6 f8             	movzx  edi,al
c000cdea:	57                   	push   edi
c000cdeb:	8d 7e 20             	lea    edi,[esi+0x20]
c000cdee:	6a 00                	push   0x0
c000cdf0:	89 f8                	mov    eax,edi
c000cdf2:	0f b6 c0             	movzx  eax,al
c000cdf5:	50                   	push   eax
c000cdf6:	89 f0                	mov    eax,esi
c000cdf8:	6a 00                	push   0x0
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	6a 00                	push   0x0
c000cdff:	50                   	push   eax
c000ce00:	53                   	push   ebx
c000ce01:	e8 38 1a 01 00       	call   c001e83e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000ce06:	83 c4 20             	add    esp,0x20
c000ce09:	e9 73 ff ff ff       	jmp    c000cd81 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000ce0e:	83 ec 0c             	sub    esp,0xc
c000ce11:	31 ff                	xor    edi,edi
c000ce13:	68 44 17 02 c0       	push   0xc0021744
c000ce18:	e8 a4 45 00 00       	call   c00113c1 <KePanic(char const*)>
c000ce1d:	83 c4 10             	add    esp,0x10
c000ce20:	e9 28 ff ff ff       	jmp    c000cd4d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ce25:	8d 04 ba             	lea    eax,[edx+edi*4]
c000ce28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ce2c:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ce33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ce37:	5b                   	pop    ebx
c000ce38:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ce3f:	89 f0                	mov    eax,esi
c000ce41:	5e                   	pop    esi
c000ce42:	5f                   	pop    edi
c000ce43:	c3                   	ret    

c000ce44 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce4c:	c1 e0 04             	shl    eax,0x4
c000ce4f:	8d 50 10             	lea    edx,[eax+0x10]
c000ce52:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce58:	74 08                	je     c000ce62 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce5a:	83 c0 04             	add    eax,0x4
c000ce5d:	39 d0                	cmp    eax,edx
c000ce5f:	75 f1                	jne    c000ce52 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce61:	c3                   	ret    
c000ce62:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce6c:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce76:	eb e2                	jmp    c000ce5a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce78 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce78:	53                   	push   ebx
c000ce79:	83 ec 08             	sub    esp,0x8
c000ce7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce80:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce85:	74 0e                	je     c000ce95 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce87:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce8c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce93:	75 37                	jne    c000cecc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce99:	83 c0 20             	add    eax,0x20
c000ce9c:	c1 e0 04             	shl    eax,0x4
c000ce9f:	8d 50 10             	lea    edx,[eax+0x10]
c000cea2:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000cea8:	74 0c                	je     c000ceb6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ceaa:	83 c0 04             	add    eax,0x4
c000cead:	39 d0                	cmp    eax,edx
c000ceaf:	75 f1                	jne    c000cea2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ceb1:	83 c4 08             	add    esp,0x8
c000ceb4:	5b                   	pop    ebx
c000ceb5:	c3                   	ret    
c000ceb6:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cec0:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ceca:	eb de                	jmp    c000ceaa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cecc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ced1:	7f 11                	jg     c000cee4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ced3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced7:	0f b6 80 08 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcdf8]
c000cede:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cee2:	eb b1                	jmp    c000ce95 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cee4:	83 ec 0c             	sub    esp,0xc
c000cee7:	68 35 17 02 c0       	push   0xc0021735
c000ceec:	e8 d0 44 00 00       	call   c00113c1 <KePanic(char const*)>
c000cef1:	83 c4 10             	add    esp,0x10
c000cef4:	eb 9f                	jmp    c000ce95 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cef6 <setupINTS()>:
c000cef6:	31 c0                	xor    eax,eax
c000cef8:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cf02:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cf0c:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000cf16:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cf20:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cf2a:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cf34:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cf3e:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cf48:	83 c0 10             	add    eax,0x10
c000cf4b:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf50:	75 a6                	jne    c000cef8 <setupINTS()+0x2>
c000cf52:	c3                   	ret    

c000cf53 <convertLegacyIRQNumber(int)>:
c000cf53:	83 ec 0c             	sub    esp,0xc
c000cf56:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf60:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf67:	74 0c                	je     c000cf75 <convertLegacyIRQNumber(int)+0x22>
c000cf69:	83 f8 0f             	cmp    eax,0xf
c000cf6c:	7f 0b                	jg     c000cf79 <convertLegacyIRQNumber(int)+0x26>
c000cf6e:	0f b6 80 08 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcdf8]
c000cf75:	83 c4 0c             	add    esp,0xc
c000cf78:	c3                   	ret    
c000cf79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf7d:	83 ec 0c             	sub    esp,0xc
c000cf80:	68 44 17 02 c0       	push   0xc0021744
c000cf85:	e8 37 44 00 00       	call   c00113c1 <KePanic(char const*)>
c000cf8a:	83 c4 10             	add    esp,0x10
c000cf8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf91:	83 c4 0c             	add    esp,0xc
c000cf94:	c3                   	ret    
c000cf95:	90                   	nop

c000cf96 <startGUI(void*)>:
c000cf96:	55                   	push   ebp
c000cf97:	89 e5                	mov    ebp,esp
c000cf99:	53                   	push   ebx
c000cf9a:	83 ec 04             	sub    esp,0x4
c000cf9d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfa2:	83 e8 01             	sub    eax,0x1
c000cfa5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfaa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfaf:	85 c0                	test   eax,eax
c000cfb1:	75 01                	jne    c000cfb4 <startGUI(void*)+0x1e>
c000cfb3:	fb                   	sti    
c000cfb4:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfba:	83 ec 08             	sub    esp,0x8
c000cfbd:	6a 01                	push   0x1
c000cfbf:	68 a1 17 02 c0       	push   0xc00217a1
c000cfc4:	e8 59 82 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000cfc9:	83 c4 10             	add    esp,0x10
c000cfcc:	83 ec 08             	sub    esp,0x8
c000cfcf:	53                   	push   ebx
c000cfd0:	50                   	push   eax
c000cfd1:	e8 7d 84 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfdf:	83 ec 08             	sub    esp,0x8
c000cfe2:	6a 01                	push   0x1
c000cfe4:	68 bb 17 02 c0       	push   0xc00217bb
c000cfe9:	e8 34 82 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000cfee:	83 c4 10             	add    esp,0x10
c000cff1:	83 ec 08             	sub    esp,0x8
c000cff4:	53                   	push   ebx
c000cff5:	50                   	push   eax
c000cff6:	e8 58 84 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	90                   	nop
c000cfff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d002:	c9                   	leave  
c000d003:	c3                   	ret    

c000d004 <startGUIVESA(void*)>:
c000d004:	55                   	push   ebp
c000d005:	89 e5                	mov    ebp,esp
c000d007:	53                   	push   ebx
c000d008:	83 ec 04             	sub    esp,0x4
c000d00b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d010:	83 e8 01             	sub    eax,0x1
c000d013:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d018:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d01d:	85 c0                	test   eax,eax
c000d01f:	75 01                	jne    c000d022 <startGUIVESA(void*)+0x1e>
c000d021:	fb                   	sti    
c000d022:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d028:	83 ec 08             	sub    esp,0x8
c000d02b:	6a 01                	push   0x1
c000d02d:	68 d9 17 02 c0       	push   0xc00217d9
c000d032:	e8 eb 81 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000d037:	83 c4 10             	add    esp,0x10
c000d03a:	83 ec 08             	sub    esp,0x8
c000d03d:	53                   	push   ebx
c000d03e:	50                   	push   eax
c000d03f:	e8 0f 84 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d04d:	83 ec 08             	sub    esp,0x8
c000d050:	6a 01                	push   0x1
c000d052:	68 bb 17 02 c0       	push   0xc00217bb
c000d057:	e8 c6 81 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000d05c:	83 c4 10             	add    esp,0x10
c000d05f:	83 ec 08             	sub    esp,0x8
c000d062:	53                   	push   ebx
c000d063:	50                   	push   eax
c000d064:	e8 ea 83 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	90                   	nop
c000d06d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d070:	c9                   	leave  
c000d071:	c3                   	ret    

c000d072 <sendKeyToTerminal(unsigned char)>:
c000d072:	55                   	push   ebp
c000d073:	89 e5                	mov    ebp,esp
c000d075:	83 ec 28             	sub    esp,0x28
c000d078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d07b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d07e:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d083:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d087:	83 ec 08             	sub    esp,0x8
c000d08a:	52                   	push   edx
c000d08b:	50                   	push   eax
c000d08c:	e8 25 bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d091:	83 c4 10             	add    esp,0x10
c000d094:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d098:	83 f8 0a             	cmp    eax,0xa
c000d09b:	74 16                	je     c000d0b3 <sendKeyToTerminal(unsigned char)+0x41>
c000d09d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d0a1:	83 f8 03             	cmp    eax,0x3
c000d0a4:	74 0d                	je     c000d0b3 <sendKeyToTerminal(unsigned char)+0x41>
c000d0a6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d0aa:	83 f8 1c             	cmp    eax,0x1c
c000d0ad:	0f 85 97 00 00 00    	jne    c000d14a <sendKeyToTerminal(unsigned char)+0xd8>
c000d0b3:	fa                   	cli    
c000d0b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0b9:	83 c0 01             	add    eax,0x1
c000d0bc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0c1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0c6:	83 c0 01             	add    eax,0x1
c000d0c9:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0ce:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d0d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0d6:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d0e0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d0e4:	74 1f                	je     c000d105 <sendKeyToTerminal(unsigned char)+0x93>
c000d0e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0e9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0f5:	83 ec 0c             	sub    esp,0xc
c000d0f8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0fb:	e8 98 90 00 00       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c000d100:	83 c4 10             	add    esp,0x10
c000d103:	eb db                	jmp    c000d0e0 <sendKeyToTerminal(unsigned char)+0x6e>
c000d105:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d10a:	83 e8 01             	sub    eax,0x1
c000d10d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d112:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d117:	85 c0                	test   eax,eax
c000d119:	75 18                	jne    c000d133 <sendKeyToTerminal(unsigned char)+0xc1>
c000d11b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d120:	85 c0                	test   eax,eax
c000d122:	74 0f                	je     c000d133 <sendKeyToTerminal(unsigned char)+0xc1>
c000d124:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d12e:	e8 4d 8b 00 00       	call   c0015c80 <schedule()>
c000d133:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d138:	83 e8 01             	sub    eax,0x1
c000d13b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d140:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d145:	85 c0                	test   eax,eax
c000d147:	75 01                	jne    c000d14a <sendKeyToTerminal(unsigned char)+0xd8>
c000d149:	fb                   	sti    
c000d14a:	90                   	nop
c000d14b:	c9                   	leave  
c000d14c:	c3                   	ret    

c000d14d <sendKeyboardToken(KeyboardToken)>:
c000d14d:	55                   	push   ebp
c000d14e:	89 e5                	mov    ebp,esp
c000d150:	83 ec 18             	sub    esp,0x18
c000d153:	e8 b9 42 00 00       	call   c0011411 <KeUserIOReceived()>
c000d158:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d15b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d15e:	0f b7 c0             	movzx  eax,ax
c000d161:	83 f2 01             	xor    edx,0x1
c000d164:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d16a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d16f:	85 c0                	test   eax,eax
c000d171:	74 24                	je     c000d197 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d173:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d179:	83 ec 04             	sub    esp,0x4
c000d17c:	68 40 84 02 c0       	push   0xc0028440
c000d181:	83 ec 08             	sub    esp,0x8
c000d184:	89 e2                	mov    edx,esp
c000d186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d189:	89 02                	mov    DWORD PTR [edx],eax
c000d18b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d18e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d192:	ff d1                	call   ecx
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d19b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d19e:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d1a3:	0f b6 d2             	movzx  edx,dl
c000d1a6:	0f b6 c0             	movzx  eax,al
c000d1a9:	39 c2                	cmp    edx,eax
c000d1ab:	74 1c                	je     c000d1c9 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d1ad:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d1b0:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d1b5:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d1ba:	0f b6 c0             	movzx  eax,al
c000d1bd:	83 ec 0c             	sub    esp,0xc
c000d1c0:	50                   	push   eax
c000d1c1:	e8 3c b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d1c6:	83 c4 10             	add    esp,0x10
c000d1c9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d1cc:	0f b6 c0             	movzx  eax,al
c000d1cf:	85 c0                	test   eax,eax
c000d1d1:	0f 84 da 00 00 00    	je     c000d2b1 <sendKeyboardToken(KeyboardToken)+0x164>
c000d1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1da:	0f b7 c0             	movzx  eax,ax
c000d1dd:	3d 18 03 00 00       	cmp    eax,0x318
c000d1e2:	75 06                	jne    c000d1ea <sendKeyboardToken(KeyboardToken)+0x9d>
c000d1e4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ed:	0f b7 c0             	movzx  eax,ax
c000d1f0:	3d 19 03 00 00       	cmp    eax,0x319
c000d1f5:	75 06                	jne    c000d1fd <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1f7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d200:	0f b7 c0             	movzx  eax,ax
c000d203:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d208:	75 06                	jne    c000d210 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d20a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d213:	0f b7 c0             	movzx  eax,ax
c000d216:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d21b:	75 06                	jne    c000d223 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d21d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d226:	0f b7 c0             	movzx  eax,ax
c000d229:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d22e:	75 06                	jne    c000d236 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d230:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d239:	0f b7 c0             	movzx  eax,ax
c000d23c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d241:	75 06                	jne    c000d249 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d243:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24c:	0f b7 c0             	movzx  eax,ax
c000d24f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d254:	75 06                	jne    c000d25c <sendKeyboardToken(KeyboardToken)+0x10f>
c000d256:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d25c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25f:	0f b7 c0             	movzx  eax,ax
c000d262:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d267:	75 06                	jne    c000d26f <sendKeyboardToken(KeyboardToken)+0x122>
c000d269:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d26f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d272:	0f b7 c0             	movzx  eax,ax
c000d275:	3d 20 03 00 00       	cmp    eax,0x320
c000d27a:	75 06                	jne    c000d282 <sendKeyboardToken(KeyboardToken)+0x135>
c000d27c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d285:	0f b7 c0             	movzx  eax,ax
c000d288:	3d 21 03 00 00       	cmp    eax,0x321
c000d28d:	75 06                	jne    c000d295 <sendKeyboardToken(KeyboardToken)+0x148>
c000d28f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d298:	0f b7 c0             	movzx  eax,ax
c000d29b:	3d 22 03 00 00       	cmp    eax,0x322
c000d2a0:	0f 85 f1 00 00 00    	jne    c000d397 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d2a6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d2ac:	e9 e6 00 00 00       	jmp    c000d397 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d2b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b4:	0f b7 c0             	movzx  eax,ax
c000d2b7:	3d 18 03 00 00       	cmp    eax,0x318
c000d2bc:	75 0a                	jne    c000d2c8 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d2be:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d2c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cb:	0f b7 c0             	movzx  eax,ax
c000d2ce:	3d 19 03 00 00       	cmp    eax,0x319
c000d2d3:	75 0a                	jne    c000d2df <sendKeyboardToken(KeyboardToken)+0x192>
c000d2d5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d2db:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e2:	0f b7 c0             	movzx  eax,ax
c000d2e5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2ea:	75 0a                	jne    c000d2f6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2ec:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f9:	0f b7 c0             	movzx  eax,ax
c000d2fc:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d301:	75 0a                	jne    c000d30d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d303:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d309:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d30d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d310:	0f b7 c0             	movzx  eax,ax
c000d313:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d318:	75 0a                	jne    c000d324 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d31a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d320:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d327:	0f b7 c0             	movzx  eax,ax
c000d32a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d32f:	75 0a                	jne    c000d33b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d331:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d337:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d33b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d33e:	0f b7 c0             	movzx  eax,ax
c000d341:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d346:	75 0a                	jne    c000d352 <sendKeyboardToken(KeyboardToken)+0x205>
c000d348:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d34e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d355:	0f b7 c0             	movzx  eax,ax
c000d358:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d35d:	75 0a                	jne    c000d369 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d35f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d365:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d36c:	0f b7 c0             	movzx  eax,ax
c000d36f:	3d 20 03 00 00       	cmp    eax,0x320
c000d374:	75 0a                	jne    c000d380 <sendKeyboardToken(KeyboardToken)+0x233>
c000d376:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d37c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d383:	0f b7 c0             	movzx  eax,ax
c000d386:	3d 21 03 00 00       	cmp    eax,0x321
c000d38b:	75 0a                	jne    c000d397 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d38d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d393:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d39a:	0f b7 c0             	movzx  eax,ax
c000d39d:	3d 00 02 00 00       	cmp    eax,0x200
c000d3a2:	75 2f                	jne    c000d3d3 <sendKeyboardToken(KeyboardToken)+0x286>
c000d3a4:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3a9:	83 f0 01             	xor    eax,0x1
c000d3ac:	0f b6 c0             	movzx  eax,al
c000d3af:	85 c0                	test   eax,eax
c000d3b1:	74 20                	je     c000d3d3 <sendKeyboardToken(KeyboardToken)+0x286>
c000d3b3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3b8:	6a 01                	push   0x1
c000d3ba:	6a 00                	push   0x0
c000d3bc:	68 96 cf 00 c0       	push   0xc000cf96
c000d3c1:	50                   	push   eax
c000d3c2:	e8 69 86 00 00       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3d1:	eb 3a                	jmp    c000d40d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d6:	0f b7 c0             	movzx  eax,ax
c000d3d9:	3d 01 02 00 00       	cmp    eax,0x201
c000d3de:	75 2d                	jne    c000d40d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3e0:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3e5:	83 f0 01             	xor    eax,0x1
c000d3e8:	0f b6 c0             	movzx  eax,al
c000d3eb:	85 c0                	test   eax,eax
c000d3ed:	74 1e                	je     c000d40d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3ef:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3f4:	6a 01                	push   0x1
c000d3f6:	6a 00                	push   0x0
c000d3f8:	68 04 d0 00 c0       	push   0xc000d004
c000d3fd:	50                   	push   eax
c000d3fe:	e8 2d 86 00 00       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c000d403:	83 c4 10             	add    esp,0x10
c000d406:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d410:	0f b7 c0             	movzx  eax,ax
c000d413:	3d 25 03 00 00       	cmp    eax,0x325
c000d418:	75 06                	jne    c000d420 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d41a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d423:	0f b7 c0             	movzx  eax,ax
c000d426:	3d 24 03 00 00       	cmp    eax,0x324
c000d42b:	75 06                	jne    c000d433 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d42d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d436:	0f b7 c0             	movzx  eax,ax
c000d439:	3d 23 03 00 00       	cmp    eax,0x323
c000d43e:	75 06                	jne    c000d446 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d440:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d449:	0f b7 c0             	movzx  eax,ax
c000d44c:	3d 26 03 00 00       	cmp    eax,0x326
c000d451:	75 06                	jne    c000d459 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d453:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45c:	0f b7 c0             	movzx  eax,ax
c000d45f:	3d 27 03 00 00       	cmp    eax,0x327
c000d464:	75 06                	jne    c000d46c <sendKeyboardToken(KeyboardToken)+0x31f>
c000d466:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46f:	0f b7 c0             	movzx  eax,ax
c000d472:	3d 22 03 00 00       	cmp    eax,0x322
c000d477:	75 06                	jne    c000d47f <sendKeyboardToken(KeyboardToken)+0x332>
c000d479:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d47f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d483:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d486:	83 f0 01             	xor    eax,0x1
c000d489:	0f b6 c0             	movzx  eax,al
c000d48c:	85 c0                	test   eax,eax
c000d48e:	74 7c                	je     c000d50c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d490:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d495:	0f b6 c0             	movzx  eax,al
c000d498:	85 c0                	test   eax,eax
c000d49a:	74 43                	je     c000d4df <sendKeyboardToken(KeyboardToken)+0x392>
c000d49c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4a0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d4a4:	85 c0                	test   eax,eax
c000d4a6:	74 2b                	je     c000d4d3 <sendKeyboardToken(KeyboardToken)+0x386>
c000d4a8:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d4ae:	89 d0                	mov    eax,edx
c000d4b0:	c1 e0 02             	shl    eax,0x2
c000d4b3:	01 d0                	add    eax,edx
c000d4b5:	01 c0                	add    eax,eax
c000d4b7:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4bf:	0f b7 c0             	movzx  eax,ax
c000d4c2:	8d 50 d0             	lea    edx,[eax-0x30]
c000d4c5:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4ca:	01 d0                	add    eax,edx
c000d4cc:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d4d1:	eb 71                	jmp    c000d544 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4d3:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4dd:	eb 65                	jmp    c000d544 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4df:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4e4:	85 c0                	test   eax,eax
c000d4e6:	74 18                	je     c000d500 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4e8:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4ed:	0f b6 c0             	movzx  eax,al
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	50                   	push   eax
c000d4f4:	e8 79 fb ff ff       	call   c000d072 <sendKeyToTerminal(unsigned char)>
c000d4f9:	83 c4 10             	add    esp,0x10
c000d4fc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d500:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d50a:	eb 38                	jmp    c000d544 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50f:	0f b7 c0             	movzx  eax,ax
c000d512:	3d 01 01 00 00       	cmp    eax,0x101
c000d517:	75 2b                	jne    c000d544 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d519:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d51e:	85 c0                	test   eax,eax
c000d520:	74 18                	je     c000d53a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d522:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d527:	0f b6 c0             	movzx  eax,al
c000d52a:	83 ec 0c             	sub    esp,0xc
c000d52d:	50                   	push   eax
c000d52e:	e8 3f fb ff ff       	call   c000d072 <sendKeyToTerminal(unsigned char)>
c000d533:	83 c4 10             	add    esp,0x10
c000d536:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d53a:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d544:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d547:	83 f0 01             	xor    eax,0x1
c000d54a:	0f b6 c0             	movzx  eax,al
c000d54d:	85 c0                	test   eax,eax
c000d54f:	74 5a                	je     c000d5ab <sendKeyboardToken(KeyboardToken)+0x45e>
c000d551:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d554:	83 f0 01             	xor    eax,0x1
c000d557:	0f b6 c0             	movzx  eax,al
c000d55a:	85 c0                	test   eax,eax
c000d55c:	74 4d                	je     c000d5ab <sendKeyboardToken(KeyboardToken)+0x45e>
c000d55e:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d563:	83 f0 01             	xor    eax,0x1
c000d566:	0f b6 c0             	movzx  eax,al
c000d569:	85 c0                	test   eax,eax
c000d56b:	74 3e                	je     c000d5ab <sendKeyboardToken(KeyboardToken)+0x45e>
c000d56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d570:	0f b7 c0             	movzx  eax,ax
c000d573:	83 f8 1f             	cmp    eax,0x1f
c000d576:	76 0b                	jbe    c000d583 <sendKeyboardToken(KeyboardToken)+0x436>
c000d578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57b:	0f b7 c0             	movzx  eax,ax
c000d57e:	83 f8 7e             	cmp    eax,0x7e
c000d581:	76 16                	jbe    c000d599 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d586:	0f b7 c0             	movzx  eax,ax
c000d589:	83 f8 0a             	cmp    eax,0xa
c000d58c:	74 0b                	je     c000d599 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d58e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d591:	0f b7 c0             	movzx  eax,ax
c000d594:	83 f8 08             	cmp    eax,0x8
c000d597:	75 12                	jne    c000d5ab <sendKeyboardToken(KeyboardToken)+0x45e>
c000d599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59c:	0f b6 c0             	movzx  eax,al
c000d59f:	83 ec 0c             	sub    esp,0xc
c000d5a2:	50                   	push   eax
c000d5a3:	e8 ca fa ff ff       	call   c000d072 <sendKeyToTerminal(unsigned char)>
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d5ae:	83 f0 01             	xor    eax,0x1
c000d5b1:	0f b6 c0             	movzx  eax,al
c000d5b4:	85 c0                	test   eax,eax
c000d5b6:	74 5d                	je     c000d615 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5b8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5bb:	83 f0 01             	xor    eax,0x1
c000d5be:	0f b6 c0             	movzx  eax,al
c000d5c1:	85 c0                	test   eax,eax
c000d5c3:	74 50                	je     c000d615 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5c5:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d5ca:	0f b6 c0             	movzx  eax,al
c000d5cd:	85 c0                	test   eax,eax
c000d5cf:	74 44                	je     c000d615 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d4:	0f b7 c0             	movzx  eax,ax
c000d5d7:	83 f8 3f             	cmp    eax,0x3f
c000d5da:	76 39                	jbe    c000d615 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5df:	0f b7 c0             	movzx  eax,ax
c000d5e2:	83 f8 7f             	cmp    eax,0x7f
c000d5e5:	77 2e                	ja     c000d615 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ea:	88 c2                	mov    dl,al
c000d5ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ef:	0f b7 c0             	movzx  eax,ax
c000d5f2:	83 f8 5f             	cmp    eax,0x5f
c000d5f5:	76 04                	jbe    c000d5fb <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5f7:	b0 20                	mov    al,0x20
c000d5f9:	eb 02                	jmp    c000d5fd <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5fb:	b0 00                	mov    al,0x0
c000d5fd:	89 d1                	mov    ecx,edx
c000d5ff:	29 c1                	sub    ecx,eax
c000d601:	89 c8                	mov    eax,ecx
c000d603:	83 e8 40             	sub    eax,0x40
c000d606:	0f b6 c0             	movzx  eax,al
c000d609:	83 ec 0c             	sub    esp,0xc
c000d60c:	50                   	push   eax
c000d60d:	e8 60 fa ff ff       	call   c000d072 <sendKeyToTerminal(unsigned char)>
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d618:	0f b7 c0             	movzx  eax,ax
c000d61b:	3d 00 03 00 00       	cmp    eax,0x300
c000d620:	75 12                	jne    c000d634 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d622:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d625:	83 f0 01             	xor    eax,0x1
c000d628:	0f b6 c0             	movzx  eax,al
c000d62b:	85 c0                	test   eax,eax
c000d62d:	74 05                	je     c000d634 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d62f:	e8 cf ae ff ff       	call   c0008503 <doTerminalCycle()>
c000d634:	90                   	nop
c000d635:	c9                   	leave  
c000d636:	c3                   	ret    

c000d637 <clearInternalKeybuffer(VgaText*)>:
c000d637:	55                   	push   ebp
c000d638:	89 e5                	mov    ebp,esp
c000d63a:	83 ec 08             	sub    esp,0x8
c000d63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d640:	05 02 01 00 00       	add    eax,0x102
c000d645:	83 ec 0c             	sub    esp,0xc
c000d648:	50                   	push   eax
c000d649:	e8 22 2f ff ff       	call   c0000570 <strlen>
c000d64e:	83 c4 10             	add    esp,0x10
c000d651:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d654:	81 c2 02 01 00 00    	add    edx,0x102
c000d65a:	83 ec 04             	sub    esp,0x4
c000d65d:	50                   	push   eax
c000d65e:	6a 00                	push   0x0
c000d660:	52                   	push   edx
c000d661:	e8 8a 2e ff ff       	call   c00004f0 <memset>
c000d666:	83 c4 10             	add    esp,0x10
c000d669:	90                   	nop
c000d66a:	c9                   	leave  
c000d66b:	c3                   	ret    

c000d66c <readKeyboard(VgaText*, char*, unsigned long)>:
c000d66c:	55                   	push   ebp
c000d66d:	89 e5                	mov    ebp,esp
c000d66f:	83 ec 18             	sub    esp,0x18
c000d672:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d677:	85 c0                	test   eax,eax
c000d679:	74 2a                	je     c000d6a5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d67b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d681:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d687:	83 ec 04             	sub    esp,0x4
c000d68a:	68 40 84 02 c0       	push   0xc0028440
c000d68f:	83 ec 08             	sub    esp,0x8
c000d692:	89 e2                	mov    edx,esp
c000d694:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d697:	89 02                	mov    DWORD PTR [edx],eax
c000d699:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d69c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d6a0:	ff d1                	call   ecx
c000d6a2:	83 c4 10             	add    esp,0x10
c000d6a5:	fb                   	sti    
c000d6a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d6ad:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d6b1:	0f 84 0d 01 00 00    	je     c000d7c4 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d6b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ba:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6c0:	0f be c0             	movsx  eax,al
c000d6c3:	85 c0                	test   eax,eax
c000d6c5:	75 2c                	jne    c000d6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d6c7:	fa                   	cli    
c000d6c8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6cd:	83 c0 01             	add    eax,0x1
c000d6d0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6d5:	e8 a6 85 00 00       	call   c0015c80 <schedule()>
c000d6da:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6df:	83 e8 01             	sub    eax,0x1
c000d6e2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6e7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	75 c7                	jne    c000d6b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6f0:	fb                   	sti    
c000d6f1:	eb c4                	jmp    c000d6b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6f6:	8d 50 01             	lea    edx,[eax+0x1]
c000d6f9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6ff:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d705:	88 10                	mov    BYTE PTR [eax],dl
c000d707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d710:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d713:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d717:	83 f8 03             	cmp    eax,0x3
c000d71a:	75 1e                	jne    c000d73a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d71c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d721:	8b 00                	mov    eax,DWORD PTR [eax]
c000d723:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d726:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d72c:	83 ec 08             	sub    esp,0x8
c000d72f:	6a 02                	push   0x2
c000d731:	50                   	push   eax
c000d732:	e8 2b 41 00 00       	call   c0011862 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d73e:	83 f8 1c             	cmp    eax,0x1c
c000d741:	75 1e                	jne    c000d761 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d743:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d748:	8b 00                	mov    eax,DWORD PTR [eax]
c000d74a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d74d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d753:	83 ec 08             	sub    esp,0x8
c000d756:	6a 09                	push   0x9
c000d758:	50                   	push   eax
c000d759:	e8 04 41 00 00       	call   c0011862 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d764:	05 02 01 00 00       	add    eax,0x102
c000d769:	83 ec 0c             	sub    esp,0xc
c000d76c:	50                   	push   eax
c000d76d:	e8 fe 2d ff ff       	call   c0000570 <strlen>
c000d772:	83 c4 10             	add    esp,0x10
c000d775:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d778:	81 c2 02 01 00 00    	add    edx,0x102
c000d77e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d781:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d784:	81 c2 02 01 00 00    	add    edx,0x102
c000d78a:	83 ec 04             	sub    esp,0x4
c000d78d:	50                   	push   eax
c000d78e:	51                   	push   ecx
c000d78f:	52                   	push   edx
c000d790:	e8 3b 2c ff ff       	call   c00003d0 <memmove>
c000d795:	83 c4 10             	add    esp,0x10
c000d798:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d79c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d7a0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d7a4:	83 f8 0a             	cmp    eax,0xa
c000d7a7:	74 16                	je     c000d7bf <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d7a9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d7ad:	83 f8 03             	cmp    eax,0x3
c000d7b0:	74 0d                	je     c000d7bf <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d7b2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d7b6:	83 f8 1c             	cmp    eax,0x1c
c000d7b9:	0f 85 ee fe ff ff    	jne    c000d6ad <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d7bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d7c2:	eb 03                	jmp    c000d7c7 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d7c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d7c7:	c9                   	leave  
c000d7c8:	c3                   	ret    
c000d7c9:	90                   	nop

c000d7ca <Keyboard::Keyboard(char const*)>:
c000d7ca:	83 ec 0c             	sub    esp,0xc
c000d7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d1:	83 ec 08             	sub    esp,0x8
c000d7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d8:	50                   	push   eax
c000d7d9:	e8 4c f1 ff ff       	call   c000c92a <Device::Device(char const*)>
c000d7de:	83 c4 10             	add    esp,0x10
c000d7e1:	ba fc 17 02 c0       	mov    edx,0xc00217fc
c000d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ea:	89 10                	mov    DWORD PTR [eax],edx
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7fa:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d801:	90                   	nop
c000d802:	83 c4 0c             	add    esp,0xc
c000d805:	c3                   	ret    

c000d806 <Keyboard::~Keyboard()>:
c000d806:	83 ec 0c             	sub    esp,0xc
c000d809:	ba fc 17 02 c0       	mov    edx,0xc00217fc
c000d80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d812:	89 10                	mov    DWORD PTR [eax],edx
c000d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d818:	83 ec 0c             	sub    esp,0xc
c000d81b:	50                   	push   eax
c000d81c:	e8 73 ee ff ff       	call   c000c694 <Device::~Device()>
c000d821:	83 c4 10             	add    esp,0x10
c000d824:	90                   	nop
c000d825:	83 c4 0c             	add    esp,0xc
c000d828:	c3                   	ret    
c000d829:	90                   	nop

c000d82a <Keyboard::~Keyboard()>:
c000d82a:	83 ec 0c             	sub    esp,0xc
c000d82d:	83 ec 0c             	sub    esp,0xc
c000d830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d834:	e8 cd ff ff ff       	call   c000d806 <Keyboard::~Keyboard()>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	83 ec 08             	sub    esp,0x8
c000d83f:	68 5c 01 00 00       	push   0x15c
c000d844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d848:	e8 cb cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d84d:	83 c4 10             	add    esp,0x10
c000d850:	83 c4 0c             	add    esp,0xc
c000d853:	c3                   	ret    

c000d854 <LogicalDisk::close(int, int, void*)>:
c000d854:	83 c8 ff             	or     eax,0xffffffff
c000d857:	c3                   	ret    

c000d858 <LogicalDisk::~LogicalDisk()>:
c000d858:	83 ec 0c             	sub    esp,0xc
c000d85b:	ba 74 18 02 c0       	mov    edx,0xc0021874
c000d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d864:	89 10                	mov    DWORD PTR [eax],edx
c000d866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86a:	83 ec 0c             	sub    esp,0xc
c000d86d:	50                   	push   eax
c000d86e:	e8 21 ee ff ff       	call   c000c694 <Device::~Device()>
c000d873:	83 c4 10             	add    esp,0x10
c000d876:	90                   	nop
c000d877:	83 c4 0c             	add    esp,0xc
c000d87a:	c3                   	ret    
c000d87b:	90                   	nop

c000d87c <LogicalDisk::~LogicalDisk()>:
c000d87c:	83 ec 0c             	sub    esp,0xc
c000d87f:	83 ec 0c             	sub    esp,0xc
c000d882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d886:	e8 cd ff ff ff       	call   c000d858 <LogicalDisk::~LogicalDisk()>
c000d88b:	83 c4 10             	add    esp,0x10
c000d88e:	83 ec 08             	sub    esp,0x8
c000d891:	68 78 01 00 00       	push   0x178
c000d896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d89a:	e8 79 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d89f:	83 c4 10             	add    esp,0x10
c000d8a2:	83 c4 0c             	add    esp,0xc
c000d8a5:	c3                   	ret    

c000d8a6 <LogicalDisk::open(int, int, void*)>:
c000d8a6:	83 ec 18             	sub    esp,0x18
c000d8a9:	68 28 18 02 c0       	push   0xc0021828
c000d8ae:	e8 0e 3b 00 00       	call   c00113c1 <KePanic(char const*)>
c000d8b3:	83 c8 ff             	or     eax,0xffffffff
c000d8b6:	83 c4 1c             	add    esp,0x1c
c000d8b9:	c3                   	ret    

c000d8ba <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d8ba:	53                   	push   ebx
c000d8bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d8cd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d8d3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d8d9:	77 10                	ja     c000d8eb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d8db:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d8e1:	89 d3                	mov    ebx,edx
c000d8e3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8e9:	72 05                	jb     c000d8f0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8eb:	83 c8 ff             	or     eax,0xffffffff
c000d8ee:	89 c2                	mov    edx,eax
c000d8f0:	5b                   	pop    ebx
c000d8f1:	c3                   	ret    

c000d8f2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8f2:	56                   	push   esi
c000d8f3:	83 c8 ff             	or     eax,0xffffffff
c000d8f6:	53                   	push   ebx
c000d8f7:	89 c2                	mov    edx,eax
c000d8f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8fd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d901:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d905:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d90b:	77 27                	ja     c000d934 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d90d:	89 d8                	mov    eax,ebx
c000d90f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d915:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d91b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d920:	89 c2                	mov    edx,eax
c000d922:	73 10                	jae    c000d934 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d924:	89 c8                	mov    eax,ecx
c000d926:	89 da                	mov    edx,ebx
c000d928:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d92e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d934:	5b                   	pop    ebx
c000d935:	5e                   	pop    esi
c000d936:	c3                   	ret    
c000d937:	90                   	nop

c000d938 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d938:	83 ec 1c             	sub    esp,0x1c
c000d93b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d93f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d94b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d94f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d952:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d956:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95e:	83 ec 08             	sub    esp,0x8
c000d961:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d965:	50                   	push   eax
c000d966:	e8 bf ef ff ff       	call   c000c92a <Device::Device(char const*)>
c000d96b:	83 c4 10             	add    esp,0x10
c000d96e:	ba 74 18 02 c0       	mov    edx,0xc0021874
c000d973:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d977:	89 10                	mov    DWORD PTR [eax],edx
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d993:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d9a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d9ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9b4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d9ba:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d9c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d9c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d9c7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9cb:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d9d1:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9df:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e9:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9f3:	90                   	nop
c000d9f4:	83 c4 1c             	add    esp,0x1c
c000d9f7:	c3                   	ret    

c000d9f8 <LogicalDisk::assignDriveLetter()>:
c000d9f8:	55                   	push   ebp
c000d9f9:	57                   	push   edi
c000d9fa:	56                   	push   esi
c000d9fb:	53                   	push   ebx
c000d9fc:	83 ec 14             	sub    esp,0x14
c000d9ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da03:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000da09:	b0 41                	mov    al,0x41
c000da0b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000da11:	84 d2                	test   dl,dl
c000da13:	75 02                	jne    c000da17 <LogicalDisk::assignDriveLetter()+0x1f>
c000da15:	b0 43                	mov    al,0x43
c000da17:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000da1d:	0f b6 ca             	movzx  ecx,dl
c000da20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000da24:	0f be e8             	movsx  ebp,al
c000da27:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000da2d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da31:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000da35:	3c 43                	cmp    al,0x43
c000da37:	75 10                	jne    c000da49 <LogicalDisk::assignDriveLetter()+0x51>
c000da39:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000da40:	75 5a                	jne    c000da9c <LogicalDisk::assignDriveLetter()+0xa4>
c000da42:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da47:	75 53                	jne    c000da9c <LogicalDisk::assignDriveLetter()+0xa4>
c000da49:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da4c:	ba 01 00 00 00       	mov    edx,0x1
c000da51:	89 34 24             	mov    DWORD PTR [esp],esi
c000da54:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da57:	d3 e2                	shl    edx,cl
c000da59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da5d:	89 d7                	mov    edi,edx
c000da5f:	89 d6                	mov    esi,edx
c000da61:	c1 ff 1f             	sar    edi,0x1f
c000da64:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da68:	21 f9                	and    ecx,edi
c000da6a:	09 d1                	or     ecx,edx
c000da6c:	75 2e                	jne    c000da9c <LogicalDisk::assignDriveLetter()+0xa4>
c000da6e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da76:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da7c:	09 f2                	or     edx,esi
c000da7e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da81:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da87:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da92:	09 fa                	or     edx,edi
c000da94:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da9a:	eb 0d                	jmp    c000daa9 <LogicalDisk::assignDriveLetter()+0xb1>
c000da9c:	8d 50 01             	lea    edx,[eax+0x1]
c000da9f:	45                   	inc    ebp
c000daa0:	88 d0                	mov    al,dl
c000daa2:	80 fa 5b             	cmp    dl,0x5b
c000daa5:	75 8e                	jne    c000da35 <LogicalDisk::assignDriveLetter()+0x3d>
c000daa7:	31 c0                	xor    eax,eax
c000daa9:	83 c4 14             	add    esp,0x14
c000daac:	5b                   	pop    ebx
c000daad:	5e                   	pop    esi
c000daae:	5f                   	pop    edi
c000daaf:	5d                   	pop    ebp
c000dab0:	c3                   	ret    
c000dab1:	90                   	nop

c000dab2 <LogicalDisk::mount()>:
c000dab2:	56                   	push   esi
c000dab3:	53                   	push   ebx
c000dab4:	53                   	push   ebx
c000dab5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dab9:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000dabf:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dac9:	85 db                	test   ebx,ebx
c000dacb:	74 27                	je     c000daf4 <LogicalDisk::mount()+0x42>
c000dacd:	51                   	push   ecx
c000dace:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dad5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dad7:	83 e8 41             	sub    eax,0x41
c000dada:	50                   	push   eax
c000dadb:	56                   	push   esi
c000dadc:	53                   	push   ebx
c000dadd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	84 c0                	test   al,al
c000dae5:	74 08                	je     c000daef <LogicalDisk::mount()+0x3d>
c000dae7:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000daed:	eb 07                	jmp    c000daf6 <LogicalDisk::mount()+0x44>
c000daef:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000daf2:	eb d5                	jmp    c000dac9 <LogicalDisk::mount()+0x17>
c000daf4:	31 c0                	xor    eax,eax
c000daf6:	5a                   	pop    edx
c000daf7:	5b                   	pop    ebx
c000daf8:	5e                   	pop    esi
c000daf9:	c3                   	ret    

c000dafa <LogicalDisk::unmount()>:
c000dafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafe:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000db08:	c3                   	ret    
c000db09:	90                   	nop

c000db0a <LogicalDisk::eject()>:
c000db0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db0e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000db14:	8b 10                	mov    edx,DWORD PTR [eax]
c000db16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db1a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000db1d:	90                   	nop

c000db1e <LogicalDisk::unassignDriveLetter()>:
c000db1e:	57                   	push   edi
c000db1f:	56                   	push   esi
c000db20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db24:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000db2b:	85 c9                	test   ecx,ecx
c000db2d:	75 0f                	jne    c000db3e <LogicalDisk::unassignDriveLetter()+0x20>
c000db2f:	c7 44 24 0c 4c 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc002184c
c000db37:	5e                   	pop    esi
c000db38:	5f                   	pop    edi
c000db39:	e9 83 38 00 00       	jmp    c00113c1 <KePanic(char const*)>
c000db3e:	83 e9 41             	sub    ecx,0x41
c000db41:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db48:	b8 01 00 00 00       	mov    eax,0x1
c000db4d:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db58:	d3 e0                	shl    eax,cl
c000db5a:	89 c7                	mov    edi,eax
c000db5c:	f7 d0                	not    eax
c000db5e:	c1 ff 1f             	sar    edi,0x1f
c000db61:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db67:	89 fe                	mov    esi,edi
c000db69:	f7 d6                	not    esi
c000db6b:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db71:	5e                   	pop    esi
c000db72:	5f                   	pop    edi
c000db73:	c3                   	ret    

c000db74 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db74:	57                   	push   edi
c000db75:	56                   	push   esi
c000db76:	53                   	push   ebx
c000db77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db87:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db8d:	77 41                	ja     c000dbd0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db8f:	99                   	cdq    
c000db90:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db96:	01 c8                	add    eax,ecx
c000db98:	11 da                	adc    edx,ebx
c000db9a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dba0:	19 d7                	sbb    edi,edx
c000dba2:	72 33                	jb     c000dbd7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dba4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbaa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbb0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbb4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbb8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc8:	5b                   	pop    ebx
c000dbc9:	5e                   	pop    esi
c000dbca:	5f                   	pop    edi
c000dbcb:	e9 c6 0a 00 00       	jmp    c000e696 <VCache::read(unsigned long long, int, void*)>
c000dbd0:	b8 05 00 00 00       	mov    eax,0x5
c000dbd5:	eb 05                	jmp    c000dbdc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dbd7:	b8 07 00 00 00       	mov    eax,0x7
c000dbdc:	5b                   	pop    ebx
c000dbdd:	5e                   	pop    esi
c000dbde:	5f                   	pop    edi
c000dbdf:	c3                   	ret    

c000dbe0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dbe0:	57                   	push   edi
c000dbe1:	56                   	push   esi
c000dbe2:	53                   	push   ebx
c000dbe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dbe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbeb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dbef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbf3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbf9:	77 41                	ja     c000dc3c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbfb:	99                   	cdq    
c000dbfc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dc02:	01 c8                	add    eax,ecx
c000dc04:	11 da                	adc    edx,ebx
c000dc06:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dc0c:	19 d7                	sbb    edi,edx
c000dc0e:	72 33                	jb     c000dc43 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dc10:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dc16:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dc1c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dc20:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc24:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dc2a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dc30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc34:	5b                   	pop    ebx
c000dc35:	5e                   	pop    esi
c000dc36:	5f                   	pop    edi
c000dc37:	e9 6c 09 00 00       	jmp    c000e5a8 <VCache::write(unsigned long long, int, void*)>
c000dc3c:	b8 05 00 00 00       	mov    eax,0x5
c000dc41:	eb 05                	jmp    c000dc48 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dc43:	b8 07 00 00 00       	mov    eax,0x7
c000dc48:	5b                   	pop    ebx
c000dc49:	5e                   	pop    esi
c000dc4a:	5f                   	pop    edi
c000dc4b:	c3                   	ret    

c000dc4c <Mouse::Mouse(char const*)>:
c000dc4c:	83 ec 0c             	sub    esp,0xc
c000dc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc53:	83 ec 08             	sub    esp,0x8
c000dc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc5a:	50                   	push   eax
c000dc5b:	e8 ca ec ff ff       	call   c000c92a <Device::Device(char const*)>
c000dc60:	83 c4 10             	add    esp,0x10
c000dc63:	ba a0 18 02 c0       	mov    edx,0xc00218a0
c000dc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc6c:	89 10                	mov    DWORD PTR [eax],edx
c000dc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc72:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc7c:	90                   	nop
c000dc7d:	83 c4 0c             	add    esp,0xc
c000dc80:	c3                   	ret    
c000dc81:	90                   	nop
c000dc82:	66 90                	xchg   ax,ax

c000dc84 <Mouse::~Mouse()>:
c000dc84:	83 ec 0c             	sub    esp,0xc
c000dc87:	ba a0 18 02 c0       	mov    edx,0xc00218a0
c000dc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc90:	89 10                	mov    DWORD PTR [eax],edx
c000dc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc96:	83 ec 0c             	sub    esp,0xc
c000dc99:	50                   	push   eax
c000dc9a:	e8 f5 e9 ff ff       	call   c000c694 <Device::~Device()>
c000dc9f:	83 c4 10             	add    esp,0x10
c000dca2:	90                   	nop
c000dca3:	83 c4 0c             	add    esp,0xc
c000dca6:	c3                   	ret    
c000dca7:	90                   	nop

c000dca8 <Mouse::~Mouse()>:
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	83 ec 0c             	sub    esp,0xc
c000dcae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcb2:	e8 cd ff ff ff       	call   c000dc84 <Mouse::~Mouse()>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	83 ec 08             	sub    esp,0x8
c000dcbd:	68 58 01 00 00       	push   0x158
c000dcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc6:	e8 4d cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	83 c4 0c             	add    esp,0xc
c000dcd1:	c3                   	ret    

c000dcd2 <NIC::getMAC()>:
c000dcd2:	31 c0                	xor    eax,eax
c000dcd4:	31 d2                	xor    edx,edx
c000dcd6:	c3                   	ret    
c000dcd7:	90                   	nop

c000dcd8 <NIC::write(int, unsigned char*, int*)>:
c000dcd8:	b8 01 00 00 00       	mov    eax,0x1
c000dcdd:	c3                   	ret    

c000dcde <NIC::NIC(char const*)>:
c000dcde:	83 ec 0c             	sub    esp,0xc
c000dce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce5:	83 ec 08             	sub    esp,0x8
c000dce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcec:	50                   	push   eax
c000dced:	e8 38 ec ff ff       	call   c000c92a <Device::Device(char const*)>
c000dcf2:	83 c4 10             	add    esp,0x10
c000dcf5:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000dcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcfe:	89 10                	mov    DWORD PTR [eax],edx
c000dd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd04:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dd0e:	90                   	nop
c000dd0f:	83 c4 0c             	add    esp,0xc
c000dd12:	c3                   	ret    
c000dd13:	90                   	nop

c000dd14 <NIC::~NIC()>:
c000dd14:	83 ec 0c             	sub    esp,0xc
c000dd17:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000dd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd20:	89 10                	mov    DWORD PTR [eax],edx
c000dd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd26:	83 ec 0c             	sub    esp,0xc
c000dd29:	50                   	push   eax
c000dd2a:	e8 65 e9 ff ff       	call   c000c694 <Device::~Device()>
c000dd2f:	83 c4 10             	add    esp,0x10
c000dd32:	90                   	nop
c000dd33:	83 c4 0c             	add    esp,0xc
c000dd36:	c3                   	ret    
c000dd37:	90                   	nop

c000dd38 <NIC::~NIC()>:
c000dd38:	83 ec 0c             	sub    esp,0xc
c000dd3b:	83 ec 0c             	sub    esp,0xc
c000dd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd42:	e8 cd ff ff ff       	call   c000dd14 <NIC::~NIC()>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	83 ec 08             	sub    esp,0x8
c000dd4d:	68 58 01 00 00       	push   0x158
c000dd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd56:	e8 bd ca ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dd5b:	83 c4 10             	add    esp,0x10
c000dd5e:	83 c4 0c             	add    esp,0xc
c000dd61:	c3                   	ret    

c000dd62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd62:	55                   	push   ebp
c000dd63:	57                   	push   edi
c000dd64:	56                   	push   esi
c000dd65:	53                   	push   ebx
c000dd66:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd6c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dd73:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dd7a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd81:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd8c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd90:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd97:	e8 8a ec ff ff       	call   c000ca26 <Device::getName()>
c000dd9c:	5a                   	pop    edx
c000dd9d:	59                   	pop    ecx
c000dd9e:	50                   	push   eax
c000dd9f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dda3:	55                   	push   ebp
c000dda4:	e8 97 28 ff ff       	call   c0000640 <strcpy>
c000dda9:	5b                   	pop    ebx
c000ddaa:	58                   	pop    eax
c000ddab:	68 f8 18 02 c0       	push   0xc00218f8
c000ddb0:	55                   	push   ebp
c000ddb1:	e8 8a 2a ff ff       	call   c0000840 <strcat>
c000ddb6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ddbd:	e8 f4 9c ff ff       	call   c0007ab6 <malloc>
c000ddc2:	83 c4 0c             	add    esp,0xc
c000ddc5:	89 c3                	mov    ebx,eax
c000ddc7:	57                   	push   edi
c000ddc8:	56                   	push   esi
c000ddc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddd1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ddd8:	55                   	push   ebp
c000ddd9:	50                   	push   eax
c000ddda:	e8 59 fb ff ff       	call   c000d938 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dddf:	83 c4 14             	add    esp,0x14
c000dde2:	53                   	push   ebx
c000dde3:	e8 10 fc ff ff       	call   c000d9f8 <LogicalDisk::assignDriveLetter()>
c000dde8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ddeb:	e8 c2 fc ff ff       	call   c000dab2 <LogicalDisk::mount()>
c000ddf0:	58                   	pop    eax
c000ddf1:	5a                   	pop    edx
c000ddf2:	53                   	push   ebx
c000ddf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddfa:	e8 93 e9 ff ff       	call   c000c792 <Device::addChild(Device*)>
c000ddff:	81 c4 2c 01 00 00    	add    esp,0x12c
c000de05:	5b                   	pop    ebx
c000de06:	5e                   	pop    esi
c000de07:	5f                   	pop    edi
c000de08:	5d                   	pop    ebp
c000de09:	c3                   	ret    

c000de0a <createPartitionsForDisk(PhysicalDisk*)>:
c000de0a:	55                   	push   ebp
c000de0b:	57                   	push   edi
c000de0c:	56                   	push   esi
c000de0d:	53                   	push   ebx
c000de0e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000de14:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000de1b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000de21:	3d 00 02 00 00       	cmp    eax,0x200
c000de26:	74 27                	je     c000de4f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000de28:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000de2e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000de34:	83 ec 10             	sub    esp,0x10
c000de37:	0f a4 f7 0a          	shld   edi,esi,0xa
c000de3b:	99                   	cdq    
c000de3c:	c1 e6 0a             	shl    esi,0xa
c000de3f:	52                   	push   edx
c000de40:	89 fd                	mov    ebp,edi
c000de42:	50                   	push   eax
c000de43:	55                   	push   ebp
c000de44:	56                   	push   esi
c000de45:	e8 a6 14 01 00       	call   c001f2f0 <__udivdi3>
c000de4a:	e9 b9 00 00 00       	jmp    c000df08 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de54:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de58:	56                   	push   esi
c000de59:	6a 01                	push   0x1
c000de5b:	6a 00                	push   0x0
c000de5d:	6a 00                	push   0x0
c000de5f:	53                   	push   ebx
c000de60:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de63:	83 c4 20             	add    esp,0x20
c000de66:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de6e:	75 0a                	jne    c000de7a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de70:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de78:	74 2c                	je     c000dea6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de7a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de80:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de86:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de8c:	83 ec 10             	sub    esp,0x10
c000de8f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de93:	89 f7                	mov    edi,esi
c000de95:	c1 e0 0a             	shl    eax,0xa
c000de98:	c1 ff 1f             	sar    edi,0x1f
c000de9b:	57                   	push   edi
c000de9c:	56                   	push   esi
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	e8 4c 14 01 00       	call   c001f2f0 <__udivdi3>
c000dea4:	eb 62                	jmp    c000df08 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dea6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dead:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000deb4:	89 cf                	mov    edi,ecx
c000deb6:	83 e2 7f             	and    edx,0x7f
c000deb9:	83 e7 7f             	and    edi,0x7f
c000debc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dec3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dec6:	83 e0 7f             	and    eax,0x7f
c000dec9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000decc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ded3:	83 e0 7f             	and    eax,0x7f
c000ded6:	01 d0                	add    eax,edx
c000ded8:	89 c5                	mov    ebp,eax
c000deda:	84 c0                	test   al,al
c000dedc:	74 41                	je     c000df1f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dede:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dee4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000deea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000def0:	83 ec 10             	sub    esp,0x10
c000def3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000def7:	89 f7                	mov    edi,esi
c000def9:	c1 e0 0a             	shl    eax,0xa
c000defc:	c1 ff 1f             	sar    edi,0x1f
c000deff:	57                   	push   edi
c000df00:	56                   	push   esi
c000df01:	52                   	push   edx
c000df02:	50                   	push   eax
c000df03:	e8 e8 13 01 00       	call   c001f2f0 <__udivdi3>
c000df08:	83 c4 14             	add    esp,0x14
c000df0b:	52                   	push   edx
c000df0c:	50                   	push   eax
c000df0d:	6a 00                	push   0x0
c000df0f:	6a 00                	push   0x0
c000df11:	53                   	push   ebx
c000df12:	e8 4b fe ff ff       	call   c000dd62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df17:	83 c4 20             	add    esp,0x20
c000df1a:	e9 73 01 00 00       	jmp    c000e092 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000df1f:	89 f0                	mov    eax,esi
c000df21:	31 c9                	xor    ecx,ecx
c000df23:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000df2a:	75 02                	jne    c000df2e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000df2c:	89 cd                	mov    ebp,ecx
c000df2e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000df35:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000df3c:	c1 e2 08             	shl    edx,0x8
c000df3f:	c1 e6 10             	shl    esi,0x10
c000df42:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000df4a:	09 f2                	or     edx,esi
c000df4c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df54:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000df5b:	83 c0 10             	add    eax,0x10
c000df5e:	09 f2                	or     edx,esi
c000df60:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df67:	c1 e6 18             	shl    esi,0x18
c000df6a:	09 f2                	or     edx,esi
c000df6c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df73:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df77:	c1 e6 10             	shl    esi,0x10
c000df7a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df81:	c1 e2 08             	shl    edx,0x8
c000df84:	09 f2                	or     edx,esi
c000df86:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df8d:	09 f2                	or     edx,esi
c000df8f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df96:	c1 e6 18             	shl    esi,0x18
c000df99:	09 f2                	or     edx,esi
c000df9b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df9f:	41                   	inc    ecx
c000dfa0:	83 f9 04             	cmp    ecx,0x4
c000dfa3:	0f 85 7a ff ff ff    	jne    c000df23 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000dfa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfad:	83 f0 01             	xor    eax,0x1
c000dfb0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000dfb4:	75 4f                	jne    c000e005 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000dfb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfba:	83 f0 01             	xor    eax,0x1
c000dfbd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000dfc1:	75 42                	jne    c000e005 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000dfc3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dfcb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dfd3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dfd9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dfdf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dfe5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfe9:	89 f7                	mov    edi,esi
c000dfeb:	c1 e0 0a             	shl    eax,0xa
c000dfee:	c1 ff 1f             	sar    edi,0x1f
c000dff1:	57                   	push   edi
c000dff2:	56                   	push   esi
c000dff3:	52                   	push   edx
c000dff4:	50                   	push   eax
c000dff5:	e8 f6 12 01 00       	call   c001f2f0 <__udivdi3>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e001:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e005:	89 e8                	mov    eax,ebp
c000e007:	0f b6 e8             	movzx  ebp,al
c000e00a:	85 ed                	test   ebp,ebp
c000e00c:	74 50                	je     c000e05e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e00e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e012:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e016:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e01a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e01e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e022:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e026:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e02a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e02e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e032:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e03a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e03e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e042:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e046:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e04a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e04e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e052:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e056:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e05a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e05e:	31 ed                	xor    ebp,ebp
c000e060:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e064:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e068:	89 f8                	mov    eax,edi
c000e06a:	09 f0                	or     eax,esi
c000e06c:	74 1e                	je     c000e08c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e06e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e072:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e076:	89 d1                	mov    ecx,edx
c000e078:	09 c1                	or     ecx,eax
c000e07a:	74 10                	je     c000e08c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	57                   	push   edi
c000e080:	56                   	push   esi
c000e081:	52                   	push   edx
c000e082:	50                   	push   eax
c000e083:	53                   	push   ebx
c000e084:	e8 d9 fc ff ff       	call   c000dd62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e089:	83 c4 20             	add    esp,0x20
c000e08c:	45                   	inc    ebp
c000e08d:	83 fd 04             	cmp    ebp,0x4
c000e090:	75 ce                	jne    c000e060 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e092:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e098:	5b                   	pop    ebx
c000e099:	5e                   	pop    esi
c000e09a:	5f                   	pop    edi
c000e09b:	5d                   	pop    ebp
c000e09c:	c3                   	ret    
c000e09d:	66 90                	xchg   ax,ax
c000e09f:	90                   	nop

c000e0a0 <Serial::Serial(char const*)>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a7:	83 ec 08             	sub    esp,0x8
c000e0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ae:	50                   	push   eax
c000e0af:	e8 76 e8 ff ff       	call   c000c92a <Device::Device(char const*)>
c000e0b4:	83 c4 10             	add    esp,0x10
c000e0b7:	ba 0c 19 02 c0       	mov    edx,0xc002190c
c000e0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c0:	89 10                	mov    DWORD PTR [eax],edx
c000e0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e0d0:	90                   	nop
c000e0d1:	83 c4 0c             	add    esp,0xc
c000e0d4:	c3                   	ret    
c000e0d5:	90                   	nop
c000e0d6:	66 90                	xchg   ax,ax

c000e0d8 <Serial::~Serial()>:
c000e0d8:	83 ec 0c             	sub    esp,0xc
c000e0db:	ba 0c 19 02 c0       	mov    edx,0xc002190c
c000e0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e4:	89 10                	mov    DWORD PTR [eax],edx
c000e0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ea:	83 ec 0c             	sub    esp,0xc
c000e0ed:	50                   	push   eax
c000e0ee:	e8 a1 e5 ff ff       	call   c000c694 <Device::~Device()>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	90                   	nop
c000e0f7:	83 c4 0c             	add    esp,0xc
c000e0fa:	c3                   	ret    
c000e0fb:	90                   	nop

c000e0fc <Serial::~Serial()>:
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	83 ec 0c             	sub    esp,0xc
c000e102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e106:	e8 cd ff ff ff       	call   c000e0d8 <Serial::~Serial()>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	83 ec 08             	sub    esp,0x8
c000e111:	68 58 01 00 00       	push   0x158
c000e116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e11a:	e8 f9 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	83 c4 0c             	add    esp,0xc
c000e125:	c3                   	ret    
c000e126:	66 90                	xchg   ax,ax

c000e128 <Timer::Timer(char const*)>:
c000e128:	83 ec 0c             	sub    esp,0xc
c000e12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12f:	83 ec 08             	sub    esp,0x8
c000e132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e136:	50                   	push   eax
c000e137:	e8 ee e7 ff ff       	call   c000c92a <Device::Device(char const*)>
c000e13c:	83 c4 10             	add    esp,0x10
c000e13f:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000e144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e148:	89 10                	mov    DWORD PTR [eax],edx
c000e14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e158:	90                   	nop
c000e159:	83 c4 0c             	add    esp,0xc
c000e15c:	c3                   	ret    
c000e15d:	90                   	nop
c000e15e:	66 90                	xchg   ax,ax

c000e160 <Timer::~Timer()>:
c000e160:	83 ec 0c             	sub    esp,0xc
c000e163:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000e168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e16c:	89 10                	mov    DWORD PTR [eax],edx
c000e16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e172:	83 ec 0c             	sub    esp,0xc
c000e175:	50                   	push   eax
c000e176:	e8 19 e5 ff ff       	call   c000c694 <Device::~Device()>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	90                   	nop
c000e17f:	83 c4 0c             	add    esp,0xc
c000e182:	c3                   	ret    
c000e183:	90                   	nop

c000e184 <Timer::~Timer()>:
c000e184:	83 ec 0c             	sub    esp,0xc
c000e187:	83 ec 0c             	sub    esp,0xc
c000e18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e18e:	e8 cd ff ff ff       	call   c000e160 <Timer::~Timer()>
c000e193:	83 c4 10             	add    esp,0x10
c000e196:	83 ec 08             	sub    esp,0x8
c000e199:	68 5c 01 00 00       	push   0x15c
c000e19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1a2:	e8 71 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e1a7:	83 c4 10             	add    esp,0x10
c000e1aa:	83 c4 0c             	add    esp,0xc
c000e1ad:	c3                   	ret    

c000e1ae <Timer::read()>:
c000e1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e1b8:	c3                   	ret    

c000e1b9 <setupTimer(int)>:
c000e1b9:	53                   	push   ebx
c000e1ba:	83 ec 14             	sub    esp,0x14
c000e1bd:	68 5c 01 00 00       	push   0x15c
c000e1c2:	e8 ef 98 ff ff       	call   c0007ab6 <malloc>
c000e1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1ca:	89 c3                	mov    ebx,eax
c000e1cc:	e8 8b 09 01 00       	call   c001eb5c <PIT::PIT()>
c000e1d1:	58                   	pop    eax
c000e1d2:	5a                   	pop    edx
c000e1d3:	53                   	push   ebx
c000e1d4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e1da:	e8 b3 e5 ff ff       	call   c000c792 <Device::addChild(Device*)>
c000e1df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1e1:	6a 00                	push   0x0
c000e1e3:	6a 00                	push   0x0
c000e1e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1e9:	53                   	push   ebx
c000e1ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1ed:	89 d8                	mov    eax,ebx
c000e1ef:	83 c4 28             	add    esp,0x28
c000e1f2:	5b                   	pop    ebx
c000e1f3:	c3                   	ret    

c000e1f4 <timerHandler(unsigned int)>:
c000e1f4:	56                   	push   esi
c000e1f5:	53                   	push   ebx
c000e1f6:	51                   	push   ecx
c000e1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1fb:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e201:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e208:	0f 84 4a 01 00 00    	je     c000e358 <timerHandler(unsigned int)+0x164>
c000e20e:	fa                   	cli    
c000e20f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e215:	83 ec 0c             	sub    esp,0xc
c000e218:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e21e:	68 d8 96 02 c0       	push   0xc00296d8
c000e223:	e8 98 16 01 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	84 c0                	test   al,al
c000e22d:	0f 85 a1 00 00 00    	jne    c000e2d4 <timerHandler(unsigned int)+0xe0>
c000e233:	83 ec 0c             	sub    esp,0xc
c000e236:	68 d8 96 02 c0       	push   0xc00296d8
c000e23b:	e8 9c 16 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e240:	83 c4 10             	add    esp,0x10
c000e243:	89 c6                	mov    esi,eax
c000e245:	8d 76 00             	lea    esi,[esi+0x0]
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	68 d8 96 02 c0       	push   0xc00296d8
c000e250:	e8 87 16 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e255:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e25c:	89 c3                	mov    ebx,eax
c000e25e:	e8 81 16 01 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e263:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e26f:	77 23                	ja     c000e294 <timerHandler(unsigned int)+0xa0>
c000e271:	83 ec 0c             	sub    esp,0xc
c000e274:	53                   	push   ebx
c000e275:	e8 1e 7f 00 00       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c000e27a:	83 c4 10             	add    esp,0x10
c000e27d:	39 de                	cmp    esi,ebx
c000e27f:	75 27                	jne    c000e2a8 <timerHandler(unsigned int)+0xb4>
c000e281:	83 ec 0c             	sub    esp,0xc
c000e284:	68 d8 96 02 c0       	push   0xc00296d8
c000e289:	e8 4e 16 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e28e:	89 c6                	mov    esi,eax
c000e290:	eb 12                	jmp    c000e2a4 <timerHandler(unsigned int)+0xb0>
c000e292:	66 90                	xchg   ax,ax
c000e294:	52                   	push   edx
c000e295:	52                   	push   edx
c000e296:	53                   	push   ebx
c000e297:	68 d8 96 02 c0       	push   0xc00296d8
c000e29c:	e8 ff 16 01 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a4:	83 c4 10             	add    esp,0x10
c000e2a7:	90                   	nop
c000e2a8:	83 ec 0c             	sub    esp,0xc
c000e2ab:	68 d8 96 02 c0       	push   0xc00296d8
c000e2b0:	e8 0b 16 01 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e2b5:	83 c4 10             	add    esp,0x10
c000e2b8:	84 c0                	test   al,al
c000e2ba:	75 18                	jne    c000e2d4 <timerHandler(unsigned int)+0xe0>
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	68 d8 96 02 c0       	push   0xc00296d8
c000e2c4:	e8 13 16 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	39 f0                	cmp    eax,esi
c000e2ce:	0f 85 74 ff ff ff    	jne    c000e248 <timerHandler(unsigned int)+0x54>
c000e2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e2d9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e2dd:	74 41                	je     c000e320 <timerHandler(unsigned int)+0x12c>
c000e2df:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2e6:	74 38                	je     c000e320 <timerHandler(unsigned int)+0x12c>
c000e2e8:	fa                   	cli    
c000e2e9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2ef:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2fa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e303:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e306:	72 08                	jb     c000e310 <timerHandler(unsigned int)+0x11c>
c000e308:	e8 73 79 00 00       	call   c0015c80 <schedule()>
c000e30d:	8d 76 00             	lea    esi,[esi+0x0]
c000e310:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e315:	48                   	dec    eax
c000e316:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e31b:	75 03                	jne    c000e320 <timerHandler(unsigned int)+0x12c>
c000e31d:	fb                   	sti    
c000e31e:	66 90                	xchg   ax,ax
c000e320:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e325:	48                   	dec    eax
c000e326:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e32b:	75 1b                	jne    c000e348 <timerHandler(unsigned int)+0x154>
c000e32d:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e334:	74 12                	je     c000e348 <timerHandler(unsigned int)+0x154>
c000e336:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e340:	e8 3b 79 00 00       	call   c0015c80 <schedule()>
c000e345:	8d 76 00             	lea    esi,[esi+0x0]
c000e348:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e34d:	48                   	dec    eax
c000e34e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e353:	75 03                	jne    c000e358 <timerHandler(unsigned int)+0x164>
c000e355:	fb                   	sti    
c000e356:	66 90                	xchg   ax,ax
c000e358:	58                   	pop    eax
c000e359:	5b                   	pop    ebx
c000e35a:	5e                   	pop    esi
c000e35b:	c3                   	ret    

c000e35c <VCache::VCache(PhysicalDisk*)>:
c000e35c:	53                   	push   ebx
c000e35d:	83 ec 18             	sub    esp,0x18
c000e360:	ba 80 19 02 c0       	mov    edx,0xc0021980
c000e365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e369:	89 10                	mov    DWORD PTR [eax],edx
c000e36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e385:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e38c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e397:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e39e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e3b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3bc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e3c3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3de:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3ed:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3f5:	83 ec 0c             	sub    esp,0xc
c000e3f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3fc:	e8 b5 96 ff ff       	call   c0007ab6 <malloc>
c000e401:	83 c4 10             	add    esp,0x10
c000e404:	89 c3                	mov    ebx,eax
c000e406:	83 ec 0c             	sub    esp,0xc
c000e409:	53                   	push   ebx
c000e40a:	e8 0d 76 00 00       	call   c0015a1c <Mutex::Mutex()>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e416:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e421:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e428:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e42f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e433:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e440:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e444:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e44a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e450:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e454:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e457:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e462:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e466:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e46c:	05 00 02 00 00       	add    eax,0x200
c000e471:	c1 e0 03             	shl    eax,0x3
c000e474:	83 ec 0c             	sub    esp,0xc
c000e477:	50                   	push   eax
c000e478:	e8 39 96 ff ff       	call   c0007ab6 <malloc>
c000e47d:	83 c4 10             	add    esp,0x10
c000e480:	89 c2                	mov    edx,eax
c000e482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e486:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e48d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e498:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e49c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e4a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e4a6:	89 d0                	mov    eax,edx
c000e4a8:	c1 e0 02             	shl    eax,0x2
c000e4ab:	01 d0                	add    eax,edx
c000e4ad:	c1 e0 04             	shl    eax,0x4
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	50                   	push   eax
c000e4b4:	e8 fd 95 ff ff       	call   c0007ab6 <malloc>
c000e4b9:	83 c4 10             	add    esp,0x10
c000e4bc:	89 c2                	mov    edx,eax
c000e4be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4c2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e4c5:	90                   	nop
c000e4c6:	83 c4 18             	add    esp,0x18
c000e4c9:	5b                   	pop    ebx
c000e4ca:	c3                   	ret    
c000e4cb:	90                   	nop

c000e4cc <VCache::invalidateReadBuffer()>:
c000e4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e4d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e4da:	c3                   	ret    
c000e4db:	90                   	nop

c000e4dc <VCache::writeWriteBuffer()>:
c000e4dc:	53                   	push   ebx
c000e4dd:	83 ec 08             	sub    esp,0x8
c000e4e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4e8:	74 1e                	je     c000e508 <VCache::writeWriteBuffer()+0x2c>
c000e4ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4ed:	83 ec 0c             	sub    esp,0xc
c000e4f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4fe:	50                   	push   eax
c000e4ff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e502:	83 c4 20             	add    esp,0x20
c000e505:	8d 76 00             	lea    esi,[esi+0x0]
c000e508:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e50f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e516:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e51a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e521:	83 c4 08             	add    esp,0x8
c000e524:	5b                   	pop    ebx
c000e525:	c3                   	ret    
c000e526:	66 90                	xchg   ax,ax

c000e528 <VCache::~VCache()>:
c000e528:	83 ec 0c             	sub    esp,0xc
c000e52b:	ba 80 19 02 c0       	mov    edx,0xc0021980
c000e530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e534:	89 10                	mov    DWORD PTR [eax],edx
c000e536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e53d:	0f b6 c0             	movzx  eax,al
c000e540:	85 c0                	test   eax,eax
c000e542:	74 10                	je     c000e554 <VCache::~VCache()+0x2c>
c000e544:	83 ec 0c             	sub    esp,0xc
c000e547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54b:	e8 8c ff ff ff       	call   c000e4dc <VCache::writeWriteBuffer()>
c000e550:	83 c4 10             	add    esp,0x10
c000e553:	90                   	nop
c000e554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e558:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	50                   	push   eax
c000e55f:	e8 62 95 ff ff       	call   c0007ac6 <free>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e56e:	83 ec 0c             	sub    esp,0xc
c000e571:	50                   	push   eax
c000e572:	e8 4f 95 ff ff       	call   c0007ac6 <free>
c000e577:	83 c4 10             	add    esp,0x10
c000e57a:	90                   	nop
c000e57b:	83 c4 0c             	add    esp,0xc
c000e57e:	c3                   	ret    
c000e57f:	90                   	nop

c000e580 <VCache::~VCache()>:
c000e580:	83 ec 0c             	sub    esp,0xc
c000e583:	83 ec 0c             	sub    esp,0xc
c000e586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e58a:	e8 99 ff ff ff       	call   c000e528 <VCache::~VCache()>
c000e58f:	83 c4 10             	add    esp,0x10
c000e592:	83 ec 08             	sub    esp,0x8
c000e595:	6a 44                	push   0x44
c000e597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59b:	e8 78 c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e5a0:	83 c4 10             	add    esp,0x10
c000e5a3:	83 c4 0c             	add    esp,0xc
c000e5a6:	c3                   	ret    
c000e5a7:	90                   	nop

c000e5a8 <VCache::write(unsigned long long, int, void*)>:
c000e5a8:	55                   	push   ebp
c000e5a9:	57                   	push   edi
c000e5aa:	56                   	push   esi
c000e5ab:	53                   	push   ebx
c000e5ac:	83 ec 1c             	sub    esp,0x1c
c000e5af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e5b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e5b7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e5bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e5bf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e5c3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e5c7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e5cb:	74 07                	je     c000e5d4 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e5cd:	53                   	push   ebx
c000e5ce:	e8 f9 fe ff ff       	call   c000e4cc <VCache::invalidateReadBuffer()>
c000e5d3:	58                   	pop    eax
c000e5d4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e5d8:	74 62                	je     c000e63c <VCache::write(unsigned long long, int, void*)+0x94>
c000e5da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e5e1:	99                   	cdq    
c000e5e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5e9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5ec:	31 c1                	xor    ecx,eax
c000e5ee:	89 d0                	mov    eax,edx
c000e5f0:	89 ca                	mov    edx,ecx
c000e5f2:	31 e8                	xor    eax,ebp
c000e5f4:	09 c2                	or     edx,eax
c000e5f6:	75 38                	jne    c000e630 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5f8:	83 ff 01             	cmp    edi,0x1
c000e5fb:	75 33                	jne    c000e630 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e600:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e604:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e60a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e60d:	0f af c8             	imul   ecx,eax
c000e610:	01 cf                	add    edi,ecx
c000e612:	89 c1                	mov    ecx,eax
c000e614:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e616:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e619:	40                   	inc    eax
c000e61a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e61d:	83 f8 50             	cmp    eax,0x50
c000e620:	75 6a                	jne    c000e68c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e622:	83 ec 0c             	sub    esp,0xc
c000e625:	53                   	push   ebx
c000e626:	e8 b1 fe ff ff       	call   c000e4dc <VCache::writeWriteBuffer()>
c000e62b:	83 c4 10             	add    esp,0x10
c000e62e:	eb 5c                	jmp    c000e68c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e630:	83 ec 0c             	sub    esp,0xc
c000e633:	53                   	push   ebx
c000e634:	e8 a3 fe ff ff       	call   c000e4dc <VCache::writeWriteBuffer()>
c000e639:	83 c4 10             	add    esp,0x10
c000e63c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e63f:	83 ff 4f             	cmp    edi,0x4f
c000e642:	7f 20                	jg     c000e664 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e644:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e647:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e64b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e64e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e651:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e655:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e658:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e65e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e660:	eb 2a                	jmp    c000e68c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e662:	66 90                	xchg   ax,ax
c000e664:	8b 10                	mov    edx,DWORD PTR [eax]
c000e666:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e66a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e66e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e672:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e676:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e67a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e67e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e681:	83 c4 1c             	add    esp,0x1c
c000e684:	5b                   	pop    ebx
c000e685:	5e                   	pop    esi
c000e686:	5f                   	pop    edi
c000e687:	5d                   	pop    ebp
c000e688:	ff e0                	jmp    eax
c000e68a:	66 90                	xchg   ax,ax
c000e68c:	83 c4 1c             	add    esp,0x1c
c000e68f:	31 c0                	xor    eax,eax
c000e691:	5b                   	pop    ebx
c000e692:	5e                   	pop    esi
c000e693:	5f                   	pop    edi
c000e694:	5d                   	pop    ebp
c000e695:	c3                   	ret    

c000e696 <VCache::read(unsigned long long, int, void*)>:
c000e696:	55                   	push   ebp
c000e697:	57                   	push   edi
c000e698:	56                   	push   esi
c000e699:	53                   	push   ebx
c000e69a:	83 ec 1c             	sub    esp,0x1c
c000e69d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e6a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e6a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e6ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e6b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6b5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e6b9:	74 0d                	je     c000e6c8 <VCache::read(unsigned long long, int, void*)+0x32>
c000e6bb:	83 ec 0c             	sub    esp,0xc
c000e6be:	57                   	push   edi
c000e6bf:	e8 18 fe ff ff       	call   c000e4dc <VCache::writeWriteBuffer()>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	90                   	nop
c000e6c8:	83 fd 01             	cmp    ebp,0x1
c000e6cb:	0f 85 93 00 00 00    	jne    c000e764 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6d1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6d7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e6de:	0f 85 80 00 00 00    	jne    c000e764 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6e4:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e6e7:	89 e9                	mov    ecx,ebp
c000e6e9:	f7 d9                	neg    ecx
c000e6eb:	89 c8                	mov    eax,ecx
c000e6ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e6f1:	c1 f8 1f             	sar    eax,0x1f
c000e6f4:	21 d9                	and    ecx,ebx
c000e6f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6fa:	89 c8                	mov    eax,ecx
c000e6fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e700:	21 f1                	and    ecx,esi
c000e702:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e706:	89 ca                	mov    edx,ecx
c000e708:	74 2e                	je     c000e738 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e70a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e70d:	75 29                	jne    c000e738 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e70f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e712:	75 24                	jne    c000e738 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e714:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e717:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e71d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e720:	8d 70 ff             	lea    esi,[eax-0x1]
c000e723:	21 f3                	and    ebx,esi
c000e725:	0f af d9             	imul   ebx,ecx
c000e728:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e72b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e72f:	89 de                	mov    esi,ebx
c000e731:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e733:	31 c0                	xor    eax,eax
c000e735:	eb 61                	jmp    c000e798 <VCache::read(unsigned long long, int, void*)+0x102>
c000e737:	90                   	nop
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e73f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e743:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e746:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e749:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e74b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e74e:	55                   	push   ebp
c000e74f:	52                   	push   edx
c000e750:	50                   	push   eax
c000e751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e755:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e758:	83 c4 20             	add    esp,0x20
c000e75b:	85 c0                	test   eax,eax
c000e75d:	75 39                	jne    c000e798 <VCache::read(unsigned long long, int, void*)+0x102>
c000e75f:	eb b3                	jmp    c000e714 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e761:	8d 76 00             	lea    esi,[esi+0x0]
c000e764:	83 ec 0c             	sub    esp,0xc
c000e767:	57                   	push   edi
c000e768:	e8 5f fd ff ff       	call   c000e4cc <VCache::invalidateReadBuffer()>
c000e76d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e770:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e774:	8b 10                	mov    edx,DWORD PTR [eax]
c000e776:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e77a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e77e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e782:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e786:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e78a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e78d:	83 c4 2c             	add    esp,0x2c
c000e790:	5b                   	pop    ebx
c000e791:	5e                   	pop    esi
c000e792:	5f                   	pop    edi
c000e793:	5d                   	pop    ebp
c000e794:	ff e0                	jmp    eax
c000e796:	66 90                	xchg   ax,ax
c000e798:	83 c4 1c             	add    esp,0x1c
c000e79b:	5b                   	pop    ebx
c000e79c:	5e                   	pop    esi
c000e79d:	5f                   	pop    edi
c000e79e:	5d                   	pop    ebp
c000e79f:	c3                   	ret    

c000e7a0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e7a0:	55                   	push   ebp
c000e7a1:	57                   	push   edi
c000e7a2:	56                   	push   esi
c000e7a3:	53                   	push   ebx
c000e7a4:	83 ec 1c             	sub    esp,0x1c
c000e7a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e7ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7af:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e7b3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e7b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7bf:	01 df                	add    edi,ebx
c000e7c1:	39 fb                	cmp    ebx,edi
c000e7c3:	7d 1f                	jge    c000e7e4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e7c5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e7c9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e7cd:	7d 12                	jge    c000e7e1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e7cf:	8b 16                	mov    edx,DWORD PTR [esi]
c000e7d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7d5:	53                   	push   ebx
c000e7d6:	55                   	push   ebp
c000e7d7:	45                   	inc    ebp
c000e7d8:	56                   	push   esi
c000e7d9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e7dc:	83 c4 10             	add    esp,0x10
c000e7df:	eb e8                	jmp    c000e7c9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e7e1:	43                   	inc    ebx
c000e7e2:	eb dd                	jmp    c000e7c1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7e4:	83 c4 1c             	add    esp,0x1c
c000e7e7:	5b                   	pop    ebx
c000e7e8:	5e                   	pop    esi
c000e7e9:	5f                   	pop    edi
c000e7ea:	5d                   	pop    ebp
c000e7eb:	c3                   	ret    

c000e7ec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7ec:	55                   	push   ebp
c000e7ed:	57                   	push   edi
c000e7ee:	31 ff                	xor    edi,edi
c000e7f0:	56                   	push   esi
c000e7f1:	53                   	push   ebx
c000e7f2:	83 ec 1c             	sub    esp,0x1c
c000e7f5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7fd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e804:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e809:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e80d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e811:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e815:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e818:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e81c:	01 f9                	add    ecx,edi
c000e81e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e822:	7d 2f                	jge    c000e853 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e824:	31 f6                	xor    esi,esi
c000e826:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e82a:	01 f2                	add    edx,esi
c000e82c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e830:	7d 1a                	jge    c000e84c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e832:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e835:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e838:	46                   	inc    esi
c000e839:	51                   	push   ecx
c000e83a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e83e:	52                   	push   edx
c000e83f:	55                   	push   ebp
c000e840:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e84a:	eb da                	jmp    c000e826 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e84c:	47                   	inc    edi
c000e84d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e851:	eb c5                	jmp    c000e818 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	90                   	nop

c000e85c <Video::blit(unsigned int*, int, int, int, int)>:
c000e85c:	55                   	push   ebp
c000e85d:	57                   	push   edi
c000e85e:	56                   	push   esi
c000e85f:	53                   	push   ebx
c000e860:	83 ec 1c             	sub    esp,0x1c
c000e863:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e867:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e86b:	85 c0                	test   eax,eax
c000e86d:	79 02                	jns    c000e871 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e86f:	31 c0                	xor    eax,eax
c000e871:	c1 e0 02             	shl    eax,0x2
c000e874:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e878:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e87c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e880:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e884:	39 d8                	cmp    eax,ebx
c000e886:	7e 49                	jle    c000e8d1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e888:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e88e:	7c 41                	jl     c000e8d1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e890:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e894:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e898:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e89c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e8a0:	39 f9                	cmp    ecx,edi
c000e8a2:	7e 22                	jle    c000e8c6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e8a4:	83 c5 04             	add    ebp,0x4
c000e8a7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8ad:	7c 14                	jl     c000e8c3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e8af:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e8b1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e8b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e8b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e8bc:	56                   	push   esi
c000e8bd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e8c0:	83 c4 10             	add    esp,0x10
c000e8c3:	47                   	inc    edi
c000e8c4:	eb d2                	jmp    c000e898 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e8c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ca:	43                   	inc    ebx
c000e8cb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e8cf:	eb ab                	jmp    c000e87c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e8d1:	83 c4 1c             	add    esp,0x1c
c000e8d4:	5b                   	pop    ebx
c000e8d5:	5e                   	pop    esi
c000e8d6:	5f                   	pop    edi
c000e8d7:	5d                   	pop    ebp
c000e8d8:	c3                   	ret    
c000e8d9:	90                   	nop

c000e8da <Video::clearScreen(unsigned int)>:
c000e8da:	57                   	push   edi
c000e8db:	56                   	push   esi
c000e8dc:	53                   	push   ebx
c000e8dd:	31 db                	xor    ebx,ebx
c000e8df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8e3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8e9:	7e 1f                	jle    c000e90a <Video::clearScreen(unsigned int)+0x30>
c000e8eb:	31 ff                	xor    edi,edi
c000e8ed:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8f3:	7e 12                	jle    c000e907 <Video::clearScreen(unsigned int)+0x2d>
c000e8f5:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8fb:	53                   	push   ebx
c000e8fc:	57                   	push   edi
c000e8fd:	47                   	inc    edi
c000e8fe:	56                   	push   esi
c000e8ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e902:	83 c4 10             	add    esp,0x10
c000e905:	eb e6                	jmp    c000e8ed <Video::clearScreen(unsigned int)+0x13>
c000e907:	43                   	inc    ebx
c000e908:	eb d9                	jmp    c000e8e3 <Video::clearScreen(unsigned int)+0x9>
c000e90a:	5b                   	pop    ebx
c000e90b:	5e                   	pop    esi
c000e90c:	5f                   	pop    edi
c000e90d:	c3                   	ret    

c000e90e <Video::putpixel(int, int, unsigned int)>:
c000e90e:	c7 44 24 04 88 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021988
c000e916:	e9 a6 2a 00 00       	jmp    c00113c1 <KePanic(char const*)>
c000e91b:	90                   	nop

c000e91c <Video::readPixelApprox(int, int)>:
c000e91c:	83 ec 18             	sub    esp,0x18
c000e91f:	68 a9 19 02 c0       	push   0xc00219a9
c000e924:	e8 98 2a 00 00       	call   c00113c1 <KePanic(char const*)>
c000e929:	31 c0                	xor    eax,eax
c000e92b:	83 c4 1c             	add    esp,0x1c
c000e92e:	c3                   	ret    
c000e92f:	90                   	nop

c000e930 <Video::Video(char const*)>:
c000e930:	83 ec 0c             	sub    esp,0xc
c000e933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e937:	83 ec 08             	sub    esp,0x8
c000e93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e93e:	50                   	push   eax
c000e93f:	e8 e6 df ff ff       	call   c000c92a <Device::Device(char const*)>
c000e944:	83 c4 10             	add    esp,0x10
c000e947:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c000e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e950:	89 10                	mov    DWORD PTR [eax],edx
c000e952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e956:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e960:	90                   	nop
c000e961:	83 c4 0c             	add    esp,0xc
c000e964:	c3                   	ret    
c000e965:	90                   	nop

c000e966 <Video::~Video()>:
c000e966:	83 ec 0c             	sub    esp,0xc
c000e969:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c000e96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e972:	89 10                	mov    DWORD PTR [eax],edx
c000e974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	50                   	push   eax
c000e97c:	e8 13 dd ff ff       	call   c000c694 <Device::~Device()>
c000e981:	83 c4 10             	add    esp,0x10
c000e984:	90                   	nop
c000e985:	83 c4 0c             	add    esp,0xc
c000e988:	c3                   	ret    
c000e989:	90                   	nop

c000e98a <Video::~Video()>:
c000e98a:	83 ec 0c             	sub    esp,0xc
c000e98d:	83 ec 0c             	sub    esp,0xc
c000e990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e994:	e8 cd ff ff ff       	call   c000e966 <Video::~Video()>
c000e999:	83 c4 10             	add    esp,0x10
c000e99c:	83 ec 08             	sub    esp,0x8
c000e99f:	68 64 01 00 00       	push   0x164
c000e9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a8:	e8 6b be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	83 c4 0c             	add    esp,0xc
c000e9b3:	c3                   	ret    

c000e9b4 <Video::isMonochrome()>:
c000e9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9b8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e9be:	c3                   	ret    
c000e9bf:	90                   	nop

c000e9c0 <Video::getWidth()>:
c000e9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e9ca:	c3                   	ret    
c000e9cb:	90                   	nop

c000e9cc <Video::getHeight()>:
c000e9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e9d6:	c3                   	ret    
c000e9d7:	90                   	nop

c000e9d8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e9d8:	55                   	push   ebp
c000e9d9:	57                   	push   edi
c000e9da:	56                   	push   esi
c000e9db:	53                   	push   ebx
c000e9dc:	83 ec 2c             	sub    esp,0x2c
c000e9df:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e9e7:	83 f8 01             	cmp    eax,0x1
c000e9ea:	19 c9                	sbb    ecx,ecx
c000e9ec:	31 db                	xor    ebx,ebx
c000e9ee:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9f2:	89 cd                	mov    ebp,ecx
c000e9f4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9fc:	f7 d5                	not    ebp
c000e9fe:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ea04:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ea08:	01 d8                	add    eax,ebx
c000ea0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea0e:	56                   	push   esi
c000ea0f:	e8 b8 ff ff ff       	call   c000e9cc <Video::getHeight()>
c000ea14:	59                   	pop    ecx
c000ea15:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ea19:	7e 70                	jle    c000ea8b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ea1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea1f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ea23:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ea26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea2a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea2e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ea35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea39:	89 f8                	mov    eax,edi
c000ea3b:	83 c0 20             	add    eax,0x20
c000ea3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea42:	56                   	push   esi
c000ea43:	e8 78 ff ff ff       	call   c000e9c0 <Video::getWidth()>
c000ea48:	5a                   	pop    edx
c000ea49:	39 c7                	cmp    edi,eax
c000ea4b:	7d 34                	jge    c000ea81 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea4d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea52:	74 05                	je     c000ea59 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea54:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea56:	55                   	push   ebp
c000ea57:	eb 0d                	jmp    c000ea66 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea59:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea5e:	74 12                	je     c000ea72 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea60:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea6a:	57                   	push   edi
c000ea6b:	56                   	push   esi
c000ea6c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea6f:	83 c4 10             	add    esp,0x10
c000ea72:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea76:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea7a:	47                   	inc    edi
c000ea7b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea7f:	75 c1                	jne    c000ea42 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea81:	43                   	inc    ebx
c000ea82:	83 fb 20             	cmp    ebx,0x20
c000ea85:	0f 85 79 ff ff ff    	jne    c000ea04 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea8b:	83 c4 2c             	add    esp,0x2c
c000ea8e:	5b                   	pop    ebx
c000ea8f:	5e                   	pop    esi
c000ea90:	5f                   	pop    edi
c000ea91:	5d                   	pop    ebp
c000ea92:	c3                   	ret    
c000ea93:	90                   	nop

c000ea94 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea94:	55                   	push   ebp
c000ea95:	57                   	push   edi
c000ea96:	56                   	push   esi
c000ea97:	53                   	push   ebx
c000ea98:	83 ec 28             	sub    esp,0x28
c000ea9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea9f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000eaa3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000eaa7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000eaab:	c1 e6 08             	shl    esi,0x8
c000eaae:	01 c6                	add    esi,eax
c000eab0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000eab4:	c1 e0 08             	shl    eax,0x8
c000eab7:	01 d0                	add    eax,edx
c000eab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eabd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac1:	0f af c6             	imul   eax,esi
c000eac4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eacb:	50                   	push   eax
c000eacc:	e8 e5 8f ff ff       	call   c0007ab6 <malloc>
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	89 c7                	mov    edi,eax
c000ead6:	85 c0                	test   eax,eax
c000ead8:	75 10                	jne    c000eaea <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eada:	83 ec 0c             	sub    esp,0xc
c000eadd:	68 d4 19 02 c0       	push   0xc00219d4
c000eae2:	e8 da 28 00 00       	call   c00113c1 <KePanic(char const*)>
c000eae7:	83 c4 10             	add    esp,0x10
c000eaea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eaee:	ba 12 00 00 00       	mov    edx,0x12
c000eaf3:	85 c0                	test   eax,eax
c000eaf5:	74 11                	je     c000eb08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eaf7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eafb:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eaff:	c1 fa 03             	sar    edx,0x3
c000eb02:	0f af d1             	imul   edx,ecx
c000eb05:	83 c2 12             	add    edx,0x12
c000eb08:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eb0c:	74 04                	je     c000eb12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eb0e:	85 f6                	test   esi,esi
c000eb10:	75 12                	jne    c000eb24 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eb12:	83 ec 0c             	sub    esp,0xc
c000eb15:	68 e4 19 02 c0       	push   0xc00219e4
c000eb1a:	e8 26 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb1f:	e9 b8 00 00 00       	jmp    c000ebdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eb24:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eb28:	83 f9 02             	cmp    ecx,0x2
c000eb2b:	0f 85 96 00 00 00    	jne    c000ebc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eb31:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eb36:	75 0e                	jne    c000eb46 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb38:	85 c0                	test   eax,eax
c000eb3a:	75 0a                	jne    c000eb46 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb3c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb3f:	83 e8 18             	sub    eax,0x18
c000eb42:	a8 f7                	test   al,0xf7
c000eb44:	74 0a                	je     c000eb50 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb46:	83 ec 0c             	sub    esp,0xc
c000eb49:	68 f9 19 02 c0       	push   0xc00219f9
c000eb4e:	eb 7f                	jmp    c000ebcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb58:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb60:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eb64:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb6c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb70:	75 0c                	jne    c000eb7e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb72:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eb77:	c1 e0 18             	shl    eax,0x18
c000eb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb7e:	45                   	inc    ebp
c000eb7f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb84:	c1 e1 10             	shl    ecx,0x10
c000eb87:	89 c8                	mov    eax,ecx
c000eb89:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb8e:	c1 e1 08             	shl    ecx,0x8
c000eb91:	09 c1                	or     ecx,eax
c000eb93:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb97:	09 c1                	or     ecx,eax
c000eb99:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb9d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eba1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eba5:	c1 f8 03             	sar    eax,0x3
c000eba8:	01 c2                	add    edx,eax
c000ebaa:	89 e8                	mov    eax,ebp
c000ebac:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ebb0:	39 c6                	cmp    esi,eax
c000ebb2:	7f b0                	jg     c000eb64 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ebb4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ebb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebbc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ebbf:	7e 22                	jle    c000ebe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ebc1:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ebc5:	eb 99                	jmp    c000eb60 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ebc7:	50                   	push   eax
c000ebc8:	50                   	push   eax
c000ebc9:	51                   	push   ecx
c000ebca:	68 07 1a 02 c0       	push   0xc0021a07
c000ebcf:	e8 71 bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ebd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ebd7:	e8 ea 8e ff ff       	call   c0007ac6 <free>
c000ebdc:	83 c4 10             	add    esp,0x10
c000ebdf:	31 ff                	xor    edi,edi
c000ebe1:	eb 0f                	jmp    c000ebf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ebe3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe7:	89 30                	mov    DWORD PTR [eax],esi
c000ebe9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebed:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ebf0:	89 30                	mov    DWORD PTR [eax],esi
c000ebf2:	83 c4 1c             	add    esp,0x1c
c000ebf5:	89 f8                	mov    eax,edi
c000ebf7:	5b                   	pop    ebx
c000ebf8:	5e                   	pop    esi
c000ebf9:	5f                   	pop    edi
c000ebfa:	5d                   	pop    ebp
c000ebfb:	c3                   	ret    

c000ebfc <Video::putTGA(int, int, unsigned char*, int)>:
c000ebfc:	55                   	push   ebp
c000ebfd:	57                   	push   edi
c000ebfe:	56                   	push   esi
c000ebff:	53                   	push   ebx
c000ec00:	83 ec 28             	sub    esp,0x28
c000ec03:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec07:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ec0b:	50                   	push   eax
c000ec0c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ec10:	50                   	push   eax
c000ec11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec15:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec19:	56                   	push   esi
c000ec1a:	e8 75 fe ff ff       	call   c000ea94 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ec1f:	83 c4 20             	add    esp,0x20
c000ec22:	85 c0                	test   eax,eax
c000ec24:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec28:	74 35                	je     c000ec5f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec2a:	89 c7                	mov    edi,eax
c000ec2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec30:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ec34:	39 d8                	cmp    eax,ebx
c000ec36:	7e 27                	jle    c000ec5f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec40:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ec44:	39 e8                	cmp    eax,ebp
c000ec46:	7e 14                	jle    c000ec5c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec48:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec4a:	83 c7 04             	add    edi,0x4
c000ec4d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ec50:	53                   	push   ebx
c000ec51:	55                   	push   ebp
c000ec52:	45                   	inc    ebp
c000ec53:	56                   	push   esi
c000ec54:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec57:	83 c4 10             	add    esp,0x10
c000ec5a:	eb e0                	jmp    c000ec3c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec5c:	43                   	inc    ebx
c000ec5d:	eb cd                	jmp    c000ec2c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec5f:	83 c4 1c             	add    esp,0x1c
c000ec62:	5b                   	pop    ebx
c000ec63:	5e                   	pop    esi
c000ec64:	5f                   	pop    edi
c000ec65:	5d                   	pop    ebp
c000ec66:	c3                   	ret    
c000ec67:	90                   	nop

c000ec68 <ACPI::close(int, int, void*)>:
c000ec68:	83 ec 1c             	sub    esp,0x1c
c000ec6b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec73:	74 0b                	je     c000ec80 <ACPI::close(int, int, void*)+0x18>
c000ec75:	b8 00 00 00 00       	mov    eax,0x0
c000ec7a:	e9 99 00 00 00       	jmp    c000ed18 <ACPI::close(int, int, void*)+0xb0>
c000ec7f:	90                   	nop
c000ec80:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec85:	75 29                	jne    c000ecb0 <ACPI::close(int, int, void*)+0x48>
c000ec87:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec8c:	85 c0                	test   eax,eax
c000ec8e:	74 08                	je     c000ec98 <ACPI::close(int, int, void*)+0x30>
c000ec90:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec95:	ff d0                	call   eax
c000ec97:	90                   	nop
c000ec98:	83 ec 0c             	sub    esp,0xc
c000ec9b:	68 68 1a 02 c0       	push   0xc0021a68
c000eca0:	e8 1c 27 00 00       	call   c00113c1 <KePanic(char const*)>
c000eca5:	83 c4 10             	add    esp,0x10
c000eca8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecad:	eb 69                	jmp    c000ed18 <ACPI::close(int, int, void*)+0xb0>
c000ecaf:	90                   	nop
c000ecb0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ecb5:	75 59                	jne    c000ed10 <ACPI::close(int, int, void*)+0xa8>
c000ecb7:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ecbc:	85 c0                	test   eax,eax
c000ecbe:	74 08                	je     c000ecc8 <ACPI::close(int, int, void*)+0x60>
c000ecc0:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ecc5:	ff d0                	call   eax
c000ecc7:	90                   	nop
c000ecc8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eccd:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecd5:	83 e0 02             	and    eax,0x2
c000ecd8:	74 1e                	je     c000ecf8 <ACPI::close(int, int, void*)+0x90>
c000ecda:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ece1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ece5:	89 c2                	mov    edx,eax
c000ece7:	ec                   	in     al,dx
c000ece8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ecec:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecf0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecf4:	eb da                	jmp    c000ecd0 <ACPI::close(int, int, void*)+0x68>
c000ecf6:	66 90                	xchg   ax,ax
c000ecf8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecff:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ed04:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ed08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed0c:	ee                   	out    dx,al
c000ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed15:	8d 76 00             	lea    esi,[esi+0x0]
c000ed18:	83 c4 1c             	add    esp,0x1c
c000ed1b:	c3                   	ret    

c000ed1c <findRSDP()>:
c000ed1c:	83 ec 1c             	sub    esp,0x1c
c000ed1f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed24:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed2a:	83 e0 04             	and    eax,0x4
c000ed2d:	0f b6 c0             	movzx  eax,al
c000ed30:	85 c0                	test   eax,eax
c000ed32:	75 08                	jne    c000ed3c <findRSDP()+0x20>
c000ed34:	b8 00 00 00 00       	mov    eax,0x0
c000ed39:	eb 75                	jmp    c000edb0 <findRSDP()+0x94>
c000ed3b:	90                   	nop
c000ed3c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed41:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed46:	7f 1c                	jg     c000ed64 <findRSDP()+0x48>
c000ed48:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed4d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed53:	83 e2 fb             	and    edx,0xfffffffb
c000ed56:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed5c:	b8 00 00 00 00       	mov    eax,0x0
c000ed61:	eb 4d                	jmp    c000edb0 <findRSDP()+0x94>
c000ed63:	90                   	nop
c000ed64:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed6c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed74:	77 32                	ja     c000eda8 <findRSDP()+0x8c>
c000ed76:	83 ec 04             	sub    esp,0x4
c000ed79:	6a 08                	push   0x8
c000ed7b:	68 03 1b 02 c0       	push   0xc0021b03
c000ed80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed84:	e8 f7 15 ff ff       	call   c0000380 <memcmp>
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	85 c0                	test   eax,eax
c000ed8e:	0f 94 c0             	sete   al
c000ed91:	0f b6 c0             	movzx  eax,al
c000ed94:	85 c0                	test   eax,eax
c000ed96:	74 08                	je     c000eda0 <findRSDP()+0x84>
c000ed98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed9c:	eb 12                	jmp    c000edb0 <findRSDP()+0x94>
c000ed9e:	66 90                	xchg   ax,ax
c000eda0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000eda5:	eb c5                	jmp    c000ed6c <findRSDP()+0x50>
c000eda7:	90                   	nop
c000eda8:	b8 00 00 00 00       	mov    eax,0x0
c000edad:	8d 76 00             	lea    esi,[esi+0x0]
c000edb0:	83 c4 1c             	add    esp,0x1c
c000edb3:	c3                   	ret    

c000edb4 <loadACPITables(unsigned char*)>:
c000edb4:	57                   	push   edi
c000edb5:	56                   	push   esi
c000edb6:	53                   	push   ebx
c000edb7:	83 ec 60             	sub    esp,0x60
c000edba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000edbf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edc5:	83 e0 04             	and    eax,0x4
c000edc8:	0f b6 c0             	movzx  eax,al
c000edcb:	85 c0                	test   eax,eax
c000edcd:	0f 84 41 02 00 00    	je     c000f014 <loadACPITables(unsigned char*)+0x260>
c000edd3:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000edd8:	0f b6 c0             	movzx  eax,al
c000eddb:	85 c0                	test   eax,eax
c000eddd:	74 79                	je     c000ee58 <loadACPITables(unsigned char*)+0xa4>
c000eddf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ede3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ede7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edee:	83 e8 24             	sub    eax,0x24
c000edf1:	c1 e8 03             	shr    eax,0x3
c000edf4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edf8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ee00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee04:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ee08:	0f 8d ba 00 00 00    	jge    c000eec8 <loadACPITables(unsigned char*)+0x114>
c000ee0e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee12:	83 c0 24             	add    eax,0x24
c000ee15:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ee19:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ee1d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee21:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee25:	c1 e0 03             	shl    eax,0x3
c000ee28:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ee2c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee30:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee33:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee35:	89 c1                	mov    ecx,eax
c000ee37:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee3c:	8d 50 01             	lea    edx,[eax+0x1]
c000ee3f:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee45:	89 ca                	mov    edx,ecx
c000ee47:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee4e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee53:	eb ab                	jmp    c000ee00 <loadACPITables(unsigned char*)+0x4c>
c000ee55:	8d 76 00             	lea    esi,[esi+0x0]
c000ee58:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee5c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee67:	83 e8 24             	sub    eax,0x24
c000ee6a:	c1 e8 02             	shr    eax,0x2
c000ee6d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee71:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee79:	8d 76 00             	lea    esi,[esi+0x0]
c000ee7c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee80:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee84:	7d 42                	jge    c000eec8 <loadACPITables(unsigned char*)+0x114>
c000ee86:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee8a:	83 c0 24             	add    eax,0x24
c000ee8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee95:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee99:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee9d:	c1 e0 02             	shl    eax,0x2
c000eea0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eea4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eea8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000eeaa:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eeaf:	8d 50 01             	lea    edx,[eax+0x1]
c000eeb2:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000eeb8:	89 ca                	mov    edx,ecx
c000eeba:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eec1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000eec6:	eb b4                	jmp    c000ee7c <loadACPITables(unsigned char*)+0xc8>
c000eec8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eed0:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eed5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000eed9:	0f 8d 39 01 00 00    	jge    c000f018 <loadACPITables(unsigned char*)+0x264>
c000eedf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eee3:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eeea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eefa:	25 ff 0f 00 00       	and    eax,0xfff
c000eeff:	89 c6                	mov    esi,eax
c000ef01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef07:	83 ec 0c             	sub    esp,0xc
c000ef0a:	6a 01                	push   0x1
c000ef0c:	e8 fc a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef11:	83 c4 10             	add    esp,0x10
c000ef14:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef18:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef1e:	83 ec 0c             	sub    esp,0xc
c000ef21:	6a 01                	push   0x1
c000ef23:	6a 01                	push   0x1
c000ef25:	50                   	push   eax
c000ef26:	52                   	push   edx
c000ef27:	53                   	push   ebx
c000ef28:	e8 ed af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef2d:	83 c4 20             	add    esp,0x20
c000ef30:	09 f0                	or     eax,esi
c000ef32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef36:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef3a:	c1 e0 03             	shl    eax,0x3
c000ef3d:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef4e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef6a:	89 c6                	mov    esi,eax
c000ef6c:	89 d7                	mov    edi,edx
c000ef6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef70:	89 c8                	mov    eax,ecx
c000ef72:	89 fa                	mov    edx,edi
c000ef74:	89 f3                	mov    ebx,esi
c000ef76:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef7a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef91:	05 00 10 00 00       	add    eax,0x1000
c000ef96:	c1 e8 0c             	shr    eax,0xc
c000ef99:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efa1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000efa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efa9:	25 ff 0f 00 00       	and    eax,0xfff
c000efae:	89 c6                	mov    esi,eax
c000efb0:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efb6:	83 ec 0c             	sub    esp,0xc
c000efb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000efbd:	e8 4b a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000efc2:	83 c4 10             	add    esp,0x10
c000efc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000efc9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efcf:	83 ec 0c             	sub    esp,0xc
c000efd2:	6a 01                	push   0x1
c000efd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efd8:	50                   	push   eax
c000efd9:	52                   	push   edx
c000efda:	53                   	push   ebx
c000efdb:	e8 3a af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efe0:	83 c4 20             	add    esp,0x20
c000efe3:	09 f0                	or     eax,esi
c000efe5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efed:	83 ec 0c             	sub    esp,0xc
c000eff0:	50                   	push   eax
c000eff1:	e8 35 a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000eff6:	83 c4 10             	add    esp,0x10
c000eff9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000effd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f001:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000f008:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f00d:	e9 be fe ff ff       	jmp    c000eed0 <loadACPITables(unsigned char*)+0x11c>
c000f012:	66 90                	xchg   ax,ax
c000f014:	90                   	nop
c000f015:	8d 76 00             	lea    esi,[esi+0x0]
c000f018:	83 c4 60             	add    esp,0x60
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	5f                   	pop    edi
c000f01e:	c3                   	ret    
c000f01f:	90                   	nop

c000f020 <findRSDT(unsigned char*)>:
c000f020:	57                   	push   edi
c000f021:	56                   	push   esi
c000f022:	53                   	push   ebx
c000f023:	83 ec 50             	sub    esp,0x50
c000f026:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f02b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f031:	83 e0 04             	and    eax,0x4
c000f034:	0f b6 c0             	movzx  eax,al
c000f037:	85 c0                	test   eax,eax
c000f039:	75 0d                	jne    c000f048 <findRSDT(unsigned char*)+0x28>
c000f03b:	b8 00 00 00 00       	mov    eax,0x0
c000f040:	e9 2b 01 00 00       	jmp    c000f170 <findRSDT(unsigned char*)+0x150>
c000f045:	8d 76 00             	lea    esi,[esi+0x0]
c000f048:	89 e0                	mov    eax,esp
c000f04a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f04e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f052:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f056:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f05e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f062:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f066:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f06a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f06e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f072:	89 c6                	mov    esi,eax
c000f074:	89 d7                	mov    edi,edx
c000f076:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f078:	89 c8                	mov    eax,ecx
c000f07a:	89 fa                	mov    edx,edi
c000f07c:	89 f3                	mov    ebx,esi
c000f07e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f082:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f086:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f08a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f08e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f092:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f09a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f09e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f0a2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0b2:	25 ff 0f 00 00       	and    eax,0xfff
c000f0b7:	89 c6                	mov    esi,eax
c000f0b9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0bf:	83 ec 0c             	sub    esp,0xc
c000f0c2:	6a 02                	push   0x2
c000f0c4:	e8 44 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f0d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0d6:	83 ec 0c             	sub    esp,0xc
c000f0d9:	6a 01                	push   0x1
c000f0db:	6a 02                	push   0x2
c000f0dd:	50                   	push   eax
c000f0de:	52                   	push   edx
c000f0df:	53                   	push   ebx
c000f0e0:	e8 35 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0e5:	83 c4 20             	add    esp,0x20
c000f0e8:	09 f0                	or     eax,esi
c000f0ea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0f2:	25 ff 0f 00 00       	and    eax,0xfff
c000f0f7:	89 c6                	mov    esi,eax
c000f0f9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	6a 02                	push   0x2
c000f104:	e8 04 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f109:	83 c4 10             	add    esp,0x10
c000f10c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f110:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f116:	83 ec 0c             	sub    esp,0xc
c000f119:	6a 01                	push   0x1
c000f11b:	6a 02                	push   0x2
c000f11d:	50                   	push   eax
c000f11e:	52                   	push   edx
c000f11f:	53                   	push   ebx
c000f120:	e8 f5 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f125:	83 c4 20             	add    esp,0x20
c000f128:	09 f0                	or     eax,esi
c000f12a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f12e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f133:	85 c0                	test   eax,eax
c000f135:	75 11                	jne    c000f148 <findRSDT(unsigned char*)+0x128>
c000f137:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f13e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f142:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f146:	eb 24                	jmp    c000f16c <findRSDT(unsigned char*)+0x14c>
c000f148:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f14d:	83 f8 02             	cmp    eax,0x2
c000f150:	75 12                	jne    c000f164 <findRSDT(unsigned char*)+0x144>
c000f152:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f159:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f15d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f161:	eb 09                	jmp    c000f16c <findRSDT(unsigned char*)+0x14c>
c000f163:	90                   	nop
c000f164:	b8 00 00 00 00       	mov    eax,0x0
c000f169:	eb 05                	jmp    c000f170 <findRSDT(unsigned char*)+0x150>
c000f16b:	90                   	nop
c000f16c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f170:	83 c4 50             	add    esp,0x50
c000f173:	5b                   	pop    ebx
c000f174:	5e                   	pop    esi
c000f175:	5f                   	pop    edi
c000f176:	c3                   	ret    
c000f177:	90                   	nop

c000f178 <findDataTable(unsigned char*, char*)>:
c000f178:	83 ec 1c             	sub    esp,0x1c
c000f17b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f180:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f186:	83 e0 04             	and    eax,0x4
c000f189:	0f b6 c0             	movzx  eax,al
c000f18c:	85 c0                	test   eax,eax
c000f18e:	75 08                	jne    c000f198 <findDataTable(unsigned char*, char*)+0x20>
c000f190:	b8 00 00 00 00       	mov    eax,0x0
c000f195:	eb 5d                	jmp    c000f1f4 <findDataTable(unsigned char*, char*)+0x7c>
c000f197:	90                   	nop
c000f198:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f1a0:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f1a5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f1a9:	7d 41                	jge    c000f1ec <findDataTable(unsigned char*, char*)+0x74>
c000f1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1af:	c1 e0 03             	shl    eax,0x3
c000f1b2:	05 20 89 02 c0       	add    eax,0xc0028920
c000f1b7:	83 ec 04             	sub    esp,0x4
c000f1ba:	6a 04                	push   0x4
c000f1bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1c0:	50                   	push   eax
c000f1c1:	e8 ba 11 ff ff       	call   c0000380 <memcmp>
c000f1c6:	83 c4 10             	add    esp,0x10
c000f1c9:	85 c0                	test   eax,eax
c000f1cb:	0f 94 c0             	sete   al
c000f1ce:	0f b6 c0             	movzx  eax,al
c000f1d1:	85 c0                	test   eax,eax
c000f1d3:	74 0f                	je     c000f1e4 <findDataTable(unsigned char*, char*)+0x6c>
c000f1d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1d9:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1e0:	eb 12                	jmp    c000f1f4 <findDataTable(unsigned char*, char*)+0x7c>
c000f1e2:	66 90                	xchg   ax,ax
c000f1e4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1e9:	eb b5                	jmp    c000f1a0 <findDataTable(unsigned char*, char*)+0x28>
c000f1eb:	90                   	nop
c000f1ec:	b8 00 00 00 00       	mov    eax,0x0
c000f1f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f1f4:	83 c4 1c             	add    esp,0x1c
c000f1f7:	c3                   	ret    

c000f1f8 <scanMADT()>:
c000f1f8:	53                   	push   ebx
c000f1f9:	83 ec 38             	sub    esp,0x38
c000f1fc:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f201:	25 00 04 00 00       	and    eax,0x400
c000f206:	74 14                	je     c000f21c <scanMADT()+0x24>
c000f208:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f20d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f213:	83 e2 fb             	and    edx,0xfffffffb
c000f216:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f21c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f221:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f227:	83 e0 04             	and    eax,0x4
c000f22a:	0f b6 c0             	movzx  eax,al
c000f22d:	85 c0                	test   eax,eax
c000f22f:	0f 84 6b 04 00 00    	je     c000f6a0 <scanMADT()+0x4a8>
c000f235:	e8 e2 fa ff ff       	call   c000ed1c <findRSDP()>
c000f23a:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f23f:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f244:	85 c0                	test   eax,eax
c000f246:	75 1c                	jne    c000f264 <scanMADT()+0x6c>
c000f248:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f24d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f253:	83 e2 fb             	and    edx,0xfffffffb
c000f256:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f25c:	e9 47 04 00 00       	jmp    c000f6a8 <scanMADT()+0x4b0>
c000f261:	8d 76 00             	lea    esi,[esi+0x0]
c000f264:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f269:	83 ec 0c             	sub    esp,0xc
c000f26c:	50                   	push   eax
c000f26d:	e8 ae fd ff ff       	call   c000f020 <findRSDT(unsigned char*)>
c000f272:	83 c4 10             	add    esp,0x10
c000f275:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f27a:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f27f:	85 c0                	test   eax,eax
c000f281:	75 19                	jne    c000f29c <scanMADT()+0xa4>
c000f283:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f288:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f28e:	83 e2 fb             	and    edx,0xfffffffb
c000f291:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f297:	e9 0c 04 00 00       	jmp    c000f6a8 <scanMADT()+0x4b0>
c000f29c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f2a1:	83 ec 0c             	sub    esp,0xc
c000f2a4:	50                   	push   eax
c000f2a5:	e8 0a fb ff ff       	call   c000edb4 <loadACPITables(unsigned char*)>
c000f2aa:	83 c4 10             	add    esp,0x10
c000f2ad:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f2b2:	83 ec 08             	sub    esp,0x8
c000f2b5:	68 0c 1b 02 c0       	push   0xc0021b0c
c000f2ba:	50                   	push   eax
c000f2bb:	e8 b8 fe ff ff       	call   c000f178 <findDataTable(unsigned char*, char*)>
c000f2c0:	83 c4 10             	add    esp,0x10
c000f2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2c7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f2cc:	75 1a                	jne    c000f2e8 <scanMADT()+0xf0>
c000f2ce:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f2d3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2d9:	83 e2 fe             	and    edx,0xfffffffe
c000f2dc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2e2:	e9 c1 03 00 00       	jmp    c000f6a8 <scanMADT()+0x4b0>
c000f2e7:	90                   	nop
c000f2e8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2f7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2fb:	0f 87 a7 03 00 00    	ja     c000f6a8 <scanMADT()+0x4b0>
c000f301:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f309:	0f 87 99 03 00 00    	ja     c000f6a8 <scanMADT()+0x4b0>
c000f30f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f313:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f317:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f31b:	8d 50 01             	lea    edx,[eax+0x1]
c000f31e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f322:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f326:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f32a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f32e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f332:	8d 50 01             	lea    edx,[eax+0x1]
c000f335:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f339:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f33d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f341:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f345:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f34a:	83 f8 02             	cmp    eax,0x2
c000f34d:	0f 86 51 03 00 00    	jbe    c000f6a4 <scanMADT()+0x4ac>
c000f353:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f358:	85 c0                	test   eax,eax
c000f35a:	75 58                	jne    c000f3b4 <scanMADT()+0x1bc>
c000f35c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f360:	8d 50 01             	lea    edx,[eax+0x1]
c000f363:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f367:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f36d:	0f b6 d2             	movzx  edx,dl
c000f370:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f374:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f378:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f37e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f382:	8d 50 01             	lea    edx,[eax+0x1]
c000f385:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f389:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f38f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f392:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f398:	0f b6 d2             	movzx  edx,dl
c000f39b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f39f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3a3:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f3a9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3ae:	e9 d9 02 00 00       	jmp    c000f68c <scanMADT()+0x494>
c000f3b3:	90                   	nop
c000f3b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f3b9:	83 f8 01             	cmp    eax,0x1
c000f3bc:	0f 85 1a 01 00 00    	jne    c000f4dc <scanMADT()+0x2e4>
c000f3c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3cd:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f3d3:	0f b6 d2             	movzx  edx,dl
c000f3d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3de:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3e4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f1:	01 d0                	add    eax,edx
c000f3f3:	83 c0 2c             	add    eax,0x2c
c000f3f6:	8a 00                	mov    al,BYTE PTR [eax]
c000f3f8:	0f b6 d0             	movzx  edx,al
c000f3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ff:	8d 48 01             	lea    ecx,[eax+0x1]
c000f402:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f406:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f40a:	0f b6 c0             	movzx  eax,al
c000f40d:	c1 e0 08             	shl    eax,0x8
c000f410:	89 d1                	mov    ecx,edx
c000f412:	09 c1                	or     ecx,eax
c000f414:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f418:	8d 50 02             	lea    edx,[eax+0x2]
c000f41b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f41f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f423:	0f b6 c0             	movzx  eax,al
c000f426:	c1 e0 10             	shl    eax,0x10
c000f429:	09 c1                	or     ecx,eax
c000f42b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f42f:	8d 50 03             	lea    edx,[eax+0x3]
c000f432:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f436:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f43a:	0f b6 c0             	movzx  eax,al
c000f43d:	c1 e0 18             	shl    eax,0x18
c000f440:	09 c1                	or     ecx,eax
c000f442:	89 ca                	mov    edx,ecx
c000f444:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f449:	0f b6 c0             	movzx  eax,al
c000f44c:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f453:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f458:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f45c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f460:	01 d0                	add    eax,edx
c000f462:	83 c0 2c             	add    eax,0x2c
c000f465:	8a 00                	mov    al,BYTE PTR [eax]
c000f467:	0f b6 d0             	movzx  edx,al
c000f46a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f46e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f471:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f475:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f479:	0f b6 c0             	movzx  eax,al
c000f47c:	c1 e0 08             	shl    eax,0x8
c000f47f:	89 d1                	mov    ecx,edx
c000f481:	09 c1                	or     ecx,eax
c000f483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f487:	8d 50 02             	lea    edx,[eax+0x2]
c000f48a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f48e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f492:	0f b6 c0             	movzx  eax,al
c000f495:	c1 e0 10             	shl    eax,0x10
c000f498:	09 c1                	or     ecx,eax
c000f49a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f49e:	8d 50 03             	lea    edx,[eax+0x3]
c000f4a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4a9:	0f b6 c0             	movzx  eax,al
c000f4ac:	c1 e0 18             	shl    eax,0x18
c000f4af:	09 c1                	or     ecx,eax
c000f4b1:	89 ca                	mov    edx,ecx
c000f4b3:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4b8:	0f b6 c0             	movzx  eax,al
c000f4bb:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f4c2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4c7:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4cc:	83 c0 01             	add    eax,0x1
c000f4cf:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f4d4:	e9 b3 01 00 00       	jmp    c000f68c <scanMADT()+0x494>
c000f4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4e1:	83 f8 02             	cmp    eax,0x2
c000f4e4:	0f 85 ea 00 00 00    	jne    c000f5d4 <scanMADT()+0x3dc>
c000f4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4fd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f501:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f505:	8d 50 01             	lea    edx,[eax+0x1]
c000f508:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f50c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f510:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f514:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f518:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f51c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f520:	01 d0                	add    eax,edx
c000f522:	83 c0 2c             	add    eax,0x2c
c000f525:	8a 00                	mov    al,BYTE PTR [eax]
c000f527:	0f b6 d0             	movzx  edx,al
c000f52a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f52e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f531:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f535:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f539:	0f b6 c0             	movzx  eax,al
c000f53c:	c1 e0 08             	shl    eax,0x8
c000f53f:	89 d1                	mov    ecx,edx
c000f541:	09 c1                	or     ecx,eax
c000f543:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f547:	8d 50 02             	lea    edx,[eax+0x2]
c000f54a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f54e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f552:	0f b6 c0             	movzx  eax,al
c000f555:	c1 e0 10             	shl    eax,0x10
c000f558:	09 c1                	or     ecx,eax
c000f55a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55e:	8d 50 03             	lea    edx,[eax+0x3]
c000f561:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f565:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f569:	0f b6 c0             	movzx  eax,al
c000f56c:	c1 e0 18             	shl    eax,0x18
c000f56f:	09 c8                	or     eax,ecx
c000f571:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f575:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f57a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f57e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f582:	01 d0                	add    eax,edx
c000f584:	83 c0 2c             	add    eax,0x2c
c000f587:	8a 00                	mov    al,BYTE PTR [eax]
c000f589:	0f b6 c0             	movzx  eax,al
c000f58c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f590:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f593:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f597:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f59b:	0f b6 d2             	movzx  edx,dl
c000f59e:	c1 e2 08             	shl    edx,0x8
c000f5a1:	09 d0                	or     eax,edx
c000f5a3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f5a8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5ad:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f5b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f5b6:	88 90 08 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcdf8],dl
c000f5bc:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f5c1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f5c6:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f5ce:	e9 b9 00 00 00       	jmp    c000f68c <scanMADT()+0x494>
c000f5d3:	90                   	nop
c000f5d4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5d9:	83 f8 04             	cmp    eax,0x4
c000f5dc:	0f 85 9a 00 00 00    	jne    c000f67c <scanMADT()+0x484>
c000f5e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5f1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5f5:	0f b6 c0             	movzx  eax,al
c000f5f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f604:	01 d0                	add    eax,edx
c000f606:	83 c0 2c             	add    eax,0x2c
c000f609:	8a 00                	mov    al,BYTE PTR [eax]
c000f60b:	0f b6 d0             	movzx  edx,al
c000f60e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f612:	8d 48 01             	lea    ecx,[eax+0x1]
c000f615:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f619:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f61d:	0f b6 c0             	movzx  eax,al
c000f620:	c1 e0 08             	shl    eax,0x8
c000f623:	09 d0                	or     eax,edx
c000f625:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f629:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f62e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f632:	8d 50 01             	lea    edx,[eax+0x1]
c000f635:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f639:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f63d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f641:	0f b6 c0             	movzx  eax,al
c000f644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f64c:	c1 e0 08             	shl    eax,0x8
c000f64f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f653:	89 c1                	mov    ecx,eax
c000f655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f659:	c1 e0 18             	shl    eax,0x18
c000f65c:	89 c3                	mov    ebx,eax
c000f65e:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f663:	8d 50 01             	lea    edx,[eax+0x1]
c000f666:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f66c:	09 d9                	or     ecx,ebx
c000f66e:	89 ca                	mov    edx,ecx
c000f670:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f677:	eb 13                	jmp    c000f68c <scanMADT()+0x494>
c000f679:	8d 76 00             	lea    esi,[esi+0x0]
c000f67c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f681:	83 f8 05             	cmp    eax,0x5
c000f684:	75 06                	jne    c000f68c <scanMADT()+0x494>
c000f686:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f68b:	90                   	nop
c000f68c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f691:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f695:	01 d0                	add    eax,edx
c000f697:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f69b:	e9 50 fc ff ff       	jmp    c000f2f0 <scanMADT()+0xf8>
c000f6a0:	90                   	nop
c000f6a1:	eb 05                	jmp    c000f6a8 <scanMADT()+0x4b0>
c000f6a3:	90                   	nop
c000f6a4:	90                   	nop
c000f6a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6a8:	83 c4 38             	add    esp,0x38
c000f6ab:	5b                   	pop    ebx
c000f6ac:	c3                   	ret    
c000f6ad:	90                   	nop
c000f6ae:	66 90                	xchg   ax,ax

c000f6b0 <ACPI::ACPI()>:
c000f6b0:	83 ec 0c             	sub    esp,0xc
c000f6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b7:	83 ec 08             	sub    esp,0x8
c000f6ba:	68 11 1b 02 c0       	push   0xc0021b11
c000f6bf:	50                   	push   eax
c000f6c0:	e8 65 d2 ff ff       	call   c000c92a <Device::Device(char const*)>
c000f6c5:	83 c4 10             	add    esp,0x10
c000f6c8:	ba 64 1c 02 c0       	mov    edx,0xc0021c64
c000f6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d1:	89 10                	mov    DWORD PTR [eax],edx
c000f6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6f0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6fa:	e8 f9 fa ff ff       	call   c000f1f8 <scanMADT()>
c000f6ff:	90                   	nop
c000f700:	83 c4 0c             	add    esp,0xc
c000f703:	c3                   	ret    

c000f704 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f704:	83 ec 2c             	sub    esp,0x2c
c000f707:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f70b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f70f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f713:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f717:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f71c:	88 d0                	mov    al,dl
c000f71e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f722:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f727:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f72f:	90                   	nop
c000f730:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f734:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f73a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f73e:	0f 8d b0 00 00 00    	jge    c000f7f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f744:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f748:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f74c:	83 c2 2a             	add    edx,0x2a
c000f74f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f753:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f758:	0f b7 c0             	movzx  eax,ax
c000f75b:	39 c2                	cmp    edx,eax
c000f75d:	0f 85 85 00 00 00    	jne    c000f7e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f763:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f767:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f76b:	83 c2 2a             	add    edx,0x2a
c000f76e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f772:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f777:	0f b6 c0             	movzx  eax,al
c000f77a:	39 c2                	cmp    edx,eax
c000f77c:	75 6a                	jne    c000f7e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f77e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f783:	85 c0                	test   eax,eax
c000f785:	74 3d                	je     c000f7c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f787:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f78b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f78f:	83 c2 2a             	add    edx,0x2a
c000f792:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f79a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f79d:	39 c2                	cmp    edx,eax
c000f79f:	74 13                	je     c000f7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f7a1:	83 ec 0c             	sub    esp,0xc
c000f7a4:	68 8c 1a 02 c0       	push   0xc0021a8c
c000f7a9:	e8 13 1c 00 00       	call   c00113c1 <KePanic(char const*)>
c000f7ae:	83 c4 10             	add    esp,0x10
c000f7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	68 16 1b 02 c0       	push   0xc0021b16
c000f7bc:	e8 00 1c 00 00       	call   c00113c1 <KePanic(char const*)>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7d0:	83 c2 2a             	add    edx,0x2a
c000f7d3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f7d7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7d9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7dc:	89 01                	mov    DWORD PTR [ecx],eax
c000f7de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7e1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7e6:	66 90                	xchg   ax,ax
c000f7e8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7ed:	e9 3e ff ff ff       	jmp    c000f730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7f2:	66 90                	xchg   ax,ax
c000f7f4:	90                   	nop
c000f7f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7f9:	83 c4 2c             	add    esp,0x2c
c000f7fc:	c2 04 00             	ret    0x4
c000f7ff:	90                   	nop

c000f800 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f800:	83 ec 1c             	sub    esp,0x1c
c000f803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f807:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f80b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f80f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f814:	88 c8                	mov    al,cl
c000f816:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f81a:	88 d0                	mov    al,dl
c000f81c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f824:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f831:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f835:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f83d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f843:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f847:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f84e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f857:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f85d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f861:	83 c0 01             	add    eax,0x1
c000f864:	88 c1                	mov    cl,al
c000f866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f86a:	83 c2 2a             	add    edx,0x2a
c000f86d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f875:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f87f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f882:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f886:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f88e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f894:	8d 50 01             	lea    edx,[eax+0x1]
c000f897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f89b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f8a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8a5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f8ab:	3d 00 02 00 00       	cmp    eax,0x200
c000f8b0:	75 12                	jne    c000f8c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f8b2:	83 ec 0c             	sub    esp,0xc
c000f8b5:	68 25 1b 02 c0       	push   0xc0021b25
c000f8ba:	e8 02 1b 00 00       	call   c00113c1 <KePanic(char const*)>
c000f8bf:	83 c4 10             	add    esp,0x10
c000f8c2:	66 90                	xchg   ax,ax
c000f8c4:	90                   	nop
c000f8c5:	83 c4 1c             	add    esp,0x1c
c000f8c8:	c3                   	ret    
c000f8c9:	90                   	nop
c000f8ca:	66 90                	xchg   ax,ax

c000f8cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f8cc:	b8 00 00 00 00       	mov    eax,0x0
c000f8d1:	c3                   	ret    
c000f8d2:	66 90                	xchg   ax,ax

c000f8d4 <ACPI::detectPCI()>:
c000f8d4:	53                   	push   ebx
c000f8d5:	83 ec 28             	sub    esp,0x28
c000f8d8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8dd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8e2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8ed:	83 e0 04             	and    eax,0x4
c000f8f0:	0f b6 c0             	movzx  eax,al
c000f8f3:	85 c0                	test   eax,eax
c000f8f5:	74 2d                	je     c000f924 <ACPI::detectPCI()+0x50>
c000f8f7:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8fc:	83 ec 08             	sub    esp,0x8
c000f8ff:	68 42 1b 02 c0       	push   0xc0021b42
c000f904:	50                   	push   eax
c000f905:	e8 6e f8 ff ff       	call   c000f178 <findDataTable(unsigned char*, char*)>
c000f90a:	83 c4 10             	add    esp,0x10
c000f90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f911:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f916:	74 0c                	je     c000f924 <ACPI::detectPCI()+0x50>
c000f918:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f91d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f922:	66 90                	xchg   ax,ax
c000f924:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f92c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f930:	8a 00                	mov    al,BYTE PTR [eax]
c000f932:	0f b6 c0             	movzx  eax,al
c000f935:	83 f8 01             	cmp    eax,0x1
c000f938:	75 0e                	jne    c000f948 <ACPI::detectPCI()+0x74>
c000f93a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f93f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f944:	eb 2e                	jmp    c000f974 <ACPI::detectPCI()+0xa0>
c000f946:	66 90                	xchg   ax,ax
c000f948:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f94c:	8a 00                	mov    al,BYTE PTR [eax]
c000f94e:	0f b6 c0             	movzx  eax,al
c000f951:	83 f8 02             	cmp    eax,0x2
c000f954:	75 1e                	jne    c000f974 <ACPI::detectPCI()+0xa0>
c000f956:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f95b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f960:	85 c0                	test   eax,eax
c000f962:	74 10                	je     c000f974 <ACPI::detectPCI()+0xa0>
c000f964:	83 ec 0c             	sub    esp,0xc
c000f967:	68 bc 1a 02 c0       	push   0xc0021abc
c000f96c:	e8 50 1a 00 00       	call   c00113c1 <KePanic(char const*)>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f978:	83 f0 01             	xor    eax,0x1
c000f97b:	0f b6 c0             	movzx  eax,al
c000f97e:	85 c0                	test   eax,eax
c000f980:	74 46                	je     c000f9c8 <ACPI::detectPCI()+0xf4>
c000f982:	e8 a9 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f987:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f98b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f990:	75 0e                	jne    c000f9a0 <ACPI::detectPCI()+0xcc>
c000f992:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f997:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f99c:	eb 2a                	jmp    c000f9c8 <ACPI::detectPCI()+0xf4>
c000f99e:	66 90                	xchg   ax,ax
c000f9a0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f9a5:	75 21                	jne    c000f9c8 <ACPI::detectPCI()+0xf4>
c000f9a7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9ac:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f9b1:	85 c0                	test   eax,eax
c000f9b3:	74 13                	je     c000f9c8 <ACPI::detectPCI()+0xf4>
c000f9b5:	83 ec 0c             	sub    esp,0xc
c000f9b8:	68 bc 1a 02 c0       	push   0xc0021abc
c000f9bd:	e8 ff 19 00 00       	call   c00113c1 <KePanic(char const*)>
c000f9c2:	83 c4 10             	add    esp,0x10
c000f9c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9c8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9cd:	85 c0                	test   eax,eax
c000f9cf:	0f 84 87 00 00 00    	je     c000fa5c <ACPI::detectPCI()+0x188>
c000f9d5:	83 ec 0c             	sub    esp,0xc
c000f9d8:	68 47 1b 02 c0       	push   0xc0021b47
c000f9dd:	e8 09 13 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000f9e2:	83 c4 10             	add    esp,0x10
c000f9e5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9ed:	83 ec 0c             	sub    esp,0xc
c000f9f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9f4:	e8 bd 80 ff ff       	call   c0007ab6 <malloc>
c000f9f9:	83 c4 10             	add    esp,0x10
c000f9fc:	89 c3                	mov    ebx,eax
c000f9fe:	83 ec 0c             	sub    esp,0xc
c000fa01:	53                   	push   ebx
c000fa02:	e8 51 b3 00 00       	call   c001ad58 <PCI::PCI()>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fa0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa12:	83 ec 08             	sub    esp,0x8
c000fa15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa19:	50                   	push   eax
c000fa1a:	e8 73 cd ff ff       	call   c000c792 <Device::addChild(Device*)>
c000fa1f:	83 c4 10             	add    esp,0x10
c000fa22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa26:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa28:	83 c0 08             	add    eax,0x8
c000fa2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa2d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fa32:	85 d2                	test   edx,edx
c000fa34:	74 0a                	je     c000fa40 <ACPI::detectPCI()+0x16c>
c000fa36:	ba 01 00 00 00       	mov    edx,0x1
c000fa3b:	eb 0b                	jmp    c000fa48 <ACPI::detectPCI()+0x174>
c000fa3d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa40:	ba 02 00 00 00       	mov    edx,0x2
c000fa45:	8d 76 00             	lea    esi,[esi+0x0]
c000fa48:	6a 00                	push   0x0
c000fa4a:	6a 00                	push   0x0
c000fa4c:	52                   	push   edx
c000fa4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa51:	ff d0                	call   eax
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	e9 91 00 00 00       	jmp    c000faec <ACPI::detectPCI()+0x218>
c000fa5b:	90                   	nop
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	68 5f 1b 02 c0       	push   0xc0021b5f
c000fa64:	e8 82 12 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa7a:	e8 37 80 ff ff       	call   c0007ab6 <malloc>
c000fa7f:	83 c4 10             	add    esp,0x10
c000fa82:	89 c3                	mov    ebx,eax
c000fa84:	83 ec 0c             	sub    esp,0xc
c000fa87:	53                   	push   ebx
c000fa88:	e8 65 be 00 00       	call   c001b8f2 <IDE::IDE()>
c000fa8d:	83 c4 10             	add    esp,0x10
c000fa90:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa98:	83 ec 08             	sub    esp,0x8
c000fa9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa9f:	50                   	push   eax
c000faa0:	e8 ed cc ff ff       	call   c000c792 <Device::addChild(Device*)>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faac:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faba:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fac3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fac7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fad4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fad6:	83 c0 08             	add    eax,0x8
c000fad9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadb:	6a 00                	push   0x0
c000fadd:	6a 00                	push   0x0
c000fadf:	6a 00                	push   0x0
c000fae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fae5:	ff d0                	call   eax
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	66 90                	xchg   ax,ax
c000faec:	90                   	nop
c000faed:	83 c4 28             	add    esp,0x28
c000faf0:	5b                   	pop    ebx
c000faf1:	c3                   	ret    
c000faf2:	66 90                	xchg   ax,ax

c000faf4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000faf4:	83 ec 1c             	sub    esp,0x1c
c000faf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fafb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fafe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fb02:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb07:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb0c:	83 ec 08             	sub    esp,0x8
c000fb0f:	52                   	push   edx
c000fb10:	50                   	push   eax
c000fb11:	e8 62 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fb16:	83 c4 10             	add    esp,0x10
c000fb19:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fb1d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb22:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb27:	83 ec 04             	sub    esp,0x4
c000fb2a:	6a 01                	push   0x1
c000fb2c:	52                   	push   edx
c000fb2d:	50                   	push   eax
c000fb2e:	e8 5f 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	90                   	nop
c000fb37:	83 c4 1c             	add    esp,0x1c
c000fb3a:	c3                   	ret    
c000fb3b:	90                   	nop

c000fb3c <ACPI::sleep()>:
c000fb3c:	83 ec 0c             	sub    esp,0xc
c000fb3f:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb44:	85 c0                	test   eax,eax
c000fb46:	74 08                	je     c000fb50 <ACPI::sleep()+0x14>
c000fb48:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb4d:	ff d0                	call   eax
c000fb4f:	90                   	nop
c000fb50:	90                   	nop
c000fb51:	83 c4 0c             	add    esp,0xc
c000fb54:	c3                   	ret    
c000fb55:	90                   	nop
c000fb56:	66 90                	xchg   ax,ax

c000fb58 <ACPI::open(int, int, void*)>:
c000fb58:	57                   	push   edi
c000fb59:	56                   	push   esi
c000fb5a:	53                   	push   ebx
c000fb5b:	81 ec 70 01 00 00    	sub    esp,0x170
c000fb61:	83 ec 0c             	sub    esp,0xc
c000fb64:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fb6b:	e8 64 fd ff ff       	call   c000f8d4 <ACPI::detectPCI()>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	83 ec 0c             	sub    esp,0xc
c000fb76:	68 e4 1a 02 c0       	push   0xc0021ae4
c000fb7b:	e8 6b 11 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000fb80:	83 c4 10             	add    esp,0x10
c000fb83:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb88:	8a 00                	mov    al,BYTE PTR [eax]
c000fb8a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb91:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb99:	83 f8 01             	cmp    eax,0x1
c000fb9c:	75 12                	jne    c000fbb0 <ACPI::open(int, int, void*)+0x58>
c000fb9e:	83 ec 0c             	sub    esp,0xc
c000fba1:	68 11 14 02 c0       	push   0xc0021411
c000fba6:	e8 fd 4b 00 00       	call   c00147a8 <Thr::loadKernelSymbolTable(char const*)>
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	eb 34                	jmp    c000fbe4 <ACPI::open(int, int, void*)+0x8c>
c000fbb0:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fbb8:	3d bb 00 00 00       	cmp    eax,0xbb
c000fbbd:	75 15                	jne    c000fbd4 <ACPI::open(int, int, void*)+0x7c>
c000fbbf:	83 ec 0c             	sub    esp,0xc
c000fbc2:	68 74 1b 02 c0       	push   0xc0021b74
c000fbc7:	e8 dc 4b 00 00       	call   c00147a8 <Thr::loadKernelSymbolTable(char const*)>
c000fbcc:	83 c4 10             	add    esp,0x10
c000fbcf:	eb 13                	jmp    c000fbe4 <ACPI::open(int, int, void*)+0x8c>
c000fbd1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	68 92 1b 02 c0       	push   0xc0021b92
c000fbdc:	e8 e0 17 00 00       	call   c00113c1 <KePanic(char const*)>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fbec:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fbf7:	83 ec 0c             	sub    esp,0xc
c000fbfa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fc01:	e8 b0 7e ff ff       	call   c0007ab6 <malloc>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	89 c3                	mov    ebx,eax
c000fc0b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fc10:	83 ec 04             	sub    esp,0x4
c000fc13:	50                   	push   eax
c000fc14:	68 ac 1b 02 c0       	push   0xc0021bac
c000fc19:	53                   	push   ebx
c000fc1a:	e8 51 bc ff ff       	call   c000b870 <File::File(char const*, Process*)>
c000fc1f:	83 c4 10             	add    esp,0x10
c000fc22:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fc29:	83 ec 08             	sub    esp,0x8
c000fc2c:	6a 01                	push   0x1
c000fc2e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc35:	e8 fe bc ff ff       	call   c000b938 <File::open(FileOpenMode)>
c000fc3a:	83 c4 10             	add    esp,0x10
c000fc3d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fc44:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fc4c:	75 16                	jne    c000fc64 <ACPI::open(int, int, void*)+0x10c>
c000fc4e:	83 ec 0c             	sub    esp,0xc
c000fc51:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc58:	e8 39 bd ff ff       	call   c000b996 <File::close()>
c000fc5d:	83 c4 10             	add    esp,0x10
c000fc60:	eb 0a                	jmp    c000fc6c <ACPI::open(int, int, void*)+0x114>
c000fc62:	66 90                	xchg   ax,ax
c000fc64:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fc6c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fc74:	74 1e                	je     c000fc94 <ACPI::open(int, int, void*)+0x13c>
c000fc76:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc7d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc7f:	83 c0 08             	add    eax,0x8
c000fc82:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc84:	83 ec 0c             	sub    esp,0xc
c000fc87:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc8e:	ff d0                	call   eax
c000fc90:	83 c4 10             	add    esp,0x10
c000fc93:	90                   	nop
c000fc94:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc9b:	83 f0 01             	xor    eax,0x1
c000fc9e:	0f b6 c0             	movzx  eax,al
c000fca1:	85 c0                	test   eax,eax
c000fca3:	74 43                	je     c000fce8 <ACPI::open(int, int, void*)+0x190>
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	68 ca 1b 02 c0       	push   0xc0021bca
c000fcad:	e8 39 10 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000fcb2:	83 c4 10             	add    esp,0x10
c000fcb5:	83 ec 04             	sub    esp,0x4
c000fcb8:	6a 0c                	push   0xc
c000fcba:	68 e5 1b 02 c0       	push   0xc0021be5
c000fcbf:	68 f6 1b 02 c0       	push   0xc0021bf6
c000fcc4:	e8 8f 3d 00 00       	call   c0013a58 <Reg::readIntWithDefault(char*, char*, int)>
c000fcc9:	83 c4 10             	add    esp,0x10
c000fccc:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fcdd:	e8 5a 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fce2:	83 c4 10             	add    esp,0x10
c000fce5:	8d 76 00             	lea    esi,[esi+0x0]
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	68 d5 06 02 c0       	push   0xc00206d5
c000fcf0:	e8 f6 0f 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000fcf5:	83 c4 10             	add    esp,0x10
c000fcf8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fcff:	83 ec 08             	sub    esp,0x8
c000fd02:	6a 13                	push   0x13
c000fd04:	50                   	push   eax
c000fd05:	e8 a0 cd ff ff       	call   c000caaa <getDevicesOfType(DeviceType)>
c000fd0a:	83 c4 0c             	add    esp,0xc
c000fd0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd1a:	50                   	push   eax
c000fd1b:	e8 b0 fd 00 00       	call   c001fad0 <LinkedList<Device>::isEmpty()>
c000fd20:	83 c4 10             	add    esp,0x10
c000fd23:	83 f0 01             	xor    eax,0x1
c000fd26:	0f b6 c0             	movzx  eax,al
c000fd29:	85 c0                	test   eax,eax
c000fd2b:	0f 84 47 01 00 00    	je     c000fe78 <ACPI::open(int, int, void*)+0x320>
c000fd31:	83 ec 0c             	sub    esp,0xc
c000fd34:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd3b:	50                   	push   eax
c000fd3c:	e8 ab fd 00 00       	call   c001faec <LinkedList<Device>::getFirstElement()>
c000fd41:	83 c4 10             	add    esp,0x10
c000fd44:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fd4b:	83 ec 0c             	sub    esp,0xc
c000fd4e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd55:	50                   	push   eax
c000fd56:	e8 99 fd 00 00       	call   c001faf4 <LinkedList<Device>::removeFirst()>
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fd65:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fd6c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fd73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd77:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd7d:	ba 09 00 00 00       	mov    edx,0x9
c000fd82:	fc                   	cld    
c000fd83:	89 c7                	mov    edi,eax
c000fd85:	89 de                	mov    esi,ebx
c000fd87:	89 d1                	mov    ecx,edx
c000fd89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd8b:	83 ec 08             	sub    esp,0x8
c000fd8e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd92:	50                   	push   eax
c000fd93:	83 ec 24             	sub    esp,0x24
c000fd96:	89 e0                	mov    eax,esp
c000fd98:	89 c3                	mov    ebx,eax
c000fd9a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd9e:	ba 09 00 00 00       	mov    edx,0x9
c000fda3:	89 df                	mov    edi,ebx
c000fda5:	89 c6                	mov    esi,eax
c000fda7:	89 d1                	mov    ecx,edx
c000fda9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fdab:	e8 92 b4 00 00       	call   c001b242 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fdb0:	83 c4 30             	add    esp,0x30
c000fdb3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fdba:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fdc2:	0f 84 48 ff ff ff    	je     c000fd10 <ACPI::open(int, int, void*)+0x1b8>
c000fdc8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fdd3:	83 ec 0c             	sub    esp,0xc
c000fdd6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fddd:	e8 d4 7c ff ff       	call   c0007ab6 <malloc>
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	89 c3                	mov    ebx,eax
c000fde7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fdec:	83 ec 04             	sub    esp,0x4
c000fdef:	50                   	push   eax
c000fdf0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdf7:	53                   	push   ebx
c000fdf8:	e8 73 ba ff ff       	call   c000b870 <File::File(char const*, Process*)>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fe07:	83 ec 0c             	sub    esp,0xc
c000fe0a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe11:	e8 e6 bd ff ff       	call   c000bbfc <File::exists()>
c000fe16:	83 c4 10             	add    esp,0x10
c000fe19:	0f b6 c0             	movzx  eax,al
c000fe1c:	85 c0                	test   eax,eax
c000fe1e:	74 28                	je     c000fe48 <ACPI::open(int, int, void*)+0x2f0>
c000fe20:	83 ec 08             	sub    esp,0x8
c000fe23:	6a 01                	push   0x1
c000fe25:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fe2c:	e8 f1 53 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	83 ec 08             	sub    esp,0x8
c000fe37:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fe3e:	50                   	push   eax
c000fe3f:	e8 0f 56 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	90                   	nop
c000fe48:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fe50:	0f 84 ba fe ff ff    	je     c000fd10 <ACPI::open(int, int, void*)+0x1b8>
c000fe56:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fe5d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe5f:	83 c0 08             	add    eax,0x8
c000fe62:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe64:	83 ec 0c             	sub    esp,0xc
c000fe67:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe6e:	ff d0                	call   eax
c000fe70:	83 c4 10             	add    esp,0x10
c000fe73:	e9 98 fe ff ff       	jmp    c000fd10 <ACPI::open(int, int, void*)+0x1b8>
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe82:	50                   	push   eax
c000fe83:	e8 44 fc 00 00       	call   c001facc <LinkedList<Device>::~LinkedList()>
c000fe88:	83 c4 10             	add    esp,0x10
c000fe8b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe91:	83 ec 08             	sub    esp,0x8
c000fe94:	6a 01                	push   0x1
c000fe96:	68 fd 1b 02 c0       	push   0xc0021bfd
c000fe9b:	e8 82 53 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000fea0:	83 c4 10             	add    esp,0x10
c000fea3:	83 ec 08             	sub    esp,0x8
c000fea6:	53                   	push   ebx
c000fea7:	50                   	push   eax
c000fea8:	e8 a6 55 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000feb5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000febb:	83 e0 04             	and    eax,0x4
c000febe:	0f b6 c0             	movzx  eax,al
c000fec1:	85 c0                	test   eax,eax
c000fec3:	0f 84 1b 01 00 00    	je     c000ffe4 <ACPI::open(int, int, void*)+0x48c>
c000fec9:	83 ec 0c             	sub    esp,0xc
c000fecc:	68 1a 1c 02 c0       	push   0xc0021c1a
c000fed1:	e8 15 0e 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000feee:	e8 c3 7b ff ff       	call   c0007ab6 <malloc>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	89 c3                	mov    ebx,eax
c000fef8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fefd:	83 ec 04             	sub    esp,0x4
c000ff00:	50                   	push   eax
c000ff01:	68 37 1c 02 c0       	push   0xc0021c37
c000ff06:	53                   	push   ebx
c000ff07:	e8 64 b9 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c000ff0c:	83 c4 10             	add    esp,0x10
c000ff0f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ff16:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff1e:	74 20                	je     c000ff40 <ACPI::open(int, int, void*)+0x3e8>
c000ff20:	83 ec 0c             	sub    esp,0xc
c000ff23:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff2a:	e8 cd bc ff ff       	call   c000bbfc <File::exists()>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	0f b6 c0             	movzx  eax,al
c000ff35:	85 c0                	test   eax,eax
c000ff37:	74 07                	je     c000ff40 <ACPI::open(int, int, void*)+0x3e8>
c000ff39:	b0 01                	mov    al,0x1
c000ff3b:	eb 07                	jmp    c000ff44 <ACPI::open(int, int, void*)+0x3ec>
c000ff3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff40:	b0 00                	mov    al,0x0
c000ff42:	66 90                	xchg   ax,ax
c000ff44:	0f b6 c0             	movzx  eax,al
c000ff47:	85 c0                	test   eax,eax
c000ff49:	74 25                	je     c000ff70 <ACPI::open(int, int, void*)+0x418>
c000ff4b:	83 ec 08             	sub    esp,0x8
c000ff4e:	6a 01                	push   0x1
c000ff50:	68 37 1c 02 c0       	push   0xc0021c37
c000ff55:	e8 c8 52 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	83 ec 08             	sub    esp,0x8
c000ff60:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ff67:	50                   	push   eax
c000ff68:	e8 e6 54 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c000ff6d:	83 c4 10             	add    esp,0x10
c000ff70:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff78:	74 2a                	je     c000ffa4 <ACPI::open(int, int, void*)+0x44c>
c000ff7a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff82:	74 20                	je     c000ffa4 <ACPI::open(int, int, void*)+0x44c>
c000ff84:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff8d:	83 c0 08             	add    eax,0x8
c000ff90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff9c:	ff d0                	call   eax
c000ff9e:	83 c4 10             	add    esp,0x10
c000ffa1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffa4:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ffa9:	83 ec 08             	sub    esp,0x8
c000ffac:	68 54 1c 02 c0       	push   0xc0021c54
c000ffb1:	50                   	push   eax
c000ffb2:	e8 c1 f1 ff ff       	call   c000f178 <findDataTable(unsigned char*, char*)>
c000ffb7:	83 c4 10             	add    esp,0x10
c000ffba:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ffc1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ffc9:	74 19                	je     c000ffe4 <ACPI::open(int, int, void*)+0x48c>
c000ffcb:	83 ec 08             	sub    esp,0x8
c000ffce:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ffd5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ffdc:	e8 13 fb ff ff       	call   c000faf4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	b8 00 00 00 00       	mov    eax,0x0
c000ffe9:	81 c4 70 01 00 00    	add    esp,0x170
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	5f                   	pop    edi
c000fff2:	c3                   	ret    
c000fff3:	90                   	nop

c000fff4 <CPU::close(int, int, void*)>:
c000fff4:	31 c0                	xor    eax,eax
c000fff6:	c3                   	ret    
c000fff7:	90                   	nop

c000fff8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fff8:	60                   	pusha  
c000fff9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fffd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010001:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010005:	9c                   	pushf  
c0010006:	fa                   	cli    
c0010007:	0f 09                	wbinvd 
c0010009:	0f 30                	wrmsr  
c001000b:	9d                   	popf   
c001000c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010010:	89 02                	mov    DWORD PTR [edx],eax
c0010012:	61                   	popa   
c0010013:	c3                   	ret    

c0010014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010014:	60                   	pusha  
c0010015:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010019:	9c                   	pushf  
c001001a:	fa                   	cli    
c001001b:	0f 09                	wbinvd 
c001001d:	31 c0                	xor    eax,eax
c001001f:	31 d2                	xor    edx,edx
c0010021:	0f 32                	rdmsr  
c0010023:	9d                   	popf   
c0010024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010028:	89 02                	mov    DWORD PTR [edx],eax
c001002a:	61                   	popa   
c001002b:	c3                   	ret    

c001002c <CPU::AMD_K6_writeback(int, int, int)>:
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	83 ec 10             	sub    esp,0x10
c0010031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010035:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001003a:	75 5d                	jne    c0010099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001003c:	83 f8 08             	cmp    eax,0x8
c001003f:	75 09                	jne    c001004a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010041:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010046:	7e 13                	jle    c001005b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010048:	eb 30                	jmp    c001007a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001004a:	83 f8 06             	cmp    eax,0x6
c001004d:	7c 4a                	jl     c0010099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001004f:	83 f8 07             	cmp    eax,0x7
c0010052:	7e 07                	jle    c001005b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010054:	83 f8 09             	cmp    eax,0x9
c0010057:	74 21                	je     c001007a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010059:	eb 3e                	jmp    c0010099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001005b:	89 e6                	mov    esi,esp
c001005d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c0010063:	56                   	push   esi
c0010064:	c1 eb 15             	shr    ebx,0x15
c0010067:	68 82 00 00 c0       	push   0xc0000082
c001006c:	83 e3 7e             	and    ebx,0x7e
c001006f:	e8 a0 ff ff ff       	call   c0010014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010074:	56                   	push   esi
c0010075:	6a 00                	push   0x0
c0010077:	53                   	push   ebx
c0010078:	eb 12                	jmp    c001008c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001007a:	89 e3                	mov    ebx,esp
c001007c:	53                   	push   ebx
c001007d:	68 82 00 00 c0       	push   0xc0000082
c0010082:	e8 8d ff ff ff       	call   c0010014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010087:	53                   	push   ebx
c0010088:	6a 00                	push   0x0
c001008a:	6a 00                	push   0x0
c001008c:	68 82 00 00 c0       	push   0xc0000082
c0010091:	e8 62 ff ff ff       	call   c000fff8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010096:	83 c4 18             	add    esp,0x18
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	5b                   	pop    ebx
c001009d:	5e                   	pop    esi
c001009e:	c3                   	ret    
c001009f:	90                   	nop

c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00100a0:	55                   	push   ebp
c00100a1:	57                   	push   edi
c00100a2:	56                   	push   esi
c00100a3:	53                   	push   ebx
c00100a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00100ac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00100b0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00100b4:	39 05 18 32 02 c0    	cmp    DWORD PTR ds:0xc0023218,eax
c00100ba:	75 23                	jne    c00100df <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00100bc:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c00100c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00100c5:	89 06                	mov    DWORD PTR [esi],eax
c00100c7:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c00100cc:	89 07                	mov    DWORD PTR [edi],eax
c00100ce:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c00100d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00100d6:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c00100db:	89 02                	mov    DWORD PTR [edx],eax
c00100dd:	eb 3f                	jmp    c001011e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00100df:	31 c9                	xor    ecx,ecx
c00100e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e5:	0f a2                	cpuid  
c00100e7:	89 06                	mov    DWORD PTR [esi],eax
c00100e9:	89 1f                	mov    DWORD PTR [edi],ebx
c00100eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ef:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00100f2:	89 10                	mov    DWORD PTR [eax],edx
c00100f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f8:	a3 18 32 02 c0       	mov    ds:0xc0023218,eax
c00100fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00100ff:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c0010104:	8b 07                	mov    eax,DWORD PTR [edi]
c0010106:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c001010b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001010e:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c0010113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010117:	8b 00                	mov    eax,DWORD PTR [eax]
c0010119:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c001011e:	5b                   	pop    ebx
c001011f:	5e                   	pop    esi
c0010120:	5f                   	pop    edi
c0010121:	5d                   	pop    ebp
c0010122:	c3                   	ret    
c0010123:	90                   	nop

c0010124 <CPU::cpuidCheckEDX(unsigned int)>:
c0010124:	83 ec 10             	sub    esp,0x10
c0010127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001012b:	50                   	push   eax
c001012c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010130:	50                   	push   eax
c0010131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010135:	50                   	push   eax
c0010136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001013a:	50                   	push   eax
c001013b:	6a 01                	push   0x1
c001013d:	e8 5e ff ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010146:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001014a:	0f 95 c0             	setne  al
c001014d:	83 c4 24             	add    esp,0x24
c0010150:	c3                   	ret    
c0010151:	90                   	nop

c0010152 <CPU::cpuidCheckECX(unsigned int)>:
c0010152:	83 ec 10             	sub    esp,0x10
c0010155:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010159:	50                   	push   eax
c001015a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001015e:	50                   	push   eax
c001015f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010163:	50                   	push   eax
c0010164:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010168:	50                   	push   eax
c0010169:	6a 01                	push   0x1
c001016b:	e8 30 ff ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010174:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010178:	0f 95 c0             	setne  al
c001017b:	83 c4 24             	add    esp,0x24
c001017e:	c3                   	ret    
c001017f:	90                   	nop

c0010180 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010180:	83 ec 10             	sub    esp,0x10
c0010183:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010187:	50                   	push   eax
c0010188:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001018c:	50                   	push   eax
c001018d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010191:	50                   	push   eax
c0010192:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010196:	50                   	push   eax
c0010197:	6a 07                	push   0x7
c0010199:	e8 02 ff ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001019e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101a2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00101a6:	0f 95 c0             	setne  al
c00101a9:	83 c4 24             	add    esp,0x24
c00101ac:	c3                   	ret    
c00101ad:	90                   	nop

c00101ae <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00101ae:	83 ec 10             	sub    esp,0x10
c00101b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101b5:	50                   	push   eax
c00101b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101ba:	50                   	push   eax
c00101bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101bf:	50                   	push   eax
c00101c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101c4:	50                   	push   eax
c00101c5:	6a 07                	push   0x7
c00101c7:	e8 d4 fe ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00101d4:	0f 95 c0             	setne  al
c00101d7:	83 c4 24             	add    esp,0x24
c00101da:	c3                   	ret    
c00101db:	90                   	nop

c00101dc <CPU::CPU()>:
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e3:	83 ec 08             	sub    esp,0x8
c00101e6:	68 79 1d 02 c0       	push   0xc0021d79
c00101eb:	50                   	push   eax
c00101ec:	e8 39 c7 ff ff       	call   c000c92a <Device::Device(char const*)>
c00101f1:	83 c4 10             	add    esp,0x10
c00101f4:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c00101f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fd:	89 10                	mov    DWORD PTR [eax],edx
c00101ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010203:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001020d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010211:	05 78 01 00 00       	add    eax,0x178
c0010216:	83 ec 0c             	sub    esp,0xc
c0010219:	50                   	push   eax
c001021a:	e8 3d 71 ff ff       	call   c000735c <GDT::GDT()>
c001021f:	83 c4 10             	add    esp,0x10
c0010222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010226:	05 7c 09 00 00       	add    eax,0x97c
c001022b:	83 ec 0c             	sub    esp,0xc
c001022e:	50                   	push   eax
c001022f:	e8 78 73 ff ff       	call   c00075ac <IDT::IDT()>
c0010234:	83 c4 10             	add    esp,0x10
c0010237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001023b:	05 7c 11 00 00       	add    eax,0x117c
c0010240:	83 ec 0c             	sub    esp,0xc
c0010243:	50                   	push   eax
c0010244:	e8 fb 8c ff ff       	call   c0008f44 <TSS::TSS()>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010250:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010265:	90                   	nop
c0010266:	83 c4 0c             	add    esp,0xc
c0010269:	c3                   	ret    

c001026a <CPU::displayFeatures()>:
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <CPU::detectFeatures()>:
c001026c:	55                   	push   ebp
c001026d:	57                   	push   edi
c001026e:	56                   	push   esi
c001026f:	53                   	push   ebx
c0010270:	83 ec 30             	sub    esp,0x30
c0010273:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010277:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010281:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010288:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001028e:	6a 0d                	push   0xd
c0010290:	6a 00                	push   0x0
c0010292:	55                   	push   ebp
c0010293:	e8 58 02 ff ff       	call   c00004f0 <memset>
c0010298:	83 c4 10             	add    esp,0x10
c001029b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00102a0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00102a7:	0f 84 db 05 00 00    	je     c0010888 <CPU::detectFeatures()+0x61c>
c00102ad:	83 ec 0c             	sub    esp,0xc
c00102b0:	89 ef                	mov    edi,ebp
c00102b2:	6a 10                	push   0x10
c00102b4:	e8 6b fe ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c00102b9:	83 e0 01             	and    eax,0x1
c00102bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00102bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102c5:	83 e0 fd             	and    eax,0xfffffffd
c00102c8:	09 d0                	or     eax,edx
c00102ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102d0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00102d7:	e8 48 fe ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c00102dc:	83 e0 01             	and    eax,0x1
c00102df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00102e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102ec:	83 e0 fb             	and    eax,0xfffffffb
c00102ef:	09 d0                	or     eax,edx
c00102f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102f7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00102fe:	e8 21 fe ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0010303:	83 e0 01             	and    eax,0x1
c0010306:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001030d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010313:	83 e0 f7             	and    eax,0xfffffff7
c0010316:	09 d0                	or     eax,edx
c0010318:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001031e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010325:	e8 fa fd ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c001032a:	83 e0 01             	and    eax,0x1
c001032d:	c1 e0 04             	shl    eax,0x4
c0010330:	89 c2                	mov    edx,eax
c0010332:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010338:	83 e0 ef             	and    eax,0xffffffef
c001033b:	09 d0                	or     eax,edx
c001033d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010343:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001034a:	e8 d5 fd ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c001034f:	83 e0 01             	and    eax,0x1
c0010352:	c1 e0 05             	shl    eax,0x5
c0010355:	89 c2                	mov    edx,eax
c0010357:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001035d:	83 e0 df             	and    eax,0xffffffdf
c0010360:	09 d0                	or     eax,edx
c0010362:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010368:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001036f:	e8 b0 fd ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0010374:	83 e0 01             	and    eax,0x1
c0010377:	8d 14 00             	lea    edx,[eax+eax*1]
c001037a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010380:	83 e0 fd             	and    eax,0xfffffffd
c0010383:	09 d0                	or     eax,edx
c0010385:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001038b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010392:	e8 8d fd ff ff       	call   c0010124 <CPU::cpuidCheckEDX(unsigned int)>
c0010397:	83 e0 01             	and    eax,0x1
c001039a:	c1 e0 06             	shl    eax,0x6
c001039d:	89 c2                	mov    edx,eax
c001039f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00103a5:	83 e0 bf             	and    eax,0xffffffbf
c00103a8:	09 d0                	or     eax,edx
c00103aa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00103b0:	58                   	pop    eax
c00103b1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00103b5:	50                   	push   eax
c00103b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00103ba:	50                   	push   eax
c00103bb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00103bf:	56                   	push   esi
c00103c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00103c4:	50                   	push   eax
c00103c5:	6a 00                	push   0x0
c00103c7:	e8 d4 fc ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103cc:	b8 04 00 00 00       	mov    eax,0x4
c00103d1:	89 c1                	mov    ecx,eax
c00103d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103d5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00103db:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00103df:	89 c1                	mov    ecx,eax
c00103e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103e3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00103e9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00103ed:	89 c1                	mov    ecx,eax
c00103ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103f1:	83 c4 18             	add    esp,0x18
c00103f4:	68 88 1c 02 c0       	push   0xc0021c88
c00103f9:	55                   	push   ebp
c00103fa:	e8 51 03 ff ff       	call   c0000750 <strcmp>
c00103ff:	83 c4 10             	add    esp,0x10
c0010402:	85 c0                	test   eax,eax
c0010404:	75 0f                	jne    c0010415 <CPU::detectFeatures()+0x1a9>
c0010406:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010410:	e9 22 02 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c0010415:	50                   	push   eax
c0010416:	50                   	push   eax
c0010417:	68 95 1c 02 c0       	push   0xc0021c95
c001041c:	55                   	push   ebp
c001041d:	e8 2e 03 ff ff       	call   c0000750 <strcmp>
c0010422:	83 c4 10             	add    esp,0x10
c0010425:	85 c0                	test   eax,eax
c0010427:	74 dd                	je     c0010406 <CPU::detectFeatures()+0x19a>
c0010429:	50                   	push   eax
c001042a:	50                   	push   eax
c001042b:	68 a2 1c 02 c0       	push   0xc0021ca2
c0010430:	55                   	push   ebp
c0010431:	e8 1a 03 ff ff       	call   c0000750 <strcmp>
c0010436:	83 c4 10             	add    esp,0x10
c0010439:	85 c0                	test   eax,eax
c001043b:	74 2a                	je     c0010467 <CPU::detectFeatures()+0x1fb>
c001043d:	50                   	push   eax
c001043e:	50                   	push   eax
c001043f:	68 af 1c 02 c0       	push   0xc0021caf
c0010444:	55                   	push   ebp
c0010445:	e8 06 03 ff ff       	call   c0000750 <strcmp>
c001044a:	83 c4 10             	add    esp,0x10
c001044d:	85 c0                	test   eax,eax
c001044f:	74 16                	je     c0010467 <CPU::detectFeatures()+0x1fb>
c0010451:	50                   	push   eax
c0010452:	50                   	push   eax
c0010453:	68 bc 1c 02 c0       	push   0xc0021cbc
c0010458:	55                   	push   ebp
c0010459:	e8 f2 02 ff ff       	call   c0000750 <strcmp>
c001045e:	83 c4 10             	add    esp,0x10
c0010461:	85 c0                	test   eax,eax
c0010463:	74 48                	je     c00104ad <CPU::detectFeatures()+0x241>
c0010465:	eb 0f                	jmp    c0010476 <CPU::detectFeatures()+0x20a>
c0010467:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010471:	e9 c1 01 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c0010476:	50                   	push   eax
c0010477:	50                   	push   eax
c0010478:	68 c9 1c 02 c0       	push   0xc0021cc9
c001047d:	55                   	push   ebp
c001047e:	e8 cd 02 ff ff       	call   c0000750 <strcmp>
c0010483:	83 c4 10             	add    esp,0x10
c0010486:	85 c0                	test   eax,eax
c0010488:	74 23                	je     c00104ad <CPU::detectFeatures()+0x241>
c001048a:	57                   	push   edi
c001048b:	57                   	push   edi
c001048c:	68 d6 1c 02 c0       	push   0xc0021cd6
c0010491:	55                   	push   ebp
c0010492:	e8 b9 02 ff ff       	call   c0000750 <strcmp>
c0010497:	83 c4 10             	add    esp,0x10
c001049a:	85 c0                	test   eax,eax
c001049c:	75 1e                	jne    c00104bc <CPU::detectFeatures()+0x250>
c001049e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00104a8:	e9 8a 01 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c00104ad:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00104b7:	e9 7b 01 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c00104bc:	56                   	push   esi
c00104bd:	56                   	push   esi
c00104be:	68 e3 1c 02 c0       	push   0xc0021ce3
c00104c3:	55                   	push   ebp
c00104c4:	e8 87 02 ff ff       	call   c0000750 <strcmp>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	85 c0                	test   eax,eax
c00104ce:	75 0f                	jne    c00104df <CPU::detectFeatures()+0x273>
c00104d0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00104da:	e9 58 01 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c00104df:	51                   	push   ecx
c00104e0:	51                   	push   ecx
c00104e1:	68 a2 1c 02 c0       	push   0xc0021ca2
c00104e6:	55                   	push   ebp
c00104e7:	e8 64 02 ff ff       	call   c0000750 <strcmp>
c00104ec:	83 c4 10             	add    esp,0x10
c00104ef:	85 c0                	test   eax,eax
c00104f1:	75 0f                	jne    c0010502 <CPU::detectFeatures()+0x296>
c00104f3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00104fd:	e9 35 01 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c0010502:	52                   	push   edx
c0010503:	52                   	push   edx
c0010504:	68 f0 1c 02 c0       	push   0xc0021cf0
c0010509:	55                   	push   ebp
c001050a:	e8 41 02 ff ff       	call   c0000750 <strcmp>
c001050f:	83 c4 10             	add    esp,0x10
c0010512:	85 c0                	test   eax,eax
c0010514:	75 0f                	jne    c0010525 <CPU::detectFeatures()+0x2b9>
c0010516:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010520:	e9 12 01 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c0010525:	50                   	push   eax
c0010526:	50                   	push   eax
c0010527:	68 fd 1c 02 c0       	push   0xc0021cfd
c001052c:	55                   	push   ebp
c001052d:	e8 1e 02 ff ff       	call   c0000750 <strcmp>
c0010532:	83 c4 10             	add    esp,0x10
c0010535:	85 c0                	test   eax,eax
c0010537:	75 0f                	jne    c0010548 <CPU::detectFeatures()+0x2dc>
c0010539:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010543:	e9 ef 00 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c0010548:	50                   	push   eax
c0010549:	50                   	push   eax
c001054a:	68 0a 1d 02 c0       	push   0xc0021d0a
c001054f:	55                   	push   ebp
c0010550:	e8 fb 01 ff ff       	call   c0000750 <strcmp>
c0010555:	83 c4 10             	add    esp,0x10
c0010558:	85 c0                	test   eax,eax
c001055a:	75 0f                	jne    c001056b <CPU::detectFeatures()+0x2ff>
c001055c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010566:	e9 cc 00 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c001056b:	50                   	push   eax
c001056c:	50                   	push   eax
c001056d:	68 17 1d 02 c0       	push   0xc0021d17
c0010572:	55                   	push   ebp
c0010573:	e8 d8 01 ff ff       	call   c0000750 <strcmp>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	85 c0                	test   eax,eax
c001057d:	75 0f                	jne    c001058e <CPU::detectFeatures()+0x322>
c001057f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010589:	e9 a9 00 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c001058e:	50                   	push   eax
c001058f:	50                   	push   eax
c0010590:	68 24 1d 02 c0       	push   0xc0021d24
c0010595:	55                   	push   ebp
c0010596:	e8 b5 01 ff ff       	call   c0000750 <strcmp>
c001059b:	83 c4 10             	add    esp,0x10
c001059e:	85 c0                	test   eax,eax
c00105a0:	75 0f                	jne    c00105b1 <CPU::detectFeatures()+0x345>
c00105a2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00105ac:	e9 86 00 00 00       	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c00105b1:	50                   	push   eax
c00105b2:	50                   	push   eax
c00105b3:	68 31 1d 02 c0       	push   0xc0021d31
c00105b8:	55                   	push   ebp
c00105b9:	e8 92 01 ff ff       	call   c0000750 <strcmp>
c00105be:	83 c4 10             	add    esp,0x10
c00105c1:	85 c0                	test   eax,eax
c00105c3:	75 0c                	jne    c00105d1 <CPU::detectFeatures()+0x365>
c00105c5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00105cf:	eb 66                	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c00105d1:	50                   	push   eax
c00105d2:	50                   	push   eax
c00105d3:	68 3e 1d 02 c0       	push   0xc0021d3e
c00105d8:	55                   	push   ebp
c00105d9:	e8 72 01 ff ff       	call   c0000750 <strcmp>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	85 c0                	test   eax,eax
c00105e3:	75 0c                	jne    c00105f1 <CPU::detectFeatures()+0x385>
c00105e5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00105ef:	eb 46                	jmp    c0010637 <CPU::detectFeatures()+0x3cb>
c00105f1:	57                   	push   edi
c00105f2:	57                   	push   edi
c00105f3:	68 4b 1d 02 c0       	push   0xc0021d4b
c00105f8:	55                   	push   ebp
c00105f9:	e8 52 01 ff ff       	call   c0000750 <strcmp>
c00105fe:	83 c4 10             	add    esp,0x10
c0010601:	85 c0                	test   eax,eax
c0010603:	74 e0                	je     c00105e5 <CPU::detectFeatures()+0x379>
c0010605:	56                   	push   esi
c0010606:	56                   	push   esi
c0010607:	68 58 1d 02 c0       	push   0xc0021d58
c001060c:	55                   	push   ebp
c001060d:	e8 3e 01 ff ff       	call   c0000750 <strcmp>
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	85 c0                	test   eax,eax
c0010617:	74 cc                	je     c00105e5 <CPU::detectFeatures()+0x379>
c0010619:	51                   	push   ecx
c001061a:	51                   	push   ecx
c001061b:	68 65 1d 02 c0       	push   0xc0021d65
c0010620:	55                   	push   ebp
c0010621:	e8 2a 01 ff ff       	call   c0000750 <strcmp>
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	85 c0                	test   eax,eax
c001062b:	74 b8                	je     c00105e5 <CPU::detectFeatures()+0x379>
c001062d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010637:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001063c:	0f 86 be 00 00 00    	jbe    c0010700 <CPU::detectFeatures()+0x494>
c0010642:	83 ec 0c             	sub    esp,0xc
c0010645:	68 80 00 00 00       	push   0x80
c001064a:	e8 31 fb ff ff       	call   c0010180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001064f:	83 e0 01             	and    eax,0x1
c0010652:	c1 e0 06             	shl    eax,0x6
c0010655:	89 c2                	mov    edx,eax
c0010657:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001065d:	83 e0 bf             	and    eax,0xffffffbf
c0010660:	09 d0                	or     eax,edx
c0010662:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010668:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001066f:	e8 0c fb ff ff       	call   c0010180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010674:	83 e0 01             	and    eax,0x1
c0010677:	c1 e0 04             	shl    eax,0x4
c001067a:	89 c2                	mov    edx,eax
c001067c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010682:	83 e0 ef             	and    eax,0xffffffef
c0010685:	09 d0                	or     eax,edx
c0010687:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001068d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010694:	e8 e7 fa ff ff       	call   c0010180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010699:	89 c2                	mov    edx,eax
c001069b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00106a1:	c1 e2 07             	shl    edx,0x7
c00106a4:	83 e0 7f             	and    eax,0x7f
c00106a7:	09 d0                	or     eax,edx
c00106a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00106af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00106b6:	e8 f3 fa ff ff       	call   c00101ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c00106bb:	83 e0 01             	and    eax,0x1
c00106be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00106c5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106cb:	83 e0 f7             	and    eax,0xfffffff7
c00106ce:	09 d0                	or     eax,edx
c00106d0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106d6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00106dd:	e8 cc fa ff ff       	call   c00101ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	83 e0 01             	and    eax,0x1
c00106e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00106ef:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106f5:	83 e0 fb             	and    eax,0xfffffffb
c00106f8:	09 d0                	or     eax,edx
c00106fa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010707:	50                   	push   eax
c0010708:	8d 44 24 28          	lea    eax,[esp+0x28]
c001070c:	50                   	push   eax
c001070d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010711:	57                   	push   edi
c0010712:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010716:	56                   	push   esi
c0010717:	6a 01                	push   0x1
c0010719:	e8 82 f9 ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001071e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010722:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010728:	89 c1                	mov    ecx,eax
c001072a:	83 e2 f0             	and    edx,0xfffffff0
c001072d:	83 e1 0f             	and    ecx,0xf
c0010730:	09 ca                	or     edx,ecx
c0010732:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010738:	89 c2                	mov    edx,eax
c001073a:	c1 ea 04             	shr    edx,0x4
c001073d:	83 e2 0f             	and    edx,0xf
c0010740:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010744:	89 d1                	mov    ecx,edx
c0010746:	83 c4 20             	add    esp,0x20
c0010749:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001074f:	c1 e1 06             	shl    ecx,0x6
c0010752:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010758:	09 ca                	or     edx,ecx
c001075a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010761:	89 c2                	mov    edx,eax
c0010763:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010769:	c1 ea 08             	shr    edx,0x8
c001076c:	83 e1 3f             	and    ecx,0x3f
c001076f:	83 e2 0f             	and    edx,0xf
c0010772:	89 d5                	mov    ebp,edx
c0010774:	83 e5 03             	and    ebp,0x3
c0010777:	c1 e5 06             	shl    ebp,0x6
c001077a:	09 e9                	or     ecx,ebp
c001077c:	89 d5                	mov    ebp,edx
c001077e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010784:	c1 ed 02             	shr    ebp,0x2
c0010787:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001078d:	83 e1 c0             	and    ecx,0xffffffc0
c0010790:	09 e9                	or     ecx,ebp
c0010792:	89 c5                	mov    ebp,eax
c0010794:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001079a:	c1 ed 08             	shr    ebp,0x8
c001079d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00107a3:	83 e5 30             	and    ebp,0x30
c00107a6:	83 e1 cf             	and    ecx,0xffffffcf
c00107a9:	09 e9                	or     ecx,ebp
c00107ab:	83 fa 06             	cmp    edx,0x6
c00107ae:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00107b4:	74 05                	je     c00107bb <CPU::detectFeatures()+0x54f>
c00107b6:	83 fa 0f             	cmp    edx,0xf
c00107b9:	75 64                	jne    c001081f <CPU::detectFeatures()+0x5b3>
c00107bb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00107c1:	89 c1                	mov    ecx,eax
c00107c3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00107c9:	c1 e9 10             	shr    ecx,0x10
c00107cc:	c1 e1 04             	shl    ecx,0x4
c00107cf:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00107d3:	0f b6 c9             	movzx  ecx,cl
c00107d6:	c1 e1 06             	shl    ecx,0x6
c00107d9:	09 e9                	or     ecx,ebp
c00107db:	83 fa 0f             	cmp    edx,0xf
c00107de:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00107e5:	75 38                	jne    c001081f <CPU::detectFeatures()+0x5b3>
c00107e7:	c1 e8 14             	shr    eax,0x14
c00107ea:	83 c0 0f             	add    eax,0xf
c00107ed:	0f b6 c0             	movzx  eax,al
c00107f0:	89 c2                	mov    edx,eax
c00107f2:	c1 e8 02             	shr    eax,0x2
c00107f5:	83 e2 03             	and    edx,0x3
c00107f8:	89 d1                	mov    ecx,edx
c00107fa:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010800:	c1 e1 06             	shl    ecx,0x6
c0010803:	83 e2 3f             	and    edx,0x3f
c0010806:	09 ca                	or     edx,ecx
c0010808:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001080e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010814:	83 e2 c0             	and    edx,0xffffffc0
c0010817:	09 d0                	or     eax,edx
c0010819:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001081f:	83 ec 0c             	sub    esp,0xc
c0010822:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010828:	83 c8 07             	or     eax,0x7
c001082b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010831:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010835:	50                   	push   eax
c0010836:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001083a:	55                   	push   ebp
c001083b:	57                   	push   edi
c001083c:	56                   	push   esi
c001083d:	68 00 00 00 80       	push   0x80000000
c0010842:	e8 59 f8 ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010847:	83 c4 20             	add    esp,0x20
c001084a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010852:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010856:	76 1e                	jbe    c0010876 <CPU::detectFeatures()+0x60a>
c0010858:	83 ec 0c             	sub    esp,0xc
c001085b:	50                   	push   eax
c001085c:	55                   	push   ebp
c001085d:	57                   	push   edi
c001085e:	56                   	push   esi
c001085f:	68 01 00 00 80       	push   0x80000001
c0010864:	e8 37 f8 ff ff       	call   c00100a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010869:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010873:	83 c4 20             	add    esp,0x20
c0010876:	52                   	push   edx
c0010877:	52                   	push   edx
c0010878:	68 71 1d 02 c0       	push   0xc0021d71
c001087d:	53                   	push   ebx
c001087e:	e8 99 c0 ff ff       	call   c000c91c <Device::setName(char const*)>
c0010883:	83 c4 10             	add    esp,0x10
c0010886:	eb 69                	jmp    c00108f1 <CPU::detectFeatures()+0x685>
c0010888:	50                   	push   eax
c0010889:	50                   	push   eax
c001088a:	68 d6 1c 02 c0       	push   0xc0021cd6
c001088f:	55                   	push   ebp
c0010890:	e8 ab fd fe ff       	call   c0000640 <strcpy>
c0010895:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001089f:	e8 1f f9 fe ff       	call   c00001c3 <is486>
c00108a4:	83 c4 10             	add    esp,0x10
c00108a7:	85 c0                	test   eax,eax
c00108a9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108af:	74 1f                	je     c00108d0 <CPU::detectFeatures()+0x664>
c00108b1:	83 c8 07             	or     eax,0x7
c00108b4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108ba:	0f 20 c0             	mov    eax,cr0
c00108bd:	83 e0 14             	and    eax,0x14
c00108c0:	83 f8 04             	cmp    eax,0x4
c00108c3:	75 10                	jne    c00108d5 <CPU::detectFeatures()+0x669>
c00108c5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108cb:	83 e0 fd             	and    eax,0xfffffffd
c00108ce:	eb 1b                	jmp    c00108eb <CPU::detectFeatures()+0x67f>
c00108d0:	83 e0 f8             	and    eax,0xfffffff8
c00108d3:	eb df                	jmp    c00108b4 <CPU::detectFeatures()+0x648>
c00108d5:	e8 c4 f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108da:	83 e0 01             	and    eax,0x1
c00108dd:	8d 14 00             	lea    edx,[eax+eax*1]
c00108e0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108e6:	83 e0 fd             	and    eax,0xfffffffd
c00108e9:	09 d0                	or     eax,edx
c00108eb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108f1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00108f8:	74 17                	je     c0010911 <CPU::detectFeatures()+0x6a5>
c00108fa:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010900:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010906:	83 c8 10             	or     eax,0x10
c0010909:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001090f:	eb 20                	jmp    c0010931 <CPU::detectFeatures()+0x6c5>
c0010911:	e8 88 f8 fe ff       	call   c000019e <hasLegacyFPU>
c0010916:	83 e0 01             	and    eax,0x1
c0010919:	8d 14 00             	lea    edx,[eax+eax*1]
c001091c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010922:	83 e0 fd             	and    eax,0xfffffffd
c0010925:	09 d0                	or     eax,edx
c0010927:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001092d:	a8 02                	test   al,0x2
c001092f:	75 c9                	jne    c00108fa <CPU::detectFeatures()+0x68e>
c0010931:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010938:	83 c4 2c             	add    esp,0x2c
c001093b:	5b                   	pop    ebx
c001093c:	5e                   	pop    esi
c001093d:	5f                   	pop    edi
c001093e:	5d                   	pop    ebp
c001093f:	c3                   	ret    

c0010940 <CPU::setupSMEP()>:
c0010940:	0f 20 e0             	mov    eax,cr4
c0010943:	0d 00 00 10 00       	or     eax,0x100000
c0010948:	0f 22 e0             	mov    cr4,eax
c001094b:	c3                   	ret    

c001094c <CPU::setupUMIP()>:
c001094c:	0f 20 e0             	mov    eax,cr4
c001094f:	80 cc 08             	or     ah,0x8
c0010952:	0f 22 e0             	mov    cr4,eax
c0010955:	c3                   	ret    

c0010956 <CPU::setupTSC()>:
c0010956:	0f 20 e0             	mov    eax,cr4
c0010959:	83 c8 04             	or     eax,0x4
c001095c:	0f 22 e0             	mov    cr4,eax
c001095f:	c3                   	ret    

c0010960 <CPU::setupLargePages()>:
c0010960:	0f 20 e0             	mov    eax,cr4
c0010963:	83 c8 10             	or     eax,0x10
c0010966:	0f 22 e0             	mov    cr4,eax
c0010969:	c3                   	ret    

c001096a <CPU::setupPAT()>:
c001096a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001096f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010976:	74 2c                	je     c00109a4 <CPU::setupPAT()+0x3a>
c0010978:	53                   	push   ebx
c0010979:	83 ec 10             	sub    esp,0x10
c001097c:	68 77 02 00 00       	push   0x277
c0010981:	50                   	push   eax
c0010982:	e8 39 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010987:	83 e2 f8             	and    edx,0xfffffff8
c001098a:	83 ca 01             	or     edx,0x1
c001098d:	52                   	push   edx
c001098e:	50                   	push   eax
c001098f:	68 77 02 00 00       	push   0x277
c0010994:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001099a:	e8 4d 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001099f:	83 c4 28             	add    esp,0x28
c00109a2:	5b                   	pop    ebx
c00109a3:	c3                   	ret    
c00109a4:	c3                   	ret    
c00109a5:	90                   	nop

c00109a6 <CPU::setupMTRR()>:
c00109a6:	c3                   	ret    
c00109a7:	90                   	nop

c00109a8 <CPU::setupGlobalPages()>:
c00109a8:	0f 20 e0             	mov    eax,cr4
c00109ab:	0c 80                	or     al,0x80
c00109ad:	0f 22 e0             	mov    cr4,eax
c00109b0:	c3                   	ret    
c00109b1:	90                   	nop

c00109b2 <CPU::allowUsermodeDataAccess()>:
c00109b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109b6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00109bd:	74 03                	je     c00109c2 <CPU::allowUsermodeDataAccess()+0x10>
c00109bf:	0f 01 cb             	stac   
c00109c2:	c3                   	ret    
c00109c3:	90                   	nop

c00109c4 <CPU::prohibitUsermodeDataAccess()>:
c00109c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00109cf:	74 03                	je     c00109d4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00109d1:	0f 01 ca             	clac   
c00109d4:	c3                   	ret    
c00109d5:	90                   	nop

c00109d6 <CPU::setupSMAP()>:
c00109d6:	0f 20 e0             	mov    eax,cr4
c00109d9:	0d 00 00 20 00       	or     eax,0x200000
c00109de:	0f 22 e0             	mov    cr4,eax
c00109e1:	eb e1                	jmp    c00109c4 <CPU::prohibitUsermodeDataAccess()>
c00109e3:	90                   	nop

c00109e4 <CPU::setupFeatures()>:
c00109e4:	53                   	push   ebx
c00109e5:	83 ec 08             	sub    esp,0x8
c00109e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109ec:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00109f3:	74 18                	je     c0010a0d <CPU::setupFeatures()+0x29>
c00109f5:	83 ec 0c             	sub    esp,0xc
c00109f8:	68 7d 1d 02 c0       	push   0xc0021d7d
c00109fd:	e8 43 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a05:	e8 42 ff ff ff       	call   c001094c <CPU::setupUMIP()>
c0010a0a:	83 c4 10             	add    esp,0x10
c0010a0d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010a14:	74 18                	je     c0010a2e <CPU::setupFeatures()+0x4a>
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	68 87 1d 02 c0       	push   0xc0021d87
c0010a1e:	e8 22 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a26:	e8 2b ff ff ff       	call   c0010956 <CPU::setupTSC()>
c0010a2b:	83 c4 10             	add    esp,0x10
c0010a2e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010a35:	74 18                	je     c0010a4f <CPU::setupFeatures()+0x6b>
c0010a37:	83 ec 0c             	sub    esp,0xc
c0010a3a:	68 90 1d 02 c0       	push   0xc0021d90
c0010a3f:	e8 01 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a47:	e8 14 ff ff ff       	call   c0010960 <CPU::setupLargePages()>
c0010a4c:	83 c4 10             	add    esp,0x10
c0010a4f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010a56:	74 18                	je     c0010a70 <CPU::setupFeatures()+0x8c>
c0010a58:	83 ec 0c             	sub    esp,0xc
c0010a5b:	68 99 1d 02 c0       	push   0xc0021d99
c0010a60:	e8 e0 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a68:	e8 3b ff ff ff       	call   c00109a8 <CPU::setupGlobalPages()>
c0010a6d:	83 c4 10             	add    esp,0x10
c0010a70:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010a77:	74 18                	je     c0010a91 <CPU::setupFeatures()+0xad>
c0010a79:	83 ec 0c             	sub    esp,0xc
c0010a7c:	68 ab 1d 02 c0       	push   0xc0021dab
c0010a81:	e8 bf 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a89:	e8 dc fe ff ff       	call   c001096a <CPU::setupPAT()>
c0010a8e:	83 c4 10             	add    esp,0x10
c0010a91:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a98:	74 11                	je     c0010aab <CPU::setupFeatures()+0xc7>
c0010a9a:	c7 44 24 10 b4 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021db4
c0010aa2:	83 c4 08             	add    esp,0x8
c0010aa5:	5b                   	pop    ebx
c0010aa6:	e9 9a 9e ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010aab:	83 c4 08             	add    esp,0x8
c0010aae:	5b                   	pop    ebx
c0010aaf:	c3                   	ret    

c0010ab0 <CPU::open(int, int, void*)>:
c0010ab0:	55                   	push   ebp
c0010ab1:	57                   	push   edi
c0010ab2:	56                   	push   esi
c0010ab3:	53                   	push   ebx
c0010ab4:	83 ec 18             	sub    esp,0x18
c0010ab7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010abb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010abf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010ac3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010ac9:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010acf:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010ad5:	50                   	push   eax
c0010ad6:	e8 e3 68 ff ff       	call   c00073be <GDT::setup()>
c0010adb:	83 c4 0c             	add    esp,0xc
c0010ade:	6a 00                	push   0x0
c0010ae0:	68 ef be ad de       	push   0xdeadbeef
c0010ae5:	55                   	push   ebp
c0010ae6:	e8 9d 84 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010aeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010aee:	e8 75 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010af3:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010af9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afc:	e8 21 6b ff ff       	call   c0007622 <IDT::setup()>
c0010b01:	b8 00 04 00 00       	mov    eax,0x400
c0010b06:	0f 23 f8             	mov    db7,eax
c0010b09:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010b13:	e8 a7 72 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010b21:	85 f6                	test   esi,esi
c0010b23:	89 38                	mov    DWORD PTR [eax],edi
c0010b25:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010b2b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010b2e:	74 10                	je     c0010b40 <CPU::open(int, int, void*)+0x90>
c0010b30:	50                   	push   eax
c0010b31:	50                   	push   eax
c0010b32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010b38:	56                   	push   esi
c0010b39:	e8 70 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010b3e:	eb 0d                	jmp    c0010b4d <CPU::open(int, int, void*)+0x9d>
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	68 be 1d 02 c0       	push   0xc0021dbe
c0010b48:	e8 74 08 00 00       	call   c00113c1 <KePanic(char const*)>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	68 cc 1d 02 c0       	push   0xc0021dcc
c0010b58:	e8 8e 01 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0010b5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b60:	e8 07 f7 ff ff       	call   c001026c <CPU::detectFeatures()>
c0010b65:	c7 04 24 ef 1d 02 c0 	mov    DWORD PTR [esp],0xc0021def
c0010b6c:	e8 7a 01 00 00       	call   c0010ceb <KeSetBootMessage(char const*)>
c0010b71:	e8 df 71 00 00       	call   c0017d55 <HalInitialise()>
c0010b76:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010b7b:	83 e0 10             	and    eax,0x10
c0010b7e:	83 f8 01             	cmp    eax,0x1
c0010b81:	19 c0                	sbb    eax,eax
c0010b83:	83 e0 46             	and    eax,0x46
c0010b86:	83 c0 1e             	add    eax,0x1e
c0010b89:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b8c:	e8 28 d6 ff ff       	call   c000e1b9 <setupTimer(int)>
c0010b91:	83 c4 10             	add    esp,0x10
c0010b94:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b9a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010ba1:	74 0c                	je     c0010baf <CPU::open(int, int, void*)+0xff>
c0010ba3:	83 ec 0c             	sub    esp,0xc
c0010ba6:	53                   	push   ebx
c0010ba7:	e8 38 fe ff ff       	call   c00109e4 <CPU::setupFeatures()>
c0010bac:	83 c4 10             	add    esp,0x10
c0010baf:	83 c4 0c             	add    esp,0xc
c0010bb2:	31 c0                	xor    eax,eax
c0010bb4:	5b                   	pop    ebx
c0010bb5:	5e                   	pop    esi
c0010bb6:	5f                   	pop    edi
c0010bb7:	5d                   	pop    ebp
c0010bb8:	c3                   	ret    

c0010bb9 <KeInitialiseAtexit()>:
c0010bb9:	83 ec 10             	sub    esp,0x10
c0010bbc:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010bc6:	6a 60                	push   0x60
c0010bc8:	6a 00                	push   0x0
c0010bca:	68 20 8e 02 c0       	push   0xc0028e20
c0010bcf:	e8 1c f9 fe ff       	call   c00004f0 <memset>
c0010bd4:	83 c4 1c             	add    esp,0x1c
c0010bd7:	c3                   	ret    

c0010bd8 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010bd8:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010bdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010be1:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010be8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bec:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010bf3:	40                   	inc    eax
c0010bf4:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010bf9:	83 f8 17             	cmp    eax,0x17
c0010bfc:	7e 0d                	jle    c0010c0b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010bfe:	c7 44 24 04 30 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e30
c0010c06:	e9 b6 07 00 00       	jmp    c00113c1 <KePanic(char const*)>
c0010c0b:	c3                   	ret    

c0010c0c <KeExecuteAtexit()>:
c0010c0c:	53                   	push   ebx
c0010c0d:	31 db                	xor    ebx,ebx
c0010c0f:	83 ec 08             	sub    esp,0x8
c0010c12:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010c18:	7e 50                	jle    c0010c6a <KeExecuteAtexit()+0x5e>
c0010c1a:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010c21:	85 c0                	test   eax,eax
c0010c23:	74 42                	je     c0010c67 <KeExecuteAtexit()+0x5b>
c0010c25:	51                   	push   ecx
c0010c26:	50                   	push   eax
c0010c27:	53                   	push   ebx
c0010c28:	68 49 1e 02 c0       	push   0xc0021e49
c0010c2d:	e8 13 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c32:	58                   	pop    eax
c0010c33:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010c3a:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010c41:	c7 04 24 6b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e6b
c0010c48:	e8 f8 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c4d:	c7 04 24 cb 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fcb
c0010c54:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010c5f:	e8 e1 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	43                   	inc    ebx
c0010c68:	eb a8                	jmp    c0010c12 <KeExecuteAtexit()+0x6>
c0010c6a:	83 c4 08             	add    esp,0x8
c0010c6d:	5b                   	pop    ebx
c0010c6e:	c3                   	ret    

c0010c6f <KeDisplaySplashScreen()>:
c0010c6f:	55                   	push   ebp
c0010c70:	bd 05 00 00 00       	mov    ebp,0x5
c0010c75:	57                   	push   edi
c0010c76:	bf 0a 00 00 00       	mov    edi,0xa
c0010c7b:	56                   	push   esi
c0010c7c:	31 f6                	xor    esi,esi
c0010c7e:	53                   	push   ebx
c0010c7f:	31 db                	xor    ebx,ebx
c0010c81:	83 ec 0c             	sub    esp,0xc
c0010c84:	0f b6 96 20 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcde0]
c0010c8b:	89 d0                	mov    eax,edx
c0010c8d:	85 d2                	test   edx,edx
c0010c8f:	74 52                	je     c0010ce3 <KeDisplaySplashScreen()+0x74>
c0010c91:	80 bb 56 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcdaa],0xdb
c0010c98:	75 13                	jne    c0010cad <KeDisplaySplashScreen()+0x3e>
c0010c9a:	0f b6 8b 55 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcdab]
c0010ca1:	83 e1 fe             	and    ecx,0xfffffffe
c0010ca4:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010caa:	75 01                	jne    c0010cad <KeDisplaySplashScreen()+0x3e>
c0010cac:	47                   	inc    edi
c0010cad:	83 fa 0d             	cmp    edx,0xd
c0010cb0:	74 28                	je     c0010cda <KeDisplaySplashScreen()+0x6b>
c0010cb2:	83 fa 0a             	cmp    edx,0xa
c0010cb5:	75 0a                	jne    c0010cc1 <KeDisplaySplashScreen()+0x52>
c0010cb7:	45                   	inc    ebp
c0010cb8:	bf 0a 00 00 00       	mov    edi,0xa
c0010cbd:	31 db                	xor    ebx,ebx
c0010cbf:	eb 19                	jmp    c0010cda <KeDisplaySplashScreen()+0x6b>
c0010cc1:	83 ec 0c             	sub    esp,0xc
c0010cc4:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010cc7:	55                   	push   ebp
c0010cc8:	0f be c0             	movsx  eax,al
c0010ccb:	52                   	push   edx
c0010ccc:	43                   	inc    ebx
c0010ccd:	6a 00                	push   0x0
c0010ccf:	6a 0e                	push   0xe
c0010cd1:	50                   	push   eax
c0010cd2:	e8 fd 7c 00 00       	call   c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010cd7:	83 c4 20             	add    esp,0x20
c0010cda:	46                   	inc    esi
c0010cdb:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010ce1:	75 a1                	jne    c0010c84 <KeDisplaySplashScreen()+0x15>
c0010ce3:	83 c4 0c             	add    esp,0xc
c0010ce6:	5b                   	pop    ebx
c0010ce7:	5e                   	pop    esi
c0010ce8:	5f                   	pop    edi
c0010ce9:	5d                   	pop    ebp
c0010cea:	c3                   	ret    

c0010ceb <KeSetBootMessage(char const*)>:
c0010ceb:	57                   	push   edi
c0010cec:	56                   	push   esi
c0010ced:	53                   	push   ebx
c0010cee:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010cf4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010cfb:	68 9e 00 00 00       	push   0x9e
c0010d00:	6a 00                	push   0x0
c0010d02:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010d06:	56                   	push   esi
c0010d07:	e8 e4 f7 fe ff       	call   c00004f0 <memset>
c0010d0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d0f:	e8 5c f8 fe ff       	call   c0000570 <strlen>
c0010d14:	ba 50 00 00 00       	mov    edx,0x50
c0010d19:	83 c4 10             	add    esp,0x10
c0010d1c:	29 c2                	sub    edx,eax
c0010d1e:	31 c9                	xor    ecx,ecx
c0010d20:	83 e2 fe             	and    edx,0xfffffffe
c0010d23:	01 f2                	add    edx,esi
c0010d25:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010d2a:	84 c0                	test   al,al
c0010d2c:	74 0a                	je     c0010d38 <KeSetBootMessage(char const*)+0x4d>
c0010d2e:	80 cc 0f             	or     ah,0xf
c0010d31:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010d35:	41                   	inc    ecx
c0010d36:	eb ed                	jmp    c0010d25 <KeSetBootMessage(char const*)+0x3a>
c0010d38:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010d3d:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010d42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d44:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010d4a:	5b                   	pop    ebx
c0010d4b:	5e                   	pop    esi
c0010d4c:	5f                   	pop    edi
c0010d4d:	c3                   	ret    
c0010d4e:	66 90                	xchg   ax,ax

c0010d50 <Krnl::handlePowerButton()>:
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	e8 c4 06 00 00       	call   c001141c <KeHandlePowerButton()>
c0010d58:	90                   	nop
c0010d59:	83 c4 0c             	add    esp,0xc
c0010d5c:	c3                   	ret    
c0010d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0010d60 <Krnl::handleSleepButton()>:
c0010d60:	83 ec 0c             	sub    esp,0xc
c0010d63:	e8 e9 06 00 00       	call   c0011451 <KeHandleSleepButton()>
c0010d68:	90                   	nop
c0010d69:	83 c4 0c             	add    esp,0xc
c0010d6c:	c3                   	ret    
c0010d6d:	90                   	nop

c0010d6e <EnvVarContainer::getEnv(char const*)>:
c0010d6e:	57                   	push   edi
c0010d6f:	56                   	push   esi
c0010d70:	53                   	push   ebx
c0010d71:	31 db                	xor    ebx,ebx
c0010d73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d77:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010d79:	7e 2b                	jle    c0010da6 <EnvVarContainer::getEnv(char const*)+0x38>
c0010d7b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d82:	50                   	push   eax
c0010d83:	50                   	push   eax
c0010d84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d87:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d8e:	e8 bd f9 fe ff       	call   c0000750 <strcmp>
c0010d93:	83 c4 10             	add    esp,0x10
c0010d96:	85 c0                	test   eax,eax
c0010d98:	75 09                	jne    c0010da3 <EnvVarContainer::getEnv(char const*)+0x35>
c0010d9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d9d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010da1:	eb 05                	jmp    c0010da8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010da3:	43                   	inc    ebx
c0010da4:	eb d1                	jmp    c0010d77 <EnvVarContainer::getEnv(char const*)+0x9>
c0010da6:	31 c0                	xor    eax,eax
c0010da8:	5b                   	pop    ebx
c0010da9:	5e                   	pop    esi
c0010daa:	5f                   	pop    edi
c0010dab:	c3                   	ret    

c0010dac <EnvVarContainer::setEnv(char const*, char const*)>:
c0010dac:	55                   	push   ebp
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 28             	sub    esp,0x28
c0010db3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010db7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010dbb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010dbf:	56                   	push   esi
c0010dc0:	e8 ab f7 fe ff       	call   c0000570 <strlen>
c0010dc5:	40                   	inc    eax
c0010dc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dc9:	e8 e8 6c ff ff       	call   c0007ab6 <malloc>
c0010dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010dd5:	e8 96 f7 fe ff       	call   c0000570 <strlen>
c0010dda:	40                   	inc    eax
c0010ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dde:	e8 d3 6c ff ff       	call   c0007ab6 <malloc>
c0010de3:	89 34 24             	mov    DWORD PTR [esp],esi
c0010de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dea:	e8 81 f7 fe ff       	call   c0000570 <strlen>
c0010def:	83 c4 0c             	add    esp,0xc
c0010df2:	40                   	inc    eax
c0010df3:	50                   	push   eax
c0010df4:	6a 00                	push   0x0
c0010df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dfa:	e8 f1 f6 fe ff       	call   c00004f0 <memset>
c0010dff:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e02:	e8 69 f7 fe ff       	call   c0000570 <strlen>
c0010e07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e13:	89 de                	mov    esi,ebx
c0010e15:	e8 56 f7 fe ff       	call   c0000570 <strlen>
c0010e1a:	83 c4 0c             	add    esp,0xc
c0010e1d:	40                   	inc    eax
c0010e1e:	50                   	push   eax
c0010e1f:	6a 00                	push   0x0
c0010e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e25:	e8 c6 f6 fe ff       	call   c00004f0 <memset>
c0010e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2d:	e8 3e f7 fe ff       	call   c0000570 <strlen>
c0010e32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010e36:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e3e:	40                   	inc    eax
c0010e3f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e42:	c1 e0 03             	shl    eax,0x3
c0010e45:	5a                   	pop    edx
c0010e46:	59                   	pop    ecx
c0010e47:	50                   	push   eax
c0010e48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010e4b:	e8 52 6c ff ff       	call   c0007aa2 <realloc>
c0010e50:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e5a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e5e:	b9 08 00 00 00       	mov    ecx,0x8
c0010e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e65:	83 c4 2c             	add    esp,0x2c
c0010e68:	5b                   	pop    ebx
c0010e69:	5e                   	pop    esi
c0010e6a:	5f                   	pop    edi
c0010e6b:	5d                   	pop    ebp
c0010e6c:	c3                   	ret    
c0010e6d:	90                   	nop

c0010e6e <EnvVarContainer::deleteEnv(char const*)>:
c0010e6e:	c3                   	ret    
c0010e6f:	90                   	nop

c0010e70 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010e70:	55                   	push   ebp
c0010e71:	57                   	push   edi
c0010e72:	56                   	push   esi
c0010e73:	53                   	push   ebx
c0010e74:	81 ec 38 01 00 00    	sub    esp,0x138
c0010e7a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e81:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e88:	68 14 01 00 00       	push   0x114
c0010e8d:	e8 24 6c ff ff       	call   c0007ab6 <malloc>
c0010e92:	83 c4 0c             	add    esp,0xc
c0010e95:	89 c3                	mov    ebx,eax
c0010e97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e9a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010ea1:	50                   	push   eax
c0010ea2:	e8 c9 a9 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0010ea7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010eaa:	e8 4d ad ff ff       	call   c000bbfc <File::exists()>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	84 c0                	test   al,al
c0010eb4:	75 31                	jne    c0010ee7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010eb6:	50                   	push   eax
c0010eb7:	50                   	push   eax
c0010eb8:	6a 12                	push   0x12
c0010eba:	53                   	push   ebx
c0010ebb:	e8 78 aa ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0010ec0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ec2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010ec5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ec8:	e8 a3 f6 fe ff       	call   c0000570 <strlen>
c0010ecd:	5a                   	pop    edx
c0010ece:	31 d2                	xor    edx,edx
c0010ed0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010ed4:	51                   	push   ecx
c0010ed5:	56                   	push   esi
c0010ed6:	52                   	push   edx
c0010ed7:	50                   	push   eax
c0010ed8:	53                   	push   ebx
c0010ed9:	ff d7                	call   edi
c0010edb:	83 c4 14             	add    esp,0x14
c0010ede:	53                   	push   ebx
c0010edf:	e8 b2 aa ff ff       	call   c000b996 <File::close()>
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	56                   	push   esi
c0010ee8:	31 f6                	xor    esi,esi
c0010eea:	68 00 01 00 00       	push   0x100
c0010eef:	6a 00                	push   0x0
c0010ef1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ef5:	50                   	push   eax
c0010ef6:	e8 f5 f5 fe ff       	call   c00004f0 <memset>
c0010efb:	5f                   	pop    edi
c0010efc:	58                   	pop    eax
c0010efd:	6a 01                	push   0x1
c0010eff:	53                   	push   ebx
c0010f00:	e8 33 aa ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0010f05:	83 c4 10             	add    esp,0x10
c0010f08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f10:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010f18:	83 ec 0c             	sub    esp,0xc
c0010f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f1d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010f21:	51                   	push   ecx
c0010f22:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010f26:	52                   	push   edx
c0010f27:	6a 00                	push   0x0
c0010f29:	6a 01                	push   0x1
c0010f2b:	53                   	push   ebx
c0010f2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010f2f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010f34:	83 c4 20             	add    esp,0x20
c0010f37:	89 c2                	mov    edx,eax
c0010f39:	85 c0                	test   eax,eax
c0010f3b:	0f 84 36 01 00 00    	je     c0011077 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010f41:	83 f8 0d             	cmp    eax,0xd
c0010f44:	0f 84 22 01 00 00    	je     c001106c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010f4f:	0f 84 f0 00 00 00    	je     c0011045 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010f55:	83 f8 0a             	cmp    eax,0xa
c0010f58:	74 13                	je     c0010f6d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f5f:	74 0c                	je     c0010f6d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f61:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f67:	0f 8e f6 00 00 00    	jle    c0011063 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f71:	83 ec 0c             	sub    esp,0xc
c0010f74:	8d 78 01             	lea    edi,[eax+0x1]
c0010f77:	57                   	push   edi
c0010f78:	e8 39 6b ff ff       	call   c0007ab6 <malloc>
c0010f7d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f85:	8d 56 04             	lea    edx,[esi+0x4]
c0010f88:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f8f:	e8 22 6b ff ff       	call   c0007ab6 <malloc>
c0010f94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f98:	83 c4 0c             	add    esp,0xc
c0010f9b:	57                   	push   edi
c0010f9c:	6a 00                	push   0x0
c0010f9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010fa2:	e8 49 f5 fe ff       	call   c00004f0 <memset>
c0010fa7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010fab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010faf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb5:	83 c4 0c             	add    esp,0xc
c0010fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fbc:	52                   	push   edx
c0010fbd:	6a 00                	push   0x0
c0010fbf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fc3:	e8 28 f5 fe ff       	call   c00004f0 <memset>
c0010fc8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010fcc:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010fd0:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fd3:	e8 98 f5 fe ff       	call   c0000570 <strlen>
c0010fd8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010fdc:	89 c1                	mov    ecx,eax
c0010fde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fe3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010fe6:	40                   	inc    eax
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fed:	85 d2                	test   edx,edx
c0010fef:	75 0c                	jne    c0010ffd <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	6a 08                	push   0x8
c0010ff6:	e8 bb 6a ff ff       	call   c0007ab6 <malloc>
c0010ffb:	eb 0c                	jmp    c0011009 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010ffd:	c1 e0 03             	shl    eax,0x3
c0011000:	51                   	push   ecx
c0011001:	51                   	push   ecx
c0011002:	50                   	push   eax
c0011003:	52                   	push   edx
c0011004:	e8 99 6a ff ff       	call   c0007aa2 <realloc>
c0011009:	83 c4 10             	add    esp,0x10
c001100c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001100f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011012:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011015:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011019:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001101d:	b9 08 00 00 00       	mov    ecx,0x8
c0011022:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011024:	31 f6                	xor    esi,esi
c0011026:	50                   	push   eax
c0011027:	68 00 01 00 00       	push   0x100
c001102c:	6a 00                	push   0x0
c001102e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011032:	50                   	push   eax
c0011033:	e8 b8 f4 fe ff       	call   c00004f0 <memset>
c0011038:	83 c4 10             	add    esp,0x10
c001103b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011043:	eb 27                	jmp    c001106c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011045:	83 f8 3d             	cmp    eax,0x3d
c0011048:	74 1e                	je     c0011068 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001104a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011050:	7f 07                	jg     c0011059 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011052:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011056:	46                   	inc    esi
c0011057:	eb 13                	jmp    c001106c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011059:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011061:	eb 09                	jmp    c001106c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011063:	83 f8 3d             	cmp    eax,0x3d
c0011066:	75 ea                	jne    c0011052 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011068:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001106c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011071:	0f 85 99 fe ff ff    	jne    c0010f10 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011077:	83 ec 0c             	sub    esp,0xc
c001107a:	53                   	push   ebx
c001107b:	e8 16 a9 ff ff       	call   c000b996 <File::close()>
c0011080:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011082:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011085:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011088:	81 c4 3c 01 00 00    	add    esp,0x13c
c001108e:	5b                   	pop    ebx
c001108f:	5e                   	pop    esi
c0011090:	5f                   	pop    edi
c0011091:	5d                   	pop    ebp
c0011092:	c3                   	ret    
c0011093:	90                   	nop

c0011094 <EnvVarContainer::__loadSystem()>:
c0011094:	83 ec 10             	sub    esp,0x10
c0011097:	68 80 33 02 c0       	push   0xc0023380
c001109c:	68 70 1e 02 c0       	push   0xc0021e70
c00110a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a5:	e8 c6 fd ff ff       	call   c0010e70 <EnvVarContainer::loadFrom(char const*, char const*)>
c00110aa:	83 c4 1c             	add    esp,0x1c
c00110ad:	c3                   	ret    

c00110ae <EnvVarContainer::__loadUser()>:
c00110ae:	c3                   	ret    
c00110af:	90                   	nop

c00110b0 <EnvVarContainer::EnvVarContainer(Process*)>:
c00110b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00110ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00110c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110d0:	90                   	nop
c00110d1:	c3                   	ret    

c00110d2 <EnvVarContainer::~EnvVarContainer()>:
c00110d2:	83 ec 0c             	sub    esp,0xc
c00110d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110dc:	85 c0                	test   eax,eax
c00110de:	74 1d                	je     c00110fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00110e6:	85 c0                	test   eax,eax
c00110e8:	74 13                	je     c00110fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f1:	83 ec 0c             	sub    esp,0xc
c00110f4:	50                   	push   eax
c00110f5:	e8 cc 69 ff ff       	call   c0007ac6 <free>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	90                   	nop
c00110fe:	83 c4 0c             	add    esp,0xc
c0011101:	c3                   	ret    

c0011102 <KeGetEnv(Process*, char const*)>:
c0011102:	53                   	push   ebx
c0011103:	83 ec 08             	sub    esp,0x8
c0011106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001110e:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011114:	74 04                	je     c001111a <KeGetEnv(Process*, char const*)+0x18>
c0011116:	85 c0                	test   eax,eax
c0011118:	75 0b                	jne    c0011125 <KeGetEnv(Process*, char const*)+0x23>
c001111a:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001111f:	85 c0                	test   eax,eax
c0011121:	75 19                	jne    c001113c <KeGetEnv(Process*, char const*)+0x3a>
c0011123:	eb 27                	jmp    c001114c <KeGetEnv(Process*, char const*)+0x4a>
c0011125:	52                   	push   edx
c0011126:	52                   	push   edx
c0011127:	53                   	push   ebx
c0011128:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001112e:	e8 3b fc ff ff       	call   c0010d6e <EnvVarContainer::getEnv(char const*)>
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	85 c0                	test   eax,eax
c0011138:	75 28                	jne    c0011162 <KeGetEnv(Process*, char const*)+0x60>
c001113a:	eb de                	jmp    c001111a <KeGetEnv(Process*, char const*)+0x18>
c001113c:	52                   	push   edx
c001113d:	52                   	push   edx
c001113e:	53                   	push   ebx
c001113f:	50                   	push   eax
c0011140:	e8 29 fc ff ff       	call   c0010d6e <EnvVarContainer::getEnv(char const*)>
c0011145:	83 c4 10             	add    esp,0x10
c0011148:	85 c0                	test   eax,eax
c001114a:	75 16                	jne    c0011162 <KeGetEnv(Process*, char const*)+0x60>
c001114c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011150:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011155:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011159:	83 c4 08             	add    esp,0x8
c001115c:	5b                   	pop    ebx
c001115d:	e9 0c fc ff ff       	jmp    c0010d6e <EnvVarContainer::getEnv(char const*)>
c0011162:	83 c4 08             	add    esp,0x8
c0011165:	5b                   	pop    ebx
c0011166:	c3                   	ret    

c0011167 <KeSetEnvSystem(char const*, char const*)>:
c0011167:	83 ec 10             	sub    esp,0x10
c001116a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001116e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011172:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011178:	e8 2f fc ff ff       	call   c0010dac <EnvVarContainer::setEnv(char const*, char const*)>
c001117d:	83 c4 1c             	add    esp,0x1c
c0011180:	c3                   	ret    

c0011181 <KeSetEnvUser(char const*, char const*)>:
c0011181:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011186:	85 c0                	test   eax,eax
c0011188:	74 15                	je     c001119f <KeSetEnvUser(char const*, char const*)+0x1e>
c001118a:	83 ec 10             	sub    esp,0x10
c001118d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011191:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011195:	50                   	push   eax
c0011196:	e8 11 fc ff ff       	call   c0010dac <EnvVarContainer::setEnv(char const*, char const*)>
c001119b:	83 c4 1c             	add    esp,0x1c
c001119e:	c3                   	ret    
c001119f:	c3                   	ret    

c00111a0 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00111a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00111aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111ae:	e9 f9 fb ff ff       	jmp    c0010dac <EnvVarContainer::setEnv(char const*, char const*)>

c00111b3 <KeDeleteEnvSystem(char const*)>:
c00111b3:	c3                   	ret    

c00111b4 <KeDeleteEnvUser(char const*)>:
c00111b4:	c3                   	ret    

c00111b5 <KeDeleteEnvProcess(Process*, char const*)>:
c00111b5:	c3                   	ret    

c00111b6 <KeNewProcessEnv(Process*)>:
c00111b6:	83 ec 28             	sub    esp,0x28
c00111b9:	6a 0c                	push   0xc
c00111bb:	e8 f6 68 ff ff       	call   c0007ab6 <malloc>
c00111c0:	5a                   	pop    edx
c00111c1:	59                   	pop    ecx
c00111c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111c6:	50                   	push   eax
c00111c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111cb:	e8 e0 fe ff ff       	call   c00110b0 <EnvVarContainer::EnvVarContainer(Process*)>
c00111d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111d4:	83 c4 2c             	add    esp,0x2c
c00111d7:	c3                   	ret    

c00111d8 <KeCopyProcessEnv(Process*, Process*)>:
c00111d8:	57                   	push   edi
c00111d9:	56                   	push   esi
c00111da:	53                   	push   ebx
c00111db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111df:	83 ec 0c             	sub    esp,0xc
c00111e2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00111e8:	6a 0c                	push   0xc
c00111ea:	e8 c7 68 ff ff       	call   c0007ab6 <malloc>
c00111ef:	89 c3                	mov    ebx,eax
c00111f1:	58                   	pop    eax
c00111f2:	5a                   	pop    edx
c00111f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f7:	53                   	push   ebx
c00111f8:	e8 b3 fe ff ff       	call   c00110b0 <EnvVarContainer::EnvVarContainer(Process*)>
c00111fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00111ff:	89 03                	mov    DWORD PTR [ebx],eax
c0011201:	c1 e0 03             	shl    eax,0x3
c0011204:	89 04 24             	mov    DWORD PTR [esp],eax
c0011207:	e8 aa 68 ff ff       	call   c0007ab6 <malloc>
c001120c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001120f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011211:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011214:	c1 e1 03             	shl    ecx,0x3
c0011217:	89 c7                	mov    edi,eax
c0011219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001121b:	83 c4 10             	add    esp,0x10
c001121e:	89 d8                	mov    eax,ebx
c0011220:	5b                   	pop    ebx
c0011221:	5e                   	pop    esi
c0011222:	5f                   	pop    edi
c0011223:	c3                   	ret    

c0011224 <KeLoadSystemEnv()>:
c0011224:	53                   	push   ebx
c0011225:	83 ec 14             	sub    esp,0x14
c0011228:	6a 0c                	push   0xc
c001122a:	e8 87 68 ff ff       	call   c0007ab6 <malloc>
c001122f:	89 c3                	mov    ebx,eax
c0011231:	58                   	pop    eax
c0011232:	5a                   	pop    edx
c0011233:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011239:	53                   	push   ebx
c001123a:	e8 71 fe ff ff       	call   c00110b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001123f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011242:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011248:	e8 47 fe ff ff       	call   c0011094 <EnvVarContainer::__loadSystem()>
c001124d:	83 c4 18             	add    esp,0x18
c0011250:	5b                   	pop    ebx
c0011251:	c3                   	ret    

c0011252 <KeLoadUserEnv()>:
c0011252:	53                   	push   ebx
c0011253:	83 ec 14             	sub    esp,0x14
c0011256:	6a 0c                	push   0xc
c0011258:	e8 59 68 ff ff       	call   c0007ab6 <malloc>
c001125d:	89 c3                	mov    ebx,eax
c001125f:	58                   	pop    eax
c0011260:	5a                   	pop    edx
c0011261:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011267:	53                   	push   ebx
c0011268:	e8 43 fe ff ff       	call   c00110b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001126d:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011273:	83 c4 18             	add    esp,0x18
c0011276:	5b                   	pop    ebx
c0011277:	c3                   	ret    

c0011278 <KeFlushEnv()>:
c0011278:	c3                   	ret    

c0011279 <KeGetProcessTotalEnvCount(Process*)>:
c0011279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001127d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011283:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011289:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001128e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011290:	03 01                	add    eax,DWORD PTR [ecx]
c0011292:	85 d2                	test   edx,edx
c0011294:	74 02                	je     c0011298 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011296:	03 02                	add    eax,DWORD PTR [edx]
c0011298:	c3                   	ret    

c0011299 <KeGetProcessEnvPair(Process*, int)>:
c0011299:	57                   	push   edi
c001129a:	56                   	push   esi
c001129b:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00112a1:	53                   	push   ebx
c00112a2:	85 f6                	test   esi,esi
c00112a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112ac:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00112b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00112b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00112b8:	75 16                	jne    c00112d0 <KeGetProcessEnvPair(Process*, int)+0x37>
c00112ba:	39 c2                	cmp    edx,eax
c00112bc:	7c 16                	jl     c00112d4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00112be:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00112c4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00112c6:	01 c6                	add    esi,eax
c00112c8:	39 d6                	cmp    esi,edx
c00112ca:	7e 3c                	jle    c0011308 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112cc:	29 c2                	sub    edx,eax
c00112ce:	eb 04                	jmp    c00112d4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00112d0:	39 c2                	cmp    edx,eax
c00112d2:	7d 05                	jge    c00112d9 <KeGetProcessEnvPair(Process*, int)+0x40>
c00112d4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00112d7:	eb 20                	jmp    c00112f9 <KeGetProcessEnvPair(Process*, int)+0x60>
c00112d9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00112db:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00112de:	39 d1                	cmp    ecx,edx
c00112e0:	7e 04                	jle    c00112e6 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00112e2:	29 c2                	sub    edx,eax
c00112e4:	eb 10                	jmp    c00112f6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00112e6:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00112ec:	03 0e                	add    ecx,DWORD PTR [esi]
c00112ee:	39 d1                	cmp    ecx,edx
c00112f0:	7e 16                	jle    c0011308 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112f2:	29 c2                	sub    edx,eax
c00112f4:	29 fa                	sub    edx,edi
c00112f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00112f9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00112fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00112fe:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011301:	89 03                	mov    DWORD PTR [ebx],eax
c0011303:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011306:	eb 1d                	jmp    c0011325 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011308:	83 ec 0c             	sub    esp,0xc
c001130b:	68 92 1e 02 c0       	push   0xc0021e92
c0011310:	e8 ac 00 00 00       	call   c00113c1 <KePanic(char const*)>
c0011315:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001131b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	89 d8                	mov    eax,ebx
c0011327:	5b                   	pop    ebx
c0011328:	5e                   	pop    esi
c0011329:	5f                   	pop    edi
c001132a:	c2 04 00             	ret    0x4

c001132d <CPU::current()>:
c001132d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011332:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011338:	c3                   	ret    

c0011339 <operator new(unsigned long)>:
c0011339:	e9 78 67 ff ff       	jmp    c0007ab6 <malloc>

c001133e <operator delete(void*)>:
c001133e:	e9 93 67 ff ff       	jmp    c0007ad6 <rfree>

c0011343 <disableIRQs()>:
c0011343:	fa                   	cli    
c0011344:	c3                   	ret    

c0011345 <enableIRQs()>:
c0011345:	fb                   	sti    
c0011346:	c3                   	ret    

c0011347 <lockScheduler()>:
c0011347:	fa                   	cli    
c0011348:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001134e:	c3                   	ret    

c001134f <unlockScheduler()>:
c001134f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011354:	48                   	dec    eax
c0011355:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001135a:	75 01                	jne    c001135d <unlockScheduler()+0xe>
c001135c:	fb                   	sti    
c001135d:	c3                   	ret    

c001135e <lockStuff()>:
c001135e:	fa                   	cli    
c001135f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011365:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001136b:	c3                   	ret    

c001136c <unlockStuff()>:
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011374:	48                   	dec    eax
c0011375:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001137a:	75 18                	jne    c0011394 <unlockStuff()+0x28>
c001137c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011383:	74 0f                	je     c0011394 <unlockStuff()+0x28>
c0011385:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001138f:	e8 ec 48 00 00       	call   c0015c80 <schedule()>
c0011394:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011399:	48                   	dec    eax
c001139a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001139f:	75 01                	jne    c00113a2 <unlockStuff()+0x36>
c00113a1:	fb                   	sti    
c00113a2:	83 c4 0c             	add    esp,0xc
c00113a5:	c3                   	ret    

c00113a6 <Virt::getAKernelVAS()>:
c00113a6:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00113ab:	c3                   	ret    

c00113ac <__not_memcpy>:
c00113ac:	57                   	push   edi
c00113ad:	56                   	push   esi
c00113ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00113ba:	89 c7                	mov    edi,eax
c00113bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113be:	5e                   	pop    esi
c00113bf:	5f                   	pop    edi
c00113c0:	c3                   	ret    

c00113c1 <KePanic(char const*)>:
c00113c1:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00113c8:	e9 59 68 00 00       	jmp    c0017c26 <HalPanic(char const*)>

c00113cd <KePowerThread(void*)>:
c00113cd:	83 ec 0c             	sub    esp,0xc
c00113d0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00113d5:	48                   	dec    eax
c00113d6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00113db:	75 01                	jne    c00113de <KePowerThread(void*)+0x11>
c00113dd:	fb                   	sti    
c00113de:	83 ec 0c             	sub    esp,0xc
c00113e1:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113e8:	6a 0a                	push   0xa
c00113ea:	e8 d5 4b 00 00       	call   c0015fc4 <sleep(unsigned int)>
c00113ef:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	eb e3                	jmp    c00113de <KePowerThread(void*)+0x11>

c00113fb <KeChangePowerSettings(PowerSettings)>:
c00113fb:	57                   	push   edi
c00113fc:	b9 09 00 00 00       	mov    ecx,0x9
c0011401:	56                   	push   esi
c0011402:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011407:	fc                   	cld    
c0011408:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001140c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001140e:	5e                   	pop    esi
c001140f:	5f                   	pop    edi
c0011410:	c3                   	ret    

c0011411 <KeUserIOReceived()>:
c0011411:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001141b:	c3                   	ret    

c001141c <KeHandlePowerButton()>:
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011424:	83 f8 02             	cmp    eax,0x2
c0011427:	75 10                	jne    c0011439 <KeHandlePowerButton()+0x1d>
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011432:	e8 f1 5c ff ff       	call   c0007128 <Computer::shutdown()>
c0011437:	eb 11                	jmp    c001144a <KeHandlePowerButton()+0x2e>
c0011439:	48                   	dec    eax
c001143a:	75 11                	jne    c001144d <KeHandlePowerButton()+0x31>
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011445:	e8 0e 5d ff ff       	call   c0007158 <Computer::sleep()>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	83 c4 0c             	add    esp,0xc
c0011450:	c3                   	ret    

c0011451 <KeHandleSleepButton()>:
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011459:	83 f8 02             	cmp    eax,0x2
c001145c:	75 10                	jne    c001146e <KeHandleSleepButton()+0x1d>
c001145e:	83 ec 0c             	sub    esp,0xc
c0011461:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011467:	e8 bc 5c ff ff       	call   c0007128 <Computer::shutdown()>
c001146c:	eb 11                	jmp    c001147f <KeHandleSleepButton()+0x2e>
c001146e:	48                   	dec    eax
c001146f:	75 11                	jne    c0011482 <KeHandleSleepButton()+0x31>
c0011471:	83 ec 0c             	sub    esp,0xc
c0011474:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001147a:	e8 d9 5c ff ff       	call   c0007158 <Computer::sleep()>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	83 c4 0c             	add    esp,0xc
c0011485:	c3                   	ret    

c0011486 <KeSetupPowerManager()>:
c0011486:	83 ec 0c             	sub    esp,0xc
c0011489:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011493:	68 f0 00 00 00       	push   0xf0
c0011498:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001149f:	6a 00                	push   0x0
c00114a1:	68 cd 13 01 c0       	push   0xc00113cd
c00114a6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00114ac:	e8 7f 45 00 00       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c00114b1:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00114bb:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00114c5:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00114cf:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00114d9:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00114e3:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00114ed:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00114f7:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011501:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001150b:	83 c4 1c             	add    esp,0x1c
c001150e:	c3                   	ret    

c001150f <KeRand()>:
c001150f:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011519:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c0011523:	53                   	push   ebx
c0011524:	01 c1                	add    ecx,eax
c0011526:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001152b:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011531:	01 ca                	add    edx,ecx
c0011533:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011538:	83 d2 00             	adc    edx,0x0
c001153b:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011540:	0f b7 da             	movzx  ebx,dx
c0011543:	89 da                	mov    edx,ebx
c0011545:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c001154b:	0f ac d0 0e          	shrd   eax,edx,0xe
c001154f:	5b                   	pop    ebx
c0011550:	c3                   	ret    

c0011551 <KeSeedRand(unsigned int)>:
c0011551:	53                   	push   ebx
c0011552:	83 ec 08             	sub    esp,0x8
c0011555:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011559:	e8 e7 69 00 00       	call   c0017f45 <HalGetRand()>
c001155e:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011568:	31 d8                	xor    eax,ebx
c001156a:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001156f:	e8 9b ff ff ff       	call   c001150f <KeRand()>
c0011574:	83 c4 08             	add    esp,0x8
c0011577:	5b                   	pop    ebx
c0011578:	eb 95                	jmp    c001150f <KeRand()>

c001157a <KeInitRand()>:
c001157a:	83 ec 0c             	sub    esp,0xc
c001157d:	e8 b8 67 00 00       	call   c0017d3a <HalQueryPerformanceCounter()>
c0011582:	0f 20 da             	mov    edx,cr3
c0011585:	0f 22 da             	mov    cr3,edx
c0011588:	0f 20 da             	mov    edx,cr3
c001158b:	0f 22 da             	mov    cr3,edx
c001158e:	0f 20 da             	mov    edx,cr3
c0011591:	0f 22 da             	mov    cr3,edx
c0011594:	0f 20 da             	mov    edx,cr3
c0011597:	0f 22 da             	mov    cr3,edx
c001159a:	83 ec 0c             	sub    esp,0xc
c001159d:	35 03 8a 95 38       	xor    eax,0x38958a03
c00115a2:	50                   	push   eax
c00115a3:	e8 a9 ff ff ff       	call   c0011551 <KeSeedRand(unsigned int)>
c00115a8:	83 c4 1c             	add    esp,0x1c
c00115ab:	c3                   	ret    

c00115ac <KeResolveCompatibilitySymbol(char*)>:
c00115ac:	83 ec 0c             	sub    esp,0xc
c00115af:	83 ec 08             	sub    esp,0x8
c00115b2:	68 ac 1e 02 c0       	push   0xc0021eac
c00115b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115bb:	e8 90 f1 fe ff       	call   c0000750 <strcmp>
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	85 c0                	test   eax,eax
c00115c5:	0f 94 c0             	sete   al
c00115c8:	0f b6 c0             	movzx  eax,al
c00115cb:	85 c0                	test   eax,eax
c00115cd:	74 0d                	je     c00115dc <KeResolveCompatibilitySymbol(char*)+0x30>
c00115cf:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00115d4:	e9 8b 01 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115d9:	8d 76 00             	lea    esi,[esi+0x0]
c00115dc:	83 ec 08             	sub    esp,0x8
c00115df:	68 b5 1e 02 c0       	push   0xc0021eb5
c00115e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e8:	e8 63 f1 fe ff       	call   c0000750 <strcmp>
c00115ed:	83 c4 10             	add    esp,0x10
c00115f0:	85 c0                	test   eax,eax
c00115f2:	0f 94 c0             	sete   al
c00115f5:	0f b6 c0             	movzx  eax,al
c00115f8:	85 c0                	test   eax,eax
c00115fa:	74 0c                	je     c0011608 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00115fc:	b8 f0 f2 01 c0       	mov    eax,0xc001f2f0
c0011601:	e9 5e 01 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011606:	66 90                	xchg   ax,ax
c0011608:	83 ec 08             	sub    esp,0x8
c001160b:	68 bf 1e 02 c0       	push   0xc0021ebf
c0011610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011614:	e8 37 f1 fe ff       	call   c0000750 <strcmp>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	85 c0                	test   eax,eax
c001161e:	0f 94 c0             	sete   al
c0011621:	0f b6 c0             	movzx  eax,al
c0011624:	85 c0                	test   eax,eax
c0011626:	74 0c                	je     c0011634 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011628:	b8 24 f0 01 c0       	mov    eax,0xc001f024
c001162d:	e9 32 01 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011632:	66 90                	xchg   ax,ax
c0011634:	83 ec 08             	sub    esp,0x8
c0011637:	68 c8 1e 02 c0       	push   0xc0021ec8
c001163c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011640:	e8 0b f1 fe ff       	call   c0000750 <strcmp>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	85 c0                	test   eax,eax
c001164a:	0f 94 c0             	sete   al
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	85 c0                	test   eax,eax
c0011652:	74 0c                	je     c0011660 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011654:	b8 c1 13 01 c0       	mov    eax,0xc00113c1
c0011659:	e9 06 01 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001165e:	66 90                	xchg   ax,ax
c0011660:	83 ec 08             	sub    esp,0x8
c0011663:	68 db 1e 02 c0       	push   0xc0021edb
c0011668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001166c:	e8 df f0 fe ff       	call   c0000750 <strcmp>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	85 c0                	test   eax,eax
c0011676:	0f 94 c0             	sete   al
c0011679:	0f b6 c0             	movzx  eax,al
c001167c:	85 c0                	test   eax,eax
c001167e:	74 0c                	je     c001168c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011680:	b8 eb 0c 01 c0       	mov    eax,0xc0010ceb
c0011685:	e9 da 00 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001168a:	66 90                	xchg   ax,ax
c001168c:	83 ec 08             	sub    esp,0x8
c001168f:	68 f8 1e 02 c0       	push   0xc0021ef8
c0011694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011698:	e8 b3 f0 fe ff       	call   c0000750 <strcmp>
c001169d:	83 c4 10             	add    esp,0x10
c00116a0:	85 c0                	test   eax,eax
c00116a2:	0f 94 c0             	sete   al
c00116a5:	0f b6 c0             	movzx  eax,al
c00116a8:	85 c0                	test   eax,eax
c00116aa:	74 0c                	je     c00116b8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00116ac:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c00116b1:	e9 ae 00 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116b6:	66 90                	xchg   ax,ax
c00116b8:	83 ec 08             	sub    esp,0x8
c00116bb:	68 02 1f 02 c0       	push   0xc0021f02
c00116c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116c4:	e8 87 f0 fe ff       	call   c0000750 <strcmp>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	85 c0                	test   eax,eax
c00116ce:	0f 94 c0             	sete   al
c00116d1:	0f b6 c0             	movzx  eax,al
c00116d4:	85 c0                	test   eax,eax
c00116d6:	74 0c                	je     c00116e4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00116d8:	b8 70 f1 01 c0       	mov    eax,0xc001f170
c00116dd:	e9 82 00 00 00       	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116e2:	66 90                	xchg   ax,ax
c00116e4:	83 ec 08             	sub    esp,0x8
c00116e7:	68 0b 1f 02 c0       	push   0xc0021f0b
c00116ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f0:	e8 5b f0 fe ff       	call   c0000750 <strcmp>
c00116f5:	83 c4 10             	add    esp,0x10
c00116f8:	85 c0                	test   eax,eax
c00116fa:	0f 94 c0             	sete   al
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	85 c0                	test   eax,eax
c0011702:	74 08                	je     c001170c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011704:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011709:	eb 59                	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001170b:	90                   	nop
c001170c:	83 ec 08             	sub    esp,0x8
c001170f:	68 23 1f 02 c0       	push   0xc0021f23
c0011714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011718:	e8 33 f0 fe ff       	call   c0000750 <strcmp>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	85 c0                	test   eax,eax
c0011722:	0f 94 c0             	sete   al
c0011725:	0f b6 c0             	movzx  eax,al
c0011728:	85 c0                	test   eax,eax
c001172a:	74 08                	je     c0011734 <KeResolveCompatibilitySymbol(char*)+0x188>
c001172c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011731:	eb 31                	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011733:	90                   	nop
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	68 30 1f 02 c0       	push   0xc0021f30
c001173c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011740:	e8 0b f0 fe ff       	call   c0000750 <strcmp>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	85 c0                	test   eax,eax
c001174a:	0f 94 c0             	sete   al
c001174d:	0f b6 c0             	movzx  eax,al
c0011750:	85 c0                	test   eax,eax
c0011752:	74 08                	je     c001175c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011754:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011759:	eb 09                	jmp    c0011764 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001175b:	90                   	nop
c001175c:	b8 00 00 00 00       	mov    eax,0x0
c0011761:	8d 76 00             	lea    esi,[esi+0x0]
c0011764:	83 c4 0c             	add    esp,0xc
c0011767:	c3                   	ret    

c0011768 <KiSigKill(int)>:
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	6a 00                	push   0x0
c001176d:	6a 00                	push   0x0
c001176f:	6a ff                	push   0xffffffff
c0011771:	6a 01                	push   0x1
c0011773:	e8 da 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011778:	83 c4 1c             	add    esp,0x1c
c001177b:	c3                   	ret    

c001177c <KiDefaultSignalHandlerIgnore(int)>:
c001177c:	c3                   	ret    

c001177d <KiDefaultSignalHandlerPause(int)>:
c001177d:	57                   	push   edi
c001177e:	b9 07 00 00 00       	mov    ecx,0x7
c0011783:	56                   	push   esi
c0011784:	be 79 1f 02 c0       	mov    esi,0xc0021f79
c0011789:	83 ec 24             	sub    esp,0x24
c001178c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011790:	fc                   	cld    
c0011791:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011793:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011797:	50                   	push   eax
c0011798:	6a 00                	push   0x0
c001179a:	6a 00                	push   0x0
c001179c:	6a 27                	push   0x27
c001179e:	e8 af 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00117a3:	83 c4 34             	add    esp,0x34
c00117a6:	5e                   	pop    esi
c00117a7:	5f                   	pop    edi
c00117a8:	c3                   	ret    

c00117a9 <KiDefaultSignalHandlerResume(int)>:
c00117a9:	57                   	push   edi
c00117aa:	b9 1d 00 00 00       	mov    ecx,0x1d
c00117af:	56                   	push   esi
c00117b0:	be 95 1f 02 c0       	mov    esi,0xc0021f95
c00117b5:	83 ec 24             	sub    esp,0x24
c00117b8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00117bc:	fc                   	cld    
c00117bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00117bf:	8d 44 24 03          	lea    eax,[esp+0x3]
c00117c3:	50                   	push   eax
c00117c4:	6a 00                	push   0x0
c00117c6:	6a 00                	push   0x0
c00117c8:	6a 27                	push   0x27
c00117ca:	e8 83 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00117cf:	83 c4 34             	add    esp,0x34
c00117d2:	5e                   	pop    esi
c00117d3:	5f                   	pop    edi
c00117d4:	c3                   	ret    

c00117d5 <KeDeinitSignals(SigHandlerBlock*)>:
c00117d5:	e9 ec 62 ff ff       	jmp    c0007ac6 <free>

c00117da <KeInitSignals()>:
c00117da:	53                   	push   ebx
c00117db:	83 ec 14             	sub    esp,0x14
c00117de:	68 c8 00 00 00       	push   0xc8
c00117e3:	e8 ce 62 ff ff       	call   c0007ab6 <malloc>
c00117e8:	83 c4 0c             	add    esp,0xc
c00117eb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00117f5:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00117ff:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011806:	89 c3                	mov    ebx,eax
c0011808:	6a 20                	push   0x20
c001180a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011810:	6a 00                	push   0x0
c0011812:	50                   	push   eax
c0011813:	e8 d8 ec fe ff       	call   c00004f0 <memset>
c0011818:	83 c4 0c             	add    esp,0xc
c001181b:	6a 44                	push   0x44
c001181d:	6a 00                	push   0x0
c001181f:	53                   	push   ebx
c0011820:	e8 cb ec fe ff       	call   c00004f0 <memset>
c0011825:	89 d8                	mov    eax,ebx
c0011827:	83 c4 18             	add    esp,0x18
c001182a:	5b                   	pop    ebx
c001182b:	c3                   	ret    

c001182c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001182c:	53                   	push   ebx
c001182d:	b8 01 00 00 00       	mov    eax,0x1
c0011832:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011836:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001183a:	83 f9 10             	cmp    ecx,0x10
c001183d:	7f 21                	jg     c0011860 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001183f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011846:	89 03                	mov    DWORD PTR [ebx],eax
c0011848:	b8 01 00 00 00       	mov    eax,0x1
c001184d:	d3 e0                	shl    eax,cl
c001184f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011853:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011856:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001185e:	31 c0                	xor    eax,eax
c0011860:	5b                   	pop    ebx
c0011861:	c3                   	ret    

c0011862 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011862:	55                   	push   ebp
c0011863:	57                   	push   edi
c0011864:	bf 08 00 00 00       	mov    edi,0x8
c0011869:	56                   	push   esi
c001186a:	53                   	push   ebx
c001186b:	83 ec 18             	sub    esp,0x18
c001186e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011872:	68 b2 1f 02 c0       	push   0xc0021fb2
c0011877:	e8 c9 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001187c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011883:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	31 c9                	xor    ecx,ecx
c001188e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011892:	99                   	cdq    
c0011893:	f7 ff                	idiv   edi
c0011895:	8d 42 24             	lea    eax,[edx+0x24]
c0011898:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001189c:	85 f6                	test   esi,esi
c001189e:	75 1a                	jne    c00118ba <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00118a0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00118a4:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00118a8:	50                   	push   eax
c00118a9:	50                   	push   eax
c00118aa:	52                   	push   edx
c00118ab:	68 c3 1f 02 c0       	push   0xc0021fc3
c00118b0:	e8 90 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	eb 1b                	jmp    c00118d5 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00118ba:	41                   	inc    ecx
c00118bb:	83 f9 08             	cmp    ecx,0x8
c00118be:	75 ce                	jne    c001188e <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	be 01 00 00 00       	mov    esi,0x1
c00118c8:	68 e4 1f 02 c0       	push   0xc0021fe4
c00118cd:	e8 73 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	83 c4 0c             	add    esp,0xc
c00118d8:	89 f0                	mov    eax,esi
c00118da:	5b                   	pop    ebx
c00118db:	5e                   	pop    esi
c00118dc:	5f                   	pop    edi
c00118dd:	5d                   	pop    ebp
c00118de:	c3                   	ret    

c00118df <KeCheckSignal(SigHandlerBlock*, int*)>:
c00118df:	55                   	push   ebp
c00118e0:	57                   	push   edi
c00118e1:	56                   	push   esi
c00118e2:	53                   	push   ebx
c00118e3:	51                   	push   ecx
c00118e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118e8:	85 db                	test   ebx,ebx
c00118ea:	0f 84 bc 00 00 00    	je     c00119ac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118f0:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00118f7:	0f 84 af 00 00 00    	je     c00119ac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118fd:	31 c9                	xor    ecx,ecx
c00118ff:	bf 08 00 00 00       	mov    edi,0x8
c0011904:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001190a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001190d:	99                   	cdq    
c001190e:	f7 ff                	idiv   edi
c0011910:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011917:	85 ed                	test   ebp,ebp
c0011919:	0f 84 9e 00 00 00    	je     c00119bd <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001191f:	89 e9                	mov    ecx,ebp
c0011921:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011927:	bf 01 00 00 00       	mov    edi,0x1
c001192c:	89 04 24             	mov    DWORD PTR [esp],eax
c001192f:	d3 e7                	shl    edi,cl
c0011931:	31 c9                	xor    ecx,ecx
c0011933:	b8 01 00 00 00       	mov    eax,0x1
c0011938:	d3 e0                	shl    eax,cl
c001193a:	85 04 24             	test   DWORD PTR [esp],eax
c001193d:	74 06                	je     c0011945 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001193f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011943:	75 67                	jne    c00119ac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011945:	41                   	inc    ecx
c0011946:	83 f9 11             	cmp    ecx,0x11
c0011949:	75 e8                	jne    c0011933 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c001194b:	46                   	inc    esi
c001194c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001194f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011955:	09 f8                	or     eax,edi
c0011957:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011962:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011968:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001196f:	31 c0                	xor    eax,eax
c0011971:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011979:	74 09                	je     c0011984 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c001197b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011982:	eb 06                	jmp    c001198a <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011984:	40                   	inc    eax
c0011985:	83 f8 08             	cmp    eax,0x8
c0011988:	75 e7                	jne    c0011971 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001198a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001198d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011991:	83 fd 09             	cmp    ebp,0x9
c0011994:	89 2a                	mov    DWORD PTR [edx],ebp
c0011996:	75 07                	jne    c001199f <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011998:	b8 68 17 01 c0       	mov    eax,0xc0011768
c001199d:	eb 31                	jmp    c00119d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001199f:	83 f8 01             	cmp    eax,0x1
c00119a2:	75 0c                	jne    c00119b0 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00119a4:	f7 d7                	not    edi
c00119a6:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00119ac:	31 c0                	xor    eax,eax
c00119ae:	eb 20                	jmp    c00119d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00119b0:	85 c0                	test   eax,eax
c00119b2:	75 1c                	jne    c00119d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00119b4:	8b 04 ad e0 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcc20]
c00119bb:	eb 13                	jmp    c00119d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00119bd:	46                   	inc    esi
c00119be:	41                   	inc    ecx
c00119bf:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00119c5:	83 f9 08             	cmp    ecx,0x8
c00119c8:	0f 85 36 ff ff ff    	jne    c0011904 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00119ce:	eb dc                	jmp    c00119ac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00119d0:	5a                   	pop    edx
c00119d1:	5b                   	pop    ebx
c00119d2:	5e                   	pop    esi
c00119d3:	5f                   	pop    edi
c00119d4:	5d                   	pop    ebp
c00119d5:	c3                   	ret    

c00119d6 <KiCheckSignalZ>:
c00119d6:	83 ec 10             	sub    esp,0x10
c00119d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00119dd:	50                   	push   eax
c00119de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119ec:	e8 ee fe ff ff       	call   c00118df <KeCheckSignal(SigHandlerBlock*, int*)>
c00119f1:	5a                   	pop    edx
c00119f2:	31 d2                	xor    edx,edx
c00119f4:	59                   	pop    ecx
c00119f5:	85 c0                	test   eax,eax
c00119f7:	74 19                	je     c0011a12 <KiCheckSignalZ+0x3c>
c00119f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00119ff:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011a02:	89 02                	mov    DWORD PTR [edx],eax
c0011a04:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011a0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a0f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011a12:	89 d0                	mov    eax,edx
c0011a14:	83 c4 10             	add    esp,0x10
c0011a17:	c3                   	ret    

c0011a18 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011a18:	56                   	push   esi
c0011a19:	53                   	push   ebx
c0011a1a:	bb 01 00 00 00       	mov    ebx,0x1
c0011a1f:	52                   	push   edx
c0011a20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011a24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a28:	d3 e3                	shl    ebx,cl
c0011a2a:	83 f9 10             	cmp    ecx,0x10
c0011a2d:	7f 08                	jg     c0011a37 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011a2f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011a35:	75 10                	jne    c0011a47 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011a37:	83 ec 0c             	sub    esp,0xc
c0011a3a:	68 f5 1f 02 c0       	push   0xc0021ff5
c0011a3f:	e8 7d f9 ff ff       	call   c00113c1 <KePanic(char const*)>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	f7 d3                	not    ebx
c0011a49:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011a4f:	58                   	pop    eax
c0011a50:	5b                   	pop    ebx
c0011a51:	5e                   	pop    esi
c0011a52:	c3                   	ret    

c0011a53 <KiFinishSignalZ>:
c0011a53:	53                   	push   ebx
c0011a54:	83 ec 10             	sub    esp,0x10
c0011a57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a5b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011a5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a66:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011a6c:	e8 a7 ff ff ff       	call   c0011a18 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011a71:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011a77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a85:	83 c4 18             	add    esp,0x18
c0011a88:	5b                   	pop    ebx
c0011a89:	c3                   	ret    

c0011a8a <SysSeekDir(regs*)>:
c0011a8a:	31 c0                	xor    eax,eax
c0011a8c:	31 d2                	xor    edx,edx
c0011a8e:	c3                   	ret    

c0011a8f <SysTellDir(regs*)>:
c0011a8f:	31 c0                	xor    eax,eax
c0011a91:	31 d2                	xor    edx,edx
c0011a93:	c3                   	ret    

c0011a94 <SysVerify(regs*)>:
c0011a94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a98:	31 d2                	xor    edx,edx
c0011a9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a9d:	c3                   	ret    

c0011a9e <SysGetArgc(regs*)>:
c0011a9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aa6:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011aac:	89 c2                	mov    edx,eax
c0011aae:	c1 fa 1f             	sar    edx,0x1f
c0011ab1:	c3                   	ret    

c0011ab2 <SysTTYName(regs*)>:
c0011ab2:	b8 01 00 00 00       	mov    eax,0x1
c0011ab7:	31 d2                	xor    edx,edx
c0011ab9:	c3                   	ret    

c0011aba <SysFormatDisk(regs*)>:
c0011aba:	56                   	push   esi
c0011abb:	53                   	push   ebx
c0011abc:	83 ec 04             	sub    esp,0x4
c0011abf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ac3:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011ac9:	eb 28                	jmp    c0011af3 <SysFormatDisk(regs*)+0x39>
c0011acb:	83 ec 0c             	sub    esp,0xc
c0011ace:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011ad1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011ad4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ad6:	51                   	push   ecx
c0011ad7:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011ada:	51                   	push   ecx
c0011adb:	50                   	push   eax
c0011adc:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011ae3:	50                   	push   eax
c0011ae4:	53                   	push   ebx
c0011ae5:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011ae8:	83 c4 20             	add    esp,0x20
c0011aeb:	83 f8 08             	cmp    eax,0x8
c0011aee:	75 14                	jne    c0011b04 <SysFormatDisk(regs*)+0x4a>
c0011af0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011af3:	85 db                	test   ebx,ebx
c0011af5:	75 d4                	jne    c0011acb <SysFormatDisk(regs*)+0x11>
c0011af7:	83 c4 04             	add    esp,0x4
c0011afa:	b8 03 00 00 00       	mov    eax,0x3
c0011aff:	31 d2                	xor    edx,edx
c0011b01:	5b                   	pop    ebx
c0011b02:	5e                   	pop    esi
c0011b03:	c3                   	ret    
c0011b04:	85 c0                	test   eax,eax
c0011b06:	74 1f                	je     c0011b27 <SysFormatDisk(regs*)+0x6d>
c0011b08:	83 f8 09             	cmp    eax,0x9
c0011b0b:	74 0d                	je     c0011b1a <SysFormatDisk(regs*)+0x60>
c0011b0d:	83 c4 04             	add    esp,0x4
c0011b10:	b8 02 00 00 00       	mov    eax,0x2
c0011b15:	31 d2                	xor    edx,edx
c0011b17:	5b                   	pop    ebx
c0011b18:	5e                   	pop    esi
c0011b19:	c3                   	ret    
c0011b1a:	83 c4 04             	add    esp,0x4
c0011b1d:	b8 01 00 00 00       	mov    eax,0x1
c0011b22:	31 d2                	xor    edx,edx
c0011b24:	5b                   	pop    ebx
c0011b25:	5e                   	pop    esi
c0011b26:	c3                   	ret    
c0011b27:	83 c4 04             	add    esp,0x4
c0011b2a:	31 c0                	xor    eax,eax
c0011b2c:	31 d2                	xor    edx,edx
c0011b2e:	5b                   	pop    ebx
c0011b2f:	5e                   	pop    esi
c0011b30:	c3                   	ret    

c0011b31 <SysSetDiskVolumeLabel(regs*)>:
c0011b31:	56                   	push   esi
c0011b32:	53                   	push   ebx
c0011b33:	83 ec 04             	sub    esp,0x4
c0011b36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b3a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b3d:	83 f8 19             	cmp    eax,0x19
c0011b40:	77 33                	ja     c0011b75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b42:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011b49:	85 c9                	test   ecx,ecx
c0011b4b:	74 28                	je     c0011b75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b4d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011b50:	85 db                	test   ebx,ebx
c0011b52:	74 21                	je     c0011b75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b54:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011b5a:	85 d2                	test   edx,edx
c0011b5c:	74 17                	je     c0011b75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b5e:	8b 32                	mov    esi,DWORD PTR [edx]
c0011b60:	53                   	push   ebx
c0011b61:	50                   	push   eax
c0011b62:	51                   	push   ecx
c0011b63:	52                   	push   edx
c0011b64:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011b67:	83 c4 10             	add    esp,0x10
c0011b6a:	89 c2                	mov    edx,eax
c0011b6c:	83 c4 04             	add    esp,0x4
c0011b6f:	c1 fa 1f             	sar    edx,0x1f
c0011b72:	5b                   	pop    ebx
c0011b73:	5e                   	pop    esi
c0011b74:	c3                   	ret    
c0011b75:	83 c4 04             	add    esp,0x4
c0011b78:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b82:	5b                   	pop    ebx
c0011b83:	5e                   	pop    esi
c0011b84:	c3                   	ret    

c0011b85 <SysGetDiskVolumeLabel(regs*)>:
c0011b85:	57                   	push   edi
c0011b86:	56                   	push   esi
c0011b87:	53                   	push   ebx
c0011b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b8c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b8f:	83 fa 19             	cmp    edx,0x19
c0011b92:	77 3c                	ja     c0011bd0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b94:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b9b:	85 c9                	test   ecx,ecx
c0011b9d:	74 31                	je     c0011bd0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b9f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ba2:	85 db                	test   ebx,ebx
c0011ba4:	74 2a                	je     c0011bd0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ba6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ba9:	85 f6                	test   esi,esi
c0011bab:	74 23                	je     c0011bd0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011bad:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011bb3:	85 c0                	test   eax,eax
c0011bb5:	74 19                	je     c0011bd0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011bb7:	83 ec 0c             	sub    esp,0xc
c0011bba:	8b 38                	mov    edi,DWORD PTR [eax]
c0011bbc:	56                   	push   esi
c0011bbd:	53                   	push   ebx
c0011bbe:	52                   	push   edx
c0011bbf:	51                   	push   ecx
c0011bc0:	50                   	push   eax
c0011bc1:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011bc4:	83 c4 20             	add    esp,0x20
c0011bc7:	89 c2                	mov    edx,eax
c0011bc9:	5b                   	pop    ebx
c0011bca:	c1 fa 1f             	sar    edx,0x1f
c0011bcd:	5e                   	pop    esi
c0011bce:	5f                   	pop    edi
c0011bcf:	c3                   	ret    
c0011bd0:	5b                   	pop    ebx
c0011bd1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011bd6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bdb:	5e                   	pop    esi
c0011bdc:	5f                   	pop    edi
c0011bdd:	c3                   	ret    

c0011bde <SysShutdown(regs*)>:
c0011bde:	83 ec 0c             	sub    esp,0xc
c0011be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011be8:	85 c0                	test   eax,eax
c0011bea:	74 18                	je     c0011c04 <SysShutdown(regs*)+0x26>
c0011bec:	83 f8 01             	cmp    eax,0x1
c0011bef:	74 38                	je     c0011c29 <SysShutdown(regs*)+0x4b>
c0011bf1:	83 f8 02             	cmp    eax,0x2
c0011bf4:	74 24                	je     c0011c1a <SysShutdown(regs*)+0x3c>
c0011bf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c00:	83 c4 0c             	add    esp,0xc
c0011c03:	c3                   	ret    
c0011c04:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011c09:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0b:	6a 00                	push   0x0
c0011c0d:	6a 00                	push   0x0
c0011c0f:	6a 00                	push   0x0
c0011c11:	50                   	push   eax
c0011c12:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c15:	83 c4 10             	add    esp,0x10
c0011c18:	eb dc                	jmp    c0011bf6 <SysShutdown(regs*)+0x18>
c0011c1a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011c1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c21:	6a 00                	push   0x0
c0011c23:	6a 00                	push   0x0
c0011c25:	6a 01                	push   0x1
c0011c27:	eb e8                	jmp    c0011c11 <SysShutdown(regs*)+0x33>
c0011c29:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011c2e:	85 c0                	test   eax,eax
c0011c30:	74 02                	je     c0011c34 <SysShutdown(regs*)+0x56>
c0011c32:	ff d0                	call   eax
c0011c34:	31 c0                	xor    eax,eax
c0011c36:	31 d2                	xor    edx,edx
c0011c38:	83 c4 0c             	add    esp,0xc
c0011c3b:	c3                   	ret    

c0011c3c <SysRealpath(regs*)>:
c0011c3c:	83 ec 0c             	sub    esp,0xc
c0011c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c43:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c46:	85 d2                	test   edx,edx
c0011c48:	74 07                	je     c0011c51 <SysRealpath(regs*)+0x15>
c0011c4a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c4d:	85 c0                	test   eax,eax
c0011c4f:	75 0b                	jne    c0011c5c <SysRealpath(regs*)+0x20>
c0011c51:	b8 01 00 00 00       	mov    eax,0x1
c0011c56:	31 d2                	xor    edx,edx
c0011c58:	83 c4 0c             	add    esp,0xc
c0011c5b:	c3                   	ret    
c0011c5c:	6a 00                	push   0x0
c0011c5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011c64:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011c67:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011c6d:	51                   	push   ecx
c0011c6e:	52                   	push   edx
c0011c6f:	50                   	push   eax
c0011c70:	e8 75 99 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c75:	83 c4 10             	add    esp,0x10
c0011c78:	31 c0                	xor    eax,eax
c0011c7a:	31 d2                	xor    edx,edx
c0011c7c:	83 c4 0c             	add    esp,0xc
c0011c7f:	c3                   	ret    

c0011c80 <SysReadDir(regs*)>:
c0011c80:	53                   	push   ebx
c0011c81:	83 ec 18             	sub    esp,0x18
c0011c84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c8b:	83 f8 02             	cmp    eax,0x2
c0011c8e:	76 61                	jbe    c0011cf1 <SysReadDir(regs*)+0x71>
c0011c90:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c97:	77 49                	ja     c0011ce2 <SysReadDir(regs*)+0x62>
c0011c99:	83 ec 0c             	sub    esp,0xc
c0011c9c:	50                   	push   eax
c0011c9d:	e8 11 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ca2:	83 c4 10             	add    esp,0x10
c0011ca5:	85 c0                	test   eax,eax
c0011ca7:	74 39                	je     c0011ce2 <SysReadDir(regs*)+0x62>
c0011ca9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cb1:	83 ec 0c             	sub    esp,0xc
c0011cb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011cba:	51                   	push   ecx
c0011cbb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011cbe:	51                   	push   ecx
c0011cbf:	6a 00                	push   0x0
c0011cc1:	68 10 01 00 00       	push   0x110
c0011cc6:	50                   	push   eax
c0011cc7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011cca:	83 c4 20             	add    esp,0x20
c0011ccd:	85 c0                	test   eax,eax
c0011ccf:	74 29                	je     c0011cfa <SysReadDir(regs*)+0x7a>
c0011cd1:	83 f8 07             	cmp    eax,0x7
c0011cd4:	74 1b                	je     c0011cf1 <SysReadDir(regs*)+0x71>
c0011cd6:	b8 02 00 00 00       	mov    eax,0x2
c0011cdb:	31 d2                	xor    edx,edx
c0011cdd:	83 c4 18             	add    esp,0x18
c0011ce0:	5b                   	pop    ebx
c0011ce1:	c3                   	ret    
c0011ce2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ce7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cec:	83 c4 18             	add    esp,0x18
c0011cef:	5b                   	pop    ebx
c0011cf0:	c3                   	ret    
c0011cf1:	b8 01 00 00 00       	mov    eax,0x1
c0011cf6:	31 d2                	xor    edx,edx
c0011cf8:	eb e3                	jmp    c0011cdd <SysReadDir(regs*)+0x5d>
c0011cfa:	31 c0                	xor    eax,eax
c0011cfc:	31 d2                	xor    edx,edx
c0011cfe:	eb dd                	jmp    c0011cdd <SysReadDir(regs*)+0x5d>

c0011d00 <SysIsATTY(regs*)>:
c0011d00:	83 ec 0c             	sub    esp,0xc
c0011d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d07:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d0a:	83 f8 02             	cmp    eax,0x2
c0011d0d:	76 07                	jbe    c0011d16 <SysIsATTY(regs*)+0x16>
c0011d0f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011d14:	75 26                	jne    c0011d3c <SysIsATTY(regs*)+0x3c>
c0011d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011d24:	85 c0                	test   eax,eax
c0011d26:	74 24                	je     c0011d4c <SysIsATTY(regs*)+0x4c>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d2d:	50                   	push   eax
c0011d2e:	ff 12                	call   DWORD PTR [edx]
c0011d30:	31 d2                	xor    edx,edx
c0011d32:	0f b6 c0             	movzx  eax,al
c0011d35:	83 c4 10             	add    esp,0x10
c0011d38:	83 c4 0c             	add    esp,0xc
c0011d3b:	c3                   	ret    
c0011d3c:	83 ec 0c             	sub    esp,0xc
c0011d3f:	50                   	push   eax
c0011d40:	e8 6e 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d45:	83 c4 10             	add    esp,0x10
c0011d48:	85 c0                	test   eax,eax
c0011d4a:	75 dc                	jne    c0011d28 <SysIsATTY(regs*)+0x28>
c0011d4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d56:	83 c4 0c             	add    esp,0xc
c0011d59:	c3                   	ret    

c0011d5a <SysSeek(regs*)>:
c0011d5a:	53                   	push   ebx
c0011d5b:	83 ec 08             	sub    esp,0x8
c0011d5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d65:	8d 50 fd             	lea    edx,[eax-0x3]
c0011d68:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011d6e:	77 32                	ja     c0011da2 <SysSeek(regs*)+0x48>
c0011d70:	83 ec 0c             	sub    esp,0xc
c0011d73:	50                   	push   eax
c0011d74:	e8 3a 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d79:	83 c4 0c             	add    esp,0xc
c0011d7c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d7f:	31 db                	xor    ebx,ebx
c0011d81:	53                   	push   ebx
c0011d82:	51                   	push   ecx
c0011d83:	50                   	push   eax
c0011d84:	e8 6d 9c ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	85 c0                	test   eax,eax
c0011d8e:	0f 95 c0             	setne  al
c0011d91:	31 d2                	xor    edx,edx
c0011d93:	0f b6 c0             	movzx  eax,al
c0011d96:	f7 d8                	neg    eax
c0011d98:	83 d2 00             	adc    edx,0x0
c0011d9b:	83 c4 08             	add    esp,0x8
c0011d9e:	f7 da                	neg    edx
c0011da0:	5b                   	pop    ebx
c0011da1:	c3                   	ret    
c0011da2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011da7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dac:	83 c4 08             	add    esp,0x8
c0011daf:	5b                   	pop    ebx
c0011db0:	c3                   	ret    

c0011db1 <SysTell(regs*)>:
c0011db1:	53                   	push   ebx
c0011db2:	83 ec 08             	sub    esp,0x8
c0011db5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011db9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011dbc:	83 f8 02             	cmp    eax,0x2
c0011dbf:	76 4e                	jbe    c0011e0f <SysTell(regs*)+0x5e>
c0011dc1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011dc6:	76 19                	jbe    c0011de1 <SysTell(regs*)+0x30>
c0011dc8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011dcb:	31 d2                	xor    edx,edx
c0011dcd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dda:	31 c0                	xor    eax,eax
c0011ddc:	83 c4 08             	add    esp,0x8
c0011ddf:	5b                   	pop    ebx
c0011de0:	c3                   	ret    
c0011de1:	83 ec 0c             	sub    esp,0xc
c0011de4:	50                   	push   eax
c0011de5:	e8 c9 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011dea:	5a                   	pop    edx
c0011deb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011dee:	59                   	pop    ecx
c0011def:	53                   	push   ebx
c0011df0:	50                   	push   eax
c0011df1:	e8 ac 9c ff ff       	call   c000baa2 <File::tell(unsigned long long*)>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	85 c0                	test   eax,eax
c0011dfb:	0f 95 c0             	setne  al
c0011dfe:	31 d2                	xor    edx,edx
c0011e00:	0f b6 c0             	movzx  eax,al
c0011e03:	f7 d8                	neg    eax
c0011e05:	83 d2 00             	adc    edx,0x0
c0011e08:	83 c4 08             	add    esp,0x8
c0011e0b:	f7 da                	neg    edx
c0011e0d:	5b                   	pop    ebx
c0011e0e:	c3                   	ret    
c0011e0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e19:	83 c4 08             	add    esp,0x8
c0011e1c:	5b                   	pop    ebx
c0011e1d:	c3                   	ret    

c0011e1e <SysSize(regs*)>:
c0011e1e:	53                   	push   ebx
c0011e1f:	83 ec 18             	sub    esp,0x18
c0011e22:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e29:	83 f8 02             	cmp    eax,0x2
c0011e2c:	76 54                	jbe    c0011e82 <SysSize(regs*)+0x64>
c0011e2e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e33:	76 19                	jbe    c0011e4e <SysSize(regs*)+0x30>
c0011e35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e38:	31 d2                	xor    edx,edx
c0011e3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e47:	31 c0                	xor    eax,eax
c0011e49:	83 c4 18             	add    esp,0x18
c0011e4c:	5b                   	pop    ebx
c0011e4d:	c3                   	ret    
c0011e4e:	83 ec 0c             	sub    esp,0xc
c0011e51:	50                   	push   eax
c0011e52:	e8 5c 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e57:	83 c4 0c             	add    esp,0xc
c0011e5a:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011e5e:	52                   	push   edx
c0011e5f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e62:	52                   	push   edx
c0011e63:	50                   	push   eax
c0011e64:	e8 d1 9d ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c0011e69:	83 c4 10             	add    esp,0x10
c0011e6c:	85 c0                	test   eax,eax
c0011e6e:	0f 95 c0             	setne  al
c0011e71:	31 d2                	xor    edx,edx
c0011e73:	0f b6 c0             	movzx  eax,al
c0011e76:	f7 d8                	neg    eax
c0011e78:	83 d2 00             	adc    edx,0x0
c0011e7b:	83 c4 18             	add    esp,0x18
c0011e7e:	f7 da                	neg    edx
c0011e80:	5b                   	pop    ebx
c0011e81:	c3                   	ret    
c0011e82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e8c:	83 c4 18             	add    esp,0x18
c0011e8f:	5b                   	pop    ebx
c0011e90:	c3                   	ret    

c0011e91 <SysSizeFromFilename(regs*)>:
c0011e91:	57                   	push   edi
c0011e92:	56                   	push   esi
c0011e93:	53                   	push   ebx
c0011e94:	83 ec 20             	sub    esp,0x20
c0011e97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011e9b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e9e:	83 fb 02             	cmp    ebx,0x2
c0011ea1:	0f 86 8a 00 00 00    	jbe    c0011f31 <SysSizeFromFilename(regs*)+0xa0>
c0011ea7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ead:	76 1b                	jbe    c0011eca <SysSizeFromFilename(regs*)+0x39>
c0011eaf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011eb2:	31 d2                	xor    edx,edx
c0011eb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011eba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ec1:	83 c4 20             	add    esp,0x20
c0011ec4:	31 c0                	xor    eax,eax
c0011ec6:	5b                   	pop    ebx
c0011ec7:	5e                   	pop    esi
c0011ec8:	5f                   	pop    edi
c0011ec9:	c3                   	ret    
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	68 14 01 00 00       	push   0x114
c0011ed2:	e8 df 5b ff ff       	call   c0007ab6 <malloc>
c0011ed7:	83 c4 0c             	add    esp,0xc
c0011eda:	89 c7                	mov    edi,eax
c0011edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ee1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ee4:	50                   	push   eax
c0011ee5:	53                   	push   ebx
c0011ee6:	57                   	push   edi
c0011ee7:	e8 84 99 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0011eec:	83 c4 0c             	add    esp,0xc
c0011eef:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011ef3:	50                   	push   eax
c0011ef4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011ef7:	52                   	push   edx
c0011ef8:	57                   	push   edi
c0011ef9:	e8 3c 9d ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	85 ff                	test   edi,edi
c0011f03:	74 14                	je     c0011f19 <SysSizeFromFilename(regs*)+0x88>
c0011f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f09:	8b 17                	mov    edx,DWORD PTR [edi]
c0011f0b:	83 ec 0c             	sub    esp,0xc
c0011f0e:	57                   	push   edi
c0011f0f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f19:	85 c0                	test   eax,eax
c0011f1b:	0f 95 c0             	setne  al
c0011f1e:	31 d2                	xor    edx,edx
c0011f20:	0f b6 c0             	movzx  eax,al
c0011f23:	f7 d8                	neg    eax
c0011f25:	83 d2 00             	adc    edx,0x0
c0011f28:	83 c4 20             	add    esp,0x20
c0011f2b:	f7 da                	neg    edx
c0011f2d:	5b                   	pop    ebx
c0011f2e:	5e                   	pop    esi
c0011f2f:	5f                   	pop    edi
c0011f30:	c3                   	ret    
c0011f31:	83 c4 20             	add    esp,0x20
c0011f34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f39:	5b                   	pop    ebx
c0011f3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f3f:	5e                   	pop    esi
c0011f40:	5f                   	pop    edi
c0011f41:	c3                   	ret    

c0011f42 <SysClose(regs*)>:
c0011f42:	53                   	push   ebx
c0011f43:	83 ec 08             	sub    esp,0x8
c0011f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f4d:	83 f8 02             	cmp    eax,0x2
c0011f50:	76 41                	jbe    c0011f93 <SysClose(regs*)+0x51>
c0011f52:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011f58:	83 fa 01             	cmp    edx,0x1
c0011f5b:	76 2d                	jbe    c0011f8a <SysClose(regs*)+0x48>
c0011f5d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f62:	77 2f                	ja     c0011f93 <SysClose(regs*)+0x51>
c0011f64:	83 ec 0c             	sub    esp,0xc
c0011f67:	50                   	push   eax
c0011f68:	e8 46 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f6d:	89 c3                	mov    ebx,eax
c0011f6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f72:	e8 1f 9a ff ff       	call   c000b996 <File::close()>
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	85 db                	test   ebx,ebx
c0011f7c:	74 0c                	je     c0011f8a <SysClose(regs*)+0x48>
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f83:	53                   	push   ebx
c0011f84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	31 c0                	xor    eax,eax
c0011f8c:	31 d2                	xor    edx,edx
c0011f8e:	83 c4 08             	add    esp,0x8
c0011f91:	5b                   	pop    ebx
c0011f92:	c3                   	ret    
c0011f93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f98:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f9d:	83 c4 08             	add    esp,0x8
c0011fa0:	5b                   	pop    ebx
c0011fa1:	c3                   	ret    

c0011fa2 <SysOpenDir(regs*)>:
c0011fa2:	56                   	push   esi
c0011fa3:	53                   	push   ebx
c0011fa4:	83 ec 04             	sub    esp,0x4
c0011fa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fab:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fae:	85 c9                	test   ecx,ecx
c0011fb0:	74 5d                	je     c001200f <SysOpenDir(regs*)+0x6d>
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	68 14 01 00 00       	push   0x114
c0011fba:	e8 f7 5a ff ff       	call   c0007ab6 <malloc>
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	89 c6                	mov    esi,eax
c0011fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fcc:	50                   	push   eax
c0011fcd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011fd0:	52                   	push   edx
c0011fd1:	56                   	push   esi
c0011fd2:	e8 23 9e ff ff       	call   c000bdfa <Directory::Directory(char const*, Process*)>
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	85 f6                	test   esi,esi
c0011fdc:	74 31                	je     c001200f <SysOpenDir(regs*)+0x6d>
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	56                   	push   esi
c0011fe2:	e8 db 9e ff ff       	call   c000bec2 <Directory::open()>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	85 c0                	test   eax,eax
c0011fec:	75 21                	jne    c001200f <SysOpenDir(regs*)+0x6d>
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	56                   	push   esi
c0011ff2:	e8 bf 71 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011ff7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	89 02                	mov    DWORD PTR [edx],eax
c0011fff:	c1 f8 1f             	sar    eax,0x1f
c0012002:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012005:	83 c4 04             	add    esp,0x4
c0012008:	31 c0                	xor    eax,eax
c001200a:	31 d2                	xor    edx,edx
c001200c:	5b                   	pop    ebx
c001200d:	5e                   	pop    esi
c001200e:	c3                   	ret    
c001200f:	83 c4 04             	add    esp,0x4
c0012012:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012017:	ba ff ff ff ff       	mov    edx,0xffffffff
c001201c:	5b                   	pop    ebx
c001201d:	5e                   	pop    esi
c001201e:	c3                   	ret    

c001201f <SysMakeDir(regs*)>:
c001201f:	56                   	push   esi
c0012020:	53                   	push   ebx
c0012021:	83 ec 10             	sub    esp,0x10
c0012024:	68 14 01 00 00       	push   0x114
c0012029:	e8 88 5a ff ff       	call   c0007ab6 <malloc>
c001202e:	83 c4 0c             	add    esp,0xc
c0012031:	89 c3                	mov    ebx,eax
c0012033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012038:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001203b:	50                   	push   eax
c001203c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012040:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012043:	52                   	push   edx
c0012044:	53                   	push   ebx
c0012045:	e8 b0 9d ff ff       	call   c000bdfa <Directory::Directory(char const*, Process*)>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	85 db                	test   ebx,ebx
c001204f:	74 2c                	je     c001207d <SysMakeDir(regs*)+0x5e>
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	53                   	push   ebx
c0012055:	e8 48 a0 ff ff       	call   c000c0a2 <Directory::create()>
c001205a:	89 c6                	mov    esi,eax
c001205c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001205e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012061:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012064:	83 c4 10             	add    esp,0x10
c0012067:	31 c0                	xor    eax,eax
c0012069:	85 f6                	test   esi,esi
c001206b:	0f 95 c0             	setne  al
c001206e:	31 d2                	xor    edx,edx
c0012070:	f7 d8                	neg    eax
c0012072:	83 d2 00             	adc    edx,0x0
c0012075:	83 c4 04             	add    esp,0x4
c0012078:	f7 da                	neg    edx
c001207a:	5b                   	pop    ebx
c001207b:	5e                   	pop    esi
c001207c:	c3                   	ret    
c001207d:	83 c4 04             	add    esp,0x4
c0012080:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012085:	ba ff ff ff ff       	mov    edx,0xffffffff
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	c3                   	ret    

c001208d <SysCloseDir(regs*)>:
c001208d:	53                   	push   ebx
c001208e:	83 ec 08             	sub    esp,0x8
c0012091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012095:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012098:	8d 50 fd             	lea    edx,[eax-0x3]
c001209b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00120a1:	77 2f                	ja     c00120d2 <SysCloseDir(regs*)+0x45>
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	50                   	push   eax
c00120a7:	e8 07 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120ac:	89 c3                	mov    ebx,eax
c00120ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00120b1:	e8 68 9e ff ff       	call   c000bf1e <Directory::close()>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	85 db                	test   ebx,ebx
c00120bb:	74 0c                	je     c00120c9 <SysCloseDir(regs*)+0x3c>
c00120bd:	83 ec 0c             	sub    esp,0xc
c00120c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c2:	53                   	push   ebx
c00120c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	31 c0                	xor    eax,eax
c00120cb:	31 d2                	xor    edx,edx
c00120cd:	83 c4 08             	add    esp,0x8
c00120d0:	5b                   	pop    ebx
c00120d1:	c3                   	ret    
c00120d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120dc:	83 c4 08             	add    esp,0x8
c00120df:	5b                   	pop    ebx
c00120e0:	c3                   	ret    

c00120e1 <SysWait(regs*)>:
c00120e1:	83 ec 10             	sub    esp,0x10
c00120e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120e8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00120eb:	52                   	push   edx
c00120ec:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00120ef:	51                   	push   ecx
c00120f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00120f3:	50                   	push   eax
c00120f4:	e8 d3 3d 00 00       	call   c0015ecc <waitTask(int, int*, int)>
c00120f9:	83 c4 1c             	add    esp,0x1c
c00120fc:	89 c2                	mov    edx,eax
c00120fe:	c1 fa 1f             	sar    edx,0x1f
c0012101:	c3                   	ret    

c0012102 <SysNotImpl(regs*)>:
c0012102:	83 ec 18             	sub    esp,0x18
c0012105:	68 06 20 02 c0       	push   0xc0022006
c001210a:	e8 b2 f2 ff ff       	call   c00113c1 <KePanic(char const*)>
c001210f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012114:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012119:	83 c4 1c             	add    esp,0x1c
c001211c:	c3                   	ret    

c001211d <SysPanic(regs*)>:
c001211d:	83 ec 18             	sub    esp,0x18
c0012120:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012124:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012127:	50                   	push   eax
c0012128:	e8 94 f2 ff ff       	call   c00113c1 <KePanic(char const*)>
c001212d:	b8 01 00 00 00       	mov    eax,0x1
c0012132:	31 d2                	xor    edx,edx
c0012134:	83 c4 1c             	add    esp,0x1c
c0012137:	c3                   	ret    

c0012138 <SysRmdir(regs*)>:
c0012138:	56                   	push   esi
c0012139:	53                   	push   ebx
c001213a:	83 ec 20             	sub    esp,0x20
c001213d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012141:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012144:	68 14 01 00 00       	push   0x114
c0012149:	e8 68 59 ff ff       	call   c0007ab6 <malloc>
c001214e:	83 c4 0c             	add    esp,0xc
c0012151:	89 c3                	mov    ebx,eax
c0012153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012158:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001215b:	50                   	push   eax
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	e8 0d 97 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0012163:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012166:	e8 9b 99 ff ff       	call   c000bb06 <File::unlink()>
c001216b:	83 c4 10             	add    esp,0x10
c001216e:	85 db                	test   ebx,ebx
c0012170:	74 14                	je     c0012186 <SysRmdir(regs*)+0x4e>
c0012172:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012176:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	53                   	push   ebx
c001217c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001217f:	83 c4 10             	add    esp,0x10
c0012182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012186:	85 c0                	test   eax,eax
c0012188:	0f 95 c0             	setne  al
c001218b:	31 d2                	xor    edx,edx
c001218d:	0f b6 c0             	movzx  eax,al
c0012190:	f7 d8                	neg    eax
c0012192:	83 d2 00             	adc    edx,0x0
c0012195:	83 c4 14             	add    esp,0x14
c0012198:	f7 da                	neg    edx
c001219a:	5b                   	pop    ebx
c001219b:	5e                   	pop    esi
c001219c:	c3                   	ret    

c001219d <SysUnlink(regs*)>:
c001219d:	56                   	push   esi
c001219e:	53                   	push   ebx
c001219f:	83 ec 20             	sub    esp,0x20
c00121a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121a6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00121a9:	68 14 01 00 00       	push   0x114
c00121ae:	e8 03 59 ff ff       	call   c0007ab6 <malloc>
c00121b3:	83 c4 0c             	add    esp,0xc
c00121b6:	89 c3                	mov    ebx,eax
c00121b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121c0:	50                   	push   eax
c00121c1:	56                   	push   esi
c00121c2:	53                   	push   ebx
c00121c3:	e8 a8 96 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c00121c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121cb:	e8 36 99 ff ff       	call   c000bb06 <File::unlink()>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	85 db                	test   ebx,ebx
c00121d5:	74 14                	je     c00121eb <SysUnlink(regs*)+0x4e>
c00121d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121dd:	83 ec 0c             	sub    esp,0xc
c00121e0:	53                   	push   ebx
c00121e1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121e4:	83 c4 10             	add    esp,0x10
c00121e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121eb:	85 c0                	test   eax,eax
c00121ed:	0f 95 c0             	setne  al
c00121f0:	31 d2                	xor    edx,edx
c00121f2:	0f b6 c0             	movzx  eax,al
c00121f5:	f7 d8                	neg    eax
c00121f7:	83 d2 00             	adc    edx,0x0
c00121fa:	83 c4 14             	add    esp,0x14
c00121fd:	f7 da                	neg    edx
c00121ff:	5b                   	pop    ebx
c0012200:	5e                   	pop    esi
c0012201:	c3                   	ret    

c0012202 <SysGetArgv(regs*)>:
c0012202:	83 ec 0c             	sub    esp,0xc
c0012205:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012209:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001220c:	85 c0                	test   eax,eax
c001220e:	78 2c                	js     c001223c <SysGetArgv(regs*)+0x3a>
c0012210:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012216:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012219:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001221f:	7d 1b                	jge    c001223c <SysGetArgv(regs*)+0x3a>
c0012221:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012228:	85 c0                	test   eax,eax
c001222a:	74 18                	je     c0012244 <SysGetArgv(regs*)+0x42>
c001222c:	83 ec 08             	sub    esp,0x8
c001222f:	50                   	push   eax
c0012230:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012233:	50                   	push   eax
c0012234:	e8 07 e4 fe ff       	call   c0000640 <strcpy>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	31 c0                	xor    eax,eax
c001223e:	31 d2                	xor    edx,edx
c0012240:	83 c4 0c             	add    esp,0xc
c0012243:	c3                   	ret    
c0012244:	b8 01 00 00 00       	mov    eax,0x1
c0012249:	31 d2                	xor    edx,edx
c001224b:	83 c4 0c             	add    esp,0xc
c001224e:	c3                   	ret    

c001224f <SysUSleep(regs*)>:
c001224f:	83 ec 1c             	sub    esp,0x1c
c0012252:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012256:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012259:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001225c:	6a 00                	push   0x0
c001225e:	6a 64                	push   0x64
c0012260:	52                   	push   edx
c0012261:	50                   	push   eax
c0012262:	e8 89 d0 00 00       	call   c001f2f0 <__udivdi3>
c0012267:	83 c4 14             	add    esp,0x14
c001226a:	50                   	push   eax
c001226b:	e8 40 3d 00 00       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c0012270:	31 c0                	xor    eax,eax
c0012272:	31 d2                	xor    edx,edx
c0012274:	83 c4 1c             	add    esp,0x1c
c0012277:	c3                   	ret    

c0012278 <SysSpawn(regs*)>:
c0012278:	56                   	push   esi
c0012279:	53                   	push   ebx
c001227a:	83 ec 04             	sub    esp,0x4
c001227d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012281:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012284:	85 f6                	test   esi,esi
c0012286:	75 0a                	jne    c0012292 <SysSpawn(regs*)+0x1a>
c0012288:	83 c4 04             	add    esp,0x4
c001228b:	31 c0                	xor    eax,eax
c001228d:	31 d2                	xor    edx,edx
c001228f:	5b                   	pop    ebx
c0012290:	5e                   	pop    esi
c0012291:	c3                   	ret    
c0012292:	83 ec 0c             	sub    esp,0xc
c0012295:	68 24 07 00 00       	push   0x724
c001229a:	e8 17 58 ff ff       	call   c0007ab6 <malloc>
c001229f:	83 c4 10             	add    esp,0x10
c00122a2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00122a5:	89 c6                	mov    esi,eax
c00122a7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00122aa:	85 c9                	test   ecx,ecx
c00122ac:	75 39                	jne    c00122e7 <SysSpawn(regs*)+0x6f>
c00122ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122b6:	52                   	push   edx
c00122b7:	50                   	push   eax
c00122b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122bb:	50                   	push   eax
c00122bc:	56                   	push   esi
c00122bd:	e8 3e 33 00 00       	call   c0015600 <Process::Process(char const*, Process*, char**)>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00122cc:	75 ba                	jne    c0012288 <SysSpawn(regs*)+0x10>
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	56                   	push   esi
c00122d2:	e8 65 38 00 00       	call   c0015b3c <Process::createUserThread()>
c00122d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	89 c2                	mov    edx,eax
c00122de:	83 c4 04             	add    esp,0x4
c00122e1:	c1 fa 1f             	sar    edx,0x1f
c00122e4:	5b                   	pop    ebx
c00122e5:	5e                   	pop    esi
c00122e6:	c3                   	ret    
c00122e7:	31 c0                	xor    eax,eax
c00122e9:	eb cb                	jmp    c00122b6 <SysSpawn(regs*)+0x3e>

c00122eb <SysGetEnv(regs*)>:
c00122eb:	57                   	push   edi
c00122ec:	56                   	push   esi
c00122ed:	53                   	push   ebx
c00122ee:	83 ec 1c             	sub    esp,0x1c
c00122f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00122f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fa:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122fd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012300:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012303:	51                   	push   ecx
c0012304:	e8 70 ef ff ff       	call   c0011279 <KeGetProcessTotalEnvCount(Process*)>
c0012309:	83 c4 10             	add    esp,0x10
c001230c:	39 c7                	cmp    edi,eax
c001230e:	7c 14                	jl     c0012324 <SysGetEnv(regs*)+0x39>
c0012310:	85 f6                	test   esi,esi
c0012312:	75 0b                	jne    c001231f <SysGetEnv(regs*)+0x34>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	31 c0                	xor    eax,eax
c0012319:	5b                   	pop    ebx
c001231a:	31 d2                	xor    edx,edx
c001231c:	5e                   	pop    esi
c001231d:	5f                   	pop    edi
c001231e:	c3                   	ret    
c001231f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012322:	eb f0                	jmp    c0012314 <SysGetEnv(regs*)+0x29>
c0012324:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012328:	83 ec 04             	sub    esp,0x4
c001232b:	57                   	push   edi
c001232c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012332:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012335:	57                   	push   edi
c0012336:	50                   	push   eax
c0012337:	e8 5d ef ff ff       	call   c0011299 <KeGetProcessEnvPair(Process*, int)>
c001233c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001233f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012343:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012347:	83 c4 0c             	add    esp,0xc
c001234a:	85 d2                	test   edx,edx
c001234c:	75 23                	jne    c0012371 <SysGetEnv(regs*)+0x86>
c001234e:	83 ec 0c             	sub    esp,0xc
c0012351:	50                   	push   eax
c0012352:	e8 19 e2 fe ff       	call   c0000570 <strlen>
c0012357:	89 3c 24             	mov    DWORD PTR [esp],edi
c001235a:	89 c3                	mov    ebx,eax
c001235c:	e8 0f e2 fe ff       	call   c0000570 <strlen>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	31 d2                	xor    edx,edx
c001236d:	5b                   	pop    ebx
c001236e:	5e                   	pop    esi
c001236f:	5f                   	pop    edi
c0012370:	c3                   	ret    
c0012371:	83 ec 08             	sub    esp,0x8
c0012374:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012377:	50                   	push   eax
c0012378:	56                   	push   esi
c0012379:	e8 c2 e2 fe ff       	call   c0000640 <strcpy>
c001237e:	58                   	pop    eax
c001237f:	5a                   	pop    edx
c0012380:	68 20 20 02 c0       	push   0xc0022020
c0012385:	56                   	push   esi
c0012386:	e8 b5 e4 fe ff       	call   c0000840 <strcat>
c001238b:	59                   	pop    ecx
c001238c:	5b                   	pop    ebx
c001238d:	57                   	push   edi
c001238e:	56                   	push   esi
c001238f:	e8 ac e4 fe ff       	call   c0000840 <strcat>
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	e9 78 ff ff ff       	jmp    c0012314 <SysGetEnv(regs*)+0x29>

c001239c <SysSetFatAttrib(regs*)>:
c001239c:	57                   	push   edi
c001239d:	56                   	push   esi
c001239e:	53                   	push   ebx
c001239f:	83 ec 1c             	sub    esp,0x1c
c00123a2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00123a6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00123a9:	68 14 01 00 00       	push   0x114
c00123ae:	e8 03 57 ff ff       	call   c0007ab6 <malloc>
c00123b3:	83 c4 0c             	add    esp,0xc
c00123b6:	89 c3                	mov    ebx,eax
c00123b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123c0:	50                   	push   eax
c00123c1:	57                   	push   edi
c00123c2:	53                   	push   ebx
c00123c3:	e8 a8 94 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c00123c8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00123cb:	83 c4 0c             	add    esp,0xc
c00123ce:	0f b6 d4             	movzx  edx,ah
c00123d1:	0f b6 c0             	movzx  eax,al
c00123d4:	52                   	push   edx
c00123d5:	50                   	push   eax
c00123d6:	53                   	push   ebx
c00123d7:	e8 c4 97 ff ff       	call   c000bba0 <File::chfatattr(unsigned char, unsigned char)>
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	85 db                	test   ebx,ebx
c00123e1:	74 14                	je     c00123f7 <SysSetFatAttrib(regs*)+0x5b>
c00123e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00123e9:	83 ec 0c             	sub    esp,0xc
c00123ec:	53                   	push   ebx
c00123ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123f7:	85 c0                	test   eax,eax
c00123f9:	0f 95 c0             	setne  al
c00123fc:	31 d2                	xor    edx,edx
c00123fe:	0f b6 c0             	movzx  eax,al
c0012401:	f7 d8                	neg    eax
c0012403:	83 d2 00             	adc    edx,0x0
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	f7 da                	neg    edx
c001240b:	5b                   	pop    ebx
c001240c:	5e                   	pop    esi
c001240d:	5f                   	pop    edi
c001240e:	c3                   	ret    

c001240f <SysPipe(regs*)>:
c001240f:	57                   	push   edi
c0012410:	56                   	push   esi
c0012411:	53                   	push   ebx
c0012412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012416:	83 ec 0c             	sub    esp,0xc
c0012419:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001241c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001241f:	6a 20                	push   0x20
c0012421:	e8 90 56 ff ff       	call   c0007ab6 <malloc>
c0012426:	89 c3                	mov    ebx,eax
c0012428:	58                   	pop    eax
c0012429:	5a                   	pop    edx
c001242a:	68 00 50 00 00       	push   0x5000
c001242f:	53                   	push   ebx
c0012430:	e8 f3 5f ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012435:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012438:	e8 79 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001243d:	89 07                	mov    DWORD PTR [edi],eax
c001243f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012442:	e8 6f 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	89 06                	mov    DWORD PTR [esi],eax
c001244c:	31 d2                	xor    edx,edx
c001244e:	5b                   	pop    ebx
c001244f:	31 c0                	xor    eax,eax
c0012451:	5e                   	pop    esi
c0012452:	5f                   	pop    edi
c0012453:	c3                   	ret    

c0012454 <SysGetUnixTime(regs*)>:
c0012454:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012459:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001245f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012463:	e9 7e 9e ff ff       	jmp    c000c2e6 <Clock::timeInSecondsLocal()>

c0012468 <string_ends_with(char const*, char const*)>:
c0012468:	57                   	push   edi
c0012469:	56                   	push   esi
c001246a:	53                   	push   ebx
c001246b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001246f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012473:	83 ec 0c             	sub    esp,0xc
c0012476:	53                   	push   ebx
c0012477:	e8 f4 e0 fe ff       	call   c0000570 <strlen>
c001247c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001247f:	89 c6                	mov    esi,eax
c0012481:	e8 ea e0 fe ff       	call   c0000570 <strlen>
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	39 c6                	cmp    esi,eax
c001248b:	7d 06                	jge    c0012493 <string_ends_with(char const*, char const*)+0x2b>
c001248d:	5b                   	pop    ebx
c001248e:	31 c0                	xor    eax,eax
c0012490:	5e                   	pop    esi
c0012491:	5f                   	pop    edi
c0012492:	c3                   	ret    
c0012493:	83 ec 08             	sub    esp,0x8
c0012496:	29 c6                	sub    esi,eax
c0012498:	57                   	push   edi
c0012499:	01 f3                	add    ebx,esi
c001249b:	53                   	push   ebx
c001249c:	e8 af e2 fe ff       	call   c0000750 <strcmp>
c00124a1:	83 c4 10             	add    esp,0x10
c00124a4:	85 c0                	test   eax,eax
c00124a6:	5b                   	pop    ebx
c00124a7:	0f 94 c0             	sete   al
c00124aa:	5e                   	pop    esi
c00124ab:	0f b6 c0             	movzx  eax,al
c00124ae:	5f                   	pop    edi
c00124af:	c3                   	ret    

c00124b0 <SysOpen(regs*)>:
c00124b0:	56                   	push   esi
c00124b1:	53                   	push   ebx
c00124b2:	81 ec 04 01 00 00    	sub    esp,0x104
c00124b8:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00124bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124c2:	85 c0                	test   eax,eax
c00124c4:	0f 84 bc 01 00 00    	je     c0012686 <SysOpen(regs*)+0x1d6>
c00124ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124cd:	85 c0                	test   eax,eax
c00124cf:	0f 84 b1 01 00 00    	je     c0012686 <SysOpen(regs*)+0x1d6>
c00124d5:	6a 00                	push   0x0
c00124d7:	68 22 20 02 c0       	push   0xc0022022
c00124dc:	50                   	push   eax
c00124dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00124e1:	56                   	push   esi
c00124e2:	e8 03 91 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00124e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00124ea:	e8 81 e0 fe ff       	call   c0000570 <strlen>
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	83 e8 01             	sub    eax,0x1
c00124f5:	74 21                	je     c0012518 <SysOpen(regs*)+0x68>
c00124f7:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00124fb:	eb 12                	jmp    c001250f <SysOpen(regs*)+0x5f>
c00124fd:	83 fa 3a             	cmp    edx,0x3a
c0012500:	74 12                	je     c0012514 <SysOpen(regs*)+0x64>
c0012502:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012506:	83 e8 01             	sub    eax,0x1
c0012509:	74 0d                	je     c0012518 <SysOpen(regs*)+0x68>
c001250b:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001250f:	83 fa 2e             	cmp    edx,0x2e
c0012512:	75 e9                	jne    c00124fd <SysOpen(regs*)+0x4d>
c0012514:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012518:	83 ec 08             	sub    esp,0x8
c001251b:	68 26 20 02 c0       	push   0xc0022026
c0012520:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012523:	50                   	push   eax
c0012524:	e8 3f ff ff ff       	call   c0012468 <string_ends_with(char const*, char const*)>
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	85 c0                	test   eax,eax
c001252e:	74 1d                	je     c001254d <SysOpen(regs*)+0x9d>
c0012530:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012533:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012539:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012540:	81 c4 04 01 00 00    	add    esp,0x104
c0012546:	31 c0                	xor    eax,eax
c0012548:	31 d2                	xor    edx,edx
c001254a:	5b                   	pop    ebx
c001254b:	5e                   	pop    esi
c001254c:	c3                   	ret    
c001254d:	83 ec 08             	sub    esp,0x8
c0012550:	68 2b 20 02 c0       	push   0xc002202b
c0012555:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012558:	50                   	push   eax
c0012559:	e8 0a ff ff ff       	call   c0012468 <string_ends_with(char const*, char const*)>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	85 c0                	test   eax,eax
c0012563:	75 cb                	jne    c0012530 <SysOpen(regs*)+0x80>
c0012565:	83 ec 08             	sub    esp,0x8
c0012568:	68 27 20 02 c0       	push   0xc0022027
c001256d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012570:	50                   	push   eax
c0012571:	e8 da e1 fe ff       	call   c0000750 <strcmp>
c0012576:	83 c4 10             	add    esp,0x10
c0012579:	85 c0                	test   eax,eax
c001257b:	74 b3                	je     c0012530 <SysOpen(regs*)+0x80>
c001257d:	83 ec 08             	sub    esp,0x8
c0012580:	68 26 20 02 c0       	push   0xc0022026
c0012585:	56                   	push   esi
c0012586:	e8 dd fe ff ff       	call   c0012468 <string_ends_with(char const*, char const*)>
c001258b:	83 c4 10             	add    esp,0x10
c001258e:	85 c0                	test   eax,eax
c0012590:	75 9e                	jne    c0012530 <SysOpen(regs*)+0x80>
c0012592:	83 ec 08             	sub    esp,0x8
c0012595:	68 30 20 02 c0       	push   0xc0022030
c001259a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001259d:	50                   	push   eax
c001259e:	e8 c5 fe ff ff       	call   c0012468 <string_ends_with(char const*, char const*)>
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	85 c0                	test   eax,eax
c00125a8:	0f 85 eb 00 00 00    	jne    c0012699 <SysOpen(regs*)+0x1e9>
c00125ae:	83 ec 08             	sub    esp,0x8
c00125b1:	68 35 20 02 c0       	push   0xc0022035
c00125b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125b9:	50                   	push   eax
c00125ba:	e8 a9 fe ff ff       	call   c0012468 <string_ends_with(char const*, char const*)>
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	85 c0                	test   eax,eax
c00125c4:	0f 85 cf 00 00 00    	jne    c0012699 <SysOpen(regs*)+0x1e9>
c00125ca:	83 ec 08             	sub    esp,0x8
c00125cd:	68 31 20 02 c0       	push   0xc0022031
c00125d2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00125d5:	51                   	push   ecx
c00125d6:	e8 75 e1 fe ff       	call   c0000750 <strcmp>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	85 c0                	test   eax,eax
c00125e0:	0f 84 b3 00 00 00    	je     c0012699 <SysOpen(regs*)+0x1e9>
c00125e6:	83 ec 08             	sub    esp,0x8
c00125e9:	68 30 20 02 c0       	push   0xc0022030
c00125ee:	56                   	push   esi
c00125ef:	e8 74 fe ff ff       	call   c0012468 <string_ends_with(char const*, char const*)>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	85 c0                	test   eax,eax
c00125f9:	0f 85 9a 00 00 00    	jne    c0012699 <SysOpen(regs*)+0x1e9>
c00125ff:	83 ec 0c             	sub    esp,0xc
c0012602:	68 14 01 00 00       	push   0x114
c0012607:	e8 aa 54 ff ff       	call   c0007ab6 <malloc>
c001260c:	83 c4 0c             	add    esp,0xc
c001260f:	89 c6                	mov    esi,eax
c0012611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012616:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012619:	50                   	push   eax
c001261a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001261d:	52                   	push   edx
c001261e:	56                   	push   esi
c001261f:	e8 4c 92 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	85 f6                	test   esi,esi
c0012629:	74 5b                	je     c0012686 <SysOpen(regs*)+0x1d6>
c001262b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001262e:	0f b6 c2             	movzx  eax,dl
c0012631:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012634:	89 d0                	mov    eax,edx
c0012636:	83 e0 01             	and    eax,0x1
c0012639:	f6 c2 02             	test   dl,0x2
c001263c:	74 03                	je     c0012641 <SysOpen(regs*)+0x191>
c001263e:	83 c8 02             	or     eax,0x2
c0012641:	f6 c2 04             	test   dl,0x4
c0012644:	74 03                	je     c0012649 <SysOpen(regs*)+0x199>
c0012646:	83 c8 04             	or     eax,0x4
c0012649:	f6 c2 08             	test   dl,0x8
c001264c:	74 03                	je     c0012651 <SysOpen(regs*)+0x1a1>
c001264e:	83 c8 0a             	or     eax,0xa
c0012651:	80 e2 10             	and    dl,0x10
c0012654:	74 03                	je     c0012659 <SysOpen(regs*)+0x1a9>
c0012656:	83 c8 12             	or     eax,0x12
c0012659:	83 ec 08             	sub    esp,0x8
c001265c:	50                   	push   eax
c001265d:	56                   	push   esi
c001265e:	e8 d5 92 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0012663:	83 c4 10             	add    esp,0x10
c0012666:	85 c0                	test   eax,eax
c0012668:	75 1c                	jne    c0012686 <SysOpen(regs*)+0x1d6>
c001266a:	83 ec 0c             	sub    esp,0xc
c001266d:	56                   	push   esi
c001266e:	e8 43 6b ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012673:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012676:	83 c4 10             	add    esp,0x10
c0012679:	89 02                	mov    DWORD PTR [edx],eax
c001267b:	c1 f8 1f             	sar    eax,0x1f
c001267e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012681:	e9 ba fe ff ff       	jmp    c0012540 <SysOpen(regs*)+0x90>
c0012686:	81 c4 04 01 00 00    	add    esp,0x104
c001268c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012691:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012696:	5b                   	pop    ebx
c0012697:	5e                   	pop    esi
c0012698:	c3                   	ret    
c0012699:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001269c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00126a2:	e9 92 fe ff ff       	jmp    c0012539 <SysOpen(regs*)+0x89>

c00126a7 <KeSystemCall(regs*, void*)>:
c00126a7:	53                   	push   ebx
c00126a8:	83 ec 08             	sub    esp,0x8
c00126ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126af:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00126b2:	83 f8 3b             	cmp    eax,0x3b
c00126b5:	77 16                	ja     c00126cd <KeSystemCall(regs*, void*)+0x26>
c00126b7:	8b 14 85 40 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbc0]
c00126be:	85 d2                	test   edx,edx
c00126c0:	74 0b                	je     c00126cd <KeSystemCall(regs*, void*)+0x26>
c00126c2:	83 ec 0c             	sub    esp,0xc
c00126c5:	53                   	push   ebx
c00126c6:	ff d2                	call   edx
c00126c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00126cb:	eb 0d                	jmp    c00126da <KeSystemCall(regs*, void*)+0x33>
c00126cd:	52                   	push   edx
c00126ce:	52                   	push   edx
c00126cf:	50                   	push   eax
c00126d0:	68 3a 20 02 c0       	push   0xc002203a
c00126d5:	e8 6b 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126da:	83 c4 10             	add    esp,0x10
c00126dd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00126e2:	31 d2                	xor    edx,edx
c00126e4:	83 c4 08             	add    esp,0x8
c00126e7:	5b                   	pop    ebx
c00126e8:	c3                   	ret    
c00126e9:	66 90                	xchg   ax,ax
c00126eb:	90                   	nop

c00126ec <KeSwitchEndian16(unsigned short)>:
c00126ec:	83 ec 04             	sub    esp,0x4
c00126ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00126f7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126fb:	c1 f8 08             	sar    eax,0x8
c00126fe:	89 c2                	mov    edx,eax
c0012700:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012704:	c1 e0 08             	shl    eax,0x8
c0012707:	09 d0                	or     eax,edx
c0012709:	83 c4 04             	add    esp,0x4
c001270c:	c3                   	ret    
c001270d:	8d 76 00             	lea    esi,[esi+0x0]

c0012710 <KeSwitchEndian32(unsigned int)>:
c0012710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012714:	c1 e8 18             	shr    eax,0x18
c0012717:	89 c2                	mov    edx,eax
c0012719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001271d:	c1 e0 08             	shl    eax,0x8
c0012720:	25 00 00 ff 00       	and    eax,0xff0000
c0012725:	09 c2                	or     edx,eax
c0012727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001272b:	c1 e8 08             	shr    eax,0x8
c001272e:	25 00 ff 00 00       	and    eax,0xff00
c0012733:	09 c2                	or     edx,eax
c0012735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012739:	c1 e0 18             	shl    eax,0x18
c001273c:	09 d0                	or     eax,edx
c001273e:	c3                   	ret    
c001273f:	90                   	nop

c0012740 <EthernetCRC32(unsigned char*, int)>:
c0012740:	83 ec 10             	sub    esp,0x10
c0012743:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012748:	75 0a                	jne    c0012754 <EthernetCRC32(unsigned char*, int)+0x14>
c001274a:	b8 00 00 00 00       	mov    eax,0x0
c001274f:	e9 8c 00 00 00       	jmp    c00127e0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012754:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012759:	7f 09                	jg     c0012764 <EthernetCRC32(unsigned char*, int)+0x24>
c001275b:	b8 00 00 00 00       	mov    eax,0x0
c0012760:	eb 7e                	jmp    c00127e0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012762:	66 90                	xchg   ax,ax
c0012764:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001276c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012778:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001277c:	7d 5a                	jge    c00127d8 <EthernetCRC32(unsigned char*, int)+0x98>
c001277e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012782:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012786:	01 d0                	add    eax,edx
c0012788:	8a 00                	mov    al,BYTE PTR [eax]
c001278a:	0f b6 c0             	movzx  eax,al
c001278d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012791:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012799:	8d 76 00             	lea    esi,[esi+0x0]
c001279c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00127a1:	7f 2d                	jg     c00127d0 <EthernetCRC32(unsigned char*, int)+0x90>
c00127a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a7:	83 e0 01             	and    eax,0x1
c00127aa:	74 10                	je     c00127bc <EthernetCRC32(unsigned char*, int)+0x7c>
c00127ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127b0:	d1 e8                	shr    eax,1
c00127b2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00127b7:	eb 0b                	jmp    c00127c4 <EthernetCRC32(unsigned char*, int)+0x84>
c00127b9:	8d 76 00             	lea    esi,[esi+0x0]
c00127bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127c0:	d1 e8                	shr    eax,1
c00127c2:	66 90                	xchg   ax,ax
c00127c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127c8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00127cd:	eb cd                	jmp    c001279c <EthernetCRC32(unsigned char*, int)+0x5c>
c00127cf:	90                   	nop
c00127d0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00127d5:	eb 9d                	jmp    c0012774 <EthernetCRC32(unsigned char*, int)+0x34>
c00127d7:	90                   	nop
c00127d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127dc:	f7 d0                	not    eax
c00127de:	66 90                	xchg   ax,ax
c00127e0:	83 c4 10             	add    esp,0x10
c00127e3:	c3                   	ret    

c00127e4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00127e4:	83 ec 2c             	sub    esp,0x2c
c00127e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127ff:	0f b7 c0             	movzx  eax,ax
c0012802:	3d 06 08 00 00       	cmp    eax,0x806
c0012807:	75 13                	jne    c001281c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012809:	83 ec 0c             	sub    esp,0xc
c001280c:	68 4e 20 02 c0       	push   0xc002204e
c0012811:	e8 2f 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	eb 25                	jmp    c0012840 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001281b:	90                   	nop
c001281c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012820:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012823:	0f b7 c0             	movzx  eax,ax
c0012826:	3d 00 08 00 00       	cmp    eax,0x800
c001282b:	75 13                	jne    c0012840 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001282d:	83 ec 0c             	sub    esp,0xc
c0012830:	68 64 20 02 c0       	push   0xc0022064
c0012835:	e8 0b 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001283a:	83 c4 10             	add    esp,0x10
c001283d:	8d 76 00             	lea    esi,[esi+0x0]
c0012840:	90                   	nop
c0012841:	83 c4 2c             	add    esp,0x2c
c0012844:	c3                   	ret    

c0012845 <CmOpen(char const*)>:
c0012845:	57                   	push   edi
c0012846:	56                   	push   esi
c0012847:	53                   	push   ebx
c0012848:	83 ec 1c             	sub    esp,0x1c
c001284b:	6a 30                	push   0x30
c001284d:	e8 64 52 ff ff       	call   c0007ab6 <malloc>
c0012852:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012859:	89 c3                	mov    ebx,eax
c001285b:	e8 56 52 ff ff       	call   c0007ab6 <malloc>
c0012860:	83 c4 0c             	add    esp,0xc
c0012863:	89 c6                	mov    esi,eax
c0012865:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001286b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001286f:	50                   	push   eax
c0012870:	e8 fb 8f ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0012875:	83 c4 0c             	add    esp,0xc
c0012878:	89 33                	mov    DWORD PTR [ebx],esi
c001287a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001287e:	50                   	push   eax
c001287f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012883:	50                   	push   eax
c0012884:	56                   	push   esi
c0012885:	e8 b0 93 ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c001288a:	5a                   	pop    edx
c001288b:	59                   	pop    ecx
c001288c:	6a 01                	push   0x1
c001288e:	ff 33                	push   DWORD PTR [ebx]
c0012890:	e8 a3 90 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0012895:	5e                   	pop    esi
c0012896:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001289a:	e8 17 52 ff ff       	call   c0007ab6 <malloc>
c001289f:	5a                   	pop    edx
c00128a0:	89 c7                	mov    edi,eax
c00128a2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00128a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00128aa:	56                   	push   esi
c00128ab:	57                   	push   edi
c00128ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128b4:	50                   	push   eax
c00128b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128b8:	83 c4 14             	add    esp,0x14
c00128bb:	ff 33                	push   DWORD PTR [ebx]
c00128bd:	e8 d4 90 ff ff       	call   c000b996 <File::close()>
c00128c2:	59                   	pop    ecx
c00128c3:	58                   	pop    eax
c00128c4:	6a 13                	push   0x13
c00128c6:	ff 33                	push   DWORD PTR [ebx]
c00128c8:	e8 6b 90 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c00128cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00128d4:	57                   	push   edi
c00128d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128dd:	50                   	push   eax
c00128de:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128e1:	83 c4 14             	add    esp,0x14
c00128e4:	57                   	push   edi
c00128e5:	e8 dc 51 ff ff       	call   c0007ac6 <free>
c00128ea:	83 c4 10             	add    esp,0x10
c00128ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00128f0:	75 10                	jne    c0012902 <CmOpen(char const*)+0xbd>
c00128f2:	83 ec 0c             	sub    esp,0xc
c00128f5:	68 79 20 02 c0       	push   0xc0022079
c00128fa:	e8 c2 ea ff ff       	call   c00113c1 <KePanic(char const*)>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012905:	50                   	push   eax
c0012906:	6a 00                	push   0x0
c0012908:	6a 00                	push   0x0
c001290a:	ff 33                	push   DWORD PTR [ebx]
c001290c:	e8 e5 90 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0012911:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012913:	8b 10                	mov    edx,DWORD PTR [eax]
c0012915:	89 34 24             	mov    DWORD PTR [esp],esi
c0012918:	57                   	push   edi
c0012919:	6a 00                	push   0x0
c001291b:	6a 2b                	push   0x2b
c001291d:	50                   	push   eax
c001291e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012921:	83 c4 1c             	add    esp,0x1c
c0012924:	6a 00                	push   0x0
c0012926:	6a 00                	push   0x0
c0012928:	ff 33                	push   DWORD PTR [ebx]
c001292a:	e8 c7 90 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c001292f:	83 c4 0c             	add    esp,0xc
c0012932:	6a 08                	push   0x8
c0012934:	68 8a 20 02 c0       	push   0xc002208a
c0012939:	57                   	push   edi
c001293a:	e8 41 da fe ff       	call   c0000380 <memcmp>
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	85 c0                	test   eax,eax
c0012944:	74 10                	je     c0012956 <CmOpen(char const*)+0x111>
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	68 93 20 02 c0       	push   0xc0022093
c001294e:	e8 6e ea ff ff       	call   c00113c1 <KePanic(char const*)>
c0012953:	83 c4 10             	add    esp,0x10
c0012956:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001295a:	89 d8                	mov    eax,ebx
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	5b                   	pop    ebx
c0012960:	5e                   	pop    esi
c0012961:	5f                   	pop    edi
c0012962:	c3                   	ret    

c0012963 <CmClose(Reghive_Tag*)>:
c0012963:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012967:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001296b:	74 0b                	je     c0012978 <CmClose(Reghive_Tag*)+0x15>
c001296d:	8b 00                	mov    eax,DWORD PTR [eax]
c001296f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012973:	e9 1e 90 ff ff       	jmp    c000b996 <File::close()>
c0012978:	c3                   	ret    

c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012979:	53                   	push   ebx
c001297a:	83 ec 18             	sub    esp,0x18
c001297d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012981:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012985:	74 29                	je     c00129b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012987:	50                   	push   eax
c0012988:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001298d:	99                   	cdq    
c001298e:	52                   	push   edx
c001298f:	50                   	push   eax
c0012990:	ff 33                	push   DWORD PTR [ebx]
c0012992:	e8 5f 90 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0012997:	5a                   	pop    edx
c0012998:	8b 03                	mov    eax,DWORD PTR [ebx]
c001299a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001299e:	8b 10                	mov    edx,DWORD PTR [eax]
c00129a0:	51                   	push   ecx
c00129a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00129a5:	6a 00                	push   0x0
c00129a7:	6a 2b                	push   0x2b
c00129a9:	50                   	push   eax
c00129aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00129ad:	83 c4 20             	add    esp,0x20
c00129b0:	83 c4 18             	add    esp,0x18
c00129b3:	5b                   	pop    ebx
c00129b4:	c3                   	ret    

c00129b5 <CmGetString(Reghive_Tag*, int, char*)>:
c00129b5:	55                   	push   ebp
c00129b6:	57                   	push   edi
c00129b7:	56                   	push   esi
c00129b8:	53                   	push   ebx
c00129b9:	31 db                	xor    ebx,ebx
c00129bb:	83 ec 70             	sub    esp,0x70
c00129be:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00129c5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00129c9:	50                   	push   eax
c00129ca:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00129d1:	55                   	push   ebp
c00129d2:	e8 a2 ff ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00129df:	c1 e0 08             	shl    eax,0x8
c00129e2:	89 c2                	mov    edx,eax
c00129e4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00129e9:	09 d0                	or     eax,edx
c00129eb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00129f0:	c1 e0 08             	shl    eax,0x8
c00129f3:	09 d0                	or     eax,edx
c00129f5:	74 25                	je     c0012a1c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00129f7:	6b fb 0d             	imul   edi,ebx,0xd
c00129fa:	52                   	push   edx
c00129fb:	8d 54 24 39          	lea    edx,[esp+0x39]
c00129ff:	52                   	push   edx
c0012a00:	50                   	push   eax
c0012a01:	55                   	push   ebp
c0012a02:	e8 72 ff ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a07:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012a0b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012a12:	b9 27 00 00 00       	mov    ecx,0x27
c0012a17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	83 c3 03             	add    ebx,0x3
c0012a1f:	83 fb 15             	cmp    ebx,0x15
c0012a22:	75 b6                	jne    c00129da <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012a24:	83 c4 6c             	add    esp,0x6c
c0012a27:	5b                   	pop    ebx
c0012a28:	5e                   	pop    esi
c0012a29:	5f                   	pop    edi
c0012a2a:	5d                   	pop    ebp
c0012a2b:	c3                   	ret    

c0012a2c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012a2c:	83 ec 40             	sub    esp,0x40
c0012a2f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a33:	50                   	push   eax
c0012a34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a3c:	e8 38 ff ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	83 c8 ff             	or     eax,0xffffffff
c0012a47:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012a4c:	75 19                	jne    c0012a67 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012a4e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012a53:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012a58:	c1 e0 08             	shl    eax,0x8
c0012a5b:	09 c2                	or     edx,eax
c0012a5d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012a62:	c1 e0 10             	shl    eax,0x10
c0012a65:	09 d0                	or     eax,edx
c0012a67:	83 c4 3c             	add    esp,0x3c
c0012a6a:	c3                   	ret    

c0012a6b <CmGetNext(Reghive_Tag*, int)>:
c0012a6b:	83 ec 40             	sub    esp,0x40
c0012a6e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a72:	50                   	push   eax
c0012a73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a7b:	e8 f9 fe ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a80:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012a85:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012a8a:	c1 e0 08             	shl    eax,0x8
c0012a8d:	09 c2                	or     edx,eax
c0012a8f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012a94:	83 c4 4c             	add    esp,0x4c
c0012a97:	c1 e0 10             	shl    eax,0x10
c0012a9a:	09 d0                	or     eax,edx
c0012a9c:	c3                   	ret    

c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a9d:	53                   	push   ebx
c0012a9e:	83 ec 18             	sub    esp,0x18
c0012aa1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012aa5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012aa9:	74 29                	je     c0012ad4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012aab:	50                   	push   eax
c0012aac:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012ab1:	99                   	cdq    
c0012ab2:	52                   	push   edx
c0012ab3:	50                   	push   eax
c0012ab4:	ff 33                	push   DWORD PTR [ebx]
c0012ab6:	e8 3b 8f ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0012abb:	5a                   	pop    edx
c0012abc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012abe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ac2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ac4:	51                   	push   ecx
c0012ac5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ac9:	6a 00                	push   0x0
c0012acb:	6a 2b                	push   0x2b
c0012acd:	50                   	push   eax
c0012ace:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ad1:	83 c4 20             	add    esp,0x20
c0012ad4:	83 c4 18             	add    esp,0x18
c0012ad7:	5b                   	pop    ebx
c0012ad8:	c3                   	ret    

c0012ad9 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ad9:	53                   	push   ebx
c0012ada:	83 ec 3c             	sub    esp,0x3c
c0012add:	6a 2b                	push   0x2b
c0012adf:	6a 00                	push   0x0
c0012ae1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ae5:	53                   	push   ebx
c0012ae6:	e8 05 da fe ff       	call   c00004f0 <memset>
c0012aeb:	83 c4 0c             	add    esp,0xc
c0012aee:	53                   	push   ebx
c0012aef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012af3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012af7:	e8 a1 ff ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012afc:	83 c4 48             	add    esp,0x48
c0012aff:	5b                   	pop    ebx
c0012b00:	c3                   	ret    

c0012b01 <CmUpdateHeader(Reghive_Tag*)>:
c0012b01:	83 ec 0c             	sub    esp,0xc
c0012b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b08:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012b0c:	74 10                	je     c0012b1e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012b0e:	52                   	push   edx
c0012b0f:	8d 50 05             	lea    edx,[eax+0x5]
c0012b12:	52                   	push   edx
c0012b13:	6a 00                	push   0x0
c0012b15:	50                   	push   eax
c0012b16:	e8 82 ff ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b1b:	83 c4 10             	add    esp,0x10
c0012b1e:	83 c4 0c             	add    esp,0xc
c0012b21:	c3                   	ret    

c0012b22 <CmExpand(Reghive_Tag*, int)>:
c0012b22:	57                   	push   edi
c0012b23:	56                   	push   esi
c0012b24:	83 ce ff             	or     esi,0xffffffff
c0012b27:	53                   	push   ebx
c0012b28:	83 ec 30             	sub    esp,0x30
c0012b2b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b2f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b33:	74 5f                	je     c0012b94 <CmExpand(Reghive_Tag*, int)+0x72>
c0012b35:	31 d2                	xor    edx,edx
c0012b37:	31 f6                	xor    esi,esi
c0012b39:	50                   	push   eax
c0012b3a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012b3e:	52                   	push   edx
c0012b3f:	50                   	push   eax
c0012b40:	ff 33                	push   DWORD PTR [ebx]
c0012b42:	e8 af 8e ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0012b47:	83 c4 0c             	add    esp,0xc
c0012b4a:	6a 2b                	push   0x2b
c0012b4c:	6a 00                	push   0x0
c0012b4e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012b52:	57                   	push   edi
c0012b53:	e8 98 d9 fe ff       	call   c00004f0 <memset>
c0012b58:	83 c4 10             	add    esp,0x10
c0012b5b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012b5f:	7d 1b                	jge    c0012b7c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012b61:	83 ec 0c             	sub    esp,0xc
c0012b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b66:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b6c:	46                   	inc    esi
c0012b6d:	51                   	push   ecx
c0012b6e:	57                   	push   edi
c0012b6f:	6a 00                	push   0x0
c0012b71:	6a 2b                	push   0x2b
c0012b73:	50                   	push   eax
c0012b74:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b77:	83 c4 20             	add    esp,0x20
c0012b7a:	eb df                	jmp    c0012b5b <CmExpand(Reghive_Tag*, int)+0x39>
c0012b7c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012b80:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012b83:	83 ec 0c             	sub    esp,0xc
c0012b86:	01 f2                	add    edx,esi
c0012b88:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012b8b:	53                   	push   ebx
c0012b8c:	e8 70 ff ff ff       	call   c0012b01 <CmUpdateHeader(Reghive_Tag*)>
c0012b91:	83 c4 10             	add    esp,0x10
c0012b94:	83 c4 30             	add    esp,0x30
c0012b97:	89 f0                	mov    eax,esi
c0012b99:	5b                   	pop    ebx
c0012b9a:	5e                   	pop    esi
c0012b9b:	5f                   	pop    edi
c0012b9c:	c3                   	ret    

c0012b9d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012b9d:	55                   	push   ebp
c0012b9e:	57                   	push   edi
c0012b9f:	56                   	push   esi
c0012ba0:	53                   	push   ebx
c0012ba1:	83 cb ff             	or     ebx,0xffffffff
c0012ba4:	83 ec 1c             	sub    esp,0x1c
c0012ba7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012bab:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012baf:	74 68                	je     c0012c19 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012bb1:	be 2b 00 00 00       	mov    esi,0x2b
c0012bb6:	51                   	push   ecx
c0012bb7:	31 ff                	xor    edi,edi
c0012bb9:	6a 00                	push   0x0
c0012bbb:	31 db                	xor    ebx,ebx
c0012bbd:	6a 00                	push   0x0
c0012bbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012bc2:	e8 2f 8e ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012bcd:	76 3b                	jbe    c0012c0a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012bcf:	83 ec 0c             	sub    esp,0xc
c0012bd2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012bd5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bdb:	51                   	push   ecx
c0012bdc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012be0:	51                   	push   ecx
c0012be1:	6a 00                	push   0x0
c0012be3:	6a 01                	push   0x1
c0012be5:	50                   	push   eax
c0012be6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012be9:	83 c4 20             	add    esp,0x20
c0012bec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012bf1:	74 26                	je     c0012c19 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012bf3:	43                   	inc    ebx
c0012bf4:	52                   	push   edx
c0012bf5:	57                   	push   edi
c0012bf6:	56                   	push   esi
c0012bf7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012bfa:	e8 f7 8d ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0012bff:	83 c6 2b             	add    esi,0x2b
c0012c02:	83 d7 00             	adc    edi,0x0
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	eb c0                	jmp    c0012bca <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012c0a:	50                   	push   eax
c0012c0b:	50                   	push   eax
c0012c0c:	6a 40                	push   0x40
c0012c0e:	55                   	push   ebp
c0012c0f:	e8 0e ff ff ff       	call   c0012b22 <CmExpand(Reghive_Tag*, int)>
c0012c14:	83 c4 10             	add    esp,0x10
c0012c17:	89 c3                	mov    ebx,eax
c0012c19:	83 c4 1c             	add    esp,0x1c
c0012c1c:	89 d8                	mov    eax,ebx
c0012c1e:	5b                   	pop    ebx
c0012c1f:	5e                   	pop    esi
c0012c20:	5f                   	pop    edi
c0012c21:	5d                   	pop    ebp
c0012c22:	c3                   	ret    

c0012c23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012c23:	55                   	push   ebp
c0012c24:	57                   	push   edi
c0012c25:	56                   	push   esi
c0012c26:	53                   	push   ebx
c0012c27:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c2d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012c34:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c3b:	e8 5d ff ff ff       	call   c0012b9d <CmFindUnusedExtent(Reghive_Tag*)>
c0012c40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c44:	83 c4 0c             	add    esp,0xc
c0012c47:	6a 2b                	push   0x2b
c0012c49:	6a 00                	push   0x0
c0012c4b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012c4f:	55                   	push   ebp
c0012c50:	e8 9b d8 fe ff       	call   c00004f0 <memset>
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	85 db                	test   ebx,ebx
c0012c5a:	74 12                	je     c0012c6e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012c5c:	51                   	push   ecx
c0012c5d:	55                   	push   ebp
c0012c5e:	53                   	push   ebx
c0012c5f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c66:	e8 0e fd ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012c72:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012c79:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012c7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c80:	85 db                	test   ebx,ebx
c0012c82:	74 49                	je     c0012ccd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012c84:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012c89:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c92:	c1 e0 08             	shl    eax,0x8
c0012c95:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012c9b:	09 c8                	or     eax,ecx
c0012c9d:	74 11                	je     c0012cb0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012c9f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012ca3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012ca7:	c1 e8 10             	shr    eax,0x10
c0012caa:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012cae:	eb 0f                	jmp    c0012cbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012cb0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012cb5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012cba:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012cbf:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012cc3:	c1 ea 08             	shr    edx,0x8
c0012cc6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012ccb:	eb 0f                	jmp    c0012cdc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012ccd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012cd2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012cd7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012cdc:	52                   	push   edx
c0012cdd:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012ce1:	50                   	push   eax
c0012ce2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ce6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ced:	e8 ab fd ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	85 db                	test   ebx,ebx
c0012cf7:	74 12                	je     c0012d0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012cf9:	50                   	push   eax
c0012cfa:	55                   	push   ebp
c0012cfb:	53                   	push   ebx
c0012cfc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d03:	e8 95 fd ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d08:	83 c4 10             	add    esp,0x10
c0012d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d0f:	83 c4 7c             	add    esp,0x7c
c0012d12:	5b                   	pop    ebx
c0012d13:	5e                   	pop    esi
c0012d14:	5f                   	pop    edi
c0012d15:	5d                   	pop    ebp
c0012d16:	c3                   	ret    

c0012d17 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012d17:	55                   	push   ebp
c0012d18:	57                   	push   edi
c0012d19:	56                   	push   esi
c0012d1a:	53                   	push   ebx
c0012d1b:	bb 27 00 00 00       	mov    ebx,0x27
c0012d20:	81 ec 88 00 00 00    	sub    esp,0x88
c0012d26:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012d2d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012d34:	e8 37 d8 fe ff       	call   c0000570 <strlen>
c0012d39:	8d 48 26             	lea    ecx,[eax+0x26]
c0012d3c:	89 c8                	mov    eax,ecx
c0012d3e:	99                   	cdq    
c0012d3f:	f7 fb                	idiv   ebx
c0012d41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012d4e:	7e 10                	jle    c0012d60 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012d50:	83 ec 0c             	sub    esp,0xc
c0012d53:	68 a4 20 02 c0       	push   0xc00220a4
c0012d58:	e8 64 e6 ff ff       	call   c00113c1 <KePanic(char const*)>
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	31 ff                	xor    edi,edi
c0012d62:	50                   	push   eax
c0012d63:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012d67:	53                   	push   ebx
c0012d68:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d6f:	56                   	push   esi
c0012d70:	e8 04 fc ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d75:	83 c4 10             	add    esp,0x10
c0012d78:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012d7c:	89 d0                	mov    eax,edx
c0012d7e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012d82:	c1 e0 08             	shl    eax,0x8
c0012d85:	09 c2                	or     edx,eax
c0012d87:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012d8b:	c1 e2 08             	shl    edx,0x8
c0012d8e:	09 c2                	or     edx,eax
c0012d90:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012d94:	7e 76                	jle    c0012e0c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012d96:	85 d2                	test   edx,edx
c0012d98:	75 25                	jne    c0012dbf <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012d9a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012d9f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012da3:	50                   	push   eax
c0012da4:	6a 00                	push   0x0
c0012da6:	6a 00                	push   0x0
c0012da8:	56                   	push   esi
c0012da9:	e8 75 fe ff ff       	call   c0012c23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	89 c2                	mov    edx,eax
c0012db3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012db6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012db9:	c1 f8 10             	sar    eax,0x10
c0012dbc:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012dbf:	55                   	push   ebp
c0012dc0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012dc4:	55                   	push   ebp
c0012dc5:	52                   	push   edx
c0012dc6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012dca:	56                   	push   esi
c0012dcb:	e8 a9 fb ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dd0:	83 c4 0c             	add    esp,0xc
c0012dd3:	6a 27                	push   0x27
c0012dd5:	6a 00                	push   0x0
c0012dd7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012ddb:	51                   	push   ecx
c0012ddc:	e8 0f d7 fe ff       	call   c00004f0 <memset>
c0012de1:	83 c4 0c             	add    esp,0xc
c0012de4:	6b c7 27             	imul   eax,edi,0x27
c0012de7:	6a 27                	push   0x27
c0012de9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012df0:	50                   	push   eax
c0012df1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012df5:	51                   	push   ecx
c0012df6:	e8 85 d8 fe ff       	call   c0000680 <strncpy>
c0012dfb:	83 c4 0c             	add    esp,0xc
c0012dfe:	55                   	push   ebp
c0012dff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e03:	52                   	push   edx
c0012e04:	56                   	push   esi
c0012e05:	e8 93 fc ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0a:	eb 19                	jmp    c0012e25 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012e0c:	85 d2                	test   edx,edx
c0012e0e:	74 18                	je     c0012e28 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012e10:	51                   	push   ecx
c0012e11:	51                   	push   ecx
c0012e12:	52                   	push   edx
c0012e13:	56                   	push   esi
c0012e14:	e8 c0 fc ff ff       	call   c0012ad9 <CmFreeExtent(Reghive_Tag*, int)>
c0012e19:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012e1d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012e21:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	47                   	inc    edi
c0012e29:	83 c3 03             	add    ebx,0x3
c0012e2c:	83 ff 07             	cmp    edi,0x7
c0012e2f:	0f 85 43 ff ff ff    	jne    c0012d78 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012e35:	50                   	push   eax
c0012e36:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012e3a:	50                   	push   eax
c0012e3b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e42:	56                   	push   esi
c0012e43:	e8 55 fc ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e48:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012e4e:	5b                   	pop    ebx
c0012e4f:	5e                   	pop    esi
c0012e50:	5f                   	pop    edi
c0012e51:	5d                   	pop    ebp
c0012e52:	c3                   	ret    

c0012e53 <CmGetMatch(char*, char*, bool, bool*)>:
c0012e53:	56                   	push   esi
c0012e54:	53                   	push   ebx
c0012e55:	50                   	push   eax
c0012e56:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e5a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012e5f:	74 25                	je     c0012e86 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012e61:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e64:	31 db                	xor    ebx,ebx
c0012e66:	50                   	push   eax
c0012e67:	50                   	push   eax
c0012e68:	8d 04 9d 40 35 02 c0 	lea    eax,[ebx*4-0x3ffdcac0]
c0012e6f:	50                   	push   eax
c0012e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e74:	e8 d7 d8 fe ff       	call   c0000750 <strcmp>
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	85 c0                	test   eax,eax
c0012e7e:	74 2e                	je     c0012eae <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e80:	43                   	inc    ebx
c0012e81:	83 fb 3f             	cmp    ebx,0x3f
c0012e84:	75 e0                	jne    c0012e66 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012e86:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e89:	31 db                	xor    ebx,ebx
c0012e8b:	8d 04 9d 40 35 02 c0 	lea    eax,[ebx*4-0x3ffdcac0]
c0012e92:	51                   	push   ecx
c0012e93:	51                   	push   ecx
c0012e94:	50                   	push   eax
c0012e95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e99:	e8 b2 d8 fe ff       	call   c0000750 <strcmp>
c0012e9e:	83 c4 10             	add    esp,0x10
c0012ea1:	85 c0                	test   eax,eax
c0012ea3:	74 09                	je     c0012eae <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012ea5:	43                   	inc    ebx
c0012ea6:	83 fb 3f             	cmp    ebx,0x3f
c0012ea9:	75 e0                	jne    c0012e8b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012eab:	83 cb ff             	or     ebx,0xffffffff
c0012eae:	89 d8                	mov    eax,ebx
c0012eb0:	5a                   	pop    edx
c0012eb1:	5b                   	pop    ebx
c0012eb2:	5e                   	pop    esi
c0012eb3:	c3                   	ret    

c0012eb4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012eb4:	55                   	push   ebp
c0012eb5:	31 c0                	xor    eax,eax
c0012eb7:	57                   	push   edi
c0012eb8:	56                   	push   esi
c0012eb9:	53                   	push   ebx
c0012eba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ebe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ec2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012ec4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012ec8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012ecb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ecf:	83 fd 1f             	cmp    ebp,0x1f
c0012ed2:	7f 0b                	jg     c0012edf <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012ed4:	0f b6 c2             	movzx  eax,dl
c0012ed7:	d3 e0                	shl    eax,cl
c0012ed9:	09 07                	or     DWORD PTR [edi],eax
c0012edb:	b0 01                	mov    al,0x1
c0012edd:	01 33                	add    DWORD PTR [ebx],esi
c0012edf:	5b                   	pop    ebx
c0012ee0:	5e                   	pop    esi
c0012ee1:	5f                   	pop    edi
c0012ee2:	5d                   	pop    ebp
c0012ee3:	c3                   	ret    

c0012ee4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012ee4:	57                   	push   edi
c0012ee5:	56                   	push   esi
c0012ee6:	53                   	push   ebx
c0012ee7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012eeb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012eef:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012ef3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ef7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012ef9:	7c 17                	jl     c0012f12 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012efb:	8b 17                	mov    edx,DWORD PTR [edi]
c0012efd:	b8 01 00 00 00       	mov    eax,0x1
c0012f02:	d3 e0                	shl    eax,cl
c0012f04:	48                   	dec    eax
c0012f05:	21 d0                	and    eax,edx
c0012f07:	d3 ea                	shr    edx,cl
c0012f09:	89 17                	mov    DWORD PTR [edi],edx
c0012f0b:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012f0d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012f10:	eb 05                	jmp    c0012f17 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012f12:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f15:	31 c0                	xor    eax,eax
c0012f17:	5b                   	pop    ebx
c0012f18:	5e                   	pop    esi
c0012f19:	5f                   	pop    edi
c0012f1a:	c3                   	ret    

c0012f1b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012f1b:	83 ec 40             	sub    esp,0x40
c0012f1e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f22:	50                   	push   eax
c0012f23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2b:	e8 49 fa ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f30:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012f34:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012f38:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012f3c:	89 10                	mov    DWORD PTR [eax],edx
c0012f3e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012f41:	83 c4 4c             	add    esp,0x4c
c0012f44:	c3                   	ret    

c0012f45 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012f45:	55                   	push   ebp
c0012f46:	57                   	push   edi
c0012f47:	56                   	push   esi
c0012f48:	53                   	push   ebx
c0012f49:	83 ec 40             	sub    esp,0x40
c0012f4c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012f50:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012f54:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012f58:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012f5c:	53                   	push   ebx
c0012f5d:	56                   	push   esi
c0012f5e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f62:	e8 12 fa ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f67:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012f6b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012f6f:	83 c4 0c             	add    esp,0xc
c0012f72:	53                   	push   ebx
c0012f73:	56                   	push   esi
c0012f74:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f78:	e8 20 fb ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f7d:	83 c4 4c             	add    esp,0x4c
c0012f80:	5b                   	pop    ebx
c0012f81:	5e                   	pop    esi
c0012f82:	5f                   	pop    edi
c0012f83:	5d                   	pop    ebp
c0012f84:	c3                   	ret    

c0012f85 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012f85:	55                   	push   ebp
c0012f86:	57                   	push   edi
c0012f87:	56                   	push   esi
c0012f88:	31 f6                	xor    esi,esi
c0012f8a:	53                   	push   ebx
c0012f8b:	31 db                	xor    ebx,ebx
c0012f8d:	83 ec 40             	sub    esp,0x40
c0012f90:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f98:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012fa0:	6a 12                	push   0x12
c0012fa2:	68 ee 00 00 00       	push   0xee
c0012fa7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012fab:	e8 40 d5 fe ff       	call   c00004f0 <memset>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012fb7:	6a 08                	push   0x8
c0012fb9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fbd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012fc1:	50                   	push   eax
c0012fc2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012fc6:	55                   	push   ebp
c0012fc7:	57                   	push   edi
c0012fc8:	e8 e7 fe ff ff       	call   c0012eb4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012fcd:	83 c4 10             	add    esp,0x10
c0012fd0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fd4:	50                   	push   eax
c0012fd5:	6a 06                	push   0x6
c0012fd7:	55                   	push   ebp
c0012fd8:	57                   	push   edi
c0012fd9:	e8 06 ff ff ff       	call   c0012ee4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fde:	83 c4 10             	add    esp,0x10
c0012fe1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fe6:	74 07                	je     c0012fef <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012fe8:	46                   	inc    esi
c0012fe9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012fed:	eb e1                	jmp    c0012fd0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012fef:	43                   	inc    ebx
c0012ff0:	83 fb 12             	cmp    ebx,0x12
c0012ff3:	75 c2                	jne    c0012fb7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012ff5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ff9:	31 db                	xor    ebx,ebx
c0012ffb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012ffe:	50                   	push   eax
c0012fff:	50                   	push   eax
c0013000:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013005:	43                   	inc    ebx
c0013006:	8d 04 85 40 35 02 c0 	lea    eax,[eax*4-0x3ffdcac0]
c001300d:	50                   	push   eax
c001300e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013012:	e8 29 d8 fe ff       	call   c0000840 <strcat>
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	83 fb 18             	cmp    ebx,0x18
c001301d:	75 df                	jne    c0012ffe <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001301f:	83 c4 3c             	add    esp,0x3c
c0013022:	31 c0                	xor    eax,eax
c0013024:	5b                   	pop    ebx
c0013025:	5e                   	pop    esi
c0013026:	5f                   	pop    edi
c0013027:	5d                   	pop    ebp
c0013028:	c3                   	ret    

c0013029 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013029:	83 ec 40             	sub    esp,0x40
c001302c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013030:	50                   	push   eax
c0013031:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013039:	e8 3b f9 ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001303e:	58                   	pop    eax
c001303f:	5a                   	pop    edx
c0013040:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013044:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013048:	50                   	push   eax
c0013049:	e8 37 ff ff ff       	call   c0012f85 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001304e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013053:	83 c4 4c             	add    esp,0x4c
c0013056:	c3                   	ret    

c0013057 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013057:	55                   	push   ebp
c0013058:	57                   	push   edi
c0013059:	56                   	push   esi
c001305a:	53                   	push   ebx
c001305b:	31 db                	xor    ebx,ebx
c001305d:	83 ec 70             	sub    esp,0x70
c0013060:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013067:	6a 30                	push   0x30
c0013069:	6a 00                	push   0x0
c001306b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001306f:	56                   	push   esi
c0013070:	e8 7b d4 fe ff       	call   c00004f0 <memset>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	83 ec 0c             	sub    esp,0xc
c001307b:	57                   	push   edi
c001307c:	e8 ef d4 fe ff       	call   c0000570 <strlen>
c0013081:	83 c4 10             	add    esp,0x10
c0013084:	39 d8                	cmp    eax,ebx
c0013086:	76 16                	jbe    c001309e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013088:	83 ec 0c             	sub    esp,0xc
c001308b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001308f:	50                   	push   eax
c0013090:	e8 9b d8 fe ff       	call   c0000930 <toupper>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001309b:	43                   	inc    ebx
c001309c:	eb da                	jmp    c0013078 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001309e:	31 f6                	xor    esi,esi
c00130a0:	52                   	push   edx
c00130a1:	31 ff                	xor    edi,edi
c00130a3:	6a 18                	push   0x18
c00130a5:	6a 3f                	push   0x3f
c00130a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00130ab:	50                   	push   eax
c00130ac:	e8 3f d4 fe ff       	call   c00004f0 <memset>
c00130b1:	83 c4 10             	add    esp,0x10
c00130b4:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00130b8:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00130bc:	84 c0                	test   al,al
c00130be:	0f 84 b0 00 00 00    	je     c0013174 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00130c4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00130c8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00130cd:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00130d1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00130d6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00130d9:	83 ec 0c             	sub    esp,0xc
c00130dc:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00130e0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00130e4:	53                   	push   ebx
c00130e5:	e8 86 d4 fe ff       	call   c0000570 <strlen>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	85 c0                	test   eax,eax
c00130ef:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130f3:	74 0b                	je     c0013100 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00130f5:	50                   	push   eax
c00130f6:	6a 01                	push   0x1
c00130f8:	53                   	push   ebx
c00130f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130fd:	50                   	push   eax
c00130fe:	eb 0a                	jmp    c001310a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013100:	50                   	push   eax
c0013101:	6a 00                	push   0x0
c0013103:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013107:	50                   	push   eax
c0013108:	6a 00                	push   0x0
c001310a:	e8 44 fd ff ff       	call   c0012e53 <CmGetMatch(char*, char*, bool, bool*)>
c001310f:	83 c4 10             	add    esp,0x10
c0013112:	83 f8 ff             	cmp    eax,0xffffffff
c0013115:	75 1a                	jne    c0013131 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013117:	83 ec 0c             	sub    esp,0xc
c001311a:	68 b9 20 02 c0       	push   0xc00220b9
c001311f:	e8 9d e2 ff ff       	call   c00113c1 <KePanic(char const*)>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	b8 02 00 00 00       	mov    eax,0x2
c001312c:	e9 bc 00 00 00       	jmp    c00131ed <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013131:	83 ff 18             	cmp    edi,0x18
c0013134:	75 1a                	jne    c0013150 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013136:	83 ec 0c             	sub    esp,0xc
c0013139:	68 ce 20 02 c0       	push   0xc00220ce
c001313e:	e8 7e e2 ff ff       	call   c00113c1 <KePanic(char const*)>
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	b8 01 00 00 00       	mov    eax,0x1
c001314b:	e9 9d 00 00 00       	jmp    c00131ed <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013150:	47                   	inc    edi
c0013151:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013156:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001315a:	74 02                	je     c001315e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001315c:	89 ee                	mov    esi,ebp
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	53                   	push   ebx
c0013162:	e8 09 d4 fe ff       	call   c0000570 <strlen>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	85 c0                	test   eax,eax
c001316c:	74 06                	je     c0013174 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001316e:	46                   	inc    esi
c001316f:	e9 40 ff ff ff       	jmp    c00130b4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013174:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001317c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013184:	31 f6                	xor    esi,esi
c0013186:	50                   	push   eax
c0013187:	31 ff                	xor    edi,edi
c0013189:	6a 12                	push   0x12
c001318b:	68 ee 00 00 00       	push   0xee
c0013190:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013197:	e8 54 d3 fe ff       	call   c00004f0 <memset>
c001319c:	83 c4 10             	add    esp,0x10
c001319f:	83 fe 17             	cmp    esi,0x17
c00131a2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00131a6:	7e 26                	jle    c00131ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00131a8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00131ac:	50                   	push   eax
c00131ad:	6a 08                	push   0x8
c00131af:	55                   	push   ebp
c00131b0:	53                   	push   ebx
c00131b1:	e8 2e fd ff ff       	call   c0012ee4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131be:	74 26                	je     c00131e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00131c0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00131c7:	4e                   	dec    esi
c00131c8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00131cb:	47                   	inc    edi
c00131cc:	eb 1c                	jmp    c00131ea <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00131ce:	6a 06                	push   0x6
c00131d0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00131d5:	50                   	push   eax
c00131d6:	55                   	push   ebp
c00131d7:	53                   	push   ebx
c00131d8:	e8 d7 fc ff ff       	call   c0012eb4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	84 c0                	test   al,al
c00131e2:	75 06                	jne    c00131ea <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00131e4:	eb c2                	jmp    c00131a8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00131e6:	31 c0                	xor    eax,eax
c00131e8:	eb 03                	jmp    c00131ed <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00131ea:	46                   	inc    esi
c00131eb:	eb b2                	jmp    c001319f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00131ed:	83 c4 6c             	add    esp,0x6c
c00131f0:	5b                   	pop    ebx
c00131f1:	5e                   	pop    esi
c00131f2:	5f                   	pop    edi
c00131f3:	5d                   	pop    ebp
c00131f4:	c3                   	ret    

c00131f5 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00131f5:	53                   	push   ebx
c00131f6:	83 ec 3c             	sub    esp,0x3c
c00131f9:	6a 2b                	push   0x2b
c00131fb:	6a 00                	push   0x0
c00131fd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013201:	53                   	push   ebx
c0013202:	e8 e9 d2 fe ff       	call   c00004f0 <memset>
c0013207:	58                   	pop    eax
c0013208:	5a                   	pop    edx
c0013209:	8d 44 24 11          	lea    eax,[esp+0x11]
c001320d:	50                   	push   eax
c001320e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013212:	e8 40 fe ff ff       	call   c0013057 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013217:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001321c:	83 c4 0c             	add    esp,0xc
c001321f:	6a 15                	push   0x15
c0013221:	6a 00                	push   0x0
c0013223:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013227:	50                   	push   eax
c0013228:	e8 c3 d2 fe ff       	call   c00004f0 <memset>
c001322d:	53                   	push   ebx
c001322e:	6a 00                	push   0x0
c0013230:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013234:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013238:	e8 e6 f9 ff ff       	call   c0012c23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001323d:	83 c4 58             	add    esp,0x58
c0013240:	5b                   	pop    ebx
c0013241:	c3                   	ret    

c0013242 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013242:	56                   	push   esi
c0013243:	53                   	push   ebx
c0013244:	83 ec 48             	sub    esp,0x48
c0013247:	6a 12                	push   0x12
c0013249:	68 ff 00 00 00       	push   0xff
c001324e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013252:	56                   	push   esi
c0013253:	e8 98 d2 fe ff       	call   c00004f0 <memset>
c0013258:	5a                   	pop    edx
c0013259:	59                   	pop    ecx
c001325a:	56                   	push   esi
c001325b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001325f:	e8 f3 fd ff ff       	call   c0013057 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001326b:	85 db                	test   ebx,ebx
c001326d:	74 42                	je     c00132b1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001326f:	50                   	push   eax
c0013270:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013274:	50                   	push   eax
c0013275:	53                   	push   ebx
c0013276:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001327a:	e8 fa f6 ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001327f:	83 c4 0c             	add    esp,0xc
c0013282:	6a 12                	push   0x12
c0013284:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013288:	50                   	push   eax
c0013289:	56                   	push   esi
c001328a:	e8 f1 d0 fe ff       	call   c0000380 <memcmp>
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	85 c0                	test   eax,eax
c0013294:	74 1e                	je     c00132b4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013296:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001329b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00132a0:	c1 e3 08             	shl    ebx,0x8
c00132a3:	09 d8                	or     eax,ebx
c00132a5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00132aa:	c1 e3 10             	shl    ebx,0x10
c00132ad:	09 c3                	or     ebx,eax
c00132af:	eb ba                	jmp    c001326b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00132b1:	83 cb ff             	or     ebx,0xffffffff
c00132b4:	89 d8                	mov    eax,ebx
c00132b6:	83 c4 44             	add    esp,0x44
c00132b9:	5b                   	pop    ebx
c00132ba:	5e                   	pop    esi
c00132bb:	c3                   	ret    

c00132bc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00132bc:	57                   	push   edi
c00132bd:	56                   	push   esi
c00132be:	53                   	push   ebx
c00132bf:	83 ec 34             	sub    esp,0x34
c00132c2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00132c6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00132ca:	6a 2b                	push   0x2b
c00132cc:	6a 00                	push   0x0
c00132ce:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00132d2:	53                   	push   ebx
c00132d3:	e8 18 d2 fe ff       	call   c00004f0 <memset>
c00132d8:	58                   	pop    eax
c00132d9:	5a                   	pop    edx
c00132da:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132de:	50                   	push   eax
c00132df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00132e3:	e8 6f fd ff ff       	call   c0013057 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132e8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00132ec:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00132f0:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00132f4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00132f8:	53                   	push   ebx
c00132f9:	6a 00                	push   0x0
c00132fb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013303:	e8 1b f9 ff ff       	call   c0012c23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013308:	83 c4 50             	add    esp,0x50
c001330b:	5b                   	pop    ebx
c001330c:	5e                   	pop    esi
c001330d:	5f                   	pop    edi
c001330e:	c3                   	ret    

c001330f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001330f:	55                   	push   ebp
c0013310:	57                   	push   edi
c0013311:	56                   	push   esi
c0013312:	53                   	push   ebx
c0013313:	83 ec 40             	sub    esp,0x40
c0013316:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001331a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001331e:	6a 2b                	push   0x2b
c0013320:	6a 00                	push   0x0
c0013322:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013326:	56                   	push   esi
c0013327:	e8 c4 d1 fe ff       	call   c00004f0 <memset>
c001332c:	5f                   	pop    edi
c001332d:	89 ef                	mov    edi,ebp
c001332f:	58                   	pop    eax
c0013330:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013334:	50                   	push   eax
c0013335:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013339:	e8 19 fd ff ff       	call   c0013057 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001333e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013343:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013348:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001334d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	85 ed                	test   ebp,ebp
c0013357:	74 14                	je     c001336d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013359:	51                   	push   ecx
c001335a:	51                   	push   ecx
c001335b:	57                   	push   edi
c001335c:	53                   	push   ebx
c001335d:	e8 09 f7 ff ff       	call   c0012a6b <CmGetNext(Reghive_Tag*, int)>
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	85 c0                	test   eax,eax
c0013367:	74 04                	je     c001336d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013369:	89 c7                	mov    edi,eax
c001336b:	eb e8                	jmp    c0013355 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001336d:	56                   	push   esi
c001336e:	6a 00                	push   0x0
c0013370:	57                   	push   edi
c0013371:	53                   	push   ebx
c0013372:	e8 ac f8 ff ff       	call   c0012c23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013377:	83 c4 0c             	add    esp,0xc
c001337a:	89 c7                	mov    edi,eax
c001337c:	56                   	push   esi
c001337d:	50                   	push   eax
c001337e:	53                   	push   ebx
c001337f:	e8 f5 f5 ff ff       	call   c0012979 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013384:	58                   	pop    eax
c0013385:	5a                   	pop    edx
c0013386:	6a 6c                	push   0x6c
c0013388:	6a 00                	push   0x0
c001338a:	6a 00                	push   0x0
c001338c:	68 df 20 02 c0       	push   0xc00220df
c0013391:	57                   	push   edi
c0013392:	53                   	push   ebx
c0013393:	e8 24 ff ff ff       	call   c00132bc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013398:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001339c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00133a0:	c1 e8 10             	shr    eax,0x10
c00133a3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00133a7:	83 c4 1c             	add    esp,0x1c
c00133aa:	56                   	push   esi
c00133ab:	57                   	push   edi
c00133ac:	53                   	push   ebx
c00133ad:	e8 eb f6 ff ff       	call   c0012a9d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00133b2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00133b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00133bc:	c1 e0 08             	shl    eax,0x8
c00133bf:	09 c2                	or     edx,eax
c00133c1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00133c6:	83 c4 4c             	add    esp,0x4c
c00133c9:	c1 e0 10             	shl    eax,0x10
c00133cc:	5b                   	pop    ebx
c00133cd:	09 d0                	or     eax,edx
c00133cf:	5e                   	pop    esi
c00133d0:	5f                   	pop    edi
c00133d1:	5d                   	pop    ebp
c00133d2:	c3                   	ret    

c00133d3 <zStrtok(char*, char const*)>:
c00133d3:	55                   	push   ebp
c00133d4:	57                   	push   edi
c00133d5:	56                   	push   esi
c00133d6:	53                   	push   ebx
c00133d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133df:	85 db                	test   ebx,ebx
c00133e1:	74 2f                	je     c0013412 <zStrtok(char*, char const*)+0x3f>
c00133e3:	85 c0                	test   eax,eax
c00133e5:	75 09                	jne    c00133f0 <zStrtok(char*, char const*)+0x1d>
c00133e7:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00133ec:	85 c0                	test   eax,eax
c00133ee:	74 50                	je     c0013440 <zStrtok(char*, char const*)+0x6d>
c00133f0:	31 c9                	xor    ecx,ecx
c00133f2:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00133f6:	74 03                	je     c00133fb <zStrtok(char*, char const*)+0x28>
c00133f8:	41                   	inc    ecx
c00133f9:	eb f7                	jmp    c00133f2 <zStrtok(char*, char const*)+0x1f>
c00133fb:	31 d2                	xor    edx,edx
c00133fd:	39 ca                	cmp    edx,ecx
c00133ff:	74 15                	je     c0013416 <zStrtok(char*, char const*)+0x43>
c0013401:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013405:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013408:	8d 3c 10             	lea    edi,[eax+edx*1]
c001340b:	39 ee                	cmp    esi,ebp
c001340d:	74 13                	je     c0013422 <zStrtok(char*, char const*)+0x4f>
c001340f:	42                   	inc    edx
c0013410:	eb eb                	jmp    c00133fd <zStrtok(char*, char const*)+0x2a>
c0013412:	31 c0                	xor    eax,eax
c0013414:	eb 2a                	jmp    c0013440 <zStrtok(char*, char const*)+0x6d>
c0013416:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013420:	eb 1e                	jmp    c0013440 <zStrtok(char*, char const*)+0x6d>
c0013422:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013425:	39 ce                	cmp    esi,ecx
c0013427:	75 0a                	jne    c0013433 <zStrtok(char*, char const*)+0x60>
c0013429:	40                   	inc    eax
c001342a:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001342f:	89 d8                	mov    eax,ebx
c0013431:	eb 0d                	jmp    c0013440 <zStrtok(char*, char const*)+0x6d>
c0013433:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013437:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001343a:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013440:	5b                   	pop    ebx
c0013441:	5e                   	pop    esi
c0013442:	5f                   	pop    edi
c0013443:	5d                   	pop    ebp
c0013444:	c3                   	ret    

c0013445 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013445:	57                   	push   edi
c0013446:	56                   	push   esi
c0013447:	53                   	push   ebx
c0013448:	81 ec 08 01 00 00    	sub    esp,0x108
c001344e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013455:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001345c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013460:	53                   	push   ebx
c0013461:	e8 da d1 fe ff       	call   c0000640 <strcpy>
c0013466:	59                   	pop    ecx
c0013467:	5e                   	pop    esi
c0013468:	68 43 24 02 c0       	push   0xc0022443
c001346d:	53                   	push   ebx
c001346e:	bb 01 00 00 00       	mov    ebx,0x1
c0013473:	e8 5b ff ff ff       	call   c00133d3 <zStrtok(char*, char const*)>
c0013478:	83 c4 10             	add    esp,0x10
c001347b:	85 c0                	test   eax,eax
c001347d:	74 3b                	je     c00134ba <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001347f:	52                   	push   edx
c0013480:	50                   	push   eax
c0013481:	6a 01                	push   0x1
c0013483:	57                   	push   edi
c0013484:	e8 b9 fd ff ff       	call   c0013242 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013489:	59                   	pop    ecx
c001348a:	89 c3                	mov    ebx,eax
c001348c:	5e                   	pop    esi
c001348d:	68 43 24 02 c0       	push   0xc0022443
c0013492:	6a 00                	push   0x0
c0013494:	e8 3a ff ff ff       	call   c00133d3 <zStrtok(char*, char const*)>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	89 c6                	mov    esi,eax
c001349e:	85 c0                	test   eax,eax
c00134a0:	74 18                	je     c00134ba <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00134a2:	52                   	push   edx
c00134a3:	52                   	push   edx
c00134a4:	53                   	push   ebx
c00134a5:	57                   	push   edi
c00134a6:	e8 81 f5 ff ff       	call   c0012a2c <CmEnterDirectory(Reghive_Tag*, int)>
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	89 c3                	mov    ebx,eax
c00134b0:	83 f8 ff             	cmp    eax,0xffffffff
c00134b3:	74 05                	je     c00134ba <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00134b5:	50                   	push   eax
c00134b6:	56                   	push   esi
c00134b7:	53                   	push   ebx
c00134b8:	eb c9                	jmp    c0013483 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00134ba:	81 c4 00 01 00 00    	add    esp,0x100
c00134c0:	89 d8                	mov    eax,ebx
c00134c2:	5b                   	pop    ebx
c00134c3:	5e                   	pop    esi
c00134c4:	5f                   	pop    edi
c00134c5:	c3                   	ret    

c00134c6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00134c6:	55                   	push   ebp
c00134c7:	57                   	push   edi
c00134c8:	56                   	push   esi
c00134c9:	53                   	push   ebx
c00134ca:	83 ec 5c             	sub    esp,0x5c
c00134cd:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00134d1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00134d5:	85 db                	test   ebx,ebx
c00134d7:	0f 8e 84 00 00 00    	jle    c0013561 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00134dd:	31 ed                	xor    ebp,ebp
c00134df:	57                   	push   edi
c00134e0:	6a 32                	push   0x32
c00134e2:	6a 00                	push   0x0
c00134e4:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00134e8:	57                   	push   edi
c00134e9:	e8 02 d0 fe ff       	call   c00004f0 <memset>
c00134ee:	83 c4 0c             	add    esp,0xc
c00134f1:	57                   	push   edi
c00134f2:	53                   	push   ebx
c00134f3:	56                   	push   esi
c00134f4:	e8 30 fb ff ff       	call   c0013029 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013504:	7d 13                	jge    c0013519 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013506:	83 ec 0c             	sub    esp,0xc
c0013509:	45                   	inc    ebp
c001350a:	68 e7 27 02 c0       	push   0xc00227e7
c001350f:	e8 31 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	eb e7                	jmp    c0013500 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013519:	51                   	push   ecx
c001351a:	57                   	push   edi
c001351b:	53                   	push   ebx
c001351c:	68 e5 20 02 c0       	push   0xc00220e5
c0013521:	e8 1f 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001352e:	75 1e                	jne    c001354e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013530:	52                   	push   edx
c0013531:	52                   	push   edx
c0013532:	53                   	push   ebx
c0013533:	56                   	push   esi
c0013534:	e8 f3 f4 ff ff       	call   c0012a2c <CmEnterDirectory(Reghive_Tag*, int)>
c0013539:	83 c4 0c             	add    esp,0xc
c001353c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013540:	8d 51 04             	lea    edx,[ecx+0x4]
c0013543:	52                   	push   edx
c0013544:	50                   	push   eax
c0013545:	56                   	push   esi
c0013546:	e8 7b ff ff ff       	call   c00134c6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001354b:	83 c4 10             	add    esp,0x10
c001354e:	50                   	push   eax
c001354f:	50                   	push   eax
c0013550:	53                   	push   ebx
c0013551:	56                   	push   esi
c0013552:	e8 14 f5 ff ff       	call   c0012a6b <CmGetNext(Reghive_Tag*, int)>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	89 c3                	mov    ebx,eax
c001355c:	e9 74 ff ff ff       	jmp    c00134d5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013561:	83 c4 5c             	add    esp,0x5c
c0013564:	5b                   	pop    ebx
c0013565:	5e                   	pop    esi
c0013566:	5f                   	pop    edi
c0013567:	5d                   	pop    ebp
c0013568:	c3                   	ret    

c0013569 <CmSplitFinalSlashInPlace(char*)>:
c0013569:	53                   	push   ebx
c001356a:	83 ec 14             	sub    esp,0x14
c001356d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013571:	53                   	push   ebx
c0013572:	e8 f9 cf fe ff       	call   c0000570 <strlen>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	48                   	dec    eax
c001357b:	85 c0                	test   eax,eax
c001357d:	74 15                	je     c0013594 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001357f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013582:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013586:	75 09                	jne    c0013591 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013588:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001358b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001358f:	eb 05                	jmp    c0013596 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013591:	48                   	dec    eax
c0013592:	eb e7                	jmp    c001357b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013594:	31 c0                	xor    eax,eax
c0013596:	83 c4 08             	add    esp,0x8
c0013599:	5b                   	pop    ebx
c001359a:	c3                   	ret    

c001359b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001359b:	55                   	push   ebp
c001359c:	57                   	push   edi
c001359d:	56                   	push   esi
c001359e:	53                   	push   ebx
c001359f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00135a5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00135ac:	8a 13                	mov    dl,BYTE PTR [ebx]
c00135ae:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00135b1:	80 fa 40             	cmp    dl,0x40
c00135b4:	75 1c                	jne    c00135d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00135b6:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00135b9:	85 c9                	test   ecx,ecx
c00135bb:	0f 84 09 01 00 00    	je     c00136ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135c1:	8d 43 01             	lea    eax,[ebx+0x1]
c00135c4:	83 f9 3a             	cmp    ecx,0x3a
c00135c7:	74 04                	je     c00135cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00135c9:	89 c3                	mov    ebx,eax
c00135cb:	eb e9                	jmp    c00135b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00135cd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00135d0:	89 c3                	mov    ebx,eax
c00135d2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00135d6:	50                   	push   eax
c00135d7:	6a 40                	push   0x40
c00135d9:	6a 00                	push   0x0
c00135db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135df:	50                   	push   eax
c00135e0:	e8 0b cf fe ff       	call   c00004f0 <memset>
c00135e5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00135ec:	31 c0                	xor    eax,eax
c00135ee:	83 c4 10             	add    esp,0x10
c00135f1:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00135f6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00135f9:	89 d1                	mov    ecx,edx
c00135fb:	85 d2                	test   edx,edx
c00135fd:	0f 84 c7 00 00 00    	je     c00136ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013603:	3d c7 00 00 00       	cmp    eax,0xc7
c0013608:	0f 8f bc 00 00 00    	jg     c00136ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001360e:	83 fa 0a             	cmp    edx,0xa
c0013611:	0f 85 a4 00 00 00    	jne    c00136bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013617:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001361c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013621:	89 c8                	mov    eax,ecx
c0013623:	a8 df                	test   al,0xdf
c0013625:	0f 94 c2             	sete   dl
c0013628:	83 f9 23             	cmp    ecx,0x23
c001362b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013630:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013634:	80 e2 01             	and    dl,0x1
c0013637:	75 4a                	jne    c0013683 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013639:	83 e8 09             	sub    eax,0x9
c001363c:	3c 01                	cmp    al,0x1
c001363e:	76 43                	jbe    c0013683 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013640:	83 f9 5b             	cmp    ecx,0x5b
c0013643:	75 42                	jne    c0013687 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013645:	83 fe 40             	cmp    esi,0x40
c0013648:	75 39                	jne    c0013683 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013651:	52                   	push   edx
c0013652:	e8 19 cf fe ff       	call   c0000570 <strlen>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	83 f8 3f             	cmp    eax,0x3f
c001365d:	77 6b                	ja     c00136ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001365f:	50                   	push   eax
c0013660:	50                   	push   eax
c0013661:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013665:	52                   	push   edx
c0013666:	8d 54 24 24          	lea    edx,[esp+0x24]
c001366a:	52                   	push   edx
c001366b:	e8 d0 cf fe ff       	call   c0000640 <strcpy>
c0013670:	58                   	pop    eax
c0013671:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013675:	52                   	push   edx
c0013676:	e8 f5 ce fe ff       	call   c0000570 <strlen>
c001367b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	31 d2                	xor    edx,edx
c0013685:	eb 3b                	jmp    c00136c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013687:	83 fe 40             	cmp    esi,0x40
c001368a:	74 06                	je     c0013692 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c001368c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013690:	eb 20                	jmp    c00136b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013692:	50                   	push   eax
c0013693:	50                   	push   eax
c0013694:	55                   	push   ebp
c0013695:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013699:	50                   	push   eax
c001369a:	e8 b1 d0 fe ff       	call   c0000750 <strcmp>
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	85 c0                	test   eax,eax
c00136a4:	75 dd                	jne    c0013683 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136a6:	eb e4                	jmp    c001368c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00136a8:	8d 50 01             	lea    edx,[eax+0x1]
c00136ab:	83 f9 3d             	cmp    ecx,0x3d
c00136ae:	74 1e                	je     c00136ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00136b0:	89 d0                	mov    eax,edx
c00136b2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00136b5:	85 c9                	test   ecx,ecx
c00136b7:	75 ef                	jne    c00136a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00136b9:	eb 0f                	jmp    c00136ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00136bb:	8d 50 01             	lea    edx,[eax+0x1]
c00136be:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00136c2:	47                   	inc    edi
c00136c3:	89 d0                	mov    eax,edx
c00136c5:	e9 2c ff ff ff       	jmp    c00135f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00136ca:	31 c0                	xor    eax,eax
c00136cc:	eb 33                	jmp    c0013701 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00136ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00136d2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00136d5:	50                   	push   eax
c00136d6:	50                   	push   eax
c00136d7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00136db:	50                   	push   eax
c00136dc:	53                   	push   ebx
c00136dd:	e8 6e d0 fe ff       	call   c0000750 <strcmp>
c00136e2:	83 c4 10             	add    esp,0x10
c00136e5:	85 c0                	test   eax,eax
c00136e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136eb:	75 96                	jne    c0013683 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136ed:	51                   	push   ecx
c00136ee:	51                   	push   ecx
c00136ef:	52                   	push   edx
c00136f0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00136f7:	e8 44 cf fe ff       	call   c0000640 <strcpy>
c00136fc:	83 c4 10             	add    esp,0x10
c00136ff:	b0 01                	mov    al,0x1
c0013701:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013707:	5b                   	pop    ebx
c0013708:	5e                   	pop    esi
c0013709:	5f                   	pop    edi
c001370a:	5d                   	pop    ebp
c001370b:	c3                   	ret    

c001370c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001370c:	57                   	push   edi
c001370d:	56                   	push   esi
c001370e:	53                   	push   ebx
c001370f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013715:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001371c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013723:	53                   	push   ebx
c0013724:	e8 47 ce fe ff       	call   c0000570 <strlen>
c0013729:	89 34 24             	mov    DWORD PTR [esp],esi
c001372c:	89 c7                	mov    edi,eax
c001372e:	e8 3d ce fe ff       	call   c0000570 <strlen>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001373a:	3d ff 00 00 00       	cmp    eax,0xff
c001373f:	0f 87 d3 00 00 00    	ja     c0013818 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013745:	57                   	push   edi
c0013746:	57                   	push   edi
c0013747:	56                   	push   esi
c0013748:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001374c:	56                   	push   esi
c001374d:	e8 ee ce fe ff       	call   c0000640 <strcpy>
c0013752:	58                   	pop    eax
c0013753:	5a                   	pop    edx
c0013754:	68 43 24 02 c0       	push   0xc0022443
c0013759:	56                   	push   esi
c001375a:	e8 e1 d0 fe ff       	call   c0000840 <strcat>
c001375f:	59                   	pop    ecx
c0013760:	5f                   	pop    edi
c0013761:	53                   	push   ebx
c0013762:	56                   	push   esi
c0013763:	e8 d8 d0 fe ff       	call   c0000840 <strcat>
c0013768:	58                   	pop    eax
c0013769:	5a                   	pop    edx
c001376a:	68 ef 20 02 c0       	push   0xc00220ef
c001376f:	56                   	push   esi
c0013770:	e8 cb d0 fe ff       	call   c0000840 <strcat>
c0013775:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001377c:	e8 35 43 ff ff       	call   c0007ab6 <malloc>
c0013781:	83 c4 0c             	add    esp,0xc
c0013784:	89 c3                	mov    ebx,eax
c0013786:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001378c:	56                   	push   esi
c001378d:	50                   	push   eax
c001378e:	e8 dd 80 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	85 db                	test   ebx,ebx
c0013798:	74 7e                	je     c0013818 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001379a:	51                   	push   ecx
c001379b:	51                   	push   ecx
c001379c:	6a 01                	push   0x1
c001379e:	53                   	push   ebx
c001379f:	e8 94 81 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	85 c0                	test   eax,eax
c00137a9:	74 08                	je     c00137b3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b0:	53                   	push   ebx
c00137b1:	eb 5f                	jmp    c0013812 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00137b3:	52                   	push   edx
c00137b4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00137b8:	50                   	push   eax
c00137b9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00137bd:	50                   	push   eax
c00137be:	53                   	push   ebx
c00137bf:	e8 76 84 ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c00137c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	89 c1                	mov    ecx,eax
c00137cd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00137d1:	74 31                	je     c0013804 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137d3:	83 ec 0c             	sub    esp,0xc
c00137d6:	50                   	push   eax
c00137d7:	e8 da 42 ff ff       	call   c0007ab6 <malloc>
c00137dc:	89 c6                	mov    esi,eax
c00137de:	58                   	pop    eax
c00137df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00137e5:	52                   	push   edx
c00137e6:	56                   	push   esi
c00137e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137ef:	53                   	push   ebx
c00137f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137f3:	83 c4 20             	add    esp,0x20
c00137f6:	85 c0                	test   eax,eax
c00137f8:	75 0a                	jne    c0013804 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137fe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013802:	74 18                	je     c001381c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	53                   	push   ebx
c0013808:	e8 89 81 ff ff       	call   c000b996 <File::close()>
c001380d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013812:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	31 c0                	xor    eax,eax
c001381a:	eb 3b                	jmp    c0013857 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	53                   	push   ebx
c0013820:	e8 71 81 ff ff       	call   c000b996 <File::close()>
c0013825:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001382a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001382d:	83 c4 0c             	add    esp,0xc
c0013830:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013837:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001383e:	56                   	push   esi
c001383f:	e8 57 fd ff ff       	call   c001359b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013844:	89 34 24             	mov    DWORD PTR [esp],esi
c0013847:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001384b:	e8 76 42 ff ff       	call   c0007ac6 <free>
c0013850:	83 c4 10             	add    esp,0x10
c0013853:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013857:	81 c4 20 01 00 00    	add    esp,0x120
c001385d:	5b                   	pop    ebx
c001385e:	5e                   	pop    esi
c001385f:	5f                   	pop    edi
c0013860:	c3                   	ret    

c0013861 <Reg::getLine(char*, char*, char*)>:
c0013861:	57                   	push   edi
c0013862:	56                   	push   esi
c0013863:	53                   	push   ebx
c0013864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013868:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001386c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013870:	57                   	push   edi
c0013871:	56                   	push   esi
c0013872:	53                   	push   ebx
c0013873:	68 f4 20 02 c0       	push   0xc00220f4
c0013878:	e8 8f fe ff ff       	call   c001370c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	84 c0                	test   al,al
c0013882:	75 10                	jne    c0013894 <Reg::getLine(char*, char*, char*)+0x33>
c0013884:	57                   	push   edi
c0013885:	56                   	push   esi
c0013886:	53                   	push   ebx
c0013887:	68 19 21 02 c0       	push   0xc0022119
c001388c:	e8 7b fe ff ff       	call   c001370c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	5b                   	pop    ebx
c0013895:	5e                   	pop    esi
c0013896:	5f                   	pop    edi
c0013897:	c3                   	ret    

c0013898 <Reg::readInt(char*, char*, int*)>:
c0013898:	55                   	push   ebp
c0013899:	57                   	push   edi
c001389a:	56                   	push   esi
c001389b:	53                   	push   ebx
c001389c:	81 ec f0 00 00 00    	sub    esp,0xf0
c00138a2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00138a6:	55                   	push   ebp
c00138a7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00138ae:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00138b5:	e8 a7 ff ff ff       	call   c0013861 <Reg::getLine(char*, char*, char*)>
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	84 c0                	test   al,al
c00138bf:	0f 84 b6 00 00 00    	je     c001397b <Reg::readInt(char*, char*, int*)+0xe3>
c00138c5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00138ca:	83 fa 2b             	cmp    edx,0x2b
c00138cd:	74 0c                	je     c00138db <Reg::readInt(char*, char*, int*)+0x43>
c00138cf:	83 fa 2d             	cmp    edx,0x2d
c00138d2:	75 0e                	jne    c00138e2 <Reg::readInt(char*, char*, int*)+0x4a>
c00138d4:	ba 01 00 00 00       	mov    edx,0x1
c00138d9:	eb 0b                	jmp    c00138e6 <Reg::readInt(char*, char*, int*)+0x4e>
c00138db:	ba 01 00 00 00       	mov    edx,0x1
c00138e0:	eb 02                	jmp    c00138e4 <Reg::readInt(char*, char*, int*)+0x4c>
c00138e2:	31 d2                	xor    edx,edx
c00138e4:	31 c0                	xor    eax,eax
c00138e6:	be 0a 00 00 00       	mov    esi,0xa
c00138eb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00138f0:	75 21                	jne    c0013913 <Reg::readInt(char*, char*, int*)+0x7b>
c00138f2:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00138f7:	83 f9 78             	cmp    ecx,0x78
c00138fa:	75 0a                	jne    c0013906 <Reg::readInt(char*, char*, int*)+0x6e>
c00138fc:	83 c2 02             	add    edx,0x2
c00138ff:	be 10 00 00 00       	mov    esi,0x10
c0013904:	eb 0d                	jmp    c0013913 <Reg::readInt(char*, char*, int*)+0x7b>
c0013906:	83 f9 62             	cmp    ecx,0x62
c0013909:	75 08                	jne    c0013913 <Reg::readInt(char*, char*, int*)+0x7b>
c001390b:	83 c2 02             	add    edx,0x2
c001390e:	be 02 00 00 00       	mov    esi,0x2
c0013913:	01 d5                	add    ebp,edx
c0013915:	31 d2                	xor    edx,edx
c0013917:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c001391b:	83 f9 0d             	cmp    ecx,0xd
c001391e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013922:	0f 94 c3             	sete   bl
c0013925:	85 c9                	test   ecx,ecx
c0013927:	89 df                	mov    edi,ebx
c0013929:	0f 94 c3             	sete   bl
c001392c:	09 df                	or     edi,ebx
c001392e:	89 fb                	mov    ebx,edi
c0013930:	83 e7 01             	and    edi,0x1
c0013933:	75 35                	jne    c001396a <Reg::readInt(char*, char*, int*)+0xd2>
c0013935:	0f af d6             	imul   edx,esi
c0013938:	83 fe 10             	cmp    esi,0x10
c001393b:	75 26                	jne    c0013963 <Reg::readInt(char*, char*, int*)+0xcb>
c001393d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013941:	83 ef 41             	sub    edi,0x41
c0013944:	89 fb                	mov    ebx,edi
c0013946:	80 fb 05             	cmp    bl,0x5
c0013949:	77 06                	ja     c0013951 <Reg::readInt(char*, char*, int*)+0xb9>
c001394b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001394f:	eb 16                	jmp    c0013967 <Reg::readInt(char*, char*, int*)+0xcf>
c0013951:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013955:	83 eb 61             	sub    ebx,0x61
c0013958:	80 fb 05             	cmp    bl,0x5
c001395b:	77 06                	ja     c0013963 <Reg::readInt(char*, char*, int*)+0xcb>
c001395d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013961:	eb 04                	jmp    c0013967 <Reg::readInt(char*, char*, int*)+0xcf>
c0013963:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013967:	45                   	inc    ebp
c0013968:	eb ad                	jmp    c0013917 <Reg::readInt(char*, char*, int*)+0x7f>
c001396a:	84 c0                	test   al,al
c001396c:	74 02                	je     c0013970 <Reg::readInt(char*, char*, int*)+0xd8>
c001396e:	f7 da                	neg    edx
c0013970:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013977:	89 10                	mov    DWORD PTR [eax],edx
c0013979:	88 d8                	mov    al,bl
c001397b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013981:	5b                   	pop    ebx
c0013982:	5e                   	pop    esi
c0013983:	5f                   	pop    edi
c0013984:	5d                   	pop    ebp
c0013985:	c3                   	ret    

c0013986 <Reg::readString(char*, char*, char*, int)>:
c0013986:	57                   	push   edi
c0013987:	56                   	push   esi
c0013988:	53                   	push   ebx
c0013989:	81 ec d4 00 00 00    	sub    esp,0xd4
c001398f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013996:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001399a:	57                   	push   edi
c001399b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00139a2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00139a9:	e8 b3 fe ff ff       	call   c0013861 <Reg::getLine(char*, char*, char*)>
c00139ae:	83 c4 10             	add    esp,0x10
c00139b1:	89 c6                	mov    esi,eax
c00139b3:	84 c0                	test   al,al
c00139b5:	74 44                	je     c00139fb <Reg::readString(char*, char*, char*, int)+0x75>
c00139b7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00139be:	31 c0                	xor    eax,eax
c00139c0:	4a                   	dec    edx
c00139c1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00139c4:	84 c9                	test   cl,cl
c00139c6:	74 0f                	je     c00139d7 <Reg::readString(char*, char*, char*, int)+0x51>
c00139c8:	39 c2                	cmp    edx,eax
c00139ca:	7e 0b                	jle    c00139d7 <Reg::readString(char*, char*, char*, int)+0x51>
c00139cc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00139cf:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00139d4:	40                   	inc    eax
c00139d5:	eb ea                	jmp    c00139c1 <Reg::readString(char*, char*, char*, int)+0x3b>
c00139d7:	83 ec 0c             	sub    esp,0xc
c00139da:	53                   	push   ebx
c00139db:	e8 90 cb fe ff       	call   c0000570 <strlen>
c00139e0:	83 c4 10             	add    esp,0x10
c00139e3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00139e8:	75 11                	jne    c00139fb <Reg::readString(char*, char*, char*, int)+0x75>
c00139ea:	83 ec 0c             	sub    esp,0xc
c00139ed:	53                   	push   ebx
c00139ee:	e8 7d cb fe ff       	call   c0000570 <strlen>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00139fb:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013a01:	89 f0                	mov    eax,esi
c0013a03:	5b                   	pop    ebx
c0013a04:	5e                   	pop    esi
c0013a05:	5f                   	pop    edi
c0013a06:	c3                   	ret    

c0013a07 <Reg::readBool(char*, char*, bool*)>:
c0013a07:	83 ec 20             	sub    esp,0x20
c0013a0a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a0e:	50                   	push   eax
c0013a0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a17:	e8 7c fe ff ff       	call   c0013898 <Reg::readInt(char*, char*, int*)>
c0013a1c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013a21:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013a25:	0f 95 02             	setne  BYTE PTR [edx]
c0013a28:	83 c4 2c             	add    esp,0x2c
c0013a2b:	c3                   	ret    

c0013a2c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013a2c:	53                   	push   ebx
c0013a2d:	83 ec 1c             	sub    esp,0x1c
c0013a30:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013a34:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013a38:	50                   	push   eax
c0013a39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a41:	e8 c1 ff ff ff       	call   c0013a07 <Reg::readBool(char*, char*, bool*)>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	84 c0                	test   al,al
c0013a4b:	74 04                	je     c0013a51 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013a4d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013a51:	88 d8                	mov    al,bl
c0013a53:	83 c4 18             	add    esp,0x18
c0013a56:	5b                   	pop    ebx
c0013a57:	c3                   	ret    

c0013a58 <Reg::readIntWithDefault(char*, char*, int)>:
c0013a58:	53                   	push   ebx
c0013a59:	83 ec 1c             	sub    esp,0x1c
c0013a5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a60:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a64:	50                   	push   eax
c0013a65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6d:	e8 26 fe ff ff       	call   c0013898 <Reg::readInt(char*, char*, int*)>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	84 c0                	test   al,al
c0013a77:	74 04                	je     c0013a7d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013a79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a7d:	89 d8                	mov    eax,ebx
c0013a7f:	83 c4 18             	add    esp,0x18
c0013a82:	5b                   	pop    ebx
c0013a83:	c3                   	ret    

c0013a84 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013a84:	57                   	push   edi
c0013a85:	56                   	push   esi
c0013a86:	56                   	push   esi
c0013a87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a8b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013a8f:	56                   	push   esi
c0013a90:	57                   	push   edi
c0013a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a99:	e8 e8 fe ff ff       	call   c0013986 <Reg::readString(char*, char*, char*, int)>
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	84 c0                	test   al,al
c0013aa3:	75 1a                	jne    c0013abf <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013aa5:	51                   	push   ecx
c0013aa6:	56                   	push   esi
c0013aa7:	6a 00                	push   0x0
c0013aa9:	57                   	push   edi
c0013aaa:	e8 41 ca fe ff       	call   c00004f0 <memset>
c0013aaf:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ab2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ab8:	83 c4 10             	add    esp,0x10
c0013abb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013abf:	89 f8                	mov    eax,edi
c0013ac1:	5a                   	pop    edx
c0013ac2:	5e                   	pop    esi
c0013ac3:	5f                   	pop    edi
c0013ac4:	c3                   	ret    

c0013ac5 <SysEject(regs*)>:
c0013ac5:	83 ec 0c             	sub    esp,0xc
c0013ac8:	83 ca ff             	or     edx,0xffffffff
c0013acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013acf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ad2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ad7:	83 e9 41             	sub    ecx,0x41
c0013ada:	83 f9 19             	cmp    ecx,0x19
c0013add:	77 18                	ja     c0013af7 <SysEject(regs*)+0x32>
c0013adf:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013ae6:	85 c9                	test   ecx,ecx
c0013ae8:	74 0d                	je     c0013af7 <SysEject(regs*)+0x32>
c0013aea:	83 ec 0c             	sub    esp,0xc
c0013aed:	51                   	push   ecx
c0013aee:	e8 17 a0 ff ff       	call   c000db0a <LogicalDisk::eject()>
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	99                   	cdq    
c0013af7:	83 c4 0c             	add    esp,0xc
c0013afa:	c3                   	ret    

c0013afb <SysExit(regs*)>:
c0013afb:	83 ec 18             	sub    esp,0x18
c0013afe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b02:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b05:	e8 16 2b 00 00       	call   c0016620 <terminateTask(int)>
c0013b0a:	83 c8 ff             	or     eax,0xffffffff
c0013b0d:	83 c4 1c             	add    esp,0x1c
c0013b10:	89 c2                	mov    edx,eax
c0013b12:	c3                   	ret    

c0013b13 <SysGetCwd(regs*)>:
c0013b13:	83 ec 10             	sub    esp,0x10
c0013b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b1a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013b1d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b25:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b28:	e8 69 7a ff ff       	call   c000b596 <Fs::getcwd(Process*, char*, int)>
c0013b2d:	83 c4 1c             	add    esp,0x1c
c0013b30:	99                   	cdq    
c0013b31:	c3                   	ret    

c0013b32 <SysGetPID(regs*)>:
c0013b32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b3c:	99                   	cdq    
c0013b3d:	c3                   	ret    

c0013b3e <SysGetRAMData(regs*)>:
c0013b3e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013b44:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013b4e:	99                   	cdq    
c0013b4f:	f7 f9                	idiv   ecx
c0013b51:	c1 e0 18             	shl    eax,0x18
c0013b54:	09 c8                	or     eax,ecx
c0013b56:	99                   	cdq    
c0013b57:	c3                   	ret    

c0013b58 <SysGetVGAPtr(regs*)>:
c0013b58:	55                   	push   ebp
c0013b59:	57                   	push   edi
c0013b5a:	56                   	push   esi
c0013b5b:	53                   	push   ebx
c0013b5c:	83 ec 18             	sub    esp,0x18
c0013b5f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b63:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b66:	e8 81 25 00 00       	call   c00160ec <Thr::processFromPID(int)>
c0013b6b:	83 c4 10             	add    esp,0x10
c0013b6e:	89 c1                	mov    ecx,eax
c0013b70:	b8 01 00 00 00       	mov    eax,0x1
c0013b75:	85 c9                	test   ecx,ecx
c0013b77:	74 57                	je     c0013bd0 <SysGetVGAPtr(regs*)+0x78>
c0013b79:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013b7f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013b83:	74 0c                	je     c0013b91 <SysGetVGAPtr(regs*)+0x39>
c0013b85:	83 ec 0c             	sub    esp,0xc
c0013b88:	55                   	push   ebp
c0013b89:	e8 cb 4b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013b8e:	83 c4 10             	add    esp,0x10
c0013b91:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b94:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b97:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b9e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013ba1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ba4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013baa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013bad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013bb0:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013bb6:	50                   	push   eax
c0013bb7:	50                   	push   eax
c0013bb8:	68 34 21 02 c0       	push   0xc0022134
c0013bbd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013bc0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013bc5:	50                   	push   eax
c0013bc6:	e8 75 ca fe ff       	call   c0000640 <strcpy>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	31 c0                	xor    eax,eax
c0013bd0:	83 c4 0c             	add    esp,0xc
c0013bd3:	31 d2                	xor    edx,edx
c0013bd5:	5b                   	pop    ebx
c0013bd6:	5e                   	pop    esi
c0013bd7:	5f                   	pop    edi
c0013bd8:	5d                   	pop    ebp
c0013bd9:	c3                   	ret    
c0013bda:	66 90                	xchg   ax,ax

c0013bdc <SysKill(regs*)>:
c0013bdc:	53                   	push   ebx
c0013bdd:	83 ec 08             	sub    esp,0x8
c0013be0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013be4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013be8:	75 16                	jne    c0013c00 <SysKill(regs*)+0x24>
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	68 3e 21 02 c0       	push   0xc002213e
c0013bf2:	e8 ca d7 ff ff       	call   c00113c1 <KePanic(char const*)>
c0013bf7:	83 c4 10             	add    esp,0x10
c0013bfa:	e9 89 00 00 00       	jmp    c0013c88 <SysKill(regs*)+0xac>
c0013bff:	90                   	nop
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 e4 96 02 c0       	push   0xc00296e4
c0013c08:	e8 cf bc 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 c4 10             	add    esp,0x10
c0013c13:	85 c0                	test   eax,eax
c0013c15:	74 19                	je     c0013c30 <SysKill(regs*)+0x54>
c0013c17:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c1a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c1d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c1f:	74 33                	je     c0013c54 <SysKill(regs*)+0x78>
c0013c21:	52                   	push   edx
c0013c22:	52                   	push   edx
c0013c23:	50                   	push   eax
c0013c24:	68 e4 96 02 c0       	push   0xc00296e4
c0013c29:	e8 ce bf 00 00       	call   c001fbfc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c2e:	eb e0                	jmp    c0013c10 <SysKill(regs*)+0x34>
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	68 d8 96 02 c0       	push   0xc00296d8
c0013c38:	e8 9f bc 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c40:	83 c4 10             	add    esp,0x10
c0013c43:	85 c0                	test   eax,eax
c0013c45:	74 41                	je     c0013c88 <SysKill(regs*)+0xac>
c0013c47:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c4a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c4d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c4f:	75 27                	jne    c0013c78 <SysKill(regs*)+0x9c>
c0013c51:	8d 76 00             	lea    esi,[esi+0x0]
c0013c54:	51                   	push   ecx
c0013c55:	51                   	push   ecx
c0013c56:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c5e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c61:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c67:	e8 f6 db ff ff       	call   c0011862 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	31 c0                	xor    eax,eax
c0013c71:	31 d2                	xor    edx,edx
c0013c73:	eb 1b                	jmp    c0013c90 <SysKill(regs*)+0xb4>
c0013c75:	8d 76 00             	lea    esi,[esi+0x0]
c0013c78:	52                   	push   edx
c0013c79:	52                   	push   edx
c0013c7a:	50                   	push   eax
c0013c7b:	68 d8 96 02 c0       	push   0xc00296d8
c0013c80:	e8 77 bf 00 00       	call   c001fbfc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c85:	eb b9                	jmp    c0013c40 <SysKill(regs*)+0x64>
c0013c87:	90                   	nop
c0013c88:	83 c8 ff             	or     eax,0xffffffff
c0013c8b:	89 c2                	mov    edx,eax
c0013c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c90:	83 c4 08             	add    esp,0x8
c0013c93:	5b                   	pop    ebx
c0013c94:	c3                   	ret    

c0013c95 <SysLoadDLL(regs*)>:
c0013c95:	56                   	push   esi
c0013c96:	53                   	push   ebx
c0013c97:	31 d2                	xor    edx,edx
c0013c99:	51                   	push   ecx
c0013c9a:	b8 01 00 00 00       	mov    eax,0x1
c0013c9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ca3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013ca7:	0f 84 8c 00 00 00    	je     c0013d39 <SysLoadDLL(regs*)+0xa4>
c0013cad:	83 ec 0c             	sub    esp,0xc
c0013cb0:	68 14 01 00 00       	push   0x114
c0013cb5:	e8 fc 3d ff ff       	call   c0007ab6 <malloc>
c0013cba:	83 c4 0c             	add    esp,0xc
c0013cbd:	89 c3                	mov    ebx,eax
c0013cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013cc7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013cca:	53                   	push   ebx
c0013ccb:	e8 a0 7b ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0013cd0:	83 c4 10             	add    esp,0x10
c0013cd3:	31 d2                	xor    edx,edx
c0013cd5:	b8 02 00 00 00       	mov    eax,0x2
c0013cda:	85 db                	test   ebx,ebx
c0013cdc:	74 5b                	je     c0013d39 <SysLoadDLL(regs*)+0xa4>
c0013cde:	83 ec 0c             	sub    esp,0xc
c0013ce1:	53                   	push   ebx
c0013ce2:	e8 15 7f ff ff       	call   c000bbfc <File::exists()>
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	84 c0                	test   al,al
c0013cec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cee:	75 11                	jne    c0013d01 <SysLoadDLL(regs*)+0x6c>
c0013cf0:	83 ec 0c             	sub    esp,0xc
c0013cf3:	53                   	push   ebx
c0013cf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cf7:	83 c4 10             	add    esp,0x10
c0013cfa:	b8 03 00 00 00       	mov    eax,0x3
c0013cff:	eb 36                	jmp    c0013d37 <SysLoadDLL(regs*)+0xa2>
c0013d01:	83 ec 0c             	sub    esp,0xc
c0013d04:	53                   	push   ebx
c0013d05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d08:	58                   	pop    eax
c0013d09:	5a                   	pop    edx
c0013d0a:	6a 00                	push   0x0
c0013d0c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d0f:	e8 0e 15 00 00       	call   c0015222 <Thr::loadDLL(char const*, bool)>
c0013d14:	83 c4 10             	add    esp,0x10
c0013d17:	89 c1                	mov    ecx,eax
c0013d19:	31 d2                	xor    edx,edx
c0013d1b:	b8 04 00 00 00       	mov    eax,0x4
c0013d20:	85 c9                	test   ecx,ecx
c0013d22:	74 15                	je     c0013d39 <SysLoadDLL(regs*)+0xa4>
c0013d24:	53                   	push   ebx
c0013d25:	53                   	push   ebx
c0013d26:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013d2c:	51                   	push   ecx
c0013d2d:	e8 21 17 00 00       	call   c0015453 <Thr::executeDLL(unsigned long, void*)>
c0013d32:	83 c4 10             	add    esp,0x10
c0013d35:	31 c0                	xor    eax,eax
c0013d37:	31 d2                	xor    edx,edx
c0013d39:	59                   	pop    ecx
c0013d3a:	5b                   	pop    ebx
c0013d3b:	5e                   	pop    esi
c0013d3c:	c3                   	ret    

c0013d3d <SysRead(regs*)>:
c0013d3d:	57                   	push   edi
c0013d3e:	56                   	push   esi
c0013d3f:	53                   	push   ebx
c0013d40:	83 ec 10             	sub    esp,0x10
c0013d43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d4a:	83 f8 02             	cmp    eax,0x2
c0013d4d:	77 10                	ja     c0013d5f <SysRead(regs*)+0x22>
c0013d4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d57:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013d5d:	eb 0e                	jmp    c0013d6d <SysRead(regs*)+0x30>
c0013d5f:	83 ec 0c             	sub    esp,0xc
c0013d62:	50                   	push   eax
c0013d63:	e8 4b 57 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	89 c1                	mov    ecx,eax
c0013d6d:	83 c8 ff             	or     eax,0xffffffff
c0013d70:	85 c9                	test   ecx,ecx
c0013d72:	89 c2                	mov    edx,eax
c0013d74:	74 28                	je     c0013d9e <SysRead(regs*)+0x61>
c0013d76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d7e:	31 ff                	xor    edi,edi
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d85:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013d89:	52                   	push   edx
c0013d8a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d8d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013d90:	57                   	push   edi
c0013d91:	56                   	push   esi
c0013d92:	51                   	push   ecx
c0013d93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d9a:	83 c4 20             	add    esp,0x20
c0013d9d:	99                   	cdq    
c0013d9e:	83 c4 10             	add    esp,0x10
c0013da1:	5b                   	pop    ebx
c0013da2:	5e                   	pop    esi
c0013da3:	5f                   	pop    edi
c0013da4:	c3                   	ret    

c0013da5 <SysRegisterSignal(regs*)>:
c0013da5:	83 ec 18             	sub    esp,0x18
c0013da8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dac:	6a 00                	push   0x0
c0013dae:	6a 00                	push   0x0
c0013db0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013db3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013db6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013dbe:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013dc4:	e8 63 da ff ff       	call   c001182c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013dc9:	83 c4 2c             	add    esp,0x2c
c0013dcc:	99                   	cdq    
c0013dcd:	c3                   	ret    

c0013dce <SysRegistryGetTypeFromPath(regs*)>:
c0013dce:	57                   	push   edi
c0013dcf:	56                   	push   esi
c0013dd0:	53                   	push   ebx
c0013dd1:	81 ec 38 01 00 00    	sub    esp,0x138
c0013dd7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013dde:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013de1:	68 5f 21 02 c0       	push   0xc002215f
c0013de6:	e8 5a 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013deb:	5a                   	pop    edx
c0013dec:	59                   	pop    ecx
c0013ded:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013df0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013df3:	e8 4d f6 ff ff       	call   c0013445 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013df8:	5f                   	pop    edi
c0013df9:	89 c6                	mov    esi,eax
c0013dfb:	5a                   	pop    edx
c0013dfc:	50                   	push   eax
c0013dfd:	68 7f 21 02 c0       	push   0xc002217f
c0013e02:	e8 3e 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	85 f6                	test   esi,esi
c0013e0c:	74 28                	je     c0013e36 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013e0e:	50                   	push   eax
c0013e0f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e13:	57                   	push   edi
c0013e14:	56                   	push   esi
c0013e15:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e18:	e8 0c f2 ff ff       	call   c0013029 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e1d:	83 c4 0c             	add    esp,0xc
c0013e20:	89 c3                	mov    ebx,eax
c0013e22:	57                   	push   edi
c0013e23:	50                   	push   eax
c0013e24:	68 87 21 02 c0       	push   0xc0022187
c0013e29:	e8 17 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e2e:	89 d8                	mov    eax,ebx
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	99                   	cdq    
c0013e34:	eb 05                	jmp    c0013e3b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013e36:	83 c8 ff             	or     eax,0xffffffff
c0013e39:	89 c2                	mov    edx,eax
c0013e3b:	81 c4 30 01 00 00    	add    esp,0x130
c0013e41:	5b                   	pop    ebx
c0013e42:	5e                   	pop    esi
c0013e43:	5f                   	pop    edi
c0013e44:	c3                   	ret    

c0013e45 <SysRegistryReadExtent(regs*)>:
c0013e45:	83 ec 1c             	sub    esp,0x1c
c0013e48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e4c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e4f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013e52:	85 c0                	test   eax,eax
c0013e54:	79 1f                	jns    c0013e75 <SysRegistryReadExtent(regs*)+0x30>
c0013e56:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013e5b:	52                   	push   edx
c0013e5c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013e60:	52                   	push   edx
c0013e61:	50                   	push   eax
c0013e62:	51                   	push   ecx
c0013e63:	e8 b3 f0 ff ff       	call   c0012f1b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013e68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	eb 14                	jmp    c0013e89 <SysRegistryReadExtent(regs*)+0x44>
c0013e75:	83 ec 04             	sub    esp,0x4
c0013e78:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013e7b:	50                   	push   eax
c0013e7c:	51                   	push   ecx
c0013e7d:	e8 33 eb ff ff       	call   c00129b5 <CmGetString(Reghive_Tag*, int, char*)>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	31 c0                	xor    eax,eax
c0013e87:	31 d2                	xor    edx,edx
c0013e89:	83 c4 1c             	add    esp,0x1c
c0013e8c:	c3                   	ret    

c0013e8d <SysRegistryPathToExtentLookup(regs*)>:
c0013e8d:	53                   	push   ebx
c0013e8e:	83 ec 10             	sub    esp,0x10
c0013e91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e95:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e98:	68 9d 21 02 c0       	push   0xc002219d
c0013e9d:	e8 a3 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ea2:	58                   	pop    eax
c0013ea3:	5a                   	pop    edx
c0013ea4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ea7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013eaa:	e8 96 f5 ff ff       	call   c0013445 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013eaf:	83 c4 18             	add    esp,0x18
c0013eb2:	99                   	cdq    
c0013eb3:	5b                   	pop    ebx
c0013eb4:	c3                   	ret    

c0013eb5 <SysRegistryEnterDirectory(regs*)>:
c0013eb5:	53                   	push   ebx
c0013eb6:	83 ec 10             	sub    esp,0x10
c0013eb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ebd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ec0:	68 c0 21 02 c0       	push   0xc00221c0
c0013ec5:	e8 7b 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013eca:	58                   	pop    eax
c0013ecb:	5a                   	pop    edx
c0013ecc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ecf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ed2:	e8 55 eb ff ff       	call   c0012a2c <CmEnterDirectory(Reghive_Tag*, int)>
c0013ed7:	83 c4 18             	add    esp,0x18
c0013eda:	99                   	cdq    
c0013edb:	5b                   	pop    ebx
c0013edc:	c3                   	ret    

c0013edd <SysRegistryGetNext(regs*)>:
c0013edd:	53                   	push   ebx
c0013ede:	83 ec 10             	sub    esp,0x10
c0013ee1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ee5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ee8:	68 de 21 02 c0       	push   0xc00221de
c0013eed:	e8 53 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ef2:	58                   	pop    eax
c0013ef3:	5a                   	pop    edx
c0013ef4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ef7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013efa:	e8 6c eb ff ff       	call   c0012a6b <CmGetNext(Reghive_Tag*, int)>
c0013eff:	83 c4 18             	add    esp,0x18
c0013f02:	99                   	cdq    
c0013f03:	5b                   	pop    ebx
c0013f04:	c3                   	ret    

c0013f05 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013f05:	57                   	push   edi
c0013f06:	56                   	push   esi
c0013f07:	53                   	push   ebx
c0013f08:	81 ec 34 01 00 00    	sub    esp,0x134
c0013f0e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013f15:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013f19:	57                   	push   edi
c0013f1a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013f1d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f20:	e8 04 f1 ff ff       	call   c0013029 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013f25:	89 c3                	mov    ebx,eax
c0013f27:	58                   	pop    eax
c0013f28:	5a                   	pop    edx
c0013f29:	57                   	push   edi
c0013f2a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013f2d:	e8 0e c7 fe ff       	call   c0000640 <strcpy>
c0013f32:	89 d8                	mov    eax,ebx
c0013f34:	81 c4 40 01 00 00    	add    esp,0x140
c0013f3a:	99                   	cdq    
c0013f3b:	5b                   	pop    ebx
c0013f3c:	5e                   	pop    esi
c0013f3d:	5f                   	pop    edi
c0013f3e:	c3                   	ret    

c0013f3f <SysRegistryOpen(regs*)>:
c0013f3f:	83 ec 18             	sub    esp,0x18
c0013f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f46:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013f49:	e8 f7 e8 ff ff       	call   c0012845 <CmOpen(char const*)>
c0013f4e:	83 c4 1c             	add    esp,0x1c
c0013f51:	99                   	cdq    
c0013f52:	c3                   	ret    

c0013f53 <SysRegistryClose(regs*)>:
c0013f53:	83 ec 18             	sub    esp,0x18
c0013f56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f5d:	e8 01 ea ff ff       	call   c0012963 <CmClose(Reghive_Tag*)>
c0013f62:	31 c0                	xor    eax,eax
c0013f64:	31 d2                	xor    edx,edx
c0013f66:	83 c4 1c             	add    esp,0x1c
c0013f69:	c3                   	ret    

c0013f6a <SysSbrk(regs*)>:
c0013f6a:	56                   	push   esi
c0013f6b:	53                   	push   ebx
c0013f6c:	50                   	push   eax
c0013f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f79:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013f7c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013f82:	85 db                	test   ebx,ebx
c0013f84:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013f87:	74 02                	je     c0013f8b <SysSbrk(regs*)+0x21>
c0013f89:	79 06                	jns    c0013f91 <SysSbrk(regs*)+0x27>
c0013f8b:	89 f0                	mov    eax,esi
c0013f8d:	31 d2                	xor    edx,edx
c0013f8f:	eb 2a                	jmp    c0013fbb <SysSbrk(regs*)+0x51>
c0013f91:	83 c8 ff             	or     eax,0xffffffff
c0013f94:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f9a:	89 c2                	mov    edx,eax
c0013f9c:	77 1d                	ja     c0013fbb <SysSbrk(regs*)+0x51>
c0013f9e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013fa4:	50                   	push   eax
c0013fa5:	c1 ea 0c             	shr    edx,0xc
c0013fa8:	68 07 0c 00 00       	push   0xc07
c0013fad:	52                   	push   edx
c0013fae:	51                   	push   ecx
c0013faf:	e8 70 5e ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013fb4:	89 f0                	mov    eax,esi
c0013fb6:	31 d2                	xor    edx,edx
c0013fb8:	83 c4 10             	add    esp,0x10
c0013fbb:	59                   	pop    ecx
c0013fbc:	5b                   	pop    ebx
c0013fbd:	5e                   	pop    esi
c0013fbe:	c3                   	ret    

c0013fbf <SysSetCwd(regs*)>:
c0013fbf:	83 ec 14             	sub    esp,0x14
c0013fc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fc6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fd1:	e8 c5 7c ff ff       	call   c000bc9b <Fs::setcwd(Process*, char*)>
c0013fd6:	83 c4 1c             	add    esp,0x1c
c0013fd9:	99                   	cdq    
c0013fda:	c3                   	ret    

c0013fdb <SysSetTime(regs*)>:
c0013fdb:	55                   	push   ebp
c0013fdc:	31 c9                	xor    ecx,ecx
c0013fde:	57                   	push   edi
c0013fdf:	bd 0c 00 00 00       	mov    ebp,0xc
c0013fe4:	56                   	push   esi
c0013fe5:	53                   	push   ebx
c0013fe6:	31 db                	xor    ebx,ebx
c0013fe8:	83 ec 10             	sub    esp,0x10
c0013feb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013fef:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013ff2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013ff5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013ff8:	89 c2                	mov    edx,eax
c0013ffa:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014000:	83 e2 1f             	and    edx,0x1f
c0014003:	c1 e7 10             	shl    edi,0x10
c0014006:	42                   	inc    edx
c0014007:	c1 e8 05             	shr    eax,0x5
c001400a:	88 d1                	mov    cl,dl
c001400c:	31 d2                	xor    edx,edx
c001400e:	f7 f5                	div    ebp
c0014010:	89 dd                	mov    ebp,ebx
c0014012:	88 d5                	mov    ch,dl
c0014014:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001401a:	0f b7 c1             	movzx  eax,cx
c001401d:	31 d2                	xor    edx,edx
c001401f:	09 f8                	or     eax,edi
c0014021:	bf 3c 00 00 00       	mov    edi,0x3c
c0014026:	89 c1                	mov    ecx,eax
c0014028:	89 f0                	mov    eax,esi
c001402a:	f7 f7                	div    edi
c001402c:	c1 e2 10             	shl    edx,0x10
c001402f:	09 d5                	or     ebp,edx
c0014031:	31 d2                	xor    edx,edx
c0014033:	89 eb                	mov    ebx,ebp
c0014035:	f7 f7                	div    edi
c0014037:	bf 10 0e 00 00       	mov    edi,0xe10
c001403c:	88 d7                	mov    bh,dl
c001403e:	89 f0                	mov    eax,esi
c0014040:	31 d2                	xor    edx,edx
c0014042:	f7 f7                	div    edi
c0014044:	bf 18 00 00 00       	mov    edi,0x18
c0014049:	31 d2                	xor    edx,edx
c001404b:	f7 f7                	div    edi
c001404d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014052:	88 d3                	mov    bl,dl
c0014054:	53                   	push   ebx
c0014055:	51                   	push   ecx
c0014056:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001405c:	e8 45 84 ff ff       	call   c000c4a6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014061:	83 c4 1c             	add    esp,0x1c
c0014064:	83 f0 01             	xor    eax,0x1
c0014067:	5b                   	pop    ebx
c0014068:	0f b6 c0             	movzx  eax,al
c001406b:	5e                   	pop    esi
c001406c:	31 d2                	xor    edx,edx
c001406e:	5f                   	pop    edi
c001406f:	5d                   	pop    ebp
c0014070:	c3                   	ret    

c0014071 <SysTimezone(regs*)>:
c0014071:	53                   	push   ebx
c0014072:	83 ec 08             	sub    esp,0x8
c0014075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014079:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001407d:	75 17                	jne    c0014096 <SysTimezone(regs*)+0x25>
c001407f:	83 ec 0c             	sub    esp,0xc
c0014082:	68 f5 21 02 c0       	push   0xc00221f5
c0014087:	e8 b9 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001408c:	83 c8 ff             	or     eax,0xffffffff
c001408f:	83 c4 10             	add    esp,0x10
c0014092:	89 c2                	mov    edx,eax
c0014094:	eb 20                	jmp    c00140b6 <SysTimezone(regs*)+0x45>
c0014096:	83 ec 0c             	sub    esp,0xc
c0014099:	68 0a 22 02 c0       	push   0xc002220a
c001409e:	e8 a2 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00140a3:	58                   	pop    eax
c00140a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140a7:	e8 64 81 ff ff       	call   c000c210 <User::loadClockSettings(int)>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	b8 01 00 00 00       	mov    eax,0x1
c00140b4:	31 d2                	xor    edx,edx
c00140b6:	83 c4 08             	add    esp,0x8
c00140b9:	5b                   	pop    ebx
c00140ba:	c3                   	ret    

c00140bb <SysTruncate(regs*)>:
c00140bb:	55                   	push   ebp
c00140bc:	57                   	push   edi
c00140bd:	31 ff                	xor    edi,edi
c00140bf:	56                   	push   esi
c00140c0:	53                   	push   ebx
c00140c1:	83 ec 0c             	sub    esp,0xc
c00140c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00140cb:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00140ce:	89 ce                	mov    esi,ecx
c00140d0:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00140d4:	0f 84 9a 00 00 00    	je     c0014174 <SysTruncate(regs*)+0xb9>
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	68 14 01 00 00       	push   0x114
c00140e2:	e8 cf 39 ff ff       	call   c0007ab6 <malloc>
c00140e7:	83 c4 0c             	add    esp,0xc
c00140ea:	89 c3                	mov    ebx,eax
c00140ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140f4:	55                   	push   ebp
c00140f5:	53                   	push   ebx
c00140f6:	e8 75 77 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c00140fb:	83 c4 10             	add    esp,0x10
c00140fe:	31 d2                	xor    edx,edx
c0014100:	b8 03 00 00 00       	mov    eax,0x3
c0014105:	85 db                	test   ebx,ebx
c0014107:	0f 84 a2 00 00 00    	je     c00141af <SysTruncate(regs*)+0xf4>
c001410d:	51                   	push   ecx
c001410e:	51                   	push   ecx
c001410f:	6a 02                	push   0x2
c0014111:	53                   	push   ebx
c0014112:	e8 21 78 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	85 c0                	test   eax,eax
c001411c:	74 13                	je     c0014131 <SysTruncate(regs*)+0x76>
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014123:	53                   	push   ebx
c0014124:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014127:	83 c4 10             	add    esp,0x10
c001412a:	b8 04 00 00 00       	mov    eax,0x4
c001412f:	eb 7c                	jmp    c00141ad <SysTruncate(regs*)+0xf2>
c0014131:	52                   	push   edx
c0014132:	57                   	push   edi
c0014133:	56                   	push   esi
c0014134:	53                   	push   ebx
c0014135:	e8 12 79 ff ff       	call   c000ba4c <File::truncate(unsigned long long)>
c001413a:	83 c4 10             	add    esp,0x10
c001413d:	85 c0                	test   eax,eax
c001413f:	74 1b                	je     c001415c <SysTruncate(regs*)+0xa1>
c0014141:	83 ec 0c             	sub    esp,0xc
c0014144:	53                   	push   ebx
c0014145:	e8 4c 78 ff ff       	call   c000b996 <File::close()>
c001414a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001414c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001414f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	b8 05 00 00 00       	mov    eax,0x5
c001415a:	eb 51                	jmp    c00141ad <SysTruncate(regs*)+0xf2>
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	53                   	push   ebx
c0014160:	e8 31 78 ff ff       	call   c000b996 <File::close()>
c0014165:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001416a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001416d:	83 c4 10             	add    esp,0x10
c0014170:	31 c0                	xor    eax,eax
c0014172:	eb 39                	jmp    c00141ad <SysTruncate(regs*)+0xf2>
c0014174:	31 d2                	xor    edx,edx
c0014176:	b8 01 00 00 00       	mov    eax,0x1
c001417b:	83 fd 02             	cmp    ebp,0x2
c001417e:	7e 2f                	jle    c00141af <SysTruncate(regs*)+0xf4>
c0014180:	83 ec 0c             	sub    esp,0xc
c0014183:	51                   	push   ecx
c0014184:	e8 2a 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014189:	83 c4 10             	add    esp,0x10
c001418c:	89 c1                	mov    ecx,eax
c001418e:	31 d2                	xor    edx,edx
c0014190:	b8 02 00 00 00       	mov    eax,0x2
c0014195:	85 c9                	test   ecx,ecx
c0014197:	74 16                	je     c00141af <SysTruncate(regs*)+0xf4>
c0014199:	50                   	push   eax
c001419a:	57                   	push   edi
c001419b:	56                   	push   esi
c001419c:	51                   	push   ecx
c001419d:	e8 aa 78 ff ff       	call   c000ba4c <File::truncate(unsigned long long)>
c00141a2:	83 c4 10             	add    esp,0x10
c00141a5:	85 c0                	test   eax,eax
c00141a7:	0f 95 c0             	setne  al
c00141aa:	0f b6 c0             	movzx  eax,al
c00141ad:	31 d2                	xor    edx,edx
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	5b                   	pop    ebx
c00141b3:	5e                   	pop    esi
c00141b4:	5f                   	pop    edi
c00141b5:	5d                   	pop    ebp
c00141b6:	c3                   	ret    

c00141b7 <SysWrite(regs*)>:
c00141b7:	57                   	push   edi
c00141b8:	56                   	push   esi
c00141b9:	53                   	push   ebx
c00141ba:	83 ec 10             	sub    esp,0x10
c00141bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141c4:	83 f8 02             	cmp    eax,0x2
c00141c7:	77 10                	ja     c00141d9 <SysWrite(regs*)+0x22>
c00141c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141d1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141d7:	eb 0e                	jmp    c00141e7 <SysWrite(regs*)+0x30>
c00141d9:	83 ec 0c             	sub    esp,0xc
c00141dc:	50                   	push   eax
c00141dd:	e8 d1 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00141e2:	83 c4 10             	add    esp,0x10
c00141e5:	89 c1                	mov    ecx,eax
c00141e7:	83 c8 ff             	or     eax,0xffffffff
c00141ea:	85 c9                	test   ecx,ecx
c00141ec:	89 c2                	mov    edx,eax
c00141ee:	74 28                	je     c0014218 <SysWrite(regs*)+0x61>
c00141f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141f8:	31 ff                	xor    edi,edi
c00141fa:	83 ec 0c             	sub    esp,0xc
c00141fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014203:	52                   	push   edx
c0014204:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014207:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001420a:	57                   	push   edi
c001420b:	56                   	push   esi
c001420c:	51                   	push   ecx
c001420d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014210:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014214:	83 c4 20             	add    esp,0x20
c0014217:	99                   	cdq    
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	5b                   	pop    ebx
c001421c:	5e                   	pop    esi
c001421d:	5f                   	pop    edi
c001421e:	c3                   	ret    

c001421f <SysWsbe(regs*)>:
c001421f:	57                   	push   edi
c0014220:	b9 0b 00 00 00       	mov    ecx,0xb
c0014225:	56                   	push   esi
c0014226:	be 49 22 02 c0       	mov    esi,0xc0022249
c001422b:	53                   	push   ebx
c001422c:	83 ec 30             	sub    esp,0x30
c001422f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014233:	fc                   	cld    
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014239:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001423d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014242:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014245:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001424b:	8b 06                	mov    eax,DWORD PTR [esi]
c001424d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014250:	57                   	push   edi
c0014251:	e8 1a c3 fe ff       	call   c0000570 <strlen>
c0014256:	5a                   	pop    edx
c0014257:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001425b:	52                   	push   edx
c001425c:	31 d2                	xor    edx,edx
c001425e:	57                   	push   edi
c001425f:	52                   	push   edx
c0014260:	50                   	push   eax
c0014261:	56                   	push   esi
c0014262:	ff d3                	call   ebx
c0014264:	83 c4 14             	add    esp,0x14
c0014267:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001426b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001426e:	e8 ad 23 00 00       	call   c0016620 <terminateTask(int)>
c0014273:	83 c4 40             	add    esp,0x40
c0014276:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001427b:	5b                   	pop    ebx
c001427c:	31 d2                	xor    edx,edx
c001427e:	5e                   	pop    esi
c001427f:	5f                   	pop    edi
c0014280:	c3                   	ret    

c0014281 <SysYield(regs*)>:
c0014281:	83 ec 0c             	sub    esp,0xc
c0014284:	fa                   	cli    
c0014285:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001428b:	e8 f0 19 00 00       	call   c0015c80 <schedule()>
c0014290:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014295:	48                   	dec    eax
c0014296:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001429b:	75 01                	jne    c001429e <SysYield(regs*)+0x1d>
c001429d:	fb                   	sti    
c001429e:	31 c0                	xor    eax,eax
c00142a0:	31 d2                	xor    edx,edx
c00142a2:	83 c4 0c             	add    esp,0xc
c00142a5:	c3                   	ret    

c00142a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00142a6:	55                   	push   ebp
c00142a7:	57                   	push   edi
c00142a8:	56                   	push   esi
c00142a9:	53                   	push   ebx
c00142aa:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00142b0:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00142b8:	0f 95 c0             	setne  al
c00142bb:	31 d2                	xor    edx,edx
c00142bd:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00142c5:	0f 94 c2             	sete   dl
c00142c8:	85 c2                	test   edx,eax
c00142ca:	74 34                	je     c0014300 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00142cc:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00142d7:	74 27                	je     c0014300 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00142d9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00142e0:	05 00 10 00 00       	add    eax,0x1000
c00142e5:	89 c1                	mov    ecx,eax
c00142e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142ec:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00142f2:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00142f9:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014300:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014307:	83 ec 0c             	sub    esp,0xc
c001430a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014310:	6a 01                	push   0x1
c0014312:	e8 f6 52 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014317:	83 c4 10             	add    esp,0x10
c001431a:	89 c3                	mov    ebx,eax
c001431c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014322:	0f 86 25 01 00 00    	jbe    c001444d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014328:	c1 ee 0c             	shr    esi,0xc
c001432b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014332:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014336:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001433e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014345:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014349:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014350:	29 ef                	sub    edi,ebp
c0014352:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014356:	0f 83 f8 00 00 00    	jae    c0014454 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c001435c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014362:	76 05                	jbe    c0014369 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014364:	bf 00 10 00 00       	mov    edi,0x1000
c0014369:	83 ec 0c             	sub    esp,0xc
c001436c:	31 d2                	xor    edx,edx
c001436e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014375:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014377:	8d 44 24 28          	lea    eax,[esp+0x28]
c001437b:	50                   	push   eax
c001437c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014380:	56                   	push   esi
c0014381:	52                   	push   edx
c0014382:	57                   	push   edi
c0014383:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001438a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001438d:	83 c4 20             	add    esp,0x20
c0014390:	85 c0                	test   eax,eax
c0014392:	75 06                	jne    c001439a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014394:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014398:	74 13                	je     c00143ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001439a:	83 ec 0c             	sub    esp,0xc
c001439d:	53                   	push   ebx
c001439e:	e8 88 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00143a3:	83 c4 10             	add    esp,0x10
c00143a6:	31 c0                	xor    eax,eax
c00143a8:	e9 7c 01 00 00       	jmp    c0014529 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00143ad:	fa                   	cli    
c00143ae:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143b4:	e8 06 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c00143b9:	6a 07                	push   0x7
c00143bb:	89 c7                	mov    edi,eax
c00143bd:	53                   	push   ebx
c00143be:	50                   	push   eax
c00143bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143cd:	e8 4e 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00143d2:	83 c4 0c             	add    esp,0xc
c00143d5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143dc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143e2:	6a 00                	push   0x0
c00143e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143ec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143f2:	e8 8f 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00143f7:	58                   	pop    eax
c00143f8:	5a                   	pop    edx
c00143f9:	68 07 0c 00 00       	push   0xc07
c00143fe:	55                   	push   ebp
c00143ff:	57                   	push   edi
c0014400:	89 df                	mov    edi,ebx
c0014402:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014409:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001440f:	6a 00                	push   0x0
c0014411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014416:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014419:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001441f:	e8 4e 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014424:	b9 00 10 00 00       	mov    ecx,0x1000
c0014429:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001442b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014430:	83 c4 20             	add    esp,0x20
c0014433:	48                   	dec    eax
c0014434:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014439:	85 c0                	test   eax,eax
c001443b:	75 01                	jne    c001443e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001443d:	fb                   	sti    
c001443e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014444:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014448:	e9 f1 fe ff ff       	jmp    c001433e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001444d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014454:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001445b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014461:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014467:	0f 86 ae 00 00 00    	jbe    c001451b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001446d:	fa                   	cli    
c001446e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014474:	c1 ee 0c             	shr    esi,0xc
c0014477:	51                   	push   ecx
c0014478:	31 ff                	xor    edi,edi
c001447a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014481:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014487:	6a 00                	push   0x0
c0014489:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001448e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014491:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014497:	e8 ea 56 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	e8 1b 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00144a4:	47                   	inc    edi
c00144a5:	6a 07                	push   0x7
c00144a7:	53                   	push   ebx
c00144a8:	50                   	push   eax
c00144a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144ad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00144b3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00144b6:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00144bc:	e8 5f 58 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00144c1:	58                   	pop    eax
c00144c2:	5a                   	pop    edx
c00144c3:	68 07 0c 00 00       	push   0xc07
c00144c8:	55                   	push   ebp
c00144c9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d3:	50                   	push   eax
c00144d4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144e1:	6a 00                	push   0x0
c00144e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144eb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144f1:	e8 7c 5a ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144f6:	83 c4 1c             	add    esp,0x1c
c00144f9:	68 00 10 00 00       	push   0x1000
c00144fe:	6a 00                	push   0x0
c0014500:	53                   	push   ebx
c0014501:	e8 ea bf fe ff       	call   c00004f0 <memset>
c0014506:	83 c4 10             	add    esp,0x10
c0014509:	39 fe                	cmp    esi,edi
c001450b:	77 92                	ja     c001449f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001450d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014512:	48                   	dec    eax
c0014513:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014518:	75 01                	jne    c001451b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001451a:	fb                   	sti    
c001451b:	83 ec 0c             	sub    esp,0xc
c001451e:	53                   	push   ebx
c001451f:	e8 07 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	b0 01                	mov    al,0x1
c0014529:	81 c4 2c 10 00 00    	add    esp,0x102c
c001452f:	5b                   	pop    ebx
c0014530:	5e                   	pop    esi
c0014531:	5f                   	pop    edi
c0014532:	5d                   	pop    ebp
c0014533:	c3                   	ret    

c0014534 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014534:	55                   	push   ebp
c0014535:	57                   	push   edi
c0014536:	56                   	push   esi
c0014537:	53                   	push   ebx
c0014538:	83 ec 48             	sub    esp,0x48
c001453b:	68 14 01 00 00       	push   0x114
c0014540:	e8 71 35 ff ff       	call   c0007ab6 <malloc>
c0014545:	83 c4 0c             	add    esp,0xc
c0014548:	89 c6                	mov    esi,eax
c001454a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001454e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014552:	50                   	push   eax
c0014553:	e8 18 73 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0014558:	58                   	pop    eax
c0014559:	5a                   	pop    edx
c001455a:	6a 01                	push   0x1
c001455c:	56                   	push   esi
c001455d:	e8 d6 73 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0014562:	83 c4 10             	add    esp,0x10
c0014565:	85 c0                	test   eax,eax
c0014567:	0f 85 43 01 00 00    	jne    c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001456d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014575:	83 ec 0c             	sub    esp,0xc
c0014578:	6a 34                	push   0x34
c001457a:	e8 37 35 ff ff       	call   c0007ab6 <malloc>
c001457f:	89 c3                	mov    ebx,eax
c0014581:	58                   	pop    eax
c0014582:	8b 06                	mov    eax,DWORD PTR [esi]
c0014584:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014588:	57                   	push   edi
c0014589:	53                   	push   ebx
c001458a:	6a 00                	push   0x0
c001458c:	6a 34                	push   0x34
c001458e:	56                   	push   esi
c001458f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014592:	83 c4 20             	add    esp,0x20
c0014595:	85 c0                	test   eax,eax
c0014597:	0f 85 13 01 00 00    	jne    c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001459d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00145a3:	0f 85 07 01 00 00    	jne    c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145ac:	85 c0                	test   eax,eax
c00145ae:	0f 84 fc 00 00 00    	je     c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145b4:	31 d2                	xor    edx,edx
c00145b6:	55                   	push   ebp
c00145b7:	52                   	push   edx
c00145b8:	50                   	push   eax
c00145b9:	56                   	push   esi
c00145ba:	e8 37 74 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c00145bf:	83 c4 10             	add    esp,0x10
c00145c2:	85 c0                	test   eax,eax
c00145c4:	0f 85 e6 00 00 00    	jne    c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145ca:	83 ec 0c             	sub    esp,0xc
c00145cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00145d0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145d8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145dc:	0f af c2             	imul   eax,edx
c00145df:	50                   	push   eax
c00145e0:	e8 d1 34 ff ff       	call   c0007ab6 <malloc>
c00145e5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00145e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00145eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145f2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145f6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145fa:	0f af c2             	imul   eax,edx
c00145fd:	99                   	cdq    
c00145fe:	52                   	push   edx
c00145ff:	50                   	push   eax
c0014600:	56                   	push   esi
c0014601:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014604:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014607:	83 c4 20             	add    esp,0x20
c001460a:	85 c0                	test   eax,eax
c001460c:	0f 84 9e 00 00 00    	je     c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014612:	31 d2                	xor    edx,edx
c0014614:	51                   	push   ecx
c0014615:	52                   	push   edx
c0014616:	50                   	push   eax
c0014617:	56                   	push   esi
c0014618:	e8 d9 73 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	85 c0                	test   eax,eax
c0014622:	0f 85 88 00 00 00    	jne    c00146b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014628:	83 ec 0c             	sub    esp,0xc
c001462b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001462f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014633:	31 ed                	xor    ebp,ebp
c0014635:	0f af c2             	imul   eax,edx
c0014638:	50                   	push   eax
c0014639:	e8 78 34 ff ff       	call   c0007ab6 <malloc>
c001463e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014640:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014644:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001464f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014653:	0f af c2             	imul   eax,edx
c0014656:	99                   	cdq    
c0014657:	52                   	push   edx
c0014658:	50                   	push   eax
c0014659:	56                   	push   esi
c001465a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001465d:	83 c4 20             	add    esp,0x20
c0014660:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014668:	0f b7 fd             	movzx  edi,bp
c001466b:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001466f:	73 7d                	jae    c00146ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014671:	c1 e7 05             	shl    edi,0x5
c0014674:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014678:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001467b:	75 6b                	jne    c00146e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001467d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014680:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014684:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014687:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001468b:	52                   	push   edx
c001468c:	31 d2                	xor    edx,edx
c001468e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014691:	52                   	push   edx
c0014692:	50                   	push   eax
c0014693:	56                   	push   esi
c0014694:	e8 5d 73 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	85 c0                	test   eax,eax
c001469e:	74 17                	je     c00146b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00146a0:	83 ec 0c             	sub    esp,0xc
c00146a3:	68 75 22 02 c0       	push   0xc0022275
c00146a8:	e8 98 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	31 c0                	xor    eax,eax
c00146b2:	e9 87 00 00 00       	jmp    c001473e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00146b7:	83 ec 0c             	sub    esp,0xc
c00146ba:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00146bd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00146c0:	50                   	push   eax
c00146c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146c9:	56                   	push   esi
c00146ca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00146ce:	e8 d3 fb ff ff       	call   c00142a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00146d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146d7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00146db:	83 c4 20             	add    esp,0x20
c00146de:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00146e2:	73 04                	jae    c00146e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00146e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146e8:	45                   	inc    ebp
c00146e9:	e9 7a ff ff ff       	jmp    c0014668 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00146ee:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00146f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00146f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146fa:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014700:	83 ec 0c             	sub    esp,0xc
c0014703:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014709:	25 00 f0 ff ff       	and    eax,0xfffff000
c001470e:	05 00 10 00 00       	add    eax,0x1000
c0014713:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471a:	e8 a7 33 ff ff       	call   c0007ac6 <free>
c001471f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014722:	e8 9f 33 ff ff       	call   c0007ac6 <free>
c0014727:	58                   	pop    eax
c0014728:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001472c:	e8 95 33 ff ff       	call   c0007ac6 <free>
c0014731:	89 34 24             	mov    DWORD PTR [esp],esi
c0014734:	e8 5d 72 ff ff       	call   c000b996 <File::close()>
c0014739:	83 c4 10             	add    esp,0x10
c001473c:	b0 01                	mov    al,0x1
c001473e:	83 c4 3c             	add    esp,0x3c
c0014741:	5b                   	pop    ebx
c0014742:	5e                   	pop    esi
c0014743:	5f                   	pop    edi
c0014744:	5d                   	pop    ebp
c0014745:	c3                   	ret    

c0014746 <Thr::runtimeReferenceHelper()>:
c0014746:	83 ec 18             	sub    esp,0x18
c0014749:	68 7d 22 02 c0       	push   0xc002227d
c001474e:	e8 f2 61 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014753:	fa                   	cli    
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	eb fe                	jmp    c0014757 <Thr::runtimeReferenceHelper()+0x11>

c0014759 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014759:	57                   	push   edi
c001475a:	56                   	push   esi
c001475b:	53                   	push   ebx
c001475c:	31 db                	xor    ebx,ebx
c001475e:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c0014764:	7e 3c                	jle    c00147a2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014766:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c001476d:	31 ff                	xor    edi,edi
c001476f:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014776:	7e 27                	jle    c001479f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014778:	50                   	push   eax
c0014779:	50                   	push   eax
c001477a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001477e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014780:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014787:	50                   	push   eax
c0014788:	e8 c3 bf fe ff       	call   c0000750 <strcmp>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	85 c0                	test   eax,eax
c0014792:	75 05                	jne    c0014799 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014794:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014797:	eb 0b                	jmp    c00147a4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014799:	83 c6 10             	add    esi,0x10
c001479c:	47                   	inc    edi
c001479d:	eb d0                	jmp    c001476f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001479f:	43                   	inc    ebx
c00147a0:	eb bc                	jmp    c001475e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00147a2:	31 c0                	xor    eax,eax
c00147a4:	5b                   	pop    ebx
c00147a5:	5e                   	pop    esi
c00147a6:	5f                   	pop    edi
c00147a7:	c3                   	ret    

c00147a8 <Thr::loadKernelSymbolTable(char const*)>:
c00147a8:	55                   	push   ebp
c00147a9:	57                   	push   edi
c00147aa:	56                   	push   esi
c00147ab:	53                   	push   ebx
c00147ac:	83 ec 68             	sub    esp,0x68
c00147af:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00147b5:	68 14 01 00 00       	push   0x114
c00147ba:	e8 f7 32 ff ff       	call   c0007ab6 <malloc>
c00147bf:	83 c4 0c             	add    esp,0xc
c00147c2:	89 c3                	mov    ebx,eax
c00147c4:	56                   	push   esi
c00147c5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00147c9:	50                   	push   eax
c00147ca:	e8 a1 70 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c00147cf:	5e                   	pop    esi
c00147d0:	5f                   	pop    edi
c00147d1:	6a 01                	push   0x1
c00147d3:	53                   	push   ebx
c00147d4:	e8 5f 71 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c00147d9:	83 c4 10             	add    esp,0x10
c00147dc:	85 c0                	test   eax,eax
c00147de:	74 0a                	je     c00147ea <Thr::loadKernelSymbolTable(char const*)+0x42>
c00147e0:	83 ec 0c             	sub    esp,0xc
c00147e3:	68 9f 22 02 c0       	push   0xc002229f
c00147e8:	eb 34                	jmp    c001481e <Thr::loadKernelSymbolTable(char const*)+0x76>
c00147ea:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00147f2:	83 ec 0c             	sub    esp,0xc
c00147f5:	6a 34                	push   0x34
c00147f7:	e8 ba 32 ff ff       	call   c0007ab6 <malloc>
c00147fc:	59                   	pop    ecx
c00147fd:	89 c7                	mov    edi,eax
c00147ff:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014803:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014805:	56                   	push   esi
c0014806:	57                   	push   edi
c0014807:	6a 00                	push   0x0
c0014809:	6a 34                	push   0x34
c001480b:	53                   	push   ebx
c001480c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001480f:	83 c4 20             	add    esp,0x20
c0014812:	85 c0                	test   eax,eax
c0014814:	74 17                	je     c001482d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014816:	83 ec 0c             	sub    esp,0xc
c0014819:	68 b6 22 02 c0       	push   0xc00222b6
c001481e:	e8 9e cb ff ff       	call   c00113c1 <KePanic(char const*)>
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	31 c0                	xor    eax,eax
c0014828:	e9 31 02 00 00       	jmp    c0014a5e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001482d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014833:	75 e1                	jne    c0014816 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014835:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014838:	85 c0                	test   eax,eax
c001483a:	74 da                	je     c0014816 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001483c:	52                   	push   edx
c001483d:	31 d2                	xor    edx,edx
c001483f:	52                   	push   edx
c0014840:	50                   	push   eax
c0014841:	53                   	push   ebx
c0014842:	e8 af 71 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014847:	83 c4 10             	add    esp,0x10
c001484a:	85 c0                	test   eax,eax
c001484c:	75 c8                	jne    c0014816 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014855:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014859:	31 ed                	xor    ebp,ebp
c001485b:	0f af c2             	imul   eax,edx
c001485e:	50                   	push   eax
c001485f:	e8 52 32 ff ff       	call   c0007ab6 <malloc>
c0014864:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014866:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001486a:	89 34 24             	mov    DWORD PTR [esp],esi
c001486d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014871:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014875:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014879:	0f af c2             	imul   eax,edx
c001487c:	99                   	cdq    
c001487d:	52                   	push   edx
c001487e:	50                   	push   eax
c001487f:	53                   	push   ebx
c0014880:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014883:	83 c4 20             	add    esp,0x20
c0014886:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001488e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014896:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001489e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148a6:	0f b7 f5             	movzx  esi,bp
c00148a9:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00148ad:	0f 83 a7 00 00 00    	jae    c001495a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00148b3:	6b f6 28             	imul   esi,esi,0x28
c00148b6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00148ba:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00148bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148c1:	50                   	push   eax
c00148c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148c6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00148ca:	8b 16                	mov    edx,DWORD PTR [esi]
c00148cc:	6b c0 28             	imul   eax,eax,0x28
c00148cf:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00148d3:	89 d0                	mov    eax,edx
c00148d5:	31 d2                	xor    edx,edx
c00148d7:	52                   	push   edx
c00148d8:	50                   	push   eax
c00148d9:	53                   	push   ebx
c00148da:	e8 17 71 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c00148df:	83 c4 0c             	add    esp,0xc
c00148e2:	6a 20                	push   0x20
c00148e4:	6a 00                	push   0x0
c00148e6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00148ea:	52                   	push   edx
c00148eb:	e8 00 bc fe ff       	call   c00004f0 <memset>
c00148f0:	58                   	pop    eax
c00148f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148f3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00148f7:	51                   	push   ecx
c00148f8:	8d 54 24 40          	lea    edx,[esp+0x40]
c00148fc:	52                   	push   edx
c00148fd:	6a 00                	push   0x0
c00148ff:	6a 1f                	push   0x1f
c0014901:	53                   	push   ebx
c0014902:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014905:	83 c4 18             	add    esp,0x18
c0014908:	68 cd 22 02 c0       	push   0xc00222cd
c001490d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014911:	52                   	push   edx
c0014912:	e8 39 be fe ff       	call   c0000750 <strcmp>
c0014917:	83 c4 10             	add    esp,0x10
c001491a:	85 c0                	test   eax,eax
c001491c:	75 0f                	jne    c001492d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001491e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014921:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014925:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001492d:	50                   	push   eax
c001492e:	50                   	push   eax
c001492f:	68 d5 22 02 c0       	push   0xc00222d5
c0014934:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014938:	50                   	push   eax
c0014939:	e8 12 be fe ff       	call   c0000750 <strcmp>
c001493e:	83 c4 10             	add    esp,0x10
c0014941:	85 c0                	test   eax,eax
c0014943:	75 0f                	jne    c0014954 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014945:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014948:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001494c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014950:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014954:	45                   	inc    ebp
c0014955:	e9 4c ff ff ff       	jmp    c00148a6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001495a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001495f:	75 10                	jne    c0014971 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014961:	83 ec 0c             	sub    esp,0xc
c0014964:	68 dd 22 02 c0       	push   0xc00222dd
c0014969:	e8 53 ca ff ff       	call   c00113c1 <KePanic(char const*)>
c001496e:	83 c4 10             	add    esp,0x10
c0014971:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014976:	75 10                	jne    c0014988 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014978:	83 ec 0c             	sub    esp,0xc
c001497b:	68 dd 22 02 c0       	push   0xc00222dd
c0014980:	e8 3c ca ff ff       	call   c00113c1 <KePanic(char const*)>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	31 d2                	xor    edx,edx
c001498a:	50                   	push   eax
c001498b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001498f:	52                   	push   edx
c0014990:	50                   	push   eax
c0014991:	53                   	push   ebx
c0014992:	e8 5f 70 ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014997:	5a                   	pop    edx
c0014998:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001499c:	e8 15 31 ff ff       	call   c0007ab6 <malloc>
c00149a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149a9:	31 c9                	xor    ecx,ecx
c00149ab:	5e                   	pop    esi
c00149ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149ae:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00149b2:	55                   	push   ebp
c00149b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149b7:	51                   	push   ecx
c00149b8:	52                   	push   edx
c00149b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00149bd:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00149c1:	53                   	push   ebx
c00149c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149c5:	83 c4 14             	add    esp,0x14
c00149c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149cc:	e8 e5 30 ff ff       	call   c0007ab6 <malloc>
c00149d1:	89 c6                	mov    esi,eax
c00149d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149d8:	56                   	push   esi
c00149d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00149dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00149e1:	51                   	push   ecx
c00149e2:	52                   	push   edx
c00149e3:	53                   	push   ebx
c00149e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149eb:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00149f1:	83 c4 1c             	add    esp,0x1c
c00149f4:	c1 e8 04             	shr    eax,0x4
c00149f7:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00149fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a02:	31 d2                	xor    edx,edx
c0014a04:	52                   	push   edx
c0014a05:	50                   	push   eax
c0014a06:	53                   	push   ebx
c0014a07:	e8 ea 6f ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014a0c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a0e:	31 d2                	xor    edx,edx
c0014a10:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a13:	56                   	push   esi
c0014a14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014a18:	52                   	push   edx
c0014a19:	50                   	push   eax
c0014a1a:	53                   	push   ebx
c0014a1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a1e:	83 c4 14             	add    esp,0x14
c0014a21:	53                   	push   ebx
c0014a22:	e8 6f 6f ff ff       	call   c000b996 <File::close()>
c0014a27:	5d                   	pop    ebp
c0014a28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a2c:	e8 95 30 ff ff       	call   c0007ac6 <free>
c0014a31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a34:	e8 8d 30 ff ff       	call   c0007ac6 <free>
c0014a39:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014a3e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a42:	8d 50 01             	lea    edx,[eax+0x1]
c0014a45:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014a4c:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014a53:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014a59:	83 c4 10             	add    esp,0x10
c0014a5c:	b0 01                	mov    al,0x1
c0014a5e:	83 c4 5c             	add    esp,0x5c
c0014a61:	5b                   	pop    ebx
c0014a62:	5e                   	pop    esi
c0014a63:	5f                   	pop    edi
c0014a64:	5d                   	pop    ebp
c0014a65:	c3                   	ret    

c0014a66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014a66:	55                   	push   ebp
c0014a67:	57                   	push   edi
c0014a68:	56                   	push   esi
c0014a69:	53                   	push   ebx
c0014a6a:	81 ec 68 03 00 00    	sub    esp,0x368
c0014a70:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014a77:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014a7d:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014a81:	68 14 01 00 00       	push   0x114
c0014a86:	e8 2b 30 ff ff       	call   c0007ab6 <malloc>
c0014a8b:	83 c4 0c             	add    esp,0xc
c0014a8e:	89 c5                	mov    ebp,eax
c0014a90:	53                   	push   ebx
c0014a91:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014a98:	50                   	push   eax
c0014a99:	e8 d2 6d ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0014a9e:	5e                   	pop    esi
c0014a9f:	5f                   	pop    edi
c0014aa0:	6a 01                	push   0x1
c0014aa2:	55                   	push   ebp
c0014aa3:	e8 90 6e ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0014aa8:	83 c4 10             	add    esp,0x10
c0014aab:	85 c0                	test   eax,eax
c0014aad:	0f 85 aa 06 00 00    	jne    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ab3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014abb:	83 ec 0c             	sub    esp,0xc
c0014abe:	6a 34                	push   0x34
c0014ac0:	e8 f1 2f ff ff       	call   c0007ab6 <malloc>
c0014ac5:	5b                   	pop    ebx
c0014ac6:	89 c7                	mov    edi,eax
c0014ac8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014acc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014acf:	53                   	push   ebx
c0014ad0:	57                   	push   edi
c0014ad1:	6a 00                	push   0x0
c0014ad3:	6a 34                	push   0x34
c0014ad5:	55                   	push   ebp
c0014ad6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ad9:	83 c4 20             	add    esp,0x20
c0014adc:	85 c0                	test   eax,eax
c0014ade:	0f 85 79 06 00 00    	jne    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ae4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014aea:	0f 85 6d 06 00 00    	jne    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014af0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014af3:	85 c0                	test   eax,eax
c0014af5:	0f 84 62 06 00 00    	je     c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014afb:	31 d2                	xor    edx,edx
c0014afd:	51                   	push   ecx
c0014afe:	52                   	push   edx
c0014aff:	50                   	push   eax
c0014b00:	55                   	push   ebp
c0014b01:	e8 f0 6e ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014b06:	83 c4 10             	add    esp,0x10
c0014b09:	85 c0                	test   eax,eax
c0014b0b:	0f 85 4c 06 00 00    	jne    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b11:	83 ec 0c             	sub    esp,0xc
c0014b14:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014b17:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014b1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014b1f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b23:	0f af c2             	imul   eax,edx
c0014b26:	50                   	push   eax
c0014b27:	e8 8a 2f ff ff       	call   c0007ab6 <malloc>
c0014b2c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b3a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014b3e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b42:	0f af c2             	imul   eax,edx
c0014b45:	99                   	cdq    
c0014b46:	52                   	push   edx
c0014b47:	50                   	push   eax
c0014b48:	55                   	push   ebp
c0014b49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b4c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014b4f:	83 c4 20             	add    esp,0x20
c0014b52:	85 c0                	test   eax,eax
c0014b54:	0f 84 03 06 00 00    	je     c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b5a:	52                   	push   edx
c0014b5b:	31 d2                	xor    edx,edx
c0014b5d:	52                   	push   edx
c0014b5e:	50                   	push   eax
c0014b5f:	55                   	push   ebp
c0014b60:	e8 91 6e ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014b65:	83 c4 10             	add    esp,0x10
c0014b68:	85 c0                	test   eax,eax
c0014b6a:	0f 85 ed 05 00 00    	jne    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b70:	83 ec 0c             	sub    esp,0xc
c0014b73:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b77:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b7b:	31 f6                	xor    esi,esi
c0014b7d:	0f af c2             	imul   eax,edx
c0014b80:	50                   	push   eax
c0014b81:	e8 30 2f ff ff       	call   c0007ab6 <malloc>
c0014b86:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b94:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b98:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b9c:	0f af c2             	imul   eax,edx
c0014b9f:	99                   	cdq    
c0014ba0:	52                   	push   edx
c0014ba1:	50                   	push   eax
c0014ba2:	55                   	push   ebp
c0014ba3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ba6:	83 c4 20             	add    esp,0x20
c0014ba9:	0f b7 de             	movzx  ebx,si
c0014bac:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014bb0:	0f 83 87 00 00 00    	jae    c0014c3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014bb6:	c1 e3 05             	shl    ebx,0x5
c0014bb9:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014bbd:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014bc0:	75 75                	jne    c0014c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014bc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014bc5:	31 d2                	xor    edx,edx
c0014bc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bcb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bd2:	50                   	push   eax
c0014bd3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014bd6:	52                   	push   edx
c0014bd7:	50                   	push   eax
c0014bd8:	55                   	push   ebp
c0014bd9:	e8 18 6e ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	85 c0                	test   eax,eax
c0014be3:	0f 85 74 05 00 00    	jne    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014be9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014bf0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014bf3:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014bf7:	31 d2                	xor    edx,edx
c0014bf9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014bfd:	83 ec 0c             	sub    esp,0xc
c0014c00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c04:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c0b:	50                   	push   eax
c0014c0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c14:	52                   	push   edx
c0014c15:	50                   	push   eax
c0014c16:	55                   	push   ebp
c0014c17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c1a:	83 c4 1c             	add    esp,0x1c
c0014c1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c20:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014c23:	50                   	push   eax
c0014c24:	6a 00                	push   0x0
c0014c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c2a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014c2e:	50                   	push   eax
c0014c2f:	e8 bc b8 fe ff       	call   c00004f0 <memset>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	46                   	inc    esi
c0014c38:	e9 6c ff ff ff       	jmp    c0014ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014c3d:	53                   	push   ebx
c0014c3e:	31 db                	xor    ebx,ebx
c0014c40:	68 00 01 00 00       	push   0x100
c0014c45:	6a 00                	push   0x0
c0014c47:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014c4b:	50                   	push   eax
c0014c4c:	e8 9f b8 fe ff       	call   c00004f0 <memset>
c0014c51:	83 c4 0c             	add    esp,0xc
c0014c54:	68 00 01 00 00       	push   0x100
c0014c59:	6a 00                	push   0x0
c0014c5b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014c62:	50                   	push   eax
c0014c63:	e8 88 b8 fe ff       	call   c00004f0 <memset>
c0014c68:	83 c4 10             	add    esp,0x10
c0014c6b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c73:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c7b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014c83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014c93:	0f b7 f3             	movzx  esi,bx
c0014c96:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014c9a:	0f 83 2d 01 00 00    	jae    c0014dcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014ca0:	6b f6 28             	imul   esi,esi,0x28
c0014ca3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014ca7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cae:	52                   	push   edx
c0014caf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cb3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014cb7:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cb9:	6b d2 28             	imul   edx,edx,0x28
c0014cbc:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014cc0:	31 d2                	xor    edx,edx
c0014cc2:	52                   	push   edx
c0014cc3:	50                   	push   eax
c0014cc4:	55                   	push   ebp
c0014cc5:	e8 2c 6d ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014cca:	83 c4 0c             	add    esp,0xc
c0014ccd:	6a 20                	push   0x20
c0014ccf:	6a 00                	push   0x0
c0014cd1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014cd8:	51                   	push   ecx
c0014cd9:	e8 12 b8 fe ff       	call   c00004f0 <memset>
c0014cde:	59                   	pop    ecx
c0014cdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ce2:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014ce6:	52                   	push   edx
c0014ce7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014cee:	51                   	push   ecx
c0014cef:	6a 00                	push   0x0
c0014cf1:	6a 1f                	push   0x1f
c0014cf3:	55                   	push   ebp
c0014cf4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cf7:	83 c4 1c             	add    esp,0x1c
c0014cfa:	6a 09                	push   0x9
c0014cfc:	68 f7 22 02 c0       	push   0xc00222f7
c0014d01:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d08:	51                   	push   ecx
c0014d09:	e8 72 b6 fe ff       	call   c0000380 <memcmp>
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	85 c0                	test   eax,eax
c0014d13:	75 21                	jne    c0014d36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014d15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d1d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014d21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d25:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d28:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d2f:	89 d0                	mov    eax,edx
c0014d31:	40                   	inc    eax
c0014d32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d36:	50                   	push   eax
c0014d37:	6a 09                	push   0x9
c0014d39:	68 01 23 02 c0       	push   0xc0022301
c0014d3e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d45:	50                   	push   eax
c0014d46:	e8 35 b6 fe ff       	call   c0000380 <memcmp>
c0014d4b:	83 c4 10             	add    esp,0x10
c0014d4e:	85 c0                	test   eax,eax
c0014d50:	75 21                	jne    c0014d73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d5e:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014d62:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d65:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d6c:	89 d0                	mov    eax,edx
c0014d6e:	40                   	inc    eax
c0014d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d73:	50                   	push   eax
c0014d74:	50                   	push   eax
c0014d75:	68 cd 22 02 c0       	push   0xc00222cd
c0014d7a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d81:	50                   	push   eax
c0014d82:	e8 c9 b9 fe ff       	call   c0000750 <strcmp>
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	85 c0                	test   eax,eax
c0014d8c:	75 0f                	jne    c0014d9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014d8e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d9d:	50                   	push   eax
c0014d9e:	50                   	push   eax
c0014d9f:	68 d5 22 02 c0       	push   0xc00222d5
c0014da4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dab:	50                   	push   eax
c0014dac:	e8 9f b9 fe ff       	call   c0000750 <strcmp>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	85 c0                	test   eax,eax
c0014db6:	75 0f                	jne    c0014dc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014db8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014dc7:	43                   	inc    ebx
c0014dc8:	e9 c6 fe ff ff       	jmp    c0014c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014dcd:	31 d2                	xor    edx,edx
c0014dcf:	50                   	push   eax
c0014dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd4:	52                   	push   edx
c0014dd5:	50                   	push   eax
c0014dd6:	55                   	push   ebp
c0014dd7:	e8 1a 6c ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014ddc:	58                   	pop    eax
c0014ddd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014de1:	e8 d0 2c ff ff       	call   c0007ab6 <malloc>
c0014de6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014de9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014ded:	31 d2                	xor    edx,edx
c0014def:	58                   	pop    eax
c0014df0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014df4:	53                   	push   ebx
c0014df5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014df9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dfd:	52                   	push   edx
c0014dfe:	50                   	push   eax
c0014dff:	55                   	push   ebp
c0014e00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e03:	83 c4 14             	add    esp,0x14
c0014e06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e0a:	e8 a7 2c ff ff       	call   c0007ab6 <malloc>
c0014e0f:	31 d2                	xor    edx,edx
c0014e11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e15:	83 c4 0c             	add    esp,0xc
c0014e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e1c:	52                   	push   edx
c0014e1d:	50                   	push   eax
c0014e1e:	55                   	push   ebp
c0014e1f:	e8 d2 6b ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014e24:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e27:	31 d2                	xor    edx,edx
c0014e29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014e34:	52                   	push   edx
c0014e35:	50                   	push   eax
c0014e36:	55                   	push   ebp
c0014e37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e3a:	83 c4 20             	add    esp,0x20
c0014e3d:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014e42:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014e4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e52:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014e56:	0f 84 05 03 00 00    	je     c0015161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014e5c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014e63:	31 d2                	xor    edx,edx
c0014e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e69:	c1 e8 03             	shr    eax,0x3
c0014e6c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014e70:	51                   	push   ecx
c0014e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e75:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014e79:	52                   	push   edx
c0014e7a:	50                   	push   eax
c0014e7b:	55                   	push   ebp
c0014e7c:	e8 75 6b ff ff       	call   c000b9f6 <File::seek(unsigned long long)>
c0014e81:	5b                   	pop    ebx
c0014e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e86:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014e8d:	e8 24 2c ff ff       	call   c0007ab6 <malloc>
c0014e92:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e99:	31 d2                	xor    edx,edx
c0014e9b:	5e                   	pop    esi
c0014e9c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014ea0:	50                   	push   eax
c0014ea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ea9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014eb0:	52                   	push   edx
c0014eb1:	50                   	push   eax
c0014eb2:	55                   	push   ebp
c0014eb3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014eb6:	83 c4 20             	add    esp,0x20
c0014eb9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014ec1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014ec5:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014ec9:	0f 8d 76 02 00 00    	jge    c0015145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014ecf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014ed3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ed7:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014edc:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014edf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ee7:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014eeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014eef:	c1 e8 08             	shr    eax,0x8
c0014ef2:	89 c6                	mov    esi,eax
c0014ef4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ef8:	c1 e6 04             	shl    esi,0x4
c0014efb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014eff:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014f02:	85 db                	test   ebx,ebx
c0014f04:	0f 85 b3 00 00 00    	jne    c0014fbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f0a:	83 ec 0c             	sub    esp,0xc
c0014f0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f11:	03 06                	add    eax,DWORD PTR [esi]
c0014f13:	50                   	push   eax
c0014f14:	e8 40 f8 ff ff       	call   c0014759 <Thr::getAddressOfKernelSymbol(char const*)>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	89 c3                	mov    ebx,eax
c0014f1e:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014f23:	85 c0                	test   eax,eax
c0014f25:	0f 85 92 00 00 00    	jne    c0014fbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f2b:	83 ec 0c             	sub    esp,0xc
c0014f2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f32:	03 06                	add    eax,DWORD PTR [esi]
c0014f34:	50                   	push   eax
c0014f35:	e8 72 c6 ff ff       	call   c00115ac <KeResolveCompatibilitySymbol(char*)>
c0014f3a:	83 c4 10             	add    esp,0x10
c0014f3d:	89 c3                	mov    ebx,eax
c0014f3f:	85 c0                	test   eax,eax
c0014f41:	75 7a                	jne    c0014fbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f43:	51                   	push   ecx
c0014f44:	51                   	push   ecx
c0014f45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f49:	03 06                	add    eax,DWORD PTR [esi]
c0014f4b:	50                   	push   eax
c0014f4c:	68 0b 23 02 c0       	push   0xc002230b
c0014f51:	e8 ef 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f56:	58                   	pop    eax
c0014f57:	5a                   	pop    edx
c0014f58:	68 25 23 02 c0       	push   0xc0022325
c0014f5d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f64:	50                   	push   eax
c0014f65:	e8 d6 b6 fe ff       	call   c0000640 <strcpy>
c0014f6a:	59                   	pop    ecx
c0014f6b:	58                   	pop    eax
c0014f6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f70:	03 06                	add    eax,DWORD PTR [esi]
c0014f72:	50                   	push   eax
c0014f73:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f7a:	50                   	push   eax
c0014f7b:	e8 c0 b8 fe ff       	call   c0000840 <strcat>
c0014f80:	58                   	pop    eax
c0014f81:	5a                   	pop    edx
c0014f82:	68 bb 23 02 c0       	push   0xc00223bb
c0014f87:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f8e:	50                   	push   eax
c0014f8f:	e8 ac b8 fe ff       	call   c0000840 <strcat>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f9c:	0f 84 5d 01 00 00    	je     c00150ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014fa2:	83 ec 0c             	sub    esp,0xc
c0014fa5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fac:	50                   	push   eax
c0014fad:	e8 0f c4 ff ff       	call   c00113c1 <KePanic(char const*)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014fb9:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014fbd:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014fc2:	83 f8 01             	cmp    eax,0x1
c0014fc5:	0f 85 8f 00 00 00    	jne    c001505a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014fcb:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014fd2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014fd6:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014fda:	01 ce                	add    esi,ecx
c0014fdc:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014fe4:	0f 94 c0             	sete   al
c0014fe7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014fef:	0f 94 c2             	sete   dl
c0014ff2:	09 c2                	or     edx,eax
c0014ff4:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ff6:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014ffb:	0f b6 d2             	movzx  edx,dl
c0014ffe:	74 41                	je     c0015041 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015000:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015003:	85 d2                	test   edx,edx
c0015005:	75 15                	jne    c001501c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015007:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001500b:	66 83 f8 0c          	cmp    ax,0xc
c001500f:	76 05                	jbe    c0015016 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015011:	b8 0c 00 00 00       	mov    eax,0xc
c0015016:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001501a:	76 37                	jbe    c0015053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001501c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015020:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015025:	0f 84 d4 00 00 00    	je     c00150ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001502b:	83 ec 0c             	sub    esp,0xc
c001502e:	68 3c 23 02 c0       	push   0xc002233c
c0015033:	e8 89 c3 ff ff       	call   c00113c1 <KePanic(char const*)>
c0015038:	83 c4 10             	add    esp,0x10
c001503b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001503f:	eb 12                	jmp    c0015053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015041:	01 c1                	add    ecx,eax
c0015043:	85 d2                	test   edx,edx
c0015045:	75 0c                	jne    c0015053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015047:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001504b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001504f:	77 02                	ja     c0015053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015051:	01 d9                	add    ecx,ebx
c0015053:	89 0e                	mov    DWORD PTR [esi],ecx
c0015055:	e9 e2 00 00 00       	jmp    c001513c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001505a:	83 f8 02             	cmp    eax,0x2
c001505d:	75 77                	jne    c00150d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001505f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015066:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c001506a:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001506e:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015076:	74 21                	je     c0015099 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015078:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015080:	74 17                	je     c0015099 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015082:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015086:	b8 0a 00 00 00       	mov    eax,0xa
c001508b:	83 fa 0e             	cmp    edx,0xe
c001508e:	77 03                	ja     c0015093 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015090:	8d 42 fc             	lea    eax,[edx-0x4]
c0015093:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015097:	76 17                	jbe    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015099:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001509e:	74 5f                	je     c00150ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150a0:	83 ec 0c             	sub    esp,0xc
c00150a3:	68 58 23 02 c0       	push   0xc0022358
c00150a8:	e8 14 c3 ff ff       	call   c00113c1 <KePanic(char const*)>
c00150ad:	83 c4 10             	add    esp,0x10
c00150b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00150b2:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00150b7:	74 13                	je     c00150cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00150b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00150bd:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00150c4:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00150c8:	01 d0                	add    eax,edx
c00150ca:	eb 04                	jmp    c00150d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00150cc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00150d0:	01 c3                	add    ebx,eax
c00150d2:	89 1e                	mov    DWORD PTR [esi],ebx
c00150d4:	eb 66                	jmp    c001513c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150d6:	52                   	push   edx
c00150d7:	52                   	push   edx
c00150d8:	50                   	push   eax
c00150d9:	68 74 23 02 c0       	push   0xc0022374
c00150de:	e8 62 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00150eb:	74 12                	je     c00150ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150ed:	83 ec 0c             	sub    esp,0xc
c00150f0:	68 7f 23 02 c0       	push   0xc002237f
c00150f5:	e8 c7 c2 ff ff       	call   c00113c1 <KePanic(char const*)>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	eb 3d                	jmp    c001513c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150ff:	83 ec 0c             	sub    esp,0xc
c0015102:	55                   	push   ebp
c0015103:	e8 8e 68 ff ff       	call   c000b996 <File::close()>
c0015108:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001510b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001510e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015111:	59                   	pop    ecx
c0015112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015116:	e8 ab 29 ff ff       	call   c0007ac6 <free>
c001511b:	5b                   	pop    ebx
c001511c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015120:	e8 a1 29 ff ff       	call   c0007ac6 <free>
c0015125:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015128:	e8 99 29 ff ff       	call   c0007ac6 <free>
c001512d:	5e                   	pop    esi
c001512e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015132:	e8 8f 29 ff ff       	call   c0007ac6 <free>
c0015137:	83 c4 10             	add    esp,0x10
c001513a:	eb 21                	jmp    c001515d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001513c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015140:	e9 7c fd ff ff       	jmp    c0014ec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015145:	83 ec 0c             	sub    esp,0xc
c0015148:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001514c:	e8 75 29 ff ff       	call   c0007ac6 <free>
c0015151:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	e9 f1 fc ff ff       	jmp    c0014e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001515d:	31 c0                	xor    eax,eax
c001515f:	eb 33                	jmp    c0015194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015161:	83 ec 0c             	sub    esp,0xc
c0015164:	55                   	push   ebp
c0015165:	e8 2c 68 ff ff       	call   c000b996 <File::close()>
c001516a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001516d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015170:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015173:	58                   	pop    eax
c0015174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015178:	e8 49 29 ff ff       	call   c0007ac6 <free>
c001517d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015180:	e8 41 29 ff ff       	call   c0007ac6 <free>
c0015185:	5a                   	pop    edx
c0015186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001518a:	e8 37 29 ff ff       	call   c0007ac6 <free>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	b0 01                	mov    al,0x1
c0015194:	81 c4 5c 03 00 00    	add    esp,0x35c
c001519a:	5b                   	pop    ebx
c001519b:	5e                   	pop    esi
c001519c:	5f                   	pop    edi
c001519d:	5d                   	pop    ebp
c001519e:	c3                   	ret    

c001519f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001519f:	56                   	push   esi
c00151a0:	31 d2                	xor    edx,edx
c00151a2:	53                   	push   ebx
c00151a3:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151ad:	39 d3                	cmp    ebx,edx
c00151af:	7e 1b                	jle    c00151cc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00151b1:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c00151b8:	39 c8                	cmp    eax,ecx
c00151ba:	77 0d                	ja     c00151c9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00151bc:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00151c3:	01 c6                	add    esi,eax
c00151c5:	39 ce                	cmp    esi,ecx
c00151c7:	77 05                	ja     c00151ce <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00151c9:	42                   	inc    edx
c00151ca:	eb e1                	jmp    c00151ad <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00151cc:	31 c0                	xor    eax,eax
c00151ce:	5b                   	pop    ebx
c00151cf:	5e                   	pop    esi
c00151d0:	c3                   	ret    

c00151d1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00151d1:	53                   	push   ebx
c00151d2:	31 c0                	xor    eax,eax
c00151d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00151d8:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151de:	39 c3                	cmp    ebx,eax
c00151e0:	7e 22                	jle    c0015204 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00151e2:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00151e9:	39 ca                	cmp    edx,ecx
c00151eb:	77 14                	ja     c0015201 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151ed:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00151f4:	39 ca                	cmp    edx,ecx
c00151f6:	76 09                	jbe    c0015201 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151f8:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00151ff:	eb 05                	jmp    c0015206 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015201:	40                   	inc    eax
c0015202:	eb da                	jmp    c00151de <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015204:	31 c0                	xor    eax,eax
c0015206:	5b                   	pop    ebx
c0015207:	c3                   	ret    

c0015208 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015208:	53                   	push   ebx
c0015209:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001520d:	53                   	push   ebx
c001520e:	e8 8c ff ff ff       	call   c001519f <Thr::getDriverBaseFromAddress(unsigned long)>
c0015213:	5a                   	pop    edx
c0015214:	31 d2                	xor    edx,edx
c0015216:	85 c0                	test   eax,eax
c0015218:	74 04                	je     c001521e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001521a:	89 da                	mov    edx,ebx
c001521c:	29 c2                	sub    edx,eax
c001521e:	89 d0                	mov    eax,edx
c0015220:	5b                   	pop    ebx
c0015221:	c3                   	ret    

c0015222 <Thr::loadDLL(char const*, bool)>:
c0015222:	55                   	push   ebp
c0015223:	57                   	push   edi
c0015224:	56                   	push   esi
c0015225:	53                   	push   ebx
c0015226:	81 ec 34 01 00 00    	sub    esp,0x134
c001522c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015233:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001523a:	56                   	push   esi
c001523b:	68 97 23 02 c0       	push   0xc0022397
c0015240:	e8 00 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015245:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001524c:	e8 65 28 ff ff       	call   c0007ab6 <malloc>
c0015251:	83 c4 0c             	add    esp,0xc
c0015254:	89 c3                	mov    ebx,eax
c0015256:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001525c:	56                   	push   esi
c001525d:	50                   	push   eax
c001525e:	e8 0d 66 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	85 db                	test   ebx,ebx
c0015268:	75 3c                	jne    c00152a6 <Thr::loadDLL(char const*, bool)+0x84>
c001526a:	89 f8                	mov    eax,edi
c001526c:	84 c0                	test   al,al
c001526e:	0f 84 d2 01 00 00    	je     c0015446 <Thr::loadDLL(char const*, bool)+0x224>
c0015274:	55                   	push   ebp
c0015275:	55                   	push   ebp
c0015276:	68 a8 23 02 c0       	push   0xc00223a8
c001527b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001527f:	55                   	push   ebp
c0015280:	e8 bb b3 fe ff       	call   c0000640 <strcpy>
c0015285:	58                   	pop    eax
c0015286:	5a                   	pop    edx
c0015287:	56                   	push   esi
c0015288:	55                   	push   ebp
c0015289:	e8 b2 b5 fe ff       	call   c0000840 <strcat>
c001528e:	59                   	pop    ecx
c001528f:	58                   	pop    eax
c0015290:	68 bb 23 02 c0       	push   0xc00223bb
c0015295:	55                   	push   ebp
c0015296:	e8 a5 b5 fe ff       	call   c0000840 <strcat>
c001529b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001529e:	e8 1e c1 ff ff       	call   c00113c1 <KePanic(char const*)>
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	51                   	push   ecx
c00152a7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00152ab:	50                   	push   eax
c00152ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c00152b0:	50                   	push   eax
c00152b1:	53                   	push   ebx
c00152b2:	e8 83 69 ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	85 db                	test   ebx,ebx
c00152bc:	74 0c                	je     c00152ca <Thr::loadDLL(char const*, bool)+0xa8>
c00152be:	83 ec 0c             	sub    esp,0xc
c00152c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152c3:	53                   	push   ebx
c00152c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00152cf:	75 0a                	jne    c00152db <Thr::loadDLL(char const*, bool)+0xb9>
c00152d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152d5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00152d9:	75 3c                	jne    c0015317 <Thr::loadDLL(char const*, bool)+0xf5>
c00152db:	89 f8                	mov    eax,edi
c00152dd:	84 c0                	test   al,al
c00152df:	0f 84 49 01 00 00    	je     c001542e <Thr::loadDLL(char const*, bool)+0x20c>
c00152e5:	51                   	push   ecx
c00152e6:	51                   	push   ecx
c00152e7:	68 a8 23 02 c0       	push   0xc00223a8
c00152ec:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00152f0:	53                   	push   ebx
c00152f1:	e8 4a b3 fe ff       	call   c0000640 <strcpy>
c00152f6:	5d                   	pop    ebp
c00152f7:	58                   	pop    eax
c00152f8:	56                   	push   esi
c00152f9:	53                   	push   ebx
c00152fa:	e8 41 b5 fe ff       	call   c0000840 <strcat>
c00152ff:	58                   	pop    eax
c0015300:	5a                   	pop    edx
c0015301:	68 bb 23 02 c0       	push   0xc00223bb
c0015306:	53                   	push   ebx
c0015307:	e8 34 b5 fe ff       	call   c0000840 <strcat>
c001530c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001530f:	e8 ad c0 ff ff       	call   c00113c1 <KePanic(char const*)>
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	52                   	push   edx
c0015318:	6a 03                	push   0x3
c001531a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001531e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015322:	05 ff 0f 00 00       	add    eax,0xfff
c0015327:	83 d2 00             	adc    edx,0x0
c001532a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001532e:	50                   	push   eax
c001532f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015335:	e8 ea 4a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001533a:	59                   	pop    ecx
c001533b:	89 c3                	mov    ebx,eax
c001533d:	5d                   	pop    ebp
c001533e:	50                   	push   eax
c001533f:	68 72 09 02 c0       	push   0xc0020972
c0015344:	e8 fc 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015349:	89 34 24             	mov    DWORD PTR [esp],esi
c001534c:	e8 1f b2 fe ff       	call   c0000570 <strlen>
c0015351:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c0015357:	40                   	inc    eax
c0015358:	89 04 24             	mov    DWORD PTR [esp],eax
c001535b:	e8 56 27 ff ff       	call   c0007ab6 <malloc>
c0015360:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c0015367:	58                   	pop    eax
c0015368:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001536d:	5a                   	pop    edx
c001536e:	56                   	push   esi
c001536f:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c0015376:	e8 c5 b2 fe ff       	call   c0000640 <strcpy>
c001537b:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015380:	8d 50 01             	lea    edx,[eax+0x1]
c0015383:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c001538a:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015390:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015394:	83 c4 0c             	add    esp,0xc
c0015397:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c001539e:	6a 01                	push   0x1
c00153a0:	53                   	push   ebx
c00153a1:	56                   	push   esi
c00153a2:	e8 bf f6 ff ff       	call   c0014a66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	0f b6 c0             	movzx  eax,al
c00153ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153b1:	85 c0                	test   eax,eax
c00153b3:	0f 85 89 00 00 00    	jne    c0015442 <Thr::loadDLL(char const*, bool)+0x220>
c00153b9:	89 f8                	mov    eax,edi
c00153bb:	84 c0                	test   al,al
c00153bd:	74 73                	je     c0015432 <Thr::loadDLL(char const*, bool)+0x210>
c00153bf:	83 ec 0c             	sub    esp,0xc
c00153c2:	68 bd 23 02 c0       	push   0xc00223bd
c00153c7:	e8 f5 bf ff ff       	call   c00113c1 <KePanic(char const*)>
c00153cc:	83 c4 10             	add    esp,0x10
c00153cf:	eb 61                	jmp    c0015432 <Thr::loadDLL(char const*, bool)+0x210>
c00153d1:	50                   	push   eax
c00153d2:	50                   	push   eax
c00153d3:	89 e8                	mov    eax,ebp
c00153d5:	c1 e0 0c             	shl    eax,0xc
c00153d8:	01 d8                	add    eax,ebx
c00153da:	50                   	push   eax
c00153db:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00153e1:	e8 26 45 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00153e6:	83 c4 10             	add    esp,0x10
c00153e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153eb:	a8 60                	test   al,0x60
c00153ed:	75 11                	jne    c0015400 <Thr::loadDLL(char const*, bool)+0x1de>
c00153ef:	83 ec 0c             	sub    esp,0xc
c00153f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153f7:	50                   	push   eax
c00153f8:	e8 59 29 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	45                   	inc    ebp
c0015401:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015405:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015409:	05 ff 0f 00 00       	add    eax,0xfff
c001540e:	bf 00 00 00 00       	mov    edi,0x0
c0015413:	83 d2 00             	adc    edx,0x0
c0015416:	0f ac d0 0c          	shrd   eax,edx,0xc
c001541a:	c1 ea 0c             	shr    edx,0xc
c001541d:	39 c5                	cmp    ebp,eax
c001541f:	89 d1                	mov    ecx,edx
c0015421:	89 f8                	mov    eax,edi
c0015423:	19 c8                	sbb    eax,ecx
c0015425:	72 aa                	jb     c00153d1 <Thr::loadDLL(char const*, bool)+0x1af>
c0015427:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001542c:	75 18                	jne    c0015446 <Thr::loadDLL(char const*, bool)+0x224>
c001542e:	31 db                	xor    ebx,ebx
c0015430:	eb 14                	jmp    c0015446 <Thr::loadDLL(char const*, bool)+0x224>
c0015432:	83 ec 0c             	sub    esp,0xc
c0015435:	68 dc 23 02 c0       	push   0xc00223dc
c001543a:	e8 82 bf ff ff       	call   c00113c1 <KePanic(char const*)>
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	31 ed                	xor    ebp,ebp
c0015444:	eb bb                	jmp    c0015401 <Thr::loadDLL(char const*, bool)+0x1df>
c0015446:	81 c4 2c 01 00 00    	add    esp,0x12c
c001544c:	89 d8                	mov    eax,ebx
c001544e:	5b                   	pop    ebx
c001544f:	5e                   	pop    esi
c0015450:	5f                   	pop    edi
c0015451:	5d                   	pop    ebp
c0015452:	c3                   	ret    

c0015453 <Thr::executeDLL(unsigned long, void*)>:
c0015453:	56                   	push   esi
c0015454:	53                   	push   ebx
c0015455:	52                   	push   edx
c0015456:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001545a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001545e:	85 db                	test   ebx,ebx
c0015460:	75 10                	jne    c0015472 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015462:	83 ec 0c             	sub    esp,0xc
c0015465:	68 f8 23 02 c0       	push   0xc00223f8
c001546a:	e8 52 bf ff ff       	call   c00113c1 <KePanic(char const*)>
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	50                   	push   eax
c0015473:	50                   	push   eax
c0015474:	53                   	push   ebx
c0015475:	68 22 24 02 c0       	push   0xc0022422
c001547a:	e8 c6 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001547f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015483:	89 d8                	mov    eax,ebx
c0015485:	83 c4 14             	add    esp,0x14
c0015488:	5b                   	pop    ebx
c0015489:	5e                   	pop    esi
c001548a:	ff e0                	jmp    eax

c001548c <userModeEntryPoint(void*)>:
c001548c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015491:	83 e8 01             	sub    eax,0x1
c0015494:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015499:	75 01                	jne    c001549c <userModeEntryPoint(void*)+0x10>
c001549b:	fb                   	sti    
c001549c:	fb                   	sti    
c001549d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154a5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00154ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154af:	e9 8b ad fe ff       	jmp    c000023f <goToUsermode>

c00154b4 <changeTSS>:
c00154b4:	83 ec 14             	sub    esp,0x14
c00154b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154bf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00154c4:	c1 e2 15             	shl    edx,0x15
c00154c7:	29 d0                	sub    eax,edx
c00154c9:	50                   	push   eax
c00154ca:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00154cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00154d5:	05 7c 11 00 00       	add    eax,0x117c
c00154da:	50                   	push   eax
c00154db:	e8 74 3a ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00154e0:	83 c4 1c             	add    esp,0x1c
c00154e3:	c3                   	ret    

c00154e4 <switchToThread(ThreadControlBlock*)>:
c00154e4:	57                   	push   edi
c00154e5:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00154eb:	56                   	push   esi
c00154ec:	85 c9                	test   ecx,ecx
c00154ee:	53                   	push   ebx
c00154ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154f3:	0f 85 8b 00 00 00    	jne    c0015584 <switchToThread(ThreadControlBlock*)+0xa0>
c00154f9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00154fd:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015503:	74 7b                	je     c0015580 <switchToThread(ThreadControlBlock*)+0x9c>
c0015505:	b8 00 04 00 00       	mov    eax,0x400
c001550a:	29 d0                	sub    eax,edx
c001550c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001550f:	d1 f8                	sar    eax,1
c0015511:	01 d0                	add    eax,edx
c0015513:	90                   	nop
c0015514:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015517:	e8 1e 28 00 00       	call   c0017d3a <HalQueryPerformanceCounter()>
c001551c:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015521:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015527:	89 c6                	mov    esi,eax
c0015529:	89 d7                	mov    edi,edx
c001552b:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015531:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015536:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001553c:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015542:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015548:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001554e:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015554:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015557:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001555a:	01 c6                	add    esi,eax
c001555c:	11 d7                	adc    edi,edx
c001555e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015561:	83 ec 0c             	sub    esp,0xc
c0015564:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015567:	53                   	push   ebx
c0015568:	e8 0a ad fe ff       	call   c0000277 <switchToThreadASM>
c001556d:	0f 20 c0             	mov    eax,cr0
c0015570:	83 c8 08             	or     eax,0x8
c0015573:	0f 22 c0             	mov    cr0,eax
c0015576:	83 c4 10             	add    esp,0x10
c0015579:	5b                   	pop    ebx
c001557a:	5e                   	pop    esi
c001557b:	5f                   	pop    edi
c001557c:	c3                   	ret    
c001557d:	8d 76 00             	lea    esi,[esi+0x0]
c0015580:	31 c0                	xor    eax,eax
c0015582:	eb 90                	jmp    c0015514 <switchToThread(ThreadControlBlock*)+0x30>
c0015584:	5b                   	pop    ebx
c0015585:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001558f:	5e                   	pop    esi
c0015590:	5f                   	pop    edi
c0015591:	c3                   	ret    
c0015592:	66 90                	xchg   ax,ax

c0015594 <Process::addArgs(char**)>:
c0015594:	57                   	push   edi
c0015595:	56                   	push   esi
c0015596:	53                   	push   ebx
c0015597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001559b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001559f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00155a9:	85 ff                	test   edi,edi
c00155ab:	74 4f                	je     c00155fc <Process::addArgs(char**)+0x68>
c00155ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00155af:	85 c0                	test   eax,eax
c00155b1:	74 49                	je     c00155fc <Process::addArgs(char**)+0x68>
c00155b3:	31 db                	xor    ebx,ebx
c00155b5:	8d 76 00             	lea    esi,[esi+0x0]
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	50                   	push   eax
c00155bc:	e8 af af fe ff       	call   c0000570 <strlen>
c00155c1:	83 c0 01             	add    eax,0x1
c00155c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00155c7:	e8 ea 24 ff ff       	call   c0007ab6 <malloc>
c00155cc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00155d3:	5a                   	pop    edx
c00155d4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00155d7:	59                   	pop    ecx
c00155d8:	83 c3 01             	add    ebx,0x1
c00155db:	52                   	push   edx
c00155dc:	50                   	push   eax
c00155dd:	e8 5e b0 fe ff       	call   c0000640 <strcpy>
c00155e2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00155e8:	83 c4 10             	add    esp,0x10
c00155eb:	83 c1 01             	add    ecx,0x1
c00155ee:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00155f4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00155f7:	85 c0                	test   eax,eax
c00155f9:	75 bd                	jne    c00155b8 <Process::addArgs(char**)+0x24>
c00155fb:	90                   	nop
c00155fc:	5b                   	pop    ebx
c00155fd:	5e                   	pop    esi
c00155fe:	5f                   	pop    edi
c00155ff:	c3                   	ret    

c0015600 <Process::Process(char const*, Process*, char**)>:
c0015600:	56                   	push   esi
c0015601:	53                   	push   ebx
c0015602:	83 ec 14             	sub    esp,0x14
c0015605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015609:	05 0c 02 00 00       	add    eax,0x20c
c001560e:	bb 07 00 00 00       	mov    ebx,0x7
c0015613:	89 c6                	mov    esi,eax
c0015615:	8d 76 00             	lea    esi,[esi+0x0]
c0015618:	85 db                	test   ebx,ebx
c001561a:	78 14                	js     c0015630 <Process::Process(char const*, Process*, char**)+0x30>
c001561c:	83 ec 0c             	sub    esp,0xc
c001561f:	56                   	push   esi
c0015620:	e8 e3 a5 00 00       	call   c001fc08 <ThreadControlBlock::ThreadControlBlock()>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	83 c6 5f             	add    esi,0x5f
c001562b:	83 eb 01             	sub    ebx,0x1
c001562e:	eb e8                	jmp    c0015618 <Process::Process(char const*, Process*, char**)+0x18>
c0015630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015634:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001563b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015646:	83 ec 0c             	sub    esp,0xc
c0015649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001564d:	e8 64 bb ff ff       	call   c00111b6 <KeNewProcessEnv(Process*)>
c0015652:	83 c4 10             	add    esp,0x10
c0015655:	89 c2                	mov    edx,eax
c0015657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015665:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001566e:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c0015673:	8d 50 01             	lea    edx,[eax+0x1]
c0015676:	89 15 40 36 02 c0    	mov    DWORD PTR ds:0xc0023640,edx
c001567c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015680:	89 02                	mov    DWORD PTR [edx],eax
c0015682:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001568a:	83 ec 0c             	sub    esp,0xc
c001568d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015691:	e8 20 24 ff ff       	call   c0007ab6 <malloc>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	89 c3                	mov    ebx,eax
c001569b:	83 ec 08             	sub    esp,0x8
c001569e:	6a 00                	push   0x0
c00156a0:	53                   	push   ebx
c00156a1:	e8 c2 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c00156a6:	83 c4 10             	add    esp,0x10
c00156a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ad:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156c9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156cf:	e8 06 c1 ff ff       	call   c00117da <KeInitSignals()>
c00156d4:	89 c2                	mov    edx,eax
c00156d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156da:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156ea:	85 c0                	test   eax,eax
c00156ec:	74 42                	je     c0015730 <Process::Process(char const*, Process*, char**)+0x130>
c00156ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156f8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00156fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015702:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001570c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015712:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001571c:	05 0c 01 00 00       	add    eax,0x10c
c0015721:	83 ec 08             	sub    esp,0x8
c0015724:	52                   	push   edx
c0015725:	50                   	push   eax
c0015726:	e8 15 af fe ff       	call   c0000640 <strcpy>
c001572b:	83 c4 10             	add    esp,0x10
c001572e:	eb 64                	jmp    c0015794 <Process::Process(char const*, Process*, char**)+0x194>
c0015730:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001573f:	e8 72 23 ff ff       	call   c0007ab6 <malloc>
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	89 c3                	mov    ebx,eax
c0015749:	83 ec 08             	sub    esp,0x8
c001574c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015750:	53                   	push   ebx
c0015751:	e8 10 35 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015756:	83 c4 10             	add    esp,0x10
c0015759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001575d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015767:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001576d:	83 ec 0c             	sub    esp,0xc
c0015770:	50                   	push   eax
c0015771:	e8 8e 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015776:	83 c4 10             	add    esp,0x10
c0015779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001577d:	05 0c 01 00 00       	add    eax,0x10c
c0015782:	83 ec 08             	sub    esp,0x8
c0015785:	68 41 24 02 c0       	push   0xc0022441
c001578a:	50                   	push   eax
c001578b:	e8 b0 ae fe ff       	call   c0000640 <strcpy>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	90                   	nop
c0015794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015798:	83 c0 0c             	add    eax,0xc
c001579b:	83 ec 08             	sub    esp,0x8
c001579e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157a2:	50                   	push   eax
c00157a3:	e8 98 ae fe ff       	call   c0000640 <strcpy>
c00157a8:	83 c4 10             	add    esp,0x10
c00157ab:	83 ec 08             	sub    esp,0x8
c00157ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00157b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157b6:	e8 d9 fd ff ff       	call   c0015594 <Process::addArgs(char**)>
c00157bb:	83 c4 10             	add    esp,0x10
c00157be:	83 ec 08             	sub    esp,0x8
c00157c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157c9:	e8 66 ed ff ff       	call   c0014534 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00157d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00157d9:	83 f0 01             	xor    eax,0x1
c00157dc:	88 c2                	mov    dl,al
c00157de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157e2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00157e8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00157ed:	83 ec 04             	sub    esp,0x4
c00157f0:	50                   	push   eax
c00157f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157f5:	68 98 24 02 c0       	push   0xc0022498
c00157fa:	e8 46 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00157ff:	83 c4 10             	add    esp,0x10
c0015802:	90                   	nop
c0015803:	83 c4 14             	add    esp,0x14
c0015806:	5b                   	pop    ebx
c0015807:	5e                   	pop    esi
c0015808:	c3                   	ret    
c0015809:	90                   	nop
c001580a:	66 90                	xchg   ax,ax

c001580c <Process::Process(bool, char const*, Process*, char**)>:
c001580c:	56                   	push   esi
c001580d:	53                   	push   ebx
c001580e:	83 ec 24             	sub    esp,0x24
c0015811:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015815:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001581d:	05 0c 02 00 00       	add    eax,0x20c
c0015822:	bb 07 00 00 00       	mov    ebx,0x7
c0015827:	89 c6                	mov    esi,eax
c0015829:	8d 76 00             	lea    esi,[esi+0x0]
c001582c:	85 db                	test   ebx,ebx
c001582e:	78 14                	js     c0015844 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015830:	83 ec 0c             	sub    esp,0xc
c0015833:	56                   	push   esi
c0015834:	e8 cf a3 00 00       	call   c001fc08 <ThreadControlBlock::ThreadControlBlock()>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	83 c6 5f             	add    esi,0x5f
c001583f:	83 eb 01             	sub    ebx,0x1
c0015842:	eb e8                	jmp    c001582c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015848:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001584f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015853:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001585a:	83 ec 0c             	sub    esp,0xc
c001585d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015861:	e8 50 b9 ff ff       	call   c00111b6 <KeNewProcessEnv(Process*)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	89 c2                	mov    edx,eax
c001586b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001586f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015879:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015882:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c0015887:	8d 50 01             	lea    edx,[eax+0x1]
c001588a:	89 15 40 36 02 c0    	mov    DWORD PTR ds:0xc0023640,edx
c0015890:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015894:	89 02                	mov    DWORD PTR [edx],eax
c0015896:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00158a5:	e8 0c 22 ff ff       	call   c0007ab6 <malloc>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	89 c3                	mov    ebx,eax
c00158af:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00158b4:	83 ec 08             	sub    esp,0x8
c00158b7:	50                   	push   eax
c00158b8:	53                   	push   ebx
c00158b9:	e8 aa 47 ff ff       	call   c000a068 <VAS::VAS(bool)>
c00158be:	83 c4 10             	add    esp,0x10
c00158c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158c5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00158cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158cf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158dd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00158e1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00158e7:	e8 ee be ff ff       	call   c00117da <KeInitSignals()>
c00158ec:	89 c2                	mov    edx,eax
c00158ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158f2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00158f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015902:	85 c0                	test   eax,eax
c0015904:	74 42                	je     c0015948 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001590a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015910:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001591a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015924:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001592a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015934:	05 0c 01 00 00       	add    eax,0x10c
c0015939:	83 ec 08             	sub    esp,0x8
c001593c:	52                   	push   edx
c001593d:	50                   	push   eax
c001593e:	e8 fd ac fe ff       	call   c0000640 <strcpy>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	eb 64                	jmp    c00159ac <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015948:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015950:	83 ec 0c             	sub    esp,0xc
c0015953:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015957:	e8 5a 21 ff ff       	call   c0007ab6 <malloc>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	89 c3                	mov    ebx,eax
c0015961:	83 ec 08             	sub    esp,0x8
c0015964:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015968:	53                   	push   ebx
c0015969:	e8 f8 32 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015975:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001597b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001597f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015985:	83 ec 0c             	sub    esp,0xc
c0015988:	50                   	push   eax
c0015989:	e8 76 2b ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015995:	05 0c 01 00 00       	add    eax,0x10c
c001599a:	83 ec 08             	sub    esp,0x8
c001599d:	68 41 24 02 c0       	push   0xc0022441
c00159a2:	50                   	push   eax
c00159a3:	e8 98 ac fe ff       	call   c0000640 <strcpy>
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	90                   	nop
c00159ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159b0:	83 c0 0c             	add    eax,0xc
c00159b3:	83 ec 08             	sub    esp,0x8
c00159b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159ba:	50                   	push   eax
c00159bb:	e8 80 ac fe ff       	call   c0000640 <strcpy>
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	83 ec 08             	sub    esp,0x8
c00159c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00159ce:	e8 c1 fb ff ff       	call   c0015594 <Process::addArgs(char**)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	90                   	nop
c00159d7:	83 c4 24             	add    esp,0x24
c00159da:	5b                   	pop    ebx
c00159db:	5e                   	pop    esi
c00159dc:	c3                   	ret    
c00159dd:	8d 76 00             	lea    esi,[esi+0x0]

c00159e0 <taskStartupFunction>:
c00159e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00159e8:	c3                   	ret    
c00159e9:	90                   	nop
c00159ea:	66 90                	xchg   ax,ax

c00159ec <Semaphore::Semaphore(int)>:
c00159ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00159f4:	89 10                	mov    DWORD PTR [eax],edx
c00159f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159fa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015a01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015a17:	90                   	nop
c0015a18:	c3                   	ret    
c0015a19:	90                   	nop
c0015a1a:	66 90                	xchg   ax,ax

c0015a1c <Mutex::Mutex()>:
c0015a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a20:	6a 01                	push   0x1
c0015a22:	50                   	push   eax
c0015a23:	e8 c4 ff ff ff       	call   c00159ec <Semaphore::Semaphore(int)>
c0015a28:	83 c4 08             	add    esp,0x8
c0015a2b:	90                   	nop
c0015a2c:	c3                   	ret    
c0015a2d:	90                   	nop
c0015a2e:	66 90                	xchg   ax,ax

c0015a30 <Process::createThread(void (*)(void*), void*, int)>:
c0015a30:	57                   	push   edi
c0015a31:	31 c9                	xor    ecx,ecx
c0015a33:	56                   	push   esi
c0015a34:	53                   	push   ebx
c0015a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a39:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015a40:	89 f2                	mov    edx,esi
c0015a42:	66 90                	xchg   ax,ax
c0015a44:	0f b7 c2             	movzx  eax,dx
c0015a47:	80 e2 01             	and    dl,0x1
c0015a4a:	74 14                	je     c0015a60 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015a4c:	d1 f8                	sar    eax,1
c0015a4e:	83 c1 01             	add    ecx,0x1
c0015a51:	89 c2                	mov    edx,eax
c0015a53:	83 f9 10             	cmp    ecx,0x10
c0015a56:	75 ec                	jne    c0015a44 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015a58:	31 db                	xor    ebx,ebx
c0015a5a:	89 d8                	mov    eax,ebx
c0015a5c:	5b                   	pop    ebx
c0015a5d:	5e                   	pop    esi
c0015a5e:	5f                   	pop    edi
c0015a5f:	c3                   	ret    
c0015a60:	b8 01 00 00 00       	mov    eax,0x1
c0015a65:	d3 e0                	shl    eax,cl
c0015a67:	09 c6                	or     esi,eax
c0015a69:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a6c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015a73:	01 c0                	add    eax,eax
c0015a75:	01 c8                	add    eax,ecx
c0015a77:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a7a:	01 d8                	add    eax,ebx
c0015a7c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015a83:	75 0b                	jne    c0015a90 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015a85:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015a8f:	90                   	nop
c0015a90:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a96:	83 ec 0c             	sub    esp,0xc
c0015a99:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a9c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a9f:	01 c0                	add    eax,eax
c0015aa1:	01 c8                	add    eax,ecx
c0015aa3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015aa6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015aa9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015aaf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015ab5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ab9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015abf:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ac5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015acb:	89 ca                	mov    edx,ecx
c0015acd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015ad4:	f7 da                	neg    edx
c0015ad6:	c1 e2 15             	shl    edx,0x15
c0015ad9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015adf:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015ae5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ae9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015af3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015af9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015afd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015b03:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015b0d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015b17:	68 00 01 00 00       	push   0x100
c0015b1c:	e8 95 1f ff ff       	call   c0007ab6 <malloc>
c0015b21:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015b24:	58                   	pop    eax
c0015b25:	5a                   	pop    edx
c0015b26:	53                   	push   ebx
c0015b27:	68 e4 96 02 c0       	push   0xc00296e4
c0015b2c:	e8 6f 9e 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	89 d8                	mov    eax,ebx
c0015b36:	5b                   	pop    ebx
c0015b37:	5e                   	pop    esi
c0015b38:	5f                   	pop    edi
c0015b39:	c3                   	ret    
c0015b3a:	66 90                	xchg   ax,ax

c0015b3c <Process::createUserThread()>:
c0015b3c:	83 ec 0c             	sub    esp,0xc
c0015b3f:	68 80 00 00 00       	push   0x80
c0015b44:	6a 00                	push   0x0
c0015b46:	68 8c 54 01 c0       	push   0xc001548c
c0015b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b4f:	50                   	push   eax
c0015b50:	e8 db fe ff ff       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c0015b55:	83 c4 1c             	add    esp,0x1c
c0015b58:	c3                   	ret    
c0015b59:	8d 76 00             	lea    esi,[esi+0x0]

c0015b5c <setupMultitasking(void (*)())>:
c0015b5c:	56                   	push   esi
c0015b5d:	53                   	push   ebx
c0015b5e:	83 ec 04             	sub    esp,0x4
c0015b61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b65:	eb 11                	jmp    c0015b78 <setupMultitasking(void (*)())+0x1c>
c0015b67:	90                   	nop
c0015b68:	83 ec 0c             	sub    esp,0xc
c0015b6b:	68 e4 96 02 c0       	push   0xc00296e4
c0015b70:	e8 6f 9d 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	68 e4 96 02 c0       	push   0xc00296e4
c0015b80:	e8 3b 9d 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b85:	83 c4 10             	add    esp,0x10
c0015b88:	84 c0                	test   al,al
c0015b8a:	74 dc                	je     c0015b68 <setupMultitasking(void (*)())+0xc>
c0015b8c:	83 ec 0c             	sub    esp,0xc
c0015b8f:	68 24 07 00 00       	push   0x724
c0015b94:	e8 1d 1f ff ff       	call   c0007ab6 <malloc>
c0015b99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ba0:	89 c3                	mov    ebx,eax
c0015ba2:	6a 00                	push   0x0
c0015ba4:	68 45 24 02 c0       	push   0xc0022445
c0015ba9:	6a 01                	push   0x1
c0015bab:	50                   	push   eax
c0015bac:	e8 5b fc ff ff       	call   c001580c <Process::Process(bool, char const*, Process*, char**)>
c0015bb1:	83 c4 14             	add    esp,0x14
c0015bb4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015bba:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015bc0:	50                   	push   eax
c0015bc1:	e8 93 2b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015bc6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015bcd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015bd7:	83 c8 01             	or     eax,0x1
c0015bda:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015be1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015be7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015bea:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015bf4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015bfa:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015c00:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015c0a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015c14:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015c1e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015c24:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015c2e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015c34:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015c3e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015c45:	e8 6c 1e ff ff       	call   c0007ab6 <malloc>
c0015c4a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015c50:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015c56:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015c5c:	5a                   	pop    edx
c0015c5d:	59                   	pop    ecx
c0015c5e:	68 41 24 02 c0       	push   0xc0022441
c0015c63:	50                   	push   eax
c0015c64:	e8 d7 a9 fe ff       	call   c0000640 <strcpy>
c0015c69:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015c70:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c74:	83 c4 14             	add    esp,0x14
c0015c77:	5b                   	pop    ebx
c0015c78:	5e                   	pop    esi
c0015c79:	e9 eb a5 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015c7e:	66 90                	xchg   ax,ax

c0015c80 <schedule()>:
c0015c80:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c86:	85 d2                	test   edx,edx
c0015c88:	74 0e                	je     c0015c98 <schedule()+0x18>
c0015c8a:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015c94:	c3                   	ret    
c0015c95:	8d 76 00             	lea    esi,[esi+0x0]
c0015c98:	53                   	push   ebx
c0015c99:	83 ec 14             	sub    esp,0x14
c0015c9c:	68 e4 96 02 c0       	push   0xc00296e4
c0015ca1:	e8 1a 9c 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	84 c0                	test   al,al
c0015cab:	75 3f                	jne    c0015cec <schedule()+0x6c>
c0015cad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015cb5:	83 fa 01             	cmp    edx,0x1
c0015cb8:	74 3a                	je     c0015cf4 <schedule()+0x74>
c0015cba:	66 90                	xchg   ax,ax
c0015cbc:	83 ec 0c             	sub    esp,0xc
c0015cbf:	68 e4 96 02 c0       	push   0xc00296e4
c0015cc4:	e8 13 9c 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015cc9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015cd0:	89 c3                	mov    ebx,eax
c0015cd2:	e8 0d 9c 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015cd7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ce1:	e8 fe f7 ff ff       	call   c00154e4 <switchToThread(ThreadControlBlock*)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cec:	83 c4 08             	add    esp,0x8
c0015cef:	5b                   	pop    ebx
c0015cf0:	c3                   	ret    
c0015cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015cfb:	83 ec 08             	sub    esp,0x8
c0015cfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d03:	50                   	push   eax
c0015d04:	68 e4 96 02 c0       	push   0xc00296e4
c0015d09:	e8 92 9c 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	eb a9                	jmp    c0015cbc <schedule()+0x3c>
c0015d13:	90                   	nop

c0015d14 <Semaphore::tryAcquire()>:
c0015d14:	53                   	push   ebx
c0015d15:	83 ec 08             	sub    esp,0x8
c0015d18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d1c:	fa                   	cli    
c0015d1d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d22:	8d 50 01             	lea    edx,[eax+0x1]
c0015d25:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d2b:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015d31:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015d34:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015d3a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015d3d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015d3f:	7c 33                	jl     c0015d74 <Semaphore::tryAcquire()+0x60>
c0015d41:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d47:	85 d2                	test   edx,edx
c0015d49:	75 0d                	jne    c0015d58 <Semaphore::tryAcquire()+0x44>
c0015d4b:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015d51:	85 d2                	test   edx,edx
c0015d53:	75 6f                	jne    c0015dc4 <Semaphore::tryAcquire()+0xb0>
c0015d55:	8d 76 00             	lea    esi,[esi+0x0]
c0015d58:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d5d:	85 c0                	test   eax,eax
c0015d5f:	74 0b                	je     c0015d6c <Semaphore::tryAcquire()+0x58>
c0015d61:	8d 76 00             	lea    esi,[esi+0x0]
c0015d64:	31 c0                	xor    eax,eax
c0015d66:	83 c4 08             	add    esp,0x8
c0015d69:	5b                   	pop    ebx
c0015d6a:	c3                   	ret    
c0015d6b:	90                   	nop
c0015d6c:	fb                   	sti    
c0015d6d:	83 c4 08             	add    esp,0x8
c0015d70:	5b                   	pop    ebx
c0015d71:	c3                   	ret    
c0015d72:	66 90                	xchg   ax,ax
c0015d74:	83 c3 01             	add    ebx,0x1
c0015d77:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d7d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015d80:	85 d2                	test   edx,edx
c0015d82:	75 24                	jne    c0015da8 <Semaphore::tryAcquire()+0x94>
c0015d84:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015d8a:	85 c9                	test   ecx,ecx
c0015d8c:	74 1a                	je     c0015da8 <Semaphore::tryAcquire()+0x94>
c0015d8e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d98:	e8 e3 fe ff ff       	call   c0015c80 <schedule()>
c0015d9d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015da2:	83 e8 01             	sub    eax,0x1
c0015da5:	8d 76 00             	lea    esi,[esi+0x0]
c0015da8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dad:	85 c0                	test   eax,eax
c0015daf:	75 0b                	jne    c0015dbc <Semaphore::tryAcquire()+0xa8>
c0015db1:	fb                   	sti    
c0015db2:	b0 01                	mov    al,0x1
c0015db4:	83 c4 08             	add    esp,0x8
c0015db7:	5b                   	pop    ebx
c0015db8:	c3                   	ret    
c0015db9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dbc:	b0 01                	mov    al,0x1
c0015dbe:	83 c4 08             	add    esp,0x8
c0015dc1:	5b                   	pop    ebx
c0015dc2:	c3                   	ret    
c0015dc3:	90                   	nop
c0015dc4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dce:	e8 ad fe ff ff       	call   c0015c80 <schedule()>
c0015dd3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dd8:	83 e8 01             	sub    eax,0x1
c0015ddb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015de0:	85 c0                	test   eax,eax
c0015de2:	75 80                	jne    c0015d64 <Semaphore::tryAcquire()+0x50>
c0015de4:	eb 86                	jmp    c0015d6c <Semaphore::tryAcquire()+0x58>
c0015de6:	66 90                	xchg   ax,ax

c0015de8 <Semaphore::assertLocked(char const*)>:
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015def:	fa                   	cli    
c0015df0:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015df6:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015dfb:	83 c1 01             	add    ecx,0x1
c0015dfe:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015e04:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e07:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e0d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015e0f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015e12:	7c 28                	jl     c0015e3c <Semaphore::assertLocked(char const*)+0x54>
c0015e14:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e19:	85 c0                	test   eax,eax
c0015e1b:	75 0b                	jne    c0015e28 <Semaphore::assertLocked(char const*)+0x40>
c0015e1d:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e22:	85 c0                	test   eax,eax
c0015e24:	75 32                	jne    c0015e58 <Semaphore::assertLocked(char const*)+0x70>
c0015e26:	66 90                	xchg   ax,ax
c0015e28:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e2d:	83 e8 01             	sub    eax,0x1
c0015e30:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e35:	75 01                	jne    c0015e38 <Semaphore::assertLocked(char const*)+0x50>
c0015e37:	fb                   	sti    
c0015e38:	83 c4 0c             	add    esp,0xc
c0015e3b:	c3                   	ret    
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e43:	52                   	push   edx
c0015e44:	e8 78 b5 ff ff       	call   c00113c1 <KePanic(char const*)>
c0015e49:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	83 e8 01             	sub    eax,0x1
c0015e54:	eb be                	jmp    c0015e14 <Semaphore::assertLocked(char const*)+0x2c>
c0015e56:	66 90                	xchg   ax,ax
c0015e58:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e62:	e8 19 fe ff ff       	call   c0015c80 <schedule()>
c0015e67:	eb bf                	jmp    c0015e28 <Semaphore::assertLocked(char const*)+0x40>
c0015e69:	8d 76 00             	lea    esi,[esi+0x0]

c0015e6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015e6c:	83 ec 0c             	sub    esp,0xc
c0015e6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e7b:	e8 00 fe ff ff       	call   c0015c80 <schedule()>
c0015e80:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e85:	83 e8 01             	sub    eax,0x1
c0015e88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e8d:	75 01                	jne    c0015e90 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015e8f:	fb                   	sti    
c0015e90:	83 c4 0c             	add    esp,0xc
c0015e93:	c3                   	ret    

c0015e94 <blockTask(TaskState)>:
c0015e94:	83 ec 0c             	sub    esp,0xc
c0015e97:	fa                   	cli    
c0015e98:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ea1:	83 c0 01             	add    eax,0x1
c0015ea4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015eb1:	e8 ca fd ff ff       	call   c0015c80 <schedule()>
c0015eb6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ebb:	83 e8 01             	sub    eax,0x1
c0015ebe:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ec3:	75 03                	jne    c0015ec8 <blockTask(TaskState)+0x34>
c0015ec5:	fb                   	sti    
c0015ec6:	66 90                	xchg   ax,ax
c0015ec8:	83 c4 0c             	add    esp,0xc
c0015ecb:	c3                   	ret    

c0015ecc <waitTask(int, int*, int)>:
c0015ecc:	83 ec 18             	sub    esp,0x18
c0015ecf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ed8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015edb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015ee7:	6a 07                	push   0x7
c0015ee9:	e8 a6 ff ff ff       	call   c0015e94 <blockTask(TaskState)>
c0015eee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef3:	83 c4 10             	add    esp,0x10
c0015ef6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015ef9:	85 d2                	test   edx,edx
c0015efb:	74 0b                	je     c0015f08 <waitTask(int, int*, int)+0x3c>
c0015efd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015f00:	89 02                	mov    DWORD PTR [edx],eax
c0015f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f07:	90                   	nop
c0015f08:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015f0b:	83 c4 0c             	add    esp,0xc
c0015f0e:	c3                   	ret    
c0015f0f:	90                   	nop

c0015f10 <milliTenthSleepUntil(unsigned int)>:
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f17:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015f1d:	76 05                	jbe    c0015f24 <milliTenthSleepUntil(unsigned int)+0x14>
c0015f1f:	90                   	nop
c0015f20:	83 c4 0c             	add    esp,0xc
c0015f23:	c3                   	ret    
c0015f24:	fa                   	cli    
c0015f25:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015f2b:	83 ec 08             	sub    esp,0x8
c0015f2e:	83 c2 01             	add    edx,0x1
c0015f31:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015f37:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015f3d:	83 c1 01             	add    ecx,0x1
c0015f40:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f4c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f54:	50                   	push   eax
c0015f55:	68 d8 96 02 c0       	push   0xc00296d8
c0015f5a:	e8 41 9a 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f5f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015f66:	e8 29 ff ff ff       	call   c0015e94 <blockTask(TaskState)>
c0015f6b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f70:	83 c4 10             	add    esp,0x10
c0015f73:	83 e8 01             	sub    eax,0x1
c0015f76:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f7b:	85 c0                	test   eax,eax
c0015f7d:	75 09                	jne    c0015f88 <milliTenthSleepUntil(unsigned int)+0x78>
c0015f7f:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f84:	85 c0                	test   eax,eax
c0015f86:	75 14                	jne    c0015f9c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015f88:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f8d:	83 e8 01             	sub    eax,0x1
c0015f90:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f95:	75 89                	jne    c0015f20 <milliTenthSleepUntil(unsigned int)+0x10>
c0015f97:	fb                   	sti    
c0015f98:	83 c4 0c             	add    esp,0xc
c0015f9b:	c3                   	ret    
c0015f9c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015fa6:	e8 d5 fc ff ff       	call   c0015c80 <schedule()>
c0015fab:	eb db                	jmp    c0015f88 <milliTenthSleepUntil(unsigned int)+0x78>
c0015fad:	8d 76 00             	lea    esi,[esi+0x0]

c0015fb0 <milliTenthSleep(unsigned int)>:
c0015fb0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fb4:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015fb9:	01 c2                	add    edx,eax
c0015fbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015fbf:	e9 4c ff ff ff       	jmp    c0015f10 <milliTenthSleepUntil(unsigned int)>

c0015fc4 <sleep(unsigned int)>:
c0015fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fc8:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fcb:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fce:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fd1:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fd4:	c1 e0 04             	shl    eax,0x4
c0015fd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fdb:	eb d3                	jmp    c0015fb0 <milliTenthSleep(unsigned int)>
c0015fdd:	90                   	nop
c0015fde:	66 90                	xchg   ax,ax

c0015fe0 <Semaphore::acquire()>:
c0015fe0:	83 ec 0c             	sub    esp,0xc
c0015fe3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fe7:	fa                   	cli    
c0015fe8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fed:	83 c0 01             	add    eax,0x1
c0015ff0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ff5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ffa:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ffd:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016003:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016006:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016008:	7d 2e                	jge    c0016038 <Semaphore::acquire()+0x58>
c001600a:	83 c1 01             	add    ecx,0x1
c001600d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016010:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016015:	85 c0                	test   eax,eax
c0016017:	75 0b                	jne    c0016024 <Semaphore::acquire()+0x44>
c0016019:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001601e:	85 c0                	test   eax,eax
c0016020:	75 66                	jne    c0016088 <Semaphore::acquire()+0xa8>
c0016022:	66 90                	xchg   ax,ax
c0016024:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016029:	83 e8 01             	sub    eax,0x1
c001602c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016031:	75 01                	jne    c0016034 <Semaphore::acquire()+0x54>
c0016033:	fb                   	sti    
c0016034:	83 c4 0c             	add    esp,0xc
c0016037:	c3                   	ret    
c0016038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001603d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016044:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016047:	85 c9                	test   ecx,ecx
c0016049:	74 51                	je     c001609c <Semaphore::acquire()+0xbc>
c001604b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001604e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016054:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016057:	90                   	nop
c0016058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001605d:	83 ec 0c             	sub    esp,0xc
c0016060:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016063:	68 c4 24 02 c0       	push   0xc00224c4
c0016068:	e8 d8 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001606d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016074:	e8 1b fe ff ff       	call   c0015e94 <blockTask(TaskState)>
c0016079:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	83 e8 01             	sub    eax,0x1
c0016084:	eb 8a                	jmp    c0016010 <Semaphore::acquire()+0x30>
c0016086:	66 90                	xchg   ax,ax
c0016088:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016092:	e8 e9 fb ff ff       	call   c0015c80 <schedule()>
c0016097:	eb 8b                	jmp    c0016024 <Semaphore::acquire()+0x44>
c0016099:	8d 76 00             	lea    esi,[esi+0x0]
c001609c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00160a4:	eb b2                	jmp    c0016058 <Semaphore::acquire()+0x78>
c00160a6:	66 90                	xchg   ax,ax

c00160a8 <taskReturned>:
c00160a8:	83 ec 18             	sub    esp,0x18
c00160ab:	68 e4 24 02 c0       	push   0xc00224e4
c00160b0:	e8 0c b3 ff ff       	call   c00113c1 <KePanic(char const*)>
c00160b5:	83 c4 10             	add    esp,0x10
c00160b8:	83 ec 0c             	sub    esp,0xc
c00160bb:	6a 02                	push   0x2
c00160bd:	e8 d2 fd ff ff       	call   c0015e94 <blockTask(TaskState)>
c00160c2:	fa                   	cli    
c00160c3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160c8:	83 c0 01             	add    eax,0x1
c00160cb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160d0:	e8 ab fb ff ff       	call   c0015c80 <schedule()>
c00160d5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160da:	83 c4 10             	add    esp,0x10
c00160dd:	83 e8 01             	sub    eax,0x1
c00160e0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160e5:	85 c0                	test   eax,eax
c00160e7:	75 cf                	jne    c00160b8 <taskReturned+0x10>
c00160e9:	fb                   	sti    
c00160ea:	eb cc                	jmp    c00160b8 <taskReturned+0x10>

c00160ec <Thr::processFromPID(int)>:
c00160ec:	57                   	push   edi
c00160ed:	56                   	push   esi
c00160ee:	53                   	push   ebx
c00160ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160f3:	fa                   	cli    
c00160f4:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c00160fa:	83 ec 0c             	sub    esp,0xc
c00160fd:	83 c1 01             	add    ecx,0x1
c0016100:	68 e4 96 02 c0       	push   0xc00296e4
c0016105:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c001610b:	e8 cc 97 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016110:	83 c4 10             	add    esp,0x10
c0016113:	89 c7                	mov    edi,eax
c0016115:	eb 15                	jmp    c001612c <Thr::processFromPID(int)+0x40>
c0016117:	90                   	nop
c0016118:	83 ec 0c             	sub    esp,0xc
c001611b:	68 e4 96 02 c0       	push   0xc00296e4
c0016120:	e8 b7 97 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016125:	83 c4 10             	add    esp,0x10
c0016128:	39 f8                	cmp    eax,edi
c001612a:	74 50                	je     c001617c <Thr::processFromPID(int)+0x90>
c001612c:	83 ec 0c             	sub    esp,0xc
c001612f:	68 e4 96 02 c0       	push   0xc00296e4
c0016134:	e8 a3 97 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016139:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016140:	89 c3                	mov    ebx,eax
c0016142:	e8 9d 97 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016147:	58                   	pop    eax
c0016148:	5a                   	pop    edx
c0016149:	53                   	push   ebx
c001614a:	68 e4 96 02 c0       	push   0xc00296e4
c001614f:	e8 4c 98 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016154:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016157:	83 c4 10             	add    esp,0x10
c001615a:	39 30                	cmp    DWORD PTR [eax],esi
c001615c:	75 ba                	jne    c0016118 <Thr::processFromPID(int)+0x2c>
c001615e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016163:	83 e8 01             	sub    eax,0x1
c0016166:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001616b:	74 0b                	je     c0016178 <Thr::processFromPID(int)+0x8c>
c001616d:	8d 76 00             	lea    esi,[esi+0x0]
c0016170:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016173:	5b                   	pop    ebx
c0016174:	5e                   	pop    esi
c0016175:	5f                   	pop    edi
c0016176:	c3                   	ret    
c0016177:	90                   	nop
c0016178:	fb                   	sti    
c0016179:	eb f5                	jmp    c0016170 <Thr::processFromPID(int)+0x84>
c001617b:	90                   	nop
c001617c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016181:	83 e8 01             	sub    eax,0x1
c0016184:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016189:	75 05                	jne    c0016190 <Thr::processFromPID(int)+0xa4>
c001618b:	fb                   	sti    
c001618c:	5b                   	pop    ebx
c001618d:	5e                   	pop    esi
c001618e:	5f                   	pop    edi
c001618f:	c3                   	ret    
c0016190:	5b                   	pop    ebx
c0016191:	31 c0                	xor    eax,eax
c0016193:	5e                   	pop    esi
c0016194:	5f                   	pop    edi
c0016195:	c3                   	ret    
c0016196:	66 90                	xchg   ax,ax

c0016198 <unblockTask(ThreadControlBlock*)>:
c0016198:	53                   	push   ebx
c0016199:	83 ec 08             	sub    esp,0x8
c001619c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161a0:	fa                   	cli    
c00161a1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161a6:	83 c0 01             	add    eax,0x1
c00161a9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00161b1:	85 c0                	test   eax,eax
c00161b3:	74 67                	je     c001621c <unblockTask(ThreadControlBlock*)+0x84>
c00161b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00161b8:	83 f8 01             	cmp    eax,0x1
c00161bb:	74 37                	je     c00161f4 <unblockTask(ThreadControlBlock*)+0x5c>
c00161bd:	83 ec 0c             	sub    esp,0xc
c00161c0:	68 e4 96 02 c0       	push   0xc00296e4
c00161c5:	e8 12 97 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	85 c0                	test   eax,eax
c00161cf:	75 1b                	jne    c00161ec <unblockTask(ThreadControlBlock*)+0x54>
c00161d1:	eb 5d                	jmp    c0016230 <unblockTask(ThreadControlBlock*)+0x98>
c00161d3:	90                   	nop
c00161d4:	83 ec 08             	sub    esp,0x8
c00161d7:	50                   	push   eax
c00161d8:	68 e4 96 02 c0       	push   0xc00296e4
c00161dd:	e8 1a 9a 00 00       	call   c001fbfc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	85 c0                	test   eax,eax
c00161e7:	74 47                	je     c0016230 <unblockTask(ThreadControlBlock*)+0x98>
c00161e9:	8d 76 00             	lea    esi,[esi+0x0]
c00161ec:	39 c3                	cmp    ebx,eax
c00161ee:	75 e4                	jne    c00161d4 <unblockTask(ThreadControlBlock*)+0x3c>
c00161f0:	eb 12                	jmp    c0016204 <unblockTask(ThreadControlBlock*)+0x6c>
c00161f2:	66 90                	xchg   ax,ax
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	68 63 24 02 c0       	push   0xc0022463
c00161fc:	e8 44 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016209:	83 e8 01             	sub    eax,0x1
c001620c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016211:	75 01                	jne    c0016214 <unblockTask(ThreadControlBlock*)+0x7c>
c0016213:	fb                   	sti    
c0016214:	83 c4 08             	add    esp,0x8
c0016217:	5b                   	pop    ebx
c0016218:	c3                   	ret    
c0016219:	8d 76 00             	lea    esi,[esi+0x0]
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	68 4c 24 02 c0       	push   0xc002244c
c0016224:	e8 1c 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	eb d6                	jmp    c0016204 <unblockTask(ThreadControlBlock*)+0x6c>
c001622e:	66 90                	xchg   ax,ax
c0016230:	83 ec 08             	sub    esp,0x8
c0016233:	53                   	push   ebx
c0016234:	68 e4 96 02 c0       	push   0xc00296e4
c0016239:	e8 62 97 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	eb c1                	jmp    c0016204 <unblockTask(ThreadControlBlock*)+0x6c>
c0016243:	90                   	nop

c0016244 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016244:	55                   	push   ebp
c0016245:	57                   	push   edi
c0016246:	56                   	push   esi
c0016247:	53                   	push   ebx
c0016248:	83 ec 1c             	sub    esp,0x1c
c001624b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001624f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016252:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016258:	85 ed                	test   ebp,ebp
c001625a:	7e 28                	jle    c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001625c:	31 f6                	xor    esi,esi
c001625e:	66 90                	xchg   ax,ax
c0016260:	83 ec 0c             	sub    esp,0xc
c0016263:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001626a:	83 c6 01             	add    esi,0x1
c001626d:	57                   	push   edi
c001626e:	e8 53 18 ff ff       	call   c0007ac6 <free>
c0016273:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016276:	83 c4 10             	add    esp,0x10
c0016279:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001627f:	7f df                	jg     c0016260 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016281:	8d 76 00             	lea    esi,[esi+0x0]
c0016284:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001628e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016293:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016296:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016299:	d3 c0                	rol    eax,cl
c001629b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00162a2:	21 c8                	and    eax,ecx
c00162a4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00162ab:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162ae:	89 f7                	mov    edi,esi
c00162b0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00162b8:	0f 85 72 01 00 00    	jne    c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162be:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00162c4:	85 ed                	test   ebp,ebp
c00162c6:	74 1c                	je     c00162e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	55                   	push   ebp
c00162cc:	e8 01 ae ff ff       	call   c00110d2 <EnvVarContainer::~EnvVarContainer()>
c00162d1:	59                   	pop    ecx
c00162d2:	5e                   	pop    esi
c00162d3:	6a 0c                	push   0xc
c00162d5:	55                   	push   ebp
c00162d6:	e8 3d 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00162db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	89 f7                	mov    edi,esi
c00162e3:	90                   	nop
c00162e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162ea:	85 c0                	test   eax,eax
c00162ec:	0f 84 b2 00 00 00    	je     c00163a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00162f2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00162f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00162f9:	31 c9                	xor    ecx,ecx
c00162fb:	eb 17                	jmp    c0016314 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00162fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016300:	83 c1 01             	add    ecx,0x1
c0016303:	83 f9 10             	cmp    ecx,0x10
c0016306:	0f 84 98 00 00 00    	je     c00163a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001630c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016312:	66 90                	xchg   ax,ax
c0016314:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001631b:	d3 fa                	sar    edx,cl
c001631d:	80 e2 01             	and    dl,0x1
c0016320:	74 de                	je     c0016300 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016322:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016325:	01 d2                	add    edx,edx
c0016327:	01 ca                	add    edx,ecx
c0016329:	8d 14 92             	lea    edx,[edx+edx*4]
c001632c:	01 d0                	add    eax,edx
c001632e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016334:	83 fd 07             	cmp    ebp,0x7
c0016337:	75 c7                	jne    c0016300 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016339:	05 40 02 00 00       	add    eax,0x240
c001633e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016341:	83 fd ff             	cmp    ebp,0xffffffff
c0016344:	0f 8c ee 00 00 00    	jl     c0016438 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001634a:	0f 84 ac 01 00 00    	je     c00164fc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016350:	85 ed                	test   ebp,ebp
c0016352:	0f 84 90 01 00 00    	je     c00164e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016358:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001635a:	75 a4                	jne    c0016300 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001635c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016362:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016366:	01 d0                	add    eax,edx
c0016368:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016375:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016378:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001637e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016385:	50                   	push   eax
c0016386:	e8 0d fe ff ff       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c001638b:	83 c4 10             	add    esp,0x10
c001638e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016395:	89 f7                	mov    edi,esi
c0016397:	83 c1 01             	add    ecx,0x1
c001639a:	83 f9 10             	cmp    ecx,0x10
c001639d:	0f 85 69 ff ff ff    	jne    c001630c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00163a3:	90                   	nop
c00163a4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00163aa:	85 c0                	test   eax,eax
c00163ac:	74 62                	je     c0016410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00163ae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00163b4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00163ba:	74 54                	je     c0016410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	68 e4 96 02 c0       	push   0xc00296e4
c00163c4:	e8 13 95 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163d0:	89 c7                	mov    edi,eax
c00163d2:	e8 e9 94 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	84 c0                	test   al,al
c00163dc:	0f 84 ce 00 00 00    	je     c00164b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00163e2:	66 90                	xchg   ax,ax
c00163e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163e7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00163ed:	85 d2                	test   edx,edx
c00163ef:	74 0f                	je     c0016400 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00163f1:	83 ec 0c             	sub    esp,0xc
c00163f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00163f6:	52                   	push   edx
c00163f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001640a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001640d:	8d 76 00             	lea    esi,[esi+0x0]
c0016410:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016416:	85 db                	test   ebx,ebx
c0016418:	74 16                	je     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	53                   	push   ebx
c001641e:	e8 8f 37 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016423:	58                   	pop    eax
c0016424:	5a                   	pop    edx
c0016425:	6a 14                	push   0x14
c0016427:	53                   	push   ebx
c0016428:	e8 eb 43 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	83 c4 1c             	add    esp,0x1c
c0016433:	5b                   	pop    ebx
c0016434:	5e                   	pop    esi
c0016435:	5f                   	pop    edi
c0016436:	5d                   	pop    ebp
c0016437:	c3                   	ret    
c0016438:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	68 18 25 02 c0       	push   0xc0022518
c0016444:	e8 78 af ff ff       	call   c00113c1 <KePanic(char const*)>
c0016449:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001644c:	83 c4 10             	add    esp,0x10
c001644f:	89 f7                	mov    edi,esi
c0016451:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016455:	e9 a6 fe ff ff       	jmp    c0016300 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001645a:	66 90                	xchg   ax,ax
c001645c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016462:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016468:	75 1e                	jne    c0016488 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	68 80 25 02 c0       	push   0xc0022580
c0016472:	e8 ce 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016477:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001647e:	e8 11 fa ff ff       	call   c0015e94 <blockTask(TaskState)>
c0016483:	83 c4 10             	add    esp,0x10
c0016486:	66 90                	xchg   ax,ax
c0016488:	83 ec 08             	sub    esp,0x8
c001648b:	56                   	push   esi
c001648c:	68 e4 96 02 c0       	push   0xc00296e4
c0016491:	e8 0a 95 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016496:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001649d:	e8 3a 94 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164a2:	83 c4 10             	add    esp,0x10
c00164a5:	39 f8                	cmp    eax,edi
c00164a7:	0f 84 37 ff ff ff    	je     c00163e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00164ad:	8d 76 00             	lea    esi,[esi+0x0]
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	68 e4 96 02 c0       	push   0xc00296e4
c00164b8:	e8 1f 94 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164bd:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00164c4:	89 c6                	mov    esi,eax
c00164c6:	e8 19 94 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164cb:	83 c4 10             	add    esp,0x10
c00164ce:	39 f3                	cmp    ebx,esi
c00164d0:	74 b6                	je     c0016488 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164d2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00164d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164d8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00164de:	75 a8                	jne    c0016488 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164e0:	e9 77 ff ff ff       	jmp    c001645c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00164e5:	8d 76 00             	lea    esi,[esi+0x0]
c00164e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164ec:	83 ec 0c             	sub    esp,0xc
c00164ef:	68 4c 25 02 c0       	push   0xc002254c
c00164f4:	e9 4b ff ff ff       	jmp    c0016444 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00164f9:	8d 76 00             	lea    esi,[esi+0x0]
c00164fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00164fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016502:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016505:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016508:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001650e:	01 d7                	add    edi,edx
c0016510:	89 f8                	mov    eax,edi
c0016512:	e9 51 fe ff ff       	jmp    c0016368 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016517:	90                   	nop

c0016518 <cleanerTaskFunction(void*)>:
c0016518:	53                   	push   ebx
c0016519:	83 ec 08             	sub    esp,0x8
c001651c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016521:	83 e8 01             	sub    eax,0x1
c0016524:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016529:	75 01                	jne    c001652c <cleanerTaskFunction(void*)+0x14>
c001652b:	fb                   	sti    
c001652c:	fa                   	cli    
c001652d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016532:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016539:	8d 50 01             	lea    edx,[eax+0x1]
c001653c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016542:	0f 84 c4 00 00 00    	je     c001660c <cleanerTaskFunction(void*)+0xf4>
c0016548:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001654d:	85 c0                	test   eax,eax
c001654f:	75 03                	jne    c0016554 <cleanerTaskFunction(void*)+0x3c>
c0016551:	fb                   	sti    
c0016552:	66 90                	xchg   ax,ax
c0016554:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001655b:	fa                   	cli    
c001655c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016562:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016568:	83 c2 01             	add    edx,0x1
c001656b:	83 c1 01             	add    ecx,0x1
c001656e:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016574:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001657a:	fa                   	cli    
c001657b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016581:	83 c3 01             	add    ebx,0x1
c0016584:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001658a:	eb 28                	jmp    c00165b4 <cleanerTaskFunction(void*)+0x9c>
c001658c:	83 ec 0c             	sub    esp,0xc
c001658f:	68 cc 96 02 c0       	push   0xc00296cc
c0016594:	e8 43 93 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016599:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00165a0:	89 c3                	mov    ebx,eax
c00165a2:	e8 3d 93 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165aa:	e8 95 fc ff ff       	call   c0016244 <cleanupTerminatedTask(ThreadControlBlock*)>
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	66 90                	xchg   ax,ax
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	68 cc 96 02 c0       	push   0xc00296cc
c00165bc:	e8 ff 92 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	84 c0                	test   al,al
c00165c6:	74 c4                	je     c001658c <cleanerTaskFunction(void*)+0x74>
c00165c8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165cd:	83 e8 01             	sub    eax,0x1
c00165d0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165d5:	75 01                	jne    c00165d8 <cleanerTaskFunction(void*)+0xc0>
c00165d7:	fb                   	sti    
c00165d8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165dd:	83 e8 01             	sub    eax,0x1
c00165e0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165e5:	0f 85 31 ff ff ff    	jne    c001651c <cleanerTaskFunction(void*)+0x4>
c00165eb:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00165f0:	85 c0                	test   eax,eax
c00165f2:	0f 84 24 ff ff ff    	je     c001651c <cleanerTaskFunction(void*)+0x4>
c00165f8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016602:	e8 79 f6 ff ff       	call   c0015c80 <schedule()>
c0016607:	e9 10 ff ff ff       	jmp    c001651c <cleanerTaskFunction(void*)+0x4>
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	6a 02                	push   0x2
c0016611:	e8 56 f8 ff ff       	call   c0015e6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016616:	83 c4 10             	add    esp,0x10
c0016619:	e9 36 ff ff ff       	jmp    c0016554 <cleanerTaskFunction(void*)+0x3c>
c001661e:	66 90                	xchg   ax,ax

c0016620 <terminateTask(int)>:
c0016620:	83 ec 14             	sub    esp,0x14
c0016623:	fa                   	cli    
c0016624:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001662a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016630:	83 c2 01             	add    edx,0x1
c0016633:	83 c1 01             	add    ecx,0x1
c0016636:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001663c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016642:	fa                   	cli    
c0016643:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016648:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001664c:	83 c0 01             	add    eax,0x1
c001664f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016659:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001665c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016661:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016664:	50                   	push   eax
c0016665:	68 cc 96 02 c0       	push   0xc00296cc
c001666a:	e8 31 93 00 00       	call   c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001666f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016674:	83 c4 10             	add    esp,0x10
c0016677:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001667e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016683:	85 c0                	test   eax,eax
c0016685:	74 65                	je     c00166ec <terminateTask(int)+0xcc>
c0016687:	83 ec 0c             	sub    esp,0xc
c001668a:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016691:	50                   	push   eax
c0016692:	e8 01 fb ff ff       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	66 90                	xchg   ax,ax
c001669c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166a1:	83 e8 01             	sub    eax,0x1
c00166a4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166a9:	75 01                	jne    c00166ac <terminateTask(int)+0x8c>
c00166ab:	fb                   	sti    
c00166ac:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166b1:	83 e8 01             	sub    eax,0x1
c00166b4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166b9:	75 09                	jne    c00166c4 <terminateTask(int)+0xa4>
c00166bb:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00166c2:	75 3c                	jne    c0016700 <terminateTask(int)+0xe0>
c00166c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166c9:	83 e8 01             	sub    eax,0x1
c00166cc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166d1:	75 01                	jne    c00166d4 <terminateTask(int)+0xb4>
c00166d3:	fb                   	sti    
c00166d4:	fa                   	cli    
c00166d5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166da:	83 c0 01             	add    eax,0x1
c00166dd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166e2:	66 90                	xchg   ax,ax
c00166e4:	e8 97 f5 ff ff       	call   c0015c80 <schedule()>
c00166e9:	eb d9                	jmp    c00166c4 <terminateTask(int)+0xa4>
c00166eb:	90                   	nop
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 7a 24 02 c0       	push   0xc002247a
c00166f4:	e8 4c 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	eb 9e                	jmp    c001669c <terminateTask(int)+0x7c>
c00166fe:	66 90                	xchg   ax,ax
c0016700:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001670a:	eb d8                	jmp    c00166e4 <terminateTask(int)+0xc4>

c001670c <Thr::terminateFromIRQ(int)>:
c001670c:	83 ec 18             	sub    esp,0x18
c001670f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016713:	50                   	push   eax
c0016714:	e8 07 ff ff ff       	call   c0016620 <terminateTask(int)>
c0016719:	90                   	nop
c001671a:	66 90                	xchg   ax,ax

c001671c <Semaphore::release()>:
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016723:	fa                   	cli    
c0016724:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016729:	83 c0 01             	add    eax,0x1
c001672c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016731:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016736:	8d 48 01             	lea    ecx,[eax+0x1]
c0016739:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001673f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016742:	85 c9                	test   ecx,ecx
c0016744:	74 42                	je     c0016788 <Semaphore::release()+0x6c>
c0016746:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016749:	83 ec 0c             	sub    esp,0xc
c001674c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001674f:	51                   	push   ecx
c0016750:	e8 43 fa ff ff       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c0016755:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	83 e8 01             	sub    eax,0x1
c0016760:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016765:	85 c0                	test   eax,eax
c0016767:	75 0b                	jne    c0016774 <Semaphore::release()+0x58>
c0016769:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001676e:	85 c0                	test   eax,eax
c0016770:	75 22                	jne    c0016794 <Semaphore::release()+0x78>
c0016772:	66 90                	xchg   ax,ax
c0016774:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016779:	83 e8 01             	sub    eax,0x1
c001677c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016781:	75 01                	jne    c0016784 <Semaphore::release()+0x68>
c0016783:	fb                   	sti    
c0016784:	83 c4 0c             	add    esp,0xc
c0016787:	c3                   	ret    
c0016788:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001678b:	83 e9 01             	sub    ecx,0x1
c001678e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016791:	eb cd                	jmp    c0016760 <Semaphore::release()+0x44>
c0016793:	90                   	nop
c0016794:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001679e:	e8 dd f4 ff ff       	call   c0015c80 <schedule()>
c00167a3:	eb cf                	jmp    c0016774 <Semaphore::release()+0x58>
c00167a5:	8d 76 00             	lea    esi,[esi+0x0]

c00167a8 <__static_initialization_and_destruction_0(int, int)>:
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00167b0:	0f 85 8e 00 00 00    	jne    c0016844 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00167be:	0f 85 80 00 00 00    	jne    c0016844 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	68 e4 96 02 c0       	push   0xc00296e4
c00167cc:	e8 83 94 00 00       	call   c001fc54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167d1:	83 c4 10             	add    esp,0x10
c00167d4:	83 ec 04             	sub    esp,0x4
c00167d7:	68 50 31 02 c0       	push   0xc0023150
c00167dc:	68 e4 96 02 c0       	push   0xc00296e4
c00167e1:	68 04 fc 01 c0       	push   0xc001fc04
c00167e6:	e8 dd 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	68 d8 96 02 c0       	push   0xc00296d8
c00167f6:	e8 59 94 00 00       	call   c001fc54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	83 ec 04             	sub    esp,0x4
c0016801:	68 50 31 02 c0       	push   0xc0023150
c0016806:	68 d8 96 02 c0       	push   0xc00296d8
c001680b:	68 04 fc 01 c0       	push   0xc001fc04
c0016810:	e8 b3 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	83 ec 0c             	sub    esp,0xc
c001681b:	68 cc 96 02 c0       	push   0xc00296cc
c0016820:	e8 2f 94 00 00       	call   c001fc54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	83 ec 04             	sub    esp,0x4
c001682b:	68 50 31 02 c0       	push   0xc0023150
c0016830:	68 cc 96 02 c0       	push   0xc00296cc
c0016835:	68 04 fc 01 c0       	push   0xc001fc04
c001683a:	e8 89 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c001683f:	83 c4 10             	add    esp,0x10
c0016842:	66 90                	xchg   ax,ax
c0016844:	90                   	nop
c0016845:	83 c4 0c             	add    esp,0xc
c0016848:	c3                   	ret    
c0016849:	8d 76 00             	lea    esi,[esi+0x0]

c001684c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	83 ec 08             	sub    esp,0x8
c0016852:	68 ff ff 00 00       	push   0xffff
c0016857:	6a 01                	push   0x1
c0016859:	e8 4a ff ff ff       	call   c00167a8 <__static_initialization_and_destruction_0(int, int)>
c001685e:	83 c4 10             	add    esp,0x10
c0016861:	83 c4 0c             	add    esp,0xc
c0016864:	c3                   	ret    

c0016865 <Vm::inbv(unsigned short)>:
c0016865:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016869:	66 81 fa fe fe       	cmp    dx,0xfefe
c001686e:	75 06                	jne    c0016876 <Vm::inbv(unsigned short)+0x11>
c0016870:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016875:	c3                   	ret    
c0016876:	ec                   	in     al,dx
c0016877:	c3                   	ret    

c0016878 <Vm::outbv(unsigned short, unsigned char)>:
c0016878:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001687c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016880:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016885:	75 25                	jne    c00168ac <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016887:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001688d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016890:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016896:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c001689c:	83 fa 20             	cmp    edx,0x20
c001689f:	75 0c                	jne    c00168ad <Vm::outbv(unsigned short, unsigned char)+0x35>
c00168a1:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00168ab:	c3                   	ret    
c00168ac:	ee                   	out    dx,al
c00168ad:	c3                   	ret    

c00168ae <Vm::realToLinear(unsigned short, unsigned short)>:
c00168ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00168b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00168b8:	c1 e0 04             	shl    eax,0x4
c00168bb:	01 d0                	add    eax,edx
c00168bd:	c3                   	ret    

c00168be <Vm::getSegment(unsigned int)>:
c00168be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168c2:	c1 e8 10             	shr    eax,0x10
c00168c5:	c3                   	ret    

c00168c6 <Vm::getOffset(unsigned int)>:
c00168c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168ca:	c3                   	ret    

c00168cb <Vm::mainloop2()>:
c00168cb:	83 ec 18             	sub    esp,0x18
c00168ce:	fa                   	cli    
c00168cf:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168d5:	6a 02                	push   0x2
c00168d7:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00168de:	e8 89 f5 ff ff       	call   c0015e6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00168e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00168ec:	52                   	push   edx
c00168ed:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00168f1:	52                   	push   edx
c00168f2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00168f6:	52                   	push   edx
c00168f7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00168fb:	50                   	push   eax
c00168fc:	e8 0e 99 fe ff       	call   c000020f <goToVM86>
c0016901:	83 c4 2c             	add    esp,0x2c
c0016904:	c3                   	ret    

c0016905 <Vm::mainVm8086Loop(void*)>:
c0016905:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001690a:	48                   	dec    eax
c001690b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016910:	75 01                	jne    c0016913 <Vm::mainVm8086Loop(void*)+0xe>
c0016912:	fb                   	sti    
c0016913:	eb b6                	jmp    c00168cb <Vm::mainloop2()>

c0016915 <Vm::mainloop3(unsigned long)>:
c0016915:	83 ec 18             	sub    esp,0x18
c0016918:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001691c:	fa                   	cli    
c001691d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016923:	6a 02                	push   0x2
c0016925:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001692c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016931:	e8 36 f5 ff ff       	call   c0015e6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016936:	83 c4 1c             	add    esp,0x1c
c0016939:	eb 90                	jmp    c00168cb <Vm::mainloop2()>

c001693b <Vm::initialise8086()>:
c001693b:	83 ec 0c             	sub    esp,0xc
c001693e:	68 80 00 00 00       	push   0x80
c0016943:	6a 00                	push   0x0
c0016945:	68 05 69 01 c0       	push   0xc0016905
c001694a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016950:	e8 db f0 ff ff       	call   c0015a30 <Process::createThread(void (*)(void*), void*, int)>
c0016955:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001695c:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016961:	68 00 01 00 00       	push   0x100
c0016966:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001696b:	6a 00                	push   0x0
c001696d:	6a 00                	push   0x0
c001696f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016975:	e8 a0 35 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001697a:	83 c4 2c             	add    esp,0x2c
c001697d:	c3                   	ret    

c001697e <Vm::finish8086()>:
c001697e:	53                   	push   ebx
c001697f:	83 ec 08             	sub    esp,0x8
c0016982:	fa                   	cli    
c0016983:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016989:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016990:	75 15                	jne    c00169a7 <Vm::finish8086()+0x29>
c0016992:	e8 e9 f2 ff ff       	call   c0015c80 <schedule()>
c0016997:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001699c:	48                   	dec    eax
c001699d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169a2:	75 de                	jne    c0016982 <Vm::finish8086()+0x4>
c00169a4:	fb                   	sti    
c00169a5:	eb db                	jmp    c0016982 <Vm::finish8086()+0x4>
c00169a7:	83 ec 0c             	sub    esp,0xc
c00169aa:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00169b0:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00169b6:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00169bd:	e8 d6 f7 ff ff       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c00169c2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169c7:	83 c4 10             	add    esp,0x10
c00169ca:	8d 50 ff             	lea    edx,[eax-0x1]
c00169cd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00169d3:	85 d2                	test   edx,edx
c00169d5:	75 01                	jne    c00169d8 <Vm::finish8086()+0x5a>
c00169d7:	fb                   	sti    
c00169d8:	89 d8                	mov    eax,ebx
c00169da:	83 c4 08             	add    esp,0x8
c00169dd:	5b                   	pop    ebx
c00169de:	c3                   	ret    

c00169df <Vm::getOutput8086(unsigned char*)>:
c00169df:	57                   	push   edi
c00169e0:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00169e6:	56                   	push   esi
c00169e7:	be 40 97 02 c0       	mov    esi,0xc0029740
c00169ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00169f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169f2:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00169f7:	5e                   	pop    esi
c00169f8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a02:	5f                   	pop    edi
c0016a03:	c3                   	ret    

c0016a04 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a04:	55                   	push   ebp
c0016a05:	57                   	push   edi
c0016a06:	56                   	push   esi
c0016a07:	53                   	push   ebx
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016a0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016a13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016a17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016a1b:	fa                   	cli    
c0016a1c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a22:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016a29:	75 15                	jne    c0016a40 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016a2b:	e8 50 f2 ff ff       	call   c0015c80 <schedule()>
c0016a30:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a35:	48                   	dec    eax
c0016a36:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a3b:	75 de                	jne    c0016a1b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a3d:	fb                   	sti    
c0016a3e:	eb db                	jmp    c0016a1b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a40:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a45:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a4f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a53:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a57:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a5b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016a5f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a63:	0f b7 ff             	movzx  edi,di
c0016a66:	0f b7 f6             	movzx  esi,si
c0016a69:	50                   	push   eax
c0016a6a:	6a 20                	push   0x20
c0016a6c:	6a 00                	push   0x0
c0016a6e:	68 40 97 02 c0       	push   0xc0029740
c0016a73:	e8 78 9a fe ff       	call   c00004f0 <memset>
c0016a78:	5a                   	pop    edx
c0016a79:	59                   	pop    ecx
c0016a7a:	57                   	push   edi
c0016a7b:	56                   	push   esi
c0016a7c:	e8 2d fe ff ff       	call   c00168ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016a81:	83 c4 10             	add    esp,0x10
c0016a84:	89 c7                	mov    edi,eax
c0016a86:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a8a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016a8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a90:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a95:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a9c:	48                   	dec    eax
c0016a9d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016aa2:	75 01                	jne    c0016aa5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016aa4:	fb                   	sti    
c0016aa5:	83 ec 0c             	sub    esp,0xc
c0016aa8:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016aae:	e8 e5 f6 ff ff       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c0016ab3:	83 c4 1c             	add    esp,0x1c
c0016ab6:	b0 01                	mov    al,0x1
c0016ab8:	5b                   	pop    ebx
c0016ab9:	5e                   	pop    esi
c0016aba:	5f                   	pop    edi
c0016abb:	5d                   	pop    ebp
c0016abc:	c3                   	ret    

c0016abd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016abd:	55                   	push   ebp
c0016abe:	57                   	push   edi
c0016abf:	56                   	push   esi
c0016ac0:	53                   	push   ebx
c0016ac1:	83 ec 34             	sub    esp,0x34
c0016ac4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ac8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016acc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ad0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016ad4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ad8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016adc:	68 a8 25 02 c0       	push   0xc00225a8
c0016ae1:	e8 5f 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ae6:	83 c4 10             	add    esp,0x10
c0016ae9:	fa                   	cli    
c0016aea:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016af0:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016af6:	84 db                	test   bl,bl
c0016af8:	75 15                	jne    c0016b0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016afa:	e8 81 f1 ff ff       	call   c0015c80 <schedule()>
c0016aff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b04:	48                   	dec    eax
c0016b05:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b0a:	75 dd                	jne    c0016ae9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b0c:	fb                   	sti    
c0016b0d:	eb da                	jmp    c0016ae9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b13:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016b18:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b22:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016b26:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b2a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b2e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b32:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b36:	50                   	push   eax
c0016b37:	6a 20                	push   0x20
c0016b39:	6a 00                	push   0x0
c0016b3b:	68 40 97 02 c0       	push   0xc0029740
c0016b40:	e8 ab 99 fe ff       	call   c00004f0 <memset>
c0016b45:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016b4c:	e8 65 0f ff ff       	call   c0007ab6 <malloc>
c0016b51:	83 c4 0c             	add    esp,0xc
c0016b54:	89 c5                	mov    ebp,eax
c0016b56:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016b5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b60:	50                   	push   eax
c0016b61:	e8 0a 4d ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	85 ed                	test   ebp,ebp
c0016b6b:	75 0a                	jne    c0016b77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	68 ca 25 02 c0       	push   0xc00225ca
c0016b75:	eb 2b                	jmp    c0016ba2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016b77:	50                   	push   eax
c0016b78:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b7c:	50                   	push   eax
c0016b7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b81:	50                   	push   eax
c0016b82:	55                   	push   ebp
c0016b83:	e8 b2 50 ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c0016b88:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016b8c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016b90:	83 c4 10             	add    esp,0x10
c0016b93:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016b98:	74 27                	je     c0016bc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	68 de 25 02 c0       	push   0xc00225de
c0016ba2:	e8 1a a8 ff ff       	call   c00113c1 <KePanic(char const*)>
c0016ba7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bac:	83 c4 10             	add    esp,0x10
c0016baf:	48                   	dec    eax
c0016bb0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bb5:	85 c0                	test   eax,eax
c0016bb7:	75 01                	jne    c0016bba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016bb9:	fb                   	sti    
c0016bba:	31 db                	xor    ebx,ebx
c0016bbc:	e9 90 00 00 00       	jmp    c0016c51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016bc1:	51                   	push   ecx
c0016bc2:	51                   	push   ecx
c0016bc3:	6a 01                	push   0x1
c0016bc5:	55                   	push   ebp
c0016bc6:	e8 6d 4d ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0016bcb:	83 c4 10             	add    esp,0x10
c0016bce:	85 c0                	test   eax,eax
c0016bd0:	74 26                	je     c0016bf8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016bd2:	83 ec 0c             	sub    esp,0xc
c0016bd5:	68 f7 25 02 c0       	push   0xc00225f7
c0016bda:	e8 e2 a7 ff ff       	call   c00113c1 <KePanic(char const*)>
c0016bdf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016be4:	83 c4 10             	add    esp,0x10
c0016be7:	48                   	dec    eax
c0016be8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bed:	85 c0                	test   eax,eax
c0016bef:	75 c9                	jne    c0016bba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016bf1:	fb                   	sti    
c0016bf2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016bf6:	eb 59                	jmp    c0016c51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016bf8:	0f b7 ff             	movzx  edi,di
c0016bfb:	50                   	push   eax
c0016bfc:	0f b7 f6             	movzx  esi,si
c0016bff:	50                   	push   eax
c0016c00:	57                   	push   edi
c0016c01:	56                   	push   esi
c0016c02:	e8 a7 fc ff ff       	call   c00168ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016c07:	5a                   	pop    edx
c0016c08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016c0b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016c0f:	51                   	push   ecx
c0016c10:	50                   	push   eax
c0016c11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c19:	55                   	push   ebp
c0016c1a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016c1d:	83 c4 14             	add    esp,0x14
c0016c20:	55                   	push   ebp
c0016c21:	e8 70 4d ff ff       	call   c000b996 <File::close()>
c0016c26:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	48                   	dec    eax
c0016c2f:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016c36:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c3b:	85 c0                	test   eax,eax
c0016c3d:	75 01                	jne    c0016c40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016c3f:	fb                   	sti    
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016c49:	e8 4a f5 ff ff       	call   c0016198 <unblockTask(ThreadControlBlock*)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	83 c4 2c             	add    esp,0x2c
c0016c54:	88 d8                	mov    al,bl
c0016c56:	5b                   	pop    ebx
c0016c57:	5e                   	pop    esi
c0016c58:	5f                   	pop    edi
c0016c59:	5d                   	pop    ebp
c0016c5a:	c3                   	ret    

c0016c5b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016c5b:	57                   	push   edi
c0016c5c:	56                   	push   esi
c0016c5d:	53                   	push   ebx
c0016c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016c6a:	83 e8 06             	sub    eax,0x6
c0016c6d:	0f b7 c0             	movzx  eax,ax
c0016c70:	50                   	push   eax
c0016c71:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016c76:	50                   	push   eax
c0016c77:	e8 32 fc ff ff       	call   c00168ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016c7c:	5a                   	pop    edx
c0016c7d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016c80:	59                   	pop    ecx
c0016c81:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016c84:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016c87:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016c8d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016c90:	8d 56 02             	lea    edx,[esi+0x2]
c0016c93:	66 89 10             	mov    WORD PTR [eax],dx
c0016c96:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016c9a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016c9e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016ca1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016ca5:	0f b6 f1             	movzx  esi,cl
c0016ca8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016cac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cb2:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016cb6:	0f b6 d5             	movzx  edx,ch
c0016cb9:	74 0a                	je     c0016cc5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016cbb:	c1 e2 08             	shl    edx,0x8
c0016cbe:	09 f2                	or     edx,esi
c0016cc0:	80 ce 02             	or     dh,0x2
c0016cc3:	eb 08                	jmp    c0016ccd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016cc5:	c1 e2 08             	shl    edx,0x8
c0016cc8:	09 f2                	or     edx,esi
c0016cca:	80 e6 fd             	and    dh,0xfd
c0016ccd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016cd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016cda:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016ce2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016ce5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ced:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016cf0:	5b                   	pop    ebx
c0016cf1:	5e                   	pop    esi
c0016cf2:	5f                   	pop    edi
c0016cf3:	c3                   	ret    

c0016cf4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016cf4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cf9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cfe:	c1 e0 04             	shl    eax,0x4
c0016d01:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016d04:	c3                   	ret    

c0016d05 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016d05:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d0a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d0f:	c1 e0 04             	shl    eax,0x4
c0016d12:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016d16:	c3                   	ret    

c0016d17 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016d17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d1c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d21:	c1 e0 04             	shl    eax,0x4
c0016d24:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016d27:	c3                   	ret    

c0016d28 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016d28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d32:	c1 e0 04             	shl    eax,0x4
c0016d35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d39:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016d3c:	c3                   	ret    

c0016d3d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016d3d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d42:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d47:	c1 e0 04             	shl    eax,0x4
c0016d4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d4e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016d52:	c3                   	ret    

c0016d53 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016d53:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d58:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d5d:	c1 e0 04             	shl    eax,0x4
c0016d60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d64:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016d67:	c3                   	ret    

c0016d68 <Vm::faultHandler(regs*)>:
c0016d68:	55                   	push   ebp
c0016d69:	57                   	push   edi
c0016d6a:	56                   	push   esi
c0016d6b:	53                   	push   ebx
c0016d6c:	83 ec 2c             	sub    esp,0x2c
c0016d6f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d73:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d76:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016d7a:	0f b7 f8             	movzx  edi,ax
c0016d7d:	52                   	push   edx
c0016d7e:	0f b7 c0             	movzx  eax,ax
c0016d81:	50                   	push   eax
c0016d82:	e8 27 fb ff ff       	call   c00168ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016d87:	5a                   	pop    edx
c0016d88:	59                   	pop    ecx
c0016d89:	89 c1                	mov    ecx,eax
c0016d8b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d92:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016d97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d9b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016d9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016da2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016da7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016daf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016db3:	e8 f6 fa ff ff       	call   c00168ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016db8:	5e                   	pop    esi
c0016db9:	be 06 00 00 00       	mov    esi,0x6
c0016dbe:	5d                   	pop    ebp
c0016dbf:	31 ed                	xor    ebp,ebp
c0016dc1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016dc6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016dc9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016dcf:	0f 84 74 02 00 00    	je     c0017049 <Vm::faultHandler(regs*)+0x2e1>
c0016dd5:	0f 87 94 00 00 00    	ja     c0016e6f <Vm::faultHandler(regs*)+0x107>
c0016ddb:	83 fa 66             	cmp    edx,0x66
c0016dde:	0f 84 e2 01 00 00    	je     c0016fc6 <Vm::faultHandler(regs*)+0x25e>
c0016de4:	77 47                	ja     c0016e2d <Vm::faultHandler(regs*)+0xc5>
c0016de6:	83 fa 36             	cmp    edx,0x36
c0016de9:	0f 84 ca 01 00 00    	je     c0016fb9 <Vm::faultHandler(regs*)+0x251>
c0016def:	77 1a                	ja     c0016e0b <Vm::faultHandler(regs*)+0xa3>
c0016df1:	83 fa 26             	cmp    edx,0x26
c0016df4:	0f 84 98 01 00 00    	je     c0016f92 <Vm::faultHandler(regs*)+0x22a>
c0016dfa:	83 fa 2e             	cmp    edx,0x2e
c0016dfd:	0f 85 21 06 00 00    	jne    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016e03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e06:	31 f6                	xor    esi,esi
c0016e08:	41                   	inc    ecx
c0016e09:	eb bb                	jmp    c0016dc6 <Vm::faultHandler(regs*)+0x5e>
c0016e0b:	83 fa 64             	cmp    edx,0x64
c0016e0e:	0f 84 8b 01 00 00    	je     c0016f9f <Vm::faultHandler(regs*)+0x237>
c0016e14:	0f 87 92 01 00 00    	ja     c0016fac <Vm::faultHandler(regs*)+0x244>
c0016e1a:	83 fa 3e             	cmp    edx,0x3e
c0016e1d:	0f 85 01 06 00 00    	jne    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016e23:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e26:	be 01 00 00 00       	mov    esi,0x1
c0016e2b:	eb db                	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016e2d:	83 fa 6d             	cmp    edx,0x6d
c0016e30:	0f 84 34 03 00 00    	je     c001716a <Vm::faultHandler(regs*)+0x402>
c0016e36:	77 17                	ja     c0016e4f <Vm::faultHandler(regs*)+0xe7>
c0016e38:	83 fa 67             	cmp    edx,0x67
c0016e3b:	0f 84 92 01 00 00    	je     c0016fd3 <Vm::faultHandler(regs*)+0x26b>
c0016e41:	83 fa 6c             	cmp    edx,0x6c
c0016e44:	0f 84 b1 02 00 00    	je     c00170fb <Vm::faultHandler(regs*)+0x393>
c0016e4a:	e9 d5 05 00 00       	jmp    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016e4f:	83 fa 6f             	cmp    edx,0x6f
c0016e52:	0f 84 3d 04 00 00    	je     c0017295 <Vm::faultHandler(regs*)+0x52d>
c0016e58:	0f 82 9f 03 00 00    	jb     c00171fd <Vm::faultHandler(regs*)+0x495>
c0016e5e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016e64:	0f 84 76 01 00 00    	je     c0016fe0 <Vm::faultHandler(regs*)+0x278>
c0016e6a:	e9 b5 05 00 00       	jmp    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016e6f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016e75:	0f 84 51 05 00 00    	je     c00173cc <Vm::faultHandler(regs*)+0x664>
c0016e7b:	0f 87 a9 00 00 00    	ja     c0016f2a <Vm::faultHandler(regs*)+0x1c2>
c0016e81:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016e87:	0f 84 d0 04 00 00    	je     c001735d <Vm::faultHandler(regs*)+0x5f5>
c0016e8d:	77 78                	ja     c0016f07 <Vm::faultHandler(regs*)+0x19f>
c0016e8f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016e95:	0f 84 0e 02 00 00    	je     c00170a9 <Vm::faultHandler(regs*)+0x341>
c0016e9b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ea1:	0f 85 7d 05 00 00    	jne    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016ea7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016eab:	89 d1                	mov    ecx,edx
c0016ead:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016eb0:	c1 e1 08             	shl    ecx,0x8
c0016eb3:	09 ca                	or     edx,ecx
c0016eb5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016eb8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016ebc:	89 d1                	mov    ecx,edx
c0016ebe:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016ec2:	c1 e1 08             	shl    ecx,0x8
c0016ec5:	09 ca                	or     edx,ecx
c0016ec7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016eca:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ece:	89 d1                	mov    ecx,edx
c0016ed0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016ed4:	c1 e1 08             	shl    ecx,0x8
c0016ed7:	09 ca                	or     edx,ecx
c0016ed9:	81 ca 00 02 02 00    	or     edx,0x20200
c0016edf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ee2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016ee6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016eec:	d1 e8                	shr    eax,1
c0016eee:	83 e0 01             	and    eax,0x1
c0016ef1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ef4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ef7:	83 c0 06             	add    eax,0x6
c0016efa:	25 ff ff 00 00       	and    eax,0xffff
c0016eff:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f02:	e9 19 05 00 00       	jmp    c0017420 <Vm::faultHandler(regs*)+0x6b8>
c0016f07:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016f0d:	0f 84 8f 04 00 00    	je     c00173a2 <Vm::faultHandler(regs*)+0x63a>
c0016f13:	0f 82 60 04 00 00    	jb     c0017379 <Vm::faultHandler(regs*)+0x611>
c0016f19:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016f1f:	0f 84 94 04 00 00    	je     c00173b9 <Vm::faultHandler(regs*)+0x651>
c0016f25:	e9 fa 04 00 00       	jmp    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016f2a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016f30:	0f 84 d7 04 00 00    	je     c001740d <Vm::faultHandler(regs*)+0x6a5>
c0016f36:	77 2e                	ja     c0016f66 <Vm::faultHandler(regs*)+0x1fe>
c0016f38:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016f3e:	0f 84 a4 04 00 00    	je     c00173e8 <Vm::faultHandler(regs*)+0x680>
c0016f44:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016f4a:	0f 85 d4 04 00 00    	jne    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016f50:	50                   	push   eax
c0016f51:	50                   	push   eax
c0016f52:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016f56:	50                   	push   eax
c0016f57:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f5b:	50                   	push   eax
c0016f5c:	e8 17 f9 ff ff       	call   c0016878 <Vm::outbv(unsigned short, unsigned char)>
c0016f61:	e9 9f 04 00 00       	jmp    c0017405 <Vm::faultHandler(regs*)+0x69d>
c0016f66:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016f6c:	0f 84 6d 01 00 00    	je     c00170df <Vm::faultHandler(regs*)+0x377>
c0016f72:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016f78:	0f 84 6f 01 00 00    	je     c00170ed <Vm::faultHandler(regs*)+0x385>
c0016f7e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016f84:	0f 85 9a 04 00 00    	jne    c0017424 <Vm::faultHandler(regs*)+0x6bc>
c0016f8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f8d:	e9 76 fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016f92:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f95:	be 02 00 00 00       	mov    esi,0x2
c0016f9a:	e9 69 fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016f9f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fa2:	be 03 00 00 00       	mov    esi,0x3
c0016fa7:	e9 5c fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016fac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016faf:	be 04 00 00 00       	mov    esi,0x4
c0016fb4:	e9 4f fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016fb9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fbc:	be 05 00 00 00       	mov    esi,0x5
c0016fc1:	e9 42 fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016fc6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0016fce:	e9 35 fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016fd3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fd6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016fdb:	e9 28 fe ff ff       	jmp    c0016e08 <Vm::faultHandler(regs*)+0xa0>
c0016fe0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016fe3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016fe7:	83 e5 01             	and    ebp,0x1
c0016fea:	74 30                	je     c001701c <Vm::faultHandler(regs*)+0x2b4>
c0016fec:	83 e9 04             	sub    ecx,0x4
c0016fef:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ff5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016ffb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ffe:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017001:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017007:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001700b:	0f 84 0c 04 00 00    	je     c001741d <Vm::faultHandler(regs*)+0x6b5>
c0017011:	80 ce 02             	or     dh,0x2
c0017014:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017017:	e9 01 04 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c001701c:	83 e9 02             	sub    ecx,0x2
c001701f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017025:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017028:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001702c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017032:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017036:	74 05                	je     c001703d <Vm::faultHandler(regs*)+0x2d5>
c0017038:	80 ce 02             	or     dh,0x2
c001703b:	eb 03                	jmp    c0017040 <Vm::faultHandler(regs*)+0x2d8>
c001703d:	80 e6 fd             	and    dh,0xfd
c0017040:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017044:	e9 d4 03 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c0017049:	83 e5 01             	and    ebp,0x1
c001704c:	74 2a                	je     c0017078 <Vm::faultHandler(regs*)+0x310>
c001704e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017050:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017056:	81 ca 00 02 02 00    	or     edx,0x20200
c001705c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001705f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017061:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017067:	c1 e8 09             	shr    eax,0x9
c001706a:	83 e0 01             	and    eax,0x1
c001706d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017070:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017073:	83 c0 04             	add    eax,0x4
c0017076:	eb 24                	jmp    c001709c <Vm::faultHandler(regs*)+0x334>
c0017078:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001707b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017081:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017084:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017087:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001708d:	c1 e8 09             	shr    eax,0x9
c0017090:	83 e0 01             	and    eax,0x1
c0017093:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017096:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017099:	83 c0 02             	add    eax,0x2
c001709c:	25 ff ff 00 00       	and    eax,0xffff
c00170a1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00170a4:	e9 74 03 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c00170a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170ad:	3d ee 00 00 00       	cmp    eax,0xee
c00170b2:	75 10                	jne    c00170c4 <Vm::faultHandler(regs*)+0x35c>
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00170ba:	e8 56 f8 ff ff       	call   c0016915 <Vm::mainloop3(unsigned long)>
c00170bf:	e9 44 03 00 00       	jmp    c0017408 <Vm::faultHandler(regs*)+0x6a0>
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170cf:	51                   	push   ecx
c00170d0:	50                   	push   eax
c00170d1:	53                   	push   ebx
c00170d2:	e8 84 fb ff ff       	call   c0016c5b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00170d7:	83 c4 20             	add    esp,0x20
c00170da:	e9 41 03 00 00       	jmp    c0017420 <Vm::faultHandler(regs*)+0x6b8>
c00170df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170e4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170e8:	e9 30 03 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c00170ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170f2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00170f6:	e9 22 03 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c00170fb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170fe:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017103:	74 2b                	je     c0017130 <Vm::faultHandler(regs*)+0x3c8>
c0017105:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001710c:	76 22                	jbe    c0017130 <Vm::faultHandler(regs*)+0x3c8>
c001710e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017112:	50                   	push   eax
c0017113:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017117:	50                   	push   eax
c0017118:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001711c:	50                   	push   eax
c001711d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017121:	50                   	push   eax
c0017122:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017126:	50                   	push   eax
c0017127:	6a 6c                	push   0x6c
c0017129:	6a 6c                	push   0x6c
c001712b:	e9 bd 01 00 00       	jmp    c00172ed <Vm::faultHandler(regs*)+0x585>
c0017130:	83 ec 0c             	sub    esp,0xc
c0017133:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017137:	0f b7 f6             	movzx  esi,si
c001713a:	50                   	push   eax
c001713b:	e8 25 f7 ff ff       	call   c0016865 <Vm::inbv(unsigned short)>
c0017140:	83 c4 0c             	add    esp,0xc
c0017143:	0f b6 c0             	movzx  eax,al
c0017146:	50                   	push   eax
c0017147:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001714b:	50                   	push   eax
c001714c:	56                   	push   esi
c001714d:	e8 d6 fb ff ff       	call   c0016d28 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017152:	83 c4 10             	add    esp,0x10
c0017155:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017158:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001715c:	74 03                	je     c0017161 <Vm::faultHandler(regs*)+0x3f9>
c001715e:	48                   	dec    eax
c001715f:	eb 01                	jmp    c0017162 <Vm::faultHandler(regs*)+0x3fa>
c0017161:	40                   	inc    eax
c0017162:	0f b7 c0             	movzx  eax,ax
c0017165:	e9 8b 00 00 00       	jmp    c00171f5 <Vm::faultHandler(regs*)+0x48d>
c001716a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001716d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017170:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017175:	74 29                	je     c00171a0 <Vm::faultHandler(regs*)+0x438>
c0017177:	3d ff ff 00 00       	cmp    eax,0xffff
c001717c:	76 22                	jbe    c00171a0 <Vm::faultHandler(regs*)+0x438>
c001717e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017182:	50                   	push   eax
c0017183:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017187:	50                   	push   eax
c0017188:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001718c:	50                   	push   eax
c001718d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017191:	50                   	push   eax
c0017192:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017196:	50                   	push   eax
c0017197:	6a 6d                	push   0x6d
c0017199:	6a 6d                	push   0x6d
c001719b:	e9 4d 01 00 00       	jmp    c00172ed <Vm::faultHandler(regs*)+0x585>
c00171a0:	0f b7 c8             	movzx  ecx,ax
c00171a3:	0f b7 f6             	movzx  esi,si
c00171a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171a9:	83 e5 01             	and    ebp,0x1
c00171ac:	74 20                	je     c00171ce <Vm::faultHandler(regs*)+0x466>
c00171ae:	ed                   	in     eax,dx
c00171af:	55                   	push   ebp
c00171b0:	50                   	push   eax
c00171b1:	51                   	push   ecx
c00171b2:	56                   	push   esi
c00171b3:	e8 9b fb ff ff       	call   c0016d53 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171be:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171c2:	74 05                	je     c00171c9 <Vm::faultHandler(regs*)+0x461>
c00171c4:	83 e8 04             	sub    eax,0x4
c00171c7:	eb 27                	jmp    c00171f0 <Vm::faultHandler(regs*)+0x488>
c00171c9:	83 c0 04             	add    eax,0x4
c00171cc:	eb 22                	jmp    c00171f0 <Vm::faultHandler(regs*)+0x488>
c00171ce:	66 ed                	in     ax,dx
c00171d0:	0f b7 c0             	movzx  eax,ax
c00171d3:	57                   	push   edi
c00171d4:	50                   	push   eax
c00171d5:	51                   	push   ecx
c00171d6:	56                   	push   esi
c00171d7:	e8 61 fb ff ff       	call   c0016d3d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171e2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171e6:	74 05                	je     c00171ed <Vm::faultHandler(regs*)+0x485>
c00171e8:	83 e8 02             	sub    eax,0x2
c00171eb:	eb 03                	jmp    c00171f0 <Vm::faultHandler(regs*)+0x488>
c00171ed:	83 c0 02             	add    eax,0x2
c00171f0:	25 ff ff 00 00       	and    eax,0xffff
c00171f5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00171f8:	e9 20 02 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c00171fd:	8d 46 ff             	lea    eax,[esi-0x1]
c0017200:	0f b6 f0             	movzx  esi,al
c0017203:	83 fe 05             	cmp    esi,0x5
c0017206:	77 23                	ja     c001722b <Vm::faultHandler(regs*)+0x4c3>
c0017208:	ff 24 b5 6c 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd994]
c001720f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017214:	eb 15                	jmp    c001722b <Vm::faultHandler(regs*)+0x4c3>
c0017216:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001721a:	eb 0f                	jmp    c001722b <Vm::faultHandler(regs*)+0x4c3>
c001721c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017220:	eb 09                	jmp    c001722b <Vm::faultHandler(regs*)+0x4c3>
c0017222:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017226:	eb 03                	jmp    c001722b <Vm::faultHandler(regs*)+0x4c3>
c0017228:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001722b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001722e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017233:	74 29                	je     c001725e <Vm::faultHandler(regs*)+0x4f6>
c0017235:	3d ff ff 00 00       	cmp    eax,0xffff
c001723a:	76 22                	jbe    c001725e <Vm::faultHandler(regs*)+0x4f6>
c001723c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017240:	50                   	push   eax
c0017241:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017245:	50                   	push   eax
c0017246:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001724a:	50                   	push   eax
c001724b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001724f:	50                   	push   eax
c0017250:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017254:	50                   	push   eax
c0017255:	6a 6e                	push   0x6e
c0017257:	6a 6e                	push   0x6e
c0017259:	e9 8f 00 00 00       	jmp    c00172ed <Vm::faultHandler(regs*)+0x585>
c001725e:	0f b7 c0             	movzx  eax,ax
c0017261:	52                   	push   edx
c0017262:	52                   	push   edx
c0017263:	50                   	push   eax
c0017264:	57                   	push   edi
c0017265:	e8 8a fa ff ff       	call   c0016cf4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001726a:	59                   	pop    ecx
c001726b:	0f b6 c0             	movzx  eax,al
c001726e:	5e                   	pop    esi
c001726f:	50                   	push   eax
c0017270:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017274:	50                   	push   eax
c0017275:	e8 fe f5 ff ff       	call   c0016878 <Vm::outbv(unsigned short, unsigned char)>
c001727a:	83 c4 10             	add    esp,0x10
c001727d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017280:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017284:	74 03                	je     c0017289 <Vm::faultHandler(regs*)+0x521>
c0017286:	48                   	dec    eax
c0017287:	eb 01                	jmp    c001728a <Vm::faultHandler(regs*)+0x522>
c0017289:	40                   	inc    eax
c001728a:	0f b7 c0             	movzx  eax,ax
c001728d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017290:	e9 88 01 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c0017295:	8d 46 ff             	lea    eax,[esi-0x1]
c0017298:	0f b6 f0             	movzx  esi,al
c001729b:	83 fe 05             	cmp    esi,0x5
c001729e:	77 1e                	ja     c00172be <Vm::faultHandler(regs*)+0x556>
c00172a0:	ff 24 b5 84 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd97c]
c00172a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00172ab:	eb 11                	jmp    c00172be <Vm::faultHandler(regs*)+0x556>
c00172ad:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00172b0:	eb 0c                	jmp    c00172be <Vm::faultHandler(regs*)+0x556>
c00172b2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00172b5:	eb 07                	jmp    c00172be <Vm::faultHandler(regs*)+0x556>
c00172b7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00172ba:	eb 02                	jmp    c00172be <Vm::faultHandler(regs*)+0x556>
c00172bc:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00172be:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00172c1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172c6:	74 37                	je     c00172ff <Vm::faultHandler(regs*)+0x597>
c00172c8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00172ce:	76 2f                	jbe    c00172ff <Vm::faultHandler(regs*)+0x597>
c00172d0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172d4:	50                   	push   eax
c00172d5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172d9:	50                   	push   eax
c00172da:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172de:	50                   	push   eax
c00172df:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172e3:	50                   	push   eax
c00172e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172e8:	50                   	push   eax
c00172e9:	6a 6f                	push   0x6f
c00172eb:	6a 6f                	push   0x6f
c00172ed:	68 10 26 02 c0       	push   0xc0022610
c00172f2:	e8 4e 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00172f7:	83 c4 20             	add    esp,0x20
c00172fa:	e9 83 01 00 00       	jmp    c0017482 <Vm::faultHandler(regs*)+0x71a>
c00172ff:	0f b7 d7             	movzx  edx,di
c0017302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017305:	0f b7 c6             	movzx  eax,si
c0017308:	81 e1 00 04 00 00    	and    ecx,0x400
c001730e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017311:	83 e5 01             	and    ebp,0x1
c0017314:	74 1d                	je     c0017333 <Vm::faultHandler(regs*)+0x5cb>
c0017316:	55                   	push   ebp
c0017317:	55                   	push   ebp
c0017318:	50                   	push   eax
c0017319:	52                   	push   edx
c001731a:	e8 f8 f9 ff ff       	call   c0016d17 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	89 fa                	mov    edx,edi
c0017324:	ef                   	out    dx,eax
c0017325:	85 c9                	test   ecx,ecx
c0017327:	74 05                	je     c001732e <Vm::faultHandler(regs*)+0x5c6>
c0017329:	83 ee 04             	sub    esi,0x4
c001732c:	eb 21                	jmp    c001734f <Vm::faultHandler(regs*)+0x5e7>
c001732e:	83 c6 04             	add    esi,0x4
c0017331:	eb 1c                	jmp    c001734f <Vm::faultHandler(regs*)+0x5e7>
c0017333:	55                   	push   ebp
c0017334:	55                   	push   ebp
c0017335:	50                   	push   eax
c0017336:	52                   	push   edx
c0017337:	e8 c9 f9 ff ff       	call   c0016d05 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	89 fa                	mov    edx,edi
c0017341:	66 ef                	out    dx,ax
c0017343:	85 c9                	test   ecx,ecx
c0017345:	74 05                	je     c001734c <Vm::faultHandler(regs*)+0x5e4>
c0017347:	83 ee 02             	sub    esi,0x2
c001734a:	eb 03                	jmp    c001734f <Vm::faultHandler(regs*)+0x5e7>
c001734c:	83 c6 02             	add    esi,0x2
c001734f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017355:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017358:	e9 c0 00 00 00       	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c001735d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017364:	83 ec 0c             	sub    esp,0xc
c0017367:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001736b:	50                   	push   eax
c001736c:	e8 f4 f4 ff ff       	call   c0016865 <Vm::inbv(unsigned short)>
c0017371:	0f b6 c0             	movzx  eax,al
c0017374:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017377:	eb 3a                	jmp    c00173b3 <Vm::faultHandler(regs*)+0x64b>
c0017379:	83 e5 01             	and    ebp,0x1
c001737c:	74 07                	je     c0017385 <Vm::faultHandler(regs*)+0x61d>
c001737e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017382:	ed                   	in     eax,dx
c0017383:	eb 14                	jmp    c0017399 <Vm::faultHandler(regs*)+0x631>
c0017385:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017388:	66 31 f6             	xor    si,si
c001738b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001738e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017392:	66 ed                	in     ax,dx
c0017394:	0f b7 c0             	movzx  eax,ax
c0017397:	09 f0                	or     eax,esi
c0017399:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001739c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00173a0:	eb 7e                	jmp    c0017420 <Vm::faultHandler(regs*)+0x6b8>
c00173a2:	52                   	push   edx
c00173a3:	52                   	push   edx
c00173a4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173a8:	50                   	push   eax
c00173a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173ad:	50                   	push   eax
c00173ae:	e8 c5 f4 ff ff       	call   c0016878 <Vm::outbv(unsigned short, unsigned char)>
c00173b3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00173b7:	eb 4f                	jmp    c0017408 <Vm::faultHandler(regs*)+0x6a0>
c00173b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00173bc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00173c0:	83 e5 01             	and    ebp,0x1
c00173c3:	74 03                	je     c00173c8 <Vm::faultHandler(regs*)+0x660>
c00173c5:	ef                   	out    dx,eax
c00173c6:	eb d4                	jmp    c001739c <Vm::faultHandler(regs*)+0x634>
c00173c8:	66 ef                	out    dx,ax
c00173ca:	eb d0                	jmp    c001739c <Vm::faultHandler(regs*)+0x634>
c00173cc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00173d3:	83 ec 0c             	sub    esp,0xc
c00173d6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173da:	50                   	push   eax
c00173db:	e8 85 f4 ff ff       	call   c0016865 <Vm::inbv(unsigned short)>
c00173e0:	0f b6 c0             	movzx  eax,al
c00173e3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00173e6:	eb 1d                	jmp    c0017405 <Vm::faultHandler(regs*)+0x69d>
c00173e8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173eb:	83 e5 01             	and    ebp,0x1
c00173ee:	74 03                	je     c00173f3 <Vm::faultHandler(regs*)+0x68b>
c00173f0:	ed                   	in     eax,dx
c00173f1:	eb 0d                	jmp    c0017400 <Vm::faultHandler(regs*)+0x698>
c00173f3:	66 ed                	in     ax,dx
c00173f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00173f8:	0f b7 c0             	movzx  eax,ax
c00173fb:	66 31 d2             	xor    dx,dx
c00173fe:	09 d0                	or     eax,edx
c0017400:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017403:	eb 18                	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c0017405:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017408:	83 c4 10             	add    esp,0x10
c001740b:	eb 13                	jmp    c0017420 <Vm::faultHandler(regs*)+0x6b8>
c001740d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017410:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017413:	83 e5 01             	and    ebp,0x1
c0017416:	74 03                	je     c001741b <Vm::faultHandler(regs*)+0x6b3>
c0017418:	ef                   	out    dx,eax
c0017419:	eb 02                	jmp    c001741d <Vm::faultHandler(regs*)+0x6b5>
c001741b:	66 ef                	out    dx,ax
c001741d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017420:	b0 01                	mov    al,0x1
c0017422:	eb 60                	jmp    c0017484 <Vm::faultHandler(regs*)+0x71c>
c0017424:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017428:	50                   	push   eax
c0017429:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001742d:	50                   	push   eax
c001742e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017432:	50                   	push   eax
c0017433:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017437:	50                   	push   eax
c0017438:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001743c:	50                   	push   eax
c001743d:	52                   	push   edx
c001743e:	52                   	push   edx
c001743f:	68 3d 26 02 c0       	push   0xc002263d
c0017444:	e8 fc 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017449:	83 c4 20             	add    esp,0x20
c001744c:	83 ec 0c             	sub    esp,0xc
c001744f:	6a 60                	push   0x60
c0017451:	e8 0f f4 ff ff       	call   c0016865 <Vm::inbv(unsigned short)>
c0017456:	83 c4 10             	add    esp,0x10
c0017459:	0f b6 d0             	movzx  edx,al
c001745c:	83 fa 1c             	cmp    edx,0x1c
c001745f:	74 05                	je     c0017466 <Vm::faultHandler(regs*)+0x6fe>
c0017461:	83 fa 5a             	cmp    edx,0x5a
c0017464:	75 e6                	jne    c001744c <Vm::faultHandler(regs*)+0x6e4>
c0017466:	0f b6 c0             	movzx  eax,al
c0017469:	83 f8 1c             	cmp    eax,0x1c
c001746c:	74 05                	je     c0017473 <Vm::faultHandler(regs*)+0x70b>
c001746e:	83 f8 5a             	cmp    eax,0x5a
c0017471:	75 0f                	jne    c0017482 <Vm::faultHandler(regs*)+0x71a>
c0017473:	83 ec 0c             	sub    esp,0xc
c0017476:	6a 60                	push   0x60
c0017478:	e8 e8 f3 ff ff       	call   c0016865 <Vm::inbv(unsigned short)>
c001747d:	83 c4 10             	add    esp,0x10
c0017480:	eb e4                	jmp    c0017466 <Vm::faultHandler(regs*)+0x6fe>
c0017482:	31 c0                	xor    eax,eax
c0017484:	83 c4 2c             	add    esp,0x2c
c0017487:	5b                   	pop    ebx
c0017488:	5e                   	pop    esi
c0017489:	5f                   	pop    edi
c001748a:	5d                   	pop    ebp
c001748b:	c3                   	ret    

c001748c <noCopro(unsigned long)>:
c001748c:	c3                   	ret    

c001748d <nmiHandler(regs*, void*)>:
c001748d:	83 ec 0c             	sub    esp,0xc
c0017490:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017495:	83 ec 0c             	sub    esp,0xc
c0017498:	50                   	push   eax
c0017499:	e8 18 fe fe ff       	call   c00072b6 <Computer::handleNMI()>
c001749e:	83 c4 10             	add    esp,0x10
c00174a1:	90                   	nop
c00174a2:	83 c4 0c             	add    esp,0xc
c00174a5:	c3                   	ret    

c00174a6 <doubleFault(regs*, void*)>:
c00174a6:	55                   	push   ebp
c00174a7:	89 e5                	mov    ebp,esp
c00174a9:	83 ec 08             	sub    esp,0x8
c00174ac:	83 ec 0c             	sub    esp,0xc
c00174af:	68 9c 26 02 c0       	push   0xc002269c
c00174b4:	e8 08 9f ff ff       	call   c00113c1 <KePanic(char const*)>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	90                   	nop
c00174bd:	c9                   	leave  
c00174be:	c3                   	ret    

c00174bf <displayDebugInfo(regs*)>:
c00174bf:	83 ec 1c             	sub    esp,0x1c
c00174c2:	0f 20 c0             	mov    eax,cr0
c00174c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174c9:	0f 20 d0             	mov    eax,cr2
c00174cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174d0:	0f 20 d8             	mov    eax,cr3
c00174d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174d7:	0f 20 e0             	mov    eax,cr4
c00174da:	89 04 24             	mov    DWORD PTR [esp],eax
c00174dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174e1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00174e4:	83 ec 08             	sub    esp,0x8
c00174e7:	50                   	push   eax
c00174e8:	68 b8 26 02 c0       	push   0xc00226b8
c00174ed:	e8 53 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174f2:	83 c4 10             	add    esp,0x10
c00174f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00174fc:	83 ec 08             	sub    esp,0x8
c00174ff:	50                   	push   eax
c0017500:	68 a9 26 02 c0       	push   0xc00226a9
c0017505:	e8 3b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017511:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017514:	83 ec 08             	sub    esp,0x8
c0017517:	50                   	push   eax
c0017518:	68 b4 26 02 c0       	push   0xc00226b4
c001751d:	e8 23 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017529:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001752c:	83 ec 08             	sub    esp,0x8
c001752f:	50                   	push   eax
c0017530:	68 c3 26 02 c0       	push   0xc00226c3
c0017535:	e8 0b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001753a:	83 c4 10             	add    esp,0x10
c001753d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017541:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017544:	83 ec 08             	sub    esp,0x8
c0017547:	50                   	push   eax
c0017548:	68 ce 26 02 c0       	push   0xc00226ce
c001754d:	e8 f3 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	83 ec 08             	sub    esp,0x8
c0017558:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001755c:	68 d9 26 02 c0       	push   0xc00226d9
c0017561:	e8 df 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017566:	83 c4 10             	add    esp,0x10
c0017569:	83 ec 08             	sub    esp,0x8
c001756c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017570:	68 e4 26 02 c0       	push   0xc00226e4
c0017575:	e8 cb 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001757a:	83 c4 10             	add    esp,0x10
c001757d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017581:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017584:	c1 e0 05             	shl    eax,0x5
c0017587:	8d 90 60 36 02 c0    	lea    edx,[eax-0x3ffdc9a0]
c001758d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017591:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017594:	83 ec 04             	sub    esp,0x4
c0017597:	52                   	push   edx
c0017598:	50                   	push   eax
c0017599:	68 ef 26 02 c0       	push   0xc00226ef
c001759e:	e8 a2 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b1:	83 ec 0c             	sub    esp,0xc
c00175b4:	50                   	push   eax
c00175b5:	e8 9f 11 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00175ba:	83 c4 10             	add    esp,0x10
c00175bd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c8:	83 ec 08             	sub    esp,0x8
c00175cb:	68 fe 26 02 c0       	push   0xc00226fe
c00175d0:	50                   	push   eax
c00175d1:	e8 d0 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175d6:	83 c4 10             	add    esp,0x10
c00175d9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175e8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00175eb:	83 ec 08             	sub    esp,0x8
c00175ee:	52                   	push   edx
c00175ef:	50                   	push   eax
c00175f0:	e8 6b 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017603:	83 ec 08             	sub    esp,0x8
c0017606:	68 0c 27 02 c0       	push   0xc002270c
c001760b:	50                   	push   eax
c001760c:	e8 95 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017611:	83 c4 10             	add    esp,0x10
c0017614:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017619:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001761f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017624:	8b 12                	mov    edx,DWORD PTR [edx]
c0017626:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017629:	83 c2 0c             	add    edx,0xc
c001762c:	83 ec 08             	sub    esp,0x8
c001762f:	52                   	push   edx
c0017630:	50                   	push   eax
c0017631:	e8 70 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017636:	83 c4 10             	add    esp,0x10
c0017639:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001763e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017644:	83 ec 08             	sub    esp,0x8
c0017647:	68 15 27 02 c0       	push   0xc0022715
c001764c:	50                   	push   eax
c001764d:	e8 54 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017660:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017664:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017667:	83 ec 08             	sub    esp,0x8
c001766a:	52                   	push   edx
c001766b:	50                   	push   eax
c001766c:	e8 ef 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017671:	83 c4 10             	add    esp,0x10
c0017674:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017679:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767f:	83 ec 08             	sub    esp,0x8
c0017682:	68 1d 27 02 c0       	push   0xc002271d
c0017687:	50                   	push   eax
c0017688:	e8 19 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017695:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001769b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001769f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00176a2:	83 ec 08             	sub    esp,0x8
c00176a5:	52                   	push   edx
c00176a6:	50                   	push   eax
c00176a7:	e8 b4 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176ac:	83 c4 10             	add    esp,0x10
c00176af:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176ba:	83 ec 08             	sub    esp,0x8
c00176bd:	68 25 27 02 c0       	push   0xc0022725
c00176c2:	50                   	push   eax
c00176c3:	e8 de 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176da:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00176dd:	83 ec 08             	sub    esp,0x8
c00176e0:	52                   	push   edx
c00176e1:	50                   	push   eax
c00176e2:	e8 79 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176e7:	83 c4 10             	add    esp,0x10
c00176ea:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f5:	83 ec 08             	sub    esp,0x8
c00176f8:	68 2d 27 02 c0       	push   0xc002272d
c00176fd:	50                   	push   eax
c00176fe:	e8 a3 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017703:	83 c4 10             	add    esp,0x10
c0017706:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001770b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017711:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017715:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017718:	83 ec 08             	sub    esp,0x8
c001771b:	52                   	push   edx
c001771c:	50                   	push   eax
c001771d:	e8 3e 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001772a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017730:	83 ec 08             	sub    esp,0x8
c0017733:	68 35 27 02 c0       	push   0xc0022735
c0017738:	50                   	push   eax
c0017739:	e8 68 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001773e:	83 c4 10             	add    esp,0x10
c0017741:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017746:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001774c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017750:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017753:	83 ec 08             	sub    esp,0x8
c0017756:	52                   	push   edx
c0017757:	50                   	push   eax
c0017758:	e8 03 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001775d:	83 c4 10             	add    esp,0x10
c0017760:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017765:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001776b:	83 ec 08             	sub    esp,0x8
c001776e:	68 3d 27 02 c0       	push   0xc002273d
c0017773:	50                   	push   eax
c0017774:	e8 2d 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017781:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017787:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001778b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001778e:	83 ec 08             	sub    esp,0x8
c0017791:	52                   	push   edx
c0017792:	50                   	push   eax
c0017793:	e8 c8 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177a6:	83 ec 08             	sub    esp,0x8
c00177a9:	68 45 27 02 c0       	push   0xc0022745
c00177ae:	50                   	push   eax
c00177af:	e8 f2 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177c2:	83 ec 08             	sub    esp,0x8
c00177c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177c9:	50                   	push   eax
c00177ca:	e8 91 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177cf:	83 c4 10             	add    esp,0x10
c00177d2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177dd:	83 ec 08             	sub    esp,0x8
c00177e0:	68 4e 27 02 c0       	push   0xc002274e
c00177e5:	50                   	push   eax
c00177e6:	e8 bb 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177eb:	83 c4 10             	add    esp,0x10
c00177ee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177f9:	83 ec 08             	sub    esp,0x8
c00177fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017800:	50                   	push   eax
c0017801:	e8 5a 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001780e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017814:	83 ec 08             	sub    esp,0x8
c0017817:	68 56 27 02 c0       	push   0xc0022756
c001781c:	50                   	push   eax
c001781d:	e8 84 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017822:	83 c4 10             	add    esp,0x10
c0017825:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001782a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017830:	83 ec 08             	sub    esp,0x8
c0017833:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017837:	50                   	push   eax
c0017838:	e8 23 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	fa                   	cli    
c0017841:	f4                   	hlt    
c0017842:	eb fe                	jmp    c0017842 <displayDebugInfo(regs*)+0x383>

c0017844 <HalSystemIdle()>:
c0017844:	56                   	push   esi
c0017845:	53                   	push   ebx
c0017846:	83 ec 14             	sub    esp,0x14
c0017849:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001784e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017854:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001785a:	83 e0 04             	and    eax,0x4
c001785d:	0f b6 c0             	movzx  eax,al
c0017860:	85 c0                	test   eax,eax
c0017862:	0f 95 c0             	setne  al
c0017865:	0f b6 c0             	movzx  eax,al
c0017868:	85 c0                	test   eax,eax
c001786a:	74 4c                	je     c00178b8 <HalSystemIdle()+0x74>
c001786c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017871:	83 ec 08             	sub    esp,0x8
c0017874:	68 e1 00 00 00       	push   0xe1
c0017879:	50                   	push   eax
c001787a:	e8 41 f8 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001787f:	83 c4 10             	add    esp,0x10
c0017882:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017886:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001788a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001788f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017893:	83 e2 02             	and    edx,0x2
c0017896:	89 d3                	mov    ebx,edx
c0017898:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001789c:	83 e2 00             	and    edx,0x0
c001789f:	89 d6                	mov    esi,edx
c00178a1:	56                   	push   esi
c00178a2:	53                   	push   ebx
c00178a3:	68 e1 00 00 00       	push   0xe1
c00178a8:	50                   	push   eax
c00178a9:	e8 3e f8 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	e8 de 88 fe ff       	call   c0000194 <doTPAUSE>
c00178b6:	eb 01                	jmp    c00178b9 <HalSystemIdle()+0x75>
c00178b8:	f4                   	hlt    
c00178b9:	90                   	nop
c00178ba:	83 c4 14             	add    esp,0x14
c00178bd:	5b                   	pop    ebx
c00178be:	5e                   	pop    esi
c00178bf:	c3                   	ret    

c00178c0 <displayProgramFault(char const*)>:
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	83 ec 0c             	sub    esp,0xc
c00178c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178ca:	e8 76 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00178d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178e2:	85 c0                	test   eax,eax
c00178e4:	74 21                	je     c0017907 <displayProgramFault(char const*)+0x47>
c00178e6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00178ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178f6:	6a 04                	push   0x4
c00178f8:	6a 0f                	push   0xf
c00178fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178fe:	50                   	push   eax
c00178ff:	e8 14 12 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	90                   	nop
c0017908:	83 c4 0c             	add    esp,0xc
c001790b:	c3                   	ret    

c001790c <gpFault(regs*, void*)>:
c001790c:	83 ec 1c             	sub    esp,0x1c
c001790f:	c7 05 74 97 02 c0 68 6d 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016d68
c0017919:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c001791e:	85 c0                	test   eax,eax
c0017920:	74 1e                	je     c0017940 <gpFault(regs*, void*)+0x34>
c0017922:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017927:	83 ec 0c             	sub    esp,0xc
c001792a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792e:	ff d0                	call   eax
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017937:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001793c:	85 c0                	test   eax,eax
c001793e:	75 2e                	jne    c001796e <gpFault(regs*, void*)+0x62>
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	68 5e 27 02 c0       	push   0xc002275e
c0017948:	e8 73 ff ff ff       	call   c00178c0 <displayProgramFault(char const*)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017957:	e8 63 fb ff ff       	call   c00174bf <displayDebugInfo(regs*)>
c001795c:	83 c4 10             	add    esp,0x10
c001795f:	83 ec 0c             	sub    esp,0xc
c0017962:	6a 00                	push   0x0
c0017964:	e8 a3 ed ff ff       	call   c001670c <Thr::terminateFromIRQ(int)>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	eb 01                	jmp    c001796f <gpFault(regs*, void*)+0x63>
c001796e:	90                   	nop
c001796f:	83 c4 1c             	add    esp,0x1c
c0017972:	c3                   	ret    

c0017973 <pgFault(regs*, void*)>:
c0017973:	83 ec 1c             	sub    esp,0x1c
c0017976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001797d:	0f 20 d0             	mov    eax,cr2
c0017980:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017988:	83 ec 04             	sub    esp,0x4
c001798b:	52                   	push   edx
c001798c:	50                   	push   eax
c001798d:	68 3c 28 02 c0       	push   0xc002283c
c0017992:	e8 ae 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001799f:	8b 00                	mov    eax,DWORD PTR [eax]
c00179a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179a4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00179aa:	0f 20 d2             	mov    edx,cr2
c00179ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00179b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179b5:	83 ec 08             	sub    esp,0x8
c00179b8:	52                   	push   edx
c00179b9:	50                   	push   eax
c00179ba:	e8 d1 29 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c00179bf:	83 c4 10             	add    esp,0x10
c00179c2:	0f b6 c0             	movzx  eax,al
c00179c5:	85 c0                	test   eax,eax
c00179c7:	75 2e                	jne    c00179f7 <pgFault(regs*, void*)+0x84>
c00179c9:	83 ec 0c             	sub    esp,0xc
c00179cc:	68 77 27 02 c0       	push   0xc0022777
c00179d1:	e8 ea fe ff ff       	call   c00178c0 <displayProgramFault(char const*)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179e0:	e8 da fa ff ff       	call   c00174bf <displayDebugInfo(regs*)>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	6a 00                	push   0x0
c00179ed:	e8 1a ed ff ff       	call   c001670c <Thr::terminateFromIRQ(int)>
c00179f2:	83 c4 10             	add    esp,0x10
c00179f5:	eb 01                	jmp    c00179f8 <pgFault(regs*, void*)+0x85>
c00179f7:	90                   	nop
c00179f8:	83 c4 1c             	add    esp,0x1c
c00179fb:	c3                   	ret    

c00179fc <otherISRHandler(regs*, void*)>:
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	83 ec 0c             	sub    esp,0xc
c0017a02:	68 64 28 02 c0       	push   0xc0022864
c0017a07:	e8 b4 fe ff ff       	call   c00178c0 <displayProgramFault(char const*)>
c0017a0c:	83 c4 10             	add    esp,0x10
c0017a0f:	83 ec 0c             	sub    esp,0xc
c0017a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a16:	e8 a4 fa ff ff       	call   c00174bf <displayDebugInfo(regs*)>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	83 ec 0c             	sub    esp,0xc
c0017a21:	6a 00                	push   0x0
c0017a23:	e8 e4 ec ff ff       	call   c001670c <Thr::terminateFromIRQ(int)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	90                   	nop
c0017a2c:	83 c4 0c             	add    esp,0xc
c0017a2f:	c3                   	ret    

c0017a30 <opcodeFault(regs*, void*)>:
c0017a30:	55                   	push   ebp
c0017a31:	89 e5                	mov    ebp,esp
c0017a33:	83 ec 08             	sub    esp,0x8
c0017a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a3c:	83 ec 08             	sub    esp,0x8
c0017a3f:	50                   	push   eax
c0017a40:	68 82 27 02 c0       	push   0xc0022782
c0017a45:	e8 fb 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017a52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a58:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017a5e:	0f b6 c0             	movzx  eax,al
c0017a61:	85 c0                	test   eax,eax
c0017a63:	74 21                	je     c0017a86 <opcodeFault(regs*, void*)+0x56>
c0017a65:	83 ec 0c             	sub    esp,0xc
c0017a68:	68 8c 28 02 c0       	push   0xc002288c
c0017a6d:	e8 d3 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a72:	83 c4 10             	add    esp,0x10
c0017a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a7b:	8d 50 19             	lea    edx,[eax+0x19]
c0017a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017a84:	eb 2b                	jmp    c0017ab1 <opcodeFault(regs*, void*)+0x81>
c0017a86:	83 ec 0c             	sub    esp,0xc
c0017a89:	68 90 27 02 c0       	push   0xc0022790
c0017a8e:	e8 2d fe ff ff       	call   c00178c0 <displayProgramFault(char const*)>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	83 ec 0c             	sub    esp,0xc
c0017a99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017a9c:	e8 1e fa ff ff       	call   c00174bf <displayDebugInfo(regs*)>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	83 ec 0c             	sub    esp,0xc
c0017aa7:	6a 00                	push   0x0
c0017aa9:	e8 5e ec ff ff       	call   c001670c <Thr::terminateFromIRQ(int)>
c0017aae:	83 c4 10             	add    esp,0x10
c0017ab1:	c9                   	leave  
c0017ab2:	c3                   	ret    

c0017ab3 <i386SaveCoprocessor(void*)>:
c0017ab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ab7:	83 c0 3f             	add    eax,0x3f
c0017aba:	83 e0 c0             	and    eax,0xffffffc0
c0017abd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ac1:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017ac7 <i386LoadCoprocessor(void*)>:
c0017ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017acb:	83 c0 3f             	add    eax,0x3f
c0017ace:	83 e0 c0             	and    eax,0xffffffc0
c0017ad1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ad5:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017adb <x87EmulHandler(regs*, void*)>:
c0017adb:	53                   	push   ebx
c0017adc:	83 ec 08             	sub    esp,0x8
c0017adf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ae4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ae8:	74 10                	je     c0017afa <x87EmulHandler(regs*, void*)+0x1f>
c0017aea:	83 ec 0c             	sub    esp,0xc
c0017aed:	68 9d 27 02 c0       	push   0xc002279d
c0017af2:	e8 ca 98 ff ff       	call   c00113c1 <KePanic(char const*)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	0f 20 c0             	mov    eax,cr0
c0017afd:	a8 08                	test   al,0x8
c0017aff:	74 59                	je     c0017b5a <x87EmulHandler(regs*, void*)+0x7f>
c0017b01:	0f 06                	clts   
c0017b03:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b08:	85 c0                	test   eax,eax
c0017b0a:	74 0e                	je     c0017b1a <x87EmulHandler(regs*, void*)+0x3f>
c0017b0c:	83 ec 0c             	sub    esp,0xc
c0017b0f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b12:	e8 9c ff ff ff       	call   c0017ab3 <i386SaveCoprocessor(void*)>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017b20:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017b24:	75 12                	jne    c0017b38 <x87EmulHandler(regs*, void*)+0x5d>
c0017b26:	83 ec 0c             	sub    esp,0xc
c0017b29:	68 40 02 00 00       	push   0x240
c0017b2e:	e8 83 ff fe ff       	call   c0007ab6 <malloc>
c0017b33:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017b36:	eb 10                	jmp    c0017b48 <x87EmulHandler(regs*, void*)+0x6d>
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b40:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b43:	e8 7f ff ff ff       	call   c0017ac7 <i386LoadCoprocessor(void*)>
c0017b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017b55:	83 c4 08             	add    esp,0x8
c0017b58:	5b                   	pop    ebx
c0017b59:	c3                   	ret    
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	68 b1 27 02 c0       	push   0xc00227b1
c0017b62:	e8 de 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b67:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017b6f:	83 c4 18             	add    esp,0x18
c0017b72:	5b                   	pop    ebx
c0017b73:	e9 94 eb ff ff       	jmp    c001670c <Thr::terminateFromIRQ(int)>

c0017b78 <HalInitialiseCoprocessor()>:
c0017b78:	83 ec 10             	sub    esp,0x10
c0017b7b:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017b85:	6a 00                	push   0x0
c0017b87:	68 db 7a 01 c0       	push   0xc0017adb
c0017b8c:	6a 07                	push   0x7
c0017b8e:	e8 33 51 ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b93:	e8 48 70 00 00       	call   c001ebe0 <avxDetect>
c0017b98:	83 c4 10             	add    esp,0x10
c0017b9b:	85 c0                	test   eax,eax
c0017b9d:	74 1c                	je     c0017bbb <HalInitialiseCoprocessor()+0x43>
c0017b9f:	c7 05 70 97 02 c0 0a ec 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ec0a
c0017ba9:	c7 05 6c 97 02 c0 1b ec 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ec1b
c0017bb3:	83 c4 0c             	add    esp,0xc
c0017bb6:	e9 71 70 00 00       	jmp    c001ec2c <avxInit>
c0017bbb:	e8 b0 73 00 00       	call   c001ef70 <absolutelyNoChanceInHell>
c0017bc0:	85 c0                	test   eax,eax
c0017bc2:	74 1c                	je     c0017be0 <HalInitialiseCoprocessor()+0x68>
c0017bc4:	c7 05 70 97 02 c0 88 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef88
c0017bce:	c7 05 6c 97 02 c0 90 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef90
c0017bd8:	83 c4 0c             	add    esp,0xc
c0017bdb:	e9 b8 73 00 00       	jmp    c001ef98 <sseInit>
c0017be0:	e8 d1 73 00 00       	call   c001efb6 <x87Detect>
c0017be5:	85 c0                	test   eax,eax
c0017be7:	74 1c                	je     c0017c05 <HalInitialiseCoprocessor()+0x8d>
c0017be9:	c7 05 70 97 02 c0 d1 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001efd1
c0017bf3:	c7 05 6c 97 02 c0 d8 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001efd8
c0017bfd:	83 c4 0c             	add    esp,0xc
c0017c00:	e9 da 73 00 00       	jmp    c001efdf <x87Init>
c0017c05:	c7 05 70 97 02 c0 8c 74 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001748c
c0017c0f:	c7 05 6c 97 02 c0 8c 74 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001748c
c0017c19:	0f 20 c0             	mov    eax,cr0
c0017c1c:	83 c8 04             	or     eax,0x4
c0017c1f:	0f 22 c0             	mov    cr0,eax
c0017c22:	83 c4 0c             	add    esp,0xc
c0017c25:	c3                   	ret    

c0017c26 <HalPanic(char const*)>:
c0017c26:	53                   	push   ebx
c0017c27:	83 ec 10             	sub    esp,0x10
c0017c2a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c2e:	fa                   	cli    
c0017c2f:	53                   	push   ebx
c0017c30:	68 c7 27 02 c0       	push   0xc00227c7
c0017c35:	e8 0b 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017c3a:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	85 c0                	test   eax,eax
c0017c44:	74 09                	je     c0017c4f <HalPanic(char const*)+0x29>
c0017c46:	83 ec 0c             	sub    esp,0xc
c0017c49:	53                   	push   ebx
c0017c4a:	ff d0                	call   eax
c0017c4c:	83 c4 10             	add    esp,0x10
c0017c4f:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017c54:	85 c0                	test   eax,eax
c0017c56:	0f 84 dc 00 00 00    	je     c0017d38 <HalPanic(char const*)+0x112>
c0017c5c:	52                   	push   edx
c0017c5d:	6a 01                	push   0x1
c0017c5f:	6a 0f                	push   0xf
c0017c61:	50                   	push   eax
c0017c62:	e8 4d 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c67:	59                   	pop    ecx
c0017c68:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c6e:	e8 31 0b ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017c73:	58                   	pop    eax
c0017c74:	5a                   	pop    edx
c0017c75:	68 24 0a 02 c0       	push   0xc0020a24
c0017c7a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c80:	e8 67 09 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017c85:	83 c4 0c             	add    esp,0xc
c0017c88:	6a 01                	push   0x1
c0017c8a:	6a 0f                	push   0xf
c0017c8c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c92:	e8 1d 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c97:	59                   	pop    ecx
c0017c98:	58                   	pop    eax
c0017c99:	68 e0 27 02 c0       	push   0xc00227e0
c0017c9e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ca4:	e8 fd 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ca9:	83 c4 0c             	add    esp,0xc
c0017cac:	6a 0f                	push   0xf
c0017cae:	6a 01                	push   0x1
c0017cb0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cb6:	e8 f9 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cbb:	58                   	pop    eax
c0017cbc:	5a                   	pop    edx
c0017cbd:	68 e9 27 02 c0       	push   0xc00227e9
c0017cc2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cc8:	e8 d9 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ccd:	83 c4 0c             	add    esp,0xc
c0017cd0:	6a 01                	push   0x1
c0017cd2:	6a 0f                	push   0xf
c0017cd4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cda:	e8 d5 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cdf:	59                   	pop    ecx
c0017ce0:	58                   	pop    eax
c0017ce1:	68 2d 28 02 c0       	push   0xc002282d
c0017ce6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cec:	e8 b5 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cf1:	58                   	pop    eax
c0017cf2:	5a                   	pop    edx
c0017cf3:	68 f6 27 02 c0       	push   0xc00227f6
c0017cf8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cfe:	e8 a3 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d03:	59                   	pop    ecx
c0017d04:	58                   	pop    eax
c0017d05:	68 30 28 02 c0       	push   0xc0022830
c0017d0a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d10:	e8 91 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d15:	58                   	pop    eax
c0017d16:	5a                   	pop    edx
c0017d17:	53                   	push   ebx
c0017d18:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d1e:	e8 83 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d23:	59                   	pop    ecx
c0017d24:	5b                   	pop    ebx
c0017d25:	68 2d 28 02 c0       	push   0xc002282d
c0017d2a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d30:	e8 71 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d35:	83 c4 10             	add    esp,0x10
c0017d38:	eb fe                	jmp    c0017d38 <HalPanic(char const*)+0x112>

c0017d3a <HalQueryPerformanceCounter()>:
c0017d3a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d3f:	31 d2                	xor    edx,edx
c0017d41:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017d47:	31 c0                	xor    eax,eax
c0017d49:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017d50:	74 02                	je     c0017d54 <HalQueryPerformanceCounter()+0x1a>
c0017d52:	0f 31                	rdtsc  
c0017d54:	c3                   	ret    

c0017d55 <HalInitialise()>:
c0017d55:	53                   	push   ebx
c0017d56:	83 ec 08             	sub    esp,0x8
c0017d59:	e8 98 51 ff ff       	call   c000cef6 <setupINTS()>
c0017d5e:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017d65:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d6a:	75 0f                	jne    c0017d7b <HalInitialise()+0x26>
c0017d6c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d72:	83 e2 fe             	and    edx,0xfffffffe
c0017d75:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d7b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d81:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017d88:	83 e2 fe             	and    edx,0xfffffffe
c0017d8b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d91:	e8 9e 02 00 00       	call   c0018034 <picOpen()>
c0017d96:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d9d:	74 0a                	je     c0017da9 <HalInitialise()+0x54>
c0017d9f:	e8 e0 01 00 00       	call   c0017f84 <picDisable()>
c0017da4:	e8 ad 67 00 00       	call   c001e556 <apicOpen()>
c0017da9:	bb 0f 00 00 00       	mov    ebx,0xf
c0017dae:	50                   	push   eax
c0017daf:	6a 00                	push   0x0
c0017db1:	68 fc 79 01 c0       	push   0xc00179fc
c0017db6:	6a 00                	push   0x0
c0017db8:	e8 09 4f ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dbd:	83 c4 0c             	add    esp,0xc
c0017dc0:	6a 00                	push   0x0
c0017dc2:	68 fc 79 01 c0       	push   0xc00179fc
c0017dc7:	6a 01                	push   0x1
c0017dc9:	e8 f8 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dce:	83 c4 0c             	add    esp,0xc
c0017dd1:	6a 00                	push   0x0
c0017dd3:	68 8d 74 01 c0       	push   0xc001748d
c0017dd8:	6a 02                	push   0x2
c0017dda:	e8 e7 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ddf:	83 c4 0c             	add    esp,0xc
c0017de2:	6a 00                	push   0x0
c0017de4:	68 fc 79 01 c0       	push   0xc00179fc
c0017de9:	6a 03                	push   0x3
c0017deb:	e8 d6 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017df0:	83 c4 0c             	add    esp,0xc
c0017df3:	6a 00                	push   0x0
c0017df5:	68 fc 79 01 c0       	push   0xc00179fc
c0017dfa:	6a 04                	push   0x4
c0017dfc:	e8 c5 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e01:	83 c4 0c             	add    esp,0xc
c0017e04:	6a 00                	push   0x0
c0017e06:	68 fc 79 01 c0       	push   0xc00179fc
c0017e0b:	6a 05                	push   0x5
c0017e0d:	e8 b4 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e12:	83 c4 0c             	add    esp,0xc
c0017e15:	6a 00                	push   0x0
c0017e17:	68 30 7a 01 c0       	push   0xc0017a30
c0017e1c:	6a 06                	push   0x6
c0017e1e:	e8 a3 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e23:	83 c4 0c             	add    esp,0xc
c0017e26:	6a 00                	push   0x0
c0017e28:	68 a6 74 01 c0       	push   0xc00174a6
c0017e2d:	6a 08                	push   0x8
c0017e2f:	e8 92 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e34:	83 c4 0c             	add    esp,0xc
c0017e37:	6a 00                	push   0x0
c0017e39:	68 fc 79 01 c0       	push   0xc00179fc
c0017e3e:	6a 09                	push   0x9
c0017e40:	e8 81 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e45:	83 c4 0c             	add    esp,0xc
c0017e48:	6a 00                	push   0x0
c0017e4a:	68 fc 79 01 c0       	push   0xc00179fc
c0017e4f:	6a 0a                	push   0xa
c0017e51:	e8 70 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e56:	83 c4 0c             	add    esp,0xc
c0017e59:	6a 00                	push   0x0
c0017e5b:	68 fc 79 01 c0       	push   0xc00179fc
c0017e60:	6a 0b                	push   0xb
c0017e62:	e8 5f 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e67:	83 c4 0c             	add    esp,0xc
c0017e6a:	6a 00                	push   0x0
c0017e6c:	68 0c 79 01 c0       	push   0xc001790c
c0017e71:	6a 0d                	push   0xd
c0017e73:	e8 4e 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e78:	83 c4 0c             	add    esp,0xc
c0017e7b:	6a 00                	push   0x0
c0017e7d:	68 73 79 01 c0       	push   0xc0017973
c0017e82:	6a 0e                	push   0xe
c0017e84:	e8 3d 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e89:	83 c4 10             	add    esp,0x10
c0017e8c:	50                   	push   eax
c0017e8d:	6a 00                	push   0x0
c0017e8f:	68 fc 79 01 c0       	push   0xc00179fc
c0017e94:	53                   	push   ebx
c0017e95:	43                   	inc    ebx
c0017e96:	e8 2b 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	83 fb 1e             	cmp    ebx,0x1e
c0017ea1:	75 e9                	jne    c0017e8c <HalInitialise()+0x137>
c0017ea3:	50                   	push   eax
c0017ea4:	6a 00                	push   0x0
c0017ea6:	68 a7 26 01 c0       	push   0xc00126a7
c0017eab:	6a 60                	push   0x60
c0017ead:	e8 14 4e ff ff       	call   c000ccc6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017eb2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017eb7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017ec1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ec8:	e8 e9 fb fe ff       	call   c0007ab6 <malloc>
c0017ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ed0:	89 c3                	mov    ebx,eax
c0017ed2:	e8 3b 09 00 00       	call   c0018812 <RTC::RTC()>
c0017ed7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017ee1:	5a                   	pop    edx
c0017ee2:	59                   	pop    ecx
c0017ee3:	53                   	push   ebx
c0017ee4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eea:	e8 a3 48 ff ff       	call   c000c792 <Device::addChild(Device*)>
c0017eef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ef1:	6a 00                	push   0x0
c0017ef3:	6a 00                	push   0x0
c0017ef5:	6a 00                	push   0x0
c0017ef7:	53                   	push   ebx
c0017ef8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017efb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f00:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017f06:	83 c4 28             	add    esp,0x28
c0017f09:	5b                   	pop    ebx
c0017f0a:	c3                   	ret    

c0017f0b <HalMakeBeep(int)>:
c0017f0b:	53                   	push   ebx
c0017f0c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017f10:	85 db                	test   ebx,ebx
c0017f12:	75 07                	jne    c0017f1b <HalMakeBeep(int)+0x10>
c0017f14:	e4 61                	in     al,0x61
c0017f16:	83 e0 fc             	and    eax,0xfffffffc
c0017f19:	eb 26                	jmp    c0017f41 <HalMakeBeep(int)+0x36>
c0017f1b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017f20:	99                   	cdq    
c0017f21:	f7 fb                	idiv   ebx
c0017f23:	89 c1                	mov    ecx,eax
c0017f25:	b0 b6                	mov    al,0xb6
c0017f27:	e6 43                	out    0x43,al
c0017f29:	88 c8                	mov    al,cl
c0017f2b:	e6 42                	out    0x42,al
c0017f2d:	89 c8                	mov    eax,ecx
c0017f2f:	c1 e8 08             	shr    eax,0x8
c0017f32:	e6 42                	out    0x42,al
c0017f34:	e4 61                	in     al,0x61
c0017f36:	89 c2                	mov    edx,eax
c0017f38:	83 ca 03             	or     edx,0x3
c0017f3b:	38 d0                	cmp    al,dl
c0017f3d:	74 04                	je     c0017f43 <HalMakeBeep(int)+0x38>
c0017f3f:	88 d0                	mov    al,dl
c0017f41:	e6 61                	out    0x61,al
c0017f43:	5b                   	pop    ebx
c0017f44:	c3                   	ret    

c0017f45 <HalGetRand()>:
c0017f45:	31 c0                	xor    eax,eax
c0017f47:	c3                   	ret    

c0017f48 <HalEndOfInterrupt(int)>:
c0017f48:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017f4f:	74 23                	je     c0017f74 <HalEndOfInterrupt(int)+0x2c>
c0017f51:	83 ec 14             	sub    esp,0x14
c0017f54:	6a 1b                	push   0x1b
c0017f56:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f5c:	e8 5f f1 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017f61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f66:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017f70:	83 c4 1c             	add    esp,0x1c
c0017f73:	c3                   	ret    
c0017f74:	e9 3f 02 00 00       	jmp    c00181b8 <picEOI(int)>

c0017f79 <HalRestart()>:
c0017f79:	c3                   	ret    

c0017f7a <HalShutdown()>:
c0017f7a:	c3                   	ret    

c0017f7b <HalSleep()>:
c0017f7b:	c3                   	ret    

c0017f7c <picIoWait()>:
c0017f7c:	eb 00                	jmp    c0017f7e <picIoWait()+0x2>
c0017f7e:	eb 00                	jmp    c0017f80 <picIoWait()+0x4>
c0017f80:	90                   	nop
c0017f81:	c3                   	ret    
c0017f82:	66 90                	xchg   ax,ax

c0017f84 <picDisable()>:
c0017f84:	83 ec 10             	sub    esp,0x10
c0017f87:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017f8e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017f93:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f97:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017f9c:	ee                   	out    dx,al
c0017f9d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017fa4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017fa9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017fad:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017fb2:	ee                   	out    dx,al
c0017fb3:	90                   	nop
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	c3                   	ret    

c0017fb8 <picGetIRQReg(int)>:
c0017fb8:	83 ec 10             	sub    esp,0x10
c0017fbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fbf:	0f b6 c0             	movzx  eax,al
c0017fc2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017fc9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017fcd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017fd1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017fd6:	ee                   	out    dx,al
c0017fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fdb:	0f b6 c0             	movzx  eax,al
c0017fde:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017fe5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017fe9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017fed:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017ff2:	ee                   	out    dx,al
c0017ff3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017ffa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017fff:	89 c2                	mov    edx,eax
c0018001:	ec                   	in     al,dx
c0018002:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018006:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001800a:	0f b6 c0             	movzx  eax,al
c001800d:	c1 e0 08             	shl    eax,0x8
c0018010:	89 c1                	mov    ecx,eax
c0018012:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018019:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001801e:	89 c2                	mov    edx,eax
c0018020:	ec                   	in     al,dx
c0018021:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018025:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018029:	0f b6 c0             	movzx  eax,al
c001802c:	09 c8                	or     eax,ecx
c001802e:	83 c4 10             	add    esp,0x10
c0018031:	c3                   	ret    
c0018032:	66 90                	xchg   ax,ax

c0018034 <picOpen()>:
c0018034:	83 ec 50             	sub    esp,0x50
c0018037:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001803e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018043:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018047:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001804b:	ee                   	out    dx,al
c001804c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018053:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018058:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001805c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018060:	ee                   	out    dx,al
c0018061:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018069:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018071:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018078:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001807c:	89 c2                	mov    edx,eax
c001807e:	ec                   	in     al,dx
c001807f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018083:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018087:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001808b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018092:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018096:	89 c2                	mov    edx,eax
c0018098:	ec                   	in     al,dx
c0018099:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001809d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00180a1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00180a5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00180ac:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00180b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00180b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180b9:	ee                   	out    dx,al
c00180ba:	e8 bd fe ff ff       	call   c0017f7c <picIoWait()>
c00180bf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00180c6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00180cb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00180cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180d3:	ee                   	out    dx,al
c00180d4:	e8 a3 fe ff ff       	call   c0017f7c <picIoWait()>
c00180d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00180dd:	0f b6 c0             	movzx  eax,al
c00180e0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00180e7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00180eb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00180ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f3:	ee                   	out    dx,al
c00180f4:	e8 83 fe ff ff       	call   c0017f7c <picIoWait()>
c00180f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180fd:	0f b6 c0             	movzx  eax,al
c0018100:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018107:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001810b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001810f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018113:	ee                   	out    dx,al
c0018114:	e8 63 fe ff ff       	call   c0017f7c <picIoWait()>
c0018119:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018120:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018125:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018129:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001812d:	ee                   	out    dx,al
c001812e:	e8 49 fe ff ff       	call   c0017f7c <picIoWait()>
c0018133:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001813a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001813f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018143:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018147:	ee                   	out    dx,al
c0018148:	e8 2f fe ff ff       	call   c0017f7c <picIoWait()>
c001814d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018154:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018159:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001815d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018161:	ee                   	out    dx,al
c0018162:	e8 15 fe ff ff       	call   c0017f7c <picIoWait()>
c0018167:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001816e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018173:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018177:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001817b:	ee                   	out    dx,al
c001817c:	e8 fb fd ff ff       	call   c0017f7c <picIoWait()>
c0018181:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018186:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001818d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018191:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018195:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018199:	ee                   	out    dx,al
c001819a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001819f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00181a6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00181aa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00181ae:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00181b2:	ee                   	out    dx,al
c00181b3:	90                   	nop
c00181b4:	83 c4 50             	add    esp,0x50
c00181b7:	c3                   	ret    

c00181b8 <picEOI(int)>:
c00181b8:	83 ec 10             	sub    esp,0x10
c00181bb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181c0:	75 1e                	jne    c00181e0 <picEOI(int)+0x28>
c00181c2:	6a 0b                	push   0xb
c00181c4:	e8 ef fd ff ff       	call   c0017fb8 <picGetIRQReg(int)>
c00181c9:	83 c4 04             	add    esp,0x4
c00181cc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00181d1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00181d6:	25 80 00 00 00       	and    eax,0x80
c00181db:	74 73                	je     c0018250 <picEOI(int)+0x98>
c00181dd:	8d 76 00             	lea    esi,[esi+0x0]
c00181e0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00181e5:	75 31                	jne    c0018218 <picEOI(int)+0x60>
c00181e7:	6a 0b                	push   0xb
c00181e9:	e8 ca fd ff ff       	call   c0017fb8 <picGetIRQReg(int)>
c00181ee:	83 c4 04             	add    esp,0x4
c00181f1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181fa:	98                   	cwde   
c00181fb:	85 c0                	test   eax,eax
c00181fd:	78 19                	js     c0018218 <picEOI(int)+0x60>
c00181ff:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018206:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001820b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001820f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018214:	ee                   	out    dx,al
c0018215:	eb 3d                	jmp    c0018254 <picEOI(int)+0x9c>
c0018217:	90                   	nop
c0018218:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001821d:	7e 19                	jle    c0018238 <picEOI(int)+0x80>
c001821f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018226:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001822b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001822f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018234:	ee                   	out    dx,al
c0018235:	8d 76 00             	lea    esi,[esi+0x0]
c0018238:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001823f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018244:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018248:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001824d:	ee                   	out    dx,al
c001824e:	eb 04                	jmp    c0018254 <picEOI(int)+0x9c>
c0018250:	90                   	nop
c0018251:	8d 76 00             	lea    esi,[esi+0x0]
c0018254:	83 c4 10             	add    esp,0x10
c0018257:	c3                   	ret    

c0018258 <RTC::open(int, int, void*)>:
c0018258:	31 c0                	xor    eax,eax
c001825a:	c3                   	ret    
c001825b:	90                   	nop

c001825c <RTC::close(int, int, void*)>:
c001825c:	31 c0                	xor    eax,eax
c001825e:	c3                   	ret    
c001825f:	90                   	nop

c0018260 <RTC::timeInSecondsUTC()>:
c0018260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018264:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001826a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018270:	c3                   	ret    
c0018271:	90                   	nop

c0018272 <RTC::timeInDatetimeUTC()>:
c0018272:	53                   	push   ebx
c0018273:	83 ec 14             	sub    esp,0x14
c0018276:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001827a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018280:	50                   	push   eax
c0018281:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018284:	83 c4 0c             	add    esp,0xc
c0018287:	52                   	push   edx
c0018288:	50                   	push   eax
c0018289:	53                   	push   ebx
c001828a:	e8 77 42 ff ff       	call   c000c506 <secondsToDatetime(unsigned long long)>
c001828f:	89 d8                	mov    eax,ebx
c0018291:	83 c4 14             	add    esp,0x14
c0018294:	5b                   	pop    ebx
c0018295:	c2 04 00             	ret    0x4

c0018298 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018298:	56                   	push   esi
c0018299:	53                   	push   ebx
c001829a:	83 ec 14             	sub    esp,0x14
c001829d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00182a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182a3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00182a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00182aa:	52                   	push   edx
c00182ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b3:	50                   	push   eax
c00182b4:	e8 4d 42 ff ff       	call   c000c506 <secondsToDatetime(unsigned long long)>
c00182b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00182bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00182c5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00182c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00182cd:	89 f0                	mov    eax,esi
c00182cf:	83 c4 20             	add    esp,0x20
c00182d2:	5b                   	pop    ebx
c00182d3:	5e                   	pop    esi
c00182d4:	ff e0                	jmp    eax

c00182d6 <RTC::~RTC()>:
c00182d6:	83 ec 0c             	sub    esp,0xc
c00182d9:	ba cc 28 02 c0       	mov    edx,0xc00228cc
c00182de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e2:	89 10                	mov    DWORD PTR [eax],edx
c00182e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e8:	83 ec 0c             	sub    esp,0xc
c00182eb:	50                   	push   eax
c00182ec:	e8 a7 3f ff ff       	call   c000c298 <Clock::~Clock()>
c00182f1:	83 c4 10             	add    esp,0x10
c00182f4:	90                   	nop
c00182f5:	83 c4 0c             	add    esp,0xc
c00182f8:	c3                   	ret    
c00182f9:	90                   	nop

c00182fa <RTC::~RTC()>:
c00182fa:	83 ec 0c             	sub    esp,0xc
c00182fd:	83 ec 0c             	sub    esp,0xc
c0018300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018304:	e8 cd ff ff ff       	call   c00182d6 <RTC::~RTC()>
c0018309:	83 c4 10             	add    esp,0x10
c001830c:	83 ec 08             	sub    esp,0x8
c001830f:	68 60 01 00 00       	push   0x160
c0018314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018318:	e8 fb 24 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	83 c4 0c             	add    esp,0xc
c0018323:	c3                   	ret    

c0018324 <RTC::get_update_in_progress_flag()>:
c0018324:	83 ec 14             	sub    esp,0x14
c0018327:	6a 0a                	push   0xa
c0018329:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001832f:	e8 44 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018334:	83 c4 1c             	add    esp,0x1c
c0018337:	0f b6 c0             	movzx  eax,al
c001833a:	c1 e8 07             	shr    eax,0x7
c001833d:	c3                   	ret    

c001833e <RTC::completeRTCRefresh()>:
c001833e:	55                   	push   ebp
c001833f:	57                   	push   edi
c0018340:	56                   	push   esi
c0018341:	53                   	push   ebx
c0018342:	83 ec 3c             	sub    esp,0x3c
c0018345:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001834b:	83 ec 0c             	sub    esp,0xc
c001834e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018352:	e8 cd ff ff ff       	call   c0018324 <RTC::get_update_in_progress_flag()>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	84 c0                	test   al,al
c001835c:	74 0e                	je     c001836c <RTC::completeRTCRefresh()+0x2e>
c001835e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018364:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001836a:	73 df                	jae    c001834b <RTC::completeRTCRefresh()+0xd>
c001836c:	51                   	push   ecx
c001836d:	51                   	push   ecx
c001836e:	6a 00                	push   0x0
c0018370:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018376:	e8 fd ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001837b:	5b                   	pop    ebx
c001837c:	89 c7                	mov    edi,eax
c001837e:	5e                   	pop    esi
c001837f:	6a 02                	push   0x2
c0018381:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018387:	e8 ec ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001838c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018390:	5d                   	pop    ebp
c0018391:	58                   	pop    eax
c0018392:	6a 04                	push   0x4
c0018394:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001839a:	e8 d9 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001839f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00183a3:	58                   	pop    eax
c00183a4:	5a                   	pop    edx
c00183a5:	6a 07                	push   0x7
c00183a7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ad:	e8 c6 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183b2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00183b6:	59                   	pop    ecx
c00183b7:	5b                   	pop    ebx
c00183b8:	6a 08                	push   0x8
c00183ba:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183c0:	e8 b3 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183c5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00183c9:	5e                   	pop    esi
c00183ca:	5d                   	pop    ebp
c00183cb:	6a 09                	push   0x9
c00183cd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183d3:	e8 a0 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183d8:	0f b6 c0             	movzx  eax,al
c00183db:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00183df:	83 c4 10             	add    esp,0x10
c00183e2:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00183e8:	83 ec 0c             	sub    esp,0xc
c00183eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00183ef:	e8 30 ff ff ff       	call   c0018324 <RTC::get_update_in_progress_flag()>
c00183f4:	83 c4 10             	add    esp,0x10
c00183f7:	84 c0                	test   al,al
c00183f9:	74 0e                	je     c0018409 <RTC::completeRTCRefresh()+0xcb>
c00183fb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018401:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018407:	73 df                	jae    c00183e8 <RTC::completeRTCRefresh()+0xaa>
c0018409:	51                   	push   ecx
c001840a:	51                   	push   ecx
c001840b:	6a 00                	push   0x0
c001840d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018413:	e8 60 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018418:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001841c:	5b                   	pop    ebx
c001841d:	5e                   	pop    esi
c001841e:	6a 02                	push   0x2
c0018420:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018426:	e8 4d ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001842b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001842f:	5d                   	pop    ebp
c0018430:	58                   	pop    eax
c0018431:	6a 04                	push   0x4
c0018433:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018439:	e8 3a ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001843e:	88 c3                	mov    bl,al
c0018440:	58                   	pop    eax
c0018441:	5a                   	pop    edx
c0018442:	6a 07                	push   0x7
c0018444:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001844a:	e8 29 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001844f:	59                   	pop    ecx
c0018450:	89 c6                	mov    esi,eax
c0018452:	5d                   	pop    ebp
c0018453:	6a 08                	push   0x8
c0018455:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001845b:	e8 18 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018460:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018464:	58                   	pop    eax
c0018465:	5a                   	pop    edx
c0018466:	6a 09                	push   0x9
c0018468:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001846e:	e8 05 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018473:	89 f9                	mov    ecx,edi
c0018475:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018479:	0f b6 e8             	movzx  ebp,al
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018483:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018488:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001848d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018491:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018495:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018499:	0f 94 c0             	sete   al
c001849c:	0f b6 fb             	movzx  edi,bl
c001849f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00184a3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00184a8:	0f 94 c2             	sete   dl
c00184ab:	21 d0                	and    eax,edx
c00184ad:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00184b1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00184b5:	0f 94 c2             	sete   dl
c00184b8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00184bc:	21 c2                	and    edx,eax
c00184be:	89 f0                	mov    eax,esi
c00184c0:	0f b6 c0             	movzx  eax,al
c00184c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184c7:	89 f0                	mov    eax,esi
c00184c9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00184cd:	0f 94 c0             	sete   al
c00184d0:	21 d0                	and    eax,edx
c00184d2:	31 d2                	xor    edx,edx
c00184d4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00184d8:	0f 94 c2             	sete   dl
c00184db:	85 c2                	test   edx,eax
c00184dd:	75 27                	jne    c0018506 <RTC::completeRTCRefresh()+0x1c8>
c00184df:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00184e3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00184e7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00184eb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00184ef:	89 f0                	mov    eax,esi
c00184f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00184f5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00184f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184fd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018501:	e9 dc fe ff ff       	jmp    c00183e2 <RTC::completeRTCRefresh()+0xa4>
c0018506:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001850a:	75 d3                	jne    c00184df <RTC::completeRTCRefresh()+0x1a1>
c001850c:	52                   	push   edx
c001850d:	52                   	push   edx
c001850e:	6a 0b                	push   0xb
c0018510:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018516:	e8 5d ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001851b:	83 c4 10             	add    esp,0x10
c001851e:	a8 04                	test   al,0x4
c0018520:	75 7a                	jne    c001859c <RTC::completeRTCRefresh()+0x25e>
c0018522:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018526:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001852a:	83 e1 0f             	and    ecx,0xf
c001852d:	c1 ea 04             	shr    edx,0x4
c0018530:	c1 ef 04             	shr    edi,0x4
c0018533:	6b d2 0a             	imul   edx,edx,0xa
c0018536:	83 e6 0f             	and    esi,0xf
c0018539:	01 d1                	add    ecx,edx
c001853b:	c1 ed 04             	shr    ebp,0x4
c001853e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018542:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018546:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001854a:	c1 ea 04             	shr    edx,0x4
c001854d:	83 e1 0f             	and    ecx,0xf
c0018550:	6b d2 0a             	imul   edx,edx,0xa
c0018553:	6b ed 0a             	imul   ebp,ebp,0xa
c0018556:	01 d1                	add    ecx,edx
c0018558:	89 fa                	mov    edx,edi
c001855a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001855e:	83 e2 07             	and    edx,0x7
c0018561:	89 d9                	mov    ecx,ebx
c0018563:	6b d2 0a             	imul   edx,edx,0xa
c0018566:	83 e1 0f             	and    ecx,0xf
c0018569:	83 e3 80             	and    ebx,0xffffff80
c001856c:	01 d1                	add    ecx,edx
c001856e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018572:	09 cb                	or     ebx,ecx
c0018574:	c1 ea 04             	shr    edx,0x4
c0018577:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001857b:	6b d2 0a             	imul   edx,edx,0xa
c001857e:	83 e1 0f             	and    ecx,0xf
c0018581:	01 d6                	add    esi,edx
c0018583:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018587:	c1 ea 04             	shr    edx,0x4
c001858a:	6b d2 0a             	imul   edx,edx,0xa
c001858d:	01 d1                	add    ecx,edx
c001858f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018593:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018597:	83 e2 0f             	and    edx,0xf
c001859a:	01 d5                	add    ebp,edx
c001859c:	a8 02                	test   al,0x2
c001859e:	75 15                	jne    c00185b5 <RTC::completeRTCRefresh()+0x277>
c00185a0:	f6 c3 80             	test   bl,0x80
c00185a3:	74 10                	je     c00185b5 <RTC::completeRTCRefresh()+0x277>
c00185a5:	83 e3 7f             	and    ebx,0x7f
c00185a8:	b9 18 00 00 00       	mov    ecx,0x18
c00185ad:	8d 43 0c             	lea    eax,[ebx+0xc]
c00185b0:	99                   	cdq    
c00185b1:	f7 f9                	idiv   ecx
c00185b3:	88 d3                	mov    bl,dl
c00185b5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00185bb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00185c1:	77 06                	ja     c00185c9 <RTC::completeRTCRefresh()+0x28b>
c00185c3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00185c9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185ce:	31 c9                	xor    ecx,ecx
c00185d0:	c1 e0 10             	shl    eax,0x10
c00185d3:	89 cd                	mov    ebp,ecx
c00185d5:	c1 e7 10             	shl    edi,0x10
c00185d8:	31 d2                	xor    edx,edx
c00185da:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00185e0:	09 c5                	or     ebp,eax
c00185e2:	89 f0                	mov    eax,esi
c00185e4:	89 e9                	mov    ecx,ebp
c00185e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00185ea:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00185ee:	88 c2                	mov    dl,al
c00185f0:	88 d9                	mov    cl,bl
c00185f2:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00185f6:	0f b7 c2             	movzx  eax,dx
c00185f9:	09 f8                	or     eax,edi
c00185fb:	89 c2                	mov    edx,eax
c00185fd:	50                   	push   eax
c00185fe:	50                   	push   eax
c00185ff:	51                   	push   ecx
c0018600:	52                   	push   edx
c0018601:	e8 81 3d ff ff       	call   c000c387 <datetimeToSeconds(datetime_t)>
c0018606:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001860a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018610:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018616:	83 c4 4c             	add    esp,0x4c
c0018619:	5b                   	pop    ebx
c001861a:	5e                   	pop    esi
c001861b:	5f                   	pop    edi
c001861c:	5d                   	pop    ebp
c001861d:	c3                   	ret    

c001861e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001861e:	55                   	push   ebp
c001861f:	57                   	push   edi
c0018620:	56                   	push   esi
c0018621:	53                   	push   ebx
c0018622:	83 ec 30             	sub    esp,0x30
c0018625:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018629:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001862d:	6a 00                	push   0x0
c001862f:	6a 00                	push   0x0
c0018631:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018637:	e8 56 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001863c:	83 c4 0c             	add    esp,0xc
c001863f:	6a 00                	push   0x0
c0018641:	6a 02                	push   0x2
c0018643:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018649:	e8 44 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001864e:	31 d2                	xor    edx,edx
c0018650:	89 f9                	mov    ecx,edi
c0018652:	89 f8                	mov    eax,edi
c0018654:	c1 e9 10             	shr    ecx,0x10
c0018657:	0f b6 c4             	movzx  eax,ah
c001865a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001865e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018662:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018666:	b9 64 00 00 00       	mov    ecx,0x64
c001866b:	89 f0                	mov    eax,esi
c001866d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018671:	89 f0                	mov    eax,esi
c0018673:	0f b6 c4             	movzx  eax,ah
c0018676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001867a:	89 f0                	mov    eax,esi
c001867c:	c1 e8 10             	shr    eax,0x10
c001867f:	f7 f1                	div    ecx
c0018681:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018685:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018689:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001868d:	59                   	pop    ecx
c001868e:	5b                   	pop    ebx
c001868f:	89 fb                	mov    ebx,edi
c0018691:	6a 0b                	push   0xb
c0018693:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018699:	e8 da ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	89 c5                	mov    ebp,eax
c00186a3:	a8 04                	test   al,0x4
c00186a5:	75 6e                	jne    c0018715 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00186a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186ab:	31 d2                	xor    edx,edx
c00186ad:	0f b6 c1             	movzx  eax,cl
c00186b0:	b9 0a 00 00 00       	mov    ecx,0xa
c00186b5:	f7 f1                	div    ecx
c00186b7:	c1 e0 04             	shl    eax,0x4
c00186ba:	09 d0                	or     eax,edx
c00186bc:	31 d2                	xor    edx,edx
c00186be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186c2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00186c7:	f7 f1                	div    ecx
c00186c9:	c1 e0 04             	shl    eax,0x4
c00186cc:	09 d0                	or     eax,edx
c00186ce:	31 d2                	xor    edx,edx
c00186d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186d4:	0f b6 c3             	movzx  eax,bl
c00186d7:	f7 f1                	div    ecx
c00186d9:	c1 e0 04             	shl    eax,0x4
c00186dc:	09 d0                	or     eax,edx
c00186de:	31 d2                	xor    edx,edx
c00186e0:	89 c3                	mov    ebx,eax
c00186e2:	89 f0                	mov    eax,esi
c00186e4:	0f b6 c0             	movzx  eax,al
c00186e7:	f7 f1                	div    ecx
c00186e9:	c1 e0 04             	shl    eax,0x4
c00186ec:	09 d0                	or     eax,edx
c00186ee:	31 d2                	xor    edx,edx
c00186f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186f9:	f7 f1                	div    ecx
c00186fb:	c1 e0 04             	shl    eax,0x4
c00186fe:	09 d0                	or     eax,edx
c0018700:	31 d2                	xor    edx,edx
c0018702:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001870a:	f7 f1                	div    ecx
c001870c:	c1 e0 04             	shl    eax,0x4
c001870f:	09 d0                	or     eax,edx
c0018711:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018715:	83 e5 02             	and    ebp,0x2
c0018718:	75 1e                	jne    c0018738 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001871a:	0f b6 c3             	movzx  eax,bl
c001871d:	83 f8 0b             	cmp    eax,0xb
c0018720:	76 10                	jbe    c0018732 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018722:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018725:	88 d3                	mov    bl,dl
c0018727:	84 d2                	test   dl,dl
c0018729:	75 02                	jne    c001872d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c001872b:	b3 0c                	mov    bl,0xc
c001872d:	83 cb 80             	or     ebx,0xffffff80
c0018730:	eb 06                	jmp    c0018738 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018732:	85 c0                	test   eax,eax
c0018734:	75 02                	jne    c0018738 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018736:	b3 0c                	mov    bl,0xc
c0018738:	0f b6 db             	movzx  ebx,bl
c001873b:	50                   	push   eax
c001873c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018741:	52                   	push   edx
c0018742:	6a 00                	push   0x0
c0018744:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001874a:	e8 43 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001874f:	83 c4 0c             	add    esp,0xc
c0018752:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018757:	50                   	push   eax
c0018758:	6a 02                	push   0x2
c001875a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018760:	e8 2d eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018765:	83 c4 0c             	add    esp,0xc
c0018768:	53                   	push   ebx
c0018769:	6a 04                	push   0x4
c001876b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018771:	e8 1c eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018776:	83 c4 0c             	add    esp,0xc
c0018779:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001877e:	52                   	push   edx
c001877f:	6a 07                	push   0x7
c0018781:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018787:	e8 06 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001878c:	83 c4 0c             	add    esp,0xc
c001878f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018794:	50                   	push   eax
c0018795:	6a 08                	push   0x8
c0018797:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001879d:	e8 f0 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187a2:	83 c4 0c             	add    esp,0xc
c00187a5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00187aa:	55                   	push   ebp
c00187ab:	6a 09                	push   0x9
c00187ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187b3:	e8 da ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187b8:	5a                   	pop    edx
c00187b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187bd:	e8 7c fb ff ff       	call   c001833e <RTC::completeRTCRefresh()>
c00187c2:	83 c4 3c             	add    esp,0x3c
c00187c5:	b0 01                	mov    al,0x1
c00187c7:	5b                   	pop    ebx
c00187c8:	5e                   	pop    esi
c00187c9:	5f                   	pop    edi
c00187ca:	5d                   	pop    ebp
c00187cb:	c3                   	ret    

c00187cc <rtcIRQHandler(regs*, void*)>:
c00187cc:	53                   	push   ebx
c00187cd:	83 ec 10             	sub    esp,0x10
c00187d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187d4:	6a 0c                	push   0xc
c00187d6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187dc:	e8 97 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	a8 80                	test   al,0x80
c00187e6:	74 24                	je     c001880c <rtcIRQHandler(regs*, void*)+0x40>
c00187e8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00187ef:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00187f6:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00187fd:	75 0d                	jne    c001880c <rtcIRQHandler(regs*, void*)+0x40>
c00187ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018803:	83 c4 08             	add    esp,0x8
c0018806:	5b                   	pop    ebx
c0018807:	e9 32 fb ff ff       	jmp    c001833e <RTC::completeRTCRefresh()>
c001880c:	83 c4 08             	add    esp,0x8
c001880f:	5b                   	pop    ebx
c0018810:	c3                   	ret    
c0018811:	90                   	nop

c0018812 <RTC::RTC()>:
c0018812:	83 ec 1c             	sub    esp,0x1c
c0018815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018819:	83 ec 08             	sub    esp,0x8
c001881c:	68 af 28 02 c0       	push   0xc00228af
c0018821:	50                   	push   eax
c0018822:	e8 3b 3a ff ff       	call   c000c262 <Clock::Clock(char const*)>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	ba cc 28 02 c0       	mov    edx,0xc00228cc
c001882f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018833:	89 10                	mov    DWORD PTR [eax],edx
c0018835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018839:	83 ec 0c             	sub    esp,0xc
c001883c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018840:	6a 01                	push   0x1
c0018842:	68 cc 87 01 c0       	push   0xc00187cc
c0018847:	6a 08                	push   0x8
c0018849:	50                   	push   eax
c001884a:	e8 ef 3e ff ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001884f:	83 c4 20             	add    esp,0x20
c0018852:	89 c2                	mov    edx,eax
c0018854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018858:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001885e:	fa                   	cli    
c001885f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018864:	83 c0 01             	add    eax,0x1
c0018867:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001886c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018871:	83 ec 08             	sub    esp,0x8
c0018874:	6a 0b                	push   0xb
c0018876:	50                   	push   eax
c0018877:	e8 fc e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001887c:	83 c4 10             	add    esp,0x10
c001887f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018883:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018888:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001888c:	83 ca 10             	or     edx,0x10
c001888f:	0f b6 d2             	movzx  edx,dl
c0018892:	83 ec 04             	sub    esp,0x4
c0018895:	52                   	push   edx
c0018896:	6a 0b                	push   0xb
c0018898:	50                   	push   eax
c0018899:	e8 f4 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001889e:	83 c4 10             	add    esp,0x10
c00188a1:	83 ec 0c             	sub    esp,0xc
c00188a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188a8:	e8 91 fa ff ff       	call   c001833e <RTC::completeRTCRefresh()>
c00188ad:	83 c4 10             	add    esp,0x10
c00188b0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188b5:	83 e8 01             	sub    eax,0x1
c00188b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00188bd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188c2:	85 c0                	test   eax,eax
c00188c4:	75 01                	jne    c00188c7 <RTC::RTC()+0xb5>
c00188c6:	fb                   	sti    
c00188c7:	90                   	nop
c00188c8:	83 c4 1c             	add    esp,0x1c
c00188cb:	c3                   	ret    

c00188cc <HalConsoleScroll(int, int)>:
c00188cc:	83 ec 10             	sub    esp,0x10
c00188cf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00188d7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00188df:	90                   	nop
c00188e0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00188e5:	0f 8f e1 00 00 00    	jg     c00189cc <HalConsoleScroll(int, int)+0x100>
c00188eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00188f3:	90                   	nop
c00188f4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00188fc:	0f 8f be 00 00 00    	jg     c00189c0 <HalConsoleScroll(int, int)+0xf4>
c0018902:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018906:	89 d0                	mov    eax,edx
c0018908:	c1 e0 02             	shl    eax,0x2
c001890b:	01 d0                	add    eax,edx
c001890d:	c1 e0 05             	shl    eax,0x5
c0018910:	89 c2                	mov    edx,eax
c0018912:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018916:	01 d0                	add    eax,edx
c0018918:	89 c2                	mov    edx,eax
c001891a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001891e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018921:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018925:	89 d0                	mov    eax,edx
c0018927:	c1 e0 02             	shl    eax,0x2
c001892a:	01 d0                	add    eax,edx
c001892c:	c1 e0 05             	shl    eax,0x5
c001892f:	89 c2                	mov    edx,eax
c0018931:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018935:	01 d0                	add    eax,edx
c0018937:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001893d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018941:	01 c2                	add    edx,eax
c0018943:	8a 01                	mov    al,BYTE PTR [ecx]
c0018945:	88 02                	mov    BYTE PTR [edx],al
c0018947:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001894c:	75 66                	jne    c00189b4 <HalConsoleScroll(int, int)+0xe8>
c001894e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018952:	83 e0 01             	and    eax,0x1
c0018955:	74 39                	je     c0018990 <HalConsoleScroll(int, int)+0xc4>
c0018957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001895b:	83 e0 0f             	and    eax,0xf
c001895e:	88 c2                	mov    dl,al
c0018960:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018964:	c1 e0 04             	shl    eax,0x4
c0018967:	09 d0                	or     eax,edx
c0018969:	88 c1                	mov    cl,al
c001896b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001896f:	89 d0                	mov    eax,edx
c0018971:	c1 e0 02             	shl    eax,0x2
c0018974:	01 d0                	add    eax,edx
c0018976:	c1 e0 05             	shl    eax,0x5
c0018979:	89 c2                	mov    edx,eax
c001897b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001897f:	01 d0                	add    eax,edx
c0018981:	89 c2                	mov    edx,eax
c0018983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018987:	01 d0                	add    eax,edx
c0018989:	88 ca                	mov    dl,cl
c001898b:	88 10                	mov    BYTE PTR [eax],dl
c001898d:	eb 25                	jmp    c00189b4 <HalConsoleScroll(int, int)+0xe8>
c001898f:	90                   	nop
c0018990:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018994:	89 d0                	mov    eax,edx
c0018996:	c1 e0 02             	shl    eax,0x2
c0018999:	01 d0                	add    eax,edx
c001899b:	c1 e0 05             	shl    eax,0x5
c001899e:	89 c2                	mov    edx,eax
c00189a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a4:	01 d0                	add    eax,edx
c00189a6:	89 c2                	mov    edx,eax
c00189a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189ac:	01 d0                	add    eax,edx
c00189ae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00189b1:	8d 76 00             	lea    esi,[esi+0x0]
c00189b4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00189b9:	e9 36 ff ff ff       	jmp    c00188f4 <HalConsoleScroll(int, int)+0x28>
c00189be:	66 90                	xchg   ax,ax
c00189c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00189c5:	e9 16 ff ff ff       	jmp    c00188e0 <HalConsoleScroll(int, int)+0x14>
c00189ca:	66 90                	xchg   ax,ax
c00189cc:	90                   	nop
c00189cd:	83 c4 10             	add    esp,0x10
c00189d0:	c3                   	ret    
c00189d1:	8d 76 00             	lea    esi,[esi+0x0]

c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00189d4:	83 ec 14             	sub    esp,0x14
c00189d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189db:	88 04 24             	mov    BYTE PTR [esp],al
c00189de:	8a 04 24             	mov    al,BYTE PTR [esp]
c00189e1:	0f b6 c0             	movzx  eax,al
c00189e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189e8:	89 d1                	mov    ecx,edx
c00189ea:	83 e1 0f             	and    ecx,0xf
c00189ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189f1:	c1 e2 04             	shl    edx,0x4
c00189f4:	0f b6 d2             	movzx  edx,dl
c00189f7:	09 ca                	or     edx,ecx
c00189f9:	c1 e2 08             	shl    edx,0x8
c00189fc:	09 d0                	or     eax,edx
c00189fe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018a03:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018a0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a0f:	89 d0                	mov    eax,edx
c0018a11:	c1 e0 02             	shl    eax,0x2
c0018a14:	01 d0                	add    eax,edx
c0018a16:	c1 e0 04             	shl    eax,0x4
c0018a19:	89 c2                	mov    edx,eax
c0018a1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a1f:	01 d0                	add    eax,edx
c0018a21:	01 c0                	add    eax,eax
c0018a23:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018a27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a2b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018a30:	66 89 02             	mov    WORD PTR [edx],ax
c0018a33:	90                   	nop
c0018a34:	83 c4 14             	add    esp,0x14
c0018a37:	c3                   	ret    

c0018a38 <HalConsoleCursorUpdate(int, int)>:
c0018a38:	83 ec 20             	sub    esp,0x20
c0018a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a3f:	89 c2                	mov    edx,eax
c0018a41:	c1 e2 02             	shl    edx,0x2
c0018a44:	01 d0                	add    eax,edx
c0018a46:	c1 e0 04             	shl    eax,0x4
c0018a49:	89 c2                	mov    edx,eax
c0018a4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a4f:	01 d0                	add    eax,edx
c0018a51:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018a56:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018a5d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018a62:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018a66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a6a:	ee                   	out    dx,al
c0018a6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a70:	0f b6 c0             	movzx  eax,al
c0018a73:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018a7a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018a7e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018a82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a86:	ee                   	out    dx,al
c0018a87:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018a8e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018a93:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018a97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a9b:	ee                   	out    dx,al
c0018a9c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018aa1:	c1 e8 08             	shr    eax,0x8
c0018aa4:	0f b6 c0             	movzx  eax,al
c0018aa7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018aae:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018ab2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ab6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aba:	ee                   	out    dx,al
c0018abb:	90                   	nop
c0018abc:	83 c4 20             	add    esp,0x20
c0018abf:	c3                   	ret    

c0018ac0 <FAT::getName()>:
c0018ac0:	b8 00 29 02 c0       	mov    eax,0xc0022900
c0018ac5:	c3                   	ret    
c0018ac6:	66 90                	xchg   ax,ax

c0018ac8 <FAT::tell(void*, unsigned long long*)>:
c0018ac8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018acd:	75 09                	jne    c0018ad8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018acf:	b8 04 00 00 00       	mov    eax,0x4
c0018ad4:	c3                   	ret    
c0018ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018add:	75 09                	jne    c0018ae8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018adf:	b8 04 00 00 00       	mov    eax,0x4
c0018ae4:	c3                   	ret    
c0018ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018aef:	ba 00 00 00 00       	mov    edx,0x0
c0018af4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018af8:	89 01                	mov    DWORD PTR [ecx],eax
c0018afa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018afd:	b8 00 00 00 00       	mov    eax,0x0
c0018b02:	c3                   	ret    
c0018b03:	90                   	nop

c0018b04 <FAT::stat(void*, unsigned long long*)>:
c0018b04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b09:	75 09                	jne    c0018b14 <FAT::stat(void*, unsigned long long*)+0x10>
c0018b0b:	b8 04 00 00 00       	mov    eax,0x4
c0018b10:	c3                   	ret    
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b19:	75 09                	jne    c0018b24 <FAT::stat(void*, unsigned long long*)+0x20>
c0018b1b:	b8 04 00 00 00       	mov    eax,0x4
c0018b20:	c3                   	ret    
c0018b21:	8d 76 00             	lea    esi,[esi+0x0]
c0018b24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b2b:	ba 00 00 00 00       	mov    edx,0x0
c0018b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b34:	89 01                	mov    DWORD PTR [ecx],eax
c0018b36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b39:	b8 00 00 00 00       	mov    eax,0x0
c0018b3e:	c3                   	ret    
c0018b3f:	90                   	nop

c0018b40 <FAT::~FAT()>:
c0018b40:	83 ec 0c             	sub    esp,0xc
c0018b43:	ba 4c 29 02 c0       	mov    edx,0xc002294c
c0018b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b4c:	89 10                	mov    DWORD PTR [eax],edx
c0018b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b52:	83 ec 0c             	sub    esp,0xc
c0018b55:	50                   	push   eax
c0018b56:	e8 09 2a ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	90                   	nop
c0018b5f:	83 c4 0c             	add    esp,0xc
c0018b62:	c3                   	ret    
c0018b63:	90                   	nop

c0018b64 <FAT::~FAT()>:
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	83 ec 0c             	sub    esp,0xc
c0018b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b6e:	e8 cd ff ff ff       	call   c0018b40 <FAT::~FAT()>
c0018b73:	83 c4 10             	add    esp,0x10
c0018b76:	83 ec 08             	sub    esp,0x8
c0018b79:	6a 08                	push   0x8
c0018b7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b7f:	e8 94 1c ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018b84:	83 c4 10             	add    esp,0x10
c0018b87:	83 c4 0c             	add    esp,0xc
c0018b8a:	c3                   	ret    
c0018b8b:	90                   	nop

c0018b8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b8c:	83 ec 1c             	sub    esp,0x1c
c0018b8f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b96:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b9f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ba6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ba9:	75 35                	jne    c0018be0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018bab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018baf:	88 c2                	mov    dl,al
c0018bb1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bb6:	01 d0                	add    eax,edx
c0018bb8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bbc:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018bc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bc6:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018bcd:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bd6:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bdd:	eb 19                	jmp    c0018bf8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018bdf:	90                   	nop
c0018be0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018be4:	88 c2                	mov    dl,al
c0018be6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bea:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bf1:	01 d0                	add    eax,edx
c0018bf3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bf7:	90                   	nop
c0018bf8:	83 ec 04             	sub    esp,0x4
c0018bfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c03:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018c07:	50                   	push   eax
c0018c08:	e8 c2 c3 fe ff       	call   c0004fcf <f_getlabel>
c0018c0d:	83 c4 10             	add    esp,0x10
c0018c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c19:	75 09                	jne    c0018c24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018c1b:	b8 00 00 00 00       	mov    eax,0x0
c0018c20:	eb 0a                	jmp    c0018c2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018c22:	66 90                	xchg   ax,ax
c0018c24:	b8 01 00 00 00       	mov    eax,0x1
c0018c29:	8d 76 00             	lea    esi,[esi+0x0]
c0018c2c:	83 c4 1c             	add    esp,0x1c
c0018c2f:	c3                   	ret    

c0018c30 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c30:	57                   	push   edi
c0018c31:	83 ec 58             	sub    esp,0x58
c0018c34:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c40:	b8 00 00 00 00       	mov    eax,0x0
c0018c45:	b9 0f 00 00 00       	mov    ecx,0xf
c0018c4a:	fc                   	cld    
c0018c4b:	89 d7                	mov    edi,edx
c0018c4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018c4f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c53:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c5a:	83 f8 ff             	cmp    eax,0xffffffff
c0018c5d:	75 35                	jne    c0018c94 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018c5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c63:	88 c2                	mov    dl,al
c0018c65:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c6a:	01 d0                	add    eax,edx
c0018c6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c70:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c76:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c7a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c81:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c86:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c8a:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c91:	eb 19                	jmp    c0018cac <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018c93:	90                   	nop
c0018c94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c98:	88 c2                	mov    dl,al
c0018c9a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c9e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ca5:	01 d0                	add    eax,edx
c0018ca7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cab:	90                   	nop
c0018cac:	83 ec 08             	sub    esp,0x8
c0018caf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018cb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cb7:	50                   	push   eax
c0018cb8:	e8 83 7b fe ff       	call   c0000840 <strcat>
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	83 ec 0c             	sub    esp,0xc
c0018cc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cc7:	50                   	push   eax
c0018cc8:	e8 53 c4 fe ff       	call   c0005120 <f_setlabel>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018cd4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018cd9:	75 09                	jne    c0018ce4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018cdb:	b8 00 00 00 00       	mov    eax,0x0
c0018ce0:	eb 0a                	jmp    c0018cec <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018ce2:	66 90                	xchg   ax,ax
c0018ce4:	b8 01 00 00 00       	mov    eax,0x1
c0018ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cec:	83 c4 58             	add    esp,0x58
c0018cef:	5f                   	pop    edi
c0018cf0:	c3                   	ret    
c0018cf1:	90                   	nop
c0018cf2:	66 90                	xchg   ax,ax

c0018cf4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018cf4:	83 ec 2c             	sub    esp,0x2c
c0018cf7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018cff:	83 ec 08             	sub    esp,0x8
c0018d02:	68 24 29 02 c0       	push   0xc0022924
c0018d07:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d0b:	e8 40 7a fe ff       	call   c0000750 <strcmp>
c0018d10:	83 c4 10             	add    esp,0x10
c0018d13:	85 c0                	test   eax,eax
c0018d15:	0f 94 c0             	sete   al
c0018d18:	0f b6 c0             	movzx  eax,al
c0018d1b:	85 c0                	test   eax,eax
c0018d1d:	74 0d                	je     c0018d2c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018d1f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d27:	e9 c0 00 00 00       	jmp    c0018dec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d2c:	83 ec 08             	sub    esp,0x8
c0018d2f:	68 16 29 02 c0       	push   0xc0022916
c0018d34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d38:	e8 13 7a fe ff       	call   c0000750 <strcmp>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	85 c0                	test   eax,eax
c0018d42:	0f 94 c0             	sete   al
c0018d45:	0f b6 c0             	movzx  eax,al
c0018d48:	85 c0                	test   eax,eax
c0018d4a:	74 10                	je     c0018d5c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018d4c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d54:	e9 93 00 00 00       	jmp    c0018dec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d59:	8d 76 00             	lea    esi,[esi+0x0]
c0018d5c:	83 ec 08             	sub    esp,0x8
c0018d5f:	68 1c 29 02 c0       	push   0xc002291c
c0018d64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d68:	e8 e3 79 fe ff       	call   c0000750 <strcmp>
c0018d6d:	83 c4 10             	add    esp,0x10
c0018d70:	85 c0                	test   eax,eax
c0018d72:	0f 94 c0             	sete   al
c0018d75:	0f b6 c0             	movzx  eax,al
c0018d78:	85 c0                	test   eax,eax
c0018d7a:	74 0c                	je     c0018d88 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018d7c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d84:	eb 66                	jmp    c0018dec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d86:	66 90                	xchg   ax,ax
c0018d88:	83 ec 08             	sub    esp,0x8
c0018d8b:	68 dc 00 02 c0       	push   0xc00200dc
c0018d90:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d94:	e8 b7 79 fe ff       	call   c0000750 <strcmp>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	85 c0                	test   eax,eax
c0018d9e:	0f 94 c0             	sete   al
c0018da1:	0f b6 c0             	movzx  eax,al
c0018da4:	85 c0                	test   eax,eax
c0018da6:	74 0c                	je     c0018db4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018da8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018db0:	eb 3a                	jmp    c0018dec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018db2:	66 90                	xchg   ax,ax
c0018db4:	83 ec 08             	sub    esp,0x8
c0018db7:	68 22 29 02 c0       	push   0xc0022922
c0018dbc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018dc0:	e8 8b 79 fe ff       	call   c0000750 <strcmp>
c0018dc5:	83 c4 10             	add    esp,0x10
c0018dc8:	85 c0                	test   eax,eax
c0018dca:	0f 94 c0             	sete   al
c0018dcd:	0f b6 c0             	movzx  eax,al
c0018dd0:	85 c0                	test   eax,eax
c0018dd2:	74 0c                	je     c0018de0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018dd4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018ddc:	eb 0e                	jmp    c0018dec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018dde:	66 90                	xchg   ax,ax
c0018de0:	b8 08 00 00 00       	mov    eax,0x8
c0018de5:	e9 ea 00 00 00       	jmp    c0018ed4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018dea:	66 90                	xchg   ax,ax
c0018dec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018df3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018df8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dfc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e03:	83 f8 ff             	cmp    eax,0xffffffff
c0018e06:	75 34                	jne    c0018e3c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018e08:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e0c:	88 c2                	mov    dl,al
c0018e0e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e13:	01 d0                	add    eax,edx
c0018e15:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e19:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e23:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e2a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e2f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e33:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e3a:	eb 18                	jmp    c0018e54 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018e3c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e40:	88 c2                	mov    dl,al
c0018e42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e46:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e4d:	01 d0                	add    eax,edx
c0018e4f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e53:	90                   	nop
c0018e54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e58:	88 04 24             	mov    BYTE PTR [esp],al
c0018e5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e63:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018e6b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018e70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e78:	83 ec 0c             	sub    esp,0xc
c0018e7b:	68 00 20 00 00       	push   0x2000
c0018e80:	e8 31 ec fe ff       	call   c0007ab6 <malloc>
c0018e85:	83 c4 10             	add    esp,0x10
c0018e88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e8c:	68 00 20 00 00       	push   0x2000
c0018e91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e95:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e99:	50                   	push   eax
c0018e9a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e9e:	50                   	push   eax
c0018e9f:	e8 79 c5 fe ff       	call   c000541d <f_mkfs>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018eab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018eb0:	75 0a                	jne    c0018ebc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018eb2:	b8 00 00 00 00       	mov    eax,0x0
c0018eb7:	eb 1b                	jmp    c0018ed4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ebc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018ec1:	75 09                	jne    c0018ecc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018ec3:	b8 09 00 00 00       	mov    eax,0x9
c0018ec8:	eb 0a                	jmp    c0018ed4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018eca:	66 90                	xchg   ax,ax
c0018ecc:	b8 01 00 00 00       	mov    eax,0x1
c0018ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed4:	83 c4 2c             	add    esp,0x2c
c0018ed7:	c3                   	ret    

c0018ed8 <FAT::tryMount(LogicalDisk*, int)>:
c0018ed8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018ede:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ee3:	83 f8 14             	cmp    eax,0x14
c0018ee6:	75 18                	jne    c0018f00 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018ee8:	83 ec 0c             	sub    esp,0xc
c0018eeb:	68 28 29 02 c0       	push   0xc0022928
c0018ef0:	e8 cc 84 ff ff       	call   c00113c1 <KePanic(char const*)>
c0018ef5:	83 c4 10             	add    esp,0x10
c0018ef8:	b0 00                	mov    al,0x0
c0018efa:	e9 ed 01 00 00       	jmp    c00190ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018eff:	90                   	nop
c0018f00:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018f07:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f0d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f13:	3d 00 02 00 00       	cmp    eax,0x200
c0018f18:	74 0a                	je     c0018f24 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018f1a:	b0 00                	mov    al,0x0
c0018f1c:	e9 cb 01 00 00       	jmp    c00190ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f21:	8d 76 00             	lea    esi,[esi+0x0]
c0018f24:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018f2c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f33:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0018f3d:	74 09                	je     c0018f48 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018f3f:	b0 01                	mov    al,0x1
c0018f41:	e9 a6 01 00 00       	jmp    c00190ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f46:	66 90                	xchg   ax,ax
c0018f48:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018f52:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018f5a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018f61:	88 c2                	mov    dl,al
c0018f63:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f68:	01 d0                	add    eax,edx
c0018f6a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018f71:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f77:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f7e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f85:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f8a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018f91:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f98:	83 ec 0c             	sub    esp,0xc
c0018f9b:	68 34 02 00 00       	push   0x234
c0018fa0:	e8 11 eb fe ff       	call   c0007ab6 <malloc>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018faf:	83 ec 04             	sub    esp,0x4
c0018fb2:	6a 00                	push   0x0
c0018fb4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018fbb:	50                   	push   eax
c0018fbc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fc3:	e8 30 ac fe ff       	call   c0003bf8 <f_mount>
c0018fc8:	83 c4 10             	add    esp,0x10
c0018fcb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018fd2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018fda:	74 1c                	je     c0018ff8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018fdc:	83 ec 0c             	sub    esp,0xc
c0018fdf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fe6:	e8 eb ea fe ff       	call   c0007ad6 <rfree>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	b0 00                	mov    al,0x0
c0018ff0:	e9 f7 00 00 00       	jmp    c00190ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	83 ec 04             	sub    esp,0x4
c0018ffb:	68 00 01 00 00       	push   0x100
c0019000:	6a 00                	push   0x0
c0019002:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019009:	50                   	push   eax
c001900a:	e8 e1 74 fe ff       	call   c00004f0 <memset>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	83 ec 08             	sub    esp,0x8
c0019015:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001901c:	50                   	push   eax
c001901d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019024:	50                   	push   eax
c0019025:	e8 16 78 fe ff       	call   c0000840 <strcat>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	83 ec 08             	sub    esp,0x8
c0019030:	68 36 29 02 c0       	push   0xc0022936
c0019035:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001903c:	50                   	push   eax
c001903d:	e8 fe 77 fe ff       	call   c0000840 <strcat>
c0019042:	83 c4 10             	add    esp,0x10
c0019045:	83 ec 04             	sub    esp,0x4
c0019048:	6a 01                	push   0x1
c001904a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019051:	50                   	push   eax
c0019052:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019056:	50                   	push   eax
c0019057:	e8 fe ab fe ff       	call   c0003c5a <f_open>
c001905c:	83 c4 10             	add    esp,0x10
c001905f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019066:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001906d:	85 c0                	test   eax,eax
c001906f:	74 0b                	je     c001907c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019071:	78 31                	js     c00190a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019073:	83 e8 04             	sub    eax,0x4
c0019076:	83 f8 01             	cmp    eax,0x1
c0019079:	77 29                	ja     c00190a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001907b:	90                   	nop
c001907c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019084:	83 ec 0c             	sub    esp,0xc
c0019087:	8d 44 24 14          	lea    eax,[esp+0x14]
c001908b:	50                   	push   eax
c001908c:	e8 98 b3 fe ff       	call   c0004429 <f_close>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	90                   	nop
c0019095:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001909d:	85 c0                	test   eax,eax
c001909f:	74 43                	je     c00190e4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00190a1:	eb 31                	jmp    c00190d4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00190a3:	90                   	nop
c00190a4:	83 ec 0c             	sub    esp,0xc
c00190a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00190ae:	e8 23 ea fe ff       	call   c0007ad6 <rfree>
c00190b3:	83 c4 10             	add    esp,0x10
c00190b6:	83 ec 04             	sub    esp,0x4
c00190b9:	6a 00                	push   0x0
c00190bb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00190c2:	50                   	push   eax
c00190c3:	6a 00                	push   0x0
c00190c5:	e8 2e ab fe ff       	call   c0003bf8 <f_mount>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	b0 00                	mov    al,0x0
c00190cf:	eb 1b                	jmp    c00190ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190d1:	8d 76 00             	lea    esi,[esi+0x0]
c00190d4:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00190d9:	83 c0 01             	add    eax,0x1
c00190dc:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c00190e1:	8d 76 00             	lea    esi,[esi+0x0]
c00190e4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00190eb:	90                   	nop
c00190ec:	81 c4 4c 03 00 00    	add    esp,0x34c
c00190f2:	c3                   	ret    
c00190f3:	90                   	nop

c00190f4 <FAT::allocateSwapfile(char const*, int)>:
c00190f4:	55                   	push   ebp
c00190f5:	57                   	push   edi
c00190f6:	56                   	push   esi
c00190f7:	53                   	push   ebx
c00190f8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00190fe:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019109:	83 ec 0c             	sub    esp,0xc
c001910c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019113:	e8 9e e9 fe ff       	call   c0007ab6 <malloc>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	89 c7                	mov    edi,eax
c001911d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019122:	83 ec 04             	sub    esp,0x4
c0019125:	50                   	push   eax
c0019126:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001912d:	57                   	push   edi
c001912e:	e8 3d 27 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001913d:	83 ec 04             	sub    esp,0x4
c0019140:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019144:	50                   	push   eax
c0019145:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019149:	50                   	push   eax
c001914a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019151:	e8 e4 2a ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019160:	c1 e0 14             	shl    eax,0x14
c0019163:	89 c7                	mov    edi,eax
c0019165:	89 c5                	mov    ebp,eax
c0019167:	c1 fd 1f             	sar    ebp,0x1f
c001916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001916e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019172:	89 f9                	mov    ecx,edi
c0019174:	31 c1                	xor    ecx,eax
c0019176:	89 cb                	mov    ebx,ecx
c0019178:	89 e9                	mov    ecx,ebp
c001917a:	31 d1                	xor    ecx,edx
c001917c:	89 ce                	mov    esi,ecx
c001917e:	89 f0                	mov    eax,esi
c0019180:	09 d8                	or     eax,ebx
c0019182:	0f 84 9c 00 00 00    	je     c0019224 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019188:	83 ec 0c             	sub    esp,0xc
c001918b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019192:	e8 6f 29 ff ff       	call   c000bb06 <File::unlink()>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	83 ec 08             	sub    esp,0x8
c001919d:	6a 12                	push   0x12
c001919f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191a6:	e8 8d 27 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c00191ab:	83 c4 10             	add    esp,0x10
c00191ae:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191b5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191bb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191c2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00191c9:	c1 e0 14             	shl    eax,0x14
c00191cc:	83 ec 04             	sub    esp,0x4
c00191cf:	6a 01                	push   0x1
c00191d1:	50                   	push   eax
c00191d2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00191d9:	e8 d2 c0 fe ff       	call   c00052b0 <f_expand>
c00191de:	83 c4 10             	add    esp,0x10
c00191e1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00191ea:	83 c0 10             	add    eax,0x10
c00191ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00191ef:	83 ec 0c             	sub    esp,0xc
c00191f2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191f6:	52                   	push   edx
c00191f7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00191fb:	52                   	push   edx
c00191fc:	6a 00                	push   0x0
c00191fe:	68 00 04 00 00       	push   0x400
c0019203:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001920a:	ff d0                	call   eax
c001920c:	83 c4 20             	add    esp,0x20
c001920f:	83 ec 0c             	sub    esp,0xc
c0019212:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019219:	e8 78 27 ff ff       	call   c000b996 <File::close()>
c001921e:	83 c4 10             	add    esp,0x10
c0019221:	8d 76 00             	lea    esi,[esi+0x0]
c0019224:	83 ec 08             	sub    esp,0x8
c0019227:	6a 01                	push   0x1
c0019229:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019230:	e8 03 27 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001923f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019241:	83 c0 0c             	add    eax,0xc
c0019244:	8b 00                	mov    eax,DWORD PTR [eax]
c0019246:	83 ec 0c             	sub    esp,0xc
c0019249:	8d 54 24 24          	lea    edx,[esp+0x24]
c001924d:	52                   	push   edx
c001924e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019252:	52                   	push   edx
c0019253:	6a 00                	push   0x0
c0019255:	6a 04                	push   0x4
c0019257:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001925e:	ff d0                	call   eax
c0019260:	83 c4 20             	add    esp,0x20
c0019263:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001926a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019270:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019277:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001927e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019281:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019288:	83 ec 0c             	sub    esp,0xc
c001928b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019292:	e8 ff 26 ff ff       	call   c000b996 <File::close()>
c0019297:	83 c4 10             	add    esp,0x10
c001929a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00192a1:	ba 00 00 00 00       	mov    edx,0x0
c00192a6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00192ac:	5b                   	pop    ebx
c00192ad:	5e                   	pop    esi
c00192ae:	5f                   	pop    edi
c00192af:	5d                   	pop    ebp
c00192b0:	c3                   	ret    
c00192b1:	90                   	nop
c00192b2:	66 90                	xchg   ax,ax

c00192b4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00192b4:	57                   	push   edi
c00192b5:	56                   	push   esi
c00192b6:	53                   	push   ebx
c00192b7:	81 ec 50 02 00 00    	sub    esp,0x250
c00192bd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00192c5:	74 0d                	je     c00192d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00192c7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00192cf:	75 0f                	jne    c00192e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00192d1:	8d 76 00             	lea    esi,[esi+0x0]
c00192d4:	b8 04 00 00 00       	mov    eax,0x4
c00192d9:	e9 3a 01 00 00       	jmp    c0019418 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192de:	66 90                	xchg   ax,ax
c00192e0:	83 ec 08             	sub    esp,0x8
c00192e3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192ea:	50                   	push   eax
c00192eb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00192f2:	e8 ff b3 fe ff       	call   c00046f6 <f_readdir>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019301:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019308:	83 ec 0c             	sub    esp,0xc
c001930b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019312:	83 c0 16             	add    eax,0x16
c0019315:	50                   	push   eax
c0019316:	e8 55 72 fe ff       	call   c0000570 <strlen>
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	ba 00 00 00 00       	mov    edx,0x0
c0019323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019327:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001932b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019332:	0f b6 c0             	movzx  eax,al
c0019335:	83 e0 10             	and    eax,0x10
c0019338:	74 0a                	je     c0019344 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001933a:	b8 02 00 00 00       	mov    eax,0x2
c001933f:	eb 0b                	jmp    c001934c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019341:	8d 76 00             	lea    esi,[esi+0x0]
c0019344:	b8 01 00 00 00       	mov    eax,0x1
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019350:	83 ec 08             	sub    esp,0x8
c0019353:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001935a:	83 c0 16             	add    eax,0x16
c001935d:	50                   	push   eax
c001935e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019362:	83 c0 10             	add    eax,0x10
c0019365:	50                   	push   eax
c0019366:	e8 d5 72 fe ff       	call   c0000640 <strcpy>
c001936b:	83 c4 10             	add    esp,0x10
c001936e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019375:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001937c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019380:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019387:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001938e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019395:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001939c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00193a3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00193aa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00193b1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00193b8:	89 c6                	mov    esi,eax
c00193ba:	89 d7                	mov    edi,edx
c00193bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193be:	89 c8                	mov    eax,ecx
c00193c0:	89 fa                	mov    edx,edi
c00193c2:	89 f3                	mov    ebx,esi
c00193c4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00193cb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00193d2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00193d9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00193e0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00193e6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00193ed:	0f be c0             	movsx  eax,al
c00193f0:	85 c0                	test   eax,eax
c00193f2:	75 08                	jne    c00193fc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00193f4:	b8 07 00 00 00       	mov    eax,0x7
c00193f9:	eb 1d                	jmp    c0019418 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00193fb:	90                   	nop
c00193fc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019403:	85 c0                	test   eax,eax
c0019405:	75 09                	jne    c0019410 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019407:	b8 00 00 00 00       	mov    eax,0x0
c001940c:	eb 0a                	jmp    c0019418 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001940e:	66 90                	xchg   ax,ax
c0019410:	b8 01 00 00 00       	mov    eax,0x1
c0019415:	8d 76 00             	lea    esi,[esi+0x0]
c0019418:	81 c4 50 02 00 00    	add    esp,0x250
c001941e:	5b                   	pop    ebx
c001941f:	5e                   	pop    esi
c0019420:	5f                   	pop    edi
c0019421:	c3                   	ret    
c0019422:	66 90                	xchg   ax,ax

c0019424 <FAT::read(void*, unsigned long, void*, int*)>:
c0019424:	83 ec 1c             	sub    esp,0x1c
c0019427:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001942c:	74 0a                	je     c0019438 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001942e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019433:	75 0b                	jne    c0019440 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019435:	8d 76 00             	lea    esi,[esi+0x0]
c0019438:	b8 04 00 00 00       	mov    eax,0x4
c001943d:	eb 41                	jmp    c0019480 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001943f:	90                   	nop
c0019440:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019444:	50                   	push   eax
c0019445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019449:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001944d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019451:	e8 c7 aa fe ff       	call   c0003f1d <f_read>
c0019456:	83 c4 10             	add    esp,0x10
c0019459:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001945d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019461:	89 c2                	mov    edx,eax
c0019463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019467:	89 10                	mov    DWORD PTR [eax],edx
c0019469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001946d:	85 c0                	test   eax,eax
c001946f:	75 07                	jne    c0019478 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019471:	b8 00 00 00 00       	mov    eax,0x0
c0019476:	eb 08                	jmp    c0019480 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019478:	b8 01 00 00 00       	mov    eax,0x1
c001947d:	8d 76 00             	lea    esi,[esi+0x0]
c0019480:	83 c4 1c             	add    esp,0x1c
c0019483:	c3                   	ret    

c0019484 <FAT::write(void*, unsigned long, void*, int*)>:
c0019484:	83 ec 1c             	sub    esp,0x1c
c0019487:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001948c:	74 0a                	je     c0019498 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001948e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019493:	75 0b                	jne    c00194a0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019495:	8d 76 00             	lea    esi,[esi+0x0]
c0019498:	b8 04 00 00 00       	mov    eax,0x4
c001949d:	eb 41                	jmp    c00194e0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001949f:	90                   	nop
c00194a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194a4:	50                   	push   eax
c00194a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194b1:	e8 66 ac fe ff       	call   c000411c <f_write>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194c1:	89 c2                	mov    edx,eax
c00194c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194c7:	89 10                	mov    DWORD PTR [eax],edx
c00194c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194cd:	85 c0                	test   eax,eax
c00194cf:	75 07                	jne    c00194d8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00194d1:	b8 00 00 00 00       	mov    eax,0x0
c00194d6:	eb 08                	jmp    c00194e0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00194d8:	b8 01 00 00 00       	mov    eax,0x1
c00194dd:	8d 76 00             	lea    esi,[esi+0x0]
c00194e0:	83 c4 1c             	add    esp,0x1c
c00194e3:	c3                   	ret    

c00194e4 <FAT::close(void*)>:
c00194e4:	83 ec 1c             	sub    esp,0x1c
c00194e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194ec:	75 0a                	jne    c00194f8 <FAT::close(void*)+0x14>
c00194ee:	b8 04 00 00 00       	mov    eax,0x4
c00194f3:	eb 3f                	jmp    c0019534 <FAT::close(void*)+0x50>
c00194f5:	8d 76 00             	lea    esi,[esi+0x0]
c00194f8:	83 ec 0c             	sub    esp,0xc
c00194fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ff:	e8 25 af fe ff       	call   c0004429 <f_close>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001950b:	83 ec 0c             	sub    esp,0xc
c001950e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019512:	e8 af e5 fe ff       	call   c0007ac6 <free>
c0019517:	83 c4 10             	add    esp,0x10
c001951a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001951e:	85 c0                	test   eax,eax
c0019520:	75 0a                	jne    c001952c <FAT::close(void*)+0x48>
c0019522:	b8 00 00 00 00       	mov    eax,0x0
c0019527:	eb 0b                	jmp    c0019534 <FAT::close(void*)+0x50>
c0019529:	8d 76 00             	lea    esi,[esi+0x0]
c001952c:	b8 01 00 00 00       	mov    eax,0x1
c0019531:	8d 76 00             	lea    esi,[esi+0x0]
c0019534:	83 c4 1c             	add    esp,0x1c
c0019537:	c3                   	ret    

c0019538 <FAT::closeDir(void*)>:
c0019538:	83 ec 1c             	sub    esp,0x1c
c001953b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019540:	75 0a                	jne    c001954c <FAT::closeDir(void*)+0x14>
c0019542:	b8 04 00 00 00       	mov    eax,0x4
c0019547:	eb 3f                	jmp    c0019588 <FAT::closeDir(void*)+0x50>
c0019549:	8d 76 00             	lea    esi,[esi+0x0]
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019553:	e8 7c b1 fe ff       	call   c00046d4 <f_closedir>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001955f:	83 ec 0c             	sub    esp,0xc
c0019562:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019566:	e8 5b e5 fe ff       	call   c0007ac6 <free>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019572:	85 c0                	test   eax,eax
c0019574:	75 0a                	jne    c0019580 <FAT::closeDir(void*)+0x48>
c0019576:	b8 00 00 00 00       	mov    eax,0x0
c001957b:	eb 0b                	jmp    c0019588 <FAT::closeDir(void*)+0x50>
c001957d:	8d 76 00             	lea    esi,[esi+0x0]
c0019580:	b8 01 00 00 00       	mov    eax,0x1
c0019585:	8d 76 00             	lea    esi,[esi+0x0]
c0019588:	83 c4 1c             	add    esp,0x1c
c001958b:	c3                   	ret    

c001958c <FAT::truncate(void*, unsigned long long)>:
c001958c:	83 ec 2c             	sub    esp,0x2c
c001958f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019593:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019597:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001959b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001959f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195a4:	75 0a                	jne    c00195b0 <FAT::truncate(void*, unsigned long long)+0x24>
c00195a6:	b8 04 00 00 00       	mov    eax,0x4
c00195ab:	eb 47                	jmp    c00195f4 <FAT::truncate(void*, unsigned long long)+0x68>
c00195ad:	8d 76 00             	lea    esi,[esi+0x0]
c00195b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00195b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00195b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195bb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00195c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195c7:	83 ec 08             	sub    esp,0x8
c00195ca:	50                   	push   eax
c00195cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195cf:	e8 84 ae fe ff       	call   c0004458 <f_lseek>
c00195d4:	83 c4 10             	add    esp,0x10
c00195d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195df:	85 c0                	test   eax,eax
c00195e1:	75 09                	jne    c00195ec <FAT::truncate(void*, unsigned long long)+0x60>
c00195e3:	b8 00 00 00 00       	mov    eax,0x0
c00195e8:	eb 0a                	jmp    c00195f4 <FAT::truncate(void*, unsigned long long)+0x68>
c00195ea:	66 90                	xchg   ax,ax
c00195ec:	b8 01 00 00 00       	mov    eax,0x1
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	83 c4 2c             	add    esp,0x2c
c00195f7:	c3                   	ret    

c00195f8 <FAT::seek(void*, unsigned long long)>:
c00195f8:	83 ec 2c             	sub    esp,0x2c
c00195fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019603:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001960b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019610:	75 0a                	jne    c001961c <FAT::seek(void*, unsigned long long)+0x24>
c0019612:	b8 04 00 00 00       	mov    eax,0x4
c0019617:	eb 33                	jmp    c001964c <FAT::seek(void*, unsigned long long)+0x54>
c0019619:	8d 76 00             	lea    esi,[esi+0x0]
c001961c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019620:	83 ec 08             	sub    esp,0x8
c0019623:	50                   	push   eax
c0019624:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019628:	e8 2b ae fe ff       	call   c0004458 <f_lseek>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019638:	85 c0                	test   eax,eax
c001963a:	75 08                	jne    c0019644 <FAT::seek(void*, unsigned long long)+0x4c>
c001963c:	b8 00 00 00 00       	mov    eax,0x0
c0019641:	eb 09                	jmp    c001964c <FAT::seek(void*, unsigned long long)+0x54>
c0019643:	90                   	nop
c0019644:	b8 01 00 00 00       	mov    eax,0x1
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	83 c4 2c             	add    esp,0x2c
c001964f:	c3                   	ret    

c0019650 <fatWrapperReadDisk>:
c0019650:	53                   	push   ebx
c0019651:	83 ec 18             	sub    esp,0x18
c0019654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019658:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001965c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019661:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019668:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001966c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019670:	ba 00 00 00 00       	mov    edx,0x0
c0019675:	83 ec 0c             	sub    esp,0xc
c0019678:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001967c:	53                   	push   ebx
c001967d:	52                   	push   edx
c001967e:	50                   	push   eax
c001967f:	51                   	push   ecx
c0019680:	e8 ef 44 ff ff       	call   c000db74 <LogicalDisk::read(unsigned long long, int, void*)>
c0019685:	83 c4 20             	add    esp,0x20
c0019688:	83 c4 18             	add    esp,0x18
c001968b:	5b                   	pop    ebx
c001968c:	c3                   	ret    
c001968d:	8d 76 00             	lea    esi,[esi+0x0]

c0019690 <fatWrapperWriteDisk>:
c0019690:	53                   	push   ebx
c0019691:	83 ec 18             	sub    esp,0x18
c0019694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019698:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001969c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196a1:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00196a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196b0:	ba 00 00 00 00       	mov    edx,0x0
c00196b5:	83 ec 0c             	sub    esp,0xc
c00196b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196bc:	53                   	push   ebx
c00196bd:	52                   	push   edx
c00196be:	50                   	push   eax
c00196bf:	51                   	push   ecx
c00196c0:	e8 1b 45 ff ff       	call   c000dbe0 <LogicalDisk::write(unsigned long long, int, void*)>
c00196c5:	83 c4 20             	add    esp,0x20
c00196c8:	83 c4 18             	add    esp,0x18
c00196cb:	5b                   	pop    ebx
c00196cc:	c3                   	ret    
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]

c00196d0 <fatWrapperIoctl>:
c00196d0:	53                   	push   ebx
c00196d1:	83 ec 28             	sub    esp,0x28
c00196d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196dc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00196e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196e9:	83 f8 02             	cmp    eax,0x2
c00196ec:	75 32                	jne    c0019720 <fatWrapperIoctl+0x50>
c00196ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196fb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019702:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019708:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001970e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019712:	66 89 02             	mov    WORD PTR [edx],ax
c0019715:	b8 00 00 00 00       	mov    eax,0x0
c001971a:	e9 c5 00 00 00       	jmp    c00197e4 <fatWrapperIoctl+0x114>
c001971f:	90                   	nop
c0019720:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019725:	83 f8 01             	cmp    eax,0x1
c0019728:	75 6a                	jne    c0019794 <fatWrapperIoctl+0xc4>
c001972a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001972e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019732:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019737:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001973e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019744:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001974a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019750:	89 c8                	mov    eax,ecx
c0019752:	89 da                	mov    edx,ebx
c0019754:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019758:	c1 e0 0a             	shl    eax,0xa
c001975b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019760:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0019767:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001976d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019773:	89 cb                	mov    ebx,ecx
c0019775:	c1 fb 1f             	sar    ebx,0x1f
c0019778:	53                   	push   ebx
c0019779:	51                   	push   ecx
c001977a:	52                   	push   edx
c001977b:	50                   	push   eax
c001977c:	e8 6f 5b 00 00       	call   c001f2f0 <__udivdi3>
c0019781:	83 c4 10             	add    esp,0x10
c0019784:	89 c2                	mov    edx,eax
c0019786:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001978a:	89 10                	mov    DWORD PTR [eax],edx
c001978c:	b8 00 00 00 00       	mov    eax,0x0
c0019791:	eb 51                	jmp    c00197e4 <fatWrapperIoctl+0x114>
c0019793:	90                   	nop
c0019794:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019799:	85 c0                	test   eax,eax
c001979b:	75 07                	jne    c00197a4 <fatWrapperIoctl+0xd4>
c001979d:	b8 00 00 00 00       	mov    eax,0x0
c00197a2:	eb 40                	jmp    c00197e4 <fatWrapperIoctl+0x114>
c00197a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197a9:	83 f8 03             	cmp    eax,0x3
c00197ac:	75 1a                	jne    c00197c8 <fatWrapperIoctl+0xf8>
c00197ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197ba:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00197c0:	b8 00 00 00 00       	mov    eax,0x0
c00197c5:	eb 1d                	jmp    c00197e4 <fatWrapperIoctl+0x114>
c00197c7:	90                   	nop
c00197c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197cd:	83 f8 04             	cmp    eax,0x4
c00197d0:	75 0a                	jne    c00197dc <fatWrapperIoctl+0x10c>
c00197d2:	b8 00 00 00 00       	mov    eax,0x0
c00197d7:	eb 0b                	jmp    c00197e4 <fatWrapperIoctl+0x114>
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	b8 04 00 00 00       	mov    eax,0x4
c00197e1:	8d 76 00             	lea    esi,[esi+0x0]
c00197e4:	83 c4 28             	add    esp,0x28
c00197e7:	5b                   	pop    ebx
c00197e8:	c3                   	ret    
c00197e9:	90                   	nop
c00197ea:	66 90                	xchg   ax,ax

c00197ec <FAT::FAT()>:
c00197ec:	83 ec 1c             	sub    esp,0x1c
c00197ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	50                   	push   eax
c00197f7:	e8 44 1d ff ff       	call   c000b540 <Filesystem::Filesystem()>
c00197fc:	83 c4 10             	add    esp,0x10
c00197ff:	ba 4c 29 02 c0       	mov    edx,0xc002294c
c0019804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019808:	89 10                	mov    DWORD PTR [eax],edx
c001980a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019814:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001981c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019821:	7f 19                	jg     c001983c <FAT::FAT()+0x50>
c0019823:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019827:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019832:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019837:	eb e3                	jmp    c001981c <FAT::FAT()+0x30>
c0019839:	8d 76 00             	lea    esi,[esi+0x0]
c001983c:	90                   	nop
c001983d:	83 c4 1c             	add    esp,0x1c
c0019840:	c3                   	ret    
c0019841:	90                   	nop
c0019842:	66 90                	xchg   ax,ax

c0019844 <FAT::fixFilepath(char*)>:
c0019844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019848:	8a 00                	mov    al,BYTE PTR [eax]
c001984a:	0f be c0             	movsx  eax,al
c001984d:	83 f8 40             	cmp    eax,0x40
c0019850:	7e 2e                	jle    c0019880 <FAT::fixFilepath(char*)+0x3c>
c0019852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019856:	8a 00                	mov    al,BYTE PTR [eax]
c0019858:	83 e8 41             	sub    eax,0x41
c001985b:	88 c2                	mov    dl,al
c001985d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019861:	88 10                	mov    BYTE PTR [eax],dl
c0019863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019867:	8a 00                	mov    al,BYTE PTR [eax]
c0019869:	0f be c0             	movsx  eax,al
c001986c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0019873:	83 c0 30             	add    eax,0x30
c0019876:	88 c2                	mov    dl,al
c0019878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987c:	88 10                	mov    BYTE PTR [eax],dl
c001987e:	66 90                	xchg   ax,ax
c0019880:	90                   	nop
c0019881:	c3                   	ret    
c0019882:	66 90                	xchg   ax,ax

c0019884 <FAT::open(char const*, void**, FileOpenMode)>:
c0019884:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001988a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019892:	74 0c                	je     c00198a0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019894:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001989c:	75 0e                	jne    c00198ac <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001989e:	66 90                	xchg   ax,ax
c00198a0:	b8 04 00 00 00       	mov    eax,0x4
c00198a5:	e9 46 01 00 00       	jmp    c00199f0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00198aa:	66 90                	xchg   ax,ax
c00198ac:	83 ec 08             	sub    esp,0x8
c00198af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198ba:	50                   	push   eax
c00198bb:	e8 80 6d fe ff       	call   c0000640 <strcpy>
c00198c0:	83 c4 10             	add    esp,0x10
c00198c3:	83 ec 08             	sub    esp,0x8
c00198c6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198ca:	50                   	push   eax
c00198cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198d2:	e8 6d ff ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c00198d7:	83 c4 10             	add    esp,0x10
c00198da:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198e9:	83 e0 01             	and    eax,0x1
c00198ec:	74 12                	je     c0019900 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00198ee:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198f5:	83 c8 01             	or     eax,0x1
c00198f8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198ff:	90                   	nop
c0019900:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019907:	83 e0 04             	and    eax,0x4
c001990a:	74 24                	je     c0019930 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001990c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019913:	83 c8 30             	or     eax,0x30
c0019916:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001991d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019924:	83 c8 02             	or     eax,0x2
c0019927:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001992e:	66 90                	xchg   ax,ax
c0019930:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019937:	83 e0 02             	and    eax,0x2
c001993a:	74 14                	je     c0019950 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001993c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019943:	83 c8 02             	or     eax,0x2
c0019946:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001994d:	8d 76 00             	lea    esi,[esi+0x0]
c0019950:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019957:	83 e0 08             	and    eax,0x8
c001995a:	74 14                	je     c0019970 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001995c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019963:	83 c8 04             	or     eax,0x4
c0019966:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019977:	83 e0 10             	and    eax,0x10
c001997a:	74 14                	je     c0019990 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001997c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019983:	83 c8 08             	or     eax,0x8
c0019986:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	68 28 02 00 00       	push   0x228
c0019998:	e8 19 e1 fe ff       	call   c0007ab6 <malloc>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	89 c2                	mov    edx,eax
c00199a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199a9:	89 10                	mov    DWORD PTR [eax],edx
c00199ab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00199b3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00199bc:	83 ec 04             	sub    esp,0x4
c00199bf:	52                   	push   edx
c00199c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00199c4:	52                   	push   edx
c00199c5:	50                   	push   eax
c00199c6:	e8 8f a2 fe ff       	call   c0003c5a <f_open>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199d5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199dd:	74 09                	je     c00199e8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00199df:	b8 01 00 00 00       	mov    eax,0x1
c00199e4:	eb 0a                	jmp    c00199f0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00199e6:	66 90                	xchg   ax,ax
c00199e8:	b8 00 00 00 00       	mov    eax,0x0
c00199ed:	8d 76 00             	lea    esi,[esi+0x0]
c00199f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199f6:	c3                   	ret    
c00199f7:	90                   	nop

c00199f8 <FAT::openDir(char const*, void**)>:
c00199f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a06:	74 0c                	je     c0019a14 <FAT::openDir(char const*, void**)+0x1c>
c0019a08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019a10:	75 0e                	jne    c0019a20 <FAT::openDir(char const*, void**)+0x28>
c0019a12:	66 90                	xchg   ax,ax
c0019a14:	b8 04 00 00 00       	mov    eax,0x4
c0019a19:	e9 82 00 00 00       	jmp    c0019aa0 <FAT::openDir(char const*, void**)+0xa8>
c0019a1e:	66 90                	xchg   ax,ax
c0019a20:	83 ec 08             	sub    esp,0x8
c0019a23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a2e:	50                   	push   eax
c0019a2f:	e8 0c 6c fe ff       	call   c0000640 <strcpy>
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	83 ec 08             	sub    esp,0x8
c0019a3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a3e:	50                   	push   eax
c0019a3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a46:	e8 f9 fd ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	83 ec 0c             	sub    esp,0xc
c0019a51:	6a 30                	push   0x30
c0019a53:	e8 5e e0 fe ff       	call   c0007ab6 <malloc>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	89 c2                	mov    edx,eax
c0019a5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a64:	89 10                	mov    DWORD PTR [eax],edx
c0019a66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a6f:	83 ec 08             	sub    esp,0x8
c0019a72:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a76:	52                   	push   edx
c0019a77:	50                   	push   eax
c0019a78:	e8 8c ab fe ff       	call   c0004609 <f_opendir>
c0019a7d:	83 c4 10             	add    esp,0x10
c0019a80:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a87:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a8f:	74 07                	je     c0019a98 <FAT::openDir(char const*, void**)+0xa0>
c0019a91:	b8 01 00 00 00       	mov    eax,0x1
c0019a96:	eb 08                	jmp    c0019aa0 <FAT::openDir(char const*, void**)+0xa8>
c0019a98:	b8 00 00 00 00       	mov    eax,0x0
c0019a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019aa6:	c3                   	ret    
c0019aa7:	90                   	nop

c0019aa8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019aa8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019aae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ab6:	75 0c                	jne    c0019ac4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ab8:	b8 04 00 00 00       	mov    eax,0x4
c0019abd:	e9 d6 00 00 00       	jmp    c0019b98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ac2:	66 90                	xchg   ax,ax
c0019ac4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019acc:	75 0a                	jne    c0019ad8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ace:	b8 04 00 00 00       	mov    eax,0x4
c0019ad3:	e9 c0 00 00 00       	jmp    c0019b98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ad8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ae0:	75 0a                	jne    c0019aec <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019ae2:	b8 04 00 00 00       	mov    eax,0x4
c0019ae7:	e9 ac 00 00 00       	jmp    c0019b98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019aec:	83 ec 08             	sub    esp,0x8
c0019aef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019af6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019afd:	50                   	push   eax
c0019afe:	e8 3d 6b fe ff       	call   c0000640 <strcpy>
c0019b03:	83 c4 10             	add    esp,0x10
c0019b06:	83 ec 08             	sub    esp,0x8
c0019b09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019b10:	50                   	push   eax
c0019b11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b18:	e8 27 fd ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019b1d:	83 c4 10             	add    esp,0x10
c0019b20:	83 ec 08             	sub    esp,0x8
c0019b23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019b27:	50                   	push   eax
c0019b28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b2f:	50                   	push   eax
c0019b30:	e8 53 ac fe ff       	call   c0004788 <f_stat>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019b3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b46:	85 c0                	test   eax,eax
c0019b48:	74 0a                	je     c0019b54 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019b4a:	83 f8 04             	cmp    eax,0x4
c0019b4d:	74 39                	je     c0019b88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b4f:	eb 3f                	jmp    c0019b90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019b51:	8d 76 00             	lea    esi,[esi+0x0]
c0019b54:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b58:	0f b6 c0             	movzx  eax,al
c0019b5b:	83 e0 10             	and    eax,0x10
c0019b5e:	0f 95 c2             	setne  dl
c0019b61:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b68:	88 10                	mov    BYTE PTR [eax],dl
c0019b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b6e:	ba 00 00 00 00       	mov    edx,0x0
c0019b73:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b7a:	89 01                	mov    DWORD PTR [ecx],eax
c0019b7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b7f:	b8 00 00 00 00       	mov    eax,0x0
c0019b84:	eb 12                	jmp    c0019b98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b86:	66 90                	xchg   ax,ax
c0019b88:	b8 02 00 00 00       	mov    eax,0x2
c0019b8d:	eb 09                	jmp    c0019b98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b8f:	90                   	nop
c0019b90:	b8 01 00 00 00       	mov    eax,0x1
c0019b95:	8d 76 00             	lea    esi,[esi+0x0]
c0019b98:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b9e:	c3                   	ret    
c0019b9f:	90                   	nop

c0019ba0 <FAT::unlink(char const*)>:
c0019ba0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ba6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019bae:	75 08                	jne    c0019bb8 <FAT::unlink(char const*)+0x18>
c0019bb0:	b8 04 00 00 00       	mov    eax,0x4
c0019bb5:	eb 61                	jmp    c0019c18 <FAT::unlink(char const*)+0x78>
c0019bb7:	90                   	nop
c0019bb8:	83 ec 08             	sub    esp,0x8
c0019bbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bc6:	50                   	push   eax
c0019bc7:	e8 74 6a fe ff       	call   c0000640 <strcpy>
c0019bcc:	83 c4 10             	add    esp,0x10
c0019bcf:	83 ec 08             	sub    esp,0x8
c0019bd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bd6:	50                   	push   eax
c0019bd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bde:	e8 61 fc ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019be3:	83 c4 10             	add    esp,0x10
c0019be6:	83 ec 0c             	sub    esp,0xc
c0019be9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bed:	50                   	push   eax
c0019bee:	e8 07 ae fe ff       	call   c00049fa <f_unlink>
c0019bf3:	83 c4 10             	add    esp,0x10
c0019bf6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019bfd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019c04:	85 c0                	test   eax,eax
c0019c06:	75 08                	jne    c0019c10 <FAT::unlink(char const*)+0x70>
c0019c08:	b8 00 00 00 00       	mov    eax,0x0
c0019c0d:	eb 09                	jmp    c0019c18 <FAT::unlink(char const*)+0x78>
c0019c0f:	90                   	nop
c0019c10:	b8 01 00 00 00       	mov    eax,0x1
c0019c15:	8d 76 00             	lea    esi,[esi+0x0]
c0019c18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019c20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019c26:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019c2d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019c34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c3c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c44:	75 0a                	jne    c0019c50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019c46:	b8 04 00 00 00       	mov    eax,0x4
c0019c4b:	e9 7c 01 00 00       	jmp    c0019dcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c50:	83 ec 08             	sub    esp,0x8
c0019c53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c5e:	50                   	push   eax
c0019c5f:	e8 dc 69 fe ff       	call   c0000640 <strcpy>
c0019c64:	83 c4 10             	add    esp,0x10
c0019c67:	83 ec 08             	sub    esp,0x8
c0019c6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c6e:	50                   	push   eax
c0019c6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c76:	e8 c9 fb ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019c7b:	83 c4 10             	add    esp,0x10
c0019c7e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c86:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c93:	83 e0 01             	and    eax,0x1
c0019c96:	74 14                	je     c0019cac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019c98:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c9f:	83 c8 01             	or     eax,0x1
c0019ca2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cb1:	83 e0 02             	and    eax,0x2
c0019cb4:	74 12                	je     c0019cc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019cb6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cbd:	83 c8 20             	or     eax,0x20
c0019cc0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cc7:	90                   	nop
c0019cc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ccd:	83 e0 04             	and    eax,0x4
c0019cd0:	74 12                	je     c0019ce4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019cd2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cd9:	83 c8 04             	or     eax,0x4
c0019cdc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ce3:	90                   	nop
c0019ce4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ce9:	83 e0 08             	and    eax,0x8
c0019cec:	74 12                	je     c0019d00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019cee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cf5:	83 c8 02             	or     eax,0x2
c0019cf8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cff:	90                   	nop
c0019d00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d05:	83 e0 01             	and    eax,0x1
c0019d08:	74 12                	je     c0019d1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019d0a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d11:	83 c8 01             	or     eax,0x1
c0019d14:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d1b:	90                   	nop
c0019d1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d21:	83 e0 02             	and    eax,0x2
c0019d24:	74 12                	je     c0019d38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019d26:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d2d:	83 c8 20             	or     eax,0x20
c0019d30:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d37:	90                   	nop
c0019d38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d3d:	83 e0 04             	and    eax,0x4
c0019d40:	74 12                	je     c0019d54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019d42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d49:	83 c8 04             	or     eax,0x4
c0019d4c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d53:	90                   	nop
c0019d54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d59:	83 e0 08             	and    eax,0x8
c0019d5c:	74 12                	je     c0019d70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019d5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d65:	83 c8 02             	or     eax,0x2
c0019d68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d6f:	90                   	nop
c0019d70:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019d77:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d7e:	09 d0                	or     eax,edx
c0019d80:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d87:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d8f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d97:	83 ec 04             	sub    esp,0x4
c0019d9a:	52                   	push   edx
c0019d9b:	50                   	push   eax
c0019d9c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019da0:	50                   	push   eax
c0019da1:	e8 c9 b0 fe ff       	call   c0004e6f <f_chmod>
c0019da6:	83 c4 10             	add    esp,0x10
c0019da9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019db0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019db7:	85 c0                	test   eax,eax
c0019db9:	75 09                	jne    c0019dc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019dbb:	b8 00 00 00 00       	mov    eax,0x0
c0019dc0:	eb 0a                	jmp    c0019dcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	b8 01 00 00 00       	mov    eax,0x1
c0019dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dcc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019dd2:	c3                   	ret    
c0019dd3:	90                   	nop

c0019dd4 <FAT::rename(char const*, char const*)>:
c0019dd4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019dda:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019de2:	74 0c                	je     c0019df0 <FAT::rename(char const*, char const*)+0x1c>
c0019de4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019dec:	75 0e                	jne    c0019dfc <FAT::rename(char const*, char const*)+0x28>
c0019dee:	66 90                	xchg   ax,ax
c0019df0:	b8 04 00 00 00       	mov    eax,0x4
c0019df5:	e9 9e 00 00 00       	jmp    c0019e98 <FAT::rename(char const*, char const*)+0xc4>
c0019dfa:	66 90                	xchg   ax,ax
c0019dfc:	83 ec 08             	sub    esp,0x8
c0019dff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e06:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e0d:	50                   	push   eax
c0019e0e:	e8 2d 68 fe ff       	call   c0000640 <strcpy>
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	83 ec 08             	sub    esp,0x8
c0019e19:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019e20:	50                   	push   eax
c0019e21:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e28:	e8 17 fa ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019e2d:	83 c4 10             	add    esp,0x10
c0019e30:	83 ec 08             	sub    esp,0x8
c0019e33:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e3e:	50                   	push   eax
c0019e3f:	e8 fc 67 fe ff       	call   c0000640 <strcpy>
c0019e44:	83 c4 10             	add    esp,0x10
c0019e47:	83 ec 08             	sub    esp,0x8
c0019e4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e4e:	50                   	push   eax
c0019e4f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e56:	e8 e9 f9 ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019e5b:	83 c4 10             	add    esp,0x10
c0019e5e:	83 ec 08             	sub    esp,0x8
c0019e61:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e65:	50                   	push   eax
c0019e66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e6d:	50                   	push   eax
c0019e6e:	e8 44 ae fe ff       	call   c0004cb7 <f_rename>
c0019e73:	83 c4 10             	add    esp,0x10
c0019e76:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e7d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019e84:	85 c0                	test   eax,eax
c0019e86:	75 08                	jne    c0019e90 <FAT::rename(char const*, char const*)+0xbc>
c0019e88:	b8 00 00 00 00       	mov    eax,0x0
c0019e8d:	eb 09                	jmp    c0019e98 <FAT::rename(char const*, char const*)+0xc4>
c0019e8f:	90                   	nop
c0019e90:	b8 01 00 00 00       	mov    eax,0x1
c0019e95:	8d 76 00             	lea    esi,[esi+0x0]
c0019e98:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e9e:	c3                   	ret    
c0019e9f:	90                   	nop

c0019ea0 <FAT::mkdir(char const*)>:
c0019ea0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ea6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019eae:	75 08                	jne    c0019eb8 <FAT::mkdir(char const*)+0x18>
c0019eb0:	b8 04 00 00 00       	mov    eax,0x4
c0019eb5:	eb 61                	jmp    c0019f18 <FAT::mkdir(char const*)+0x78>
c0019eb7:	90                   	nop
c0019eb8:	83 ec 08             	sub    esp,0x8
c0019ebb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ec2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec6:	50                   	push   eax
c0019ec7:	e8 74 67 fe ff       	call   c0000640 <strcpy>
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	83 ec 08             	sub    esp,0x8
c0019ed2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed6:	50                   	push   eax
c0019ed7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ede:	e8 61 f9 ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019ee3:	83 c4 10             	add    esp,0x10
c0019ee6:	83 ec 0c             	sub    esp,0xc
c0019ee9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eed:	50                   	push   eax
c0019eee:	e8 29 ac fe ff       	call   c0004b1c <f_mkdir>
c0019ef3:	83 c4 10             	add    esp,0x10
c0019ef6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019efd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f04:	85 c0                	test   eax,eax
c0019f06:	75 08                	jne    c0019f10 <FAT::mkdir(char const*)+0x70>
c0019f08:	b8 00 00 00 00       	mov    eax,0x0
c0019f0d:	eb 09                	jmp    c0019f18 <FAT::mkdir(char const*)+0x78>
c0019f0f:	90                   	nop
c0019f10:	b8 01 00 00 00       	mov    eax,0x1
c0019f15:	8d 76 00             	lea    esi,[esi+0x0]
c0019f18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f1e:	c3                   	ret    
c0019f1f:	90                   	nop

c0019f20 <FAT::exists(char const*)>:
c0019f20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f26:	83 ec 08             	sub    esp,0x8
c0019f29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f30:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f34:	50                   	push   eax
c0019f35:	e8 06 67 fe ff       	call   c0000640 <strcpy>
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	83 ec 08             	sub    esp,0x8
c0019f40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f44:	50                   	push   eax
c0019f45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f4c:	e8 f3 f8 ff ff       	call   c0019844 <FAT::fixFilepath(char*)>
c0019f51:	83 c4 10             	add    esp,0x10
c0019f54:	83 ec 08             	sub    esp,0x8
c0019f57:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019f5e:	50                   	push   eax
c0019f5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f63:	50                   	push   eax
c0019f64:	e8 1f a8 fe ff       	call   c0004788 <f_stat>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f7a:	85 c0                	test   eax,eax
c0019f7c:	75 06                	jne    c0019f84 <FAT::exists(char const*)+0x64>
c0019f7e:	b0 01                	mov    al,0x1
c0019f80:	eb 06                	jmp    c0019f88 <FAT::exists(char const*)+0x68>
c0019f82:	66 90                	xchg   ax,ax
c0019f84:	b0 00                	mov    al,0x0
c0019f86:	66 90                	xchg   ax,ax
c0019f88:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f8e:	c3                   	ret    
c0019f8f:	90                   	nop

c0019f90 <isoReadDiscSectorHelper>:
c0019f90:	83 ec 2c             	sub    esp,0x2c
c0019f93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f9b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019fa0:	83 e8 41             	sub    eax,0x41
c0019fa3:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019faa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019fae:	ba 00 00 00 00       	mov    edx,0x0
c0019fb3:	83 ec 0c             	sub    esp,0xc
c0019fb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019fba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fbe:	52                   	push   edx
c0019fbf:	50                   	push   eax
c0019fc0:	51                   	push   ecx
c0019fc1:	e8 ae 3b ff ff       	call   c000db74 <LogicalDisk::read(unsigned long long, int, void*)>
c0019fc6:	83 c4 20             	add    esp,0x20
c0019fc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fcd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019fd2:	74 0c                	je     c0019fe0 <isoReadDiscSectorHelper+0x50>
c0019fd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fd8:	c1 e0 0b             	shl    eax,0xb
c0019fdb:	eb 0b                	jmp    c0019fe8 <isoReadDiscSectorHelper+0x58>
c0019fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fe0:	b8 00 00 00 00       	mov    eax,0x0
c0019fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fe8:	83 c4 2c             	add    esp,0x2c
c0019feb:	c3                   	ret    

c0019fec <iso_kprintf>:
c0019fec:	83 ec 0c             	sub    esp,0xc
c0019fef:	83 ec 08             	sub    esp,0x8
c0019ff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ff6:	68 fa 26 02 c0       	push   0xc00226fa
c0019ffb:	e8 45 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	90                   	nop
c001a004:	83 c4 0c             	add    esp,0xc
c001a007:	c3                   	ret    

c001a008 <iso_kprintfd>:
c001a008:	83 ec 0c             	sub    esp,0xc
c001a00b:	83 ec 08             	sub    esp,0x8
c001a00e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a012:	68 ba 0e 02 c0       	push   0xc0020eba
c001a017:	e8 29 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a01c:	83 c4 10             	add    esp,0x10
c001a01f:	90                   	nop
c001a020:	83 c4 0c             	add    esp,0xc
c001a023:	c3                   	ret    

c001a024 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a024:	b8 08 00 00 00       	mov    eax,0x8
c001a029:	c3                   	ret    

c001a02a <ISO9660::truncate(void*, unsigned long long)>:
c001a02a:	b8 01 00 00 00       	mov    eax,0x1
c001a02f:	c3                   	ret    

c001a030 <ISO9660::getName()>:
c001a030:	b8 b0 29 02 c0       	mov    eax,0xc00229b0
c001a035:	c3                   	ret    

c001a036 <ISO9660::closeDir(void*)>:
c001a036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a03a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a03c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a03f:	90                   	nop

c001a040 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a040:	b8 01 00 00 00       	mov    eax,0x1
c001a045:	c3                   	ret    

c001a046 <ISO9660::unlink(char const*)>:
c001a046:	b8 01 00 00 00       	mov    eax,0x1
c001a04b:	c3                   	ret    

c001a04c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a04c:	b8 03 00 00 00       	mov    eax,0x3
c001a051:	c3                   	ret    

c001a052 <ISO9660::rename(char const*, char const*)>:
c001a052:	b8 01 00 00 00       	mov    eax,0x1
c001a057:	c3                   	ret    

c001a058 <ISO9660::mkdir(char const*)>:
c001a058:	b8 01 00 00 00       	mov    eax,0x1
c001a05d:	c3                   	ret    

c001a05e <ISO9660::~ISO9660()>:
c001a05e:	83 ec 0c             	sub    esp,0xc
c001a061:	ba f0 2a 02 c0       	mov    edx,0xc0022af0
c001a066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06a:	89 10                	mov    DWORD PTR [eax],edx
c001a06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a070:	83 ec 0c             	sub    esp,0xc
c001a073:	50                   	push   eax
c001a074:	e8 eb 14 ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c001a079:	83 c4 10             	add    esp,0x10
c001a07c:	90                   	nop
c001a07d:	83 c4 0c             	add    esp,0xc
c001a080:	c3                   	ret    
c001a081:	90                   	nop

c001a082 <ISO9660::~ISO9660()>:
c001a082:	83 ec 0c             	sub    esp,0xc
c001a085:	83 ec 0c             	sub    esp,0xc
c001a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a08c:	e8 cd ff ff ff       	call   c001a05e <ISO9660::~ISO9660()>
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	83 ec 08             	sub    esp,0x8
c001a097:	6a 08                	push   0x8
c001a099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a09d:	e8 76 07 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	83 c4 0c             	add    esp,0xc
c001a0a8:	c3                   	ret    
c001a0a9:	90                   	nop

c001a0aa <ISO9660::exists(char const*)>:
c001a0aa:	83 ec 18             	sub    esp,0x18
c001a0ad:	68 cb 29 02 c0       	push   0xc00229cb
c001a0b2:	e8 0a 73 ff ff       	call   c00113c1 <KePanic(char const*)>
c001a0b7:	31 c0                	xor    eax,eax
c001a0b9:	83 c4 1c             	add    esp,0x1c
c001a0bc:	c3                   	ret    
c001a0bd:	90                   	nop

c001a0be <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a0be:	56                   	push   esi
c001a0bf:	53                   	push   ebx
c001a0c0:	53                   	push   ebx
c001a0c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0c9:	85 db                	test   ebx,ebx
c001a0cb:	0f 84 ca 00 00 00    	je     c001a19b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0d1:	85 f6                	test   esi,esi
c001a0d3:	0f 84 c2 00 00 00    	je     c001a19b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0d9:	b8 03 00 00 00       	mov    eax,0x3
c001a0de:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a0e3:	0f 85 b7 00 00 00    	jne    c001a1a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0e9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a0eb:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0f2:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a0f8:	74 1b                	je     c001a115 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a0fa:	85 c0                	test   eax,eax
c001a0fc:	74 10                	je     c001a10e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a0fe:	83 ec 0c             	sub    esp,0xc
c001a101:	68 e9 29 02 c0       	push   0xc00229e9
c001a106:	e8 b6 72 ff ff       	call   c00113c1 <KePanic(char const*)>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a110:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a115:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a118:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a11f:	85 c0                	test   eax,eax
c001a121:	74 09                	je     c001a12c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a123:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a12a:	74 48                	je     c001a174 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a12c:	83 ec 0c             	sub    esp,0xc
c001a12f:	68 f9 29 02 c0       	push   0xc00229f9
c001a134:	e8 0c 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a139:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a13c:	83 c4 10             	add    esp,0x10
c001a13f:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a146:	85 c0                	test   eax,eax
c001a148:	74 17                	je     c001a161 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a14a:	83 ec 0c             	sub    esp,0xc
c001a14d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a154:	68 19 2a 02 c0       	push   0xc0022a19
c001a159:	e8 e7 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	83 ec 0c             	sub    esp,0xc
c001a164:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a16b:	50                   	push   eax
c001a16c:	e8 d5 c8 fe ff       	call   c0006a46 <init_percd>
c001a171:	83 c4 10             	add    esp,0x10
c001a174:	83 c3 03             	add    ebx,0x3
c001a177:	51                   	push   ecx
c001a178:	51                   	push   ecx
c001a179:	6a 00                	push   0x0
c001a17b:	53                   	push   ebx
c001a17c:	e8 8c c3 fe ff       	call   c000650d <iso_open>
c001a181:	83 c4 10             	add    esp,0x10
c001a184:	89 c2                	mov    edx,eax
c001a186:	b8 01 00 00 00       	mov    eax,0x1
c001a18b:	83 fa ff             	cmp    edx,0xffffffff
c001a18e:	74 10                	je     c001a1a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a190:	83 c2 32             	add    edx,0x32
c001a193:	31 c0                	xor    eax,eax
c001a195:	01 d2                	add    edx,edx
c001a197:	89 16                	mov    DWORD PTR [esi],edx
c001a199:	eb 05                	jmp    c001a1a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a19b:	b8 04 00 00 00       	mov    eax,0x4
c001a1a0:	5a                   	pop    edx
c001a1a1:	5b                   	pop    ebx
c001a1a2:	5e                   	pop    esi
c001a1a3:	c3                   	ret    

c001a1a4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a1a4:	53                   	push   ebx
c001a1a5:	83 ec 08             	sub    esp,0x8
c001a1a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1b0:	85 c0                	test   eax,eax
c001a1b2:	74 2d                	je     c001a1e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a1b4:	85 db                	test   ebx,ebx
c001a1b6:	74 29                	je     c001a1e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a1b8:	b9 02 00 00 00       	mov    ecx,0x2
c001a1bd:	52                   	push   edx
c001a1be:	99                   	cdq    
c001a1bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1c3:	f7 f9                	idiv   ecx
c001a1c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1c9:	83 e8 32             	sub    eax,0x32
c001a1cc:	50                   	push   eax
c001a1cd:	e8 e3 c3 fe ff       	call   c00065b5 <iso_read>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	89 03                	mov    DWORD PTR [ebx],eax
c001a1d7:	09 d0                	or     eax,edx
c001a1d9:	0f 94 c0             	sete   al
c001a1dc:	0f b6 c0             	movzx  eax,al
c001a1df:	eb 05                	jmp    c001a1e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a1e1:	b8 04 00 00 00       	mov    eax,0x4
c001a1e6:	83 c4 08             	add    esp,0x8
c001a1e9:	5b                   	pop    ebx
c001a1ea:	c3                   	ret    
c001a1eb:	90                   	nop

c001a1ec <ISO9660::seek(void*, unsigned long long)>:
c001a1ec:	57                   	push   edi
c001a1ed:	56                   	push   esi
c001a1ee:	b8 04 00 00 00       	mov    eax,0x4
c001a1f3:	51                   	push   ecx
c001a1f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a1fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a200:	85 d2                	test   edx,edx
c001a202:	74 26                	je     c001a22a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a204:	6a 00                	push   0x0
c001a206:	b9 02 00 00 00       	mov    ecx,0x2
c001a20b:	57                   	push   edi
c001a20c:	89 d0                	mov    eax,edx
c001a20e:	56                   	push   esi
c001a20f:	99                   	cdq    
c001a210:	f7 f9                	idiv   ecx
c001a212:	83 e8 32             	sub    eax,0x32
c001a215:	50                   	push   eax
c001a216:	e8 b0 c4 fe ff       	call   c00066cb <iso_seek>
c001a21b:	83 c4 10             	add    esp,0x10
c001a21e:	31 f0                	xor    eax,esi
c001a220:	31 fa                	xor    edx,edi
c001a222:	09 d0                	or     eax,edx
c001a224:	0f 95 c0             	setne  al
c001a227:	0f b6 c0             	movzx  eax,al
c001a22a:	5a                   	pop    edx
c001a22b:	5e                   	pop    esi
c001a22c:	5f                   	pop    edi
c001a22d:	c3                   	ret    

c001a22e <ISO9660::tell(void*, unsigned long long*)>:
c001a22e:	53                   	push   ebx
c001a22f:	83 ec 08             	sub    esp,0x8
c001a232:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a236:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a23a:	85 c0                	test   eax,eax
c001a23c:	74 24                	je     c001a262 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a23e:	85 db                	test   ebx,ebx
c001a240:	74 20                	je     c001a262 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a242:	83 ec 0c             	sub    esp,0xc
c001a245:	b9 02 00 00 00       	mov    ecx,0x2
c001a24a:	99                   	cdq    
c001a24b:	f7 f9                	idiv   ecx
c001a24d:	83 e8 32             	sub    eax,0x32
c001a250:	50                   	push   eax
c001a251:	e8 f9 c4 fe ff       	call   c000674f <iso_tell>
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	89 03                	mov    DWORD PTR [ebx],eax
c001a25b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a25e:	31 c0                	xor    eax,eax
c001a260:	eb 05                	jmp    c001a267 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a262:	b8 04 00 00 00       	mov    eax,0x4
c001a267:	83 c4 08             	add    esp,0x8
c001a26a:	5b                   	pop    ebx
c001a26b:	c3                   	ret    

c001a26c <ISO9660::stat(void*, unsigned long long*)>:
c001a26c:	53                   	push   ebx
c001a26d:	83 ec 14             	sub    esp,0x14
c001a270:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a274:	68 3d 2a 02 c0       	push   0xc0022a3d
c001a279:	e8 c7 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a27e:	83 c4 10             	add    esp,0x10
c001a281:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a286:	74 2c                	je     c001a2b4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a288:	85 db                	test   ebx,ebx
c001a28a:	74 28                	je     c001a2b4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	b9 02 00 00 00       	mov    ecx,0x2
c001a294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a298:	99                   	cdq    
c001a299:	f7 f9                	idiv   ecx
c001a29b:	83 e8 32             	sub    eax,0x32
c001a29e:	50                   	push   eax
c001a29f:	e8 dc c4 fe ff       	call   c0006780 <iso_total>
c001a2a4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a2ab:	89 03                	mov    DWORD PTR [ebx],eax
c001a2ad:	83 c4 10             	add    esp,0x10
c001a2b0:	31 c0                	xor    eax,eax
c001a2b2:	eb 05                	jmp    c001a2b9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a2b4:	b8 04 00 00 00       	mov    eax,0x4
c001a2b9:	83 c4 08             	add    esp,0x8
c001a2bc:	5b                   	pop    ebx
c001a2bd:	c3                   	ret    

c001a2be <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a2be:	55                   	push   ebp
c001a2bf:	57                   	push   edi
c001a2c0:	56                   	push   esi
c001a2c1:	53                   	push   ebx
c001a2c2:	83 ec 18             	sub    esp,0x18
c001a2c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a2c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a2cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a2d1:	68 45 2a 02 c0       	push   0xc0022a45
c001a2d6:	e8 6a 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	85 ff                	test   edi,edi
c001a2e0:	0f 94 c0             	sete   al
c001a2e3:	85 f6                	test   esi,esi
c001a2e5:	0f 94 c2             	sete   dl
c001a2e8:	09 d0                	or     eax,edx
c001a2ea:	a8 01                	test   al,0x1
c001a2ec:	0f 85 dd 00 00 00    	jne    c001a3cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a2f2:	85 db                	test   ebx,ebx
c001a2f4:	0f 84 d5 00 00 00    	je     c001a3cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a2fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a2fd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a303:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a30a:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a311:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a313:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a319:	74 1b                	je     c001a336 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a31b:	85 c0                	test   eax,eax
c001a31d:	74 10                	je     c001a32f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a31f:	83 ec 0c             	sub    esp,0xc
c001a322:	68 e9 29 02 c0       	push   0xc00229e9
c001a327:	e8 95 70 ff ff       	call   c00113c1 <KePanic(char const*)>
c001a32c:	83 c4 10             	add    esp,0x10
c001a32f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a331:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a336:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a339:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a340:	85 c0                	test   eax,eax
c001a342:	74 09                	je     c001a34d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a344:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a34b:	74 51                	je     c001a39e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a34d:	83 ec 0c             	sub    esp,0xc
c001a350:	68 4d 2a 02 c0       	push   0xc0022a4d
c001a355:	e8 eb 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a35a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a368:	74 21                	je     c001a38b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a36a:	83 ec 0c             	sub    esp,0xc
c001a36d:	68 6d 2a 02 c0       	push   0xc0022a6d
c001a372:	e8 ce 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a377:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a37a:	83 c4 10             	add    esp,0x10
c001a37d:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a384:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a395:	50                   	push   eax
c001a396:	e8 ab c6 fe ff       	call   c0006a46 <init_percd>
c001a39b:	83 c4 10             	add    esp,0x10
c001a39e:	83 c3 03             	add    ebx,0x3
c001a3a1:	52                   	push   edx
c001a3a2:	52                   	push   edx
c001a3a3:	6a 00                	push   0x0
c001a3a5:	53                   	push   ebx
c001a3a6:	e8 62 c1 fe ff       	call   c000650d <iso_open>
c001a3ab:	83 c4 10             	add    esp,0x10
c001a3ae:	89 c5                	mov    ebp,eax
c001a3b0:	83 f8 ff             	cmp    eax,0xffffffff
c001a3b3:	75 21                	jne    c001a3d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a3b5:	50                   	push   eax
c001a3b6:	50                   	push   eax
c001a3b7:	6a 01                	push   0x1
c001a3b9:	53                   	push   ebx
c001a3ba:	e8 4e c1 fe ff       	call   c000650d <iso_open>
c001a3bf:	83 c4 10             	add    esp,0x10
c001a3c2:	ba 02 00 00 00       	mov    edx,0x2
c001a3c7:	40                   	inc    eax
c001a3c8:	74 2b                	je     c001a3f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3ca:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a3cd:	eb 24                	jmp    c001a3f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a3cf:	ba 04 00 00 00       	mov    edx,0x4
c001a3d4:	eb 1f                	jmp    c001a3f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3d6:	83 ec 0c             	sub    esp,0xc
c001a3d9:	50                   	push   eax
c001a3da:	e8 a1 c3 fe ff       	call   c0006780 <iso_total>
c001a3df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a3e6:	89 07                	mov    DWORD PTR [edi],eax
c001a3e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3eb:	e8 a7 c1 fe ff       	call   c0006597 <iso_close>
c001a3f0:	83 c4 10             	add    esp,0x10
c001a3f3:	31 d2                	xor    edx,edx
c001a3f5:	83 c4 0c             	add    esp,0xc
c001a3f8:	89 d0                	mov    eax,edx
c001a3fa:	5b                   	pop    ebx
c001a3fb:	5e                   	pop    esi
c001a3fc:	5f                   	pop    edi
c001a3fd:	5d                   	pop    ebp
c001a3fe:	c3                   	ret    
c001a3ff:	90                   	nop

c001a400 <ISO9660::close(void*)>:
c001a400:	83 ec 0c             	sub    esp,0xc
c001a403:	b8 04 00 00 00       	mov    eax,0x4
c001a408:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a40c:	85 d2                	test   edx,edx
c001a40e:	74 1b                	je     c001a42b <ISO9660::close(void*)+0x2b>
c001a410:	83 ec 0c             	sub    esp,0xc
c001a413:	b9 02 00 00 00       	mov    ecx,0x2
c001a418:	89 d0                	mov    eax,edx
c001a41a:	99                   	cdq    
c001a41b:	f7 f9                	idiv   ecx
c001a41d:	83 e8 32             	sub    eax,0x32
c001a420:	50                   	push   eax
c001a421:	e8 71 c1 fe ff       	call   c0006597 <iso_close>
c001a426:	83 c4 10             	add    esp,0x10
c001a429:	31 c0                	xor    eax,eax
c001a42b:	83 c4 0c             	add    esp,0xc
c001a42e:	c3                   	ret    
c001a42f:	90                   	nop

c001a430 <ISO9660::openDir(char const*, void**)>:
c001a430:	56                   	push   esi
c001a431:	53                   	push   ebx
c001a432:	50                   	push   eax
c001a433:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a437:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a43b:	85 db                	test   ebx,ebx
c001a43d:	0f 84 bd 00 00 00    	je     c001a500 <ISO9660::openDir(char const*, void**)+0xd0>
c001a443:	85 f6                	test   esi,esi
c001a445:	0f 84 b5 00 00 00    	je     c001a500 <ISO9660::openDir(char const*, void**)+0xd0>
c001a44b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a44d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a454:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a45a:	74 1b                	je     c001a477 <ISO9660::openDir(char const*, void**)+0x47>
c001a45c:	85 c0                	test   eax,eax
c001a45e:	74 10                	je     c001a470 <ISO9660::openDir(char const*, void**)+0x40>
c001a460:	83 ec 0c             	sub    esp,0xc
c001a463:	68 e9 29 02 c0       	push   0xc00229e9
c001a468:	e8 54 6f ff ff       	call   c00113c1 <KePanic(char const*)>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	8a 03                	mov    al,BYTE PTR [ebx]
c001a472:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a477:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a481:	85 c0                	test   eax,eax
c001a483:	74 10                	je     c001a495 <ISO9660::openDir(char const*, void**)+0x65>
c001a485:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a48c:	74 1a                	je     c001a4a8 <ISO9660::openDir(char const*, void**)+0x78>
c001a48e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a495:	83 ec 0c             	sub    esp,0xc
c001a498:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a49f:	50                   	push   eax
c001a4a0:	e8 a1 c5 fe ff       	call   c0006a46 <init_percd>
c001a4a5:	83 c4 10             	add    esp,0x10
c001a4a8:	83 c3 03             	add    ebx,0x3
c001a4ab:	50                   	push   eax
c001a4ac:	50                   	push   eax
c001a4ad:	6a 01                	push   0x1
c001a4af:	53                   	push   ebx
c001a4b0:	e8 58 c0 fe ff       	call   c000650d <iso_open>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	89 c3                	mov    ebx,eax
c001a4ba:	83 f8 ff             	cmp    eax,0xffffffff
c001a4bd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4c2:	75 1c                	jne    c001a4e0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a4c4:	53                   	push   ebx
c001a4c5:	53                   	push   ebx
c001a4c6:	68 91 2a 02 c0       	push   0xc0022a91
c001a4cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4d1:	e8 d0 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	b8 01 00 00 00       	mov    eax,0x1
c001a4de:	eb 25                	jmp    c001a505 <ISO9660::openDir(char const*, void**)+0xd5>
c001a4e0:	01 db                	add    ebx,ebx
c001a4e2:	51                   	push   ecx
c001a4e3:	83 c3 65             	add    ebx,0x65
c001a4e6:	51                   	push   ecx
c001a4e7:	68 a4 2a 02 c0       	push   0xc0022aa4
c001a4ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4f2:	e8 af e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4f7:	89 1e                	mov    DWORD PTR [esi],ebx
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	31 c0                	xor    eax,eax
c001a4fe:	eb 05                	jmp    c001a505 <ISO9660::openDir(char const*, void**)+0xd5>
c001a500:	b8 04 00 00 00       	mov    eax,0x4
c001a505:	5a                   	pop    edx
c001a506:	5b                   	pop    ebx
c001a507:	5e                   	pop    esi
c001a508:	c3                   	ret    
c001a509:	90                   	nop

c001a50a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a50a:	55                   	push   ebp
c001a50b:	57                   	push   edi
c001a50c:	56                   	push   esi
c001a50d:	53                   	push   ebx
c001a50e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a514:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a51b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a522:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a52a:	0f 84 e7 00 00 00    	je     c001a617 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a530:	85 db                	test   ebx,ebx
c001a532:	0f 84 df 00 00 00    	je     c001a617 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	68 b7 2a 02 c0       	push   0xc0022ab7
c001a540:	e8 00 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a545:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a54c:	b9 02 00 00 00       	mov    ecx,0x2
c001a551:	99                   	cdq    
c001a552:	f7 f9                	idiv   ecx
c001a554:	83 e8 32             	sub    eax,0x32
c001a557:	89 04 24             	mov    DWORD PTR [esp],eax
c001a55a:	e8 73 c2 fe ff       	call   c00067d2 <iso_readdir>
c001a55f:	83 c4 10             	add    esp,0x10
c001a562:	89 c6                	mov    esi,eax
c001a564:	85 c0                	test   eax,eax
c001a566:	75 37                	jne    c001a59f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a568:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a56d:	56                   	push   esi
c001a56e:	56                   	push   esi
c001a56f:	68 c2 2a 02 c0       	push   0xc0022ac2
c001a574:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a57a:	e8 27 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a57f:	83 c4 0c             	add    esp,0xc
c001a582:	68 10 01 00 00       	push   0x110
c001a587:	6a 00                	push   0x0
c001a589:	57                   	push   edi
c001a58a:	e8 61 5f fe ff       	call   c00004f0 <memset>
c001a58f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	b8 01 00 00 00       	mov    eax,0x1
c001a59d:	eb 7d                	jmp    c001a61c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a59f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a5a5:	8d 68 08             	lea    ebp,[eax+0x8]
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	55                   	push   ebp
c001a5ac:	e8 bf 5f fe ff       	call   c0000570 <strlen>
c001a5b1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a5b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a5c4:	75 0a                	jne    c001a5d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a5c6:	b8 02 00 00 00       	mov    eax,0x2
c001a5cb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a5ce:	74 05                	je     c001a5d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a5d0:	b8 01 00 00 00       	mov    eax,0x1
c001a5d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5d9:	50                   	push   eax
c001a5da:	50                   	push   eax
c001a5db:	55                   	push   ebp
c001a5dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5e0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a5e4:	50                   	push   eax
c001a5e5:	e8 56 60 fe ff       	call   c0000640 <strcpy>
c001a5ea:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a5f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5f3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a5f9:	5a                   	pop    edx
c001a5fa:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a5ff:	59                   	pop    ecx
c001a600:	68 d5 2a 02 c0       	push   0xc0022ad5
c001a605:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a60b:	e8 96 e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a610:	83 c4 10             	add    esp,0x10
c001a613:	31 c0                	xor    eax,eax
c001a615:	eb 05                	jmp    c001a61c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a617:	b8 04 00 00 00       	mov    eax,0x4
c001a61c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a622:	5b                   	pop    ebx
c001a623:	5e                   	pop    esi
c001a624:	5f                   	pop    edi
c001a625:	5d                   	pop    ebp
c001a626:	c3                   	ret    

c001a627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a627:	57                   	push   edi
c001a628:	56                   	push   esi
c001a629:	53                   	push   ebx
c001a62a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a62e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a632:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a636:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a63c:	0f be cb             	movsx  ecx,bl
c001a63f:	75 0b                	jne    c001a64c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a641:	0f be 05 00 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023900
c001a648:	39 c8                	cmp    eax,ecx
c001a64a:	74 47                	je     c001a693 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a64c:	83 ec 0c             	sub    esp,0xc
c001a64f:	31 d2                	xor    edx,edx
c001a651:	68 a0 98 02 c0       	push   0xc00298a0
c001a656:	6a 01                	push   0x1
c001a658:	52                   	push   edx
c001a659:	56                   	push   esi
c001a65a:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a661:	e8 0e 35 ff ff       	call   c000db74 <LogicalDisk::read(unsigned long long, int, void*)>
c001a666:	83 c4 20             	add    esp,0x20
c001a669:	85 c0                	test   eax,eax
c001a66b:	75 0e                	jne    c001a67b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a66d:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a673:	88 1d 00 39 02 c0    	mov    BYTE PTR ds:0xc0023900,bl
c001a679:	eb 18                	jmp    c001a693 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a67b:	50                   	push   eax
c001a67c:	68 00 08 00 00       	push   0x800
c001a681:	6a 00                	push   0x0
c001a683:	57                   	push   edi
c001a684:	e8 67 5e fe ff       	call   c00004f0 <memset>
c001a689:	83 c4 10             	add    esp,0x10
c001a68c:	b8 01 00 00 00       	mov    eax,0x1
c001a691:	eb 0e                	jmp    c001a6a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a693:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a698:	b9 00 08 00 00       	mov    ecx,0x800
c001a69d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a69f:	31 c0                	xor    eax,eax
c001a6a1:	5b                   	pop    ebx
c001a6a2:	5e                   	pop    esi
c001a6a3:	5f                   	pop    edi
c001a6a4:	c3                   	ret    
c001a6a5:	90                   	nop

c001a6a6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a6a6:	53                   	push   ebx
c001a6a7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a6ad:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a6b7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a6be:	8d 58 41             	lea    ebx,[eax+0x41]
c001a6c1:	0f be db             	movsx  ebx,bl
c001a6c4:	53                   	push   ebx
c001a6c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6c9:	50                   	push   eax
c001a6ca:	6a 10                	push   0x10
c001a6cc:	e8 56 ff ff ff       	call   c001a627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	31 d2                	xor    edx,edx
c001a6d6:	85 c0                	test   eax,eax
c001a6d8:	75 33                	jne    c001a70d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6da:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a6df:	75 2c                	jne    c001a70d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6e1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a6e6:	75 25                	jne    c001a70d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6e8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a6ed:	75 1e                	jne    c001a70d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6ef:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a6f4:	75 17                	jne    c001a70d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6f6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a6fb:	75 10                	jne    c001a70d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6fd:	83 ec 0c             	sub    esp,0xc
c001a700:	53                   	push   ebx
c001a701:	e8 40 c3 fe ff       	call   c0006a46 <init_percd>
c001a706:	83 c4 10             	add    esp,0x10
c001a709:	40                   	inc    eax
c001a70a:	0f 95 c2             	setne  dl
c001a70d:	88 d0                	mov    al,dl
c001a70f:	81 c4 08 08 00 00    	add    esp,0x808
c001a715:	5b                   	pop    ebx
c001a716:	c3                   	ret    
c001a717:	90                   	nop

c001a718 <ISO9660::ISO9660()>:
c001a718:	83 ec 0c             	sub    esp,0xc
c001a71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	50                   	push   eax
c001a723:	e8 18 0e ff ff       	call   c000b540 <Filesystem::Filesystem()>
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	ba f0 2a 02 c0       	mov    edx,0xc0022af0
c001a730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a734:	89 10                	mov    DWORD PTR [eax],edx
c001a736:	e8 1d c4 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a73b:	90                   	nop
c001a73c:	83 c4 0c             	add    esp,0xc
c001a73f:	c3                   	ret    

c001a740 <SoundCard::beginPlayback()>:
c001a740:	c7 44 24 04 54 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b54
c001a748:	e9 74 6c ff ff       	jmp    c00113c1 <KePanic(char const*)>
c001a74d:	90                   	nop

c001a74e <SoundCard::stopPlayback()>:
c001a74e:	c7 44 24 04 54 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b54
c001a756:	e9 66 6c ff ff       	jmp    c00113c1 <KePanic(char const*)>
c001a75b:	90                   	nop

c001a75c <SoundCard::SoundCard(char const*)>:
c001a75c:	83 ec 1c             	sub    esp,0x1c
c001a75f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a763:	83 ec 08             	sub    esp,0x8
c001a766:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a76a:	50                   	push   eax
c001a76b:	e8 ba 21 ff ff       	call   c000c92a <Device::Device(char const*)>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001a778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a77c:	89 10                	mov    DWORD PTR [eax],edx
c001a77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a782:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a78d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a79b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a7a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7a9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a7b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7b7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a7c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7c9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a7ce:	7f 1a                	jg     c001a7ea <SoundCard::SoundCard(char const*)+0x8e>
c001a7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7d8:	83 c2 54             	add    edx,0x54
c001a7db:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a7e3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a7e8:	eb df                	jmp    c001a7c9 <SoundCard::SoundCard(char const*)+0x6d>
c001a7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ee:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a7f5:	90                   	nop
c001a7f6:	83 c4 1c             	add    esp,0x1c
c001a7f9:	c3                   	ret    

c001a7fa <SoundCard::~SoundCard()>:
c001a7fa:	83 ec 0c             	sub    esp,0xc
c001a7fd:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001a802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a806:	89 10                	mov    DWORD PTR [eax],edx
c001a808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80c:	83 ec 0c             	sub    esp,0xc
c001a80f:	50                   	push   eax
c001a810:	e8 7f 1e ff ff       	call   c000c694 <Device::~Device()>
c001a815:	83 c4 10             	add    esp,0x10
c001a818:	90                   	nop
c001a819:	83 c4 0c             	add    esp,0xc
c001a81c:	c3                   	ret    
c001a81d:	90                   	nop

c001a81e <SoundCard::~SoundCard()>:
c001a81e:	83 ec 0c             	sub    esp,0xc
c001a821:	83 ec 0c             	sub    esp,0xc
c001a824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a828:	e8 cd ff ff ff       	call   c001a7fa <SoundCard::~SoundCard()>
c001a82d:	83 c4 10             	add    esp,0x10
c001a830:	83 ec 08             	sub    esp,0x8
c001a833:	68 e8 01 00 00       	push   0x1e8
c001a838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a83c:	e8 d7 ff fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	83 c4 0c             	add    esp,0xc
c001a847:	c3                   	ret    

c001a848 <SoundCard::configureRates(int, int, int)>:
c001a848:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a84c:	31 c0                	xor    eax,eax
c001a84e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a855:	75 20                	jne    c001a877 <SoundCard::configureRates(int, int, int)+0x2f>
c001a857:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a85b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a865:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a875:	b0 01                	mov    al,0x1
c001a877:	c3                   	ret    

c001a878 <SoundCard::getSamples16(int, short*)>:
c001a878:	55                   	push   ebp
c001a879:	57                   	push   edi
c001a87a:	31 ff                	xor    edi,edi
c001a87c:	56                   	push   esi
c001a87d:	53                   	push   ebx
c001a87e:	31 db                	xor    ebx,ebx
c001a880:	83 ec 10             	sub    esp,0x10
c001a883:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a887:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a88b:	8d 04 36             	lea    eax,[esi+esi*1]
c001a88e:	50                   	push   eax
c001a88f:	6a 00                	push   0x0
c001a891:	55                   	push   ebp
c001a892:	e8 59 5c fe ff       	call   c00004f0 <memset>
c001a897:	83 c4 10             	add    esp,0x10
c001a89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a89e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a8a5:	85 c0                	test   eax,eax
c001a8a7:	74 1b                	je     c001a8c4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a8a9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a8ad:	75 15                	jne    c001a8c4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a8af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a8b3:	55                   	push   ebp
c001a8b4:	56                   	push   esi
c001a8b5:	50                   	push   eax
c001a8b6:	e8 f1 02 00 00       	call   c001abac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	39 c7                	cmp    edi,eax
c001a8c0:	7d 02                	jge    c001a8c4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a8c2:	89 c7                	mov    edi,eax
c001a8c4:	43                   	inc    ebx
c001a8c5:	83 fb 20             	cmp    ebx,0x20
c001a8c8:	75 d0                	jne    c001a89a <SoundCard::getSamples16(int, short*)+0x22>
c001a8ca:	83 c4 0c             	add    esp,0xc
c001a8cd:	89 f8                	mov    eax,edi
c001a8cf:	5b                   	pop    ebx
c001a8d0:	5e                   	pop    esi
c001a8d1:	5f                   	pop    edi
c001a8d2:	5d                   	pop    ebp
c001a8d3:	c3                   	ret    

c001a8d4 <SoundCard::getSamples32(int, int*)>:
c001a8d4:	55                   	push   ebp
c001a8d5:	57                   	push   edi
c001a8d6:	31 ff                	xor    edi,edi
c001a8d8:	56                   	push   esi
c001a8d9:	31 f6                	xor    esi,esi
c001a8db:	53                   	push   ebx
c001a8dc:	83 ec 10             	sub    esp,0x10
c001a8df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8e3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a8e7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a8eb:	c1 e0 02             	shl    eax,0x2
c001a8ee:	50                   	push   eax
c001a8ef:	6a 00                	push   0x0
c001a8f1:	55                   	push   ebp
c001a8f2:	e8 f9 5b fe ff       	call   c00004f0 <memset>
c001a8f7:	83 c4 10             	add    esp,0x10
c001a8fa:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a901:	85 c0                	test   eax,eax
c001a903:	74 1b                	je     c001a920 <SoundCard::getSamples32(int, int*)+0x4c>
c001a905:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a909:	75 15                	jne    c001a920 <SoundCard::getSamples32(int, int*)+0x4c>
c001a90b:	53                   	push   ebx
c001a90c:	55                   	push   ebp
c001a90d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a911:	50                   	push   eax
c001a912:	e8 61 03 00 00       	call   c001ac78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a917:	83 c4 10             	add    esp,0x10
c001a91a:	39 c6                	cmp    esi,eax
c001a91c:	7d 02                	jge    c001a920 <SoundCard::getSamples32(int, int*)+0x4c>
c001a91e:	89 c6                	mov    esi,eax
c001a920:	47                   	inc    edi
c001a921:	83 ff 20             	cmp    edi,0x20
c001a924:	75 d4                	jne    c001a8fa <SoundCard::getSamples32(int, int*)+0x26>
c001a926:	85 f6                	test   esi,esi
c001a928:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a92f:	75 0f                	jne    c001a940 <SoundCard::getSamples32(int, int*)+0x6c>
c001a931:	85 c0                	test   eax,eax
c001a933:	74 1b                	je     c001a950 <SoundCard::getSamples32(int, int*)+0x7c>
c001a935:	83 ec 0c             	sub    esp,0xc
c001a938:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a93a:	53                   	push   ebx
c001a93b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a93e:	eb 0d                	jmp    c001a94d <SoundCard::getSamples32(int, int*)+0x79>
c001a940:	85 c0                	test   eax,eax
c001a942:	75 0c                	jne    c001a950 <SoundCard::getSamples32(int, int*)+0x7c>
c001a944:	83 ec 0c             	sub    esp,0xc
c001a947:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a949:	53                   	push   ebx
c001a94a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a94d:	83 c4 10             	add    esp,0x10
c001a950:	83 c4 0c             	add    esp,0xc
c001a953:	89 f0                	mov    eax,esi
c001a955:	5b                   	pop    ebx
c001a956:	5e                   	pop    esi
c001a957:	5f                   	pop    edi
c001a958:	5d                   	pop    ebp
c001a959:	c3                   	ret    

c001a95a <SoundCard::addChannel(SoundPort*)>:
c001a95a:	83 ec 0c             	sub    esp,0xc
c001a95d:	31 c0                	xor    eax,eax
c001a95f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a963:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a96b:	74 1b                	je     c001a988 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a96d:	40                   	inc    eax
c001a96e:	83 f8 20             	cmp    eax,0x20
c001a971:	75 f0                	jne    c001a963 <SoundCard::addChannel(SoundPort*)+0x9>
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	68 79 2b 02 c0       	push   0xc0022b79
c001a97b:	e8 41 6a ff ff       	call   c00113c1 <KePanic(char const*)>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	83 c8 ff             	or     eax,0xffffffff
c001a986:	eb 0b                	jmp    c001a993 <SoundCard::addChannel(SoundPort*)+0x39>
c001a988:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a98c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a993:	83 c4 0c             	add    esp,0xc
c001a996:	c3                   	ret    
c001a997:	90                   	nop

c001a998 <SoundCard::removeChannel(int)>:
c001a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9a0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a9ab:	c3                   	ret    

c001a9ac <SoundPort::SoundPort(int, int, int, int)>:
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9be:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9ca:	89 10                	mov    DWORD PTR [eax],edx
c001a9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a9e2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a9e7:	75 13                	jne    c001a9fc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9ef:	05 a0 0f 00 00       	add    eax,0xfa0
c001a9f4:	01 c0                	add    eax,eax
c001a9f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9fa:	66 90                	xchg   ax,ax
c001a9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa04:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aa07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa19:	c1 e0 02             	shl    eax,0x2
c001aa1c:	83 ec 0c             	sub    esp,0xc
c001aa1f:	50                   	push   eax
c001aa20:	e8 91 d0 fe ff       	call   c0007ab6 <malloc>
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	89 c2                	mov    edx,eax
c001aa2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aa31:	90                   	nop
c001aa32:	83 c4 0c             	add    esp,0xc
c001aa35:	c3                   	ret    
c001aa36:	66 90                	xchg   ax,ax

c001aa38 <SoundPort::~SoundPort()>:
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa42:	85 c0                	test   eax,eax
c001aa44:	74 1e                	je     c001aa64 <SoundPort::~SoundPort()+0x2c>
c001aa46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa4d:	83 ec 0c             	sub    esp,0xc
c001aa50:	50                   	push   eax
c001aa51:	e8 70 d0 fe ff       	call   c0007ac6 <free>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa5d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa64:	90                   	nop
c001aa65:	83 c4 0c             	add    esp,0xc
c001aa68:	c3                   	ret    
c001aa69:	90                   	nop
c001aa6a:	66 90                	xchg   ax,ax

c001aa6c <SoundPort::unpause()>:
c001aa6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa70:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aa74:	c3                   	ret    
c001aa75:	90                   	nop
c001aa76:	66 90                	xchg   ax,ax

c001aa78 <SoundPort::pause()>:
c001aa78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa80:	c3                   	ret    
c001aa81:	90                   	nop
c001aa82:	66 90                	xchg   ax,ax

c001aa84 <SoundPort::getBufferUsed()>:
c001aa84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa8b:	c3                   	ret    

c001aa8c <SoundPort::getBufferSize()>:
c001aa8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa93:	c3                   	ret    

c001aa94 <SoundPort::buffer16(short*, int)>:
c001aa94:	55                   	push   ebp
c001aa95:	57                   	push   edi
c001aa96:	56                   	push   esi
c001aa97:	53                   	push   ebx
c001aa98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa9c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aaa0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aaa3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aaa6:	74 68                	je     c001ab10 <SoundPort::buffer16(short*, int)+0x7c>
c001aaa8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aaac:	85 c9                	test   ecx,ecx
c001aaae:	7e 60                	jle    c001ab10 <SoundPort::buffer16(short*, int)+0x7c>
c001aab0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aab4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aab7:	c1 e1 0f             	shl    ecx,0xf
c001aaba:	8d 70 01             	lea    esi,[eax+0x1]
c001aabd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aac0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aac3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aac6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aac9:	74 4d                	je     c001ab18 <SoundPort::buffer16(short*, int)+0x84>
c001aacb:	31 f6                	xor    esi,esi
c001aacd:	eb 21                	jmp    c001aaf0 <SoundPort::buffer16(short*, int)+0x5c>
c001aacf:	90                   	nop
c001aad0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aad5:	8d 79 01             	lea    edi,[ecx+0x1]
c001aad8:	c1 e3 0f             	shl    ebx,0xf
c001aadb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aae1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aae4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aae7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaea:	74 1c                	je     c001ab08 <SoundPort::buffer16(short*, int)+0x74>
c001aaec:	89 c6                	mov    esi,eax
c001aaee:	66 90                	xchg   ax,ax
c001aaf0:	8d 46 01             	lea    eax,[esi+0x1]
c001aaf3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aaf7:	75 d7                	jne    c001aad0 <SoundPort::buffer16(short*, int)+0x3c>
c001aaf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aafd:	8d 76 00             	lea    esi,[esi+0x0]
c001ab00:	5b                   	pop    ebx
c001ab01:	5e                   	pop    esi
c001ab02:	5f                   	pop    edi
c001ab03:	5d                   	pop    ebp
c001ab04:	c3                   	ret    
c001ab05:	8d 76 00             	lea    esi,[esi+0x0]
c001ab08:	5b                   	pop    ebx
c001ab09:	8d 46 02             	lea    eax,[esi+0x2]
c001ab0c:	5e                   	pop    esi
c001ab0d:	5f                   	pop    edi
c001ab0e:	5d                   	pop    ebp
c001ab0f:	c3                   	ret    
c001ab10:	5b                   	pop    ebx
c001ab11:	31 c0                	xor    eax,eax
c001ab13:	5e                   	pop    esi
c001ab14:	5f                   	pop    edi
c001ab15:	5d                   	pop    ebp
c001ab16:	c3                   	ret    
c001ab17:	90                   	nop
c001ab18:	b8 01 00 00 00       	mov    eax,0x1
c001ab1d:	eb e1                	jmp    c001ab00 <SoundPort::buffer16(short*, int)+0x6c>
c001ab1f:	90                   	nop

c001ab20 <SoundPort::buffer32(int*, int)>:
c001ab20:	55                   	push   ebp
c001ab21:	57                   	push   edi
c001ab22:	56                   	push   esi
c001ab23:	53                   	push   ebx
c001ab24:	83 ec 04             	sub    esp,0x4
c001ab27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab2f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab36:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab39:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab3c:	74 5a                	je     c001ab98 <SoundPort::buffer32(int*, int)+0x78>
c001ab3e:	85 c0                	test   eax,eax
c001ab40:	7e 56                	jle    c001ab98 <SoundPort::buffer32(int*, int)+0x78>
c001ab42:	8d 71 01             	lea    esi,[ecx+0x1]
c001ab45:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab48:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab4b:	8b 37                	mov    esi,DWORD PTR [edi]
c001ab4d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ab50:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab53:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab56:	74 4c                	je     c001aba4 <SoundPort::buffer32(int*, int)+0x84>
c001ab58:	31 f6                	xor    esi,esi
c001ab5a:	eb 1c                	jmp    c001ab78 <SoundPort::buffer32(int*, int)+0x58>
c001ab5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ab5f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ab62:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ab65:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ab68:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ab6c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab6f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab72:	74 18                	je     c001ab8c <SoundPort::buffer32(int*, int)+0x6c>
c001ab74:	89 de                	mov    esi,ebx
c001ab76:	66 90                	xchg   ax,ax
c001ab78:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ab7b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ab7e:	75 dc                	jne    c001ab5c <SoundPort::buffer32(int*, int)+0x3c>
c001ab80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab83:	90                   	nop
c001ab84:	83 c4 04             	add    esp,0x4
c001ab87:	5b                   	pop    ebx
c001ab88:	5e                   	pop    esi
c001ab89:	5f                   	pop    edi
c001ab8a:	5d                   	pop    ebp
c001ab8b:	c3                   	ret    
c001ab8c:	83 c4 04             	add    esp,0x4
c001ab8f:	8d 46 02             	lea    eax,[esi+0x2]
c001ab92:	5b                   	pop    ebx
c001ab93:	5e                   	pop    esi
c001ab94:	5f                   	pop    edi
c001ab95:	5d                   	pop    ebp
c001ab96:	c3                   	ret    
c001ab97:	90                   	nop
c001ab98:	83 c4 04             	add    esp,0x4
c001ab9b:	31 c0                	xor    eax,eax
c001ab9d:	5b                   	pop    ebx
c001ab9e:	5e                   	pop    esi
c001ab9f:	5f                   	pop    edi
c001aba0:	5d                   	pop    ebp
c001aba1:	c3                   	ret    
c001aba2:	66 90                	xchg   ax,ax
c001aba4:	b8 01 00 00 00       	mov    eax,0x1
c001aba9:	eb d9                	jmp    c001ab84 <SoundPort::buffer32(int*, int)+0x64>
c001abab:	90                   	nop

c001abac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001abac:	57                   	push   edi
c001abad:	56                   	push   esi
c001abae:	53                   	push   ebx
c001abaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abb3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001abb7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001abbd:	39 03                	cmp    DWORD PTR [ebx],eax
c001abbf:	74 13                	je     c001abd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001abc1:	83 ec 0c             	sub    esp,0xc
c001abc4:	68 cc 2b 02 c0       	push   0xc0022bcc
c001abc9:	e8 f3 67 ff ff       	call   c00113c1 <KePanic(char const*)>
c001abce:	83 c4 10             	add    esp,0x10
c001abd1:	8d 76 00             	lea    esi,[esi+0x0]
c001abd4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001abda:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001abdd:	74 11                	je     c001abf0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001abdf:	83 ec 0c             	sub    esp,0xc
c001abe2:	68 0b 2c 02 c0       	push   0xc0022c0b
c001abe7:	e8 d5 67 ff ff       	call   c00113c1 <KePanic(char const*)>
c001abec:	83 c4 10             	add    esp,0x10
c001abef:	90                   	nop
c001abf0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001abf6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001abf9:	74 11                	je     c001ac0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001abfb:	83 ec 0c             	sub    esp,0xc
c001abfe:	68 0b 2c 02 c0       	push   0xc0022c0b
c001ac03:	e8 b9 67 ff ff       	call   c00113c1 <KePanic(char const*)>
c001ac08:	83 c4 10             	add    esp,0x10
c001ac0b:	90                   	nop
c001ac0c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ac0f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ac13:	7e 07                	jle    c001ac1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ac15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac19:	8d 76 00             	lea    esi,[esi+0x0]
c001ac1c:	85 f6                	test   esi,esi
c001ac1e:	7e 2c                	jle    c001ac4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001ac20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac24:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ac27:	31 c9                	xor    ecx,ecx
c001ac29:	01 d7                	add    edi,edx
c001ac2b:	90                   	nop
c001ac2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ac2f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ac32:	85 c0                	test   eax,eax
c001ac34:	79 06                	jns    c001ac3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ac36:	05 ff 7f 00 00       	add    eax,0x7fff
c001ac3b:	90                   	nop
c001ac3c:	c1 f8 0f             	sar    eax,0xf
c001ac3f:	83 c1 04             	add    ecx,0x4
c001ac42:	66 01 02             	add    WORD PTR [edx],ax
c001ac45:	83 c2 02             	add    edx,0x2
c001ac48:	39 d7                	cmp    edi,edx
c001ac4a:	75 e0                	jne    c001ac2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ac4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac4f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac52:	83 ec 04             	sub    esp,0x4
c001ac55:	29 f0                	sub    eax,esi
c001ac57:	c1 e0 02             	shl    eax,0x2
c001ac5a:	50                   	push   eax
c001ac5b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ac5e:	50                   	push   eax
c001ac5f:	52                   	push   edx
c001ac60:	e8 6b 57 fe ff       	call   c00003d0 <memmove>
c001ac65:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	29 f0                	sub    eax,esi
c001ac6d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac70:	89 f0                	mov    eax,esi
c001ac72:	5b                   	pop    ebx
c001ac73:	5e                   	pop    esi
c001ac74:	5f                   	pop    edi
c001ac75:	c3                   	ret    
c001ac76:	66 90                	xchg   ax,ax

c001ac78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ac78:	57                   	push   edi
c001ac79:	56                   	push   esi
c001ac7a:	53                   	push   ebx
c001ac7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ac83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac87:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ac8d:	39 06                	cmp    DWORD PTR [esi],eax
c001ac8f:	74 13                	je     c001aca4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ac91:	83 ec 0c             	sub    esp,0xc
c001ac94:	68 ec 2b 02 c0       	push   0xc0022bec
c001ac99:	e8 23 67 ff ff       	call   c00113c1 <KePanic(char const*)>
c001ac9e:	83 c4 10             	add    esp,0x10
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001acaa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001acad:	74 11                	je     c001acc0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001acaf:	83 ec 0c             	sub    esp,0xc
c001acb2:	68 27 2c 02 c0       	push   0xc0022c27
c001acb7:	e8 05 67 ff ff       	call   c00113c1 <KePanic(char const*)>
c001acbc:	83 c4 10             	add    esp,0x10
c001acbf:	90                   	nop
c001acc0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001acc6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001acc9:	74 11                	je     c001acdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001accb:	83 ec 0c             	sub    esp,0xc
c001acce:	68 27 2c 02 c0       	push   0xc0022c27
c001acd3:	e8 e9 66 ff ff       	call   c00113c1 <KePanic(char const*)>
c001acd8:	83 c4 10             	add    esp,0x10
c001acdb:	90                   	nop
c001acdc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001acdf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ace3:	7e 07                	jle    c001acec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ace5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ace9:	8d 76 00             	lea    esi,[esi+0x0]
c001acec:	85 ff                	test   edi,edi
c001acee:	7e 1c                	jle    c001ad0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001acf0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001acf7:	31 c0                	xor    eax,eax
c001acf9:	8d 76 00             	lea    esi,[esi+0x0]
c001acfc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001acff:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ad02:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ad05:	83 c0 04             	add    eax,0x4
c001ad08:	39 c1                	cmp    ecx,eax
c001ad0a:	75 f0                	jne    c001acfc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ad0c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ad0f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ad12:	83 ec 04             	sub    esp,0x4
c001ad15:	29 f8                	sub    eax,edi
c001ad17:	c1 e0 02             	shl    eax,0x2
c001ad1a:	50                   	push   eax
c001ad1b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ad1e:	50                   	push   eax
c001ad1f:	52                   	push   edx
c001ad20:	e8 ab 56 fe ff       	call   c00003d0 <memmove>
c001ad25:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ad28:	83 c4 10             	add    esp,0x10
c001ad2b:	29 f8                	sub    eax,edi
c001ad2d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ad30:	89 f8                	mov    eax,edi
c001ad32:	5b                   	pop    ebx
c001ad33:	5e                   	pop    esi
c001ad34:	5f                   	pop    edi
c001ad35:	c3                   	ret    

c001ad36 <PCI::open(int, int, void*)>:
c001ad36:	83 ec 18             	sub    esp,0x18
c001ad39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad47:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad49:	50                   	push   eax
c001ad4a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ad4d:	31 c0                	xor    eax,eax
c001ad4f:	83 c4 1c             	add    esp,0x1c
c001ad52:	c3                   	ret    
c001ad53:	90                   	nop

c001ad54 <PCI::close(int, int, void*)>:
c001ad54:	31 c0                	xor    eax,eax
c001ad56:	c3                   	ret    
c001ad57:	90                   	nop

c001ad58 <PCI::PCI()>:
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5f:	83 ec 08             	sub    esp,0x8
c001ad62:	68 43 2c 02 c0       	push   0xc0022c43
c001ad67:	50                   	push   eax
c001ad68:	e8 87 13 ff ff       	call   c000c0f4 <Bus::Bus(char const*)>
c001ad6d:	83 c4 10             	add    esp,0x10
c001ad70:	ba ec 2c 02 c0       	mov    edx,0xc0022cec
c001ad75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad79:	89 10                	mov    DWORD PTR [eax],edx
c001ad7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ad89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8d:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad96:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad9c:	0f b6 d0             	movzx  edx,al
c001ad9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001adaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adb4:	0f b6 d0             	movzx  edx,al
c001adb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001adc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adca:	8d 50 01             	lea    edx,[eax+0x1]
c001adcd:	88 d1                	mov    cl,dl
c001adcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001add3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001add9:	0f b6 d0             	movzx  edx,al
c001addc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ade4:	83 c9 c0             	or     ecx,0xffffffc0
c001ade7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001adeb:	90                   	nop
c001adec:	83 c4 0c             	add    esp,0xc
c001adef:	c3                   	ret    

c001adf0 <PCI::readBAR8(unsigned int, int)>:
c001adf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adf8:	f6 c2 01             	test   dl,0x1
c001adfb:	74 07                	je     c001ae04 <PCI::readBAR8(unsigned int, int)+0x14>
c001adfd:	83 e2 fc             	and    edx,0xfffffffc
c001ae00:	01 c2                	add    edx,eax
c001ae02:	ec                   	in     al,dx
c001ae03:	c3                   	ret    
c001ae04:	83 e2 f0             	and    edx,0xfffffff0
c001ae07:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ae0a:	c3                   	ret    
c001ae0b:	90                   	nop

c001ae0c <PCI::readBAR16(unsigned int, int)>:
c001ae0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae14:	f6 c2 01             	test   dl,0x1
c001ae17:	74 08                	je     c001ae21 <PCI::readBAR16(unsigned int, int)+0x15>
c001ae19:	83 e2 fc             	and    edx,0xfffffffc
c001ae1c:	01 c2                	add    edx,eax
c001ae1e:	66 ed                	in     ax,dx
c001ae20:	c3                   	ret    
c001ae21:	83 e2 f0             	and    edx,0xfffffff0
c001ae24:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ae28:	c3                   	ret    
c001ae29:	90                   	nop

c001ae2a <PCI::readBAR32(unsigned int, int)>:
c001ae2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae32:	f6 c2 01             	test   dl,0x1
c001ae35:	74 07                	je     c001ae3e <PCI::readBAR32(unsigned int, int)+0x14>
c001ae37:	83 e2 fc             	and    edx,0xfffffffc
c001ae3a:	01 c2                	add    edx,eax
c001ae3c:	ed                   	in     eax,dx
c001ae3d:	c3                   	ret    
c001ae3e:	83 e2 f0             	and    edx,0xfffffff0
c001ae41:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ae46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae52:	f6 c2 01             	test   dl,0x1
c001ae55:	74 07                	je     c001ae5e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ae57:	83 e2 fc             	and    edx,0xfffffffc
c001ae5a:	01 ca                	add    edx,ecx
c001ae5c:	ee                   	out    dx,al
c001ae5d:	c3                   	ret    
c001ae5e:	83 e2 f0             	and    edx,0xfffffff0
c001ae61:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ae64:	c3                   	ret    
c001ae65:	90                   	nop

c001ae66 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ae66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae72:	f6 c2 01             	test   dl,0x1
c001ae75:	74 08                	je     c001ae7f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ae77:	83 e2 fc             	and    edx,0xfffffffc
c001ae7a:	01 ca                	add    edx,ecx
c001ae7c:	66 ef                	out    dx,ax
c001ae7e:	c3                   	ret    
c001ae7f:	83 e2 f0             	and    edx,0xfffffff0
c001ae82:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ae86:	c3                   	ret    
c001ae87:	90                   	nop

c001ae88 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ae88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae94:	f6 c2 01             	test   dl,0x1
c001ae97:	74 07                	je     c001aea0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae99:	83 e2 fc             	and    edx,0xfffffffc
c001ae9c:	01 ca                	add    edx,ecx
c001ae9e:	ef                   	out    dx,eax
c001ae9f:	c3                   	ret    
c001aea0:	83 e2 f0             	and    edx,0xfffffff0
c001aea3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001aea6:	c3                   	ret    
c001aea7:	90                   	nop

c001aea8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aea8:	55                   	push   ebp
c001aea9:	57                   	push   edi
c001aeaa:	56                   	push   esi
c001aeab:	53                   	push   ebx
c001aeac:	83 ec 0c             	sub    esp,0xc
c001aeaf:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001aeb4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001aeb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001aebc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aec0:	83 fe 07             	cmp    esi,0x7
c001aec3:	76 10                	jbe    c001aed5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001aec5:	83 ec 0c             	sub    esp,0xc
c001aec8:	68 4b 2c 02 c0       	push   0xc0022c4b
c001aecd:	e8 ef 64 ff ff       	call   c00113c1 <KePanic(char const*)>
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	0f b6 db             	movzx  ebx,bl
c001aed8:	83 fb 0f             	cmp    ebx,0xf
c001aedb:	76 10                	jbe    c001aeed <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001aedd:	83 ec 0c             	sub    esp,0xc
c001aee0:	68 7b 2c 02 c0       	push   0xc0022c7b
c001aee5:	e8 d7 64 ff ff       	call   c00113c1 <KePanic(char const*)>
c001aeea:	83 c4 10             	add    esp,0x10
c001aeed:	8d 04 36             	lea    eax,[esi+esi*1]
c001aef0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aef5:	83 c8 f0             	or     eax,0xfffffff0
c001aef8:	ee                   	out    dx,al
c001aef9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001aefe:	89 e8                	mov    eax,ebp
c001af00:	ee                   	out    dx,al
c001af01:	83 c4 0c             	add    esp,0xc
c001af04:	89 d8                	mov    eax,ebx
c001af06:	89 f9                	mov    ecx,edi
c001af08:	c1 e0 08             	shl    eax,0x8
c001af0b:	0f b6 d9             	movzx  ebx,cl
c001af0e:	83 e3 fc             	and    ebx,0xfffffffc
c001af11:	09 d8                	or     eax,ebx
c001af13:	5b                   	pop    ebx
c001af14:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001af19:	5e                   	pop    esi
c001af1a:	5f                   	pop    edi
c001af1b:	5d                   	pop    ebp
c001af1c:	c3                   	ret    
c001af1d:	90                   	nop

c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af1e:	57                   	push   edi
c001af1f:	56                   	push   esi
c001af20:	53                   	push   ebx
c001af21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af29:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001af2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af3b:	83 ff 01             	cmp    edi,0x1
c001af3e:	75 3f                	jne    c001af7f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001af40:	89 de                	mov    esi,ebx
c001af42:	0f b6 c0             	movzx  eax,al
c001af45:	81 e6 fc 00 00 00    	and    esi,0xfc
c001af4b:	c1 e0 10             	shl    eax,0x10
c001af4e:	0f b6 c9             	movzx  ecx,cl
c001af51:	09 f0                	or     eax,esi
c001af53:	c1 e1 08             	shl    ecx,0x8
c001af56:	0f b6 d2             	movzx  edx,dl
c001af59:	09 c8                	or     eax,ecx
c001af5b:	c1 e2 0b             	shl    edx,0xb
c001af5e:	09 d0                	or     eax,edx
c001af60:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af65:	0d 00 00 00 80       	or     eax,0x80000000
c001af6a:	ef                   	out    dx,eax
c001af6b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af70:	ed                   	in     eax,dx
c001af71:	83 e3 02             	and    ebx,0x2
c001af74:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af7b:	d3 e8                	shr    eax,cl
c001af7d:	eb 44                	jmp    c001afc3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af7f:	83 ff 02             	cmp    edi,0x2
c001af82:	75 2d                	jne    c001afb1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001af84:	83 ec 0c             	sub    esp,0xc
c001af87:	0f b6 c9             	movzx  ecx,cl
c001af8a:	0f b6 d2             	movzx  edx,dl
c001af8d:	0f b6 fb             	movzx  edi,bl
c001af90:	0f b6 c0             	movzx  eax,al
c001af93:	57                   	push   edi
c001af94:	51                   	push   ecx
c001af95:	52                   	push   edx
c001af96:	50                   	push   eax
c001af97:	56                   	push   esi
c001af98:	e8 0b ff ff ff       	call   c001aea8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af9d:	89 c2                	mov    edx,eax
c001af9f:	ed                   	in     eax,dx
c001afa0:	83 e3 02             	and    ebx,0x2
c001afa3:	83 c4 20             	add    esp,0x20
c001afa6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001afad:	d3 e8                	shr    eax,cl
c001afaf:	eb 12                	jmp    c001afc3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001afb1:	83 ec 0c             	sub    esp,0xc
c001afb4:	68 ab 2c 02 c0       	push   0xc0022cab
c001afb9:	e8 03 64 ff ff       	call   c00113c1 <KePanic(char const*)>
c001afbe:	83 c4 10             	add    esp,0x10
c001afc1:	31 c0                	xor    eax,eax
c001afc3:	5b                   	pop    ebx
c001afc4:	5e                   	pop    esi
c001afc5:	5f                   	pop    edi
c001afc6:	c3                   	ret    
c001afc7:	90                   	nop

c001afc8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001afc8:	83 ec 18             	sub    esp,0x18
c001afcb:	6a 00                	push   0x0
c001afcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afd2:	50                   	push   eax
c001afd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afd8:	50                   	push   eax
c001afd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afde:	50                   	push   eax
c001afdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afe3:	e8 36 ff ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afe8:	83 c4 2c             	add    esp,0x2c
c001afeb:	c3                   	ret    

c001afec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001afec:	83 ec 18             	sub    esp,0x18
c001afef:	6a 0e                	push   0xe
c001aff1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aff6:	50                   	push   eax
c001aff7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001affc:	50                   	push   eax
c001affd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b002:	50                   	push   eax
c001b003:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b007:	e8 12 ff ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b00c:	83 c4 2c             	add    esp,0x2c
c001b00f:	0f b6 c0             	movzx  eax,al
c001b012:	c3                   	ret    
c001b013:	90                   	nop

c001b014 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b014:	55                   	push   ebp
c001b015:	57                   	push   edi
c001b016:	56                   	push   esi
c001b017:	53                   	push   ebx
c001b018:	83 ec 18             	sub    esp,0x18
c001b01b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b020:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b025:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b02a:	6a 0a                	push   0xa
c001b02c:	56                   	push   esi
c001b02d:	55                   	push   ebp
c001b02e:	57                   	push   edi
c001b02f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b033:	e8 e6 fe ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b038:	83 c4 14             	add    esp,0x14
c001b03b:	89 c3                	mov    ebx,eax
c001b03d:	6a 0a                	push   0xa
c001b03f:	0f b6 db             	movzx  ebx,bl
c001b042:	56                   	push   esi
c001b043:	55                   	push   ebp
c001b044:	57                   	push   edi
c001b045:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b049:	e8 d0 fe ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b04e:	83 c4 2c             	add    esp,0x2c
c001b051:	25 00 ff 00 00       	and    eax,0xff00
c001b056:	09 d8                	or     eax,ebx
c001b058:	5b                   	pop    ebx
c001b059:	5e                   	pop    esi
c001b05a:	5f                   	pop    edi
c001b05b:	5d                   	pop    ebp
c001b05c:	c3                   	ret    
c001b05d:	90                   	nop

c001b05e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b05e:	83 ec 18             	sub    esp,0x18
c001b061:	6a 08                	push   0x8
c001b063:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b068:	50                   	push   eax
c001b069:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b06e:	50                   	push   eax
c001b06f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b074:	50                   	push   eax
c001b075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b079:	e8 a0 fe ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b07e:	83 c4 2c             	add    esp,0x2c
c001b081:	0f b6 c4             	movzx  eax,ah
c001b084:	c3                   	ret    
c001b085:	90                   	nop

c001b086 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b086:	83 ec 18             	sub    esp,0x18
c001b089:	6a 08                	push   0x8
c001b08b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b090:	50                   	push   eax
c001b091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b096:	50                   	push   eax
c001b097:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b09c:	50                   	push   eax
c001b09d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a1:	e8 78 fe ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a6:	83 c4 2c             	add    esp,0x2c
c001b0a9:	c3                   	ret    

c001b0aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b0aa:	83 ec 18             	sub    esp,0x18
c001b0ad:	6a 3c                	push   0x3c
c001b0af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0b4:	50                   	push   eax
c001b0b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0ba:	50                   	push   eax
c001b0bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0c0:	50                   	push   eax
c001b0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c5:	e8 54 fe ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0ca:	83 c4 2c             	add    esp,0x2c
c001b0cd:	c3                   	ret    

c001b0ce <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b0ce:	83 ec 18             	sub    esp,0x18
c001b0d1:	6a 18                	push   0x18
c001b0d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0d8:	50                   	push   eax
c001b0d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0de:	50                   	push   eax
c001b0df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0e4:	50                   	push   eax
c001b0e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0e9:	e8 30 fe ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0ee:	83 c4 2c             	add    esp,0x2c
c001b0f1:	0f b6 c4             	movzx  eax,ah
c001b0f4:	c3                   	ret    
c001b0f5:	90                   	nop

c001b0f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0f6:	55                   	push   ebp
c001b0f7:	57                   	push   edi
c001b0f8:	56                   	push   esi
c001b0f9:	53                   	push   ebx
c001b0fa:	83 ec 28             	sub    esp,0x28
c001b0fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b101:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b106:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b10b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b110:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b117:	8d 43 12             	lea    eax,[ebx+0x12]
c001b11a:	83 c3 10             	add    ebx,0x10
c001b11d:	0f b6 c0             	movzx  eax,al
c001b120:	0f b6 db             	movzx  ebx,bl
c001b123:	50                   	push   eax
c001b124:	51                   	push   ecx
c001b125:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b129:	57                   	push   edi
c001b12a:	55                   	push   ebp
c001b12b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b12f:	e8 ea fd ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b134:	83 c4 14             	add    esp,0x14
c001b137:	89 c6                	mov    esi,eax
c001b139:	53                   	push   ebx
c001b13a:	c1 e6 10             	shl    esi,0x10
c001b13d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b141:	51                   	push   ecx
c001b142:	57                   	push   edi
c001b143:	55                   	push   ebp
c001b144:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b148:	e8 d1 fd ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b14d:	83 c4 3c             	add    esp,0x3c
c001b150:	0f b7 c0             	movzx  eax,ax
c001b153:	5b                   	pop    ebx
c001b154:	09 f0                	or     eax,esi
c001b156:	5e                   	pop    esi
c001b157:	5f                   	pop    edi
c001b158:	5d                   	pop    ebp
c001b159:	c3                   	ret    

c001b15a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b15a:	55                   	push   ebp
c001b15b:	57                   	push   edi
c001b15c:	56                   	push   esi
c001b15d:	53                   	push   ebx
c001b15e:	83 ec 0c             	sub    esp,0xc
c001b161:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b165:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b169:	89 f5                	mov    ebp,esi
c001b16b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b171:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b175:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b179:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b17d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b181:	83 f9 01             	cmp    ecx,0x1
c001b184:	75 5d                	jne    c001b1e3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b186:	0f b6 c8             	movzx  ecx,al
c001b189:	0f b6 d2             	movzx  edx,dl
c001b18c:	c1 e1 10             	shl    ecx,0x10
c001b18f:	c1 e2 0b             	shl    edx,0xb
c001b192:	89 f0                	mov    eax,esi
c001b194:	25 fc 00 00 00       	and    eax,0xfc
c001b199:	09 c1                	or     ecx,eax
c001b19b:	89 e8                	mov    eax,ebp
c001b19d:	0f b6 c0             	movzx  eax,al
c001b1a0:	c1 e0 08             	shl    eax,0x8
c001b1a3:	09 c1                	or     ecx,eax
c001b1a5:	09 d1                	or     ecx,edx
c001b1a7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1ac:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b1b2:	89 c8                	mov    eax,ecx
c001b1b4:	ef                   	out    dx,eax
c001b1b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1ba:	ed                   	in     eax,dx
c001b1bb:	0f b7 db             	movzx  ebx,bx
c001b1be:	83 e6 02             	and    esi,0x2
c001b1c1:	74 0a                	je     c001b1cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b1c3:	0f b7 d0             	movzx  edx,ax
c001b1c6:	c1 e3 10             	shl    ebx,0x10
c001b1c9:	09 d3                	or     ebx,edx
c001b1cb:	eb 05                	jmp    c001b1d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b1cd:	66 31 c0             	xor    ax,ax
c001b1d0:	09 c3                	or     ebx,eax
c001b1d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1d7:	89 c8                	mov    eax,ecx
c001b1d9:	ef                   	out    dx,eax
c001b1da:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1df:	89 d8                	mov    eax,ebx
c001b1e1:	eb 41                	jmp    c001b224 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b1e3:	83 f9 02             	cmp    ecx,0x2
c001b1e6:	75 45                	jne    c001b22d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b1e8:	83 ec 0c             	sub    esp,0xc
c001b1eb:	0f b6 d2             	movzx  edx,dl
c001b1ee:	89 f1                	mov    ecx,esi
c001b1f0:	0f b6 c0             	movzx  eax,al
c001b1f3:	0f b6 f1             	movzx  esi,cl
c001b1f6:	89 e9                	mov    ecx,ebp
c001b1f8:	56                   	push   esi
c001b1f9:	0f b6 c9             	movzx  ecx,cl
c001b1fc:	51                   	push   ecx
c001b1fd:	52                   	push   edx
c001b1fe:	50                   	push   eax
c001b1ff:	57                   	push   edi
c001b200:	e8 a3 fc ff ff       	call   c001aea8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b205:	89 c2                	mov    edx,eax
c001b207:	ed                   	in     eax,dx
c001b208:	83 c4 20             	add    esp,0x20
c001b20b:	0f b7 db             	movzx  ebx,bx
c001b20e:	f6 c2 02             	test   dl,0x2
c001b211:	74 0c                	je     c001b21f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b213:	0f b7 c8             	movzx  ecx,ax
c001b216:	89 d8                	mov    eax,ebx
c001b218:	c1 e0 10             	shl    eax,0x10
c001b21b:	09 c8                	or     eax,ecx
c001b21d:	eb 05                	jmp    c001b224 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b21f:	66 31 c0             	xor    ax,ax
c001b222:	09 d8                	or     eax,ebx
c001b224:	ef                   	out    dx,eax
c001b225:	83 c4 0c             	add    esp,0xc
c001b228:	5b                   	pop    ebx
c001b229:	5e                   	pop    esi
c001b22a:	5f                   	pop    edi
c001b22b:	5d                   	pop    ebp
c001b22c:	c3                   	ret    
c001b22d:	c7 44 24 20 ab 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022cab
c001b235:	83 c4 0c             	add    esp,0xc
c001b238:	5b                   	pop    ebx
c001b239:	5e                   	pop    esi
c001b23a:	5f                   	pop    edi
c001b23b:	5d                   	pop    ebp
c001b23c:	e9 80 61 ff ff       	jmp    c00113c1 <KePanic(char const*)>
c001b241:	90                   	nop

c001b242 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b242:	55                   	push   ebp
c001b243:	57                   	push   edi
c001b244:	56                   	push   esi
c001b245:	53                   	push   ebx
c001b246:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b24c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b253:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b25a:	0f 85 bd 00 00 00    	jne    c001b31d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b260:	83 ec 0c             	sub    esp,0xc
c001b263:	68 14 01 00 00       	push   0x114
c001b268:	e8 49 c8 fe ff       	call   c0007ab6 <malloc>
c001b26d:	83 c4 0c             	add    esp,0xc
c001b270:	89 c3                	mov    ebx,eax
c001b272:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b278:	68 b1 2c 02 c0       	push   0xc0022cb1
c001b27d:	50                   	push   eax
c001b27e:	e8 ed 05 ff ff       	call   c000b870 <File::File(char const*, Process*)>
c001b283:	83 c4 10             	add    esp,0x10
c001b286:	85 db                	test   ebx,ebx
c001b288:	0f 84 67 02 00 00    	je     c001b4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b28e:	56                   	push   esi
c001b28f:	56                   	push   esi
c001b290:	6a 01                	push   0x1
c001b292:	53                   	push   ebx
c001b293:	e8 a0 06 ff ff       	call   c000b938 <File::open(FileOpenMode)>
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	85 c0                	test   eax,eax
c001b29d:	0f 85 52 02 00 00    	jne    c001b4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2a3:	52                   	push   edx
c001b2a4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b2a8:	50                   	push   eax
c001b2a9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b2ad:	50                   	push   eax
c001b2ae:	53                   	push   ebx
c001b2af:	e8 86 09 ff ff       	call   c000bc3a <File::stat(unsigned long long*, bool*)>
c001b2b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2b8:	40                   	inc    eax
c001b2b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2bc:	e8 f5 c7 fe ff       	call   c0007ab6 <malloc>
c001b2c1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b2c5:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b2ca:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b2ce:	59                   	pop    ecx
c001b2cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2d1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b2d5:	51                   	push   ecx
c001b2d6:	50                   	push   eax
c001b2d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2db:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2df:	53                   	push   ebx
c001b2e0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2e3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b2e7:	83 c4 20             	add    esp,0x20
c001b2ea:	89 c8                	mov    eax,ecx
c001b2ec:	99                   	cdq    
c001b2ed:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b2f1:	0f 85 fe 01 00 00    	jne    c001b4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2f7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b2fb:	0f 85 f4 01 00 00    	jne    c001b4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b301:	83 ec 0c             	sub    esp,0xc
c001b304:	53                   	push   ebx
c001b305:	e8 8c 06 ff ff       	call   c000b996 <File::close()>
c001b30a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b30e:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b315:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b31a:	83 c4 10             	add    esp,0x10
c001b31d:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b322:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b32c:	31 f6                	xor    esi,esi
c001b32e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b336:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b33d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b342:	31 c9                	xor    ecx,ecx
c001b344:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b34c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b351:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b359:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b35d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b365:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b369:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b36d:	0f 8e 82 01 00 00    	jle    c001b4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b373:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b376:	d4 40                	aam    0x40
c001b378:	d5 39                	aad    0x39
c001b37a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b37e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b382:	d4 40                	aam    0x40
c001b384:	d5 39                	aad    0x39
c001b386:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b38a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b38e:	d4 40                	aam    0x40
c001b390:	d5 39                	aad    0x39
c001b392:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b396:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b39a:	d4 40                	aam    0x40
c001b39c:	d5 39                	aad    0x39
c001b39e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b3a2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b3a6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b3aa:	3c 56                	cmp    al,0x56
c001b3ac:	74 43                	je     c001b3f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b3ae:	d4 40                	aam    0x40
c001b3b0:	d5 39                	aad    0x39
c001b3b2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b3b5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b3b9:	0f b6 c9             	movzx  ecx,cl
c001b3bc:	c1 e1 04             	shl    ecx,0x4
c001b3bf:	d4 40                	aam    0x40
c001b3c1:	d5 39                	aad    0x39
c001b3c3:	83 e8 30             	sub    eax,0x30
c001b3c6:	0f b6 c0             	movzx  eax,al
c001b3c9:	09 c1                	or     ecx,eax
c001b3cb:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b3cf:	c1 e1 04             	shl    ecx,0x4
c001b3d2:	d4 40                	aam    0x40
c001b3d4:	d5 39                	aad    0x39
c001b3d6:	83 e8 30             	sub    eax,0x30
c001b3d9:	0f b6 c0             	movzx  eax,al
c001b3dc:	09 c1                	or     ecx,eax
c001b3de:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b3e2:	c1 e1 04             	shl    ecx,0x4
c001b3e5:	d4 40                	aam    0x40
c001b3e7:	d5 39                	aad    0x39
c001b3e9:	83 e8 30             	sub    eax,0x30
c001b3ec:	0f b6 c0             	movzx  eax,al
c001b3ef:	09 c1                	or     ecx,eax
c001b3f1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b3f5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b3f9:	3c 58                	cmp    al,0x58
c001b3fb:	74 47                	je     c001b444 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b3fd:	d4 40                	aam    0x40
c001b3ff:	d5 39                	aad    0x39
c001b401:	8d 50 d0             	lea    edx,[eax-0x30]
c001b404:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b408:	0f b6 d2             	movzx  edx,dl
c001b40b:	c1 e2 04             	shl    edx,0x4
c001b40e:	d4 40                	aam    0x40
c001b410:	d5 39                	aad    0x39
c001b412:	83 e8 30             	sub    eax,0x30
c001b415:	0f b6 c0             	movzx  eax,al
c001b418:	09 c2                	or     edx,eax
c001b41a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b41e:	c1 e2 04             	shl    edx,0x4
c001b421:	d4 40                	aam    0x40
c001b423:	d5 39                	aad    0x39
c001b425:	83 e8 30             	sub    eax,0x30
c001b428:	0f b6 c0             	movzx  eax,al
c001b42b:	09 c2                	or     edx,eax
c001b42d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b431:	c1 e2 04             	shl    edx,0x4
c001b434:	d4 40                	aam    0x40
c001b436:	d5 39                	aad    0x39
c001b438:	83 e8 30             	sub    eax,0x30
c001b43b:	0f b6 c0             	movzx  eax,al
c001b43e:	09 c2                	or     edx,eax
c001b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b444:	83 c6 10             	add    esi,0x10
c001b447:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b44b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b44f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b453:	83 fa 0a             	cmp    edx,0xa
c001b456:	74 0b                	je     c001b463 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b458:	47                   	inc    edi
c001b459:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b45d:	75 19                	jne    c001b478 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b45f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b463:	31 c0                	xor    eax,eax
c001b465:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b46a:	0f 94 c0             	sete   al
c001b46d:	01 c6                	add    esi,eax
c001b46f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b474:	75 0b                	jne    c001b481 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b476:	eb 14                	jmp    c001b48c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b478:	46                   	inc    esi
c001b479:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b47c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b47f:	eb ca                	jmp    c001b44b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b481:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b486:	0f 85 dd fe ff ff    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b48c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b491:	74 10                	je     c001b4a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b493:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b498:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b49d:	0f 85 c6 fe ff ff    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b4a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b4ab:	83 e8 30             	sub    eax,0x30
c001b4ae:	83 ef 30             	sub    edi,0x30
c001b4b1:	c1 e0 04             	shl    eax,0x4
c001b4b4:	09 f8                	or     eax,edi
c001b4b6:	0f b6 c0             	movzx  eax,al
c001b4b9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b4bd:	0f 85 a6 fe ff ff    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b4c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4c7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b4cb:	83 e8 30             	sub    eax,0x30
c001b4ce:	83 ef 30             	sub    edi,0x30
c001b4d1:	c1 e0 04             	shl    eax,0x4
c001b4d4:	09 f8                	or     eax,edi
c001b4d6:	0f b6 c0             	movzx  eax,al
c001b4d9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b4dd:	0f 85 86 fe ff ff    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b4e3:	50                   	push   eax
c001b4e4:	50                   	push   eax
c001b4e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b4e9:	50                   	push   eax
c001b4ea:	55                   	push   ebp
c001b4eb:	e8 50 51 fe ff       	call   c0000640 <strcpy>
c001b4f0:	83 c4 10             	add    esp,0x10
c001b4f3:	eb 06                	jmp    c001b4fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b4f5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b4f9:	31 ed                	xor    ebp,ebp
c001b4fb:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b501:	89 e8                	mov    eax,ebp
c001b503:	5b                   	pop    ebx
c001b504:	5e                   	pop    esi
c001b505:	5f                   	pop    edi
c001b506:	5d                   	pop    ebp
c001b507:	c3                   	ret    

c001b508 <PCI::checkBus(unsigned char)>:
c001b508:	56                   	push   esi
c001b509:	53                   	push   ebx
c001b50a:	31 db                	xor    ebx,ebx
c001b50c:	51                   	push   ecx
c001b50d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b512:	52                   	push   edx
c001b513:	53                   	push   ebx
c001b514:	43                   	inc    ebx
c001b515:	56                   	push   esi
c001b516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b51a:	e8 03 03 00 00       	call   c001b822 <PCI::checkDevice(unsigned char, unsigned char)>
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	83 fb 20             	cmp    ebx,0x20
c001b525:	75 eb                	jne    c001b512 <PCI::checkBus(unsigned char)+0xa>
c001b527:	58                   	pop    eax
c001b528:	5b                   	pop    ebx
c001b529:	5e                   	pop    esi
c001b52a:	c3                   	ret    
c001b52b:	90                   	nop

c001b52c <PCI::foundDevice(PCIDeviceInfo)>:
c001b52c:	55                   	push   ebp
c001b52d:	57                   	push   edi
c001b52e:	56                   	push   esi
c001b52f:	53                   	push   ebx
c001b530:	83 ec 1c             	sub    esp,0x1c
c001b533:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b53c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b541:	0f 84 57 01 00 00    	je     c001b69e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b547:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b54c:	66 3d 06 04          	cmp    ax,0x406
c001b550:	75 2c                	jne    c001b57e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b552:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b557:	50                   	push   eax
c001b558:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b55d:	50                   	push   eax
c001b55e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b563:	50                   	push   eax
c001b564:	53                   	push   ebx
c001b565:	e8 64 fb ff ff       	call   c001b0ce <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b56a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b56e:	0f b6 c0             	movzx  eax,al
c001b571:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b575:	83 c4 2c             	add    esp,0x2c
c001b578:	5b                   	pop    ebx
c001b579:	5e                   	pop    esi
c001b57a:	5f                   	pop    edi
c001b57b:	5d                   	pop    ebp
c001b57c:	eb 8a                	jmp    c001b508 <PCI::checkBus(unsigned char)>
c001b57e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b582:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b588:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b58c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b590:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b595:	85 d2                	test   edx,edx
c001b597:	74 36                	je     c001b5cf <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b599:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b59c:	85 c9                	test   ecx,ecx
c001b59e:	74 2b                	je     c001b5cb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b5a0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b5a6:	31 ee                	xor    esi,ebp
c001b5a8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b5ae:	75 1b                	jne    c001b5cb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b5b0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b5b4:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b5ba:	75 0f                	jne    c001b5cb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b5bc:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b5c3:	39 f9                	cmp    ecx,edi
c001b5c5:	0f 84 d3 00 00 00    	je     c001b69e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b5cb:	8b 12                	mov    edx,DWORD PTR [edx]
c001b5cd:	eb c6                	jmp    c001b595 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b5cf:	3d 01 06 00 00       	cmp    eax,0x601
c001b5d4:	75 19                	jne    c001b5ef <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b5d6:	83 ec 0c             	sub    esp,0xc
c001b5d9:	68 64 01 00 00       	push   0x164
c001b5de:	e8 d3 c4 fe ff       	call   c0007ab6 <malloc>
c001b5e3:	89 c5                	mov    ebp,eax
c001b5e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5e8:	e8 a1 0e 00 00       	call   c001c48e <SATABus::SATABus()>
c001b5ed:	eb 1e                	jmp    c001b60d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b5ef:	3d 01 01 00 00       	cmp    eax,0x101
c001b5f4:	75 62                	jne    c001b658 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b5f6:	83 ec 0c             	sub    esp,0xc
c001b5f9:	68 70 02 00 00       	push   0x270
c001b5fe:	e8 b3 c4 fe ff       	call   c0007ab6 <malloc>
c001b603:	89 c5                	mov    ebp,eax
c001b605:	89 04 24             	mov    DWORD PTR [esp],eax
c001b608:	e8 e5 02 00 00       	call   c001b8f2 <IDE::IDE()>
c001b60d:	5f                   	pop    edi
c001b60e:	58                   	pop    eax
c001b60f:	55                   	push   ebp
c001b610:	53                   	push   ebx
c001b611:	e8 7c 11 ff ff       	call   c000c792 <Device::addChild(Device*)>
c001b616:	83 ec 1c             	sub    esp,0x1c
c001b619:	b9 09 00 00 00       	mov    ecx,0x9
c001b61e:	fc                   	cld    
c001b61f:	89 e7                	mov    edi,esp
c001b621:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b625:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b627:	55                   	push   ebp
c001b628:	e8 ab 10 ff ff       	call   c000c6d8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b62d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b630:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b634:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b63c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b644:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b64c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b64f:	83 c4 4c             	add    esp,0x4c
c001b652:	5b                   	pop    ebx
c001b653:	5e                   	pop    esi
c001b654:	5f                   	pop    edi
c001b655:	5d                   	pop    ebp
c001b656:	ff e0                	jmp    eax
c001b658:	83 ec 0c             	sub    esp,0xc
c001b65b:	68 58 01 00 00       	push   0x158
c001b660:	e8 51 c4 fe ff       	call   c0007ab6 <malloc>
c001b665:	89 c5                	mov    ebp,eax
c001b667:	58                   	pop    eax
c001b668:	5a                   	pop    edx
c001b669:	68 ca 2c 02 c0       	push   0xc0022cca
c001b66e:	55                   	push   ebp
c001b66f:	e8 bc 13 ff ff       	call   c000ca30 <DriverlessDevice::DriverlessDevice(char const*)>
c001b674:	59                   	pop    ecx
c001b675:	5e                   	pop    esi
c001b676:	55                   	push   ebp
c001b677:	53                   	push   ebx
c001b678:	e8 15 11 ff ff       	call   c000c792 <Device::addChild(Device*)>
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	b9 09 00 00 00       	mov    ecx,0x9
c001b685:	fc                   	cld    
c001b686:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b68a:	89 fe                	mov    esi,edi
c001b68c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b68e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b692:	83 c4 1c             	add    esp,0x1c
c001b695:	5b                   	pop    ebx
c001b696:	5e                   	pop    esi
c001b697:	5f                   	pop    edi
c001b698:	5d                   	pop    ebp
c001b699:	e9 3a 10 ff ff       	jmp    c000c6d8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b69e:	83 c4 1c             	add    esp,0x1c
c001b6a1:	5b                   	pop    ebx
c001b6a2:	5e                   	pop    esi
c001b6a3:	5f                   	pop    edi
c001b6a4:	5d                   	pop    ebp
c001b6a5:	c3                   	ret    

c001b6a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b6a6:	55                   	push   ebp
c001b6a7:	57                   	push   edi
c001b6a8:	56                   	push   esi
c001b6a9:	53                   	push   ebx
c001b6aa:	83 ec 68             	sub    esp,0x68
c001b6ad:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b6b1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b6b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6bc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b6c3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b6c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b6d3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b6d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b6dc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b6e1:	6a 0c                	push   0xc
c001b6e3:	57                   	push   edi
c001b6e4:	53                   	push   ebx
c001b6e5:	56                   	push   esi
c001b6e6:	55                   	push   ebp
c001b6e7:	e8 32 f8 ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6ec:	83 c4 20             	add    esp,0x20
c001b6ef:	57                   	push   edi
c001b6f0:	53                   	push   ebx
c001b6f1:	56                   	push   esi
c001b6f2:	55                   	push   ebp
c001b6f3:	e8 1c f9 ff ff       	call   c001b014 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b6f8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b6fd:	57                   	push   edi
c001b6fe:	53                   	push   ebx
c001b6ff:	56                   	push   esi
c001b700:	55                   	push   ebp
c001b701:	e8 a4 f9 ff ff       	call   c001b0aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b706:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b70a:	83 c4 14             	add    esp,0x14
c001b70d:	6a 3c                	push   0x3c
c001b70f:	57                   	push   edi
c001b710:	53                   	push   ebx
c001b711:	56                   	push   esi
c001b712:	55                   	push   ebp
c001b713:	e8 06 f8 ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b718:	0f b6 c4             	movzx  eax,ah
c001b71b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b71f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b723:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b727:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b72c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b732:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b738:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b73c:	83 c4 20             	add    esp,0x20
c001b73f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b744:	74 30                	je     c001b776 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b746:	31 c0                	xor    eax,eax
c001b748:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b74c:	7e 28                	jle    c001b776 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b74e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b756:	39 cb                	cmp    ebx,ecx
c001b758:	75 19                	jne    c001b773 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b75a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b762:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b766:	75 0b                	jne    c001b773 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b768:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b76f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b773:	40                   	inc    eax
c001b774:	eb d2                	jmp    c001b748 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b776:	31 d2                	xor    edx,edx
c001b778:	83 ec 0c             	sub    esp,0xc
c001b77b:	57                   	push   edi
c001b77c:	53                   	push   ebx
c001b77d:	56                   	push   esi
c001b77e:	52                   	push   edx
c001b77f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b783:	55                   	push   ebp
c001b784:	e8 6d f9 ff ff       	call   c001b0f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b789:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b78d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b791:	42                   	inc    edx
c001b792:	83 c4 20             	add    esp,0x20
c001b795:	83 fa 06             	cmp    edx,0x6
c001b798:	75 de                	jne    c001b778 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b79a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b79e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7a2:	c1 e2 08             	shl    edx,0x8
c001b7a5:	83 ec 0c             	sub    esp,0xc
c001b7a8:	0f b6 c4             	movzx  eax,ah
c001b7ab:	09 d0                	or     eax,edx
c001b7ad:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b7b2:	6a 02                	push   0x2
c001b7b4:	57                   	push   edi
c001b7b5:	53                   	push   ebx
c001b7b6:	56                   	push   esi
c001b7b7:	55                   	push   ebp
c001b7b8:	e8 61 f7 ff ff       	call   c001af1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7bd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b7c2:	83 c4 20             	add    esp,0x20
c001b7c5:	57                   	push   edi
c001b7c6:	53                   	push   ebx
c001b7c7:	56                   	push   esi
c001b7c8:	55                   	push   ebp
c001b7c9:	e8 90 f8 ff ff       	call   c001b05e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b7ce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b7d2:	57                   	push   edi
c001b7d3:	53                   	push   ebx
c001b7d4:	56                   	push   esi
c001b7d5:	55                   	push   ebp
c001b7d6:	e8 ed f7 ff ff       	call   c001afc8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7db:	b9 09 00 00 00       	mov    ecx,0x9
c001b7e0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b7e5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b7e9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b7ed:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b7f1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b7f5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b7f9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b7fd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b801:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b805:	83 ec 0c             	sub    esp,0xc
c001b808:	fc                   	cld    
c001b809:	89 e7                	mov    edi,esp
c001b80b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b80f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b811:	55                   	push   ebp
c001b812:	e8 15 fd ff ff       	call   c001b52c <PCI::foundDevice(PCIDeviceInfo)>
c001b817:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b81d:	5b                   	pop    ebx
c001b81e:	5e                   	pop    esi
c001b81f:	5f                   	pop    edi
c001b820:	5d                   	pop    ebp
c001b821:	c3                   	ret    

c001b822 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b822:	55                   	push   ebp
c001b823:	57                   	push   edi
c001b824:	56                   	push   esi
c001b825:	53                   	push   ebx
c001b826:	83 ec 0c             	sub    esp,0xc
c001b829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b82d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b832:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b837:	6a 00                	push   0x0
c001b839:	56                   	push   esi
c001b83a:	57                   	push   edi
c001b83b:	55                   	push   ebp
c001b83c:	e8 87 f7 ff ff       	call   c001afc8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b841:	6a 00                	push   0x0
c001b843:	56                   	push   esi
c001b844:	57                   	push   edi
c001b845:	55                   	push   ebp
c001b846:	e8 5b fe ff ff       	call   c001b6a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b84b:	83 c4 20             	add    esp,0x20
c001b84e:	6a 00                	push   0x0
c001b850:	56                   	push   esi
c001b851:	57                   	push   edi
c001b852:	55                   	push   ebp
c001b853:	e8 94 f7 ff ff       	call   c001afec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b858:	83 c4 10             	add    esp,0x10
c001b85b:	a8 80                	test   al,0x80
c001b85d:	74 2d                	je     c001b88c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b85f:	bb 01 00 00 00       	mov    ebx,0x1
c001b864:	53                   	push   ebx
c001b865:	56                   	push   esi
c001b866:	57                   	push   edi
c001b867:	55                   	push   ebp
c001b868:	e8 5b f7 ff ff       	call   c001afc8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b86d:	83 c4 10             	add    esp,0x10
c001b870:	0f b7 c0             	movzx  eax,ax
c001b873:	3d ff ff 00 00       	cmp    eax,0xffff
c001b878:	74 0c                	je     c001b886 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b87a:	53                   	push   ebx
c001b87b:	56                   	push   esi
c001b87c:	57                   	push   edi
c001b87d:	55                   	push   ebp
c001b87e:	e8 23 fe ff ff       	call   c001b6a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	43                   	inc    ebx
c001b887:	83 fb 08             	cmp    ebx,0x8
c001b88a:	75 d8                	jne    c001b864 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b88c:	83 c4 0c             	add    esp,0xc
c001b88f:	5b                   	pop    ebx
c001b890:	5e                   	pop    esi
c001b891:	5f                   	pop    edi
c001b892:	5d                   	pop    ebp
c001b893:	c3                   	ret    

c001b894 <PCI::detect()>:
c001b894:	56                   	push   esi
c001b895:	53                   	push   ebx
c001b896:	53                   	push   ebx
c001b897:	31 db                	xor    ebx,ebx
c001b899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b89d:	6a 00                	push   0x0
c001b89f:	6a 00                	push   0x0
c001b8a1:	6a 00                	push   0x0
c001b8a3:	56                   	push   esi
c001b8a4:	e8 43 f7 ff ff       	call   c001afec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b8a9:	83 c4 10             	add    esp,0x10
c001b8ac:	a8 80                	test   al,0x80
c001b8ae:	75 21                	jne    c001b8d1 <PCI::detect()+0x3d>
c001b8b0:	51                   	push   ecx
c001b8b1:	51                   	push   ecx
c001b8b2:	6a 00                	push   0x0
c001b8b4:	56                   	push   esi
c001b8b5:	e8 4e fc ff ff       	call   c001b508 <PCI::checkBus(unsigned char)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	eb 2a                	jmp    c001b8e9 <PCI::detect()+0x55>
c001b8bf:	52                   	push   edx
c001b8c0:	52                   	push   edx
c001b8c1:	53                   	push   ebx
c001b8c2:	43                   	inc    ebx
c001b8c3:	56                   	push   esi
c001b8c4:	e8 3f fc ff ff       	call   c001b508 <PCI::checkBus(unsigned char)>
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	83 fb 08             	cmp    ebx,0x8
c001b8cf:	74 18                	je     c001b8e9 <PCI::detect()+0x55>
c001b8d1:	53                   	push   ebx
c001b8d2:	6a 00                	push   0x0
c001b8d4:	6a 00                	push   0x0
c001b8d6:	56                   	push   esi
c001b8d7:	e8 ec f6 ff ff       	call   c001afc8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8dc:	83 c4 10             	add    esp,0x10
c001b8df:	0f b7 c0             	movzx  eax,ax
c001b8e2:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8e7:	74 d6                	je     c001b8bf <PCI::detect()+0x2b>
c001b8e9:	58                   	pop    eax
c001b8ea:	5b                   	pop    ebx
c001b8eb:	5e                   	pop    esi
c001b8ec:	c3                   	ret    
c001b8ed:	90                   	nop

c001b8ee <IDE::close(int, int, void*)>:
c001b8ee:	83 c8 ff             	or     eax,0xffffffff
c001b8f1:	c3                   	ret    

c001b8f2 <IDE::IDE()>:
c001b8f2:	83 ec 0c             	sub    esp,0xc
c001b8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f9:	83 ec 08             	sub    esp,0x8
c001b8fc:	68 10 2d 02 c0       	push   0xc0022d10
c001b901:	50                   	push   eax
c001b902:	e8 cd 11 ff ff       	call   c000cad4 <HardDiskController::HardDiskController(char const*)>
c001b907:	83 c4 10             	add    esp,0x10
c001b90a:	ba a0 2d 02 c0       	mov    edx,0xc0022da0
c001b90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b913:	89 10                	mov    DWORD PTR [eax],edx
c001b915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b919:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b920:	90                   	nop
c001b921:	83 c4 0c             	add    esp,0xc
c001b924:	c3                   	ret    
c001b925:	90                   	nop

c001b926 <IDE::prepareInterrupt(unsigned char)>:
c001b926:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b92b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b92f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b937:	c3                   	ret    

c001b938 <selectDrive(unsigned char, unsigned char)>:
c001b938:	c3                   	ret    
c001b939:	90                   	nop

c001b93a <IDE::getBase(unsigned char)>:
c001b93a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b93f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b943:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b94b:	c3                   	ret    

c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b94c:	55                   	push   ebp
c001b94d:	57                   	push   edi
c001b94e:	56                   	push   esi
c001b94f:	53                   	push   ebx
c001b950:	83 ec 1c             	sub    esp,0x1c
c001b953:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b957:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b95b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b95e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b962:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b966:	80 f9 03             	cmp    cl,0x3
c001b969:	77 4f                	ja     c001b9ba <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b96b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b96f:	0f b6 fa             	movzx  edi,dl
c001b972:	0f b6 db             	movzx  ebx,bl
c001b975:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b978:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b97d:	80 ca 80             	or     dl,0x80
c001b980:	52                   	push   edx
c001b981:	6a 0c                	push   0xc
c001b983:	57                   	push   edi
c001b984:	56                   	push   esi
c001b985:	e8 c2 ff ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b98a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b98f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b993:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b997:	ee                   	out    dx,al
c001b998:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b99d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b9a1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b9a5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b9a9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b9b1:	83 c4 2c             	add    esp,0x2c
c001b9b4:	5b                   	pop    ebx
c001b9b5:	5e                   	pop    esi
c001b9b6:	5f                   	pop    edi
c001b9b7:	5d                   	pop    ebp
c001b9b8:	eb 92                	jmp    c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9ba:	0f b6 cb             	movzx  ecx,bl
c001b9bd:	83 f9 07             	cmp    ecx,0x7
c001b9c0:	77 12                	ja     c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b9c2:	0f b6 d2             	movzx  edx,dl
c001b9c5:	0f b6 db             	movzx  ebx,bl
c001b9c8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b9d0:	01 da                	add    edx,ebx
c001b9d2:	eb 2f                	jmp    c001ba03 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b9d4:	83 f9 0d             	cmp    ecx,0xd
c001b9d7:	77 13                	ja     c001b9ec <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b9d9:	0f b6 d2             	movzx  edx,dl
c001b9dc:	0f b6 db             	movzx  ebx,bl
c001b9df:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b9e6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b9ea:	eb 17                	jmp    c001ba03 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b9ec:	83 f9 15             	cmp    ecx,0x15
c001b9ef:	77 13                	ja     c001ba04 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b9f1:	0f b6 d2             	movzx  edx,dl
c001b9f4:	0f b6 db             	movzx  ebx,bl
c001b9f7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b9ff:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ba03:	ee                   	out    dx,al
c001ba04:	83 c4 1c             	add    esp,0x1c
c001ba07:	5b                   	pop    ebx
c001ba08:	5e                   	pop    esi
c001ba09:	5f                   	pop    edi
c001ba0a:	5d                   	pop    ebp
c001ba0b:	c3                   	ret    

c001ba0c <IDE::read(unsigned char, unsigned char)>:
c001ba0c:	55                   	push   ebp
c001ba0d:	57                   	push   edi
c001ba0e:	56                   	push   esi
c001ba0f:	53                   	push   ebx
c001ba10:	83 ec 1c             	sub    esp,0x1c
c001ba13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ba17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba1b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ba1e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ba22:	3c 03                	cmp    al,0x3
c001ba24:	77 40                	ja     c001ba66 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ba26:	0f b6 f9             	movzx  edi,cl
c001ba29:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ba2c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ba31:	0c 80                	or     al,0x80
c001ba33:	50                   	push   eax
c001ba34:	6a 0c                	push   0xc
c001ba36:	57                   	push   edi
c001ba37:	56                   	push   esi
c001ba38:	e8 0f ff ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba3d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ba42:	0f b6 d3             	movzx  edx,bl
c001ba45:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ba49:	ec                   	in     al,dx
c001ba4a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ba4e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ba53:	52                   	push   edx
c001ba54:	6a 0c                	push   0xc
c001ba56:	57                   	push   edi
c001ba57:	56                   	push   esi
c001ba58:	e8 ef fe ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba5d:	83 c4 20             	add    esp,0x20
c001ba60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ba64:	eb 4c                	jmp    c001bab2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba66:	0f b6 d3             	movzx  edx,bl
c001ba69:	83 fa 07             	cmp    edx,0x7
c001ba6c:	77 12                	ja     c001ba80 <IDE::read(unsigned char, unsigned char)+0x74>
c001ba6e:	0f b6 c9             	movzx  ecx,cl
c001ba71:	0f b6 d3             	movzx  edx,bl
c001ba74:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ba7c:	01 c2                	add    edx,eax
c001ba7e:	eb 31                	jmp    c001bab1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba80:	83 fa 0d             	cmp    edx,0xd
c001ba83:	77 13                	ja     c001ba98 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ba85:	0f b6 c9             	movzx  ecx,cl
c001ba88:	0f b6 d3             	movzx  edx,bl
c001ba8b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ba92:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba96:	eb 19                	jmp    c001bab1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba98:	31 c0                	xor    eax,eax
c001ba9a:	83 fa 15             	cmp    edx,0x15
c001ba9d:	77 13                	ja     c001bab2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba9f:	0f b6 c9             	movzx  ecx,cl
c001baa2:	0f b6 d3             	movzx  edx,bl
c001baa5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001baad:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bab1:	ec                   	in     al,dx
c001bab2:	83 c4 1c             	add    esp,0x1c
c001bab5:	5b                   	pop    ebx
c001bab6:	5e                   	pop    esi
c001bab7:	5f                   	pop    edi
c001bab8:	5d                   	pop    ebp
c001bab9:	c3                   	ret    

c001baba <IDE::waitInterrupt(unsigned char)>:
c001baba:	55                   	push   ebp
c001babb:	57                   	push   edi
c001babc:	56                   	push   esi
c001babd:	53                   	push   ebx
c001babe:	31 db                	xor    ebx,ebx
c001bac0:	83 ec 0c             	sub    esp,0xc
c001bac3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bac7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bacc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bad4:	89 e8                	mov    eax,ebp
c001bad6:	84 c0                	test   al,al
c001bad8:	75 30                	jne    c001bb0a <IDE::waitInterrupt(unsigned char)+0x50>
c001bada:	50                   	push   eax
c001badb:	6a 0c                	push   0xc
c001badd:	56                   	push   esi
c001bade:	57                   	push   edi
c001badf:	e8 28 ff ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001bae4:	83 c4 10             	add    esp,0x10
c001bae7:	a8 01                	test   al,0x1
c001bae9:	75 27                	jne    c001bb12 <IDE::waitInterrupt(unsigned char)+0x58>
c001baeb:	f6 c3 04             	test   bl,0x4
c001baee:	75 12                	jne    c001bb02 <IDE::waitInterrupt(unsigned char)+0x48>
c001baf0:	83 fb 32             	cmp    ebx,0x32
c001baf3:	7e 0d                	jle    c001bb02 <IDE::waitInterrupt(unsigned char)+0x48>
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	6a 64                	push   0x64
c001bafa:	e8 b1 a4 ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001baff:	83 c4 10             	add    esp,0x10
c001bb02:	83 fb 3c             	cmp    ebx,0x3c
c001bb05:	74 0b                	je     c001bb12 <IDE::waitInterrupt(unsigned char)+0x58>
c001bb07:	43                   	inc    ebx
c001bb08:	eb c2                	jmp    c001bacc <IDE::waitInterrupt(unsigned char)+0x12>
c001bb0a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bb12:	83 c4 0c             	add    esp,0xc
c001bb15:	89 e8                	mov    eax,ebp
c001bb17:	5b                   	pop    ebx
c001bb18:	5e                   	pop    esi
c001bb19:	5f                   	pop    edi
c001bb1a:	5d                   	pop    ebp
c001bb1b:	c3                   	ret    

c001bb1c <ideChannel0IRQHandler(regs*, void*)>:
c001bb1c:	83 ec 10             	sub    esp,0x10
c001bb1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb23:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bb2a:	6a 07                	push   0x7
c001bb2c:	6a 00                	push   0x0
c001bb2e:	50                   	push   eax
c001bb2f:	e8 d8 fe ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001bb34:	83 c4 1c             	add    esp,0x1c
c001bb37:	c3                   	ret    

c001bb38 <ideChannel1IRQHandler(regs*, void*)>:
c001bb38:	83 ec 10             	sub    esp,0x10
c001bb3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb3f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bb46:	6a 07                	push   0x7
c001bb48:	6a 01                	push   0x1
c001bb4a:	50                   	push   eax
c001bb4b:	e8 bc fe ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001bb50:	83 c4 1c             	add    esp,0x1c
c001bb53:	c3                   	ret    

c001bb54 <IDE::enableIRQs(unsigned char, bool)>:
c001bb54:	57                   	push   edi
c001bb55:	b8 02 00 00 00       	mov    eax,0x2
c001bb5a:	56                   	push   esi
c001bb5b:	53                   	push   ebx
c001bb5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bb64:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bb69:	74 02                	je     c001bb6d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bb6b:	31 c0                	xor    eax,eax
c001bb6d:	0f b6 db             	movzx  ebx,bl
c001bb70:	bf 04 00 00 00       	mov    edi,0x4
c001bb75:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb7c:	50                   	push   eax
c001bb7d:	6a 0c                	push   0xc
c001bb7f:	53                   	push   ebx
c001bb80:	56                   	push   esi
c001bb81:	e8 c6 fd ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	50                   	push   eax
c001bb8a:	6a 0c                	push   0xc
c001bb8c:	53                   	push   ebx
c001bb8d:	56                   	push   esi
c001bb8e:	e8 79 fe ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	4f                   	dec    edi
c001bb97:	75 f0                	jne    c001bb89 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb99:	5b                   	pop    ebx
c001bb9a:	5e                   	pop    esi
c001bb9b:	5f                   	pop    edi
c001bb9c:	c3                   	ret    
c001bb9d:	90                   	nop

c001bb9e <IDE::open(int, int, void*)>:
c001bb9e:	55                   	push   ebp
c001bb9f:	57                   	push   edi
c001bba0:	56                   	push   esi
c001bba1:	53                   	push   ebx
c001bba2:	83 ec 1c             	sub    esp,0x1c
c001bba5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bba9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bbb2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bbbb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bbc2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bbc9:	0f 85 de 02 00 00    	jne    c001bead <IDE::open(int, int, void*)+0x30f>
c001bbcf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bbd5:	88 04 24             	mov    BYTE PTR [esp],al
c001bbd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bbdb:	83 e0 7f             	and    eax,0x7f
c001bbde:	83 f8 05             	cmp    eax,0x5
c001bbe1:	74 05                	je     c001bbe8 <IDE::open(int, int, void*)+0x4a>
c001bbe3:	83 f8 0f             	cmp    eax,0xf
c001bbe6:	75 32                	jne    c001bc1a <IDE::open(int, int, void*)+0x7c>
c001bbe8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bbee:	83 e0 fc             	and    eax,0xfffffffc
c001bbf1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bbf8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bbfe:	83 e0 fc             	and    eax,0xfffffffc
c001bc01:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bc08:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bc0e:	83 e0 fc             	and    eax,0xfffffffc
c001bc11:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc18:	eb 14                	jmp    c001bc2e <IDE::open(int, int, void*)+0x90>
c001bc1a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bc24:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bc2e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bc35:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bc3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc40:	89 c6                	mov    esi,eax
c001bc42:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc47:	c1 e6 10             	shl    esi,0x10
c001bc4a:	89 e8                	mov    eax,ebp
c001bc4c:	89 fa                	mov    edx,edi
c001bc4e:	c1 e0 0b             	shl    eax,0xb
c001bc51:	09 f0                	or     eax,esi
c001bc53:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bc5a:	c1 e6 08             	shl    esi,0x8
c001bc5d:	09 c6                	or     esi,eax
c001bc5f:	89 f0                	mov    eax,esi
c001bc61:	0d 08 00 00 80       	or     eax,0x80000008
c001bc66:	ef                   	out    dx,eax
c001bc67:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bc6c:	89 ca                	mov    edx,ecx
c001bc6e:	ed                   	in     eax,dx
c001bc6f:	c1 e8 10             	shr    eax,0x10
c001bc72:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc77:	0f 84 f9 00 00 00    	je     c001bd76 <IDE::open(int, int, void*)+0x1d8>
c001bc7d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bc83:	89 fa                	mov    edx,edi
c001bc85:	89 f0                	mov    eax,esi
c001bc87:	ef                   	out    dx,eax
c001bc88:	b0 fe                	mov    al,0xfe
c001bc8a:	89 ca                	mov    edx,ecx
c001bc8c:	ee                   	out    dx,al
c001bc8d:	89 f0                	mov    eax,esi
c001bc8f:	89 fa                	mov    edx,edi
c001bc91:	ef                   	out    dx,eax
c001bc92:	89 ca                	mov    edx,ecx
c001bc94:	ed                   	in     eax,dx
c001bc95:	3c fe                	cmp    al,0xfe
c001bc97:	0f 85 a9 00 00 00    	jne    c001bd46 <IDE::open(int, int, void*)+0x1a8>
c001bc9d:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bca3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bcaa:	74 33                	je     c001bcdf <IDE::open(int, int, void*)+0x141>
c001bcac:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bcb2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bcb6:	40                   	inc    eax
c001bcb7:	83 ec 0c             	sub    esp,0xc
c001bcba:	0f b6 c0             	movzx  eax,al
c001bcbd:	50                   	push   eax
c001bcbe:	55                   	push   ebp
c001bcbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bcc3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bcc9:	51                   	push   ecx
c001bcca:	e8 35 3a ff ff       	call   c000f704 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bccf:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bcd4:	83 c4 1c             	add    esp,0x1c
c001bcd7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bcdd:	eb 0a                	jmp    c001bce9 <IDE::open(int, int, void*)+0x14b>
c001bcdf:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bce9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bcf0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bcf7:	c1 e1 10             	shl    ecx,0x10
c001bcfa:	c1 e0 08             	shl    eax,0x8
c001bcfd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bd02:	09 c1                	or     ecx,eax
c001bd04:	89 fa                	mov    edx,edi
c001bd06:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bd0d:	c1 e0 0b             	shl    eax,0xb
c001bd10:	09 c1                	or     ecx,eax
c001bd12:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bd18:	89 c8                	mov    eax,ecx
c001bd1a:	ef                   	out    dx,eax
c001bd1b:	be fc 0c 00 00       	mov    esi,0xcfc
c001bd20:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bd26:	89 f2                	mov    edx,esi
c001bd28:	ee                   	out    dx,al
c001bd29:	89 c8                	mov    eax,ecx
c001bd2b:	89 fa                	mov    edx,edi
c001bd2d:	ef                   	out    dx,eax
c001bd2e:	89 f2                	mov    edx,esi
c001bd30:	ed                   	in     eax,dx
c001bd31:	0f b6 c0             	movzx  eax,al
c001bd34:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bd3a:	74 4a                	je     c001bd86 <IDE::open(int, int, void*)+0x1e8>
c001bd3c:	83 ec 0c             	sub    esp,0xc
c001bd3f:	68 28 2d 02 c0       	push   0xc0022d28
c001bd44:	eb 38                	jmp    c001bd7e <IDE::open(int, int, void*)+0x1e0>
c001bd46:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bd4f:	75 1b                	jne    c001bd6c <IDE::open(int, int, void*)+0x1ce>
c001bd51:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bd55:	3d 80 00 00 00       	cmp    eax,0x80
c001bd5a:	74 07                	je     c001bd63 <IDE::open(int, int, void*)+0x1c5>
c001bd5c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bd61:	75 09                	jne    c001bd6c <IDE::open(int, int, void*)+0x1ce>
c001bd63:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd6a:	eb 1a                	jmp    c001bd86 <IDE::open(int, int, void*)+0x1e8>
c001bd6c:	83 ec 0c             	sub    esp,0xc
c001bd6f:	68 30 2d 02 c0       	push   0xc0022d30
c001bd74:	eb 08                	jmp    c001bd7e <IDE::open(int, int, void*)+0x1e0>
c001bd76:	83 ec 0c             	sub    esp,0xc
c001bd79:	68 61 2d 02 c0       	push   0xc0022d61
c001bd7e:	e8 3e 56 ff ff       	call   c00113c1 <KePanic(char const*)>
c001bd83:	83 c4 10             	add    esp,0x10
c001bd86:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd8d:	74 1a                	je     c001bda9 <IDE::open(int, int, void*)+0x20b>
c001bd8f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd95:	83 e0 fc             	and    eax,0xfffffffc
c001bd98:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd9f:	83 c0 08             	add    eax,0x8
c001bda2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bda9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bdaf:	89 c2                	mov    edx,eax
c001bdb1:	83 e2 0f             	and    edx,0xf
c001bdb4:	83 fa 08             	cmp    edx,0x8
c001bdb7:	75 0a                	jne    c001bdc3 <IDE::open(int, int, void*)+0x225>
c001bdb9:	83 e8 02             	sub    eax,0x2
c001bdbc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdc3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bdc9:	89 c2                	mov    edx,eax
c001bdcb:	83 e2 0f             	and    edx,0xf
c001bdce:	83 fa 08             	cmp    edx,0x8
c001bdd1:	75 0a                	jne    c001bddd <IDE::open(int, int, void*)+0x23f>
c001bdd3:	83 e8 02             	sub    eax,0x2
c001bdd6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bddd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bde4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bdeb:	89 d0                	mov    eax,edx
c001bded:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdf0:	8d 7a 01             	lea    edi,[edx+0x1]
c001bdf3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdf7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bdfb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdff:	83 e1 3f             	and    ecx,0x3f
c001be02:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be06:	89 f9                	mov    ecx,edi
c001be08:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001be0f:	0f b6 c9             	movzx  ecx,cl
c001be12:	8d 78 02             	lea    edi,[eax+0x2]
c001be15:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be18:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be1c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001be20:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be24:	83 e2 3f             	and    edx,0x3f
c001be27:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be2b:	89 f9                	mov    ecx,edi
c001be2d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001be33:	0f b6 d1             	movzx  edx,cl
c001be36:	8d 78 03             	lea    edi,[eax+0x3]
c001be39:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be3c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be40:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001be44:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be48:	83 e1 3f             	and    ecx,0x3f
c001be4b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be4f:	89 f9                	mov    ecx,edi
c001be51:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001be57:	0f b6 c9             	movzx  ecx,cl
c001be5a:	8d 78 04             	lea    edi,[eax+0x4]
c001be5d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be60:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be64:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001be68:	89 fa                	mov    edx,edi
c001be6a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001be70:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be74:	83 e2 3f             	and    edx,0x3f
c001be77:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be7b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be82:	66 85 f6             	test   si,si
c001be85:	74 65                	je     c001beec <IDE::open(int, int, void*)+0x34e>
c001be87:	89 f9                	mov    ecx,edi
c001be89:	83 c0 05             	add    eax,0x5
c001be8c:	0f b6 d1             	movzx  edx,cl
c001be8f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be92:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be96:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be9a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bea0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bea4:	83 e0 3f             	and    eax,0x3f
c001bea7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001beab:	eb 3f                	jmp    c001beec <IDE::open(int, int, void*)+0x34e>
c001bead:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001beb3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001beba:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bec1:	05 06 02 00 00       	add    eax,0x206
c001bec6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001becd:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bed4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bedb:	05 06 02 00 00       	add    eax,0x206
c001bee0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bee7:	e9 bd fe ff ff       	jmp    c001bda9 <IDE::open(int, int, void*)+0x20b>
c001beec:	50                   	push   eax
c001beed:	50                   	push   eax
c001beee:	6a 00                	push   0x0
c001bef0:	53                   	push   ebx
c001bef1:	e8 30 fa ff ff       	call   c001b926 <IDE::prepareInterrupt(unsigned char)>
c001bef6:	5a                   	pop    edx
c001bef7:	59                   	pop    ecx
c001bef8:	6a 01                	push   0x1
c001befa:	53                   	push   ebx
c001befb:	e8 26 fa ff ff       	call   c001b926 <IDE::prepareInterrupt(unsigned char)>
c001bf00:	83 c4 0c             	add    esp,0xc
c001bf03:	6a 00                	push   0x0
c001bf05:	6a 00                	push   0x0
c001bf07:	53                   	push   ebx
c001bf08:	e8 47 fc ff ff       	call   c001bb54 <IDE::enableIRQs(unsigned char, bool)>
c001bf0d:	83 c4 0c             	add    esp,0xc
c001bf10:	6a 00                	push   0x0
c001bf12:	6a 01                	push   0x1
c001bf14:	53                   	push   ebx
c001bf15:	e8 3a fc ff ff       	call   c001bb54 <IDE::enableIRQs(unsigned char, bool)>
c001bf1a:	83 c4 10             	add    esp,0x10
c001bf1d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bf24:	74 34                	je     c001bf5a <IDE::open(int, int, void*)+0x3bc>
c001bf26:	83 ec 0c             	sub    esp,0xc
c001bf29:	53                   	push   ebx
c001bf2a:	6a 01                	push   0x1
c001bf2c:	68 1c bb 01 c0       	push   0xc001bb1c
c001bf31:	6a 0e                	push   0xe
c001bf33:	53                   	push   ebx
c001bf34:	e8 05 08 ff ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf39:	83 c4 14             	add    esp,0x14
c001bf3c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf42:	53                   	push   ebx
c001bf43:	6a 01                	push   0x1
c001bf45:	68 38 bb 01 c0       	push   0xc001bb38
c001bf4a:	6a 0f                	push   0xf
c001bf4c:	53                   	push   ebx
c001bf4d:	e8 ec 07 ff ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf52:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bf58:	eb 38                	jmp    c001bf92 <IDE::open(int, int, void*)+0x3f4>
c001bf5a:	83 ec 0c             	sub    esp,0xc
c001bf5d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bf67:	53                   	push   ebx
c001bf68:	6a 00                	push   0x0
c001bf6a:	68 1c bb 01 c0       	push   0xc001bb1c
c001bf6f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bf75:	53                   	push   ebx
c001bf76:	e8 c3 07 ff ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf7b:	83 c4 14             	add    esp,0x14
c001bf7e:	53                   	push   ebx
c001bf7f:	6a 00                	push   0x0
c001bf81:	68 38 bb 01 c0       	push   0xc001bb38
c001bf86:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf8c:	53                   	push   ebx
c001bf8d:	e8 ac 07 ff ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf94:	83 c4 20             	add    esp,0x20
c001bf97:	83 ec 0c             	sub    esp,0xc
c001bf9a:	53                   	push   ebx
c001bf9b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf9e:	83 c4 0c             	add    esp,0xc
c001bfa1:	6a 07                	push   0x7
c001bfa3:	6a 00                	push   0x0
c001bfa5:	53                   	push   ebx
c001bfa6:	e8 61 fa ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001bfab:	83 c4 0c             	add    esp,0xc
c001bfae:	6a 07                	push   0x7
c001bfb0:	6a 01                	push   0x1
c001bfb2:	53                   	push   ebx
c001bfb3:	e8 54 fa ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001bfb8:	83 c4 0c             	add    esp,0xc
c001bfbb:	6a 01                	push   0x1
c001bfbd:	6a 00                	push   0x0
c001bfbf:	53                   	push   ebx
c001bfc0:	e8 8f fb ff ff       	call   c001bb54 <IDE::enableIRQs(unsigned char, bool)>
c001bfc5:	83 c4 0c             	add    esp,0xc
c001bfc8:	6a 01                	push   0x1
c001bfca:	6a 01                	push   0x1
c001bfcc:	53                   	push   ebx
c001bfcd:	e8 82 fb ff ff       	call   c001bb54 <IDE::enableIRQs(unsigned char, bool)>
c001bfd2:	83 c4 2c             	add    esp,0x2c
c001bfd5:	31 c0                	xor    eax,eax
c001bfd7:	5b                   	pop    ebx
c001bfd8:	5e                   	pop    esi
c001bfd9:	5f                   	pop    edi
c001bfda:	5d                   	pop    ebp
c001bfdb:	c3                   	ret    

c001bfdc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bfdc:	55                   	push   ebp
c001bfdd:	57                   	push   edi
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	83 ec 1c             	sub    esp,0x1c
c001bfe3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bfe7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bfeb:	8d 42 f8             	lea    eax,[edx-0x8]
c001bfee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bff2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bff6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bffa:	3c 03                	cmp    al,0x3
c001bffc:	77 5a                	ja     c001c058 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bffe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c002:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c006:	0f b6 db             	movzx  ebx,bl
c001c009:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c00c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c011:	0c 80                	or     al,0x80
c001c013:	50                   	push   eax
c001c014:	6a 0c                	push   0xc
c001c016:	53                   	push   ebx
c001c017:	56                   	push   esi
c001c018:	e8 2f f9 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c01d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c022:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c02a:	0f b6 d2             	movzx  edx,dl
c001c02d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c031:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c033:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c038:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c03c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c040:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c044:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c04c:	83 c4 2c             	add    esp,0x2c
c001c04f:	5b                   	pop    ebx
c001c050:	5e                   	pop    esi
c001c051:	5f                   	pop    edi
c001c052:	5d                   	pop    ebp
c001c053:	e9 f4 f8 ff ff       	jmp    c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c058:	0f b6 c2             	movzx  eax,dl
c001c05b:	83 f8 07             	cmp    eax,0x7
c001c05e:	77 12                	ja     c001c072 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c060:	0f b6 c2             	movzx  eax,dl
c001c063:	0f b6 db             	movzx  ebx,bl
c001c066:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c06e:	01 c2                	add    edx,eax
c001c070:	eb 2f                	jmp    c001c0a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c072:	83 f8 0d             	cmp    eax,0xd
c001c075:	77 13                	ja     c001c08a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c077:	0f b6 db             	movzx  ebx,bl
c001c07a:	0f b6 d2             	movzx  edx,dl
c001c07d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c084:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c088:	eb 17                	jmp    c001c0a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c08a:	83 f8 15             	cmp    eax,0x15
c001c08d:	77 14                	ja     c001c0a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c08f:	0f b6 db             	movzx  ebx,bl
c001c092:	0f b6 d2             	movzx  edx,dl
c001c095:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c09d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c0a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c0a3:	83 c4 1c             	add    esp,0x1c
c001c0a6:	5b                   	pop    ebx
c001c0a7:	5e                   	pop    esi
c001c0a8:	5f                   	pop    edi
c001c0a9:	5d                   	pop    ebp
c001c0aa:	c3                   	ret    
c001c0ab:	90                   	nop

c001c0ac <IDE::detect()>:
c001c0ac:	55                   	push   ebp
c001c0ad:	57                   	push   edi
c001c0ae:	56                   	push   esi
c001c0af:	53                   	push   ebx
c001c0b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c0b6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c0bd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c0c4:	0f 85 a4 02 00 00    	jne    c001c36e <IDE::detect()+0x2c2>
c001c0ca:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c0d1:	31 f6                	xor    esi,esi
c001c0d3:	31 ed                	xor    ebp,ebp
c001c0d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0dd:	89 e8                	mov    eax,ebp
c001c0df:	c1 e0 06             	shl    eax,0x6
c001c0e2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c0ea:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c0ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f6:	c1 e0 04             	shl    eax,0x4
c001c0f9:	83 c8 a0             	or     eax,0xffffffa0
c001c0fc:	0f b6 c0             	movzx  eax,al
c001c0ff:	50                   	push   eax
c001c100:	6a 06                	push   0x6
c001c102:	56                   	push   esi
c001c103:	53                   	push   ebx
c001c104:	e8 43 f8 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c109:	83 c4 0c             	add    esp,0xc
c001c10c:	6a 0c                	push   0xc
c001c10e:	56                   	push   esi
c001c10f:	53                   	push   ebx
c001c110:	e8 f7 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c115:	83 c4 0c             	add    esp,0xc
c001c118:	6a 0c                	push   0xc
c001c11a:	56                   	push   esi
c001c11b:	53                   	push   ebx
c001c11c:	e8 eb f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c121:	83 c4 0c             	add    esp,0xc
c001c124:	6a 0c                	push   0xc
c001c126:	56                   	push   esi
c001c127:	53                   	push   ebx
c001c128:	e8 df f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c12d:	83 c4 0c             	add    esp,0xc
c001c130:	6a 0c                	push   0xc
c001c132:	56                   	push   esi
c001c133:	53                   	push   ebx
c001c134:	e8 d3 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c139:	68 ec 00 00 00       	push   0xec
c001c13e:	6a 07                	push   0x7
c001c140:	56                   	push   esi
c001c141:	53                   	push   ebx
c001c142:	e8 05 f8 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c147:	83 c4 1c             	add    esp,0x1c
c001c14a:	6a 0c                	push   0xc
c001c14c:	56                   	push   esi
c001c14d:	53                   	push   ebx
c001c14e:	e8 b9 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c153:	83 c4 0c             	add    esp,0xc
c001c156:	6a 0c                	push   0xc
c001c158:	56                   	push   esi
c001c159:	53                   	push   ebx
c001c15a:	e8 ad f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c15f:	83 c4 0c             	add    esp,0xc
c001c162:	6a 0c                	push   0xc
c001c164:	56                   	push   esi
c001c165:	53                   	push   ebx
c001c166:	e8 a1 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c16b:	83 c4 0c             	add    esp,0xc
c001c16e:	6a 0c                	push   0xc
c001c170:	56                   	push   esi
c001c171:	53                   	push   ebx
c001c172:	e8 95 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c177:	83 c4 0c             	add    esp,0xc
c001c17a:	6a 0c                	push   0xc
c001c17c:	56                   	push   esi
c001c17d:	53                   	push   ebx
c001c17e:	e8 89 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c183:	83 c4 10             	add    esp,0x10
c001c186:	84 c0                	test   al,al
c001c188:	0f 84 60 01 00 00    	je     c001c2ee <IDE::detect()+0x242>
c001c18e:	31 ff                	xor    edi,edi
c001c190:	50                   	push   eax
c001c191:	6a 0c                	push   0xc
c001c193:	56                   	push   esi
c001c194:	53                   	push   ebx
c001c195:	e8 72 f8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c19a:	83 c4 10             	add    esp,0x10
c001c19d:	a8 01                	test   al,0x1
c001c19f:	0f 85 6a 01 00 00    	jne    c001c30f <IDE::detect()+0x263>
c001c1a5:	a8 80                	test   al,0x80
c001c1a7:	75 04                	jne    c001c1ad <IDE::detect()+0x101>
c001c1a9:	a8 08                	test   al,0x8
c001c1ab:	75 23                	jne    c001c1d0 <IDE::detect()+0x124>
c001c1ad:	47                   	inc    edi
c001c1ae:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c1b4:	7e da                	jle    c001c190 <IDE::detect()+0xe4>
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	6a 32                	push   0x32
c001c1bb:	e8 f0 9d ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001c1c0:	83 c4 10             	add    esp,0x10
c001c1c3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c1c9:	75 c5                	jne    c001c190 <IDE::detect()+0xe4>
c001c1cb:	e9 3f 01 00 00       	jmp    c001c30f <IDE::detect()+0x263>
c001c1d0:	31 c9                	xor    ecx,ecx
c001c1d2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c1d6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c1da:	83 ec 0c             	sub    esp,0xc
c001c1dd:	68 80 00 00 00       	push   0x80
c001c1e2:	57                   	push   edi
c001c1e3:	6a 00                	push   0x0
c001c1e5:	56                   	push   esi
c001c1e6:	53                   	push   ebx
c001c1e7:	e8 f0 fd ff ff       	call   c001bfdc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c1ec:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c1f1:	89 e8                	mov    eax,ebp
c001c1f3:	89 d1                	mov    ecx,edx
c001c1f5:	c1 e0 06             	shl    eax,0x6
c001c1f8:	01 d8                	add    eax,ebx
c001c1fa:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c201:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c208:	89 f2                	mov    edx,esi
c001c20a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c210:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c214:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c21a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c21e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c225:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c22d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c234:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c23c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c242:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c249:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c24f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c253:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c257:	83 c4 20             	add    esp,0x20
c001c25a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c25d:	83 c0 02             	add    eax,0x2
c001c260:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c266:	83 c7 02             	add    edi,0x2
c001c269:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c26c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c272:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c276:	75 e2                	jne    c001c25a <IDE::detect()+0x1ae>
c001c278:	89 e8                	mov    eax,ebp
c001c27a:	c1 e0 06             	shl    eax,0x6
c001c27d:	01 d8                	add    eax,ebx
c001c27f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c286:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c28d:	c1 ea 09             	shr    edx,0x9
c001c290:	83 e2 01             	and    edx,0x1
c001c293:	80 e1 01             	and    cl,0x1
c001c296:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c29c:	75 22                	jne    c001c2c0 <IDE::detect()+0x214>
c001c29e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c2a5:	74 46                	je     c001c2ed <IDE::detect()+0x241>
c001c2a7:	83 ec 0c             	sub    esp,0xc
c001c2aa:	68 7c 01 00 00       	push   0x17c
c001c2af:	e8 02 b8 fe ff       	call   c0007ab6 <malloc>
c001c2b4:	89 c7                	mov    edi,eax
c001c2b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2b9:	e8 1a 05 00 00       	call   c001c7d8 <ATA::ATA()>
c001c2be:	eb 17                	jmp    c001c2d7 <IDE::detect()+0x22b>
c001c2c0:	83 ec 0c             	sub    esp,0xc
c001c2c3:	68 84 01 00 00       	push   0x184
c001c2c8:	e8 e9 b7 fe ff       	call   c0007ab6 <malloc>
c001c2cd:	89 c7                	mov    edi,eax
c001c2cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2d2:	e8 45 0e 00 00       	call   c001d11c <ATAPI::ATAPI()>
c001c2d7:	5a                   	pop    edx
c001c2d8:	59                   	pop    ecx
c001c2d9:	57                   	push   edi
c001c2da:	53                   	push   ebx
c001c2db:	e8 b2 04 ff ff       	call   c000c792 <Device::addChild(Device*)>
c001c2e0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c2e2:	53                   	push   ebx
c001c2e3:	55                   	push   ebp
c001c2e4:	6a 00                	push   0x0
c001c2e6:	57                   	push   edi
c001c2e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2ea:	83 c4 20             	add    esp,0x20
c001c2ed:	45                   	inc    ebp
c001c2ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c2f3:	74 0d                	je     c001c302 <IDE::detect()+0x256>
c001c2f5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c2fd:	e9 db fd ff ff       	jmp    c001c0dd <IDE::detect()+0x31>
c001c302:	4e                   	dec    esi
c001c303:	74 69                	je     c001c36e <IDE::detect()+0x2c2>
c001c305:	be 01 00 00 00       	mov    esi,0x1
c001c30a:	e9 c6 fd ff ff       	jmp    c001c0d5 <IDE::detect()+0x29>
c001c30f:	50                   	push   eax
c001c310:	6a 04                	push   0x4
c001c312:	56                   	push   esi
c001c313:	53                   	push   ebx
c001c314:	e8 f3 f6 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c319:	83 c4 0c             	add    esp,0xc
c001c31c:	89 c7                	mov    edi,eax
c001c31e:	6a 05                	push   0x5
c001c320:	56                   	push   esi
c001c321:	53                   	push   ebx
c001c322:	e8 e5 f6 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	89 f9                	mov    ecx,edi
c001c32c:	0f b6 c0             	movzx  eax,al
c001c32f:	0f b6 f9             	movzx  edi,cl
c001c332:	83 ff 14             	cmp    edi,0x14
c001c335:	75 07                	jne    c001c33e <IDE::detect()+0x292>
c001c337:	3d eb 00 00 00       	cmp    eax,0xeb
c001c33c:	eb 0a                	jmp    c001c348 <IDE::detect()+0x29c>
c001c33e:	3d 96 00 00 00       	cmp    eax,0x96
c001c343:	75 a9                	jne    c001c2ee <IDE::detect()+0x242>
c001c345:	83 ff 69             	cmp    edi,0x69
c001c348:	75 a4                	jne    c001c2ee <IDE::detect()+0x242>
c001c34a:	68 a1 00 00 00       	push   0xa1
c001c34f:	6a 07                	push   0x7
c001c351:	56                   	push   esi
c001c352:	53                   	push   ebx
c001c353:	e8 f4 f5 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c358:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c35f:	e8 4c 9c ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001c364:	83 c4 10             	add    esp,0x10
c001c367:	b1 01                	mov    cl,0x1
c001c369:	e9 64 fe ff ff       	jmp    c001c1d2 <IDE::detect()+0x126>
c001c36e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c374:	5b                   	pop    ebx
c001c375:	5e                   	pop    esi
c001c376:	5f                   	pop    edi
c001c377:	5d                   	pop    ebp
c001c378:	c3                   	ret    
c001c379:	90                   	nop

c001c37a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c37a:	55                   	push   ebp
c001c37b:	57                   	push   edi
c001c37c:	56                   	push   esi
c001c37d:	53                   	push   ebx
c001c37e:	83 ec 1c             	sub    esp,0x1c
c001c381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c385:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c38d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c391:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c395:	88 c3                	mov    bl,al
c001c397:	25 ff 00 00 00       	and    eax,0xff
c001c39c:	0f 84 88 00 00 00    	je     c001c42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a2:	83 ec 0c             	sub    esp,0xc
c001c3a5:	89 c7                	mov    edi,eax
c001c3a7:	68 8b 2d 02 c0       	push   0xc0022d8b
c001c3ac:	e8 94 e5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c3b1:	83 c4 10             	add    esp,0x10
c001c3b4:	83 ff 01             	cmp    edi,0x1
c001c3b7:	74 6b                	je     c001c424 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c3b9:	83 ff 02             	cmp    edi,0x2
c001c3bc:	75 58                	jne    c001c416 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c3be:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c3c3:	01 ff                	add    edi,edi
c001c3c5:	50                   	push   eax
c001c3c6:	09 fe                	or     esi,edi
c001c3c8:	6a 01                	push   0x1
c001c3ca:	89 f0                	mov    eax,esi
c001c3cc:	0f b6 f0             	movzx  esi,al
c001c3cf:	c1 e6 06             	shl    esi,0x6
c001c3d2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c3da:	50                   	push   eax
c001c3db:	55                   	push   ebp
c001c3dc:	e8 2b f6 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c3e1:	83 c4 10             	add    esp,0x10
c001c3e4:	a8 01                	test   al,0x1
c001c3e6:	74 02                	je     c001c3ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c3e8:	b3 07                	mov    bl,0x7
c001c3ea:	a8 02                	test   al,0x2
c001c3ec:	74 02                	je     c001c3f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c3ee:	b3 03                	mov    bl,0x3
c001c3f0:	a8 04                	test   al,0x4
c001c3f2:	74 02                	je     c001c3f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c3f4:	b3 14                	mov    bl,0x14
c001c3f6:	a8 08                	test   al,0x8
c001c3f8:	74 02                	je     c001c3fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c3fa:	b3 03                	mov    bl,0x3
c001c3fc:	a8 10                	test   al,0x10
c001c3fe:	74 02                	je     c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c400:	b3 15                	mov    bl,0x15
c001c402:	a8 20                	test   al,0x20
c001c404:	74 02                	je     c001c408 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c406:	b3 03                	mov    bl,0x3
c001c408:	a8 40                	test   al,0x40
c001c40a:	74 02                	je     c001c40e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c40c:	b3 16                	mov    bl,0x16
c001c40e:	a8 80                	test   al,0x80
c001c410:	74 18                	je     c001c42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c412:	b3 0d                	mov    bl,0xd
c001c414:	eb 14                	jmp    c001c42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c416:	83 ff 03             	cmp    edi,0x3
c001c419:	74 0d                	je     c001c428 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c41b:	83 ff 04             	cmp    edi,0x4
c001c41e:	75 0a                	jne    c001c42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c420:	b3 08                	mov    bl,0x8
c001c422:	eb 06                	jmp    c001c42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c424:	b3 13                	mov    bl,0x13
c001c426:	eb 02                	jmp    c001c42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c428:	b3 17                	mov    bl,0x17
c001c42a:	83 c4 1c             	add    esp,0x1c
c001c42d:	88 d8                	mov    al,bl
c001c42f:	5b                   	pop    ebx
c001c430:	5e                   	pop    esi
c001c431:	5f                   	pop    edi
c001c432:	5d                   	pop    ebp
c001c433:	c3                   	ret    

c001c434 <IDE::polling(unsigned char, unsigned int)>:
c001c434:	57                   	push   edi
c001c435:	56                   	push   esi
c001c436:	53                   	push   ebx
c001c437:	bb 04 00 00 00       	mov    ebx,0x4
c001c43c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c440:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c445:	52                   	push   edx
c001c446:	6a 0c                	push   0xc
c001c448:	56                   	push   esi
c001c449:	57                   	push   edi
c001c44a:	e8 bd f5 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	4b                   	dec    ebx
c001c453:	75 f0                	jne    c001c445 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c455:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c45a:	50                   	push   eax
c001c45b:	6a 0c                	push   0xc
c001c45d:	56                   	push   esi
c001c45e:	57                   	push   edi
c001c45f:	e8 a8 f5 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c464:	83 c4 10             	add    esp,0x10
c001c467:	a8 01                	test   al,0x1
c001c469:	75 17                	jne    c001c482 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c46b:	a8 20                	test   al,0x20
c001c46d:	75 0f                	jne    c001c47e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c46f:	4b                   	dec    ebx
c001c470:	74 10                	je     c001c482 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c472:	a8 80                	test   al,0x80
c001c474:	75 e4                	jne    c001c45a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c476:	a8 08                	test   al,0x8
c001c478:	74 e0                	je     c001c45a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c47a:	31 c0                	xor    eax,eax
c001c47c:	eb 06                	jmp    c001c484 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c47e:	b0 01                	mov    al,0x1
c001c480:	eb 02                	jmp    c001c484 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c482:	b0 02                	mov    al,0x2
c001c484:	5b                   	pop    ebx
c001c485:	5e                   	pop    esi
c001c486:	5f                   	pop    edi
c001c487:	c3                   	ret    

c001c488 <SATABus::close(int, int, void*)>:
c001c488:	31 c0                	xor    eax,eax
c001c48a:	c3                   	ret    
c001c48b:	90                   	nop

c001c48c <SATABus::detect()>:
c001c48c:	c3                   	ret    
c001c48d:	90                   	nop

c001c48e <SATABus::SATABus()>:
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c495:	83 ec 08             	sub    esp,0x8
c001c498:	68 c4 2d 02 c0       	push   0xc0022dc4
c001c49d:	50                   	push   eax
c001c49e:	e8 31 06 ff ff       	call   c000cad4 <HardDiskController::HardDiskController(char const*)>
c001c4a3:	83 c4 10             	add    esp,0x10
c001c4a6:	ba f0 2d 02 c0       	mov    edx,0xc0022df0
c001c4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4af:	89 10                	mov    DWORD PTR [eax],edx
c001c4b1:	83 ec 0c             	sub    esp,0xc
c001c4b4:	6a 50                	push   0x50
c001c4b6:	e8 d3 b9 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	89 c2                	mov    edx,eax
c001c4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	6a 50                	push   0x50
c001c4cf:	e8 39 d1 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	89 c2                	mov    edx,eax
c001c4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c4e3:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c4e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4ec:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c4f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4f6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c4fc:	83 ec 0c             	sub    esp,0xc
c001c4ff:	6a 03                	push   0x3
c001c501:	6a 50                	push   0x50
c001c503:	51                   	push   ecx
c001c504:	52                   	push   edx
c001c505:	50                   	push   eax
c001c506:	e8 0f da fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c50b:	83 c4 20             	add    esp,0x20
c001c50e:	90                   	nop
c001c50f:	83 c4 0c             	add    esp,0xc
c001c512:	c3                   	ret    
c001c513:	90                   	nop

c001c514 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c518:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c51b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c51e:	09 c2                	or     edx,eax
c001c520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c524:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c52a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c52c:	31 c0                	xor    eax,eax
c001c52e:	c1 e9 08             	shr    ecx,0x8
c001c531:	83 e1 0f             	and    ecx,0xf
c001c534:	39 c8                	cmp    eax,ecx
c001c536:	74 0a                	je     c001c542 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c538:	f6 c2 01             	test   dl,0x1
c001c53b:	74 08                	je     c001c545 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c53d:	d1 ea                	shr    edx,1
c001c53f:	40                   	inc    eax
c001c540:	eb f2                	jmp    c001c534 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c542:	83 c8 ff             	or     eax,0xffffffff
c001c545:	c3                   	ret    

c001c546 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c546:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c54a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c54d:	89 c2                	mov    edx,eax
c001c54f:	c1 ea 08             	shr    edx,0x8
c001c552:	83 e2 0f             	and    edx,0xf
c001c555:	4a                   	dec    edx
c001c556:	75 32                	jne    c001c58a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c558:	83 e0 0f             	and    eax,0xf
c001c55b:	83 f8 03             	cmp    eax,0x3
c001c55e:	75 2a                	jne    c001c58a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c560:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c563:	b8 02 00 00 00       	mov    eax,0x2
c001c568:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c56e:	74 1c                	je     c001c58c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c570:	b8 04 00 00 00       	mov    eax,0x4
c001c575:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c57b:	74 0f                	je     c001c58c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c57d:	31 c0                	xor    eax,eax
c001c57f:	83 fa 03             	cmp    edx,0x3
c001c582:	0f 94 c0             	sete   al
c001c585:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c589:	c3                   	ret    
c001c58a:	31 c0                	xor    eax,eax
c001c58c:	c3                   	ret    
c001c58d:	90                   	nop

c001c58e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c592:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c595:	0f ba e2 0f          	bt     edx,0xf
c001c599:	72 f7                	jb     c001c592 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c59b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c59e:	83 ca 10             	or     edx,0x10
c001c5a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5a7:	83 ca 01             	or     edx,0x1
c001c5aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5ad:	c3                   	ret    

c001c5ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c5ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5b5:	83 e2 fe             	and    edx,0xfffffffe
c001c5b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5bb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5be:	83 e2 ef             	and    edx,0xffffffef
c001c5c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5c7:	0f ba e2 0e          	bt     edx,0xe
c001c5cb:	72 f7                	jb     c001c5c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5d0:	0f ba e2 0f          	bt     edx,0xf
c001c5d4:	72 ee                	jb     c001c5c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5d6:	c3                   	ret    
c001c5d7:	90                   	nop

c001c5d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c5d8:	55                   	push   ebp
c001c5d9:	57                   	push   edi
c001c5da:	56                   	push   esi
c001c5db:	53                   	push   ebx
c001c5dc:	83 ec 1c             	sub    esp,0x1c
c001c5df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c5e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c5e7:	53                   	push   ebx
c001c5e8:	56                   	push   esi
c001c5e9:	e8 c0 ff ff ff       	call   c001c5ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c5ee:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5f2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c5f8:	83 ec 0c             	sub    esp,0xc
c001c5fb:	c1 e5 0a             	shl    ebp,0xa
c001c5fe:	01 e8                	add    eax,ebp
c001c600:	89 03                	mov    DWORD PTR [ebx],eax
c001c602:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c604:	68 00 04 00 00       	push   0x400
c001c609:	6a 00                	push   0x0
c001c60b:	50                   	push   eax
c001c60c:	e8 df 3e fe ff       	call   c00004f0 <memset>
c001c611:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c617:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c61b:	01 e8                	add    eax,ebp
c001c61d:	83 c4 1c             	add    esp,0x1c
c001c620:	89 03                	mov    DWORD PTR [ebx],eax
c001c622:	c1 e2 08             	shl    edx,0x8
c001c625:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c62c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c632:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c638:	01 f8                	add    eax,edi
c001c63a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c63d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c640:	68 00 01 00 00       	push   0x100
c001c645:	6a 00                	push   0x0
c001c647:	50                   	push   eax
c001c648:	e8 a3 3e fe ff       	call   c00004f0 <memset>
c001c64d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c653:	01 fa                	add    edx,edi
c001c655:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c659:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c65c:	c1 e7 0d             	shl    edi,0xd
c001c65f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c666:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c66c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c672:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c676:	31 ff                	xor    edi,edi
c001c678:	83 c4 10             	add    esp,0x10
c001c67b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c685:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c68b:	83 c5 20             	add    ebp,0x20
c001c68e:	01 f8                	add    eax,edi
c001c690:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c693:	52                   	push   edx
c001c694:	68 00 01 00 00       	push   0x100
c001c699:	6a 00                	push   0x0
c001c69b:	50                   	push   eax
c001c69c:	e8 4f 3e fe ff       	call   c00004f0 <memset>
c001c6a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6a5:	83 c4 10             	add    esp,0x10
c001c6a8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c6ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c6b5:	01 f8                	add    eax,edi
c001c6b7:	81 c7 00 01 00 00    	add    edi,0x100
c001c6bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c6c0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c6c6:	75 b3                	jne    c001c67b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c6c8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c6cf:	50                   	push   eax
c001c6d0:	50                   	push   eax
c001c6d1:	53                   	push   ebx
c001c6d2:	56                   	push   esi
c001c6d3:	e8 b6 fe ff ff       	call   c001c58e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c6d8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c6df:	83 c4 2c             	add    esp,0x2c
c001c6e2:	5b                   	pop    ebx
c001c6e3:	5e                   	pop    esi
c001c6e4:	5f                   	pop    edi
c001c6e5:	5d                   	pop    ebp
c001c6e6:	c3                   	ret    
c001c6e7:	90                   	nop

c001c6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c6e8:	55                   	push   ebp
c001c6e9:	57                   	push   edi
c001c6ea:	56                   	push   esi
c001c6eb:	53                   	push   ebx
c001c6ec:	31 db                	xor    ebx,ebx
c001c6ee:	83 ec 0c             	sub    esp,0xc
c001c6f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c6f9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c6fc:	f7 c7 01 00 00 00    	test   edi,0x1
c001c702:	74 7a                	je     c001c77e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c704:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c708:	89 d8                	mov    eax,ebx
c001c70a:	c1 e0 07             	shl    eax,0x7
c001c70d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c714:	55                   	push   ebp
c001c715:	56                   	push   esi
c001c716:	e8 2b fe ff ff       	call   c001c546 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c71b:	5a                   	pop    edx
c001c71c:	83 f8 01             	cmp    eax,0x1
c001c71f:	59                   	pop    ecx
c001c720:	75 21                	jne    c001c743 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c722:	50                   	push   eax
c001c723:	53                   	push   ebx
c001c724:	55                   	push   ebp
c001c725:	56                   	push   esi
c001c726:	e8 ad fe ff ff       	call   c001c5d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c72b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c732:	e8 7f b3 fe ff       	call   c0007ab6 <malloc>
c001c737:	89 c5                	mov    ebp,eax
c001c739:	89 04 24             	mov    DWORD PTR [esp],eax
c001c73c:	e8 99 10 00 00       	call   c001d7da <SATA::SATA()>
c001c741:	eb 24                	jmp    c001c767 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c743:	83 f8 04             	cmp    eax,0x4
c001c746:	75 36                	jne    c001c77e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c748:	51                   	push   ecx
c001c749:	53                   	push   ebx
c001c74a:	55                   	push   ebp
c001c74b:	56                   	push   esi
c001c74c:	e8 87 fe ff ff       	call   c001c5d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c751:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c758:	e8 59 b3 fe ff       	call   c0007ab6 <malloc>
c001c75d:	89 c5                	mov    ebp,eax
c001c75f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c762:	e8 d5 17 00 00       	call   c001df3c <SATAPI::SATAPI()>
c001c767:	58                   	pop    eax
c001c768:	5a                   	pop    edx
c001c769:	55                   	push   ebp
c001c76a:	56                   	push   esi
c001c76b:	e8 22 00 ff ff       	call   c000c792 <Device::addChild(Device*)>
c001c770:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c773:	56                   	push   esi
c001c774:	6a 00                	push   0x0
c001c776:	53                   	push   ebx
c001c777:	55                   	push   ebp
c001c778:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c77b:	83 c4 20             	add    esp,0x20
c001c77e:	d1 ef                	shr    edi,1
c001c780:	43                   	inc    ebx
c001c781:	83 fb 20             	cmp    ebx,0x20
c001c784:	0f 85 72 ff ff ff    	jne    c001c6fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c78a:	83 c4 0c             	add    esp,0xc
c001c78d:	5b                   	pop    ebx
c001c78e:	5e                   	pop    esi
c001c78f:	5f                   	pop    edi
c001c790:	5d                   	pop    ebp
c001c791:	c3                   	ret    

c001c792 <SATABus::open(int, int, void*)>:
c001c792:	83 ec 14             	sub    esp,0x14
c001c795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c799:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c79f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c7a5:	52                   	push   edx
c001c7a6:	50                   	push   eax
c001c7a7:	e8 3c ff ff ff       	call   c001c6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c7ac:	31 c0                	xor    eax,eax
c001c7ae:	83 c4 1c             	add    esp,0x1c
c001c7b1:	c3                   	ret    

c001c7b2 <ATA::close(int, int, void*)>:
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7bf:	85 c0                	test   eax,eax
c001c7c1:	74 0c                	je     c001c7cf <ATA::close(int, int, void*)+0x1d>
c001c7c3:	83 ec 0c             	sub    esp,0xc
c001c7c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7c8:	50                   	push   eax
c001c7c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	31 c0                	xor    eax,eax
c001c7d1:	83 c4 0c             	add    esp,0xc
c001c7d4:	c3                   	ret    
c001c7d5:	90                   	nop

c001c7d6 <ATA::powerSaving(PowerSavingLevel)>:
c001c7d6:	c3                   	ret    
c001c7d7:	90                   	nop

c001c7d8 <ATA::ATA()>:
c001c7d8:	83 ec 0c             	sub    esp,0xc
c001c7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7df:	83 ec 04             	sub    esp,0x4
c001c7e2:	68 00 02 00 00       	push   0x200
c001c7e7:	68 bd 2e 02 c0       	push   0xc0022ebd
c001c7ec:	50                   	push   eax
c001c7ed:	e8 6c 03 ff ff       	call   c000cb5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001c7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fe:	89 10                	mov    DWORD PTR [eax],edx
c001c800:	90                   	nop
c001c801:	83 c4 0c             	add    esp,0xc
c001c804:	c3                   	ret    
c001c805:	90                   	nop

c001c806 <ATA::flush(bool)>:
c001c806:	53                   	push   ebx
c001c807:	83 ec 08             	sub    esp,0x8
c001c80a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c80e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c813:	83 f8 01             	cmp    eax,0x1
c001c816:	19 c0                	sbb    eax,eax
c001c818:	83 e0 fd             	and    eax,0xfffffffd
c001c81b:	05 ea 00 00 00       	add    eax,0xea
c001c820:	50                   	push   eax
c001c821:	6a 07                	push   0x7
c001c823:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c82a:	50                   	push   eax
c001c82b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c831:	e8 16 f1 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c836:	83 c4 0c             	add    esp,0xc
c001c839:	6a 00                	push   0x0
c001c83b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c842:	50                   	push   eax
c001c843:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c849:	e8 e6 fb ff ff       	call   c001c434 <IDE::polling(unsigned char, unsigned int)>
c001c84e:	83 c4 18             	add    esp,0x18
c001c851:	5b                   	pop    ebx
c001c852:	c3                   	ret    
c001c853:	90                   	nop

c001c854 <ATA::readyForCommand()>:
c001c854:	56                   	push   esi
c001c855:	53                   	push   ebx
c001c856:	53                   	push   ebx
c001c857:	31 db                	xor    ebx,ebx
c001c859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c85d:	51                   	push   ecx
c001c85e:	6a 0c                	push   0xc
c001c860:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c867:	50                   	push   eax
c001c868:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c86e:	e8 99 f1 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	a8 88                	test   al,0x88
c001c878:	74 1f                	je     c001c899 <ATA::readyForCommand()+0x45>
c001c87a:	43                   	inc    ebx
c001c87b:	83 fb 63             	cmp    ebx,0x63
c001c87e:	7e dd                	jle    c001c85d <ATA::readyForCommand()+0x9>
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	6a 0a                	push   0xa
c001c885:	e8 26 97 ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c893:	75 c8                	jne    c001c85d <ATA::readyForCommand()+0x9>
c001c895:	31 c0                	xor    eax,eax
c001c897:	eb 02                	jmp    c001c89b <ATA::readyForCommand()+0x47>
c001c899:	b0 01                	mov    al,0x1
c001c89b:	5a                   	pop    edx
c001c89c:	5b                   	pop    ebx
c001c89d:	5e                   	pop    esi
c001c89e:	c3                   	ret    
c001c89f:	90                   	nop

c001c8a0 <ATA::access(unsigned long long, int, void*, bool)>:
c001c8a0:	55                   	push   ebp
c001c8a1:	57                   	push   edi
c001c8a2:	56                   	push   esi
c001c8a3:	53                   	push   ebx
c001c8a4:	83 ec 2c             	sub    esp,0x2c
c001c8a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c8af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c8b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8b7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8bb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8c3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8cd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8d7:	c1 e0 06             	shl    eax,0x6
c001c8da:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8e2:	74 5d                	je     c001c941 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8e4:	89 fa                	mov    edx,edi
c001c8e6:	89 f0                	mov    eax,esi
c001c8e8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8ec:	c1 ea 1c             	shr    edx,0x1c
c001c8ef:	89 d1                	mov    ecx,edx
c001c8f1:	09 c1                	or     ecx,eax
c001c8f3:	74 25                	je     c001c91a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c8f5:	31 ed                	xor    ebp,ebp
c001c8f7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8fe:	89 fa                	mov    edx,edi
c001c900:	89 f0                	mov    eax,esi
c001c902:	0f ad d0             	shrd   eax,edx,cl
c001c905:	d3 ea                	shr    edx,cl
c001c907:	f6 c1 20             	test   cl,0x20
c001c90a:	74 02                	je     c001c90e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c90c:	89 d0                	mov    eax,edx
c001c90e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c912:	45                   	inc    ebp
c001c913:	83 fd 06             	cmp    ebp,0x6
c001c916:	75 df                	jne    c001c8f7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c918:	eb 76                	jmp    c001c990 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c91a:	89 f0                	mov    eax,esi
c001c91c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c921:	89 fa                	mov    edx,edi
c001c923:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c92a:	0f ac d0 10          	shrd   eax,edx,0x10
c001c92e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c933:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c937:	c1 ee 18             	shr    esi,0x18
c001c93a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c93f:	eb 56                	jmp    c001c997 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c941:	6a 00                	push   0x0
c001c943:	6a 3f                	push   0x3f
c001c945:	57                   	push   edi
c001c946:	56                   	push   esi
c001c947:	e8 a4 2a 00 00       	call   c001f3f0 <__umoddi3>
c001c94c:	83 c4 10             	add    esp,0x10
c001c94f:	40                   	inc    eax
c001c950:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c954:	6a 00                	push   0x0
c001c956:	68 f0 03 00 00       	push   0x3f0
c001c95b:	57                   	push   edi
c001c95c:	56                   	push   esi
c001c95d:	e8 8e 29 00 00       	call   c001f2f0 <__udivdi3>
c001c962:	83 c4 10             	add    esp,0x10
c001c965:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c96a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c971:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c976:	6a 00                	push   0x0
c001c978:	6a 3f                	push   0x3f
c001c97a:	57                   	push   edi
c001c97b:	56                   	push   esi
c001c97c:	e8 6f 29 00 00       	call   c001f2f0 <__udivdi3>
c001c981:	83 c4 10             	add    esp,0x10
c001c984:	83 e0 0f             	and    eax,0xf
c001c987:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c98c:	89 c6                	mov    esi,eax
c001c98e:	eb 07                	jmp    c001c997 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c990:	31 f6                	xor    esi,esi
c001c992:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c997:	bf 01 00 00 00       	mov    edi,0x1
c001c99c:	50                   	push   eax
c001c99d:	6a 00                	push   0x0
c001c99f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9a6:	50                   	push   eax
c001c9a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9ab:	e8 a4 f1 ff ff       	call   c001bb54 <IDE::enableIRQs(unsigned char, bool)>
c001c9b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9b3:	e8 9c fe ff ff       	call   c001c854 <ATA::readyForCommand()>
c001c9b8:	83 c4 10             	add    esp,0x10
c001c9bb:	84 c0                	test   al,al
c001c9bd:	0f 84 69 02 00 00    	je     c001cc2c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c9c3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9c9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9cf:	c1 e0 04             	shl    eax,0x4
c001c9d2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9d9:	09 c6                	or     esi,eax
c001c9db:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c9e0:	75 05                	jne    c001c9e7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9e2:	83 ce a0             	or     esi,0xffffffa0
c001c9e5:	eb 03                	jmp    c001c9ea <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9e7:	83 ce e0             	or     esi,0xffffffe0
c001c9ea:	89 f0                	mov    eax,esi
c001c9ec:	0f b6 f0             	movzx  esi,al
c001c9ef:	56                   	push   esi
c001c9f0:	6a 06                	push   0x6
c001c9f2:	51                   	push   ecx
c001c9f3:	52                   	push   edx
c001c9f4:	e8 53 ef ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	6a 00                	push   0x0
c001c9fe:	6a 01                	push   0x1
c001ca00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca07:	50                   	push   eax
c001ca08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0e:	e8 39 ef ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca13:	83 c4 10             	add    esp,0x10
c001ca16:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ca1b:	83 f8 02             	cmp    eax,0x2
c001ca1e:	75 6e                	jne    c001ca8e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ca20:	6a 00                	push   0x0
c001ca22:	6a 08                	push   0x8
c001ca24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca2b:	50                   	push   eax
c001ca2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca32:	e8 15 ef ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca37:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca3c:	50                   	push   eax
c001ca3d:	6a 09                	push   0x9
c001ca3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca46:	50                   	push   eax
c001ca47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca4d:	e8 fa ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca52:	83 c4 20             	add    esp,0x20
c001ca55:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca5a:	50                   	push   eax
c001ca5b:	6a 0a                	push   0xa
c001ca5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca64:	50                   	push   eax
c001ca65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6b:	e8 dc ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca70:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca75:	50                   	push   eax
c001ca76:	6a 0b                	push   0xb
c001ca78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7f:	50                   	push   eax
c001ca80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca86:	e8 c1 ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca8b:	83 c4 20             	add    esp,0x20
c001ca8e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca93:	50                   	push   eax
c001ca94:	6a 02                	push   0x2
c001ca96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca9d:	50                   	push   eax
c001ca9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caa4:	e8 a3 ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001caae:	50                   	push   eax
c001caaf:	6a 03                	push   0x3
c001cab1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab8:	50                   	push   eax
c001cab9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabf:	e8 88 ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac4:	83 c4 20             	add    esp,0x20
c001cac7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cacc:	50                   	push   eax
c001cacd:	6a 04                	push   0x4
c001cacf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cad6:	50                   	push   eax
c001cad7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cadd:	e8 6a ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cae2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cae7:	50                   	push   eax
c001cae8:	6a 05                	push   0x5
c001caea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caf1:	50                   	push   eax
c001caf2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf8:	e8 4f ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cafd:	83 c4 20             	add    esp,0x20
c001cb00:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb05:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cb0a:	74 11                	je     c001cb1d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cb0c:	b8 30 00 00 00       	mov    eax,0x30
c001cb11:	83 fa 02             	cmp    edx,0x2
c001cb14:	75 16                	jne    c001cb2c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cb16:	b8 34 00 00 00       	mov    eax,0x34
c001cb1b:	eb 0f                	jmp    c001cb2c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cb1d:	b8 20 00 00 00       	mov    eax,0x20
c001cb22:	83 fa 02             	cmp    edx,0x2
c001cb25:	75 05                	jne    c001cb2c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cb27:	b8 24 00 00 00       	mov    eax,0x24
c001cb2c:	50                   	push   eax
c001cb2d:	6a 07                	push   0x7
c001cb2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb36:	50                   	push   eax
c001cb37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3d:	e8 0a ee ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb42:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cb4e:	85 f6                	test   esi,esi
c001cb50:	0f 84 b3 00 00 00    	je     c001cc09 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cb56:	50                   	push   eax
c001cb57:	6a 01                	push   0x1
c001cb59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb60:	50                   	push   eax
c001cb61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb67:	e8 c8 f8 ff ff       	call   c001c434 <IDE::polling(unsigned char, unsigned int)>
c001cb6c:	83 c4 10             	add    esp,0x10
c001cb6f:	0f b6 f8             	movzx  edi,al
c001cb72:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb78:	85 ff                	test   edi,edi
c001cb7a:	74 1d                	je     c001cb99 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cb7c:	57                   	push   edi
c001cb7d:	0f b6 d2             	movzx  edx,dl
c001cb80:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb87:	50                   	push   eax
c001cb88:	52                   	push   edx
c001cb89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb8f:	e8 e6 f7 ff ff       	call   c001c37a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb94:	e9 90 00 00 00       	jmp    c001cc29 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cb99:	85 ed                	test   ebp,ebp
c001cb9b:	74 3b                	je     c001cbd8 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cb9d:	31 c9                	xor    ecx,ecx
c001cb9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cba3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cba7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cbab:	50                   	push   eax
c001cbac:	50                   	push   eax
c001cbad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbb4:	50                   	push   eax
c001cbb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbbb:	e8 7a ed ff ff       	call   c001b93a <IDE::getBase(unsigned char)>
c001cbc0:	89 c2                	mov    edx,eax
c001cbc2:	89 f8                	mov    eax,edi
c001cbc4:	66 ef                	out    dx,ax
c001cbc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cbca:	83 c4 10             	add    esp,0x10
c001cbcd:	41                   	inc    ecx
c001cbce:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbd4:	75 c9                	jne    c001cb9f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cbd6:	eb 23                	jmp    c001cbfb <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cbd8:	0f b6 d2             	movzx  edx,dl
c001cbdb:	51                   	push   ecx
c001cbdc:	51                   	push   ecx
c001cbdd:	52                   	push   edx
c001cbde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbe4:	e8 51 ed ff ff       	call   c001b93a <IDE::getBase(unsigned char)>
c001cbe9:	b9 00 01 00 00       	mov    ecx,0x100
c001cbee:	89 c2                	mov    edx,eax
c001cbf0:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbf4:	fc                   	cld    
c001cbf5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cc03:	4e                   	dec    esi
c001cc04:	e9 45 ff ff ff       	jmp    c001cb4e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cc09:	31 ff                	xor    edi,edi
c001cc0b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc10:	74 1a                	je     c001cc2c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cc12:	50                   	push   eax
c001cc13:	50                   	push   eax
c001cc14:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cc19:	83 f8 02             	cmp    eax,0x2
c001cc1c:	0f 94 c0             	sete   al
c001cc1f:	0f b6 c0             	movzx  eax,al
c001cc22:	50                   	push   eax
c001cc23:	53                   	push   ebx
c001cc24:	e8 dd fb ff ff       	call   c001c806 <ATA::flush(bool)>
c001cc29:	83 c4 10             	add    esp,0x10
c001cc2c:	83 c4 2c             	add    esp,0x2c
c001cc2f:	89 f8                	mov    eax,edi
c001cc31:	5b                   	pop    ebx
c001cc32:	5e                   	pop    esi
c001cc33:	5f                   	pop    edi
c001cc34:	5d                   	pop    ebp
c001cc35:	c3                   	ret    

c001cc36 <ATA::detectCHS()>:
c001cc36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc3a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc40:	c1 e0 06             	shl    eax,0x6
c001cc43:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc49:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc53:	c7 44 24 04 14 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e14
c001cc5b:	e9 61 47 ff ff       	jmp    c00113c1 <KePanic(char const*)>

c001cc60 <ATA::open(int, int, void*)>:
c001cc60:	53                   	push   ebx
c001cc61:	83 ec 08             	sub    esp,0x8
c001cc64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc70:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc76:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc7c:	c1 e0 06             	shl    eax,0x6
c001cc7f:	01 d0                	add    eax,edx
c001cc81:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc88:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc8e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc95:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc9f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cca5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ccac:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ccb3:	75 0c                	jne    c001ccc1 <ATA::open(int, int, void*)+0x61>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	53                   	push   ebx
c001ccb9:	e8 78 ff ff ff       	call   c001cc36 <ATA::detectCHS()>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ccc7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cccd:	c1 e0 06             	shl    eax,0x6
c001ccd0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ccd7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cce1:	d1 e8                	shr    eax,1
c001cce3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cce9:	6a 04                	push   0x4
c001cceb:	6a 0c                	push   0xc
c001cced:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccf4:	50                   	push   eax
c001ccf5:	52                   	push   edx
c001ccf6:	e8 51 ec ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccfb:	90                   	nop
c001ccfc:	90                   	nop
c001ccfd:	6a 00                	push   0x0
c001ccff:	6a 0c                	push   0xc
c001cd01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd08:	50                   	push   eax
c001cd09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd0f:	e8 38 ec ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd14:	83 c4 14             	add    esp,0x14
c001cd17:	53                   	push   ebx
c001cd18:	e8 a9 fe fe ff       	call   c000cbc6 <PhysicalDisk::startCache()>
c001cd1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd20:	e8 e5 10 ff ff       	call   c000de0a <createPartitionsForDisk(PhysicalDisk*)>
c001cd25:	31 c0                	xor    eax,eax
c001cd27:	83 c4 18             	add    esp,0x18
c001cd2a:	5b                   	pop    ebx
c001cd2b:	c3                   	ret    

c001cd2c <combineCharAndColour(char, unsigned char)>:
c001cd2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd31:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cd37:	c1 e0 08             	shl    eax,0x8
c001cd3a:	09 d0                	or     eax,edx
c001cd3c:	c3                   	ret    

c001cd3d <combineColours(unsigned char, unsigned char)>:
c001cd3d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd42:	c1 e0 04             	shl    eax,0x4
c001cd45:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cd49:	c3                   	ret    

c001cd4a <ATA::read(unsigned long long, int, void*)>:
c001cd4a:	55                   	push   ebp
c001cd4b:	57                   	push   edi
c001cd4c:	56                   	push   esi
c001cd4d:	be 04 00 00 00       	mov    esi,0x4
c001cd52:	53                   	push   ebx
c001cd53:	83 ec 0c             	sub    esp,0xc
c001cd56:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd5e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd65:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd69:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd6f:	0f 87 a1 01 00 00    	ja     c001cf16 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd75:	be 06 00 00 00       	mov    esi,0x6
c001cd7a:	85 c9                	test   ecx,ecx
c001cd7c:	0f 84 94 01 00 00    	je     c001cf16 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd82:	55                   	push   ebp
c001cd83:	55                   	push   ebp
c001cd84:	6a 00                	push   0x0
c001cd86:	51                   	push   ecx
c001cd87:	53                   	push   ebx
c001cd88:	52                   	push   edx
c001cd89:	50                   	push   eax
c001cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd8e:	e8 0d fb ff ff       	call   c001c8a0 <ATA::access(unsigned long long, int, void*, bool)>
c001cd93:	83 c4 20             	add    esp,0x20
c001cd96:	89 c6                	mov    esi,eax
c001cd98:	85 c0                	test   eax,eax
c001cd9a:	0f 85 71 01 00 00    	jne    c001cf11 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cda0:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cda6:	89 da                	mov    edx,ebx
c001cda8:	50                   	push   eax
c001cda9:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdae:	50                   	push   eax
c001cdaf:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cdb5:	6a 0f                	push   0xf
c001cdb7:	6a 00                	push   0x0
c001cdb9:	e8 7f ff ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001cdbe:	59                   	pop    ecx
c001cdbf:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdc4:	5b                   	pop    ebx
c001cdc5:	0f b6 d8             	movzx  ebx,al
c001cdc8:	89 d0                	mov    eax,edx
c001cdca:	53                   	push   ebx
c001cdcb:	99                   	cdq    
c001cdcc:	f7 fd                	idiv   ebp
c001cdce:	99                   	cdq    
c001cdcf:	f7 f9                	idiv   ecx
c001cdd1:	83 c2 30             	add    edx,0x30
c001cdd4:	0f b6 d2             	movzx  edx,dl
c001cdd7:	52                   	push   edx
c001cdd8:	e8 4f ff ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cddd:	5f                   	pop    edi
c001cdde:	bf e8 03 00 00       	mov    edi,0x3e8
c001cde3:	5a                   	pop    edx
c001cde4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdea:	53                   	push   ebx
c001cdeb:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdf0:	99                   	cdq    
c001cdf1:	f7 ff                	idiv   edi
c001cdf3:	99                   	cdq    
c001cdf4:	f7 f9                	idiv   ecx
c001cdf6:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf9:	0f b6 c0             	movzx  eax,al
c001cdfc:	50                   	push   eax
c001cdfd:	e8 2a ff ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ce02:	5f                   	pop    edi
c001ce03:	bf 64 00 00 00       	mov    edi,0x64
c001ce08:	5a                   	pop    edx
c001ce09:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce0f:	53                   	push   ebx
c001ce10:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce15:	99                   	cdq    
c001ce16:	f7 ff                	idiv   edi
c001ce18:	99                   	cdq    
c001ce19:	f7 f9                	idiv   ecx
c001ce1b:	8d 42 30             	lea    eax,[edx+0x30]
c001ce1e:	0f b6 c0             	movzx  eax,al
c001ce21:	50                   	push   eax
c001ce22:	e8 05 ff ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ce27:	5a                   	pop    edx
c001ce28:	5a                   	pop    edx
c001ce29:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce2f:	53                   	push   ebx
c001ce30:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce35:	99                   	cdq    
c001ce36:	f7 f9                	idiv   ecx
c001ce38:	99                   	cdq    
c001ce39:	f7 f9                	idiv   ecx
c001ce3b:	8d 42 30             	lea    eax,[edx+0x30]
c001ce3e:	0f b6 c0             	movzx  eax,al
c001ce41:	50                   	push   eax
c001ce42:	e8 e5 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ce47:	5a                   	pop    edx
c001ce48:	5a                   	pop    edx
c001ce49:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce4f:	53                   	push   ebx
c001ce50:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce55:	99                   	cdq    
c001ce56:	f7 f9                	idiv   ecx
c001ce58:	83 c2 30             	add    edx,0x30
c001ce5b:	0f b6 d2             	movzx  edx,dl
c001ce5e:	52                   	push   edx
c001ce5f:	e8 c8 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ce64:	5a                   	pop    edx
c001ce65:	5a                   	pop    edx
c001ce66:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce6c:	53                   	push   ebx
c001ce6d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce72:	99                   	cdq    
c001ce73:	f7 fd                	idiv   ebp
c001ce75:	99                   	cdq    
c001ce76:	f7 f9                	idiv   ecx
c001ce78:	8d 42 30             	lea    eax,[edx+0x30]
c001ce7b:	0f b6 c0             	movzx  eax,al
c001ce7e:	50                   	push   eax
c001ce7f:	e8 a8 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ce84:	5d                   	pop    ebp
c001ce85:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce8a:	5a                   	pop    edx
c001ce8b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce91:	53                   	push   ebx
c001ce92:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce97:	99                   	cdq    
c001ce98:	f7 fd                	idiv   ebp
c001ce9a:	99                   	cdq    
c001ce9b:	f7 f9                	idiv   ecx
c001ce9d:	8d 42 30             	lea    eax,[edx+0x30]
c001cea0:	0f b6 c0             	movzx  eax,al
c001cea3:	50                   	push   eax
c001cea4:	e8 83 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cea9:	5d                   	pop    ebp
c001ceaa:	5a                   	pop    edx
c001ceab:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ceb1:	53                   	push   ebx
c001ceb2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceb7:	99                   	cdq    
c001ceb8:	f7 ff                	idiv   edi
c001ceba:	99                   	cdq    
c001cebb:	f7 f9                	idiv   ecx
c001cebd:	8d 42 30             	lea    eax,[edx+0x30]
c001cec0:	0f b6 c0             	movzx  eax,al
c001cec3:	50                   	push   eax
c001cec4:	e8 63 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cec9:	5f                   	pop    edi
c001ceca:	5d                   	pop    ebp
c001cecb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ced1:	53                   	push   ebx
c001ced2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ced7:	99                   	cdq    
c001ced8:	f7 f9                	idiv   ecx
c001ceda:	99                   	cdq    
c001cedb:	f7 f9                	idiv   ecx
c001cedd:	8d 42 30             	lea    eax,[edx+0x30]
c001cee0:	0f b6 c0             	movzx  eax,al
c001cee3:	50                   	push   eax
c001cee4:	e8 43 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cee9:	5a                   	pop    edx
c001ceea:	5f                   	pop    edi
c001ceeb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cef1:	53                   	push   ebx
c001cef2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cef7:	99                   	cdq    
c001cef8:	f7 f9                	idiv   ecx
c001cefa:	83 c2 30             	add    edx,0x30
c001cefd:	0f b6 d2             	movzx  edx,dl
c001cf00:	52                   	push   edx
c001cf01:	e8 26 fe ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf0f:	eb 05                	jmp    c001cf16 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cf11:	be 01 00 00 00       	mov    esi,0x1
c001cf16:	83 c4 0c             	add    esp,0xc
c001cf19:	89 f0                	mov    eax,esi
c001cf1b:	5b                   	pop    ebx
c001cf1c:	5e                   	pop    esi
c001cf1d:	5f                   	pop    edi
c001cf1e:	5d                   	pop    ebp
c001cf1f:	c3                   	ret    

c001cf20 <ATA::write(unsigned long long, int, void*)>:
c001cf20:	55                   	push   ebp
c001cf21:	57                   	push   edi
c001cf22:	56                   	push   esi
c001cf23:	be 04 00 00 00       	mov    esi,0x4
c001cf28:	53                   	push   ebx
c001cf29:	83 ec 0c             	sub    esp,0xc
c001cf2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cf30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf34:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cf37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf3f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cf45:	0f 87 9c 01 00 00    	ja     c001d0e7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf4b:	be 06 00 00 00       	mov    esi,0x6
c001cf50:	85 c9                	test   ecx,ecx
c001cf52:	0f 84 8f 01 00 00    	je     c001d0e7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf58:	55                   	push   ebp
c001cf59:	55                   	push   ebp
c001cf5a:	6a 01                	push   0x1
c001cf5c:	51                   	push   ecx
c001cf5d:	53                   	push   ebx
c001cf5e:	52                   	push   edx
c001cf5f:	50                   	push   eax
c001cf60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf64:	e8 37 f9 ff ff       	call   c001c8a0 <ATA::access(unsigned long long, int, void*, bool)>
c001cf69:	83 c4 20             	add    esp,0x20
c001cf6c:	89 c6                	mov    esi,eax
c001cf6e:	85 c0                	test   eax,eax
c001cf70:	0f 85 6c 01 00 00    	jne    c001d0e2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cf76:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf7c:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf81:	50                   	push   eax
c001cf82:	50                   	push   eax
c001cf83:	6a 0f                	push   0xf
c001cf85:	6a 00                	push   0x0
c001cf87:	e8 b1 fd ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001cf8c:	5a                   	pop    edx
c001cf8d:	0f b6 d8             	movzx  ebx,al
c001cf90:	59                   	pop    ecx
c001cf91:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf96:	53                   	push   ebx
c001cf97:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf9c:	99                   	cdq    
c001cf9d:	f7 fd                	idiv   ebp
c001cf9f:	99                   	cdq    
c001cfa0:	f7 f9                	idiv   ecx
c001cfa2:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa5:	0f b6 c0             	movzx  eax,al
c001cfa8:	50                   	push   eax
c001cfa9:	e8 7e fd ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cfae:	5f                   	pop    edi
c001cfaf:	bf e8 03 00 00       	mov    edi,0x3e8
c001cfb4:	5a                   	pop    edx
c001cfb5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cfbb:	53                   	push   ebx
c001cfbc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfc1:	99                   	cdq    
c001cfc2:	f7 ff                	idiv   edi
c001cfc4:	99                   	cdq    
c001cfc5:	f7 f9                	idiv   ecx
c001cfc7:	8d 42 30             	lea    eax,[edx+0x30]
c001cfca:	0f b6 c0             	movzx  eax,al
c001cfcd:	50                   	push   eax
c001cfce:	e8 59 fd ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cfd3:	5f                   	pop    edi
c001cfd4:	bf 64 00 00 00       	mov    edi,0x64
c001cfd9:	5a                   	pop    edx
c001cfda:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cfe0:	53                   	push   ebx
c001cfe1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfe6:	99                   	cdq    
c001cfe7:	f7 ff                	idiv   edi
c001cfe9:	99                   	cdq    
c001cfea:	f7 f9                	idiv   ecx
c001cfec:	8d 42 30             	lea    eax,[edx+0x30]
c001cfef:	0f b6 c0             	movzx  eax,al
c001cff2:	50                   	push   eax
c001cff3:	e8 34 fd ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001cff8:	5a                   	pop    edx
c001cff9:	5a                   	pop    edx
c001cffa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d000:	53                   	push   ebx
c001d001:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d006:	99                   	cdq    
c001d007:	f7 f9                	idiv   ecx
c001d009:	99                   	cdq    
c001d00a:	f7 f9                	idiv   ecx
c001d00c:	8d 42 30             	lea    eax,[edx+0x30]
c001d00f:	0f b6 c0             	movzx  eax,al
c001d012:	50                   	push   eax
c001d013:	e8 14 fd ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d018:	5a                   	pop    edx
c001d019:	5a                   	pop    edx
c001d01a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d020:	53                   	push   ebx
c001d021:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d026:	99                   	cdq    
c001d027:	f7 f9                	idiv   ecx
c001d029:	8d 42 30             	lea    eax,[edx+0x30]
c001d02c:	0f b6 c0             	movzx  eax,al
c001d02f:	50                   	push   eax
c001d030:	e8 f7 fc ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d035:	5a                   	pop    edx
c001d036:	5a                   	pop    edx
c001d037:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d03d:	53                   	push   ebx
c001d03e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d043:	99                   	cdq    
c001d044:	f7 fd                	idiv   ebp
c001d046:	99                   	cdq    
c001d047:	f7 f9                	idiv   ecx
c001d049:	8d 42 30             	lea    eax,[edx+0x30]
c001d04c:	0f b6 c0             	movzx  eax,al
c001d04f:	50                   	push   eax
c001d050:	e8 d7 fc ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d055:	5d                   	pop    ebp
c001d056:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d05b:	5a                   	pop    edx
c001d05c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d062:	53                   	push   ebx
c001d063:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d068:	99                   	cdq    
c001d069:	f7 fd                	idiv   ebp
c001d06b:	99                   	cdq    
c001d06c:	f7 f9                	idiv   ecx
c001d06e:	8d 42 30             	lea    eax,[edx+0x30]
c001d071:	0f b6 c0             	movzx  eax,al
c001d074:	50                   	push   eax
c001d075:	e8 b2 fc ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d07a:	5d                   	pop    ebp
c001d07b:	5a                   	pop    edx
c001d07c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d082:	53                   	push   ebx
c001d083:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d088:	99                   	cdq    
c001d089:	f7 ff                	idiv   edi
c001d08b:	99                   	cdq    
c001d08c:	f7 f9                	idiv   ecx
c001d08e:	8d 42 30             	lea    eax,[edx+0x30]
c001d091:	0f b6 c0             	movzx  eax,al
c001d094:	50                   	push   eax
c001d095:	e8 92 fc ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d09a:	5f                   	pop    edi
c001d09b:	5d                   	pop    ebp
c001d09c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d0a2:	53                   	push   ebx
c001d0a3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0a8:	99                   	cdq    
c001d0a9:	f7 f9                	idiv   ecx
c001d0ab:	99                   	cdq    
c001d0ac:	f7 f9                	idiv   ecx
c001d0ae:	8d 42 30             	lea    eax,[edx+0x30]
c001d0b1:	0f b6 c0             	movzx  eax,al
c001d0b4:	50                   	push   eax
c001d0b5:	e8 72 fc ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d0ba:	5a                   	pop    edx
c001d0bb:	5f                   	pop    edi
c001d0bc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d0c2:	53                   	push   ebx
c001d0c3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0c8:	99                   	cdq    
c001d0c9:	f7 f9                	idiv   ecx
c001d0cb:	83 c2 30             	add    edx,0x30
c001d0ce:	0f b6 d2             	movzx  edx,dl
c001d0d1:	52                   	push   edx
c001d0d2:	e8 55 fc ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001d0d7:	83 c4 10             	add    esp,0x10
c001d0da:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d0e0:	eb 05                	jmp    c001d0e7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0e2:	be 01 00 00 00       	mov    esi,0x1
c001d0e7:	83 c4 0c             	add    esp,0xc
c001d0ea:	89 f0                	mov    eax,esi
c001d0ec:	5b                   	pop    ebx
c001d0ed:	5e                   	pop    esi
c001d0ee:	5f                   	pop    edi
c001d0ef:	5d                   	pop    ebp
c001d0f0:	c3                   	ret    
c001d0f1:	90                   	nop

c001d0f2 <ATAPI::write(unsigned long long, int, void*)>:
c001d0f2:	b8 03 00 00 00       	mov    eax,0x3
c001d0f7:	c3                   	ret    

c001d0f8 <ATAPI::close(int, int, void*)>:
c001d0f8:	83 ec 0c             	sub    esp,0xc
c001d0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d105:	85 c0                	test   eax,eax
c001d107:	74 0c                	je     c001d115 <ATAPI::close(int, int, void*)+0x1d>
c001d109:	83 ec 0c             	sub    esp,0xc
c001d10c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d10e:	50                   	push   eax
c001d10f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d112:	83 c4 10             	add    esp,0x10
c001d115:	31 c0                	xor    eax,eax
c001d117:	83 c4 0c             	add    esp,0xc
c001d11a:	c3                   	ret    
c001d11b:	90                   	nop

c001d11c <ATAPI::ATAPI()>:
c001d11c:	83 ec 0c             	sub    esp,0xc
c001d11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d123:	83 ec 04             	sub    esp,0x4
c001d126:	68 00 08 00 00       	push   0x800
c001d12b:	68 5d 2f 02 c0       	push   0xc0022f5d
c001d130:	50                   	push   eax
c001d131:	e8 28 fa fe ff       	call   c000cb5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d136:	83 c4 10             	add    esp,0x10
c001d139:	ba 78 2e 02 c0       	mov    edx,0xc0022e78
c001d13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d142:	89 10                	mov    DWORD PTR [eax],edx
c001d144:	90                   	nop
c001d145:	83 c4 0c             	add    esp,0xc
c001d148:	c3                   	ret    
c001d149:	90                   	nop

c001d14a <ATAPI::readyForCommand()>:
c001d14a:	56                   	push   esi
c001d14b:	53                   	push   ebx
c001d14c:	53                   	push   ebx
c001d14d:	31 db                	xor    ebx,ebx
c001d14f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d153:	51                   	push   ecx
c001d154:	6a 0c                	push   0xc
c001d156:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d15d:	50                   	push   eax
c001d15e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d164:	e8 a3 e8 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	a8 88                	test   al,0x88
c001d16e:	74 25                	je     c001d195 <ATAPI::readyForCommand()+0x4b>
c001d170:	43                   	inc    ebx
c001d171:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d177:	7e da                	jle    c001d153 <ATAPI::readyForCommand()+0x9>
c001d179:	83 ec 0c             	sub    esp,0xc
c001d17c:	68 5e 01 00 00       	push   0x15e
c001d181:	e8 2a 8e ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001d186:	83 c4 10             	add    esp,0x10
c001d189:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d18f:	75 c2                	jne    c001d153 <ATAPI::readyForCommand()+0x9>
c001d191:	31 c0                	xor    eax,eax
c001d193:	eb 02                	jmp    c001d197 <ATAPI::readyForCommand()+0x4d>
c001d195:	b0 01                	mov    al,0x1
c001d197:	5a                   	pop    edx
c001d198:	5b                   	pop    ebx
c001d199:	5e                   	pop    esi
c001d19a:	c3                   	ret    
c001d19b:	90                   	nop

c001d19c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d19c:	55                   	push   ebp
c001d19d:	57                   	push   edi
c001d19e:	56                   	push   esi
c001d19f:	53                   	push   ebx
c001d1a0:	83 ec 20             	sub    esp,0x20
c001d1a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d1a7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d1ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d1af:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d1b3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d1b7:	6a 01                	push   0x1
c001d1b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1c0:	50                   	push   eax
c001d1c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1c7:	e8 88 e9 ff ff       	call   c001bb54 <IDE::enableIRQs(unsigned char, bool)>
c001d1cc:	5e                   	pop    esi
c001d1cd:	58                   	pop    eax
c001d1ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d5:	50                   	push   eax
c001d1d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1dc:	e8 45 e7 ff ff       	call   c001b926 <IDE::prepareInterrupt(unsigned char)>
c001d1e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d1e4:	e8 61 ff ff ff       	call   c001d14a <ATAPI::readyForCommand()>
c001d1e9:	83 c4 10             	add    esp,0x10
c001d1ec:	84 c0                	test   al,al
c001d1ee:	75 0a                	jne    c001d1fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d1f0:	bb 01 00 00 00       	mov    ebx,0x1
c001d1f5:	e9 60 02 00 00       	jmp    c001d45a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d1fa:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d200:	c1 e0 04             	shl    eax,0x4
c001d203:	0f b6 c0             	movzx  eax,al
c001d206:	50                   	push   eax
c001d207:	6a 06                	push   0x6
c001d209:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d210:	50                   	push   eax
c001d211:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d217:	e8 30 e7 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d21c:	6a 00                	push   0x0
c001d21e:	6a 01                	push   0x1
c001d220:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d227:	50                   	push   eax
c001d228:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d22e:	e8 19 e7 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d233:	83 c4 20             	add    esp,0x20
c001d236:	0f b6 c3             	movzx  eax,bl
c001d239:	0f b6 df             	movzx  ebx,bh
c001d23c:	50                   	push   eax
c001d23d:	6a 04                	push   0x4
c001d23f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d246:	50                   	push   eax
c001d247:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d24d:	e8 fa e6 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d252:	53                   	push   ebx
c001d253:	6a 05                	push   0x5
c001d255:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25c:	50                   	push   eax
c001d25d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d263:	e8 e4 e6 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d268:	83 c4 20             	add    esp,0x20
c001d26b:	68 a0 00 00 00       	push   0xa0
c001d270:	6a 07                	push   0x7
c001d272:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d279:	50                   	push   eax
c001d27a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d280:	e8 c7 e6 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d285:	83 c4 0c             	add    esp,0xc
c001d288:	6a 01                	push   0x1
c001d28a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d291:	50                   	push   eax
c001d292:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d298:	e8 97 f1 ff ff       	call   c001c434 <IDE::polling(unsigned char, unsigned int)>
c001d29d:	83 c4 10             	add    esp,0x10
c001d2a0:	0f b6 d8             	movzx  ebx,al
c001d2a3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d2a9:	85 db                	test   ebx,ebx
c001d2ab:	74 20                	je     c001d2cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d2ad:	53                   	push   ebx
c001d2ae:	0f b6 c0             	movzx  eax,al
c001d2b1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d2b8:	52                   	push   edx
c001d2b9:	50                   	push   eax
c001d2ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2c0:	e8 b5 f0 ff ff       	call   c001c37a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d2c5:	83 c4 10             	add    esp,0x10
c001d2c8:	e9 8d 01 00 00       	jmp    c001d45a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d2cd:	0f b6 c0             	movzx  eax,al
c001d2d0:	53                   	push   ebx
c001d2d1:	53                   	push   ebx
c001d2d2:	50                   	push   eax
c001d2d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2d9:	e8 5c e6 ff ff       	call   c001b93a <IDE::getBase(unsigned char)>
c001d2de:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d2e2:	b9 06 00 00 00       	mov    ecx,0x6
c001d2e7:	89 c2                	mov    edx,eax
c001d2e9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d2ec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d2f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d2fc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d302:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d309:	85 db                	test   ebx,ebx
c001d30b:	0f 84 ec 00 00 00    	je     c001d3fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d311:	51                   	push   ecx
c001d312:	51                   	push   ecx
c001d313:	52                   	push   edx
c001d314:	50                   	push   eax
c001d315:	e8 a0 e7 ff ff       	call   c001baba <IDE::waitInterrupt(unsigned char)>
c001d31a:	83 c4 10             	add    esp,0x10
c001d31d:	84 c0                	test   al,al
c001d31f:	0f 84 cb fe ff ff    	je     c001d1f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d325:	56                   	push   esi
c001d326:	56                   	push   esi
c001d327:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d32e:	50                   	push   eax
c001d32f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d335:	e8 ec e5 ff ff       	call   c001b926 <IDE::prepareInterrupt(unsigned char)>
c001d33a:	83 c4 0c             	add    esp,0xc
c001d33d:	6a 04                	push   0x4
c001d33f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d346:	50                   	push   eax
c001d347:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d34d:	e8 ba e6 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001d352:	83 c4 0c             	add    esp,0xc
c001d355:	89 c6                	mov    esi,eax
c001d357:	6a 05                	push   0x5
c001d359:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d360:	50                   	push   eax
c001d361:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d367:	e8 a0 e6 ff ff       	call   c001ba0c <IDE::read(unsigned char, unsigned char)>
c001d36c:	89 f1                	mov    ecx,esi
c001d36e:	0f b6 c0             	movzx  eax,al
c001d371:	0f b6 f1             	movzx  esi,cl
c001d374:	c1 e0 08             	shl    eax,0x8
c001d377:	09 c6                	or     esi,eax
c001d379:	d1 fe                	sar    esi,1
c001d37b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d37f:	83 c4 10             	add    esp,0x10
c001d382:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d387:	74 41                	je     c001d3ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d389:	31 c9                	xor    ecx,ecx
c001d38b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d391:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d398:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d39c:	75 0a                	jne    c001d3a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d39e:	01 c9                	add    ecx,ecx
c001d3a0:	01 cd                	add    ebp,ecx
c001d3a2:	4b                   	dec    ebx
c001d3a3:	e9 54 ff ff ff       	jmp    c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d3a8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d3ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d3b1:	51                   	push   ecx
c001d3b2:	51                   	push   ecx
c001d3b3:	52                   	push   edx
c001d3b4:	50                   	push   eax
c001d3b5:	e8 80 e5 ff ff       	call   c001b93a <IDE::getBase(unsigned char)>
c001d3ba:	89 c2                	mov    edx,eax
c001d3bc:	89 f0                	mov    eax,esi
c001d3be:	66 ef                	out    dx,ax
c001d3c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	41                   	inc    ecx
c001d3c8:	eb c1                	jmp    c001d38b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d3ca:	31 f6                	xor    esi,esi
c001d3cc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3d2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3d9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d3dd:	75 06                	jne    c001d3e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d3df:	01 f6                	add    esi,esi
c001d3e1:	01 f5                	add    ebp,esi
c001d3e3:	eb bd                	jmp    c001d3a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d3e5:	51                   	push   ecx
c001d3e6:	51                   	push   ecx
c001d3e7:	52                   	push   edx
c001d3e8:	50                   	push   eax
c001d3e9:	e8 4c e5 ff ff       	call   c001b93a <IDE::getBase(unsigned char)>
c001d3ee:	89 c2                	mov    edx,eax
c001d3f0:	66 ed                	in     ax,dx
c001d3f2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	46                   	inc    esi
c001d3fb:	eb cf                	jmp    c001d3cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d3fd:	51                   	push   ecx
c001d3fe:	51                   	push   ecx
c001d3ff:	52                   	push   edx
c001d400:	50                   	push   eax
c001d401:	e8 b4 e6 ff ff       	call   c001baba <IDE::waitInterrupt(unsigned char)>
c001d406:	83 c4 10             	add    esp,0x10
c001d409:	84 c0                	test   al,al
c001d40b:	0f 84 df fd ff ff    	je     c001d1f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d411:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d416:	52                   	push   edx
c001d417:	52                   	push   edx
c001d418:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d41f:	50                   	push   eax
c001d420:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d426:	e8 fb e4 ff ff       	call   c001b926 <IDE::prepareInterrupt(unsigned char)>
c001d42b:	83 c4 10             	add    esp,0x10
c001d42e:	50                   	push   eax
c001d42f:	50                   	push   eax
c001d430:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d437:	50                   	push   eax
c001d438:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d43e:	e8 f7 e4 ff ff       	call   c001b93a <IDE::getBase(unsigned char)>
c001d443:	8d 50 07             	lea    edx,[eax+0x7]
c001d446:	ec                   	in     al,dx
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	a8 88                	test   al,0x88
c001d44c:	74 0a                	je     c001d458 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d44e:	4b                   	dec    ebx
c001d44f:	75 dd                	jne    c001d42e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d451:	bb 02 00 00 00       	mov    ebx,0x2
c001d456:	eb 02                	jmp    c001d45a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d458:	31 db                	xor    ebx,ebx
c001d45a:	83 c4 1c             	add    esp,0x1c
c001d45d:	89 d8                	mov    eax,ebx
c001d45f:	5b                   	pop    ebx
c001d460:	5e                   	pop    esi
c001d461:	5f                   	pop    edi
c001d462:	5d                   	pop    ebp
c001d463:	c3                   	ret    

c001d464 <ATAPI::diskRemoved()>:
c001d464:	53                   	push   ebx
c001d465:	83 ec 14             	sub    esp,0x14
c001d468:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d46c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d473:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d479:	e8 7c 06 ff ff       	call   c000dafa <LogicalDisk::unmount()>
c001d47e:	58                   	pop    eax
c001d47f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d485:	e8 52 10 ff ff       	call   c000e4dc <VCache::writeWriteBuffer()>
c001d48a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d490:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d494:	83 c4 18             	add    esp,0x18
c001d497:	5b                   	pop    ebx
c001d498:	e9 2f 10 ff ff       	jmp    c000e4cc <VCache::invalidateReadBuffer()>
c001d49d:	90                   	nop

c001d49e <ATAPI::eject()>:
c001d49e:	57                   	push   edi
c001d49f:	b9 03 00 00 00       	mov    ecx,0x3
c001d4a4:	53                   	push   ebx
c001d4a5:	83 ec 14             	sub    esp,0x14
c001d4a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4b0:	fc                   	cld    
c001d4b1:	31 c0                	xor    eax,eax
c001d4b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4b5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d4ba:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d4bf:	50                   	push   eax
c001d4c0:	50                   	push   eax
c001d4c1:	6a 00                	push   0x0
c001d4c3:	6a 00                	push   0x0
c001d4c5:	6a 00                	push   0x0
c001d4c7:	6a 02                	push   0x2
c001d4c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4cd:	50                   	push   eax
c001d4ce:	53                   	push   ebx
c001d4cf:	e8 c8 fc ff ff       	call   c001d19c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4d4:	83 c4 14             	add    esp,0x14
c001d4d7:	53                   	push   ebx
c001d4d8:	e8 87 ff ff ff       	call   c001d464 <ATAPI::diskRemoved()>
c001d4dd:	83 c4 24             	add    esp,0x24
c001d4e0:	31 c0                	xor    eax,eax
c001d4e2:	5b                   	pop    ebx
c001d4e3:	5f                   	pop    edi
c001d4e4:	c3                   	ret    
c001d4e5:	90                   	nop

c001d4e6 <ATAPI::diskInserted()>:
c001d4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4ea:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d4f1:	c3                   	ret    

c001d4f2 <ATAPI::detectMedia()>:
c001d4f2:	56                   	push   esi
c001d4f3:	53                   	push   ebx
c001d4f4:	83 ec 28             	sub    esp,0x28
c001d4f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4fb:	6a 0c                	push   0xc
c001d4fd:	6a 00                	push   0x0
c001d4ff:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d503:	56                   	push   esi
c001d504:	e8 e7 2f fe ff       	call   c00004f0 <memset>
c001d509:	58                   	pop    eax
c001d50a:	5a                   	pop    edx
c001d50b:	6a 00                	push   0x0
c001d50d:	6a 00                	push   0x0
c001d50f:	6a 00                	push   0x0
c001d511:	6a 00                	push   0x0
c001d513:	56                   	push   esi
c001d514:	53                   	push   ebx
c001d515:	e8 82 fc ff ff       	call   c001d19c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d51a:	83 c4 1c             	add    esp,0x1c
c001d51d:	6a 0c                	push   0xc
c001d51f:	6a 00                	push   0x0
c001d521:	56                   	push   esi
c001d522:	e8 c9 2f fe ff       	call   c00004f0 <memset>
c001d527:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d52c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d531:	59                   	pop    ecx
c001d532:	58                   	pop    eax
c001d533:	6a 01                	push   0x1
c001d535:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d539:	50                   	push   eax
c001d53a:	6a 00                	push   0x0
c001d53c:	6a 12                	push   0x12
c001d53e:	56                   	push   esi
c001d53f:	53                   	push   ebx
c001d540:	e8 57 fc ff ff       	call   c001d19c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d545:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d549:	83 c4 20             	add    esp,0x20
c001d54c:	83 e0 7f             	and    eax,0x7f
c001d54f:	83 f8 70             	cmp    eax,0x70
c001d552:	74 15                	je     c001d569 <ATAPI::detectMedia()+0x77>
c001d554:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d55b:	75 0c                	jne    c001d569 <ATAPI::detectMedia()+0x77>
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	53                   	push   ebx
c001d561:	e8 80 ff ff ff       	call   c001d4e6 <ATAPI::diskInserted()>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d56d:	83 e0 0f             	and    eax,0xf
c001d570:	83 f8 02             	cmp    eax,0x2
c001d573:	75 1b                	jne    c001d590 <ATAPI::detectMedia()+0x9e>
c001d575:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d57a:	75 2d                	jne    c001d5a9 <ATAPI::detectMedia()+0xb7>
c001d57c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d583:	74 24                	je     c001d5a9 <ATAPI::detectMedia()+0xb7>
c001d585:	83 ec 0c             	sub    esp,0xc
c001d588:	53                   	push   ebx
c001d589:	e8 d6 fe ff ff       	call   c001d464 <ATAPI::diskRemoved()>
c001d58e:	eb 16                	jmp    c001d5a6 <ATAPI::detectMedia()+0xb4>
c001d590:	85 c0                	test   eax,eax
c001d592:	75 15                	jne    c001d5a9 <ATAPI::detectMedia()+0xb7>
c001d594:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d59b:	75 0c                	jne    c001d5a9 <ATAPI::detectMedia()+0xb7>
c001d59d:	83 ec 0c             	sub    esp,0xc
c001d5a0:	53                   	push   ebx
c001d5a1:	e8 40 ff ff ff       	call   c001d4e6 <ATAPI::diskInserted()>
c001d5a6:	83 c4 10             	add    esp,0x10
c001d5a9:	83 c4 24             	add    esp,0x24
c001d5ac:	5b                   	pop    ebx
c001d5ad:	5e                   	pop    esi
c001d5ae:	c3                   	ret    
c001d5af:	90                   	nop

c001d5b0 <ATAPI::open(int, int, void*)>:
c001d5b0:	56                   	push   esi
c001d5b1:	53                   	push   ebx
c001d5b2:	50                   	push   eax
c001d5b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d5bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5bf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5c5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d5cb:	c1 e0 06             	shl    eax,0x6
c001d5ce:	01 d0                	add    eax,edx
c001d5d0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d5d7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d5dd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d5e4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5ee:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5f4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5fb:	6a 04                	push   0x4
c001d5fd:	6a 0c                	push   0xc
c001d5ff:	51                   	push   ecx
c001d600:	52                   	push   edx
c001d601:	e8 46 e3 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d606:	90                   	nop
c001d607:	90                   	nop
c001d608:	6a 00                	push   0x0
c001d60a:	6a 0c                	push   0xc
c001d60c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d613:	50                   	push   eax
c001d614:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d61a:	e8 2d e3 ff ff       	call   c001b94c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d61f:	83 c4 14             	add    esp,0x14
c001d622:	68 78 01 00 00       	push   0x178
c001d627:	e8 8a a4 fe ff       	call   c0007ab6 <malloc>
c001d62c:	83 c4 0c             	add    esp,0xc
c001d62f:	89 c6                	mov    esi,eax
c001d631:	6a 00                	push   0x0
c001d633:	68 ff ff ff 7f       	push   0x7fffffff
c001d638:	6a 00                	push   0x0
c001d63a:	6a 00                	push   0x0
c001d63c:	53                   	push   ebx
c001d63d:	68 0f 30 02 c0       	push   0xc002300f
c001d642:	50                   	push   eax
c001d643:	e8 f0 02 ff ff       	call   c000d938 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d648:	83 c4 14             	add    esp,0x14
c001d64b:	56                   	push   esi
c001d64c:	e8 a7 03 ff ff       	call   c000d9f8 <LogicalDisk::assignDriveLetter()>
c001d651:	5a                   	pop    edx
c001d652:	0f be c0             	movsx  eax,al
c001d655:	59                   	pop    ecx
c001d656:	50                   	push   eax
c001d657:	68 60 2e 02 c0       	push   0xc0022e60
c001d65c:	e8 e4 d2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d661:	58                   	pop    eax
c001d662:	5a                   	pop    edx
c001d663:	56                   	push   esi
c001d664:	53                   	push   ebx
c001d665:	e8 28 f1 fe ff       	call   c000c792 <Device::addChild(Device*)>
c001d66a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d670:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d673:	e8 4e f5 fe ff       	call   c000cbc6 <PhysicalDisk::startCache()>
c001d678:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d67f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d682:	e8 6b fe ff ff       	call   c001d4f2 <ATAPI::detectMedia()>
c001d687:	83 c4 14             	add    esp,0x14
c001d68a:	31 c0                	xor    eax,eax
c001d68c:	5b                   	pop    ebx
c001d68d:	5e                   	pop    esi
c001d68e:	c3                   	ret    
c001d68f:	90                   	nop

c001d690 <ATAPI::read(unsigned long long, int, void*)>:
c001d690:	55                   	push   ebp
c001d691:	57                   	push   edi
c001d692:	56                   	push   esi
c001d693:	53                   	push   ebx
c001d694:	83 ec 1c             	sub    esp,0x1c
c001d697:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d69b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d69f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d6a3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6aa:	74 3c                	je     c001d6e8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d6ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d6b0:	b9 03 00 00 00       	mov    ecx,0x3
c001d6b5:	fc                   	cld    
c001d6b6:	31 c0                	xor    eax,eax
c001d6b8:	0f ce                	bswap  esi
c001d6ba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d6bc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d6c1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d6c5:	89 e8                	mov    eax,ebp
c001d6c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d6cb:	50                   	push   eax
c001d6cc:	50                   	push   eax
c001d6cd:	55                   	push   ebp
c001d6ce:	c1 e5 0b             	shl    ebp,0xb
c001d6d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6d5:	6a 00                	push   0x0
c001d6d7:	55                   	push   ebp
c001d6d8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d6dc:	50                   	push   eax
c001d6dd:	53                   	push   ebx
c001d6de:	e8 b9 fa ff ff       	call   c001d19c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d6e3:	83 c4 20             	add    esp,0x20
c001d6e6:	eb 1a                	jmp    c001d702 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d6e8:	83 ec 0c             	sub    esp,0xc
c001d6eb:	53                   	push   ebx
c001d6ec:	e8 01 fe ff ff       	call   c001d4f2 <ATAPI::detectMedia()>
c001d6f1:	83 c4 10             	add    esp,0x10
c001d6f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6fb:	75 af                	jne    c001d6ac <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d6fd:	b8 02 00 00 00       	mov    eax,0x2
c001d702:	83 c4 1c             	add    esp,0x1c
c001d705:	5b                   	pop    ebx
c001d706:	5e                   	pop    esi
c001d707:	5f                   	pop    edi
c001d708:	5d                   	pop    ebp
c001d709:	c3                   	ret    

c001d70a <SATA::close(int, int, void*)>:
c001d70a:	83 ec 0c             	sub    esp,0xc
c001d70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d711:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d717:	85 c0                	test   eax,eax
c001d719:	74 0c                	je     c001d727 <SATA::close(int, int, void*)+0x1d>
c001d71b:	83 ec 0c             	sub    esp,0xc
c001d71e:	8b 10                	mov    edx,DWORD PTR [eax]
c001d720:	50                   	push   eax
c001d721:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d724:	83 c4 10             	add    esp,0x10
c001d727:	31 c0                	xor    eax,eax
c001d729:	83 c4 0c             	add    esp,0xc
c001d72c:	c3                   	ret    
c001d72d:	90                   	nop

c001d72e <SATA::powerSaving(PowerSavingLevel)>:
c001d72e:	c3                   	ret    
c001d72f:	90                   	nop

c001d730 <SATA::open(int, int, void*)>:
c001d730:	56                   	push   esi
c001d731:	53                   	push   ebx
c001d732:	50                   	push   eax
c001d733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d73b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d745:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d74b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d759:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d763:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d769:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d770:	e8 4a a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d775:	89 c6                	mov    esi,eax
c001d777:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d77d:	81 c6 00 10 00 00    	add    esi,0x1000
c001d783:	e8 37 a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d788:	39 c6                	cmp    esi,eax
c001d78a:	74 10                	je     c001d79c <SATA::open(int, int, void*)+0x6c>
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	68 a8 2e 02 c0       	push   0xc0022ea8
c001d794:	e8 28 3c ff ff       	call   c00113c1 <KePanic(char const*)>
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	83 ec 0c             	sub    esp,0xc
c001d79f:	6a 02                	push   0x2
c001d7a1:	e8 67 be fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d7a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d7ac:	6a 03                	push   0x3
c001d7ae:	50                   	push   eax
c001d7af:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d7b5:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d7bb:	e8 60 c5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d7c0:	83 c4 14             	add    esp,0x14
c001d7c3:	53                   	push   ebx
c001d7c4:	e8 fd f3 fe ff       	call   c000cbc6 <PhysicalDisk::startCache()>
c001d7c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7cc:	e8 39 06 ff ff       	call   c000de0a <createPartitionsForDisk(PhysicalDisk*)>
c001d7d1:	83 c4 14             	add    esp,0x14
c001d7d4:	31 c0                	xor    eax,eax
c001d7d6:	5b                   	pop    ebx
c001d7d7:	5e                   	pop    esi
c001d7d8:	c3                   	ret    
c001d7d9:	90                   	nop

c001d7da <SATA::SATA()>:
c001d7da:	83 ec 0c             	sub    esp,0xc
c001d7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e1:	83 ec 04             	sub    esp,0x4
c001d7e4:	68 00 02 00 00       	push   0x200
c001d7e9:	68 bc 2e 02 c0       	push   0xc0022ebc
c001d7ee:	50                   	push   eax
c001d7ef:	e8 6a f3 fe ff       	call   c000cb5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7f4:	83 c4 10             	add    esp,0x10
c001d7f7:	ba 2c 2f 02 c0       	mov    edx,0xc0022f2c
c001d7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d800:	89 10                	mov    DWORD PTR [eax],edx
c001d802:	90                   	nop
c001d803:	83 c4 0c             	add    esp,0xc
c001d806:	c3                   	ret    
c001d807:	90                   	nop

c001d808 <SATA::access(unsigned long long, int, void*, bool)>:
c001d808:	55                   	push   ebp
c001d809:	57                   	push   edi
c001d80a:	56                   	push   esi
c001d80b:	53                   	push   ebx
c001d80c:	83 ec 2c             	sub    esp,0x2c
c001d80f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d813:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d817:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d81b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d81f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d823:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d828:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d82c:	7e 10                	jle    c001d83e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d82e:	83 ec 0c             	sub    esp,0xc
c001d831:	68 cc 2e 02 c0       	push   0xc0022ecc
c001d836:	e8 86 3b ff ff       	call   c00113c1 <KePanic(char const*)>
c001d83b:	83 c4 10             	add    esp,0x10
c001d83e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d844:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d84a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d850:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d854:	89 d0                	mov    eax,edx
c001d856:	c1 e0 07             	shl    eax,0x7
c001d859:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d85d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d867:	51                   	push   ecx
c001d868:	8d 42 02             	lea    eax,[edx+0x2]
c001d86b:	51                   	push   ecx
c001d86c:	c1 e0 07             	shl    eax,0x7
c001d86f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d873:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d877:	50                   	push   eax
c001d878:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d87e:	e8 91 ec ff ff       	call   c001c514 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d883:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d88f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d893:	0f 84 57 01 00 00    	je     c001d9f0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d899:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d89d:	c1 e0 09             	shl    eax,0x9
c001d8a0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d8a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8a9:	74 0e                	je     c001d8b9 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d8ab:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d8b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d8b5:	89 c1                	mov    ecx,eax
c001d8b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8b9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d8bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d8c3:	8d 42 02             	lea    eax,[edx+0x2]
c001d8c6:	c1 e0 07             	shl    eax,0x7
c001d8c9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d8cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8cf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d8d5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d8db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8df:	c1 e1 05             	shl    ecx,0x5
c001d8e2:	01 c8                	add    eax,ecx
c001d8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d8e8:	83 e1 01             	and    ecx,0x1
c001d8eb:	89 ce                	mov    esi,ecx
c001d8ed:	8a 08                	mov    cl,BYTE PTR [eax]
c001d8ef:	c1 e6 06             	shl    esi,0x6
c001d8f2:	83 e1 bf             	and    ecx,0xffffffbf
c001d8f5:	09 f1                	or     ecx,esi
c001d8f7:	88 08                	mov    BYTE PTR [eax],cl
c001d8f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8fb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d901:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d907:	89 08                	mov    DWORD PTR [eax],ecx
c001d909:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d90f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d915:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d91b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d91e:	50                   	push   eax
c001d91f:	68 90 00 00 00       	push   0x90
c001d924:	6a 00                	push   0x0
c001d926:	56                   	push   esi
c001d927:	e8 c4 2b fe ff       	call   c00004f0 <memset>
c001d92c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d932:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d938:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	48                   	dec    eax
c001d940:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d945:	89 c1                	mov    ecx,eax
c001d947:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d94d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d952:	09 c8                	or     eax,ecx
c001d954:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d95a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d960:	83 c8 80             	or     eax,0xffffff80
c001d963:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d969:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d96c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d970:	25 00 7f 00 00       	and    eax,0x7f00
c001d975:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d97a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d97f:	66 89 06             	mov    WORD PTR [esi],ax
c001d982:	b0 35                	mov    al,0x35
c001d984:	75 02                	jne    c001d988 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d986:	b0 25                	mov    al,0x25
c001d988:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d98b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d98f:	89 e8                	mov    eax,ebp
c001d991:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d995:	c1 e8 10             	shr    eax,0x10
c001d998:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d99b:	89 e8                	mov    eax,ebp
c001d99d:	c1 e8 18             	shr    eax,0x18
c001d9a0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d9a3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d9a7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d9aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9ae:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d9b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d9b5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d9b9:	89 d6                	mov    esi,edx
c001d9bb:	31 c0                	xor    eax,eax
c001d9bd:	c1 e6 07             	shl    esi,0x7
c001d9c0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d9c4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d9ca:	80 e1 88             	and    cl,0x88
c001d9cd:	74 0a                	je     c001d9d9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d9cf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9d4:	74 0a                	je     c001d9e0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d9d6:	40                   	inc    eax
c001d9d7:	eb eb                	jmp    c001d9c4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d9d9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9de:	75 17                	jne    c001d9f7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	68 05 2f 02 c0       	push   0xc0022f05
c001d9e8:	e8 58 cf fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	b8 01 00 00 00       	mov    eax,0x1
c001d9f5:	eb 5d                	jmp    c001da54 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d9f7:	b8 01 00 00 00       	mov    eax,0x1
c001d9fc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001da00:	c1 e2 07             	shl    edx,0x7
c001da03:	d3 e0                	shl    eax,cl
c001da05:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001da09:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001da0f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001da15:	85 c8                	test   eax,ecx
c001da17:	74 16                	je     c001da2f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001da19:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001da1f:	0f ba e1 1e          	bt     ecx,0x1e
c001da23:	73 ea                	jae    c001da0f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001da25:	83 ec 0c             	sub    esp,0xc
c001da28:	68 13 2f 02 c0       	push   0xc0022f13
c001da2d:	eb b9                	jmp    c001d9e8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001da2f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001da35:	0f ba e0 1e          	bt     eax,0x1e
c001da39:	72 b5                	jb     c001d9f0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001da3b:	31 c0                	xor    eax,eax
c001da3d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001da42:	75 10                	jne    c001da54 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001da44:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001da4a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001da52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da54:	83 c4 2c             	add    esp,0x2c
c001da57:	5b                   	pop    ebx
c001da58:	5e                   	pop    esi
c001da59:	5f                   	pop    edi
c001da5a:	5d                   	pop    ebp
c001da5b:	c3                   	ret    

c001da5c <SATA::read(unsigned long long, int, void*)>:
c001da5c:	55                   	push   ebp
c001da5d:	57                   	push   edi
c001da5e:	56                   	push   esi
c001da5f:	be 04 00 00 00       	mov    esi,0x4
c001da64:	53                   	push   ebx
c001da65:	83 ec 0c             	sub    esp,0xc
c001da68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da70:	8d 7b ff             	lea    edi,[ebx-0x1]
c001da73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da77:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da7b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da81:	0f 87 1a 02 00 00    	ja     c001dca1 <SATA::read(unsigned long long, int, void*)+0x245>
c001da87:	be 06 00 00 00       	mov    esi,0x6
c001da8c:	85 c9                	test   ecx,ecx
c001da8e:	0f 84 0d 02 00 00    	je     c001dca1 <SATA::read(unsigned long long, int, void*)+0x245>
c001da94:	56                   	push   esi
c001da95:	56                   	push   esi
c001da96:	6a 00                	push   0x0
c001da98:	51                   	push   ecx
c001da99:	53                   	push   ebx
c001da9a:	52                   	push   edx
c001da9b:	50                   	push   eax
c001da9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001daa0:	e8 63 fd ff ff       	call   c001d808 <SATA::access(unsigned long long, int, void*, bool)>
c001daa5:	83 c4 20             	add    esp,0x20
c001daa8:	89 c6                	mov    esi,eax
c001daaa:	85 c0                	test   eax,eax
c001daac:	0f 85 ea 01 00 00    	jne    c001dc9c <SATA::read(unsigned long long, int, void*)+0x240>
c001dab2:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001dab8:	bb 0a 00 00 00       	mov    ebx,0xa
c001dabd:	50                   	push   eax
c001dabe:	50                   	push   eax
c001dabf:	6a 0f                	push   0xf
c001dac1:	6a 00                	push   0x0
c001dac3:	e8 75 f2 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dac8:	5a                   	pop    edx
c001dac9:	0f b6 c0             	movzx  eax,al
c001dacc:	59                   	pop    ecx
c001dacd:	b9 10 27 00 00       	mov    ecx,0x2710
c001dad2:	50                   	push   eax
c001dad3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dad8:	99                   	cdq    
c001dad9:	f7 f9                	idiv   ecx
c001dadb:	99                   	cdq    
c001dadc:	f7 fb                	idiv   ebx
c001dade:	8d 42 30             	lea    eax,[edx+0x30]
c001dae1:	0f b6 c0             	movzx  eax,al
c001dae4:	50                   	push   eax
c001dae5:	e8 42 f2 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001daea:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001daf0:	5f                   	pop    edi
c001daf1:	5d                   	pop    ebp
c001daf2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001daf7:	6a 0f                	push   0xf
c001daf9:	6a 00                	push   0x0
c001dafb:	e8 3d f2 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001db00:	5a                   	pop    edx
c001db01:	0f b6 c0             	movzx  eax,al
c001db04:	59                   	pop    ecx
c001db05:	50                   	push   eax
c001db06:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db0b:	99                   	cdq    
c001db0c:	f7 fd                	idiv   ebp
c001db0e:	99                   	cdq    
c001db0f:	f7 fb                	idiv   ebx
c001db11:	8d 42 30             	lea    eax,[edx+0x30]
c001db14:	0f b6 c0             	movzx  eax,al
c001db17:	50                   	push   eax
c001db18:	e8 0f f2 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001db1d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001db23:	5f                   	pop    edi
c001db24:	bf 64 00 00 00       	mov    edi,0x64
c001db29:	58                   	pop    eax
c001db2a:	6a 0f                	push   0xf
c001db2c:	6a 00                	push   0x0
c001db2e:	e8 0a f2 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001db33:	5a                   	pop    edx
c001db34:	0f b6 c0             	movzx  eax,al
c001db37:	59                   	pop    ecx
c001db38:	50                   	push   eax
c001db39:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db3e:	99                   	cdq    
c001db3f:	f7 ff                	idiv   edi
c001db41:	99                   	cdq    
c001db42:	f7 fb                	idiv   ebx
c001db44:	8d 42 30             	lea    eax,[edx+0x30]
c001db47:	0f b6 c0             	movzx  eax,al
c001db4a:	50                   	push   eax
c001db4b:	e8 dc f1 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001db50:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001db56:	58                   	pop    eax
c001db57:	5a                   	pop    edx
c001db58:	6a 0f                	push   0xf
c001db5a:	6a 00                	push   0x0
c001db5c:	e8 dc f1 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001db61:	59                   	pop    ecx
c001db62:	0f b6 c0             	movzx  eax,al
c001db65:	5a                   	pop    edx
c001db66:	50                   	push   eax
c001db67:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db6c:	99                   	cdq    
c001db6d:	f7 fb                	idiv   ebx
c001db6f:	99                   	cdq    
c001db70:	f7 fb                	idiv   ebx
c001db72:	8d 42 30             	lea    eax,[edx+0x30]
c001db75:	0f b6 c0             	movzx  eax,al
c001db78:	50                   	push   eax
c001db79:	e8 ae f1 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001db7e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db84:	59                   	pop    ecx
c001db85:	58                   	pop    eax
c001db86:	6a 0f                	push   0xf
c001db88:	6a 00                	push   0x0
c001db8a:	e8 ae f1 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001db8f:	5a                   	pop    edx
c001db90:	0f b6 c0             	movzx  eax,al
c001db93:	59                   	pop    ecx
c001db94:	50                   	push   eax
c001db95:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db9a:	99                   	cdq    
c001db9b:	f7 fb                	idiv   ebx
c001db9d:	8d 42 30             	lea    eax,[edx+0x30]
c001dba0:	0f b6 c0             	movzx  eax,al
c001dba3:	50                   	push   eax
c001dba4:	e8 83 f1 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dba9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dbaf:	58                   	pop    eax
c001dbb0:	5a                   	pop    edx
c001dbb1:	6a 0f                	push   0xf
c001dbb3:	6a 00                	push   0x0
c001dbb5:	e8 83 f1 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dbba:	59                   	pop    ecx
c001dbbb:	0f b6 c0             	movzx  eax,al
c001dbbe:	5a                   	pop    edx
c001dbbf:	b9 10 27 00 00       	mov    ecx,0x2710
c001dbc4:	50                   	push   eax
c001dbc5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbca:	99                   	cdq    
c001dbcb:	f7 f9                	idiv   ecx
c001dbcd:	99                   	cdq    
c001dbce:	f7 fb                	idiv   ebx
c001dbd0:	8d 42 30             	lea    eax,[edx+0x30]
c001dbd3:	0f b6 c0             	movzx  eax,al
c001dbd6:	50                   	push   eax
c001dbd7:	e8 50 f1 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dbdc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dbe2:	59                   	pop    ecx
c001dbe3:	58                   	pop    eax
c001dbe4:	6a 0f                	push   0xf
c001dbe6:	6a 00                	push   0x0
c001dbe8:	e8 50 f1 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dbed:	5a                   	pop    edx
c001dbee:	0f b6 c0             	movzx  eax,al
c001dbf1:	59                   	pop    ecx
c001dbf2:	50                   	push   eax
c001dbf3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbf8:	99                   	cdq    
c001dbf9:	f7 fd                	idiv   ebp
c001dbfb:	99                   	cdq    
c001dbfc:	f7 fb                	idiv   ebx
c001dbfe:	8d 42 30             	lea    eax,[edx+0x30]
c001dc01:	0f b6 c0             	movzx  eax,al
c001dc04:	50                   	push   eax
c001dc05:	e8 22 f1 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dc0a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dc10:	5d                   	pop    ebp
c001dc11:	58                   	pop    eax
c001dc12:	6a 0f                	push   0xf
c001dc14:	6a 00                	push   0x0
c001dc16:	e8 22 f1 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dc1b:	5a                   	pop    edx
c001dc1c:	0f b6 c0             	movzx  eax,al
c001dc1f:	59                   	pop    ecx
c001dc20:	50                   	push   eax
c001dc21:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc26:	99                   	cdq    
c001dc27:	f7 ff                	idiv   edi
c001dc29:	99                   	cdq    
c001dc2a:	f7 fb                	idiv   ebx
c001dc2c:	8d 42 30             	lea    eax,[edx+0x30]
c001dc2f:	0f b6 c0             	movzx  eax,al
c001dc32:	50                   	push   eax
c001dc33:	e8 f4 f0 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dc38:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dc3e:	5f                   	pop    edi
c001dc3f:	5d                   	pop    ebp
c001dc40:	6a 0f                	push   0xf
c001dc42:	6a 00                	push   0x0
c001dc44:	e8 f4 f0 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dc49:	5a                   	pop    edx
c001dc4a:	0f b6 c0             	movzx  eax,al
c001dc4d:	59                   	pop    ecx
c001dc4e:	50                   	push   eax
c001dc4f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc54:	99                   	cdq    
c001dc55:	f7 fb                	idiv   ebx
c001dc57:	99                   	cdq    
c001dc58:	f7 fb                	idiv   ebx
c001dc5a:	8d 42 30             	lea    eax,[edx+0x30]
c001dc5d:	0f b6 c0             	movzx  eax,al
c001dc60:	50                   	push   eax
c001dc61:	e8 c6 f0 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dc66:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dc6c:	5f                   	pop    edi
c001dc6d:	5d                   	pop    ebp
c001dc6e:	6a 0f                	push   0xf
c001dc70:	6a 00                	push   0x0
c001dc72:	e8 c6 f0 ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dc77:	5a                   	pop    edx
c001dc78:	0f b6 c0             	movzx  eax,al
c001dc7b:	59                   	pop    ecx
c001dc7c:	50                   	push   eax
c001dc7d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc82:	99                   	cdq    
c001dc83:	f7 fb                	idiv   ebx
c001dc85:	83 c2 30             	add    edx,0x30
c001dc88:	0f b6 d2             	movzx  edx,dl
c001dc8b:	52                   	push   edx
c001dc8c:	e8 9b f0 ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dc91:	83 c4 10             	add    esp,0x10
c001dc94:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc9a:	eb 05                	jmp    c001dca1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc9c:	be 01 00 00 00       	mov    esi,0x1
c001dca1:	83 c4 0c             	add    esp,0xc
c001dca4:	89 f0                	mov    eax,esi
c001dca6:	5b                   	pop    ebx
c001dca7:	5e                   	pop    esi
c001dca8:	5f                   	pop    edi
c001dca9:	5d                   	pop    ebp
c001dcaa:	c3                   	ret    
c001dcab:	90                   	nop

c001dcac <SATA::write(unsigned long long, int, void*)>:
c001dcac:	55                   	push   ebp
c001dcad:	b8 04 00 00 00       	mov    eax,0x4
c001dcb2:	57                   	push   edi
c001dcb3:	56                   	push   esi
c001dcb4:	53                   	push   ebx
c001dcb5:	83 ec 1c             	sub    esp,0x1c
c001dcb8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dcbc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dcc0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dcc3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dcc7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dccb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dcd1:	0f 87 32 02 00 00    	ja     c001df09 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dcd7:	b8 06 00 00 00       	mov    eax,0x6
c001dcdc:	85 ff                	test   edi,edi
c001dcde:	0f 84 25 02 00 00    	je     c001df09 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dce4:	89 ee                	mov    esi,ebp
c001dce6:	c1 e6 09             	shl    esi,0x9
c001dce9:	01 fe                	add    esi,edi
c001dceb:	89 c8                	mov    eax,ecx
c001dced:	89 da                	mov    edx,ebx
c001dcef:	83 c0 01             	add    eax,0x1
c001dcf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcf6:	83 d2 00             	adc    edx,0x0
c001dcf9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcfd:	50                   	push   eax
c001dcfe:	50                   	push   eax
c001dcff:	6a 01                	push   0x1
c001dd01:	57                   	push   edi
c001dd02:	81 c7 00 02 00 00    	add    edi,0x200
c001dd08:	6a 01                	push   0x1
c001dd0a:	53                   	push   ebx
c001dd0b:	51                   	push   ecx
c001dd0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd10:	e8 f3 fa ff ff       	call   c001d808 <SATA::access(unsigned long long, int, void*, bool)>
c001dd15:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dd19:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dd1d:	83 c4 20             	add    esp,0x20
c001dd20:	39 f7                	cmp    edi,esi
c001dd22:	75 c7                	jne    c001dceb <SATA::write(unsigned long long, int, void*)+0x3f>
c001dd24:	bb 0a 00 00 00       	mov    ebx,0xa
c001dd29:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dd2f:	bd 10 27 00 00       	mov    ebp,0x2710
c001dd34:	50                   	push   eax
c001dd35:	50                   	push   eax
c001dd36:	6a 0f                	push   0xf
c001dd38:	6a 00                	push   0x0
c001dd3a:	e8 fe ef ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dd3f:	5a                   	pop    edx
c001dd40:	0f b6 c0             	movzx  eax,al
c001dd43:	59                   	pop    ecx
c001dd44:	50                   	push   eax
c001dd45:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd4a:	99                   	cdq    
c001dd4b:	f7 fd                	idiv   ebp
c001dd4d:	99                   	cdq    
c001dd4e:	f7 fb                	idiv   ebx
c001dd50:	8d 42 30             	lea    eax,[edx+0x30]
c001dd53:	0f b6 c0             	movzx  eax,al
c001dd56:	50                   	push   eax
c001dd57:	e8 d0 ef ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dd5c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd62:	5e                   	pop    esi
c001dd63:	5f                   	pop    edi
c001dd64:	bf e8 03 00 00       	mov    edi,0x3e8
c001dd69:	6a 0f                	push   0xf
c001dd6b:	6a 00                	push   0x0
c001dd6d:	e8 cb ef ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dd72:	5a                   	pop    edx
c001dd73:	0f b6 c0             	movzx  eax,al
c001dd76:	59                   	pop    ecx
c001dd77:	50                   	push   eax
c001dd78:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd7d:	99                   	cdq    
c001dd7e:	f7 ff                	idiv   edi
c001dd80:	99                   	cdq    
c001dd81:	f7 fb                	idiv   ebx
c001dd83:	8d 42 30             	lea    eax,[edx+0x30]
c001dd86:	0f b6 c0             	movzx  eax,al
c001dd89:	50                   	push   eax
c001dd8a:	e8 9d ef ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dd8f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd95:	5e                   	pop    esi
c001dd96:	be 64 00 00 00       	mov    esi,0x64
c001dd9b:	58                   	pop    eax
c001dd9c:	6a 0f                	push   0xf
c001dd9e:	6a 00                	push   0x0
c001dda0:	e8 98 ef ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dda5:	5a                   	pop    edx
c001dda6:	0f b6 c0             	movzx  eax,al
c001dda9:	59                   	pop    ecx
c001ddaa:	50                   	push   eax
c001ddab:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddb0:	99                   	cdq    
c001ddb1:	f7 fe                	idiv   esi
c001ddb3:	99                   	cdq    
c001ddb4:	f7 fb                	idiv   ebx
c001ddb6:	8d 42 30             	lea    eax,[edx+0x30]
c001ddb9:	0f b6 c0             	movzx  eax,al
c001ddbc:	50                   	push   eax
c001ddbd:	e8 6a ef ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ddc2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ddc8:	58                   	pop    eax
c001ddc9:	5a                   	pop    edx
c001ddca:	6a 0f                	push   0xf
c001ddcc:	6a 00                	push   0x0
c001ddce:	e8 6a ef ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001ddd3:	59                   	pop    ecx
c001ddd4:	0f b6 c0             	movzx  eax,al
c001ddd7:	5a                   	pop    edx
c001ddd8:	50                   	push   eax
c001ddd9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddde:	99                   	cdq    
c001dddf:	f7 fb                	idiv   ebx
c001dde1:	99                   	cdq    
c001dde2:	f7 fb                	idiv   ebx
c001dde4:	8d 42 30             	lea    eax,[edx+0x30]
c001dde7:	0f b6 c0             	movzx  eax,al
c001ddea:	50                   	push   eax
c001ddeb:	e8 3c ef ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ddf0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ddf6:	59                   	pop    ecx
c001ddf7:	58                   	pop    eax
c001ddf8:	6a 0f                	push   0xf
c001ddfa:	6a 00                	push   0x0
c001ddfc:	e8 3c ef ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001de01:	5a                   	pop    edx
c001de02:	0f b6 c0             	movzx  eax,al
c001de05:	59                   	pop    ecx
c001de06:	50                   	push   eax
c001de07:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de0c:	99                   	cdq    
c001de0d:	f7 fb                	idiv   ebx
c001de0f:	83 c2 30             	add    edx,0x30
c001de12:	0f b6 d2             	movzx  edx,dl
c001de15:	52                   	push   edx
c001de16:	e8 11 ef ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001de1b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001de21:	58                   	pop    eax
c001de22:	5a                   	pop    edx
c001de23:	6a 0f                	push   0xf
c001de25:	6a 00                	push   0x0
c001de27:	e8 11 ef ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001de2c:	59                   	pop    ecx
c001de2d:	0f b6 c0             	movzx  eax,al
c001de30:	5a                   	pop    edx
c001de31:	50                   	push   eax
c001de32:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de37:	99                   	cdq    
c001de38:	f7 fd                	idiv   ebp
c001de3a:	99                   	cdq    
c001de3b:	f7 fb                	idiv   ebx
c001de3d:	8d 42 30             	lea    eax,[edx+0x30]
c001de40:	0f b6 c0             	movzx  eax,al
c001de43:	50                   	push   eax
c001de44:	e8 e3 ee ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001de49:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001de4f:	59                   	pop    ecx
c001de50:	5d                   	pop    ebp
c001de51:	6a 0f                	push   0xf
c001de53:	6a 00                	push   0x0
c001de55:	e8 e3 ee ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001de5a:	5a                   	pop    edx
c001de5b:	0f b6 c0             	movzx  eax,al
c001de5e:	59                   	pop    ecx
c001de5f:	50                   	push   eax
c001de60:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de65:	99                   	cdq    
c001de66:	f7 ff                	idiv   edi
c001de68:	99                   	cdq    
c001de69:	f7 fb                	idiv   ebx
c001de6b:	8d 42 30             	lea    eax,[edx+0x30]
c001de6e:	0f b6 c0             	movzx  eax,al
c001de71:	50                   	push   eax
c001de72:	e8 b5 ee ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001de77:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de7d:	5f                   	pop    edi
c001de7e:	5d                   	pop    ebp
c001de7f:	6a 0f                	push   0xf
c001de81:	6a 00                	push   0x0
c001de83:	e8 b5 ee ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001de88:	5a                   	pop    edx
c001de89:	0f b6 c0             	movzx  eax,al
c001de8c:	59                   	pop    ecx
c001de8d:	50                   	push   eax
c001de8e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de93:	99                   	cdq    
c001de94:	f7 fe                	idiv   esi
c001de96:	99                   	cdq    
c001de97:	f7 fb                	idiv   ebx
c001de99:	8d 42 30             	lea    eax,[edx+0x30]
c001de9c:	0f b6 c0             	movzx  eax,al
c001de9f:	50                   	push   eax
c001dea0:	e8 87 ee ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001dea5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001deab:	5e                   	pop    esi
c001deac:	5f                   	pop    edi
c001dead:	6a 0f                	push   0xf
c001deaf:	6a 00                	push   0x0
c001deb1:	e8 87 ee ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001deb6:	5d                   	pop    ebp
c001deb7:	0f b6 c0             	movzx  eax,al
c001deba:	5a                   	pop    edx
c001debb:	50                   	push   eax
c001debc:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dec1:	99                   	cdq    
c001dec2:	f7 fb                	idiv   ebx
c001dec4:	99                   	cdq    
c001dec5:	f7 fb                	idiv   ebx
c001dec7:	8d 42 30             	lea    eax,[edx+0x30]
c001deca:	0f b6 c0             	movzx  eax,al
c001decd:	50                   	push   eax
c001dece:	e8 59 ee ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001ded3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ded9:	59                   	pop    ecx
c001deda:	5e                   	pop    esi
c001dedb:	6a 0f                	push   0xf
c001dedd:	6a 00                	push   0x0
c001dedf:	e8 59 ee ff ff       	call   c001cd3d <combineColours(unsigned char, unsigned char)>
c001dee4:	5f                   	pop    edi
c001dee5:	0f b6 c0             	movzx  eax,al
c001dee8:	5d                   	pop    ebp
c001dee9:	50                   	push   eax
c001deea:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001deef:	99                   	cdq    
c001def0:	f7 fb                	idiv   ebx
c001def2:	83 c2 30             	add    edx,0x30
c001def5:	0f b6 d2             	movzx  edx,dl
c001def8:	52                   	push   edx
c001def9:	e8 2e ee ff ff       	call   c001cd2c <combineCharAndColour(char, unsigned char)>
c001defe:	83 c4 10             	add    esp,0x10
c001df01:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001df07:	31 c0                	xor    eax,eax
c001df09:	83 c4 1c             	add    esp,0x1c
c001df0c:	5b                   	pop    ebx
c001df0d:	5e                   	pop    esi
c001df0e:	5f                   	pop    edi
c001df0f:	5d                   	pop    ebp
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <SATAPI::write(unsigned long long, int, void*)>:
c001df12:	b8 03 00 00 00       	mov    eax,0x3
c001df17:	c3                   	ret    

c001df18 <SATAPI::close(int, int, void*)>:
c001df18:	83 ec 0c             	sub    esp,0xc
c001df1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001df25:	85 c0                	test   eax,eax
c001df27:	74 0c                	je     c001df35 <SATAPI::close(int, int, void*)+0x1d>
c001df29:	83 ec 0c             	sub    esp,0xc
c001df2c:	8b 10                	mov    edx,DWORD PTR [eax]
c001df2e:	50                   	push   eax
c001df2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001df32:	83 c4 10             	add    esp,0x10
c001df35:	31 c0                	xor    eax,eax
c001df37:	83 c4 0c             	add    esp,0xc
c001df3a:	c3                   	ret    
c001df3b:	90                   	nop

c001df3c <SATAPI::SATAPI()>:
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df43:	83 ec 04             	sub    esp,0x4
c001df46:	68 00 08 00 00       	push   0x800
c001df4b:	68 5c 2f 02 c0       	push   0xc0022f5c
c001df50:	50                   	push   eax
c001df51:	e8 08 ec fe ff       	call   c000cb5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df56:	83 c4 10             	add    esp,0x10
c001df59:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001df5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df62:	89 10                	mov    DWORD PTR [eax],edx
c001df64:	90                   	nop
c001df65:	83 c4 0c             	add    esp,0xc
c001df68:	c3                   	ret    
c001df69:	90                   	nop

c001df6a <SATAPI::diskRemoved()>:
c001df6a:	c3                   	ret    
c001df6b:	90                   	nop

c001df6c <SATAPI::diskInserted()>:
c001df6c:	83 ec 18             	sub    esp,0x18
c001df6f:	68 68 2f 02 c0       	push   0xc0022f68
c001df74:	e8 cc c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001df79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df7d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df84:	83 c4 1c             	add    esp,0x1c
c001df87:	c3                   	ret    

c001df88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df88:	55                   	push   ebp
c001df89:	57                   	push   edi
c001df8a:	56                   	push   esi
c001df8b:	53                   	push   ebx
c001df8c:	83 ec 34             	sub    esp,0x34
c001df8f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df93:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df97:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001df9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df9f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001dfa3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001dfa9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dfaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dfb3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001dfb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dfbd:	83 c0 02             	add    eax,0x2
c001dfc0:	c1 e0 07             	shl    eax,0x7
c001dfc3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dfc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfcf:	c1 e0 07             	shl    eax,0x7
c001dfd2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dfd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfda:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dfe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfe8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfee:	e8 21 e5 ff ff       	call   c001c514 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dff3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	b8 01 00 00 00       	mov    eax,0x1
c001dfff:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e004:	0f 84 53 02 00 00    	je     c001e25d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e00a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e014:	8b 00                	mov    eax,DWORD PTR [eax]
c001e016:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e01c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e022:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e026:	c1 e1 05             	shl    ecx,0x5
c001e029:	01 c8                	add    eax,ecx
c001e02b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e02d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e033:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e039:	89 08                	mov    DWORD PTR [eax],ecx
c001e03b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e041:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e047:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e04d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e050:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e053:	50                   	push   eax
c001e054:	68 90 00 00 00       	push   0x90
c001e059:	6a 00                	push   0x0
c001e05b:	53                   	push   ebx
c001e05c:	e8 8f 24 fe ff       	call   c00004f0 <memset>
c001e061:	b9 0c 00 00 00       	mov    ecx,0xc
c001e066:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e06a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e06c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e072:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e076:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e07c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e080:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e084:	48                   	dec    eax
c001e085:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e08a:	89 c1                	mov    ecx,eax
c001e08c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e092:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e097:	09 c8                	or     eax,ecx
c001e099:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e09f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e0a5:	83 c8 80             	or     eax,0xffffff80
c001e0a8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e0ae:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e0b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e0b5:	25 00 7f 00 00       	and    eax,0x7f00
c001e0ba:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e0be:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e0c3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e0c6:	89 d0                	mov    eax,edx
c001e0c8:	c1 ea 18             	shr    edx,0x18
c001e0cb:	c1 e8 10             	shr    eax,0x10
c001e0ce:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e0d1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e0d4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e0d8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e0db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0df:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e0e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e0e6:	83 c4 10             	add    esp,0x10
c001e0e9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e0ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0f1:	31 c0                	xor    eax,eax
c001e0f3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e0f9:	80 e1 88             	and    cl,0x88
c001e0fc:	74 0a                	je     c001e108 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e0fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e103:	74 0a                	je     c001e10f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e105:	40                   	inc    eax
c001e106:	eb eb                	jmp    c001e0f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e108:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e10d:	75 43                	jne    c001e152 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e10f:	83 ec 0c             	sub    esp,0xc
c001e112:	68 80 2f 02 c0       	push   0xc0022f80
c001e117:	e8 29 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e11c:	58                   	pop    eax
c001e11d:	5a                   	pop    edx
c001e11e:	68 95 2f 02 c0       	push   0xc0022f95
c001e123:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e129:	e8 78 a9 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e12e:	59                   	pop    ecx
c001e12f:	5b                   	pop    ebx
c001e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e134:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e13a:	e8 6f e4 ff ff       	call   c001c5ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e13f:	5e                   	pop    esi
c001e140:	5f                   	pop    edi
c001e141:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e145:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e14b:	e8 3e e4 ff ff       	call   c001c58e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e150:	eb 48                	jmp    c001e19a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e152:	be 01 00 00 00       	mov    esi,0x1
c001e157:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e15b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e15f:	d3 e6                	shl    esi,cl
c001e161:	c1 e7 07             	shl    edi,0x7
c001e164:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e16a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e16f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e173:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e179:	85 c6                	test   esi,eax
c001e17b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e181:	0f 84 a3 00 00 00    	je     c001e22a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e187:	0f ba e0 1e          	bt     eax,0x1e
c001e18b:	73 1a                	jae    c001e1a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e18d:	83 ec 0c             	sub    esp,0xc
c001e190:	68 a7 2f 02 c0       	push   0xc0022fa7
c001e195:	e8 ab c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e19a:	83 c4 10             	add    esp,0x10
c001e19d:	b8 01 00 00 00       	mov    eax,0x1
c001e1a2:	e9 b6 00 00 00       	jmp    c001e25d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e1a7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e1ad:	83 f8 0d             	cmp    eax,0xd
c001e1b0:	77 0a                	ja     c001e1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	68 c8 00 00 00       	push   0xc8
c001e1ba:	eb 28                	jmp    c001e1e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e1bc:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e1c2:	83 f8 0d             	cmp    eax,0xd
c001e1c5:	77 0a                	ja     c001e1d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	68 58 02 00 00       	push   0x258
c001e1cf:	eb 13                	jmp    c001e1e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e1d1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e1d7:	83 f8 06             	cmp    eax,0x6
c001e1da:	77 10                	ja     c001e1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e1dc:	83 ec 0c             	sub    esp,0xc
c001e1df:	68 dc 05 00 00       	push   0x5dc
c001e1e4:	e8 c7 7d ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001e1e9:	83 c4 10             	add    esp,0x10
c001e1ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1f0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e1f3:	75 06                	jne    c001e1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e1f5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e1f9:	74 15                	je     c001e210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e1fb:	83 fb 06             	cmp    ebx,0x6
c001e1fe:	77 10                	ja     c001e210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	68 c4 09 00 00       	push   0x9c4
c001e208:	e8 a3 7d ff ff       	call   c0015fb0 <milliTenthSleep(unsigned int)>
c001e20d:	83 c4 10             	add    esp,0x10
c001e210:	43                   	inc    ebx
c001e211:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e217:	0f 85 56 ff ff ff    	jne    c001e173 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e21d:	83 ec 0c             	sub    esp,0xc
c001e220:	68 ba 2f 02 c0       	push   0xc0022fba
c001e225:	e9 6b ff ff ff       	jmp    c001e195 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e22a:	0f ba e0 1e          	bt     eax,0x1e
c001e22e:	73 0d                	jae    c001e23d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	68 ce 2f 02 c0       	push   0xc0022fce
c001e238:	e9 58 ff ff ff       	jmp    c001e195 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e23d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e242:	74 17                	je     c001e25b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e244:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e249:	74 10                	je     c001e25b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e24b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e251:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e255:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e259:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e25b:	31 c0                	xor    eax,eax
c001e25d:	83 c4 2c             	add    esp,0x2c
c001e260:	5b                   	pop    ebx
c001e261:	5e                   	pop    esi
c001e262:	5f                   	pop    edi
c001e263:	5d                   	pop    ebp
c001e264:	c3                   	ret    
c001e265:	90                   	nop

c001e266 <SATAPI::eject()>:
c001e266:	57                   	push   edi
c001e267:	b9 03 00 00 00       	mov    ecx,0x3
c001e26c:	83 ec 18             	sub    esp,0x18
c001e26f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e273:	fc                   	cld    
c001e274:	31 c0                	xor    eax,eax
c001e276:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e278:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e27d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e282:	50                   	push   eax
c001e283:	6a 00                	push   0x0
c001e285:	6a 00                	push   0x0
c001e287:	6a 00                	push   0x0
c001e289:	6a 00                	push   0x0
c001e28b:	6a 02                	push   0x2
c001e28d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e291:	50                   	push   eax
c001e292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e296:	e8 ed fc ff ff       	call   c001df88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e29b:	31 c0                	xor    eax,eax
c001e29d:	83 c4 38             	add    esp,0x38
c001e2a0:	5f                   	pop    edi
c001e2a1:	c3                   	ret    

c001e2a2 <SATAPI::detectMedia()>:
c001e2a2:	53                   	push   ebx
c001e2a3:	83 ec 14             	sub    esp,0x14
c001e2a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e2aa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e2b0:	e8 27 02 ff ff       	call   c000e4dc <VCache::writeWriteBuffer()>
c001e2b5:	59                   	pop    ecx
c001e2b6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e2bc:	e8 0b 02 ff ff       	call   c000e4cc <VCache::invalidateReadBuffer()>
c001e2c1:	c7 04 24 e3 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fe3
c001e2c8:	e8 78 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e2cd:	83 c4 10             	add    esp,0x10
c001e2d0:	31 c0                	xor    eax,eax
c001e2d2:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e2d9:	85 d2                	test   edx,edx
c001e2db:	74 0f                	je     c001e2ec <SATAPI::detectMedia()+0x4a>
c001e2dd:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e2e3:	75 07                	jne    c001e2ec <SATAPI::detectMedia()+0x4a>
c001e2e5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e2ec:	40                   	inc    eax
c001e2ed:	83 f8 1a             	cmp    eax,0x1a
c001e2f0:	75 e0                	jne    c001e2d2 <SATAPI::detectMedia()+0x30>
c001e2f2:	83 c4 08             	add    esp,0x8
c001e2f5:	5b                   	pop    ebx
c001e2f6:	c3                   	ret    
c001e2f7:	90                   	nop

c001e2f8 <SATAPI::open(int, int, void*)>:
c001e2f8:	56                   	push   esi
c001e2f9:	53                   	push   ebx
c001e2fa:	51                   	push   ecx
c001e2fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e303:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e30d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e313:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e31d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e321:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e32b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e331:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e338:	e8 82 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e33d:	89 c6                	mov    esi,eax
c001e33f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e345:	81 c6 00 10 00 00    	add    esi,0x1000
c001e34b:	e8 6f 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e350:	39 c6                	cmp    esi,eax
c001e352:	74 10                	je     c001e364 <SATAPI::open(int, int, void*)+0x6c>
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	68 f8 2f 02 c0       	push   0xc0022ff8
c001e35c:	e8 60 30 ff ff       	call   c00113c1 <KePanic(char const*)>
c001e361:	83 c4 10             	add    esp,0x10
c001e364:	83 ec 0c             	sub    esp,0xc
c001e367:	6a 02                	push   0x2
c001e369:	e8 9f b2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e36e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e374:	6a 03                	push   0x3
c001e376:	50                   	push   eax
c001e377:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e37d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e383:	e8 98 b9 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e388:	83 c4 14             	add    esp,0x14
c001e38b:	68 78 01 00 00       	push   0x178
c001e390:	e8 21 97 fe ff       	call   c0007ab6 <malloc>
c001e395:	83 c4 0c             	add    esp,0xc
c001e398:	89 c6                	mov    esi,eax
c001e39a:	6a 00                	push   0x0
c001e39c:	68 ff ff ff 7f       	push   0x7fffffff
c001e3a1:	6a 00                	push   0x0
c001e3a3:	6a 00                	push   0x0
c001e3a5:	53                   	push   ebx
c001e3a6:	68 0e 30 02 c0       	push   0xc002300e
c001e3ab:	50                   	push   eax
c001e3ac:	e8 87 f5 fe ff       	call   c000d938 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e3b1:	83 c4 14             	add    esp,0x14
c001e3b4:	56                   	push   esi
c001e3b5:	e8 3e f6 fe ff       	call   c000d9f8 <LogicalDisk::assignDriveLetter()>
c001e3ba:	5a                   	pop    edx
c001e3bb:	0f be c0             	movsx  eax,al
c001e3be:	59                   	pop    ecx
c001e3bf:	50                   	push   eax
c001e3c0:	68 60 2e 02 c0       	push   0xc0022e60
c001e3c5:	e8 7b c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3ca:	58                   	pop    eax
c001e3cb:	5a                   	pop    edx
c001e3cc:	56                   	push   esi
c001e3cd:	53                   	push   ebx
c001e3ce:	e8 bf e3 fe ff       	call   c000c792 <Device::addChild(Device*)>
c001e3d3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e3d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3dc:	e8 e5 e7 fe ff       	call   c000cbc6 <PhysicalDisk::startCache()>
c001e3e1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e3e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3eb:	e8 b2 fe ff ff       	call   c001e2a2 <SATAPI::detectMedia()>
c001e3f0:	83 c4 14             	add    esp,0x14
c001e3f3:	31 c0                	xor    eax,eax
c001e3f5:	5b                   	pop    ebx
c001e3f6:	5e                   	pop    esi
c001e3f7:	c3                   	ret    

c001e3f8 <SATAPI::read(unsigned long long, int, void*)>:
c001e3f8:	57                   	push   edi
c001e3f9:	56                   	push   esi
c001e3fa:	53                   	push   ebx
c001e3fb:	83 ec 30             	sub    esp,0x30
c001e3fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e402:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e406:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e40a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e412:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e416:	83 fe 04             	cmp    esi,0x4
c001e419:	7e 10                	jle    c001e42b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e41b:	83 ec 0c             	sub    esp,0xc
c001e41e:	68 1c 30 02 c0       	push   0xc002301c
c001e423:	e8 99 2f ff ff       	call   c00113c1 <KePanic(char const*)>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e431:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e437:	51                   	push   ecx
c001e438:	50                   	push   eax
c001e439:	83 c0 02             	add    eax,0x2
c001e43c:	c1 e0 07             	shl    eax,0x7
c001e43f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e445:	50                   	push   eax
c001e446:	52                   	push   edx
c001e447:	e8 8c e1 ff ff       	call   c001c5d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e44c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e450:	b9 03 00 00 00       	mov    ecx,0x3
c001e455:	fc                   	cld    
c001e456:	31 c0                	xor    eax,eax
c001e458:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e45a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e45f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e464:	83 c4 0c             	add    esp,0xc
c001e467:	6a 00                	push   0x0
c001e469:	6a 00                	push   0x0
c001e46b:	6a 00                	push   0x0
c001e46d:	6a 00                	push   0x0
c001e46f:	6a 02                	push   0x2
c001e471:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e475:	50                   	push   eax
c001e476:	53                   	push   ebx
c001e477:	e8 0c fb ff ff       	call   c001df88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e47c:	83 c4 20             	add    esp,0x20
c001e47f:	85 c0                	test   eax,eax
c001e481:	75 44                	jne    c001e4c7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e483:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e487:	b9 03 00 00 00       	mov    ecx,0x3
c001e48c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e48e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e492:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e497:	0f c8                	bswap  eax
c001e499:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e49d:	89 f0                	mov    eax,esi
c001e49f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e4a3:	50                   	push   eax
c001e4a4:	56                   	push   esi
c001e4a5:	c1 e6 0b             	shl    esi,0xb
c001e4a8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e4ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e4b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e4b4:	56                   	push   esi
c001e4b5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e4b9:	50                   	push   eax
c001e4ba:	53                   	push   ebx
c001e4bb:	e8 c8 fa ff ff       	call   c001df88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e4c0:	83 c4 20             	add    esp,0x20
c001e4c3:	85 c0                	test   eax,eax
c001e4c5:	74 14                	je     c001e4db <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e4c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4cb:	83 ec 0c             	sub    esp,0xc
c001e4ce:	53                   	push   ebx
c001e4cf:	e8 ce fd ff ff       	call   c001e2a2 <SATAPI::detectMedia()>
c001e4d4:	83 c4 10             	add    esp,0x10
c001e4d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4db:	83 c4 30             	add    esp,0x30
c001e4de:	5b                   	pop    ebx
c001e4df:	5e                   	pop    esi
c001e4e0:	5f                   	pop    edi
c001e4e1:	c3                   	ret    

c001e4e2 <IOAPIC::close(int, int, void*)>:
c001e4e2:	b8 00 00 00 00       	mov    eax,0x0
c001e4e7:	c3                   	ret    

c001e4e8 <apicGetBase()>:
c001e4e8:	55                   	push   ebp
c001e4e9:	89 e5                	mov    ebp,esp
c001e4eb:	83 ec 18             	sub    esp,0x18
c001e4ee:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4f3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e4f9:	83 e0 08             	and    eax,0x8
c001e4fc:	0f b6 c0             	movzx  eax,al
c001e4ff:	85 c0                	test   eax,eax
c001e501:	75 07                	jne    c001e50a <apicGetBase()+0x22>
c001e503:	b8 00 00 00 00       	mov    eax,0x0
c001e508:	eb 21                	jmp    c001e52b <apicGetBase()+0x43>
c001e50a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e50f:	83 ec 08             	sub    esp,0x8
c001e512:	6a 1b                	push   0x1b
c001e514:	50                   	push   eax
c001e515:	e8 a6 8b fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e51a:	83 c4 10             	add    esp,0x10
c001e51d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e520:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e523:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e526:	25 00 00 ff ff       	and    eax,0xffff0000
c001e52b:	c9                   	leave  
c001e52c:	c3                   	ret    
c001e52d:	90                   	nop

c001e52e <IOAPIC::IOAPIC()>:
c001e52e:	83 ec 0c             	sub    esp,0xc
c001e531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e535:	83 ec 08             	sub    esp,0x8
c001e538:	68 80 30 02 c0       	push   0xc0023080
c001e53d:	50                   	push   eax
c001e53e:	e8 e7 e3 fe ff       	call   c000c92a <Device::Device(char const*)>
c001e543:	83 c4 10             	add    esp,0x10
c001e546:	ba 90 30 02 c0       	mov    edx,0xc0023090
c001e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54f:	89 10                	mov    DWORD PTR [eax],edx
c001e551:	90                   	nop
c001e552:	83 c4 0c             	add    esp,0xc
c001e555:	c3                   	ret    

c001e556 <apicOpen()>:
c001e556:	55                   	push   ebp
c001e557:	89 e5                	mov    ebp,esp
c001e559:	53                   	push   ebx
c001e55a:	83 ec 34             	sub    esp,0x34
c001e55d:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e562:	83 f0 01             	xor    eax,0x1
c001e565:	0f b6 c0             	movzx  eax,al
c001e568:	85 c0                	test   eax,eax
c001e56a:	0f 84 a3 00 00 00    	je     c001e613 <apicOpen()+0xbd>
c001e570:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e574:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e579:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e57d:	0f b6 c0             	movzx  eax,al
c001e580:	39 c2                	cmp    edx,eax
c001e582:	0f 83 84 00 00 00    	jae    c001e60c <apicOpen()+0xb6>
c001e588:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e58f:	83 ec 0c             	sub    esp,0xc
c001e592:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e595:	e8 1c 95 fe ff       	call   c0007ab6 <malloc>
c001e59a:	83 c4 10             	add    esp,0x10
c001e59d:	89 c3                	mov    ebx,eax
c001e59f:	83 ec 0c             	sub    esp,0xc
c001e5a2:	53                   	push   ebx
c001e5a3:	e8 86 ff ff ff       	call   c001e52e <IOAPIC::IOAPIC()>
c001e5a8:	83 c4 10             	add    esp,0x10
c001e5ab:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e5ae:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e5b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5b5:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e5bc:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e5c1:	83 c0 01             	add    eax,0x1
c001e5c4:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e5c9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e5ce:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e5d4:	83 ec 08             	sub    esp,0x8
c001e5d7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5da:	50                   	push   eax
c001e5db:	e8 b2 e1 fe ff       	call   c000c792 <Device::addChild(Device*)>
c001e5e0:	83 c4 10             	add    esp,0x10
c001e5e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e5e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5e8:	83 c0 08             	add    eax,0x8
c001e5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ed:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e5f1:	6a 00                	push   0x0
c001e5f3:	6a 00                	push   0x0
c001e5f5:	52                   	push   edx
c001e5f6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5f9:	ff d0                	call   eax
c001e5fb:	83 c4 10             	add    esp,0x10
c001e5fe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e601:	83 c0 01             	add    eax,0x1
c001e604:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e607:	e9 68 ff ff ff       	jmp    c001e574 <apicOpen()+0x1e>
c001e60c:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e613:	e8 d0 fe ff ff       	call   c001e4e8 <apicGetBase()>
c001e618:	05 f0 00 00 00       	add    eax,0xf0
c001e61d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e620:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e623:	8b 00                	mov    eax,DWORD PTR [eax]
c001e625:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e628:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e62f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e636:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e639:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e63c:	89 10                	mov    DWORD PTR [eax],edx
c001e63e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e645:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e64a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e64d:	7d 7c                	jge    c001e6cb <apicOpen()+0x175>
c001e64f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e652:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e659:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e65c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e65f:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e666:	c1 e8 08             	shr    eax,0x8
c001e669:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e66d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e670:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e677:	c1 e8 18             	shr    eax,0x18
c001e67a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e67d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e681:	3d ff 00 00 00       	cmp    eax,0xff
c001e686:	75 3a                	jne    c001e6c2 <apicOpen()+0x16c>
c001e688:	e8 5b fe ff ff       	call   c001e4e8 <apicGetBase()>
c001e68d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e691:	83 fa 01             	cmp    edx,0x1
c001e694:	75 07                	jne    c001e69d <apicOpen()+0x147>
c001e696:	ba 60 03 00 00       	mov    edx,0x360
c001e69b:	eb 05                	jmp    c001e6a2 <apicOpen()+0x14c>
c001e69d:	ba 50 03 00 00       	mov    edx,0x350
c001e6a2:	01 d0                	add    eax,edx
c001e6a4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e6a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e6af:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e6b6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e6ba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6bd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e6c0:	89 10                	mov    DWORD PTR [eax],edx
c001e6c2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e6c6:	e9 7a ff ff ff       	jmp    c001e645 <apicOpen()+0xef>
c001e6cb:	90                   	nop
c001e6cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e6cf:	c9                   	leave  
c001e6d0:	c3                   	ret    
c001e6d1:	90                   	nop

c001e6d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e6d2:	55                   	push   ebp
c001e6d3:	89 e5                	mov    ebp,esp
c001e6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e6de:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6e1:	72 1d                	jb     c001e700 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ef:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e6f5:	01 d0                	add    eax,edx
c001e6f7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6fa:	73 04                	jae    c001e700 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6fc:	b0 01                	mov    al,0x1
c001e6fe:	eb 02                	jmp    c001e702 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e700:	b0 00                	mov    al,0x0
c001e702:	5d                   	pop    ebp
c001e703:	c3                   	ret    

c001e704 <IOAPIC::read(int)>:
c001e704:	55                   	push   ebp
c001e705:	89 e5                	mov    ebp,esp
c001e707:	83 ec 10             	sub    esp,0x10
c001e70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e70d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e713:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e716:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e719:	0f b6 d0             	movzx  edx,al
c001e71c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e71f:	89 10                	mov    DWORD PTR [eax],edx
c001e721:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e724:	83 c0 10             	add    eax,0x10
c001e727:	8b 00                	mov    eax,DWORD PTR [eax]
c001e729:	c9                   	leave  
c001e72a:	c3                   	ret    
c001e72b:	90                   	nop

c001e72c <IOAPIC::open(int, int, void*)>:
c001e72c:	55                   	push   ebp
c001e72d:	89 e5                	mov    ebp,esp
c001e72f:	57                   	push   edi
c001e730:	56                   	push   esi
c001e731:	53                   	push   ebx
c001e732:	83 ec 04             	sub    esp,0x4
c001e735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e738:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e73b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e744:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e74a:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e754:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e75d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e763:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e76a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e76d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e776:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e77f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e785:	0f b6 f0             	movzx  esi,al
c001e788:	89 d0                	mov    eax,edx
c001e78a:	ba 00 00 00 00       	mov    edx,0x0
c001e78f:	89 c7                	mov    edi,eax
c001e791:	83 e7 ff             	and    edi,0xffffffff
c001e794:	89 f9                	mov    ecx,edi
c001e796:	0f b6 da             	movzx  ebx,dl
c001e799:	89 c8                	mov    eax,ecx
c001e79b:	89 da                	mov    edx,ebx
c001e79d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e7a0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e7a3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e7a7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e7ab:	83 e0 00             	and    eax,0x0
c001e7ae:	09 d0                	or     eax,edx
c001e7b0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e7bd:	8d 50 01             	lea    edx,[eax+0x1]
c001e7c0:	88 d1                	mov    cl,dl
c001e7c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e7c5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e7cb:	0f b6 d0             	movzx  edx,al
c001e7ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7d1:	83 c2 08             	add    edx,0x8
c001e7d4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e7d8:	0f b6 c9             	movzx  ecx,cl
c001e7db:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e7e1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e7e5:	6a 01                	push   0x1
c001e7e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ea:	e8 15 ff ff ff       	call   c001e704 <IOAPIC::read(int)>
c001e7ef:	83 c4 08             	add    esp,0x8
c001e7f2:	c1 f8 10             	sar    eax,0x10
c001e7f5:	0f b6 c0             	movzx  eax,al
c001e7f8:	8d 50 01             	lea    edx,[eax+0x1]
c001e7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7fe:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e804:	b8 00 00 00 00       	mov    eax,0x0
c001e809:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e80c:	5b                   	pop    ebx
c001e80d:	5e                   	pop    esi
c001e80e:	5f                   	pop    edi
c001e80f:	5d                   	pop    ebp
c001e810:	c3                   	ret    
c001e811:	90                   	nop

c001e812 <IOAPIC::write(int, int)>:
c001e812:	55                   	push   ebp
c001e813:	89 e5                	mov    ebp,esp
c001e815:	83 ec 10             	sub    esp,0x10
c001e818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e81b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e821:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e824:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e827:	0f b6 d0             	movzx  edx,al
c001e82a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e82d:	89 10                	mov    DWORD PTR [eax],edx
c001e82f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e832:	8d 50 10             	lea    edx,[eax+0x10]
c001e835:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e838:	89 02                	mov    DWORD PTR [edx],eax
c001e83a:	90                   	nop
c001e83b:	c9                   	leave  
c001e83c:	c3                   	ret    
c001e83d:	90                   	nop

c001e83e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e83e:	55                   	push   ebp
c001e83f:	89 e5                	mov    ebp,esp
c001e841:	53                   	push   ebx
c001e842:	83 ec 2c             	sub    esp,0x2c
c001e845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e848:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e84b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e84e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e851:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e854:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e857:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e85a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e85d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e860:	88 d8                	mov    al,bl
c001e862:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e865:	88 c8                	mov    al,cl
c001e867:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e86a:	88 d0                	mov    al,dl
c001e86c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e86f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e873:	83 c0 08             	add    eax,0x8
c001e876:	01 c0                	add    eax,eax
c001e878:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e87b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e87f:	83 c0 08             	add    eax,0x8
c001e882:	01 c0                	add    eax,eax
c001e884:	83 c0 01             	add    eax,0x1
c001e887:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e88a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e88d:	50                   	push   eax
c001e88e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e891:	e8 6e fe ff ff       	call   c001e704 <IOAPIC::read(int)>
c001e896:	83 c4 08             	add    esp,0x8
c001e899:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e89c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e8a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e8a6:	c1 e0 18             	shl    eax,0x18
c001e8a9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e8ac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e8af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e8b2:	52                   	push   edx
c001e8b3:	50                   	push   eax
c001e8b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8b7:	e8 56 ff ff ff       	call   c001e812 <IOAPIC::write(int, int)>
c001e8bc:	83 c4 0c             	add    esp,0xc
c001e8bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8c2:	50                   	push   eax
c001e8c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8c6:	e8 39 fe ff ff       	call   c001e704 <IOAPIC::read(int)>
c001e8cb:	83 c4 08             	add    esp,0x8
c001e8ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e8d1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e8d8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e8df:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e8e6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e8ea:	85 c0                	test   eax,eax
c001e8ec:	74 09                	je     c001e8f7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e8ee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e8f5:	eb 07                	jmp    c001e8fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e8f7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e8fe:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e902:	85 c0                	test   eax,eax
c001e904:	74 09                	je     c001e90f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e906:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e90d:	eb 07                	jmp    c001e916 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e90f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e916:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e91d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e921:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e924:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e927:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e92a:	52                   	push   edx
c001e92b:	50                   	push   eax
c001e92c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e92f:	e8 de fe ff ff       	call   c001e812 <IOAPIC::write(int, int)>
c001e934:	83 c4 0c             	add    esp,0xc
c001e937:	90                   	nop
c001e938:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e93b:	c9                   	leave  
c001e93c:	c3                   	ret    
c001e93d:	66 90                	xchg   ax,ax
c001e93f:	90                   	nop

c001e940 <APICTimer::close(int, int, void*)>:
c001e940:	b8 00 00 00 00       	mov    eax,0x0
c001e945:	c3                   	ret    
c001e946:	66 90                	xchg   ax,ax

c001e948 <apicTimerHandler(regs*, void*)>:
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e94f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e951:	b8 10 27 00 00       	mov    eax,0x2710
c001e956:	ba 00 00 00 00       	mov    edx,0x0
c001e95b:	f7 f1                	div    ecx
c001e95d:	83 ec 0c             	sub    esp,0xc
c001e960:	50                   	push   eax
c001e961:	e8 8e f8 fe ff       	call   c000e1f4 <timerHandler(unsigned int)>
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	90                   	nop
c001e96a:	83 c4 0c             	add    esp,0xc
c001e96d:	c3                   	ret    
c001e96e:	66 90                	xchg   ax,ax

c001e970 <APICTimer::open(int, int, void*)>:
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	8b 00                	mov    eax,DWORD PTR [eax]
c001e979:	83 c0 24             	add    eax,0x24
c001e97c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e97e:	83 ec 08             	sub    esp,0x8
c001e981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e989:	ff d0                	call   eax
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e992:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e996:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9a4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e9aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9ae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	51                   	push   ecx
c001e9b8:	6a 01                	push   0x1
c001e9ba:	68 48 e9 01 c0       	push   0xc001e948
c001e9bf:	52                   	push   edx
c001e9c0:	50                   	push   eax
c001e9c1:	e8 78 dd fe ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9c6:	83 c4 20             	add    esp,0x20
c001e9c9:	89 c2                	mov    edx,eax
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9d5:	b8 00 00 00 00       	mov    eax,0x0
c001e9da:	83 c4 0c             	add    esp,0xc
c001e9dd:	c3                   	ret    
c001e9de:	66 90                	xchg   ax,ax

c001e9e0 <APICTimer::write(int)>:
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	83 ec 0c             	sub    esp,0xc
c001e9e6:	68 b4 30 02 c0       	push   0xc00230b4
c001e9eb:	e8 d1 29 ff ff       	call   c00113c1 <KePanic(char const*)>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea01:	90                   	nop
c001ea02:	83 c4 0c             	add    esp,0xc
c001ea05:	c3                   	ret    
c001ea06:	66 90                	xchg   ax,ax

c001ea08 <APICTimer::APICTimer()>:
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0f:	83 ec 08             	sub    esp,0x8
c001ea12:	68 c4 30 02 c0       	push   0xc00230c4
c001ea17:	50                   	push   eax
c001ea18:	e8 0b f7 fe ff       	call   c000e128 <Timer::Timer(char const*)>
c001ea1d:	83 c4 10             	add    esp,0x10
c001ea20:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c001ea25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea29:	89 10                	mov    DWORD PTR [eax],edx
c001ea2b:	90                   	nop
c001ea2c:	83 c4 0c             	add    esp,0xc
c001ea2f:	c3                   	ret    

c001ea30 <PIT::write(int)>:
c001ea30:	83 ec 10             	sub    esp,0x10
c001ea33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea45:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ea4a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ea4f:	89 c2                	mov    edx,eax
c001ea51:	c1 fa 1f             	sar    edx,0x1f
c001ea54:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ea58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea5c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ea63:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ea68:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ea6c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ea71:	ee                   	out    dx,al
c001ea72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea76:	0f b6 c0             	movzx  eax,al
c001ea79:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea80:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea84:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea88:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea8d:	ee                   	out    dx,al
c001ea8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea92:	c1 f8 08             	sar    eax,0x8
c001ea95:	0f b6 c0             	movzx  eax,al
c001ea98:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea9f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eaa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eaa7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eaac:	ee                   	out    dx,al
c001eaad:	90                   	nop
c001eaae:	83 c4 10             	add    esp,0x10
c001eab1:	c3                   	ret    
c001eab2:	66 90                	xchg   ax,ax

c001eab4 <pitHandler(regs*, void*)>:
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001eabd:	b8 10 27 00 00       	mov    eax,0x2710
c001eac2:	89 c2                	mov    edx,eax
c001eac4:	c1 fa 1f             	sar    edx,0x1f
c001eac7:	f7 f9                	idiv   ecx
c001eac9:	83 ec 0c             	sub    esp,0xc
c001eacc:	50                   	push   eax
c001eacd:	e8 22 f7 fe ff       	call   c000e1f4 <timerHandler(unsigned int)>
c001ead2:	83 c4 10             	add    esp,0x10
c001ead5:	90                   	nop
c001ead6:	83 c4 0c             	add    esp,0xc
c001ead9:	c3                   	ret    
c001eada:	66 90                	xchg   ax,ax

c001eadc <PIT::open(int, int, void*)>:
c001eadc:	83 ec 0c             	sub    esp,0xc
c001eadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae5:	83 c0 24             	add    eax,0x24
c001eae8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaea:	83 ec 08             	sub    esp,0x8
c001eaed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaf5:	ff d0                	call   eax
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	6a 00                	push   0x0
c001eb03:	6a 01                	push   0x1
c001eb05:	68 b4 ea 01 c0       	push   0xc001eab4
c001eb0a:	6a 00                	push   0x0
c001eb0c:	50                   	push   eax
c001eb0d:	e8 2c dc fe ff       	call   c000c73e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb12:	83 c4 20             	add    esp,0x20
c001eb15:	89 c2                	mov    edx,eax
c001eb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eb21:	b8 00 00 00 00       	mov    eax,0x0
c001eb26:	83 c4 0c             	add    esp,0xc
c001eb29:	c3                   	ret    
c001eb2a:	66 90                	xchg   ax,ax

c001eb2c <PIT::close(int, int, void*)>:
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb33:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb41:	6a 01                	push   0x1
c001eb43:	68 b4 ea 01 c0       	push   0xc001eab4
c001eb48:	6a 00                	push   0x0
c001eb4a:	50                   	push   eax
c001eb4b:	e8 24 dc fe ff       	call   c000c774 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eb50:	83 c4 10             	add    esp,0x10
c001eb53:	b8 00 00 00 00       	mov    eax,0x0
c001eb58:	83 c4 0c             	add    esp,0xc
c001eb5b:	c3                   	ret    

c001eb5c <PIT::PIT()>:
c001eb5c:	83 ec 0c             	sub    esp,0xc
c001eb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb63:	83 ec 08             	sub    esp,0x8
c001eb66:	68 00 31 02 c0       	push   0xc0023100
c001eb6b:	50                   	push   eax
c001eb6c:	e8 b7 f5 fe ff       	call   c000e128 <Timer::Timer(char const*)>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	ba 28 31 02 c0       	mov    edx,0xc0023128
c001eb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7d:	89 10                	mov    DWORD PTR [eax],edx
c001eb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb89:	0f b6 d0             	movzx  edx,al
c001eb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb90:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eba1:	0f b6 d0             	movzx  edx,al
c001eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ebad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ebb7:	8d 50 01             	lea    edx,[eax+0x1]
c001ebba:	88 d1                	mov    cl,dl
c001ebbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebc0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ebc6:	0f b6 d0             	movzx  edx,al
c001ebc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ebd1:	83 e1 3f             	and    ecx,0x3f
c001ebd4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ebd8:	90                   	nop
c001ebd9:	83 c4 0c             	add    esp,0xc
c001ebdc:	c3                   	ret    
c001ebdd:	66 90                	xchg   ax,ax
c001ebdf:	90                   	nop

c001ebe0 <avxDetect>:
c001ebe0:	b8 01 00 00 00       	mov    eax,0x1
c001ebe5:	0f a2                	cpuid  
c001ebe7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ebed:	74 15                	je     c001ec04 <avxDetect.noAVX>
c001ebef:	b8 01 00 00 00       	mov    eax,0x1
c001ebf4:	0f a2                	cpuid  
c001ebf6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ebfc:	74 06                	je     c001ec04 <avxDetect.noAVX>
c001ebfe:	b8 01 00 00 00       	mov    eax,0x1
c001ec03:	c3                   	ret    

c001ec04 <avxDetect.noAVX>:
c001ec04:	b8 00 00 00 00       	mov    eax,0x0
c001ec09:	c3                   	ret    

c001ec0a <avxSave>:
c001ec0a:	53                   	push   ebx
c001ec0b:	52                   	push   edx
c001ec0c:	31 c0                	xor    eax,eax
c001ec0e:	48                   	dec    eax
c001ec0f:	89 c2                	mov    edx,eax
c001ec11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec15:	0f ae 23             	xsave  [ebx]
c001ec18:	5a                   	pop    edx
c001ec19:	5b                   	pop    ebx
c001ec1a:	c3                   	ret    

c001ec1b <avxLoad>:
c001ec1b:	53                   	push   ebx
c001ec1c:	52                   	push   edx
c001ec1d:	31 c0                	xor    eax,eax
c001ec1f:	48                   	dec    eax
c001ec20:	89 c2                	mov    edx,eax
c001ec22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec26:	0f ae 2b             	xrstor [ebx]
c001ec29:	5a                   	pop    edx
c001ec2a:	5b                   	pop    ebx
c001ec2b:	c3                   	ret    

c001ec2c <avxInit>:
c001ec2c:	e8 67 03 00 00       	call   c001ef98 <sseInit>
c001ec31:	50                   	push   eax
c001ec32:	51                   	push   ecx
c001ec33:	0f 20 e0             	mov    eax,cr4
c001ec36:	0d 00 00 04 00       	or     eax,0x40000
c001ec3b:	0f 22 e0             	mov    cr4,eax
c001ec3e:	31 c9                	xor    ecx,ecx
c001ec40:	0f 01 d0             	xgetbv 
c001ec43:	0d 07 00 00 00       	or     eax,0x7
c001ec48:	0f 01 d1             	xsetbv 
c001ec4b:	59                   	pop    ecx
c001ec4c:	58                   	pop    eax
c001ec4d:	c3                   	ret    

c001ec4e <avxClose>:
c001ec4e:	c3                   	ret    

c001ec4f <wouldSheSayYes>:
c001ec4f:	c3                   	ret    
c001ec50:	49                   	dec    ecx
c001ec51:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ec55:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ec59:	75 20                	jne    c001ec7b <isr0+0xb>
c001ec5b:	4e                   	dec    esi
c001ec5c:	79 61                	jns    c001ecbf <isr7+0x3>
c001ec5e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ec63:	66 90                	xchg   ax,ax
c001ec65:	66 90                	xchg   ax,ax
c001ec67:	66 90                	xchg   ax,ax
c001ec69:	66 90                	xchg   ax,ax
c001ec6b:	66 90                	xchg   ax,ax
c001ec6d:	66 90                	xchg   ax,ax
c001ec6f:	90                   	nop

c001ec70 <isr0>:
c001ec70:	fa                   	cli    
c001ec71:	68 00 00 00 00       	push   0x0
c001ec76:	68 00 00 00 00       	push   0x0
c001ec7b:	e9 56 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ec80 <isr1>:
c001ec80:	fa                   	cli    
c001ec81:	6a 00                	push   0x0
c001ec83:	6a 01                	push   0x1
c001ec85:	e9 4c 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ec8a <isr2>:
c001ec8a:	fa                   	cli    
c001ec8b:	6a 00                	push   0x0
c001ec8d:	6a 02                	push   0x2
c001ec8f:	e9 42 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ec94 <isr3>:
c001ec94:	fa                   	cli    
c001ec95:	6a 00                	push   0x0
c001ec97:	6a 03                	push   0x3
c001ec99:	e9 38 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ec9e <isr4>:
c001ec9e:	fa                   	cli    
c001ec9f:	6a 00                	push   0x0
c001eca1:	6a 04                	push   0x4
c001eca3:	e9 2e 01 00 00       	jmp    c001edd6 <int_common_stub>

c001eca8 <isr5>:
c001eca8:	fa                   	cli    
c001eca9:	6a 00                	push   0x0
c001ecab:	6a 05                	push   0x5
c001ecad:	e9 24 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ecb2 <isr6>:
c001ecb2:	fa                   	cli    
c001ecb3:	6a 00                	push   0x0
c001ecb5:	6a 06                	push   0x6
c001ecb7:	e9 1a 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ecbc <isr7>:
c001ecbc:	fa                   	cli    
c001ecbd:	6a 00                	push   0x0
c001ecbf:	6a 07                	push   0x7
c001ecc1:	e9 10 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ecc6 <isr8>:
c001ecc6:	fa                   	cli    
c001ecc7:	6a 08                	push   0x8
c001ecc9:	e9 08 01 00 00       	jmp    c001edd6 <int_common_stub>

c001ecce <isr9>:
c001ecce:	fa                   	cli    
c001eccf:	6a 00                	push   0x0
c001ecd1:	6a 09                	push   0x9
c001ecd3:	e9 fe 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ecd8 <isr10>:
c001ecd8:	fa                   	cli    
c001ecd9:	6a 0a                	push   0xa
c001ecdb:	e9 f6 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ece0 <isr11>:
c001ece0:	fa                   	cli    
c001ece1:	6a 0b                	push   0xb
c001ece3:	e9 ee 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ece8 <isr12>:
c001ece8:	fa                   	cli    
c001ece9:	6a 0c                	push   0xc
c001eceb:	e9 e6 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ecf0 <isr13>:
c001ecf0:	fa                   	cli    
c001ecf1:	6a 0d                	push   0xd
c001ecf3:	53                   	push   ebx
c001ecf4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecf8:	81 fb c6 ee 01 c0    	cmp    ebx,0xc001eec6
c001ecfe:	5b                   	pop    ebx
c001ecff:	0f 84 c3 01 00 00    	je     c001eec8 <finishSignal2>
c001ed05:	e9 cc 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed0a <isr14>:
c001ed0a:	fa                   	cli    
c001ed0b:	6a 0e                	push   0xe
c001ed0d:	e9 c4 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed12 <isr15>:
c001ed12:	fa                   	cli    
c001ed13:	6a 00                	push   0x0
c001ed15:	6a 0f                	push   0xf
c001ed17:	e9 ba 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed1c <isr16>:
c001ed1c:	fa                   	cli    
c001ed1d:	6a 00                	push   0x0
c001ed1f:	6a 10                	push   0x10
c001ed21:	e9 b0 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed26 <isr17>:
c001ed26:	fa                   	cli    
c001ed27:	6a 00                	push   0x0
c001ed29:	6a 11                	push   0x11
c001ed2b:	e9 a6 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed30 <isr18>:
c001ed30:	fa                   	cli    
c001ed31:	6a 00                	push   0x0
c001ed33:	6a 12                	push   0x12
c001ed35:	e9 9c 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed3a <irq3>:
c001ed3a:	fa                   	cli    
c001ed3b:	6a 00                	push   0x0
c001ed3d:	6a 23                	push   0x23
c001ed3f:	e9 92 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed44 <irq4>:
c001ed44:	fa                   	cli    
c001ed45:	6a 00                	push   0x0
c001ed47:	6a 24                	push   0x24
c001ed49:	e9 88 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed4e <irq5>:
c001ed4e:	fa                   	cli    
c001ed4f:	6a 00                	push   0x0
c001ed51:	6a 25                	push   0x25
c001ed53:	e9 7e 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed58 <irq6>:
c001ed58:	fa                   	cli    
c001ed59:	6a 00                	push   0x0
c001ed5b:	6a 26                	push   0x26
c001ed5d:	e9 74 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed62 <irq7>:
c001ed62:	fa                   	cli    
c001ed63:	6a 00                	push   0x0
c001ed65:	6a 27                	push   0x27
c001ed67:	e9 6a 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed6c <irq8>:
c001ed6c:	fa                   	cli    
c001ed6d:	6a 00                	push   0x0
c001ed6f:	6a 28                	push   0x28
c001ed71:	e9 60 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed76 <irq9>:
c001ed76:	fa                   	cli    
c001ed77:	6a 00                	push   0x0
c001ed79:	6a 29                	push   0x29
c001ed7b:	e9 56 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed80 <irq10>:
c001ed80:	fa                   	cli    
c001ed81:	6a 00                	push   0x0
c001ed83:	6a 2a                	push   0x2a
c001ed85:	e9 4c 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed8a <irq11>:
c001ed8a:	fa                   	cli    
c001ed8b:	6a 00                	push   0x0
c001ed8d:	6a 2b                	push   0x2b
c001ed8f:	e9 42 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed94 <irq12>:
c001ed94:	fa                   	cli    
c001ed95:	6a 00                	push   0x0
c001ed97:	6a 2c                	push   0x2c
c001ed99:	e9 38 00 00 00       	jmp    c001edd6 <int_common_stub>

c001ed9e <irq13>:
c001ed9e:	fa                   	cli    
c001ed9f:	6a 00                	push   0x0
c001eda1:	6a 2d                	push   0x2d
c001eda3:	e9 2e 00 00 00       	jmp    c001edd6 <int_common_stub>

c001eda8 <irq14>:
c001eda8:	fa                   	cli    
c001eda9:	6a 00                	push   0x0
c001edab:	6a 2e                	push   0x2e
c001edad:	e9 24 00 00 00       	jmp    c001edd6 <int_common_stub>

c001edb2 <irq15>:
c001edb2:	fa                   	cli    
c001edb3:	6a 00                	push   0x0
c001edb5:	6a 2f                	push   0x2f
c001edb7:	e9 1a 00 00 00       	jmp    c001edd6 <int_common_stub>

c001edbc <irq1>:
c001edbc:	fa                   	cli    
c001edbd:	6a 00                	push   0x0
c001edbf:	6a 21                	push   0x21
c001edc1:	eb 13                	jmp    c001edd6 <int_common_stub>

c001edc3 <irq2>:
c001edc3:	fa                   	cli    
c001edc4:	6a 00                	push   0x0
c001edc6:	6a 22                	push   0x22
c001edc8:	eb 0c                	jmp    c001edd6 <int_common_stub>

c001edca <isr96>:
c001edca:	6a 00                	push   0x0
c001edcc:	6a 60                	push   0x60
c001edce:	fb                   	sti    
c001edcf:	eb 37                	jmp    c001ee08 <syscall_common_stub>

c001edd1 <irq0>:
c001edd1:	fa                   	cli    
c001edd2:	6a 00                	push   0x0
c001edd4:	6a 20                	push   0x20

c001edd6 <int_common_stub>:
c001edd6:	60                   	pusha  
c001edd7:	1e                   	push   ds
c001edd8:	06                   	push   es
c001edd9:	0f a0                	push   fs
c001eddb:	0f a8                	push   gs
c001eddd:	66 b8 10 00          	mov    ax,0x10
c001ede1:	66 8e d8             	mov    ds,ax
c001ede4:	66 8e c0             	mov    es,ax
c001ede7:	66 8e e0             	mov    fs,ax
c001edea:	66 8e e8             	mov    gs,ax
c001eded:	54                   	push   esp
c001edee:	fc                   	cld    
c001edef:	e8 48 de fe ff       	call   c000cc3c <int_handler>
c001edf4:	81 c4 04 00 00 00    	add    esp,0x4
c001edfa:	0f a9                	pop    gs
c001edfc:	0f a1                	pop    fs
c001edfe:	07                   	pop    es
c001edff:	1f                   	pop    ds
c001ee00:	61                   	popa   
c001ee01:	81 c4 08 00 00 00    	add    esp,0x8
c001ee07:	cf                   	iret   

c001ee08 <syscall_common_stub>:
c001ee08:	60                   	pusha  
c001ee09:	1e                   	push   ds
c001ee0a:	06                   	push   es
c001ee0b:	0f a0                	push   fs
c001ee0d:	0f a8                	push   gs
c001ee0f:	66 b8 10 00          	mov    ax,0x10
c001ee13:	66 8e d8             	mov    ds,ax
c001ee16:	66 8e c0             	mov    es,ax
c001ee19:	66 8e e0             	mov    fs,ax
c001ee1c:	66 8e e8             	mov    gs,ax
c001ee1f:	54                   	push   esp
c001ee20:	fc                   	cld    
c001ee21:	e8 16 de fe ff       	call   c000cc3c <int_handler>
c001ee26:	81 c4 04 00 00 00    	add    esp,0x4
c001ee2c:	0f a9                	pop    gs
c001ee2e:	0f a1                	pop    fs
c001ee30:	07                   	pop    es
c001ee31:	1f                   	pop    ds
c001ee32:	e8 9f 2b ff ff       	call   c00119d6 <KiCheckSignalZ>
c001ee37:	3d 00 00 00 00       	cmp    eax,0x0
c001ee3c:	0f 84 c0 00 00 00    	je     c001ef02 <skipSignals>
c001ee42:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ee47:	61                   	popa   
c001ee48:	53                   	push   ebx
c001ee49:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ee4f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ee52:	5b                   	pop    ebx
c001ee53:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ee58:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ee5b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ee5e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ee61:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ee64:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ee67:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ee6a:	81 c4 08 00 00 00    	add    esp,0x8
c001ee70:	5e                   	pop    esi
c001ee71:	5b                   	pop    ebx
c001ee72:	59                   	pop    ecx
c001ee73:	5a                   	pop    edx
c001ee74:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee77:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee7a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee7d:	52                   	push   edx
c001ee7e:	51                   	push   ecx
c001ee7f:	53                   	push   ebx
c001ee80:	56                   	push   esi
c001ee81:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee87:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee8a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee8d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee90:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee96:	60                   	pusha  
c001ee97:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee9d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001eea0:	89 e3                	mov    ebx,esp
c001eea2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001eea5:	52                   	push   edx
c001eea6:	68 c6 ee 01 c0       	push   0xc001eec6
c001eeab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001eeae:	89 dc                	mov    esp,ebx
c001eeb0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001eeb3:	68 23 00 00 00       	push   0x23
c001eeb8:	51                   	push   ecx
c001eeb9:	68 02 02 00 00       	push   0x202
c001eebe:	68 1b 00 00 00       	push   0x1b
c001eec3:	ff 36                	push   DWORD PTR [esi]
c001eec5:	cf                   	iret   

c001eec6 <finishSignal>:
c001eec6:	cd 0f                	int    0xf

c001eec8 <finishSignal2>:
c001eec8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001eece:	e8 80 2b ff ff       	call   c0011a53 <KiFinishSignalZ>
c001eed3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001eed9:	68 23 00 00 00       	push   0x23
c001eede:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001eee1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001eee4:	68 1b 00 00 00       	push   0x1b
c001eee9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001eeec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eeef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eef2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eef5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eef8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001eefb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001eefe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ef01:	cf                   	iret   

c001ef02 <skipSignals>:
c001ef02:	61                   	popa   
c001ef03:	81 c4 08 00 00 00    	add    esp,0x8
c001ef09:	cf                   	iret   
c001ef0a:	90                   	nop
c001ef0b:	90                   	nop

c001ef0c <irq16>:
c001ef0c:	fa                   	cli    
c001ef0d:	6a 00                	push   0x0
c001ef0f:	6a 30                	push   0x30
c001ef11:	e9 c0 fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef16 <irq17>:
c001ef16:	fa                   	cli    
c001ef17:	6a 00                	push   0x0
c001ef19:	6a 31                	push   0x31
c001ef1b:	e9 b6 fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef20 <irq18>:
c001ef20:	fa                   	cli    
c001ef21:	6a 00                	push   0x0
c001ef23:	6a 32                	push   0x32
c001ef25:	e9 ac fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef2a <irq19>:
c001ef2a:	fa                   	cli    
c001ef2b:	6a 00                	push   0x0
c001ef2d:	6a 33                	push   0x33
c001ef2f:	e9 a2 fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef34 <irq20>:
c001ef34:	fa                   	cli    
c001ef35:	6a 00                	push   0x0
c001ef37:	6a 34                	push   0x34
c001ef39:	e9 98 fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef3e <irq21>:
c001ef3e:	fa                   	cli    
c001ef3f:	6a 00                	push   0x0
c001ef41:	6a 35                	push   0x35
c001ef43:	e9 8e fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef48 <irq22>:
c001ef48:	fa                   	cli    
c001ef49:	6a 00                	push   0x0
c001ef4b:	6a 36                	push   0x36
c001ef4d:	e9 84 fe ff ff       	jmp    c001edd6 <int_common_stub>

c001ef52 <irq23>:
c001ef52:	fa                   	cli    
c001ef53:	6a 00                	push   0x0
c001ef55:	6a 37                	push   0x37
c001ef57:	e9 7a fe ff ff       	jmp    c001edd6 <int_common_stub>
c001ef5c:	66 90                	xchg   ax,ax
c001ef5e:	66 90                	xchg   ax,ax

c001ef60 <i386GetRDRAND>:
c001ef60:	b9 64 00 00 00       	mov    ecx,0x64

c001ef65 <retry>:
c001ef65:	0f c7 f0             	rdrand eax
c001ef68:	72 05                	jb     c001ef6f <retry.done>
c001ef6a:	e2 f9                	loop   c001ef65 <retry>

c001ef6c <retry.fail>:
c001ef6c:	31 c0                	xor    eax,eax
c001ef6e:	c3                   	ret    

c001ef6f <retry.done>:
c001ef6f:	c3                   	ret    

c001ef70 <absolutelyNoChanceInHell>:
c001ef70:	b8 01 00 00 00       	mov    eax,0x1
c001ef75:	0f a2                	cpuid  
c001ef77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef7d:	74 06                	je     c001ef85 <sseDetect.noSSE>
c001ef7f:	b8 01 00 00 00       	mov    eax,0x1
c001ef84:	c3                   	ret    

c001ef85 <sseDetect.noSSE>:
c001ef85:	31 c0                	xor    eax,eax
c001ef87:	c3                   	ret    

c001ef88 <sseSave>:
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	0f ae 00             	fxsave [eax]
c001ef8f:	c3                   	ret    

c001ef90 <sseLoad>:
c001ef90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef94:	0f ae 08             	fxrstor [eax]
c001ef97:	c3                   	ret    

c001ef98 <sseInit>:
c001ef98:	e8 42 00 00 00       	call   c001efdf <x87Init>
c001ef9d:	0f 20 e0             	mov    eax,cr4
c001efa0:	66 0d 00 06          	or     ax,0x600
c001efa4:	0f 22 e0             	mov    cr4,eax
c001efa7:	c3                   	ret    

c001efa8 <sseClose>:
c001efa8:	c3                   	ret    
c001efa9:	66 90                	xchg   ax,ax
c001efab:	66 90                	xchg   ax,ax
c001efad:	66 90                	xchg   ax,ax
c001efaf:	90                   	nop

c001efb0 <value_37F>:
c001efb0:	7f 03                	jg     c001efb5 <value_37A+0x1>

c001efb2 <value_37E>:
c001efb2:	7e 03                	jle    c001efb7 <x87Detect+0x1>

c001efb4 <value_37A>:
c001efb4:	7a 03                	jp     c001efb9 <x87Detect+0x3>

c001efb6 <x87Detect>:
c001efb6:	b8 01 00 00 00       	mov    eax,0x1
c001efbb:	0f a2                	cpuid  
c001efbd:	f7 c2 01 00 00 00    	test   edx,0x1
c001efc3:	74 06                	je     c001efcb <x87Detect.nox87>
c001efc5:	b8 01 00 00 00       	mov    eax,0x1
c001efca:	c3                   	ret    

c001efcb <x87Detect.nox87>:
c001efcb:	b8 00 00 00 00       	mov    eax,0x0
c001efd0:	c3                   	ret    

c001efd1 <x87Save>:
c001efd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd5:	dd 30                	fnsave [eax]
c001efd7:	c3                   	ret    

c001efd8 <x87Load>:
c001efd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efdc:	dd 20                	frstor [eax]
c001efde:	c3                   	ret    

c001efdf <x87Init>:
c001efdf:	0f 20 c0             	mov    eax,cr0
c001efe2:	66 25 fb ff          	and    ax,0xfffb
c001efe6:	66 0d 22 00          	or     ax,0x22
c001efea:	0f 22 c0             	mov    cr0,eax
c001efed:	db e3                	fninit 
c001efef:	0f 06                	clts   
c001eff1:	d9 2d b4 ef 01 c0    	fldcw  WORD PTR ds:0xc001efb4
c001eff7:	c3                   	ret    

c001eff8 <x87Close>:
c001eff8:	c3                   	ret    
c001eff9:	66 90                	xchg   ax,ax
c001effb:	90                   	nop

c001effc <__do_global_ctors_aux>:
c001effc:	a1 b0 ff 01 c0       	mov    eax,ds:0xc001ffb0
c001f001:	83 f8 ff             	cmp    eax,0xffffffff
c001f004:	74 1a                	je     c001f020 <__do_global_ctors_aux+0x24>
c001f006:	55                   	push   ebp
c001f007:	89 e5                	mov    ebp,esp
c001f009:	53                   	push   ebx
c001f00a:	52                   	push   edx
c001f00b:	bb b0 ff 01 c0       	mov    ebx,0xc001ffb0
c001f010:	ff d0                	call   eax
c001f012:	83 eb 04             	sub    ebx,0x4
c001f015:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f017:	83 f8 ff             	cmp    eax,0xffffffff
c001f01a:	75 f4                	jne    c001f010 <__do_global_ctors_aux+0x14>
c001f01c:	58                   	pop    eax
c001f01d:	5b                   	pop    ebx
c001f01e:	5d                   	pop    ebp
c001f01f:	c3                   	ret    
c001f020:	c3                   	ret    
c001f021:	66 90                	xchg   ax,ax
c001f023:	90                   	nop

c001f024 <__divdi3>:
c001f024:	55                   	push   ebp
c001f025:	57                   	push   edi
c001f026:	56                   	push   esi
c001f027:	53                   	push   ebx
c001f028:	83 ec 1c             	sub    esp,0x1c
c001f02b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f02f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f033:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f036:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f03a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f03e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f042:	85 db                	test   ebx,ebx
c001f044:	0f 88 8e 00 00 00    	js     c001f0d8 <__divdi3+0xb4>
c001f04a:	89 dd                	mov    ebp,ebx
c001f04c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f054:	89 d3                	mov    ebx,edx
c001f056:	85 d2                	test   edx,edx
c001f058:	79 0d                	jns    c001f067 <__divdi3+0x43>
c001f05a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f05e:	f7 d8                	neg    eax
c001f060:	83 d2 00             	adc    edx,0x0
c001f063:	f7 da                	neg    edx
c001f065:	89 d3                	mov    ebx,edx
c001f067:	89 c7                	mov    edi,eax
c001f069:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f06c:	85 db                	test   ebx,ebx
c001f06e:	75 48                	jne    c001f0b8 <__divdi3+0x94>
c001f070:	39 ef                	cmp    edi,ebp
c001f072:	76 24                	jbe    c001f098 <__divdi3+0x74>
c001f074:	89 ea                	mov    edx,ebp
c001f076:	f7 f7                	div    edi
c001f078:	89 c1                	mov    ecx,eax
c001f07a:	31 f6                	xor    esi,esi
c001f07c:	89 c8                	mov    eax,ecx
c001f07e:	89 f2                	mov    edx,esi
c001f080:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f084:	85 c9                	test   ecx,ecx
c001f086:	74 07                	je     c001f08f <__divdi3+0x6b>
c001f088:	f7 d8                	neg    eax
c001f08a:	83 d2 00             	adc    edx,0x0
c001f08d:	f7 da                	neg    edx
c001f08f:	83 c4 1c             	add    esp,0x1c
c001f092:	5b                   	pop    ebx
c001f093:	5e                   	pop    esi
c001f094:	5f                   	pop    edi
c001f095:	5d                   	pop    ebp
c001f096:	c3                   	ret    
c001f097:	90                   	nop
c001f098:	85 ff                	test   edi,edi
c001f09a:	75 0b                	jne    c001f0a7 <__divdi3+0x83>
c001f09c:	b8 01 00 00 00       	mov    eax,0x1
c001f0a1:	31 d2                	xor    edx,edx
c001f0a3:	f7 f3                	div    ebx
c001f0a5:	89 c7                	mov    edi,eax
c001f0a7:	31 d2                	xor    edx,edx
c001f0a9:	89 e8                	mov    eax,ebp
c001f0ab:	f7 f7                	div    edi
c001f0ad:	89 c6                	mov    esi,eax
c001f0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f0b2:	f7 f7                	div    edi
c001f0b4:	89 c1                	mov    ecx,eax
c001f0b6:	eb c4                	jmp    c001f07c <__divdi3+0x58>
c001f0b8:	39 eb                	cmp    ebx,ebp
c001f0ba:	77 3c                	ja     c001f0f8 <__divdi3+0xd4>
c001f0bc:	0f bd f3             	bsr    esi,ebx
c001f0bf:	83 f6 1f             	xor    esi,0x1f
c001f0c2:	75 40                	jne    c001f104 <__divdi3+0xe0>
c001f0c4:	39 eb                	cmp    ebx,ebp
c001f0c6:	72 09                	jb     c001f0d1 <__divdi3+0xad>
c001f0c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f0cb:	0f 87 97 00 00 00    	ja     c001f168 <__divdi3+0x144>
c001f0d1:	b9 01 00 00 00       	mov    ecx,0x1
c001f0d6:	eb a4                	jmp    c001f07c <__divdi3+0x58>
c001f0d8:	f7 d9                	neg    ecx
c001f0da:	83 d3 00             	adc    ebx,0x0
c001f0dd:	f7 db                	neg    ebx
c001f0df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0e6:	89 dd                	mov    ebp,ebx
c001f0e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0f0:	e9 5f ff ff ff       	jmp    c001f054 <__divdi3+0x30>
c001f0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0f8:	31 f6                	xor    esi,esi
c001f0fa:	31 c9                	xor    ecx,ecx
c001f0fc:	e9 7b ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f101:	8d 76 00             	lea    esi,[esi+0x0]
c001f104:	b8 20 00 00 00       	mov    eax,0x20
c001f109:	29 f0                	sub    eax,esi
c001f10b:	89 f1                	mov    ecx,esi
c001f10d:	d3 e3                	shl    ebx,cl
c001f10f:	89 fa                	mov    edx,edi
c001f111:	88 c1                	mov    cl,al
c001f113:	d3 ea                	shr    edx,cl
c001f115:	09 da                	or     edx,ebx
c001f117:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f11b:	89 f1                	mov    ecx,esi
c001f11d:	d3 e7                	shl    edi,cl
c001f11f:	89 eb                	mov    ebx,ebp
c001f121:	88 c1                	mov    cl,al
c001f123:	d3 eb                	shr    ebx,cl
c001f125:	89 f1                	mov    ecx,esi
c001f127:	d3 e5                	shl    ebp,cl
c001f129:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f12c:	88 c1                	mov    cl,al
c001f12e:	d3 ea                	shr    edx,cl
c001f130:	09 d5                	or     ebp,edx
c001f132:	89 e8                	mov    eax,ebp
c001f134:	89 da                	mov    edx,ebx
c001f136:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f13a:	89 d3                	mov    ebx,edx
c001f13c:	89 c5                	mov    ebp,eax
c001f13e:	f7 e7                	mul    edi
c001f140:	39 d3                	cmp    ebx,edx
c001f142:	72 18                	jb     c001f15c <__divdi3+0x138>
c001f144:	74 0a                	je     c001f150 <__divdi3+0x12c>
c001f146:	89 e9                	mov    ecx,ebp
c001f148:	31 f6                	xor    esi,esi
c001f14a:	e9 2d ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f14f:	90                   	nop
c001f150:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f153:	89 f1                	mov    ecx,esi
c001f155:	d3 e7                	shl    edi,cl
c001f157:	39 c7                	cmp    edi,eax
c001f159:	73 eb                	jae    c001f146 <__divdi3+0x122>
c001f15b:	90                   	nop
c001f15c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f15f:	31 f6                	xor    esi,esi
c001f161:	e9 16 ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f166:	66 90                	xchg   ax,ax
c001f168:	31 c9                	xor    ecx,ecx
c001f16a:	e9 0d ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f16f:	90                   	nop

c001f170 <__moddi3>:
c001f170:	55                   	push   ebp
c001f171:	57                   	push   edi
c001f172:	56                   	push   esi
c001f173:	53                   	push   ebx
c001f174:	83 ec 2c             	sub    esp,0x2c
c001f177:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f17b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f17f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f183:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f187:	85 db                	test   ebx,ebx
c001f189:	0f 88 85 00 00 00    	js     c001f214 <__moddi3+0xa4>
c001f18f:	89 de                	mov    esi,ebx
c001f191:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f199:	89 d7                	mov    edi,edx
c001f19b:	85 d2                	test   edx,edx
c001f19d:	79 09                	jns    c001f1a8 <__moddi3+0x38>
c001f19f:	f7 d8                	neg    eax
c001f1a1:	83 d2 00             	adc    edx,0x0
c001f1a4:	f7 da                	neg    edx
c001f1a6:	89 d7                	mov    edi,edx
c001f1a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1ac:	89 cd                	mov    ebp,ecx
c001f1ae:	85 ff                	test   edi,edi
c001f1b0:	75 52                	jne    c001f204 <__moddi3+0x94>
c001f1b2:	89 c3                	mov    ebx,eax
c001f1b4:	39 f0                	cmp    eax,esi
c001f1b6:	76 24                	jbe    c001f1dc <__moddi3+0x6c>
c001f1b8:	89 c8                	mov    eax,ecx
c001f1ba:	89 f2                	mov    edx,esi
c001f1bc:	f7 f3                	div    ebx
c001f1be:	89 d6                	mov    esi,edx
c001f1c0:	89 f0                	mov    eax,esi
c001f1c2:	31 d2                	xor    edx,edx
c001f1c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1c8:	85 c9                	test   ecx,ecx
c001f1ca:	74 07                	je     c001f1d3 <__moddi3+0x63>
c001f1cc:	f7 d8                	neg    eax
c001f1ce:	83 d2 00             	adc    edx,0x0
c001f1d1:	f7 da                	neg    edx
c001f1d3:	83 c4 2c             	add    esp,0x2c
c001f1d6:	5b                   	pop    ebx
c001f1d7:	5e                   	pop    esi
c001f1d8:	5f                   	pop    edi
c001f1d9:	5d                   	pop    ebp
c001f1da:	c3                   	ret    
c001f1db:	90                   	nop
c001f1dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1e0:	85 db                	test   ebx,ebx
c001f1e2:	75 0d                	jne    c001f1f1 <__moddi3+0x81>
c001f1e4:	b8 01 00 00 00       	mov    eax,0x1
c001f1e9:	31 d2                	xor    edx,edx
c001f1eb:	f7 f7                	div    edi
c001f1ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1f1:	89 f0                	mov    eax,esi
c001f1f3:	31 d2                	xor    edx,edx
c001f1f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1f9:	f7 f7                	div    edi
c001f1fb:	89 e8                	mov    eax,ebp
c001f1fd:	f7 f7                	div    edi
c001f1ff:	89 d6                	mov    esi,edx
c001f201:	eb bd                	jmp    c001f1c0 <__moddi3+0x50>
c001f203:	90                   	nop
c001f204:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f208:	39 f7                	cmp    edi,esi
c001f20a:	76 20                	jbe    c001f22c <__moddi3+0xbc>
c001f20c:	89 c8                	mov    eax,ecx
c001f20e:	89 f2                	mov    edx,esi
c001f210:	eb b2                	jmp    c001f1c4 <__moddi3+0x54>
c001f212:	66 90                	xchg   ax,ax
c001f214:	f7 d9                	neg    ecx
c001f216:	83 d3 00             	adc    ebx,0x0
c001f219:	f7 db                	neg    ebx
c001f21b:	89 de                	mov    esi,ebx
c001f21d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f225:	e9 6f ff ff ff       	jmp    c001f199 <__moddi3+0x29>
c001f22a:	66 90                	xchg   ax,ax
c001f22c:	0f bd c7             	bsr    eax,edi
c001f22f:	83 f0 1f             	xor    eax,0x1f
c001f232:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f236:	75 24                	jne    c001f25c <__moddi3+0xec>
c001f238:	39 f7                	cmp    edi,esi
c001f23a:	72 06                	jb     c001f242 <__moddi3+0xd2>
c001f23c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f240:	77 0c                	ja     c001f24e <__moddi3+0xde>
c001f242:	89 e9                	mov    ecx,ebp
c001f244:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f248:	19 fe                	sbb    esi,edi
c001f24a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f24e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f252:	89 f2                	mov    edx,esi
c001f254:	e9 6b ff ff ff       	jmp    c001f1c4 <__moddi3+0x54>
c001f259:	8d 76 00             	lea    esi,[esi+0x0]
c001f25c:	b8 20 00 00 00       	mov    eax,0x20
c001f261:	89 c2                	mov    edx,eax
c001f263:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f267:	29 da                	sub    edx,ebx
c001f269:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f26d:	88 d9                	mov    cl,bl
c001f26f:	d3 e7                	shl    edi,cl
c001f271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f275:	88 d1                	mov    cl,dl
c001f277:	d3 e8                	shr    eax,cl
c001f279:	09 c7                	or     edi,eax
c001f27b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f27f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f283:	89 d8                	mov    eax,ebx
c001f285:	88 d9                	mov    cl,bl
c001f287:	d3 e7                	shl    edi,cl
c001f289:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f28d:	89 f3                	mov    ebx,esi
c001f28f:	88 d1                	mov    cl,dl
c001f291:	d3 eb                	shr    ebx,cl
c001f293:	89 c7                	mov    edi,eax
c001f295:	88 c1                	mov    cl,al
c001f297:	d3 e6                	shl    esi,cl
c001f299:	89 e8                	mov    eax,ebp
c001f29b:	88 d1                	mov    cl,dl
c001f29d:	d3 e8                	shr    eax,cl
c001f29f:	09 f0                	or     eax,esi
c001f2a1:	89 f9                	mov    ecx,edi
c001f2a3:	d3 e5                	shl    ebp,cl
c001f2a5:	89 da                	mov    edx,ebx
c001f2a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f2ab:	89 d3                	mov    ebx,edx
c001f2ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2b1:	89 c6                	mov    esi,eax
c001f2b3:	89 d1                	mov    ecx,edx
c001f2b5:	39 d3                	cmp    ebx,edx
c001f2b7:	72 27                	jb     c001f2e0 <__moddi3+0x170>
c001f2b9:	74 21                	je     c001f2dc <__moddi3+0x16c>
c001f2bb:	29 f5                	sub    ebp,esi
c001f2bd:	19 cb                	sbb    ebx,ecx
c001f2bf:	89 de                	mov    esi,ebx
c001f2c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f2c5:	d3 e6                	shl    esi,cl
c001f2c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2cb:	89 f9                	mov    ecx,edi
c001f2cd:	d3 ed                	shr    ebp,cl
c001f2cf:	09 ee                	or     esi,ebp
c001f2d1:	89 f0                	mov    eax,esi
c001f2d3:	d3 eb                	shr    ebx,cl
c001f2d5:	89 da                	mov    edx,ebx
c001f2d7:	e9 e8 fe ff ff       	jmp    c001f1c4 <__moddi3+0x54>
c001f2dc:	39 c5                	cmp    ebp,eax
c001f2de:	73 db                	jae    c001f2bb <__moddi3+0x14b>
c001f2e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f2e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f2e8:	89 d1                	mov    ecx,edx
c001f2ea:	89 c6                	mov    esi,eax
c001f2ec:	eb cd                	jmp    c001f2bb <__moddi3+0x14b>
c001f2ee:	66 90                	xchg   ax,ax

c001f2f0 <__udivdi3>:
c001f2f0:	55                   	push   ebp
c001f2f1:	57                   	push   edi
c001f2f2:	56                   	push   esi
c001f2f3:	53                   	push   ebx
c001f2f4:	83 ec 1c             	sub    esp,0x1c
c001f2f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f303:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f307:	85 d2                	test   edx,edx
c001f309:	75 41                	jne    c001f34c <__udivdi3+0x5c>
c001f30b:	39 f7                	cmp    edi,esi
c001f30d:	76 15                	jbe    c001f324 <__udivdi3+0x34>
c001f30f:	89 e8                	mov    eax,ebp
c001f311:	89 f2                	mov    edx,esi
c001f313:	f7 f7                	div    edi
c001f315:	31 db                	xor    ebx,ebx
c001f317:	89 da                	mov    edx,ebx
c001f319:	83 c4 1c             	add    esp,0x1c
c001f31c:	5b                   	pop    ebx
c001f31d:	5e                   	pop    esi
c001f31e:	5f                   	pop    edi
c001f31f:	5d                   	pop    ebp
c001f320:	c3                   	ret    
c001f321:	8d 76 00             	lea    esi,[esi+0x0]
c001f324:	89 f9                	mov    ecx,edi
c001f326:	85 ff                	test   edi,edi
c001f328:	75 0b                	jne    c001f335 <__udivdi3+0x45>
c001f32a:	b8 01 00 00 00       	mov    eax,0x1
c001f32f:	31 d2                	xor    edx,edx
c001f331:	f7 f7                	div    edi
c001f333:	89 c1                	mov    ecx,eax
c001f335:	31 d2                	xor    edx,edx
c001f337:	89 f0                	mov    eax,esi
c001f339:	f7 f1                	div    ecx
c001f33b:	89 c3                	mov    ebx,eax
c001f33d:	89 e8                	mov    eax,ebp
c001f33f:	f7 f1                	div    ecx
c001f341:	89 da                	mov    edx,ebx
c001f343:	83 c4 1c             	add    esp,0x1c
c001f346:	5b                   	pop    ebx
c001f347:	5e                   	pop    esi
c001f348:	5f                   	pop    edi
c001f349:	5d                   	pop    ebp
c001f34a:	c3                   	ret    
c001f34b:	90                   	nop
c001f34c:	39 f2                	cmp    edx,esi
c001f34e:	77 1c                	ja     c001f36c <__udivdi3+0x7c>
c001f350:	0f bd da             	bsr    ebx,edx
c001f353:	83 f3 1f             	xor    ebx,0x1f
c001f356:	75 24                	jne    c001f37c <__udivdi3+0x8c>
c001f358:	39 f2                	cmp    edx,esi
c001f35a:	72 08                	jb     c001f364 <__udivdi3+0x74>
c001f35c:	39 ef                	cmp    edi,ebp
c001f35e:	0f 87 84 00 00 00    	ja     c001f3e8 <__udivdi3+0xf8>
c001f364:	b8 01 00 00 00       	mov    eax,0x1
c001f369:	eb ac                	jmp    c001f317 <__udivdi3+0x27>
c001f36b:	90                   	nop
c001f36c:	31 db                	xor    ebx,ebx
c001f36e:	31 c0                	xor    eax,eax
c001f370:	89 da                	mov    edx,ebx
c001f372:	83 c4 1c             	add    esp,0x1c
c001f375:	5b                   	pop    ebx
c001f376:	5e                   	pop    esi
c001f377:	5f                   	pop    edi
c001f378:	5d                   	pop    ebp
c001f379:	c3                   	ret    
c001f37a:	66 90                	xchg   ax,ax
c001f37c:	b8 20 00 00 00       	mov    eax,0x20
c001f381:	29 d8                	sub    eax,ebx
c001f383:	88 d9                	mov    cl,bl
c001f385:	d3 e2                	shl    edx,cl
c001f387:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f38b:	89 fa                	mov    edx,edi
c001f38d:	88 c1                	mov    cl,al
c001f38f:	d3 ea                	shr    edx,cl
c001f391:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f395:	09 d1                	or     ecx,edx
c001f397:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f39b:	88 d9                	mov    cl,bl
c001f39d:	d3 e7                	shl    edi,cl
c001f39f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3a3:	89 f7                	mov    edi,esi
c001f3a5:	88 c1                	mov    cl,al
c001f3a7:	d3 ef                	shr    edi,cl
c001f3a9:	88 d9                	mov    cl,bl
c001f3ab:	d3 e6                	shl    esi,cl
c001f3ad:	89 ea                	mov    edx,ebp
c001f3af:	88 c1                	mov    cl,al
c001f3b1:	d3 ea                	shr    edx,cl
c001f3b3:	09 d6                	or     esi,edx
c001f3b5:	89 f0                	mov    eax,esi
c001f3b7:	89 fa                	mov    edx,edi
c001f3b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f3bd:	89 d7                	mov    edi,edx
c001f3bf:	89 c6                	mov    esi,eax
c001f3c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3c5:	39 d7                	cmp    edi,edx
c001f3c7:	72 13                	jb     c001f3dc <__udivdi3+0xec>
c001f3c9:	74 09                	je     c001f3d4 <__udivdi3+0xe4>
c001f3cb:	89 f0                	mov    eax,esi
c001f3cd:	31 db                	xor    ebx,ebx
c001f3cf:	e9 43 ff ff ff       	jmp    c001f317 <__udivdi3+0x27>
c001f3d4:	88 d9                	mov    cl,bl
c001f3d6:	d3 e5                	shl    ebp,cl
c001f3d8:	39 c5                	cmp    ebp,eax
c001f3da:	73 ef                	jae    c001f3cb <__udivdi3+0xdb>
c001f3dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f3df:	31 db                	xor    ebx,ebx
c001f3e1:	e9 31 ff ff ff       	jmp    c001f317 <__udivdi3+0x27>
c001f3e6:	66 90                	xchg   ax,ax
c001f3e8:	31 c0                	xor    eax,eax
c001f3ea:	e9 28 ff ff ff       	jmp    c001f317 <__udivdi3+0x27>
c001f3ef:	90                   	nop

c001f3f0 <__umoddi3>:
c001f3f0:	55                   	push   ebp
c001f3f1:	57                   	push   edi
c001f3f2:	56                   	push   esi
c001f3f3:	53                   	push   ebx
c001f3f4:	83 ec 1c             	sub    esp,0x1c
c001f3f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f403:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f407:	89 da                	mov    edx,ebx
c001f409:	85 c0                	test   eax,eax
c001f40b:	75 37                	jne    c001f444 <__umoddi3+0x54>
c001f40d:	39 df                	cmp    edi,ebx
c001f40f:	76 13                	jbe    c001f424 <__umoddi3+0x34>
c001f411:	89 f0                	mov    eax,esi
c001f413:	f7 f7                	div    edi
c001f415:	89 d0                	mov    eax,edx
c001f417:	31 d2                	xor    edx,edx
c001f419:	83 c4 1c             	add    esp,0x1c
c001f41c:	5b                   	pop    ebx
c001f41d:	5e                   	pop    esi
c001f41e:	5f                   	pop    edi
c001f41f:	5d                   	pop    ebp
c001f420:	c3                   	ret    
c001f421:	8d 76 00             	lea    esi,[esi+0x0]
c001f424:	89 fd                	mov    ebp,edi
c001f426:	85 ff                	test   edi,edi
c001f428:	75 0b                	jne    c001f435 <__umoddi3+0x45>
c001f42a:	b8 01 00 00 00       	mov    eax,0x1
c001f42f:	31 d2                	xor    edx,edx
c001f431:	f7 f7                	div    edi
c001f433:	89 c5                	mov    ebp,eax
c001f435:	89 d8                	mov    eax,ebx
c001f437:	31 d2                	xor    edx,edx
c001f439:	f7 f5                	div    ebp
c001f43b:	89 f0                	mov    eax,esi
c001f43d:	f7 f5                	div    ebp
c001f43f:	89 d0                	mov    eax,edx
c001f441:	eb d4                	jmp    c001f417 <__umoddi3+0x27>
c001f443:	90                   	nop
c001f444:	89 f1                	mov    ecx,esi
c001f446:	39 d8                	cmp    eax,ebx
c001f448:	76 0a                	jbe    c001f454 <__umoddi3+0x64>
c001f44a:	89 f0                	mov    eax,esi
c001f44c:	83 c4 1c             	add    esp,0x1c
c001f44f:	5b                   	pop    ebx
c001f450:	5e                   	pop    esi
c001f451:	5f                   	pop    edi
c001f452:	5d                   	pop    ebp
c001f453:	c3                   	ret    
c001f454:	0f bd e8             	bsr    ebp,eax
c001f457:	83 f5 1f             	xor    ebp,0x1f
c001f45a:	75 1c                	jne    c001f478 <__umoddi3+0x88>
c001f45c:	39 d8                	cmp    eax,ebx
c001f45e:	72 04                	jb     c001f464 <__umoddi3+0x74>
c001f460:	39 f7                	cmp    edi,esi
c001f462:	77 08                	ja     c001f46c <__umoddi3+0x7c>
c001f464:	89 da                	mov    edx,ebx
c001f466:	29 fe                	sub    esi,edi
c001f468:	19 c2                	sbb    edx,eax
c001f46a:	89 f1                	mov    ecx,esi
c001f46c:	89 c8                	mov    eax,ecx
c001f46e:	83 c4 1c             	add    esp,0x1c
c001f471:	5b                   	pop    ebx
c001f472:	5e                   	pop    esi
c001f473:	5f                   	pop    edi
c001f474:	5d                   	pop    ebp
c001f475:	c3                   	ret    
c001f476:	66 90                	xchg   ax,ax
c001f478:	ba 20 00 00 00       	mov    edx,0x20
c001f47d:	29 ea                	sub    edx,ebp
c001f47f:	89 e9                	mov    ecx,ebp
c001f481:	d3 e0                	shl    eax,cl
c001f483:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f487:	89 f8                	mov    eax,edi
c001f489:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f48d:	88 d1                	mov    cl,dl
c001f48f:	d3 e8                	shr    eax,cl
c001f491:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f495:	09 c1                	or     ecx,eax
c001f497:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f49b:	89 e9                	mov    ecx,ebp
c001f49d:	d3 e7                	shl    edi,cl
c001f49f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4a3:	89 d8                	mov    eax,ebx
c001f4a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f4a9:	88 d1                	mov    cl,dl
c001f4ab:	d3 e8                	shr    eax,cl
c001f4ad:	89 c7                	mov    edi,eax
c001f4af:	89 e9                	mov    ecx,ebp
c001f4b1:	d3 e3                	shl    ebx,cl
c001f4b3:	89 f0                	mov    eax,esi
c001f4b5:	88 d1                	mov    cl,dl
c001f4b7:	d3 e8                	shr    eax,cl
c001f4b9:	09 d8                	or     eax,ebx
c001f4bb:	89 e9                	mov    ecx,ebp
c001f4bd:	d3 e6                	shl    esi,cl
c001f4bf:	89 f3                	mov    ebx,esi
c001f4c1:	89 fa                	mov    edx,edi
c001f4c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4c7:	89 d1                	mov    ecx,edx
c001f4c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	89 d7                	mov    edi,edx
c001f4d1:	39 d1                	cmp    ecx,edx
c001f4d3:	72 27                	jb     c001f4fc <__umoddi3+0x10c>
c001f4d5:	74 21                	je     c001f4f8 <__umoddi3+0x108>
c001f4d7:	89 ca                	mov    edx,ecx
c001f4d9:	29 f3                	sub    ebx,esi
c001f4db:	19 fa                	sbb    edx,edi
c001f4dd:	89 d0                	mov    eax,edx
c001f4df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f4e3:	d3 e0                	shl    eax,cl
c001f4e5:	89 e9                	mov    ecx,ebp
c001f4e7:	d3 eb                	shr    ebx,cl
c001f4e9:	09 d8                	or     eax,ebx
c001f4eb:	d3 ea                	shr    edx,cl
c001f4ed:	83 c4 1c             	add    esp,0x1c
c001f4f0:	5b                   	pop    ebx
c001f4f1:	5e                   	pop    esi
c001f4f2:	5f                   	pop    edi
c001f4f3:	5d                   	pop    ebp
c001f4f4:	c3                   	ret    
c001f4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4f8:	39 c3                	cmp    ebx,eax
c001f4fa:	73 db                	jae    c001f4d7 <__umoddi3+0xe7>
c001f4fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f500:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f504:	89 d7                	mov    edi,edx
c001f506:	89 c6                	mov    esi,eax
c001f508:	eb cd                	jmp    c001f4d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f50a <_init>:
c001f50a:	55                   	push   ebp
c001f50b:	89 e5                	mov    ebp,esp
c001f50d:	e8 e2 0b fe ff       	call   c00000f4 <frame_dummy>
c001f512:	e8 e5 fa ff ff       	call   c001effc <__do_global_ctors_aux>
c001f517:	5d                   	pop    ebp
c001f518:	c3                   	ret    

Disassembly of section .fini:

c001f519 <_fini>:
c001f519:	55                   	push   ebp
c001f51a:	89 e5                	mov    ebp,esp
c001f51c:	e8 63 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f521:	5d                   	pop    ebp
c001f522:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f524 <Computer::~Computer()>:
c001f524:	83 ec 0c             	sub    esp,0xc
c001f527:	ba 34 08 02 c0       	mov    edx,0xc0020834
c001f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f530:	89 10                	mov    DWORD PTR [eax],edx
c001f532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f536:	83 ec 0c             	sub    esp,0xc
c001f539:	50                   	push   eax
c001f53a:	e8 55 d1 fe ff       	call   c000c694 <Device::~Device()>
c001f53f:	83 c4 10             	add    esp,0x10
c001f542:	90                   	nop
c001f543:	83 c4 0c             	add    esp,0xc
c001f546:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f548 <Computer::~Computer()>:
c001f548:	83 ec 0c             	sub    esp,0xc
c001f54b:	83 ec 0c             	sub    esp,0xc
c001f54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f552:	e8 cd ff ff ff       	call   c001f524 <Computer::~Computer()>
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	83 ec 08             	sub    esp,0x8
c001f55d:	68 70 01 00 00       	push   0x170
c001f562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f566:	e8 ad b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	83 c4 0c             	add    esp,0xc
c001f571:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f572 <idleCommon()>:
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	fa                   	cli    
c001f576:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f57c:	e8 ff 66 ff ff       	call   c0015c80 <schedule()>
c001f581:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f586:	48                   	dec    eax
c001f587:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f58c:	75 01                	jne    c001f58f <idleCommon()+0x1d>
c001f58e:	fb                   	sti    
c001f58f:	83 c4 0c             	add    esp,0xc
c001f592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f594 <LinkedList<UnixFile>::~LinkedList()>:
c001f594:	90                   	nop
c001f595:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f596 <LinkedList<UnixFile>::LinkedList()>:
c001f596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5d6:	90                   	nop
c001f5d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5e0:	75 10                	jne    c001f5f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	68 48 0a 02 c0       	push   0xc0020a48
c001f5ea:	e8 d2 1d ff ff       	call   c00113c1 <KePanic(char const*)>
c001f5ef:	83 c4 10             	add    esp,0x10
c001f5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5f8:	85 c0                	test   eax,eax
c001f5fa:	74 34                	je     c001f630 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f600:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f603:	85 c0                	test   eax,eax
c001f605:	74 29                	je     c001f630 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f60e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f612:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f627:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f62e:	eb 65                	jmp    c001f695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f634:	8b 00                	mov    eax,DWORD PTR [eax]
c001f636:	85 c0                	test   eax,eax
c001f638:	75 4b                	jne    c001f685 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f641:	85 c0                	test   eax,eax
c001f643:	75 40                	jne    c001f685 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f64d:	89 10                	mov    DWORD PTR [eax],edx
c001f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f657:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f661:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f66f:	85 c0                	test   eax,eax
c001f671:	74 22                	je     c001f695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f673:	83 ec 0c             	sub    esp,0xc
c001f676:	68 6a 0a 02 c0       	push   0xc0020a6a
c001f67b:	e8 41 1d ff ff       	call   c00113c1 <KePanic(char const*)>
c001f680:	83 c4 10             	add    esp,0x10
c001f683:	eb 10                	jmp    c001f695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f685:	83 ec 0c             	sub    esp,0xc
c001f688:	68 74 0a 02 c0       	push   0xc0020a74
c001f68d:	e8 2f 1d ff ff       	call   c00113c1 <KePanic(char const*)>
c001f692:	83 c4 10             	add    esp,0x10
c001f695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f699:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f69c:	8d 50 01             	lea    edx,[eax+0x1]
c001f69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6a6:	90                   	nop
c001f6a7:	83 c4 0c             	add    esp,0xc
c001f6aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f6ac <LinkedList<UnixFile>::getFirstElement()>:
c001f6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f6b4 <LinkedList<UnixFile>::removeFirst()>:
c001f6b4:	83 ec 0c             	sub    esp,0xc
c001f6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6bd:	85 c0                	test   eax,eax
c001f6bf:	75 12                	jne    c001f6d3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f6c1:	83 ec 0c             	sub    esp,0xc
c001f6c4:	68 80 0a 02 c0       	push   0xc0020a80
c001f6c9:	e8 f3 1c ff ff       	call   c00113c1 <KePanic(char const*)>
c001f6ce:	83 c4 10             	add    esp,0x10
c001f6d1:	eb 7e                	jmp    c001f751 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6dd:	85 c0                	test   eax,eax
c001f6df:	74 10                	je     c001f6f1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f6e1:	83 ec 0c             	sub    esp,0xc
c001f6e4:	68 cb 0a 02 c0       	push   0xc0020acb
c001f6e9:	e8 d3 1c ff ff       	call   c00113c1 <KePanic(char const*)>
c001f6ee:	83 c4 10             	add    esp,0x10
c001f6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6fa:	85 c0                	test   eax,eax
c001f6fc:	75 33                	jne    c001f731 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f717:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f71a:	83 f8 01             	cmp    eax,0x1
c001f71d:	74 21                	je     c001f740 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f71f:	83 ec 0c             	sub    esp,0xc
c001f722:	68 a4 0a 02 c0       	push   0xc0020aa4
c001f727:	e8 95 1c ff ff       	call   c00113c1 <KePanic(char const*)>
c001f72c:	83 c4 10             	add    esp,0x10
c001f72f:	eb 0f                	jmp    c001f740 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f735:	8b 00                	mov    eax,DWORD PTR [eax]
c001f737:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73e:	89 10                	mov    DWORD PTR [eax],edx
c001f740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f747:	8d 50 ff             	lea    edx,[eax-0x1]
c001f74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f751:	83 c4 0c             	add    esp,0xc
c001f754:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f756 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f75a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f75d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f75e <DriverlessDevice::~DriverlessDevice()>:
c001f75e:	ba 7c 16 02 c0       	mov    edx,0xc002167c
c001f763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f767:	89 10                	mov    DWORD PTR [eax],edx
c001f769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f76d:	50                   	push   eax
c001f76e:	e8 21 cf fe ff       	call   c000c694 <Device::~Device()>
c001f773:	83 c4 04             	add    esp,0x4
c001f776:	90                   	nop
c001f777:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f778 <DriverlessDevice::~DriverlessDevice()>:
c001f778:	83 ec 0c             	sub    esp,0xc
c001f77b:	83 ec 0c             	sub    esp,0xc
c001f77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f782:	e8 d7 ff ff ff       	call   c001f75e <DriverlessDevice::~DriverlessDevice()>
c001f787:	83 c4 10             	add    esp,0x10
c001f78a:	83 ec 08             	sub    esp,0x8
c001f78d:	68 58 01 00 00       	push   0x158
c001f792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f796:	e8 7d b0 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f79b:	83 c4 10             	add    esp,0x10
c001f79e:	83 c4 0c             	add    esp,0xc
c001f7a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f7a2 <LinkedList<Device>::addElement(Device*)>:
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7aa:	75 10                	jne    c001f7bc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	68 48 0a 02 c0       	push   0xc0020a48
c001f7b4:	e8 08 1c ff ff       	call   c00113c1 <KePanic(char const*)>
c001f7b9:	83 c4 10             	add    esp,0x10
c001f7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c2:	85 c0                	test   eax,eax
c001f7c4:	74 3a                	je     c001f800 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7cd:	85 c0                	test   eax,eax
c001f7cf:	74 2f                	je     c001f800 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7dc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7fe:	eb 68                	jmp    c001f868 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f804:	8b 00                	mov    eax,DWORD PTR [eax]
c001f806:	85 c0                	test   eax,eax
c001f808:	75 4e                	jne    c001f858 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f811:	85 c0                	test   eax,eax
c001f813:	75 43                	jne    c001f858 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f81d:	89 10                	mov    DWORD PTR [eax],edx
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f831:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f842:	85 c0                	test   eax,eax
c001f844:	74 22                	je     c001f868 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f846:	83 ec 0c             	sub    esp,0xc
c001f849:	68 6a 0a 02 c0       	push   0xc0020a6a
c001f84e:	e8 6e 1b ff ff       	call   c00113c1 <KePanic(char const*)>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	eb 10                	jmp    c001f868 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f858:	83 ec 0c             	sub    esp,0xc
c001f85b:	68 74 0a 02 c0       	push   0xc0020a74
c001f860:	e8 5c 1b ff ff       	call   c00113c1 <KePanic(char const*)>
c001f865:	83 c4 10             	add    esp,0x10
c001f868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f86f:	8d 50 01             	lea    edx,[eax+0x1]
c001f872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f876:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f879:	90                   	nop
c001f87a:	83 c4 0c             	add    esp,0xc
c001f87d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f87e <LinkedList<Device>::LinkedList()>:
c001f87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f882:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f897:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f8b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8be:	90                   	nop
c001f8bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c6:	85 c0                	test   eax,eax
c001f8c8:	75 0e                	jne    c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d1:	85 c0                	test   eax,eax
c001f8d3:	75 03                	jne    c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8d5:	b0 01                	mov    al,0x1
c001f8d7:	c3                   	ret    
c001f8d8:	b0 00                	mov    al,0x0
c001f8da:	90                   	nop
c001f8db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ed:	85 c0                	test   eax,eax
c001f8ef:	75 17                	jne    c001f908 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8f1:	83 ec 0c             	sub    esp,0xc
c001f8f4:	68 80 0a 02 c0       	push   0xc0020a80
c001f8f9:	e8 c3 1a ff ff       	call   c00113c1 <KePanic(char const*)>
c001f8fe:	83 c4 10             	add    esp,0x10
c001f901:	e9 96 00 00 00       	jmp    c001f99c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f906:	66 90                	xchg   ax,ax
c001f908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f90f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f912:	85 c0                	test   eax,eax
c001f914:	0f 95 c0             	setne  al
c001f917:	0f b6 c0             	movzx  eax,al
c001f91a:	85 c0                	test   eax,eax
c001f91c:	74 12                	je     c001f930 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f91e:	83 ec 0c             	sub    esp,0xc
c001f921:	68 cb 0a 02 c0       	push   0xc0020acb
c001f926:	e8 96 1a ff ff       	call   c00113c1 <KePanic(char const*)>
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	66 90                	xchg   ax,ax
c001f930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f934:	8b 00                	mov    eax,DWORD PTR [eax]
c001f936:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f939:	85 c0                	test   eax,eax
c001f93b:	0f 94 c0             	sete   al
c001f93e:	0f b6 c0             	movzx  eax,al
c001f941:	85 c0                	test   eax,eax
c001f943:	74 33                	je     c001f978 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f953:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f961:	83 f8 01             	cmp    eax,0x1
c001f964:	74 22                	je     c001f988 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	68 a4 0a 02 c0       	push   0xc0020aa4
c001f96e:	e8 4e 1a ff ff       	call   c00113c1 <KePanic(char const*)>
c001f973:	83 c4 10             	add    esp,0x10
c001f976:	eb 10                	jmp    c001f988 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f97e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f985:	89 10                	mov    DWORD PTR [eax],edx
c001f987:	90                   	nop
c001f988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f996:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f999:	8d 76 00             	lea    esi,[esi+0x0]
c001f99c:	83 c4 0c             	add    esp,0xc
c001f99f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f9a0:	83 ec 0c             	sub    esp,0xc
c001f9a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9a8:	75 12                	jne    c001f9bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f9aa:	83 ec 0c             	sub    esp,0xc
c001f9ad:	68 48 0a 02 c0       	push   0xc0020a48
c001f9b2:	e8 0a 1a ff ff       	call   c00113c1 <KePanic(char const*)>
c001f9b7:	83 c4 10             	add    esp,0x10
c001f9ba:	66 90                	xchg   ax,ax
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c2:	85 c0                	test   eax,eax
c001f9c4:	74 36                	je     c001f9fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9cd:	85 c0                	test   eax,eax
c001f9cf:	74 2b                	je     c001f9fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9dc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9f1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9f8:	eb 6a                	jmp    c001fa64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9fa:	66 90                	xchg   ax,ax
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa02:	85 c0                	test   eax,eax
c001fa04:	75 4e                	jne    c001fa54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa0d:	85 c0                	test   eax,eax
c001fa0f:	75 43                	jne    c001fa54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa19:	89 10                	mov    DWORD PTR [eax],edx
c001fa1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa3b:	85 c0                	test   eax,eax
c001fa3d:	74 25                	je     c001fa64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	68 6a 0a 02 c0       	push   0xc0020a6a
c001fa47:	e8 75 19 ff ff       	call   c00113c1 <KePanic(char const*)>
c001fa4c:	83 c4 10             	add    esp,0x10
c001fa4f:	eb 13                	jmp    c001fa64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa51:	8d 76 00             	lea    esi,[esi+0x0]
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	68 74 0a 02 c0       	push   0xc0020a74
c001fa5c:	e8 60 19 ff ff       	call   c00113c1 <KePanic(char const*)>
c001fa61:	83 c4 10             	add    esp,0x10
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa6b:	8d 50 01             	lea    edx,[eax+0x1]
c001fa6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa75:	90                   	nop
c001fa76:	83 c4 0c             	add    esp,0xc
c001fa79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa7c <ACPI::~ACPI()>:
c001fa7c:	83 ec 0c             	sub    esp,0xc
c001fa7f:	ba 64 1c 02 c0       	mov    edx,0xc0021c64
c001fa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa88:	89 10                	mov    DWORD PTR [eax],edx
c001fa8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8e:	83 ec 0c             	sub    esp,0xc
c001fa91:	50                   	push   eax
c001fa92:	e8 fd cb fe ff       	call   c000c694 <Device::~Device()>
c001fa97:	83 c4 10             	add    esp,0x10
c001fa9a:	90                   	nop
c001fa9b:	83 c4 0c             	add    esp,0xc
c001fa9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001faa0 <ACPI::~ACPI()>:
c001faa0:	83 ec 0c             	sub    esp,0xc
c001faa3:	83 ec 0c             	sub    esp,0xc
c001faa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faaa:	e8 cd ff ff ff       	call   c001fa7c <ACPI::~ACPI()>
c001faaf:	83 c4 10             	add    esp,0x10
c001fab2:	83 ec 08             	sub    esp,0x8
c001fab5:	68 64 12 00 00       	push   0x1264
c001faba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fabe:	e8 55 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fac3:	83 c4 10             	add    esp,0x10
c001fac6:	83 c4 0c             	add    esp,0xc
c001fac9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001facc <LinkedList<Device>::~LinkedList()>:
c001facc:	90                   	nop
c001facd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fad0 <LinkedList<Device>::isEmpty()>:
c001fad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad6:	85 c0                	test   eax,eax
c001fad8:	75 0e                	jne    c001fae8 <LinkedList<Device>::isEmpty()+0x18>
c001fada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fae1:	85 c0                	test   eax,eax
c001fae3:	75 03                	jne    c001fae8 <LinkedList<Device>::isEmpty()+0x18>
c001fae5:	b0 01                	mov    al,0x1
c001fae7:	c3                   	ret    
c001fae8:	b0 00                	mov    al,0x0
c001faea:	90                   	nop
c001faeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001faec <LinkedList<Device>::getFirstElement()>:
c001faec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001faf4 <LinkedList<Device>::removeFirst()>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fafd:	85 c0                	test   eax,eax
c001faff:	75 17                	jne    c001fb18 <LinkedList<Device>::removeFirst()+0x24>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 80 0a 02 c0       	push   0xc0020a80
c001fb09:	e8 b3 18 ff ff       	call   c00113c1 <KePanic(char const*)>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	e9 92 00 00 00       	jmp    c001fba8 <LinkedList<Device>::removeFirst()+0xb4>
c001fb16:	66 90                	xchg   ax,ax
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb25:	85 c0                	test   eax,eax
c001fb27:	74 13                	je     c001fb3c <LinkedList<Device>::removeFirst()+0x48>
c001fb29:	83 ec 0c             	sub    esp,0xc
c001fb2c:	68 cb 0a 02 c0       	push   0xc0020acb
c001fb31:	e8 8b 18 ff ff       	call   c00113c1 <KePanic(char const*)>
c001fb36:	83 c4 10             	add    esp,0x10
c001fb39:	8d 76 00             	lea    esi,[esi+0x0]
c001fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb42:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb48:	85 c0                	test   eax,eax
c001fb4a:	75 34                	jne    c001fb80 <LinkedList<Device>::removeFirst()+0x8c>
c001fb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb68:	83 f8 01             	cmp    eax,0x1
c001fb6b:	74 27                	je     c001fb94 <LinkedList<Device>::removeFirst()+0xa0>
c001fb6d:	83 ec 0c             	sub    esp,0xc
c001fb70:	68 a4 0a 02 c0       	push   0xc0020aa4
c001fb75:	e8 47 18 ff ff       	call   c00113c1 <KePanic(char const*)>
c001fb7a:	83 c4 10             	add    esp,0x10
c001fb7d:	eb 15                	jmp    c001fb94 <LinkedList<Device>::removeFirst()+0xa0>
c001fb7f:	90                   	nop
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb86:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb90:	89 10                	mov    DWORD PTR [eax],edx
c001fb92:	66 90                	xchg   ax,ax
c001fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fba5:	8d 76 00             	lea    esi,[esi+0x0]
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fbac <CPU::~CPU()>:
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c001fbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb8:	89 10                	mov    DWORD PTR [eax],edx
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	83 ec 0c             	sub    esp,0xc
c001fbc1:	50                   	push   eax
c001fbc2:	e8 cd ca fe ff       	call   c000c694 <Device::~Device()>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	90                   	nop
c001fbcb:	83 c4 0c             	add    esp,0xc
c001fbce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fbd0 <CPU::~CPU()>:
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	83 ec 0c             	sub    esp,0xc
c001fbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbda:	e8 cd ff ff ff       	call   c001fbac <CPU::~CPU()>
c001fbdf:	83 c4 10             	add    esp,0x10
c001fbe2:	83 ec 08             	sub    esp,0x8
c001fbe5:	68 94 11 00 00       	push   0x1194
c001fbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbee:	e8 25 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	83 c4 0c             	add    esp,0xc
c001fbf9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbfc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fc04 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fc04:	90                   	nop
c001fc05:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fc08 <ThreadControlBlock::ThreadControlBlock()>:
c001fc08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc0c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc17:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fc1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc22:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fc29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fc34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc38:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fc3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc43:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fc47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fc4f:	90                   	nop
c001fc50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc8d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc94:	90                   	nop
c001fc95:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc96 <PCI::~PCI()>:
c001fc96:	83 ec 0c             	sub    esp,0xc
c001fc99:	ba ec 2c 02 c0       	mov    edx,0xc0022cec
c001fc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca2:	89 10                	mov    DWORD PTR [eax],edx
c001fca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	50                   	push   eax
c001fcac:	e8 7b c4 fe ff       	call   c000c12c <Bus::~Bus()>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	90                   	nop
c001fcb5:	83 c4 0c             	add    esp,0xc
c001fcb8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fcba <PCI::~PCI()>:
c001fcba:	83 ec 0c             	sub    esp,0xc
c001fcbd:	83 ec 0c             	sub    esp,0xc
c001fcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc4:	e8 cd ff ff ff       	call   c001fc96 <PCI::~PCI()>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	83 ec 08             	sub    esp,0x8
c001fccf:	68 5c 01 00 00       	push   0x15c
c001fcd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd8:	e8 3b ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	83 c4 0c             	add    esp,0xc
c001fce3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fce4 <IDE::~IDE()>:
c001fce4:	83 ec 0c             	sub    esp,0xc
c001fce7:	ba a0 2d 02 c0       	mov    edx,0xc0022da0
c001fcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf0:	89 10                	mov    DWORD PTR [eax],edx
c001fcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	50                   	push   eax
c001fcfa:	e8 0d ce fe ff       	call   c000cb0c <HardDiskController::~HardDiskController()>
c001fcff:	83 c4 10             	add    esp,0x10
c001fd02:	90                   	nop
c001fd03:	83 c4 0c             	add    esp,0xc
c001fd06:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fd08 <IDE::~IDE()>:
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	83 ec 0c             	sub    esp,0xc
c001fd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd12:	e8 cd ff ff ff       	call   c001fce4 <IDE::~IDE()>
c001fd17:	83 c4 10             	add    esp,0x10
c001fd1a:	83 ec 08             	sub    esp,0x8
c001fd1d:	68 70 02 00 00       	push   0x270
c001fd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd26:	e8 ed aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	83 c4 0c             	add    esp,0xc
c001fd31:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fd32 <SATABus::~SATABus()>:
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	ba f0 2d 02 c0       	mov    edx,0xc0022df0
c001fd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3e:	89 10                	mov    DWORD PTR [eax],edx
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	50                   	push   eax
c001fd48:	e8 bf cd fe ff       	call   c000cb0c <HardDiskController::~HardDiskController()>
c001fd4d:	83 c4 10             	add    esp,0x10
c001fd50:	90                   	nop
c001fd51:	83 c4 0c             	add    esp,0xc
c001fd54:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd56 <SATABus::~SATABus()>:
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd60:	e8 cd ff ff ff       	call   c001fd32 <SATABus::~SATABus()>
c001fd65:	83 c4 10             	add    esp,0x10
c001fd68:	83 ec 08             	sub    esp,0x8
c001fd6b:	68 64 01 00 00       	push   0x164
c001fd70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd74:	e8 9f aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd79:	83 c4 10             	add    esp,0x10
c001fd7c:	83 c4 0c             	add    esp,0xc
c001fd7f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd80 <ATA::~ATA()>:
c001fd80:	83 ec 0c             	sub    esp,0xc
c001fd83:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001fd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8c:	89 10                	mov    DWORD PTR [eax],edx
c001fd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	50                   	push   eax
c001fd96:	e8 53 ce fe ff       	call   c000cbee <PhysicalDisk::~PhysicalDisk()>
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	90                   	nop
c001fd9f:	83 c4 0c             	add    esp,0xc
c001fda2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fda4 <ATA::~ATA()>:
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	83 ec 0c             	sub    esp,0xc
c001fdaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdae:	e8 cd ff ff ff       	call   c001fd80 <ATA::~ATA()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	83 ec 08             	sub    esp,0x8
c001fdb9:	68 7c 01 00 00       	push   0x17c
c001fdbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc2:	e8 51 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdc7:	83 c4 10             	add    esp,0x10
c001fdca:	83 c4 0c             	add    esp,0xc
c001fdcd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fdce <ATAPI::~ATAPI()>:
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	ba 78 2e 02 c0       	mov    edx,0xc0022e78
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	89 10                	mov    DWORD PTR [eax],edx
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	50                   	push   eax
c001fde4:	e8 05 ce fe ff       	call   c000cbee <PhysicalDisk::~PhysicalDisk()>
c001fde9:	83 c4 10             	add    esp,0x10
c001fdec:	90                   	nop
c001fded:	83 c4 0c             	add    esp,0xc
c001fdf0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fdf2 <ATAPI::~ATAPI()>:
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	83 ec 0c             	sub    esp,0xc
c001fdf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfc:	e8 cd ff ff ff       	call   c001fdce <ATAPI::~ATAPI()>
c001fe01:	83 c4 10             	add    esp,0x10
c001fe04:	83 ec 08             	sub    esp,0x8
c001fe07:	68 84 01 00 00       	push   0x184
c001fe0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe10:	e8 03 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe15:	83 c4 10             	add    esp,0x10
c001fe18:	83 c4 0c             	add    esp,0xc
c001fe1b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fe1c <SATA::~SATA()>:
c001fe1c:	83 ec 0c             	sub    esp,0xc
c001fe1f:	ba 2c 2f 02 c0       	mov    edx,0xc0022f2c
c001fe24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe28:	89 10                	mov    DWORD PTR [eax],edx
c001fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	50                   	push   eax
c001fe32:	e8 b7 cd fe ff       	call   c000cbee <PhysicalDisk::~PhysicalDisk()>
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	90                   	nop
c001fe3b:	83 c4 0c             	add    esp,0xc
c001fe3e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fe40 <SATA::~SATA()>:
c001fe40:	83 ec 0c             	sub    esp,0xc
c001fe43:	83 ec 0c             	sub    esp,0xc
c001fe46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe4a:	e8 cd ff ff ff       	call   c001fe1c <SATA::~SATA()>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	83 ec 08             	sub    esp,0x8
c001fe55:	68 7c 01 00 00       	push   0x17c
c001fe5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5e:	e8 b5 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe63:	83 c4 10             	add    esp,0x10
c001fe66:	83 c4 0c             	add    esp,0xc
c001fe69:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe6a <SATAPI::~SATAPI()>:
c001fe6a:	83 ec 0c             	sub    esp,0xc
c001fe6d:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001fe72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe76:	89 10                	mov    DWORD PTR [eax],edx
c001fe78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	50                   	push   eax
c001fe80:	e8 69 cd fe ff       	call   c000cbee <PhysicalDisk::~PhysicalDisk()>
c001fe85:	83 c4 10             	add    esp,0x10
c001fe88:	90                   	nop
c001fe89:	83 c4 0c             	add    esp,0xc
c001fe8c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe8e <SATAPI::~SATAPI()>:
c001fe8e:	83 ec 0c             	sub    esp,0xc
c001fe91:	83 ec 0c             	sub    esp,0xc
c001fe94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe98:	e8 cd ff ff ff       	call   c001fe6a <SATAPI::~SATAPI()>
c001fe9d:	83 c4 10             	add    esp,0x10
c001fea0:	83 ec 08             	sub    esp,0x8
c001fea3:	68 84 01 00 00       	push   0x184
c001fea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feac:	e8 67 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001feb1:	83 c4 10             	add    esp,0x10
c001feb4:	83 c4 0c             	add    esp,0xc
c001feb7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001feb8 <IOAPIC::~IOAPIC()>:
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	ba 90 30 02 c0       	mov    edx,0xc0023090
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	89 10                	mov    DWORD PTR [eax],edx
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	50                   	push   eax
c001fece:	e8 c1 c7 fe ff       	call   c000c694 <Device::~Device()>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	90                   	nop
c001fed7:	83 c4 0c             	add    esp,0xc
c001feda:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fedc <IOAPIC::~IOAPIC()>:
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee6:	e8 cd ff ff ff       	call   c001feb8 <IOAPIC::~IOAPIC()>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	83 ec 08             	sub    esp,0x8
c001fef1:	68 68 01 00 00       	push   0x168
c001fef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefa:	e8 19 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001feff:	83 c4 10             	add    esp,0x10
c001ff02:	83 c4 0c             	add    esp,0xc
c001ff05:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff08 <APICTimer::~APICTimer()>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c001ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff14:	89 10                	mov    DWORD PTR [eax],edx
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	50                   	push   eax
c001ff1e:	e8 3d e2 fe ff       	call   c000e160 <Timer::~Timer()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	90                   	nop
c001ff27:	83 c4 0c             	add    esp,0xc
c001ff2a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff2c <APICTimer::~APICTimer()>:
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	83 ec 0c             	sub    esp,0xc
c001ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff36:	e8 cd ff ff ff       	call   c001ff08 <APICTimer::~APICTimer()>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	83 ec 08             	sub    esp,0x8
c001ff41:	68 60 01 00 00       	push   0x160
c001ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4a:	e8 c9 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	83 c4 0c             	add    esp,0xc
c001ff55:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff58 <PIT::~PIT()>:
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	ba 28 31 02 c0       	mov    edx,0xc0023128
c001ff60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff64:	89 10                	mov    DWORD PTR [eax],edx
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	50                   	push   eax
c001ff6e:	e8 ed e1 fe ff       	call   c000e160 <Timer::~Timer()>
c001ff73:	83 c4 10             	add    esp,0x10
c001ff76:	90                   	nop
c001ff77:	83 c4 0c             	add    esp,0xc
c001ff7a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff7c <PIT::~PIT()>:
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	83 ec 0c             	sub    esp,0xc
c001ff82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff86:	e8 cd ff ff ff       	call   c001ff58 <PIT::~PIT()>
c001ff8b:	83 c4 10             	add    esp,0x10
c001ff8e:	83 ec 08             	sub    esp,0x8
c001ff91:	68 5c 01 00 00       	push   0x15c
c001ff96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9a:	e8 79 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff9f:	83 c4 10             	add    esp,0x10
c001ffa2:	83 c4 0c             	add    esp,0xc
c001ffa5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 3d 1f 02 c0       	mov    esi,0xc0021f3d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 59 1f 02 c0       	mov    esi,0xc0021f59
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
