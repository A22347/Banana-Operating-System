
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 70 f4 01 c0       	mov    eax,0xc001f470
c0000025:	3d 70 f4 01 c0       	cmp    eax,0xc001f470
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 70 f4 01 c0       	push   0xc001f470
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 70 f4 01 c0       	mov    eax,0xc001f470
c0000051:	2d 70 f4 01 c0       	sub    eax,0xc001f470
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 70 f4 01 c0       	push   0xc001f470
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 18 c9 01 c0       	mov    ebx,0xc001c918
c0000097:	81 eb 14 c9 01 c0    	sub    ebx,0xc001c914
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 14 c9 01 c0       	mov    esi,0xc001c914
c00000a6:	a1 a4 f6 01 c0       	mov    eax,ds:0xc001f6a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 f6 01 c0       	mov    ds:0xc001f6a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 f6 01 c0       	mov    eax,ds:0xc001f6a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 70 f4 01 c0       	push   0xc001f470
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f6a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 f6 01 c0       	push   0xc001f6a8
c0000108:	68 70 f4 01 c0       	push   0xc001f470
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 3c 29 01 00       	call   c0012bec <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 10 a0 00 00       	call   c000a2d8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 1a 29 01 00       	call   c0012bec <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 eb 2d 01 00       	call   c00130dc <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 3a 34 01 00       	call   c0013734 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 a0 04 02 c0 	lgdtd  ds:0xc00204a0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 a4 fd 00 00       	jmp    c0010126 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 c0 f6 01 c0       	mov    ds:0xc001f6c0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 c0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6c0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d c0 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6c0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 c9 01 c0 02 	test   BYTE PTR [edx-0x3ffe36e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 c9 01 c0 08 	test   BYTE PTR [edx-0x3ffe36e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 c9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe36e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d e0 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6e0
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d e0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e0,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 e4 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe091c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 e4 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe091c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d e0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e0,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 0c f7 01 c0    	cmp    DWORD PTR ds:0xc001f70c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 1c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f71c
c0000d3d:	c7 42 0c 14 f7 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f714
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 1c f7 01 c0    	mov    DWORD PTR ds:0xc001f71c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 0c f7 01 c0    	mov    DWORD PTR ds:0xc001f70c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 e0 f6 01 c0 02 	test   BYTE PTR ds:0xc001f6e0,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d e0 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6e0
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 e4 f6 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe091c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 e4 f6 01 c0 	mov    DWORD PTR [edx*4-0x3ffe091c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 14 f7 01 c0 	lea    edx,[eax*8-0x3ffe08ec]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 20 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f720
c00010bf:	81 fb 14 f7 01 c0    	cmp    ebx,0xc001f714
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 14 f7 01 c0       	cmp    eax,0xc001f714
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 10 f7 01 c0    	cmp    DWORD PTR ds:0xc001f710,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 1c f7 01 c0       	mov    ds:0xc001f71c,eax
c00010fb:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c0001100:	a3 10 f7 01 c0       	mov    ds:0xc001f710,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 14 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f714
c000110e:	c7 40 0c 14 f7 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f714
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 14 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f714
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 d8 f6 01 c0 	lea    ebp,[edx*4-0x3ffe0928]
c000115f:	8b 14 95 e0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0920]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 e0 f6 01 c0 	lea    ecx,[edx*4-0x3ffe0920]
c000117a:	8b 14 95 e0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0920]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 14 fa 01 c0 	or     DWORD PTR [edi*4-0x3ffe05ec],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 14 f7 01 c0 	lea    eax,[eax*8-0x3ffe08ec]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 1c f7 01 c0    	mov    DWORD PTR ds:0xc001f71c,ecx
c0001234:	89 0d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,ecx
c000123a:	c7 41 08 14 f7 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f714
c0001241:	c7 41 0c 14 f7 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f714
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 0c f7 01 c0 	lea    edx,[ecx*8-0x3ffe08f4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 14 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ec]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 14 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ec]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 0c f7 01 c0 	lea    edx,[eax*4-0x3ffe08f4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 14 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe05ec],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 1c f7 01 c0    	mov    DWORD PTR ds:0xc001f71c,edi
c0001307:	89 3d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,edi
c000130d:	c7 47 08 14 f7 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f714
c0001314:	c7 47 0c 14 f7 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f714
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 10 f7 01 c0    	mov    DWORD PTR ds:0xc001f710,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 0c f7 01 c0       	mov    eax,ds:0xc001f70c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 0c f7 01 c0    	mov    DWORD PTR ds:0xc001f70c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d e0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6e0,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 34 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa34
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 34 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa34,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 34 fa 01 c0    	mov    DWORD PTR ds:0xc001fa34,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 0c f7 01 c0    	cmp    DWORD PTR ds:0xc001f70c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 0c f7 01 c0    	mov    DWORD PTR ds:0xc001f70c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d e0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6e0,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 3c fa 01 c0    	push   DWORD PTR ds:0xc001fa3c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d e0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6e0,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 3c fa 01 c0       	mov    eax,ds:0xc001fa3c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 0c f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f70c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 0c f7 01 c0       	mov    eax,ds:0xc001f70c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 e4 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe091c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 14 f7 01 c0       	mov    eax,0xc001f714
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 0c fa 01 c0       	cmp    eax,0xc001fa0c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 48 fa 01 c0       	mov    eax,ds:0xc001fa48
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 30 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa30
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 44 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa44
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 54 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa54
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 ca 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe35dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 e0 f6 01 c0       	mov    eax,ds:0xc001f6e0
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 e0 f6 01 c0       	mov    ds:0xc001f6e0,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 24 fa 01 c0    	mov    DWORD PTR ds:0xc001fa24,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 28 fa 01 c0    	mov    DWORD PTR ds:0xc001fa28,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 2c fa 01 c0    	mov    DWORD PTR ds:0xc001fa2c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 34 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa34,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 a0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc760]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 da 4d 01 00       	jmp    c0016ac4 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 a0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc760]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 08 4e 01 00       	jmp    c0016b08 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 a0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc760]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 2d 4e 01 00       	jmp    c0016b4c <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3480]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3480]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba e4 e9 01 c0       	mov    edx,0xc001e9e4
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c ca 01 c0       	mov    edx,0xc001ca3c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 80 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0580]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 60 fa 01 c0    	mov    ax,ds:0xc001fa60
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 60 fa 01 c0    	mov    ds:0xc001fa60,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 ca 01 c0       	mov    eax,0xc001ca42
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 cb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3500]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b ca 01 c0       	mov    eax,0xc001ca4b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3480]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 80 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0580]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 80 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0580],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 ca 01 c0       	mov    eax,0xc001cad0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 80 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0580]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 ca 01 c0       	mov    ebx,0xc001cac0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 ca 01 c0       	mov    edx,0xc001caa0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 ca 01 c0       	mov    edx,0xc001cab0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 ca 01 c0       	mov    edx,0xc001ca52
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e ca 01 c0       	mov    edx,0xc001ca5e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 ca 01 c0       	mov    edx,0xc001ca72
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001cea0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cea0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 cc 01 c0       	mov    eax,0xc001cca0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 cb 01 c0       	mov    eax,0xc001cbe0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3460]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 00 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a00]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 60 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe09a0]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 b0 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0450],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 40 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f640
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 21 14 01 00       	call   c00173a0 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 94 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020494,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 60 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09a0]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 94 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020494
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 cf 01 c0       	push   0xc001cfa0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 60 04 02 c0       	mov    ecx,0xc0020460
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 20 fb 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe04e0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 20 fb 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe04e0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 24 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04dc],esi
c000634e:	89 87 20 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04e0],eax
c0006354:	c7 87 28 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe04d8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 b0 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0450],0x0
c0006370:	89 87 2c fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04d4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 20 fb 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe04e0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 20 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04e0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 b0 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0450]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 28 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe04d8]
c00063e9:	8b 8d 2c fb 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe04d4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 20 fb 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe04e0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 00 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0a00]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 28 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe04d8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 28 fb 01 c0    	add    DWORD PTR [ebp-0x3ffe04d8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 20 fb 01 c0    	lea    ecx,[ebp-0x3ffe04e0]
c00064e1:	83 bd 20 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04e0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 2c fb 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe04d4]
c000651f:	05 20 fb 01 c0       	add    eax,0xc001fb20
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 28 fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe04d8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 20 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe04e0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb b0 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0450],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 28 fb 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe04d8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 20 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe04e0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba b0 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0450],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 2c fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe04d4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 20 fb 01 c0    	lea    esi,[eax-0x3ffe04e0]
c00065e4:	83 b8 20 fb 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe04e0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 60 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe09a0]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 28 fb 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe04d8]
c0006653:	81 c2 20 fb 01 c0    	add    edx,0xc001fb20
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 60 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe09a0]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 38 fb 01 c0    	lea    ebp,[eax-0x3ffe04c8]
c00066b9:	83 3d 94 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020494,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 38 fb 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe04c8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 cf 01 c0       	push   0xc001cfa0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 33 fb 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe04cd],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 30 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe04d0],eax
c000678f:	89 91 34 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe04cc],edx
c0006795:	81 c1 20 fb 01 c0    	add    ecx,0xc001fb20
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 30 fb 01 c0       	add    eax,0xc001fb30
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 40 f6 01 c0       	mov    ds:0xc001f640,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 94 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020494,0x0
c00067df:	a1 8c 04 02 c0       	mov    eax,ds:0xc002048c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 60 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09a0]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 a3 cf 01 c0       	push   0xc001cfa3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 60 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe09a0]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 94 04 02 c0       	mov    ds:0xc0020494,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 94 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020494,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 8c 04 02 c0       	mov    eax,ds:0xc002048c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 60 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe09a0]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 aa cf 01 c0       	push   0xc001cfaa
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 60 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe09a0]
c000687d:	bf 60 04 02 c0       	mov    edi,0xc0020460
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 62 04 02 c0       	mov    eax,0xc0020462
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 88 04 02 c0       	mov    ds:0xc0020488,eax
c00068a0:	b8 6a 04 02 c0       	mov    eax,0xc002046a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 84 04 02 c0       	mov    ds:0xc0020484,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 20 fb 01 c0       	push   0xc001fb20
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 20 fb 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fb20,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 90 04 02 c0       	mov    ds:0xc0020490,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 00 fb 01 c0       	mov    ds:0xc001fb00,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 60 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe09a0],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 00 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a00],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 60 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe09a0]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 00 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a00]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 90 04 02 c0       	mov    eax,ds:0xc0020490
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 00 fb 01 c0       	mov    eax,ds:0xc001fb00
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 00 fb 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fb00,0x0
c00069a9:	c7 05 90 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020490,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 5e 50 00 00       	call   c000ba36 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 b1 cf 01 c0       	push   0xc001cfb1
c0006a09:	e8 b5 90 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0006a28:	50                   	push   eax
c0006a29:	68 ca cf 01 c0       	push   0xc001cfca
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 ea c4 00 00       	call   c0012f20 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 e1 c6 00 00       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 70 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023770
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 80 3b 01 c0       	push   0xc0013b80
c0006a5a:	52                   	push   edx
c0006a5b:	e8 cc c6 00 00       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 28 37 02 c0       	mov    ds:0xc0023728,eax
c0006a68:	68 c8 d0 01 c0       	push   0xc001d0c8
c0006a6d:	c6 05 9d 04 02 c0 01 	mov    BYTE PTR ds:0xc002049d,0x1
c0006a74:	e8 4a 90 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006a79:	e8 e1 d4 00 00       	call   c0013f5f <Vm::initialise8086()>
c0006a7e:	e8 f7 3d 00 00       	call   c000a87a <Fs::initVFS()>
c0006a83:	c7 04 24 d7 cf 01 c0 	mov    DWORD PTR [esp],0xc001cfd7
c0006a8a:	e8 34 90 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006a8f:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 c8 d0 01 c0       	push   0xc001d0c8
c0006aae:	e8 10 90 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006ab3:	e8 e6 94 00 00       	call   c000ff9e <Krnl::loadSystemEnv()>
c0006ab8:	e8 43 97 00 00       	call   c0010200 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 f1 cf 01 c0       	push   0xc001cff1
c0006ac7:	68 fa cf 01 c0       	push   0xc001cffa
c0006acc:	e8 3d aa 00 00       	call   c001150e <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 af 48 00 00       	call   c000b388 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ec d0 01 c0 	mov    DWORD PTR [esp],0xc001d0ec
c0006ae0:	e8 de 8f 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 3d 4f 00 00       	call   c000ba34 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 02 d0 01 c0 	mov    DWORD PTR [esp],0xc001d002
c0006afe:	e8 c0 8f 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 13 d0 01 c0       	push   0xc001d013
c0006b12:	e8 43 be 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 6b c0 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 1b ca 00 00       	call   c0013548 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 2f d0 01 c0       	push   0xc001d02f
c0006b41:	50                   	push   eax
c0006b42:	e8 69 4f 00 00       	call   c000bab0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 38 d1 01 c0       	mov    edx,0xc001d138
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 b1 04 02 c0 04 	test   BYTE PTR ds:0xc00204b1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 e5 4c 01 00       	call   c001b916 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 84 83 00 00       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 5d 83 00 00       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 3b 83 00 00       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 19 83 00 00       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 b0 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00204b0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 27 82 00 00       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 02 82 00 00       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 4f 4b 01 00       	call   c001b8d0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 ac 48 01 00       	call   c001b650 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 1e 82 00 00       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 38 d0 01 c0       	push   0xc001d038
c0006e14:	e8 22 93 00 00       	call   c001013b <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 3e d0 01 c0       	push   0xc001d03e
c0006e4c:	e8 ea 92 00 00       	call   c001013b <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 cf 7b 00 00       	jmp    c000ea68 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 b0 04 02 c0 04 	test   BYTE PTR ds:0xc00204b0,0x4
c0006ee8:	68 44 d0 01 c0       	push   0xc001d044
c0006eed:	0f 94 05 40 f1 01 c0 	sete   BYTE PTR ds:0xc001f140
c0006ef4:	e8 ca 8b 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 f1 76 00 00       	call   c000e600 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 fa 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 5c d0 01 c0 	mov    DWORD PTR [esp],0xc001d05c
c0006f37:	e8 87 8b 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 56 81 00 00       	call   c000f0a8 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 b7 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 0c d1 01 c0       	push   0xc001d10c
c0006f7e:	e8 40 8b 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006f83:	e8 0e e1 00 00       	call   c0015096 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 76 d0 01 c0 	mov    DWORD PTR [esp],0xc001d076
c0006f8f:	e8 2f 8b 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 a4 c2 00 00       	call   c0013244 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 91 d0 01 c0       	push   0xc001d091
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 e7 34 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 a2 d0 01 c0       	push   0xc001d0a2
c000700e:	e8 28 91 00 00       	call   c001013b <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 af d0 01 c0       	push   0xc001d0af
c0007023:	e8 13 91 00 00       	call   c001013b <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 b9 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d0b9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 fc 90 00 00       	jmp    c001013b <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 a2 04 02 c0       	mov    ds:0xc00204a2,eax
c00070cf:	66 89 15 a0 04 02 c0 	mov    WORD PTR ds:0xc00204a0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007217:	48                   	dec    eax
c0007218:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 4b db 00 00       	call   c0014d70 <HalSystemIdle()>
c0007225:	e8 a8 4c 01 00       	call   c001bed2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 a8 04 02 c0 ff 07 	mov    WORD PTR ds:0xc00204a8,0x7ff
c000731d:	a3 aa 04 02 c0       	mov    ds:0xc00204aa,eax
c0007322:	0f 01 1d a8 04 02 c0 	lidtd  ds:0xc00204a8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 e0 b6 01 c0       	push   0xc001b6e0
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 f0 b6 01 c0       	push   0xc001b6f0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 fa b6 01 c0       	push   0xc001b6fa
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 04 b7 01 c0       	push   0xc001b704
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 0e b7 01 c0       	push   0xc001b70e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 18 b7 01 c0       	push   0xc001b718
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 22 b7 01 c0       	push   0xc001b722
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 2c b7 01 c0       	push   0xc001b72c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 36 b7 01 c0       	push   0xc001b736
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 3e b7 01 c0       	push   0xc001b73e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 48 b7 01 c0       	push   0xc001b748
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 50 b7 01 c0       	push   0xc001b750
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 58 b7 01 c0       	push   0xc001b758
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 60 b7 01 c0       	push   0xc001b760
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 68 b7 01 c0       	push   0xc001b768
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 70 b7 01 c0       	push   0xc001b770
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 7a b7 01 c0       	push   0xc001b77a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 84 b7 01 c0       	push   0xc001b784
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 8e b7 01 c0       	push   0xc001b78e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 28 b8 01 c0       	push   0xc001b828
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 2f b8 01 c0       	push   0xc001b82f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 1a b8 01 c0       	push   0xc001b81a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 21 b8 01 c0       	push   0xc001b821
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 98 b7 01 c0       	push   0xc001b798
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 a2 b7 01 c0       	push   0xc001b7a2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 ac b7 01 c0       	push   0xc001b7ac
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 b6 b7 01 c0       	push   0xc001b7b6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 c0 b7 01 c0       	push   0xc001b7c0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 ca b7 01 c0       	push   0xc001b7ca
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 d4 b7 01 c0       	push   0xc001b7d4
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 de b7 01 c0       	push   0xc001b7de
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 e8 b7 01 c0       	push   0xc001b7e8
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 f2 b7 01 c0       	push   0xc001b7f2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 fc b7 01 c0       	push   0xc001b7fc
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 06 b8 01 c0       	push   0xc001b806
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 10 b8 01 c0       	push   0xc001b810
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 66 b8 01 c0       	push   0xc001b866
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 70 b8 01 c0       	push   0xc001b870
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 7a b8 01 c0       	push   0xc001b87a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 84 b8 01 c0       	push   0xc001b884
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 8e b8 01 c0       	push   0xc001b88e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 98 b8 01 c0       	push   0xc001b898
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 a2 b8 01 c0       	push   0xc001b8a2
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 ac b8 01 c0       	push   0xc001b8ac
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0007614:	e8 05 24 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 36 b7 01 c0       	push   0xc001b736
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 34 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f134
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 90 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020590
c00076c2:	8b 3d 34 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f134
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 40 22 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 34 f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f134,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 34 f1 01 c0       	mov    eax,ds:0xc001f134
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 5c d1 01 c0       	push   0xc001d15c
c000770e:	e8 c5 2d 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 8c d1 01 c0       	push   0xc001d18c
c000772d:	e8 09 8a 00 00       	call   c001013b <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 91 d1 01 c0       	push   0xc001d191
c0007743:	e8 f3 89 00 00       	call   c001013b <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007763:	48                   	dec    eax
c0007764:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0007781:	e8 98 22 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 b0 04 02 c0       	mov    ds:0xc00204b0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 98 d1 01 c0       	push   0xc001d198
c0007862:	e8 71 2c 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 e9 81 00 00       	call   c000fa55 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d 90 05 02 c0    	mov    DWORD PTR ds:0xc0020590,ebx
c0007899:	e8 cc 45 01 00       	call   c001be6a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 98 04 02 c0    	mov    DWORD PTR ds:0xc0020498,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 e7 1e 00 00       	call   c00097b6 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb cc 04 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfb34],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 b0 d1 01 c0       	push   0xc001d1b0
c000792c:	e8 0a 88 00 00       	call   c001013b <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 cc 04 02 c0    	lea    edx,[ebp-0x3ffdfb34]
c000796e:	8d 84 05 cd 04 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfb33]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d c4 04 02 c0    	add    DWORD PTR ds:0xc00204c4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 b0 d1 01 c0       	push   0xc001d1b0
c0007993:	e8 a3 87 00 00       	call   c001013b <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 c4 04 02 c0    	sub    DWORD PTR ds:0xc00204c4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 cc 04 02 c0       	add    eax,0xc00204cc
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 38 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f138
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 38 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f138
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 38 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f138
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d c4 04 02 c0    	dec    DWORD PTR ds:0xc00204c4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 55 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d255
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 b8 86 00 00       	jmp    c001013b <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 b8 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204b8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d b8 04 02 c0    	mov    DWORD PTR ds:0xc00204b8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 b8 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204b8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 dc 04 02 c0 01 	xor    BYTE PTR ds:0xc00204dc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 08 27 00 00       	call   c000a1f8 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 d8 d1 01 c0       	push   0xc001d1d8
c0007aff:	e8 37 86 00 00       	call   c001013b <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d b8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204b8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 b8 04 02 c0       	mov    eax,ds:0xc00204b8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 c4 04 02 c0    	inc    DWORD PTR ds:0xc00204c4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007b99:	48                   	dec    eax
c0007b9a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d bc 04 02 c0    	cmp    DWORD PTR ds:0xc00204bc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d bc 04 02 c0    	mov    DWORD PTR ds:0xc00204bc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 cc 04 02 c0       	push   0xc00204cc
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 6b d2 01 c0       	push   0xc001d26b
c0007c18:	e8 bb 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 08 d2 01 c0       	push   0xc001d208
c0007ca4:	e8 2f 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 2c d2 01 c0       	push   0xc001d22c
c0007d40:	e8 93 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 c8 04 02 c0    	add    eax,DWORD PTR ds:0xc00204c8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 91 d2 01 c0       	push   0xc001d291
c0007d76:	e8 5d 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 83 d2 01 c0       	push   0xc001d283
c0007de5:	e8 51 83 00 00       	call   c001013b <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 c8 04 02 c0 02 	add    DWORD PTR ds:0xc00204c8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba f0 d2 01 c0       	mov    edx,0xc001d2f0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 e8 24 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ad d2 01 c0       	push   0xc001d2ad
c0007fa7:	e8 8f 81 00 00       	call   c001013b <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0007ff0:	e8 57 b3 00 00       	call   c001334c <schedule()>
c0007ff5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 c3 3c 01 00       	call   c001bd50 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 ca d2 01 c0       	push   0xc001d2ca
c00080a2:	e8 94 80 00 00       	call   c001013b <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba f0 d2 01 c0       	mov    edx,0xc001d2f0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 84 d3 01 c0       	mov    edx,0xc001d384
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 71 22 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 a6 45 00 00       	call   c000c732 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 76 dd 00 00       	call   c0015f28 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 60 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0ea0]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 60 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0ea0]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 18 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fe8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 f0 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1010]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d e4 04 02 c0    	cmp    DWORD PTR ds:0xc00204e4,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 99 da 00 00       	call   c0015db4 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d e4 04 02 c0    	cmp    DWORD PTR ds:0xc00204e4,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 f4 da 00 00       	jmp    c0015ebc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 04 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d304
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 27 7d 00 00       	jmp    c001013b <KePanic(char const*)>
c0008414:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d e4 04 02 c0    	mov    DWORD PTR ds:0xc00204e4,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 c0 2d 00 00       	jmp    c000b32f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 12 d3 01 c0       	mov    esi,0xc001d312
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d e4 04 02 c0    	cmp    DWORD PTR ds:0xc00204e4,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 06 d6 00 00       	call   c0015ebc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 84 d3 01 c0       	mov    edx,0xc001d384
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 6a 0f 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 23 d3 01 c0       	push   0xc001d323
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 29 d3 01 c0       	push   0xc001d329
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 2f d3 01 c0       	push   0xc001d32f
c0008b78:	e8 be 75 00 00       	call   c001013b <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 4c d4 01 c0       	mov    edx,0xc001d44c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 a0 f1 01 c0       	mov    eax,ds:0xc001f1a0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 a0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 78 05 02 c0       	push   0xc0020578
c0008e80:	e8 b3 30 01 00       	call   c001bf38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 74 05 02 c0       	mov    al,ds:0xc0020574
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 74 05 02 c0 01 	mov    BYTE PTR ds:0xc0020574,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 6c 05 02 c0    	mov    DWORD PTR ds:0xc002056c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 70 05 02 c0    	mov    DWORD PTR ds:0xc0020570,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 64 05 02 c0    	mov    DWORD PTR ds:0xc0020564,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 68 05 02 c0    	mov    DWORD PTR ds:0xc0020568,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 00 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb00],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 68 d4 01 c0       	mov    edx,0xc001d468
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 4c d4 01 c0       	mov    edx,0xc001d44c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 78 05 02 c0       	push   0xc0020578
c0009050:	e8 b7 2f 01 00       	call   c001c00c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 78 05 02 c0       	push   0xc0020578
c0009064:	e8 ab 2f 01 00       	call   c001c014 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 78 05 02 c0       	push   0xc0020578
c0009082:	e8 b1 2e 01 00       	call   c001bf38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 24 d4 01 c0       	push   0xc001d424
c00090a9:	e8 8d 70 00 00       	call   c001013b <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 06 13 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 68 d4 01 c0       	mov    edx,0xc001d468
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 ba 12 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 78 05 02 c0       	push   0xc0020578
c000914d:	e8 ba 2e 01 00       	call   c001c00c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 78 05 02 c0       	push   0xc0020578
c000916a:	e8 47 2f 01 00       	call   c001c0b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 6c 05 02 c0       	mov    eax,ds:0xc002056c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 70 05 02 c0       	mov    eax,ds:0xc0020570
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 68 05 02 c0       	mov    eax,ds:0xc0020568
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 64 05 02 c0       	mov    eax,ds:0xc0020564
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 40 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfac0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 00 05 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfb00]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 78 05 02 c0       	push   0xc0020578
c00091ec:	e8 05 2d 01 00       	call   c001bef6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 30 f1 01 c0       	push   0xc001f130
c00091fc:	68 78 05 02 c0       	push   0xc0020578
c0009201:	68 f4 be 01 c0       	push   0xc001bef4
c0009206:	e8 87 11 00 00       	call   c000a392 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 a8 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1a8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d a8 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1a8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d a4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1a4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 a4 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f1a4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d a4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 7c d4 01 c0       	push   0xc001d47c
c00092ff:	e8 37 6e 00 00       	call   c001013b <KePanic(char const*)>
c0009304:	8b 3d a4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1a4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d a4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 a4 f1 01 c0       	mov    eax,ds:0xc001f1a4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 a4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 a4 f1 01 c0       	mov    ds:0xc001f1a4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 8c 05 02 c0    	mov    edx,DWORD PTR ds:0xc002058c
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 ac f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f1ac
c00093bf:	03 05 b4 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1b4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d ac f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ac
c00093d5:	a1 b0 f1 01 c0       	mov    eax,ds:0xc001f1b0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d b0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1b0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 8c 05 02 c0    	mov    esi,DWORD PTR ds:0xc002058c
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 e3 d5 01 c0       	push   0xc001d5e3
c0009419:	e8 1d 6d 00 00       	call   c001013b <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 08 2a 02 c0       	mov    eax,ds:0xc0022a08
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 fa d5 01 c0       	push   0xc001d5fa
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d b0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1b0,ebx
c00094b7:	c6 05 b8 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f1b8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 b4 f1 01 c0       	mov    ds:0xc001f1b4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 ac f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f1ac,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 8c 05 02 c0       	mov    ds:0xc002058c,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 b0 f1 01 c0       	mov    eax,ds:0xc001f1b0
c00094e9:	f7 35 ac f1 01 c0    	div    DWORD PTR ds:0xc001f1ac
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 90 05 02 c0       	mov    ds:0xc0020590,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 9c d4 01 c0       	push   0xc001d49c
c000955d:	e8 d9 6b 00 00       	call   c001013b <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 90 05 02 c0       	mov    eax,ds:0xc0020590
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 11 d6 01 c0       	push   0xc001d611
c0009624:	e8 12 6b 00 00       	call   c001013b <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d 90 05 02 c0    	mov    edi,DWORD PTR ds:0xc0020590
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 c0 d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d4c0
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 be 6a 00 00       	jmp    c001013b <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 2d d6 01 c0       	push   0xc001d62d
c000968b:	e8 ab 6a 00 00       	call   c001013b <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 49 d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d649
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 62 6a 00 00       	jmp    c001013b <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 e4 d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d4e4
c00096f9:	e9 da 0d 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009720:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009728:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000972c:	85 db                	test   ebx,ebx
c000972e:	7e 22                	jle    c0009752 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009730:	c1 e3 0c             	shl    ebx,0xc
c0009733:	01 f3                	add    ebx,esi
c0009735:	56                   	push   esi
c0009736:	81 c6 00 10 00 00    	add    esi,0x1000
c000973c:	55                   	push   ebp
c000973d:	e8 54 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009742:	5a                   	pop    edx
c0009743:	59                   	pop    ecx
c0009744:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009746:	21 f9                	and    ecx,edi
c0009748:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000974c:	39 f3                	cmp    ebx,esi
c000974e:	89 08                	mov    DWORD PTR [eax],ecx
c0009750:	75 e3                	jne    c0009735 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	5d                   	pop    ebp
c0009756:	c3                   	ret    
c0009757:	90                   	nop

c0009758 <VAS::setToWriteCombining(unsigned long, int)>:
c0009758:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000975d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009763:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000976a:	75 01                	jne    c000976d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000976c:	c3                   	ret    
c000976d:	68 80 00 00 00       	push   0x80
c0009772:	6a ff                	push   0xffffffff
c0009774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009778:	50                   	push   eax
c0009779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000977d:	52                   	push   edx
c000977e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009782:	51                   	push   ecx
c0009783:	e8 90 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c0009788:	83 c4 14             	add    esp,0x14
c000978b:	c3                   	ret    

c000978c <VAS::mapOtherVASIn(bool, VAS*)>:
c000978c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009795:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000979c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000979f:	19 c0                	sbb    eax,eax
c00097a1:	83 ca 03             	or     edx,0x3
c00097a4:	83 e0 fc             	and    eax,0xfffffffc
c00097a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ae:	0f 20 d8             	mov    eax,cr3
c00097b1:	0f 22 d8             	mov    cr3,eax
c00097b4:	c3                   	ret    
c00097b5:	90                   	nop

c00097b6 <VAS::~VAS()>:
c00097b6:	83 ec 2c             	sub    esp,0x2c
c00097b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c1:	fa                   	cli    
c00097c2:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00097c7:	40                   	inc    eax
c00097c8:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00097cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e1:	6a 01                	push   0x1
c00097e3:	50                   	push   eax
c00097e4:	e8 a3 ff ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c00097e9:	83 c4 0c             	add    esp,0xc
c00097ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097fc:	0f 8f d4 00 00 00    	jg     c00098d6 <VAS::~VAS()+0x120>
c0009802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009806:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	c1 e2 02             	shl    edx,0x2
c0009810:	01 d0                	add    eax,edx
c0009812:	8b 00                	mov    eax,DWORD PTR [eax]
c0009814:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981c:	83 e0 01             	and    eax,0x1
c000981f:	0f 84 a8 00 00 00    	je     c00098cd <VAS::~VAS()+0x117>
c0009825:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000982d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009835:	7f 72                	jg     c00098a9 <VAS::~VAS()+0xf3>
c0009837:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000983b:	c1 e0 0a             	shl    eax,0xa
c000983e:	89 c2                	mov    edx,eax
c0009840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009844:	01 d0                	add    eax,edx
c0009846:	c1 e0 0c             	shl    eax,0xc
c0009849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000984d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009857:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000985d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009861:	6a 01                	push   0x1
c0009863:	50                   	push   eax
c0009864:	e8 01 fd ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009869:	83 c4 0c             	add    esp,0xc
c000986c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009874:	8b 00                	mov    eax,DWORD PTR [eax]
c0009876:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987e:	25 01 04 00 00       	and    eax,0x401
c0009883:	3d 01 04 00 00       	cmp    eax,0x401
c0009888:	75 19                	jne    c00098a3 <VAS::~VAS()+0xed>
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009893:	83 ec 0c             	sub    esp,0xc
c0009896:	50                   	push   eax
c0009897:	e8 97 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098a3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098a7:	eb 84                	jmp    c000982d <VAS::~VAS()+0x77>
c00098a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ad:	25 00 04 00 00       	and    eax,0x400
c00098b2:	74 19                	je     c00098cd <VAS::~VAS()+0x117>
c00098b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	50                   	push   eax
c00098c1:	e8 6d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098cd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d1:	e9 1e ff ff ff       	jmp    c00097f4 <VAS::~VAS()+0x3e>
c00098d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	50                   	push   eax
c00098e1:	e8 cf fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 3a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009900:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009905:	48                   	dec    eax
c0009906:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000990b:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009910:	85 c0                	test   eax,eax
c0009912:	75 01                	jne    c0009915 <VAS::~VAS()+0x15f>
c0009914:	fb                   	sti    
c0009915:	90                   	nop
c0009916:	83 c4 2c             	add    esp,0x2c
c0009919:	c3                   	ret    

c000991a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000991a:	55                   	push   ebp
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	83 ec 1c             	sub    esp,0x1c
c0009921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009929:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000992f:	77 0b                	ja     c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009931:	0f 20 d8             	mov    eax,cr3
c0009934:	0f 20 d8             	mov    eax,cr3
c0009937:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000993a:	75 47                	jne    c0009983 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000993c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009940:	09 d8                	or     eax,ebx
c0009942:	a9 ff 0f 00 00       	test   eax,0xfff
c0009947:	75 57                	jne    c00099a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009949:	89 de                	mov    esi,ebx
c000994b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000994e:	c1 ee 16             	shr    esi,0x16
c0009951:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009958:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000995c:	74 54                	je     c00099b2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000995e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009962:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009968:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000996c:	c1 e6 0c             	shl    esi,0xc
c000996f:	c1 eb 0a             	shr    ebx,0xa
c0009972:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009978:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000997b:	83 c4 1c             	add    esp,0x1c
c000997e:	5b                   	pop    ebx
c000997f:	5e                   	pop    esi
c0009980:	5f                   	pop    edi
c0009981:	5d                   	pop    ebp
c0009982:	c3                   	ret    
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	68 08 d5 01 c0       	push   0xc001d508
c000998b:	e8 48 0b 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0009990:	83 c4 10             	add    esp,0x10
c0009993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009997:	09 d8                	or     eax,ebx
c0009999:	a9 ff 0f 00 00       	test   eax,0xfff
c000999e:	74 a9                	je     c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a0:	83 ec 0c             	sub    esp,0xc
c00099a3:	68 70 d5 01 c0       	push   0xc001d570
c00099a8:	e8 8e 67 00 00       	call   c001013b <KePanic(char const*)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	eb 97                	jmp    c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099b6:	e8 da e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	89 c5                	mov    ebp,eax
c00099c0:	8b 0d 90 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020590
c00099c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099ca:	6a 01                	push   0x1
c00099cc:	e8 b4 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099d8:	6a 01                	push   0x1
c00099da:	50                   	push   eax
c00099db:	55                   	push   ebp
c00099dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00099e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099e6:	51                   	push   ecx
c00099e7:	e8 28 02 00 00       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ec:	83 c4 1c             	add    esp,0x1c
c00099ef:	68 00 10 00 00       	push   0x1000
c00099f4:	6a 00                	push   0x0
c00099f6:	50                   	push   eax
c00099f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099fb:	e8 d0 6a ff ff       	call   c00004d0 <memset>
c0009a00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a07:	e8 a9 fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a10:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a13:	83 c4 10             	add    esp,0x10
c0009a16:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a19:	e9 40 ff ff ff       	jmp    c000995e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a1e <VAS::allocatePages(int, int)>:
c0009a1e:	55                   	push   ebp
c0009a1f:	57                   	push   edi
c0009a20:	56                   	push   esi
c0009a21:	53                   	push   ebx
c0009a22:	83 ec 1c             	sub    esp,0x1c
c0009a25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a29:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009a2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a34:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a3a:	83 e0 01             	and    eax,0x1
c0009a3d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a45:	0f 85 cc 00 00 00    	jne    c0009b17 <VAS::allocatePages(int, int)+0xf9>
c0009a4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a52:	85 c0                	test   eax,eax
c0009a54:	0f 84 a1 00 00 00    	je     c0009afb <VAS::allocatePages(int, int)+0xdd>
c0009a5a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a69:	85 c0                	test   eax,eax
c0009a6b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a6e:	7e 33                	jle    c0009aa3 <VAS::allocatePages(int, int)+0x85>
c0009a70:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a78:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a7e:	e8 12 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a83:	55                   	push   ebp
c0009a84:	53                   	push   ebx
c0009a85:	50                   	push   eax
c0009a86:	57                   	push   edi
c0009a87:	e8 8e fe ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a94:	74 03                	je     c0009a99 <VAS::allocatePages(int, int)+0x7b>
c0009a96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a9f:	39 de                	cmp    esi,ebx
c0009aa1:	75 db                	jne    c0009a7e <VAS::allocatePages(int, int)+0x60>
c0009aa3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa8:	75 12                	jne    c0009abc <VAS::allocatePages(int, int)+0x9e>
c0009aaa:	0f 20 d8             	mov    eax,cr3
c0009aad:	0f 22 d8             	mov    cr3,eax
c0009ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab4:	83 c4 1c             	add    esp,0x1c
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	5f                   	pop    edi
c0009aba:	5d                   	pop    ebp
c0009abb:	c3                   	ret    
c0009abc:	c1 ee 0a             	shr    esi,0xa
c0009abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ac9:	c1 eb 0a             	shr    ebx,0xa
c0009acc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ad2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ad8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ade:	39 c3                	cmp    ebx,eax
c0009ae0:	77 ce                	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009ae2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ae5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aeb:	39 d8                	cmp    eax,ebx
c0009aed:	73 f3                	jae    c0009ae2 <VAS::allocatePages(int, int)+0xc4>
c0009aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af3:	83 c4 1c             	add    esp,0x1c
c0009af6:	5b                   	pop    ebx
c0009af7:	5e                   	pop    esi
c0009af8:	5f                   	pop    edi
c0009af9:	5d                   	pop    ebp
c0009afa:	c3                   	ret    
c0009afb:	83 ec 0c             	sub    esp,0xc
c0009afe:	68 94 d5 01 c0       	push   0xc001d594
c0009b03:	e8 33 66 00 00       	call   c001013b <KePanic(char const*)>
c0009b08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0f:	83 c4 10             	add    esp,0x10
c0009b12:	e9 43 ff ff ff       	jmp    c0009a5a <VAS::allocatePages(int, int)+0x3c>
c0009b17:	83 ec 0c             	sub    esp,0xc
c0009b1a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b1e:	51                   	push   ecx
c0009b1f:	e8 61 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b28:	83 c4 10             	add    esp,0x10
c0009b2b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b30:	0f 87 9b 00 00 00    	ja     c0009bd1 <VAS::allocatePages(int, int)+0x1b3>
c0009b36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b3a:	85 d2                	test   edx,edx
c0009b3c:	7e 3c                	jle    c0009b7a <VAS::allocatePages(int, int)+0x15c>
c0009b3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b42:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b4a:	c1 e5 0c             	shl    ebp,0xc
c0009b4d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b53:	01 dd                	add    ebp,ebx
c0009b55:	e8 3b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b5a:	56                   	push   esi
c0009b5b:	53                   	push   ebx
c0009b5c:	50                   	push   eax
c0009b5d:	57                   	push   edi
c0009b5e:	e8 b7 fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b63:	83 c4 10             	add    esp,0x10
c0009b66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b6b:	74 03                	je     c0009b70 <VAS::allocatePages(int, int)+0x152>
c0009b6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b70:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b76:	39 dd                	cmp    ebp,ebx
c0009b78:	75 db                	jne    c0009b55 <VAS::allocatePages(int, int)+0x137>
c0009b7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7f:	0f 84 25 ff ff ff    	je     c0009aaa <VAS::allocatePages(int, int)+0x8c>
c0009b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b8d:	89 d3                	mov    ebx,edx
c0009b8f:	c1 e0 0c             	shl    eax,0xc
c0009b92:	c1 eb 0a             	shr    ebx,0xa
c0009b95:	01 d0                	add    eax,edx
c0009b97:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b9d:	c1 e8 0a             	shr    eax,0xa
c0009ba0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bab:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb0:	39 c3                	cmp    ebx,eax
c0009bb2:	0f 87 f8 fe ff ff    	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009bb8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc1:	39 d8                	cmp    eax,ebx
c0009bc3:	73 f3                	jae    c0009bb8 <VAS::allocatePages(int, int)+0x19a>
c0009bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bc9:	83 c4 1c             	add    esp,0x1c
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	5d                   	pop    ebp
c0009bd0:	c3                   	ret    
c0009bd1:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009bd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bdc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009be3:	0f 84 4d ff ff ff    	je     c0009b36 <VAS::allocatePages(int, int)+0x118>
c0009be9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf1:	e9 40 ff ff ff       	jmp    c0009b36 <VAS::allocatePages(int, int)+0x118>

c0009bf6 <VAS::setCPUSpecific(unsigned long)>:
c0009bf6:	83 ec 0c             	sub    esp,0xc
c0009bf9:	6a 05                	push   0x5
c0009bfb:	68 00 00 40 c2       	push   0xc2400000
c0009c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c04:	50                   	push   eax
c0009c05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c09:	52                   	push   edx
c0009c0a:	e8 0b fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c0f:	83 c4 1c             	add    esp,0x1c
c0009c12:	c3                   	ret    
c0009c13:	90                   	nop

c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c14:	55                   	push   ebp
c0009c15:	57                   	push   edi
c0009c16:	56                   	push   esi
c0009c17:	53                   	push   ebx
c0009c18:	83 ec 1c             	sub    esp,0x1c
c0009c1b:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009c20:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c34:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c38:	83 e0 01             	and    eax,0x1
c0009c3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c43:	85 c0                	test   eax,eax
c0009c45:	7e 39                	jle    c0009c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	89 f3                	mov    ebx,esi
c0009c4d:	c1 e0 0c             	shl    eax,0xc
c0009c50:	01 f0                	add    eax,esi
c0009c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c56:	55                   	push   ebp
c0009c57:	53                   	push   ebx
c0009c58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5c:	29 f0                	sub    eax,esi
c0009c5e:	01 d8                	add    eax,ebx
c0009c60:	50                   	push   eax
c0009c61:	57                   	push   edi
c0009c62:	e8 b3 fc ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c6f:	74 03                	je     c0009c74 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c71:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c74:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c7a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c7e:	75 d6                	jne    c0009c56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c85:	75 10                	jne    c0009c97 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c87:	0f 20 d8             	mov    eax,cr3
c0009c8a:	0f 22 d8             	mov    cr3,eax
c0009c8d:	83 c4 1c             	add    esp,0x1c
c0009c90:	89 f0                	mov    eax,esi
c0009c92:	5b                   	pop    ebx
c0009c93:	5e                   	pop    esi
c0009c94:	5f                   	pop    edi
c0009c95:	5d                   	pop    ebp
c0009c96:	c3                   	ret    
c0009c97:	89 f3                	mov    ebx,esi
c0009c99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9d:	c1 eb 0a             	shr    ebx,0xa
c0009ca0:	c1 e0 0c             	shl    eax,0xc
c0009ca3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ca9:	01 f0                	add    eax,esi
c0009cab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb1:	c1 e8 0a             	shr    eax,0xa
c0009cb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cbe:	39 c3                	cmp    ebx,eax
c0009cc0:	77 cb                	ja     c0009c8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ccb:	39 d8                	cmp    eax,ebx
c0009ccd:	73 f3                	jae    c0009cc2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ccf:	83 c4 1c             	add    esp,0x1c
c0009cd2:	89 f0                	mov    eax,esi
c0009cd4:	5b                   	pop    ebx
c0009cd5:	5e                   	pop    esi
c0009cd6:	5f                   	pop    edi
c0009cd7:	5d                   	pop    ebp
c0009cd8:	c3                   	ret    
c0009cd9:	90                   	nop

c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cda:	55                   	push   ebp
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 1c             	sub    esp,0x1c
c0009ce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ce5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ce9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ced:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf1:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cf6:	75 4a                	jne    c0009d42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cf8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cff:	c1 eb 16             	shr    ebx,0x16
c0009d02:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d09:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d0d:	74 4d                	je     c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d13:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d17:	c1 e8 0a             	shr    eax,0xa
c0009d1a:	80 fa 01             	cmp    dl,0x1
c0009d1d:	19 d2                	sbb    edx,edx
c0009d1f:	c1 e3 0c             	shl    ebx,0xc
c0009d22:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d26:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d2c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d31:	01 d8                	add    eax,ebx
c0009d33:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d3a:	83 c4 1c             	add    esp,0x1c
c0009d3d:	5b                   	pop    ebx
c0009d3e:	5e                   	pop    esi
c0009d3f:	5f                   	pop    edi
c0009d40:	5d                   	pop    ebp
c0009d41:	c3                   	ret    
c0009d42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d46:	83 ec 0c             	sub    esp,0xc
c0009d49:	68 c0 d5 01 c0       	push   0xc001d5c0
c0009d4e:	e8 e8 63 00 00       	call   c001013b <KePanic(char const*)>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d5a:	eb 9c                	jmp    c0009cf8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d60:	e8 30 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d65:	83 ec 0c             	sub    esp,0xc
c0009d68:	89 c5                	mov    ebp,eax
c0009d6a:	8b 0d 90 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020590
c0009d70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d74:	6a 01                	push   0x1
c0009d76:	e8 0a f5 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d82:	6a 01                	push   0x1
c0009d84:	50                   	push   eax
c0009d85:	55                   	push   ebp
c0009d86:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d90:	51                   	push   ecx
c0009d91:	e8 7e fe ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d96:	83 c4 1c             	add    esp,0x1c
c0009d99:	68 00 10 00 00       	push   0x1000
c0009d9e:	6a 00                	push   0x0
c0009da0:	50                   	push   eax
c0009da1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da5:	e8 26 67 ff ff       	call   c00004d0 <memset>
c0009daa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db1:	e8 ff f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009db6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dc3:	e9 47 ff ff ff       	jmp    c0009d0f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dc8 <VAS::VAS(bool)>:
c0009dc8:	53                   	push   ebx
c0009dc9:	83 ec 28             	sub    esp,0x28
c0009dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dee:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009df2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009df5:	e8 9b dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dfa:	89 c2                	mov    edx,eax
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e03:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c0009e09:	83 ec 0c             	sub    esp,0xc
c0009e0c:	6a 01                	push   0x1
c0009e0e:	e8 72 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	89 c2                	mov    edx,eax
c0009e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e1f:	83 ec 0c             	sub    esp,0xc
c0009e22:	6a 03                	push   0x3
c0009e24:	6a 01                	push   0x1
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	53                   	push   ebx
c0009e29:	e8 e6 fd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e2e:	83 c4 20             	add    esp,0x20
c0009e31:	89 c2                	mov    edx,eax
c0009e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e42:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e4a:	7f 1c                	jg     c0009e68 <VAS::VAS(bool)+0xa0>
c0009e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e57:	c1 e2 02             	shl    edx,0x2
c0009e5a:	01 d0                	add    eax,edx
c0009e5c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e62:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e66:	eb da                	jmp    c0009e42 <VAS::VAS(bool)+0x7a>
c0009e68:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e70:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e78:	7f 7a                	jg     c0009ef4 <VAS::VAS(bool)+0x12c>
c0009e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7e:	2d 00 02 00 00       	sub    eax,0x200
c0009e83:	c1 e0 0c             	shl    eax,0xc
c0009e86:	83 c8 03             	or     eax,0x3
c0009e89:	89 c2                	mov    edx,eax
c0009e8b:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009e90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e96:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e9c:	83 e0 10             	and    eax,0x10
c0009e9f:	84 c0                	test   al,al
c0009ea1:	74 07                	je     c0009eaa <VAS::VAS(bool)+0xe2>
c0009ea3:	b8 00 01 00 00       	mov    eax,0x100
c0009ea8:	eb 05                	jmp    c0009eaf <VAS::VAS(bool)+0xe7>
c0009eaa:	b8 00 00 00 00       	mov    eax,0x0
c0009eaf:	09 d0                	or     eax,edx
c0009eb1:	89 c1                	mov    ecx,eax
c0009eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ebe:	c1 e2 02             	shl    edx,0x2
c0009ec1:	01 d0                	add    eax,edx
c0009ec3:	89 ca                	mov    edx,ecx
c0009ec5:	89 10                	mov    DWORD PTR [eax],edx
c0009ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ecb:	2d 40 03 00 00       	sub    eax,0x340
c0009ed0:	83 f8 7f             	cmp    eax,0x7f
c0009ed3:	77 16                	ja     c0009eeb <VAS::VAS(bool)+0x123>
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009edc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee0:	c1 e2 02             	shl    edx,0x2
c0009ee3:	01 d0                	add    eax,edx
c0009ee5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eeb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eef:	e9 7c ff ff ff       	jmp    c0009e70 <VAS::VAS(bool)+0xa8>
c0009ef4:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009ef9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eff:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f05:	83 e0 10             	and    eax,0x10
c0009f08:	84 c0                	test   al,al
c0009f0a:	74 07                	je     c0009f13 <VAS::VAS(bool)+0x14b>
c0009f0c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f11:	eb 05                	jmp    c0009f18 <VAS::VAS(bool)+0x150>
c0009f13:	b8 03 40 00 00       	mov    eax,0x4003
c0009f18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f1c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f1f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f25:	89 02                	mov    DWORD PTR [edx],eax
c0009f27:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009f2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f38:	83 ec 08             	sub    esp,0x8
c0009f3b:	50                   	push   eax
c0009f3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f40:	e8 b1 fc ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f4f:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f5a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f60:	83 e0 10             	and    eax,0x10
c0009f63:	84 c0                	test   al,al
c0009f65:	74 07                	je     c0009f6e <VAS::VAS(bool)+0x1a6>
c0009f67:	b8 00 01 00 00       	mov    eax,0x100
c0009f6c:	eb 05                	jmp    c0009f73 <VAS::VAS(bool)+0x1ab>
c0009f6e:	b8 00 00 00 00       	mov    eax,0x0
c0009f73:	09 c2                	or     edx,eax
c0009f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f7c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f81:	83 ca 03             	or     edx,0x3
c0009f84:	89 10                	mov    DWORD PTR [eax],edx
c0009f86:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009f8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f91:	83 ec 0c             	sub    esp,0xc
c0009f94:	50                   	push   eax
c0009f95:	e8 12 1c 00 00       	call   c000bbac <Device::getName()>
c0009f9a:	83 c4 10             	add    esp,0x10
c0009f9d:	83 ec 08             	sub    esp,0x8
c0009fa0:	68 63 d6 01 c0       	push   0xc001d663
c0009fa5:	50                   	push   eax
c0009fa6:	e8 35 67 ff ff       	call   c00006e0 <strcmp>
c0009fab:	83 c4 10             	add    esp,0x10
c0009fae:	85 c0                	test   eax,eax
c0009fb0:	0f 94 c0             	sete   al
c0009fb3:	84 c0                	test   al,al
c0009fb5:	0f 84 87 00 00 00    	je     c000a042 <VAS::VAS(bool)+0x27a>
c0009fbb:	fa                   	cli    
c0009fbc:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009fc1:	40                   	inc    eax
c0009fc2:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0009fc7:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009fcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fd2:	05 7c 09 00 00       	add    eax,0x97c
c0009fd7:	83 ec 0c             	sub    esp,0xc
c0009fda:	50                   	push   eax
c0009fdb:	e8 d6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe0:	83 c4 10             	add    esp,0x10
c0009fe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe8:	89 c3                	mov    ebx,eax
c0009fea:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	05 7c 09 00 00       	add    eax,0x97c
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 b3 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	83 ec 08             	sub    esp,0x8
c000a009:	50                   	push   eax
c000a00a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a00e:	e8 83 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	8b 00                	mov    eax,DWORD PTR [eax]
c000a018:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a01d:	6a 11                	push   0x11
c000a01f:	53                   	push   ebx
c000a020:	50                   	push   eax
c000a021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a025:	e8 f0 f8 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000a032:	48                   	dec    eax
c000a033:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000a038:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000a03d:	85 c0                	test   eax,eax
c000a03f:	75 01                	jne    c000a042 <VAS::VAS(bool)+0x27a>
c000a041:	fb                   	sti    
c000a042:	90                   	nop
c000a043:	83 c4 28             	add    esp,0x28
c000a046:	5b                   	pop    ebx
c000a047:	c3                   	ret    

c000a048 <VAS::evict(unsigned long)>:
c000a048:	55                   	push   ebp
c000a049:	57                   	push   edi
c000a04a:	56                   	push   esi
c000a04b:	53                   	push   ebx
c000a04c:	83 ec 1c             	sub    esp,0x1c
c000a04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a053:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a05b:	e8 66 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a060:	8b 0d ac f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ac
c000a066:	89 c7                	mov    edi,eax
c000a068:	85 c9                	test   ecx,ecx
c000a06a:	7e 3e                	jle    c000a0aa <VAS::evict(unsigned long)+0x62>
c000a06c:	89 ee                	mov    esi,ebp
c000a06e:	31 db                	xor    ebx,ebx
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	57                   	push   edi
c000a074:	e8 3b f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a079:	89 34 24             	mov    DWORD PTR [esp],esi
c000a07c:	01 d8                	add    eax,ebx
c000a07e:	6a 01                	push   0x1
c000a080:	31 d2                	xor    edx,edx
c000a082:	43                   	inc    ebx
c000a083:	52                   	push   edx
c000a084:	81 c6 00 02 00 00    	add    esi,0x200
c000a08a:	50                   	push   eax
c000a08b:	0f be 05 b8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1b8
c000a092:	8b 14 85 fc 28 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd704]
c000a099:	52                   	push   edx
c000a09a:	e8 8d 2b 00 00       	call   c000cc2c <LogicalDisk::write(unsigned long long, int, void*)>
c000a09f:	83 c4 20             	add    esp,0x20
c000a0a2:	39 1d ac f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ac,ebx
c000a0a8:	7f c6                	jg     c000a070 <VAS::evict(unsigned long)+0x28>
c000a0aa:	83 ec 08             	sub    esp,0x8
c000a0ad:	c1 e7 0b             	shl    edi,0xb
c000a0b0:	55                   	push   ebp
c000a0b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b5:	50                   	push   eax
c000a0b6:	e8 db f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0bd:	89 d1                	mov    ecx,edx
c000a0bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0c5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0cb:	09 cf                	or     edi,ecx
c000a0cd:	89 38                	mov    DWORD PTR [eax],edi
c000a0cf:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0d2:	ff 05 88 05 02 c0    	inc    DWORD PTR ds:0xc0020588
c000a0d8:	e8 56 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0dd:	0f 20 d8             	mov    eax,cr3
c000a0e0:	0f 22 d8             	mov    cr3,eax
c000a0e3:	a1 84 05 02 c0       	mov    eax,ds:0xc0020584
c000a0e8:	c7 44 24 40 71 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d671
c000a0f0:	8d 50 01             	lea    edx,[eax+0x1]
c000a0f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f7:	89 15 84 05 02 c0    	mov    DWORD PTR ds:0xc0020584,edx
c000a0fd:	83 c4 2c             	add    esp,0x2c
c000a100:	5b                   	pop    ebx
c000a101:	5e                   	pop    esi
c000a102:	5f                   	pop    edi
c000a103:	5d                   	pop    ebp
c000a104:	e9 cf 03 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a109:	90                   	nop

c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a10a:	55                   	push   ebp
c000a10b:	57                   	push   edi
c000a10c:	56                   	push   esi
c000a10d:	53                   	push   ebx
c000a10e:	83 ec 14             	sub    esp,0x14
c000a111:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a115:	53                   	push   ebx
c000a116:	68 82 d6 01 c0       	push   0xc001d682
c000a11b:	e8 b8 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a129:	74 21                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a12b:	83 ec 08             	sub    esp,0x8
c000a12e:	53                   	push   ebx
c000a12f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a133:	57                   	push   edi
c000a134:	e8 5d f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 c6                	mov    esi,eax
c000a13e:	85 c0                	test   eax,eax
c000a140:	74 0a                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a142:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a144:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a14a:	74 0a                	je     c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a14c:	31 c0                	xor    eax,eax
c000a14e:	83 c4 0c             	add    esp,0xc
c000a151:	5b                   	pop    ebx
c000a152:	5e                   	pop    esi
c000a153:	5f                   	pop    edi
c000a154:	5d                   	pop    ebp
c000a155:	c3                   	ret    
c000a156:	e8 3a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a15b:	c1 ed 0b             	shr    ebp,0xb
c000a15e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a160:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a166:	09 c2                	or     edx,eax
c000a168:	81 ca 01 08 00 00    	or     edx,0x801
c000a16e:	89 16                	mov    DWORD PTR [esi],edx
c000a170:	8b 35 ac f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f1ac
c000a176:	85 f6                	test   esi,esi
c000a178:	7e 3e                	jle    c000a1b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a17a:	89 df                	mov    edi,ebx
c000a17c:	31 f6                	xor    esi,esi
c000a17e:	83 ec 0c             	sub    esp,0xc
c000a181:	55                   	push   ebp
c000a182:	e8 2d f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a187:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a18a:	01 f0                	add    eax,esi
c000a18c:	6a 01                	push   0x1
c000a18e:	31 d2                	xor    edx,edx
c000a190:	46                   	inc    esi
c000a191:	52                   	push   edx
c000a192:	81 c7 00 02 00 00    	add    edi,0x200
c000a198:	50                   	push   eax
c000a199:	0f be 05 b8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1b8
c000a1a0:	8b 0c 85 fc 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd704]
c000a1a7:	51                   	push   ecx
c000a1a8:	e8 13 2a 00 00       	call   c000cbc0 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1ad:	83 c4 20             	add    esp,0x20
c000a1b0:	39 35 ac f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ac,esi
c000a1b6:	7f c6                	jg     c000a17e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1b8:	a1 88 05 02 c0       	mov    eax,ds:0xc0020588
c000a1bd:	48                   	dec    eax
c000a1be:	52                   	push   edx
c000a1bf:	a3 88 05 02 c0       	mov    ds:0xc0020588,eax
c000a1c4:	50                   	push   eax
c000a1c5:	53                   	push   ebx
c000a1c6:	68 95 d6 01 c0       	push   0xc001d695
c000a1cb:	e8 08 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a1d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1d3:	e8 be f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1d8:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000a1dd:	83 c4 10             	add    esp,0x10
c000a1e0:	48                   	dec    eax
c000a1e1:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000a1e6:	85 c0                	test   eax,eax
c000a1e8:	75 01                	jne    c000a1eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1ea:	fb                   	sti    
c000a1eb:	0f 20 d8             	mov    eax,cr3
c000a1ee:	0f 22 d8             	mov    cr3,eax
c000a1f1:	b0 01                	mov    al,0x1
c000a1f3:	e9 56 ff ff ff       	jmp    c000a14e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1f8 <VAS::scanForEviction()>:
c000a1f8:	57                   	push   edi
c000a1f9:	31 ff                	xor    edi,edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	83 ec 10             	sub    esp,0x10
c000a200:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a204:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a207:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a20d:	75 0e                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a20f:	89 da                	mov    edx,ebx
c000a211:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a214:	c1 ea 16             	shr    edx,0x16
c000a217:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a21b:	74 4e                	je     c000a26b <VAS::scanForEviction()+0x73>
c000a21d:	53                   	push   ebx
c000a21e:	56                   	push   esi
c000a21f:	e8 72 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a224:	5a                   	pop    edx
c000a225:	8b 10                	mov    edx,DWORD PTR [eax]
c000a227:	59                   	pop    ecx
c000a228:	89 d1                	mov    ecx,edx
c000a22a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a230:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a236:	74 3e                	je     c000a276 <VAS::scanForEviction()+0x7e>
c000a238:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a23e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a244:	76 2b                	jbe    c000a271 <VAS::scanForEviction()+0x79>
c000a246:	47                   	inc    edi
c000a247:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a24e:	83 ff 03             	cmp    edi,0x3
c000a251:	74 32                	je     c000a285 <VAS::scanForEviction()+0x8d>
c000a253:	31 db                	xor    ebx,ebx
c000a255:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a25b:	75 c0                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a25d:	89 da                	mov    edx,ebx
c000a25f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a262:	c1 ea 16             	shr    edx,0x16
c000a265:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a269:	75 b2                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a26b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a271:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a274:	eb 91                	jmp    c000a207 <VAS::scanForEviction()+0xf>
c000a276:	f6 c2 20             	test   dl,0x20
c000a279:	74 13                	je     c000a28e <VAS::scanForEviction()+0x96>
c000a27b:	83 e2 df             	and    edx,0xffffffdf
c000a27e:	89 10                	mov    DWORD PTR [eax],edx
c000a280:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a283:	eb b3                	jmp    c000a238 <VAS::scanForEviction()+0x40>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	31 c0                	xor    eax,eax
c000a28a:	5b                   	pop    ebx
c000a28b:	5e                   	pop    esi
c000a28c:	5f                   	pop    edi
c000a28d:	c3                   	ret    
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	89 d0                	mov    eax,edx
c000a293:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a29c:	53                   	push   ebx
c000a29d:	68 aa d6 01 c0       	push   0xc001d6aa
c000a2a2:	e8 31 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2a7:	58                   	pop    eax
c000a2a8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2ab:	5a                   	pop    edx
c000a2ac:	51                   	push   ecx
c000a2ad:	56                   	push   esi
c000a2ae:	e8 95 fd ff ff       	call   c000a048 <VAS::evict(unsigned long)>
c000a2b3:	5b                   	pop    ebx
c000a2b4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2b7:	5f                   	pop    edi
c000a2b8:	50                   	push   eax
c000a2b9:	68 be d6 01 c0       	push   0xc001d6be
c000a2be:	e8 15 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d1:	83 c4 10             	add    esp,0x10
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	5f                   	pop    edi
c000a2d7:	c3                   	ret    

c000a2d8 <mapVASFirstTime>:
c000a2d8:	55                   	push   ebp
c000a2d9:	57                   	push   edi
c000a2da:	56                   	push   esi
c000a2db:	53                   	push   ebx
c000a2dc:	83 ec 0c             	sub    esp,0xc
c000a2df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2e7:	4a                   	dec    edx
c000a2e8:	0f 84 8c 00 00 00    	je     c000a37a <mapVASFirstTime+0xa2>
c000a2ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2f9:	c1 e5 15             	shl    ebp,0x15
c000a2fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a301:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a307:	29 eb                	sub    ebx,ebp
c000a309:	29 ef                	sub    edi,ebp
c000a30b:	e8 85 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a310:	83 ec 0c             	sub    esp,0xc
c000a313:	68 03 04 00 00       	push   0x403
c000a318:	6a 01                	push   0x1
c000a31a:	53                   	push   ebx
c000a31b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a321:	50                   	push   eax
c000a322:	56                   	push   esi
c000a323:	e8 ec f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a328:	83 c4 20             	add    esp,0x20
c000a32b:	39 fb                	cmp    ebx,edi
c000a32d:	75 dc                	jne    c000a30b <mapVASFirstTime+0x33>
c000a32f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a334:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a339:	29 eb                	sub    ebx,ebp
c000a33b:	29 ef                	sub    edi,ebp
c000a33d:	e8 53 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a342:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a346:	19 d2                	sbb    edx,edx
c000a348:	83 ec 0c             	sub    esp,0xc
c000a34b:	83 e2 04             	and    edx,0x4
c000a34e:	81 c2 03 04 00 00    	add    edx,0x403
c000a354:	52                   	push   edx
c000a355:	6a 01                	push   0x1
c000a357:	53                   	push   ebx
c000a358:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35e:	50                   	push   eax
c000a35f:	56                   	push   esi
c000a360:	e8 af f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a365:	83 c4 20             	add    esp,0x20
c000a368:	39 df                	cmp    edi,ebx
c000a36a:	75 d1                	jne    c000a33d <mapVASFirstTime+0x65>
c000a36c:	0f 20 d8             	mov    eax,cr3
c000a36f:	0f 22 d8             	mov    cr3,eax
c000a372:	83 c4 0c             	add    esp,0xc
c000a375:	5b                   	pop    ebx
c000a376:	5e                   	pop    esi
c000a377:	5f                   	pop    edi
c000a378:	5d                   	pop    ebp
c000a379:	c3                   	ret    
c000a37a:	83 ec 0c             	sub    esp,0xc
c000a37d:	68 d1 d6 01 c0       	push   0xc001d6d1
c000a382:	e8 51 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a387:	83 c4 10             	add    esp,0x10
c000a38a:	83 c4 0c             	add    esp,0xc
c000a38d:	5b                   	pop    ebx
c000a38e:	5e                   	pop    esi
c000a38f:	5f                   	pop    edi
c000a390:	5d                   	pop    ebp
c000a391:	c3                   	ret    

c000a392 <__cxa_atexit>:
c000a392:	31 c0                	xor    eax,eax
c000a394:	c3                   	ret    

c000a395 <__cxa_finalize>:
c000a395:	c3                   	ret    

c000a396 <__stack_chk_fail>:
c000a396:	55                   	push   ebp
c000a397:	89 e5                	mov    ebp,esp
c000a399:	83 ec 10             	sub    esp,0x10
c000a39c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a39f:	68 ea d6 01 c0       	push   0xc001d6ea
c000a3a4:	e8 2f 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3a9:	58                   	pop    eax
c000a3aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3ad:	5a                   	pop    edx
c000a3ae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3b1:	68 ea d6 01 c0       	push   0xc001d6ea
c000a3b6:	e8 1d 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3bb:	c7 04 24 f2 d6 01 c0 	mov    DWORD PTR [esp],0xc001d6f2
c000a3c2:	e8 74 5d 00 00       	call   c001013b <KePanic(char const*)>
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	c9                   	leave  
c000a3cb:	c3                   	ret    

c000a3cc <__cxa_pure_virtual>:
c000a3cc:	83 ec 18             	sub    esp,0x18
c000a3cf:	68 0a d7 01 c0       	push   0xc001d70a
c000a3d4:	e8 62 5d 00 00       	call   c001013b <KePanic(char const*)>
c000a3d9:	83 c4 1c             	add    esp,0x1c
c000a3dc:	c3                   	ret    

c000a3dd <operator new[](unsigned long)>:
c000a3dd:	e9 d7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a3e2 <operator delete(void*, unsigned long)>:
c000a3e2:	e9 f2 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3e7 <operator delete[](void*)>:
c000a3e7:	e9 ed d3 ff ff       	jmp    c00077d9 <rfree>

c000a3ec <operator delete[](void*, unsigned long)>:
c000a3ec:	e9 e8 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3f1:	55                   	push   ebp
c000a3f2:	b9 04 00 00 00       	mov    ecx,0x4
c000a3f7:	57                   	push   edi
c000a3f8:	56                   	push   esi
c000a3f9:	be 13 d3 01 c0       	mov    esi,0xc001d313
c000a3fe:	53                   	push   ebx
c000a3ff:	83 ec 20             	sub    esp,0x20
c000a402:	a1 12 d3 01 c0       	mov    eax,ds:0xc001d312
c000a407:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a40b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a40f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a413:	a1 1f d3 01 c0       	mov    eax,ds:0xc001d31f
c000a418:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a41c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a420:	fc                   	cld    
c000a421:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a423:	89 ee                	mov    esi,ebp
c000a425:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a429:	eb 02                	jmp    c000a42d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a42b:	89 c6                	mov    esi,eax
c000a42d:	31 d2                	xor    edx,edx
c000a42f:	41                   	inc    ecx
c000a430:	89 f0                	mov    eax,esi
c000a432:	f7 f3                	div    ebx
c000a434:	39 de                	cmp    esi,ebx
c000a436:	73 f3                	jae    c000a42b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a438:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a43b:	eb 02                	jmp    c000a43f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a43d:	89 c5                	mov    ebp,eax
c000a43f:	31 d2                	xor    edx,edx
c000a441:	49                   	dec    ecx
c000a442:	89 e8                	mov    eax,ebp
c000a444:	f7 f3                	div    ebx
c000a446:	39 dd                	cmp    ebp,ebx
c000a448:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a44c:	88 11                	mov    BYTE PTR [ecx],dl
c000a44e:	73 ed                	jae    c000a43d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a454:	83 c4 20             	add    esp,0x20
c000a457:	5b                   	pop    ebx
c000a458:	5e                   	pop    esi
c000a459:	5f                   	pop    edi
c000a45a:	5d                   	pop    ebp
c000a45b:	c3                   	ret    

c000a45c <Dbg::logc(char)>:
c000a45c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a460:	f6 05 b0 04 02 c0 10 	test   BYTE PTR ds:0xc00204b0,0x10
c000a467:	75 12                	jne    c000a47b <Dbg::logc(char)+0x1f>
c000a469:	ba fd 03 00 00       	mov    edx,0x3fd
c000a46e:	ec                   	in     al,dx
c000a46f:	a8 20                	test   al,0x20
c000a471:	74 fb                	je     c000a46e <Dbg::logc(char)+0x12>
c000a473:	ba f8 03 00 00       	mov    edx,0x3f8
c000a478:	88 c8                	mov    al,cl
c000a47a:	ee                   	out    dx,al
c000a47b:	c3                   	ret    

c000a47c <Dbg::logs(char*)>:
c000a47c:	53                   	push   ebx
c000a47d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a481:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a484:	84 c0                	test   al,al
c000a486:	74 0f                	je     c000a497 <Dbg::logs(char*)+0x1b>
c000a488:	50                   	push   eax
c000a489:	43                   	inc    ebx
c000a48a:	e8 cd ff ff ff       	call   c000a45c <Dbg::logc(char)>
c000a48f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a492:	5a                   	pop    edx
c000a493:	84 c0                	test   al,al
c000a495:	75 f1                	jne    c000a488 <Dbg::logs(char*)+0xc>
c000a497:	5b                   	pop    ebx
c000a498:	c3                   	ret    

c000a499 <Dbg::logWriteInt(unsigned int)>:
c000a499:	83 ec 10             	sub    esp,0x10
c000a49c:	6a 0a                	push   0xa
c000a49e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4a2:	50                   	push   eax
c000a4a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a7:	50                   	push   eax
c000a4a8:	e8 44 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ad:	50                   	push   eax
c000a4ae:	e8 c9 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4b3:	83 c4 20             	add    esp,0x20
c000a4b6:	c3                   	ret    

c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4b7:	83 ec 10             	sub    esp,0x10
c000a4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4be:	50                   	push   eax
c000a4bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4c3:	50                   	push   eax
c000a4c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4c8:	52                   	push   edx
c000a4c9:	e8 23 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ce:	50                   	push   eax
c000a4cf:	e8 a8 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4d4:	83 c4 20             	add    esp,0x20
c000a4d7:	c3                   	ret    

c000a4d8 <Dbg::kprintf(char const*, ...)>:
c000a4d8:	55                   	push   ebp
c000a4d9:	57                   	push   edi
c000a4da:	56                   	push   esi
c000a4db:	53                   	push   ebx
c000a4dc:	83 ec 0c             	sub    esp,0xc
c000a4df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4e3:	f6 05 b0 04 02 c0 10 	test   BYTE PTR ds:0xc00204b0,0x10
c000a4ea:	74 08                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4ec:	83 c4 0c             	add    esp,0xc
c000a4ef:	5b                   	pop    ebx
c000a4f0:	5e                   	pop    esi
c000a4f1:	5f                   	pop    edi
c000a4f2:	5d                   	pop    ebp
c000a4f3:	c3                   	ret    
c000a4f4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4f8:	31 ff                	xor    edi,edi
c000a4fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a501:	84 c0                	test   al,al
c000a503:	74 e7                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a505:	8d 77 01             	lea    esi,[edi+0x1]
c000a508:	3c 25                	cmp    al,0x25
c000a50a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a50d:	75 47                	jne    c000a556 <Dbg::kprintf(char const*, ...)+0x7e>
c000a50f:	83 c7 02             	add    edi,0x2
c000a512:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a515:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a518:	83 e8 25             	sub    eax,0x25
c000a51b:	3c 53                	cmp    al,0x53
c000a51d:	0f 87 d2 00 00 00    	ja     c000a5f5 <Dbg::kprintf(char const*, ...)+0x11d>
c000a523:	25 ff 00 00 00       	and    eax,0xff
c000a528:	ff 24 85 20 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28e0]
c000a52f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a533:	89 c8                	mov    eax,ecx
c000a535:	83 c1 04             	add    ecx,0x4
c000a538:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a53c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a53e:	55                   	push   ebp
c000a53f:	e8 55 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a544:	58                   	pop    eax
c000a545:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a548:	84 c0                	test   al,al
c000a54a:	74 a0                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a54c:	8d 77 01             	lea    esi,[edi+0x1]
c000a54f:	3c 25                	cmp    al,0x25
c000a551:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a554:	74 b9                	je     c000a50f <Dbg::kprintf(char const*, ...)+0x37>
c000a556:	50                   	push   eax
c000a557:	89 f7                	mov    edi,esi
c000a559:	e8 fe fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a55e:	89 ee                	mov    esi,ebp
c000a560:	58                   	pop    eax
c000a561:	eb e2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a563:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a567:	89 c8                	mov    eax,ecx
c000a569:	83 c1 04             	add    ecx,0x4
c000a56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a56e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a572:	50                   	push   eax
c000a573:	e8 04 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a578:	58                   	pop    eax
c000a579:	eb ca                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a57b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a57f:	89 d0                	mov    eax,edx
c000a581:	83 c2 04             	add    edx,0x4
c000a584:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a588:	8b 00                	mov    eax,DWORD PTR [eax]
c000a58a:	50                   	push   eax
c000a58b:	e8 09 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a590:	58                   	pop    eax
c000a591:	eb b2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a593:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a597:	89 d0                	mov    eax,edx
c000a599:	83 c2 04             	add    edx,0x4
c000a59c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a59f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5a3:	50                   	push   eax
c000a5a4:	e8 b3 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5a9:	58                   	pop    eax
c000a5aa:	eb 99                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5b0:	89 c8                	mov    eax,ecx
c000a5b2:	83 c1 04             	add    ecx,0x4
c000a5b5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5b9:	6a 10                	push   0x10
c000a5bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bd:	51                   	push   ecx
c000a5be:	e8 f4 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5c3:	5d                   	pop    ebp
c000a5c4:	58                   	pop    eax
c000a5c5:	e9 7b ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	83 c2 08             	add    edx,0x8
c000a5d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5d7:	6a 10                	push   0x10
c000a5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5db:	50                   	push   eax
c000a5dc:	e8 d6 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e1:	58                   	pop    eax
c000a5e2:	5a                   	pop    edx
c000a5e3:	e9 5d ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5e8:	6a 25                	push   0x25
c000a5ea:	e8 6d fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5ef:	5a                   	pop    edx
c000a5f0:	e9 50 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f5:	6a 25                	push   0x25
c000a5f7:	e8 60 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5fc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a600:	50                   	push   eax
c000a601:	e8 56 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a606:	5a                   	pop    edx
c000a607:	59                   	pop    ecx
c000a608:	e9 38 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a60d:	90                   	nop

c000a60e <File::read(unsigned long long, void*, int*)>:
c000a60e:	53                   	push   ebx
c000a60f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a613:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a617:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a61e:	3c 19                	cmp    al,0x19
c000a620:	77 35                	ja     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a622:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000a629:	85 c0                	test   eax,eax
c000a62b:	74 2a                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a62d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a633:	85 c0                	test   eax,eax
c000a635:	74 20                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a637:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a63b:	74 21                	je     c000a65e <File::read(unsigned long long, void*, int*)+0x50>
c000a63d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a63f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a643:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a64d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a651:	5b                   	pop    ebx
c000a652:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a655:	ff e0                	jmp    eax
c000a657:	b8 0b 00 00 00       	mov    eax,0xb
c000a65c:	eb 05                	jmp    c000a663 <File::read(unsigned long long, void*, int*)+0x55>
c000a65e:	b8 05 00 00 00       	mov    eax,0x5
c000a663:	5b                   	pop    ebx
c000a664:	c3                   	ret    
c000a665:	90                   	nop

c000a666 <File::write(unsigned long long, void*, int*)>:
c000a666:	53                   	push   ebx
c000a667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a66b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a66f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a676:	3c 19                	cmp    al,0x19
c000a678:	77 35                	ja     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a67a:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000a681:	85 c0                	test   eax,eax
c000a683:	74 2a                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a685:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a68b:	85 c0                	test   eax,eax
c000a68d:	74 20                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a68f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a693:	74 21                	je     c000a6b6 <File::write(unsigned long long, void*, int*)+0x50>
c000a695:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a697:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a69b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6a9:	5b                   	pop    ebx
c000a6aa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6ad:	ff e0                	jmp    eax
c000a6af:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b4:	eb 05                	jmp    c000a6bb <File::write(unsigned long long, void*, int*)+0x55>
c000a6b6:	b8 05 00 00 00       	mov    eax,0x5
c000a6bb:	5b                   	pop    ebx
c000a6bc:	c3                   	ret    
c000a6bd:	90                   	nop

c000a6be <Directory::read(unsigned long long, void*, int*)>:
c000a6be:	53                   	push   ebx
c000a6bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ce:	3c 19                	cmp    al,0x19
c000a6d0:	77 35                	ja     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6d2:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000a6d9:	85 c0                	test   eax,eax
c000a6db:	74 2a                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6e3:	85 c0                	test   eax,eax
c000a6e5:	74 20                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6eb:	74 21                	je     c000a70e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a701:	5b                   	pop    ebx
c000a702:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a705:	ff e0                	jmp    eax
c000a707:	b8 0b 00 00 00       	mov    eax,0xb
c000a70c:	eb 05                	jmp    c000a713 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a70e:	b8 05 00 00 00       	mov    eax,0x5
c000a713:	5b                   	pop    ebx
c000a714:	c3                   	ret    
c000a715:	90                   	nop

c000a716 <Directory::write(unsigned long long, void*, int*)>:
c000a716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a721:	b8 0b 00 00 00       	mov    eax,0xb
c000a726:	80 fa 19             	cmp    dl,0x19
c000a729:	77 18                	ja     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a72b:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000a732:	85 d2                	test   edx,edx
c000a734:	74 0d                	je     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a736:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a73d:	19 c0                	sbb    eax,eax
c000a73f:	83 e0 0a             	and    eax,0xa
c000a742:	40                   	inc    eax
c000a743:	c3                   	ret    

c000a744 <File::isAtty()>:
c000a744:	31 c0                	xor    eax,eax
c000a746:	c3                   	ret    
c000a747:	90                   	nop

c000a748 <Directory::isAtty()>:
c000a748:	31 c0                	xor    eax,eax
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a74c:	b8 0a 00 00 00       	mov    eax,0xa
c000a751:	c3                   	ret    

c000a752 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a752:	b8 0a 00 00 00       	mov    eax,0xa
c000a757:	c3                   	ret    

c000a758 <Filesystem::allocateSwapfile(char const*, int)>:
c000a758:	31 c0                	xor    eax,eax
c000a75a:	31 d2                	xor    edx,edx
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <File::~File()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	ba e0 d8 01 c0       	mov    edx,0xc001d8e0
c000a766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a76a:	89 10                	mov    DWORD PTR [eax],edx
c000a76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a770:	83 ec 0c             	sub    esp,0xc
c000a773:	50                   	push   eax
c000a774:	e8 ab e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a779:	83 c4 10             	add    esp,0x10
c000a77c:	90                   	nop
c000a77d:	83 c4 0c             	add    esp,0xc
c000a780:	c3                   	ret    
c000a781:	90                   	nop

c000a782 <File::~File()>:
c000a782:	83 ec 0c             	sub    esp,0xc
c000a785:	83 ec 0c             	sub    esp,0xc
c000a788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a78c:	e8 cd ff ff ff       	call   c000a75e <File::~File()>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	83 ec 08             	sub    esp,0x8
c000a797:	68 14 01 00 00       	push   0x114
c000a79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a0:	e8 3d fc ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	c3                   	ret    

c000a7ac <Directory::~Directory()>:
c000a7ac:	83 ec 0c             	sub    esp,0xc
c000a7af:	ba fc d8 01 c0       	mov    edx,0xc001d8fc
c000a7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7be:	83 ec 0c             	sub    esp,0xc
c000a7c1:	50                   	push   eax
c000a7c2:	e8 5d e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	90                   	nop
c000a7cb:	83 c4 0c             	add    esp,0xc
c000a7ce:	c3                   	ret    
c000a7cf:	90                   	nop

c000a7d0 <Directory::~Directory()>:
c000a7d0:	83 ec 0c             	sub    esp,0xc
c000a7d3:	83 ec 0c             	sub    esp,0xc
c000a7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7da:	e8 cd ff ff ff       	call   c000a7ac <Directory::~Directory()>
c000a7df:	83 c4 10             	add    esp,0x10
c000a7e2:	83 ec 08             	sub    esp,0x8
c000a7e5:	68 14 01 00 00       	push   0x114
c000a7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ee:	e8 ef fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7f3:	83 c4 10             	add    esp,0x10
c000a7f6:	83 c4 0c             	add    esp,0xc
c000a7f9:	c3                   	ret    

c000a7fa <Filesystem::Filesystem()>:
c000a7fa:	ba 78 d8 01 c0       	mov    edx,0xc001d878
c000a7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a803:	89 10                	mov    DWORD PTR [eax],edx
c000a805:	8b 15 94 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020594
c000a80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a816:	a3 94 05 02 c0       	mov    ds:0xc0020594,eax
c000a81b:	90                   	nop
c000a81c:	c3                   	ret    
c000a81d:	90                   	nop

c000a81e <Filesystem::~Filesystem()>:
c000a81e:	ba 78 d8 01 c0       	mov    edx,0xc001d878
c000a823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a827:	89 10                	mov    DWORD PTR [eax],edx
c000a829:	90                   	nop
c000a82a:	c3                   	ret    
c000a82b:	90                   	nop

c000a82c <Filesystem::~Filesystem()>:
c000a82c:	83 ec 0c             	sub    esp,0xc
c000a82f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a833:	e8 e6 ff ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c000a838:	83 c4 04             	add    esp,0x4
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	6a 08                	push   0x8
c000a840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a844:	e8 99 fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	83 c4 0c             	add    esp,0xc
c000a84f:	c3                   	ret    

c000a850 <Fs::getcwd(Process*, char*, int)>:
c000a850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a854:	31 c0                	xor    eax,eax
c000a856:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a859:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a85d:	7d 15                	jge    c000a874 <Fs::getcwd(Process*, char*, int)+0x24>
c000a85f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a863:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a86a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a86d:	84 c9                	test   cl,cl
c000a86f:	74 06                	je     c000a877 <Fs::getcwd(Process*, char*, int)+0x27>
c000a871:	40                   	inc    eax
c000a872:	eb e2                	jmp    c000a856 <Fs::getcwd(Process*, char*, int)+0x6>
c000a874:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a877:	31 c0                	xor    eax,eax
c000a879:	c3                   	ret    

c000a87a <Fs::initVFS()>:
c000a87a:	83 ec 18             	sub    esp,0x18
c000a87d:	6a 08                	push   0x8
c000a87f:	e8 35 cf ff ff       	call   c00077b9 <malloc>
c000a884:	89 04 24             	mov    DWORD PTR [esp],eax
c000a887:	e8 dc c3 00 00       	call   c0016c68 <FAT::FAT()>
c000a88c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a893:	e8 21 cf ff ff       	call   c00077b9 <malloc>
c000a898:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89b:	e8 24 d1 00 00       	call   c00179c4 <ISO9660::ISO9660()>
c000a8a0:	83 c4 1c             	add    esp,0x1c
c000a8a3:	c3                   	ret    

c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8a4:	55                   	push   ebp
c000a8a5:	57                   	push   edi
c000a8a6:	56                   	push   esi
c000a8a7:	53                   	push   ebx
c000a8a8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8ae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8b5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8bc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8c3:	68 00 04 00 00       	push   0x400
c000a8c8:	6a 00                	push   0x0
c000a8ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8ce:	56                   	push   esi
c000a8cf:	e8 fc 5b ff ff       	call   c00004d0 <memset>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8db:	75 0b                	jne    c000a8e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8dd:	50                   	push   eax
c000a8de:	50                   	push   eax
c000a8df:	57                   	push   edi
c000a8e0:	56                   	push   esi
c000a8e1:	e8 1a 5d ff ff       	call   c0000600 <strcpy>
c000a8e6:	eb 41                	jmp    c000a929 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8e8:	8a 07                	mov    al,BYTE PTR [edi]
c000a8ea:	3c 5c                	cmp    al,0x5c
c000a8ec:	74 04                	je     c000a8f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8ee:	3c 2f                	cmp    al,0x2f
c000a8f0:	75 18                	jne    c000a90a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8f5:	3c 60                	cmp    al,0x60
c000a8f7:	7e 03                	jle    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8f9:	83 e8 20             	sub    eax,0x20
c000a8fc:	88 04 24             	mov    BYTE PTR [esp],al
c000a8ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a906:	50                   	push   eax
c000a907:	50                   	push   eax
c000a908:	eb 18                	jmp    c000a922 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a90a:	50                   	push   eax
c000a90b:	50                   	push   eax
c000a90c:	55                   	push   ebp
c000a90d:	56                   	push   esi
c000a90e:	e8 ed 5c ff ff       	call   c0000600 <strcpy>
c000a913:	5a                   	pop    edx
c000a914:	59                   	pop    ecx
c000a915:	68 46 e5 01 c0       	push   0xc001e546
c000a91a:	56                   	push   esi
c000a91b:	e8 a0 5e ff ff       	call   c00007c0 <strcat>
c000a920:	5d                   	pop    ebp
c000a921:	58                   	pop    eax
c000a922:	57                   	push   edi
c000a923:	56                   	push   esi
c000a924:	e8 97 5e ff ff       	call   c00007c0 <strcat>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a92f:	3c 60                	cmp    al,0x60
c000a931:	7e 03                	jle    c000a936 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a933:	83 e8 20             	sub    eax,0x20
c000a936:	88 04 24             	mov    BYTE PTR [esp],al
c000a939:	88 03                	mov    BYTE PTR [ebx],al
c000a93b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a942:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a948:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a94c:	bf 03 00 00 00       	mov    edi,0x3
c000a951:	b8 03 00 00 00       	mov    eax,0x3
c000a956:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a959:	84 d2                	test   dl,dl
c000a95b:	0f 84 91 00 00 00    	je     c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a961:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a964:	80 fa 5c             	cmp    dl,0x5c
c000a967:	74 05                	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a969:	80 fa 2f             	cmp    dl,0x2f
c000a96c:	75 12                	jne    c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a96e:	89 c5                	mov    ebp,eax
c000a970:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a975:	74 09                	je     c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a977:	40                   	inc    eax
c000a978:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a97c:	89 cf                	mov    edi,ecx
c000a97e:	eb d6                	jmp    c000a956 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a980:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a985:	75 5b                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a987:	80 fa 2e             	cmp    dl,0x2e
c000a98a:	75 56                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a98c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a990:	74 19                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a992:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a997:	74 53                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a999:	89 f9                	mov    ecx,edi
c000a99b:	41                   	inc    ecx
c000a99c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a99f:	80 fa 2f             	cmp    dl,0x2f
c000a9a2:	74 f7                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a4:	80 fa 5c             	cmp    dl,0x5c
c000a9a7:	74 f2                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a9:	eb d1                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b0:	74 3a                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9b2:	83 f8 03             	cmp    eax,0x3
c000a9b5:	74 c5                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b7:	41                   	inc    ecx
c000a9b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9bb:	80 fa 2f             	cmp    dl,0x2f
c000a9be:	74 f7                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c0:	80 fa 5c             	cmp    dl,0x5c
c000a9c3:	74 f2                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c5:	48                   	dec    eax
c000a9c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9ca:	75 06                	jne    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9d0:	eb f3                	jmp    c000a9c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9d6:	74 07                	je     c000a9df <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9dc:	48                   	dec    eax
c000a9dd:	eb f3                	jmp    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9df:	40                   	inc    eax
c000a9e0:	eb 9a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e2:	80 fa 2f             	cmp    dl,0x2f
c000a9e5:	74 95                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e7:	80 fa 5c             	cmp    dl,0x5c
c000a9ea:	74 90                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9ef:	40                   	inc    eax
c000a9f0:	eb 8a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9f6:	83 ec 0c             	sub    esp,0xc
c000a9f9:	53                   	push   ebx
c000a9fa:	e8 41 5b ff ff       	call   c0000540 <strlen>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa07:	75 26                	jne    c000aa2f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa09:	83 ec 0c             	sub    esp,0xc
c000aa0c:	53                   	push   ebx
c000aa0d:	e8 2e 5b ff ff       	call   c0000540 <strlen>
c000aa12:	83 c4 10             	add    esp,0x10
c000aa15:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa1a:	74 26                	je     c000aa42 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa1c:	83 ec 0c             	sub    esp,0xc
c000aa1f:	53                   	push   ebx
c000aa20:	e8 1b 5b ff ff       	call   c0000540 <strlen>
c000aa25:	83 c4 10             	add    esp,0x10
c000aa28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa2d:	eb c7                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa2f:	83 ec 0c             	sub    esp,0xc
c000aa32:	53                   	push   ebx
c000aa33:	e8 08 5b ff ff       	call   c0000540 <strlen>
c000aa38:	83 c4 10             	add    esp,0x10
c000aa3b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa40:	74 c7                	je     c000aa09 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa42:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa48:	5b                   	pop    ebx
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	5d                   	pop    ebp
c000aa4c:	c3                   	ret    
c000aa4d:	90                   	nop

c000aa4e <File::File(char const*, Process*)>:
c000aa4e:	83 ec 0c             	sub    esp,0xc
c000aa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa55:	83 ec 08             	sub    esp,0x8
c000aa58:	6a 00                	push   0x0
c000aa5a:	50                   	push   eax
c000aa5b:	e8 e2 e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	ba e0 d8 01 c0       	mov    edx,0xc001d8e0
c000aa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6c:	89 10                	mov    DWORD PTR [eax],edx
c000aa6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7c:	83 c0 0d             	add    eax,0xd
c000aa7f:	83 ec 04             	sub    esp,0x4
c000aa82:	52                   	push   edx
c000aa83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa87:	50                   	push   eax
c000aa88:	e8 17 fe ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa8d:	83 c4 10             	add    esp,0x10
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa97:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aab6:	25 ff 00 00 00       	and    eax,0xff
c000aabb:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000aac2:	85 c0                	test   eax,eax
c000aac4:	74 42                	je     c000ab08 <File::File(char const*, Process*)+0xba>
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad0:	25 ff 00 00 00       	and    eax,0xff
c000aad5:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000aadc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aae2:	85 c0                	test   eax,eax
c000aae4:	75 22                	jne    c000ab08 <File::File(char const*, Process*)+0xba>
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf0:	25 ff 00 00 00       	and    eax,0xff
c000aaf5:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	50                   	push   eax
c000ab00:	e8 f9 1f 00 00       	call   c000cafe <LogicalDisk::mount()>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	90                   	nop
c000ab09:	83 c4 0c             	add    esp,0xc
c000ab0c:	c3                   	ret    
c000ab0d:	90                   	nop

c000ab0e <File::open(FileOpenMode)>:
c000ab0e:	53                   	push   ebx
c000ab0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab14:	83 ec 08             	sub    esp,0x8
c000ab17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab1b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab22:	80 fa 19             	cmp    dl,0x19
c000ab25:	77 40                	ja     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab27:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000ab2e:	85 d2                	test   edx,edx
c000ab30:	74 35                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab32:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab38:	85 d2                	test   edx,edx
c000ab3a:	74 2b                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab3c:	b8 06 00 00 00       	mov    eax,0x6
c000ab41:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab45:	75 20                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab47:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab49:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab53:	51                   	push   ecx
c000ab54:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab57:	51                   	push   ecx
c000ab58:	52                   	push   edx
c000ab59:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	85 c0                	test   eax,eax
c000ab61:	75 04                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab63:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab67:	83 c4 08             	add    esp,0x8
c000ab6a:	5b                   	pop    ebx
c000ab6b:	c3                   	ret    

c000ab6c <File::close()>:
c000ab6c:	53                   	push   ebx
c000ab6d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab72:	83 ec 08             	sub    esp,0x8
c000ab75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab79:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab80:	80 fa 19             	cmp    dl,0x19
c000ab83:	77 41                	ja     c000abc6 <File::close()+0x5a>
c000ab85:	8b 1c 95 00 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd600]
c000ab8c:	85 db                	test   ebx,ebx
c000ab8e:	74 36                	je     c000abc6 <File::close()+0x5a>
c000ab90:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab97:	74 2d                	je     c000abc6 <File::close()+0x5a>
c000ab99:	b8 05 00 00 00       	mov    eax,0x5
c000ab9e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aba2:	74 22                	je     c000abc6 <File::close()+0x5a>
c000aba4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000aba8:	8b 04 95 00 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd600]
c000abaf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abb5:	53                   	push   ebx
c000abb6:	53                   	push   ebx
c000abb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abb9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abbf:	50                   	push   eax
c000abc0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	83 c4 08             	add    esp,0x8
c000abc9:	5b                   	pop    ebx
c000abca:	c3                   	ret    
c000abcb:	90                   	nop

c000abcc <File::seek(unsigned long long)>:
c000abcc:	56                   	push   esi
c000abcd:	53                   	push   ebx
c000abce:	b8 0b 00 00 00       	mov    eax,0xb
c000abd3:	51                   	push   ecx
c000abd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abdc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abe7:	80 fa 19             	cmp    dl,0x19
c000abea:	77 31                	ja     c000ac1d <File::seek(unsigned long long)+0x51>
c000abec:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000abf3:	85 d2                	test   edx,edx
c000abf5:	74 26                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000abf7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abfd:	85 d2                	test   edx,edx
c000abff:	74 1c                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac01:	b8 05 00 00 00       	mov    eax,0x5
c000ac06:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac0a:	74 11                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac0c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac0e:	53                   	push   ebx
c000ac0f:	51                   	push   ecx
c000ac10:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac16:	52                   	push   edx
c000ac17:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	5a                   	pop    edx
c000ac1e:	5b                   	pop    ebx
c000ac1f:	5e                   	pop    esi
c000ac20:	c3                   	ret    
c000ac21:	90                   	nop

c000ac22 <File::tell(unsigned long long*)>:
c000ac22:	83 ec 0c             	sub    esp,0xc
c000ac25:	b8 0b 00 00 00       	mov    eax,0xb
c000ac2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac2e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac35:	80 fa 19             	cmp    dl,0x19
c000ac38:	77 34                	ja     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac3a:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000ac41:	85 d2                	test   edx,edx
c000ac43:	74 29                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac45:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac4b:	85 d2                	test   edx,edx
c000ac4d:	74 1f                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac4f:	b8 05 00 00 00       	mov    eax,0x5
c000ac54:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac58:	74 14                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac5a:	50                   	push   eax
c000ac5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac67:	52                   	push   edx
c000ac68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 0c             	add    esp,0xc
c000ac71:	c3                   	ret    

c000ac72 <File::rewind()>:
c000ac72:	83 ec 10             	sub    esp,0x10
c000ac75:	6a 00                	push   0x0
c000ac77:	6a 00                	push   0x0
c000ac79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac7d:	e8 4a ff ff ff       	call   c000abcc <File::seek(unsigned long long)>
c000ac82:	83 c4 1c             	add    esp,0x1c
c000ac85:	c3                   	ret    

c000ac86 <File::unlink()>:
c000ac86:	83 ec 0c             	sub    esp,0xc
c000ac89:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac99:	80 f9 19             	cmp    cl,0x19
c000ac9c:	77 2f                	ja     c000accd <File::unlink()+0x47>
c000ac9e:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000aca5:	85 c9                	test   ecx,ecx
c000aca7:	74 24                	je     c000accd <File::unlink()+0x47>
c000aca9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acaf:	85 c9                	test   ecx,ecx
c000acb1:	74 1a                	je     c000accd <File::unlink()+0x47>
c000acb3:	b8 06 00 00 00       	mov    eax,0x6
c000acb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acbc:	75 0f                	jne    c000accd <File::unlink()+0x47>
c000acbe:	83 c2 0d             	add    edx,0xd
c000acc1:	50                   	push   eax
c000acc2:	50                   	push   eax
c000acc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acc5:	52                   	push   edx
c000acc6:	51                   	push   ecx
c000acc7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	83 c4 0c             	add    esp,0xc
c000acd0:	c3                   	ret    
c000acd1:	90                   	nop

c000acd2 <File::rename(char const*)>:
c000acd2:	83 ec 0c             	sub    esp,0xc
c000acd5:	b8 0b 00 00 00       	mov    eax,0xb
c000acda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ace5:	80 f9 19             	cmp    cl,0x19
c000ace8:	77 32                	ja     c000ad1c <File::rename(char const*)+0x4a>
c000acea:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000acf1:	85 c9                	test   ecx,ecx
c000acf3:	74 27                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acf5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acfb:	85 c9                	test   ecx,ecx
c000acfd:	74 1d                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acff:	b8 06 00 00 00       	mov    eax,0x6
c000ad04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad08:	75 12                	jne    c000ad1c <File::rename(char const*)+0x4a>
c000ad0a:	83 c2 0d             	add    edx,0xd
c000ad0d:	50                   	push   eax
c000ad0e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad14:	52                   	push   edx
c000ad15:	51                   	push   ecx
c000ad16:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	83 c4 0c             	add    esp,0xc
c000ad1f:	c3                   	ret    

c000ad20 <File::chfatattr(unsigned char, unsigned char)>:
c000ad20:	57                   	push   edi
c000ad21:	b8 0b 00 00 00       	mov    eax,0xb
c000ad26:	56                   	push   esi
c000ad27:	53                   	push   ebx
c000ad28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad3b:	80 f9 19             	cmp    cl,0x19
c000ad3e:	77 37                	ja     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad40:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ad47:	85 c9                	test   ecx,ecx
c000ad49:	74 2c                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad51:	85 c9                	test   ecx,ecx
c000ad53:	74 22                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad55:	b8 06 00 00 00       	mov    eax,0x6
c000ad5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad5e:	75 17                	jne    c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad60:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad62:	89 f0                	mov    eax,esi
c000ad64:	83 c2 0d             	add    edx,0xd
c000ad67:	0f b6 f0             	movzx  esi,al
c000ad6a:	0f b6 db             	movzx  ebx,bl
c000ad6d:	56                   	push   esi
c000ad6e:	53                   	push   ebx
c000ad6f:	52                   	push   edx
c000ad70:	51                   	push   ecx
c000ad71:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad74:	83 c4 10             	add    esp,0x10
c000ad77:	5b                   	pop    ebx
c000ad78:	5e                   	pop    esi
c000ad79:	5f                   	pop    edi
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <File::exists()>:
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	31 c0                	xor    eax,eax
c000ad81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad85:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8c:	80 f9 19             	cmp    cl,0x19
c000ad8f:	77 24                	ja     c000adb5 <File::exists()+0x39>
c000ad91:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ad98:	85 c9                	test   ecx,ecx
c000ad9a:	74 19                	je     c000adb5 <File::exists()+0x39>
c000ad9c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada2:	85 c9                	test   ecx,ecx
c000ada4:	74 0f                	je     c000adb5 <File::exists()+0x39>
c000ada6:	83 c2 0d             	add    edx,0xd
c000ada9:	50                   	push   eax
c000adaa:	50                   	push   eax
c000adab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adad:	52                   	push   edx
c000adae:	51                   	push   ecx
c000adaf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adb2:	83 c4 10             	add    esp,0x10
c000adb5:	83 c4 0c             	add    esp,0xc
c000adb8:	c3                   	ret    
c000adb9:	90                   	nop

c000adba <File::stat(unsigned long long*, bool*)>:
c000adba:	56                   	push   esi
c000adbb:	53                   	push   ebx
c000adbc:	50                   	push   eax
c000adbd:	b8 0b 00 00 00       	mov    eax,0xb
c000adc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000add5:	80 f9 19             	cmp    cl,0x19
c000add8:	77 3d                	ja     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adda:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ade1:	85 c9                	test   ecx,ecx
c000ade3:	74 32                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000ade5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adeb:	85 c9                	test   ecx,ecx
c000aded:	74 28                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf5:	74 13                	je     c000ae0a <File::stat(unsigned long long*, bool*)+0x50>
c000adf7:	83 ec 04             	sub    esp,0x4
c000adfa:	56                   	push   esi
c000adfb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae01:	51                   	push   ecx
c000ae02:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae05:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae08:	eb 0a                	jmp    c000ae14 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae0a:	53                   	push   ebx
c000ae0b:	83 c2 0d             	add    edx,0xd
c000ae0e:	56                   	push   esi
c000ae0f:	52                   	push   edx
c000ae10:	51                   	push   ecx
c000ae11:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae14:	83 c4 10             	add    esp,0x10
c000ae17:	5a                   	pop    edx
c000ae18:	5b                   	pop    ebx
c000ae19:	5e                   	pop    esi
c000ae1a:	c3                   	ret    

c000ae1b <Fs::setcwd(Process*, char*)>:
c000ae1b:	55                   	push   ebp
c000ae1c:	57                   	push   edi
c000ae1d:	56                   	push   esi
c000ae1e:	53                   	push   ebx
c000ae1f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae32:	57                   	push   edi
c000ae33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae3e:	56                   	push   esi
c000ae3f:	e8 60 fa ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae44:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae47:	e8 f4 56 ff ff       	call   c0000540 <strlen>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	83 f8 02             	cmp    eax,0x2
c000ae52:	77 15                	ja     c000ae69 <Fs::setcwd(Process*, char*)+0x4e>
c000ae54:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae59:	83 eb 41             	sub    ebx,0x41
c000ae5c:	8b 04 9d 00 2a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd600]
c000ae63:	85 c0                	test   eax,eax
c000ae65:	75 1c                	jne    c000ae83 <Fs::setcwd(Process*, char*)+0x68>
c000ae67:	eb 2f                	jmp    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae69:	83 ec 0c             	sub    esp,0xc
c000ae6c:	56                   	push   esi
c000ae6d:	e8 ce 56 ff ff       	call   c0000540 <strlen>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	83 f8 03             	cmp    eax,0x3
c000ae78:	75 57                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae7a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae7f:	75 50                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae81:	eb d1                	jmp    c000ae54 <Fs::setcwd(Process*, char*)+0x39>
c000ae83:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae8a:	75 0c                	jne    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	50                   	push   eax
c000ae90:	e8 69 1c 00 00       	call   c000cafe <LogicalDisk::mount()>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	b8 03 00 00 00       	mov    eax,0x3
c000ae9d:	83 fb 19             	cmp    ebx,0x19
c000aea0:	0f 87 c6 00 00 00    	ja     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aea6:	8b 14 9d 00 2a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd600]
c000aead:	b8 05 00 00 00       	mov    eax,0x5
c000aeb2:	85 d2                	test   edx,edx
c000aeb4:	0f 84 b2 00 00 00    	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aeba:	b8 06 00 00 00       	mov    eax,0x6
c000aebf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aec6:	0f 85 92 00 00 00    	jne    c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000aecc:	e9 9b 00 00 00       	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aed1:	83 ec 0c             	sub    esp,0xc
c000aed4:	68 14 01 00 00       	push   0x114
c000aed9:	e8 db c8 ff ff       	call   c00077b9 <malloc>
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	89 c3                	mov    ebx,eax
c000aee3:	55                   	push   ebp
c000aee4:	56                   	push   esi
c000aee5:	50                   	push   eax
c000aee6:	e8 63 fb ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000aeeb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aef7:	50                   	push   eax
c000aef8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aefc:	50                   	push   eax
c000aefd:	53                   	push   ebx
c000aefe:	e8 b7 fe ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 f8 02             	cmp    eax,0x2
c000af09:	74 04                	je     c000af0f <Fs::setcwd(Process*, char*)+0xf4>
c000af0b:	85 c0                	test   eax,eax
c000af0d:	74 1c                	je     c000af2b <Fs::setcwd(Process*, char*)+0x110>
c000af0f:	b8 01 00 00 00       	mov    eax,0x1
c000af14:	85 db                	test   ebx,ebx
c000af16:	74 54                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af1d:	53                   	push   ebx
c000af1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af21:	83 c4 10             	add    esp,0x10
c000af24:	b8 01 00 00 00       	mov    eax,0x1
c000af29:	eb 41                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af2b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af30:	75 1c                	jne    c000af4e <Fs::setcwd(Process*, char*)+0x133>
c000af32:	b8 02 00 00 00       	mov    eax,0x2
c000af37:	85 db                	test   ebx,ebx
c000af39:	74 31                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af40:	53                   	push   ebx
c000af41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	b8 02 00 00 00       	mov    eax,0x2
c000af4c:	eb 1e                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af4e:	85 db                	test   ebx,ebx
c000af50:	74 0c                	je     c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af57:	53                   	push   ebx
c000af58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	50                   	push   eax
c000af5f:	50                   	push   eax
c000af60:	56                   	push   esi
c000af61:	57                   	push   edi
c000af62:	e8 99 56 ff ff       	call   c0000600 <strcpy>
c000af67:	83 c4 10             	add    esp,0x10
c000af6a:	31 c0                	xor    eax,eax
c000af6c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af72:	5b                   	pop    ebx
c000af73:	5e                   	pop    esi
c000af74:	5f                   	pop    edi
c000af75:	5d                   	pop    ebp
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <Directory::Directory(char const*, Process*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	6a 00                	push   0x0
c000af84:	50                   	push   eax
c000af85:	e8 b8 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	ba fc d8 01 c0       	mov    edx,0xc001d8fc
c000af92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af96:	89 10                	mov    DWORD PTR [eax],edx
c000af98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af9c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	83 c0 0d             	add    eax,0xd
c000afa9:	83 ec 04             	sub    esp,0x4
c000afac:	52                   	push   edx
c000afad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb1:	50                   	push   eax
c000afb2:	e8 ed f8 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afda:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe0:	25 ff 00 00 00       	and    eax,0xff
c000afe5:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000afec:	85 c0                	test   eax,eax
c000afee:	74 42                	je     c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000affa:	25 ff 00 00 00       	and    eax,0xff
c000afff:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000b006:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b00c:	85 c0                	test   eax,eax
c000b00e:	75 22                	jne    c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b01a:	25 ff 00 00 00       	and    eax,0xff
c000b01f:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	50                   	push   eax
c000b02a:	e8 cf 1a 00 00       	call   c000cafe <LogicalDisk::mount()>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	90                   	nop
c000b033:	83 c4 0c             	add    esp,0xc
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <Directory::open()>:
c000b038:	53                   	push   ebx
c000b039:	b8 0b 00 00 00       	mov    eax,0xb
c000b03e:	83 ec 08             	sub    esp,0x8
c000b041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b045:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b04c:	80 fa 19             	cmp    dl,0x19
c000b04f:	77 3d                	ja     c000b08e <Directory::open()+0x56>
c000b051:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000b058:	85 d2                	test   edx,edx
c000b05a:	74 32                	je     c000b08e <Directory::open()+0x56>
c000b05c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b062:	85 d2                	test   edx,edx
c000b064:	74 28                	je     c000b08e <Directory::open()+0x56>
c000b066:	b8 06 00 00 00       	mov    eax,0x6
c000b06b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b06f:	75 1d                	jne    c000b08e <Directory::open()+0x56>
c000b071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b077:	50                   	push   eax
c000b078:	8b 02                	mov    eax,DWORD PTR [edx]
c000b07a:	51                   	push   ecx
c000b07b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b07e:	51                   	push   ecx
c000b07f:	52                   	push   edx
c000b080:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	75 04                	jne    c000b08e <Directory::open()+0x56>
c000b08a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b08e:	83 c4 08             	add    esp,0x8
c000b091:	5b                   	pop    ebx
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Directory::close()>:
c000b094:	53                   	push   ebx
c000b095:	b8 0b 00 00 00       	mov    eax,0xb
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0a8:	80 fa 19             	cmp    dl,0x19
c000b0ab:	77 41                	ja     c000b0ee <Directory::close()+0x5a>
c000b0ad:	8b 1c 95 00 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd600]
c000b0b4:	85 db                	test   ebx,ebx
c000b0b6:	74 36                	je     c000b0ee <Directory::close()+0x5a>
c000b0b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0bf:	74 2d                	je     c000b0ee <Directory::close()+0x5a>
c000b0c1:	b8 05 00 00 00       	mov    eax,0x5
c000b0c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0ca:	74 22                	je     c000b0ee <Directory::close()+0x5a>
c000b0cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0d0:	8b 04 95 00 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd600]
c000b0d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0dd:	53                   	push   ebx
c000b0de:	53                   	push   ebx
c000b0df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0e7:	50                   	push   eax
c000b0e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	83 c4 08             	add    esp,0x8
c000b0f1:	5b                   	pop    ebx
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <Directory::unlink()>:
c000b0f4:	83 ec 0c             	sub    esp,0xc
c000b0f7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b100:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b107:	80 f9 19             	cmp    cl,0x19
c000b10a:	77 2f                	ja     c000b13b <Directory::unlink()+0x47>
c000b10c:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b113:	85 c9                	test   ecx,ecx
c000b115:	74 24                	je     c000b13b <Directory::unlink()+0x47>
c000b117:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b11d:	85 c9                	test   ecx,ecx
c000b11f:	74 1a                	je     c000b13b <Directory::unlink()+0x47>
c000b121:	b8 06 00 00 00       	mov    eax,0x6
c000b126:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b12a:	75 0f                	jne    c000b13b <Directory::unlink()+0x47>
c000b12c:	83 c2 0d             	add    edx,0xd
c000b12f:	50                   	push   eax
c000b130:	50                   	push   eax
c000b131:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b133:	52                   	push   edx
c000b134:	51                   	push   ecx
c000b135:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	83 c4 0c             	add    esp,0xc
c000b13e:	c3                   	ret    
c000b13f:	90                   	nop

c000b140 <Directory::rename(char const*)>:
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	b8 0b 00 00 00       	mov    eax,0xb
c000b148:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b14c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b153:	80 f9 19             	cmp    cl,0x19
c000b156:	77 32                	ja     c000b18a <Directory::rename(char const*)+0x4a>
c000b158:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b15f:	85 c9                	test   ecx,ecx
c000b161:	74 27                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b169:	85 c9                	test   ecx,ecx
c000b16b:	74 1d                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b16d:	b8 06 00 00 00       	mov    eax,0x6
c000b172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b176:	75 12                	jne    c000b18a <Directory::rename(char const*)+0x4a>
c000b178:	83 c2 0d             	add    edx,0xd
c000b17b:	50                   	push   eax
c000b17c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b17e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b182:	52                   	push   edx
c000b183:	51                   	push   ecx
c000b184:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 c4 0c             	add    esp,0xc
c000b18d:	c3                   	ret    

c000b18e <Directory::exists()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	31 c0                	xor    eax,eax
c000b193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b197:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b19e:	80 f9 19             	cmp    cl,0x19
c000b1a1:	77 24                	ja     c000b1c7 <Directory::exists()+0x39>
c000b1a3:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b1aa:	85 c9                	test   ecx,ecx
c000b1ac:	74 19                	je     c000b1c7 <Directory::exists()+0x39>
c000b1ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1b4:	85 c9                	test   ecx,ecx
c000b1b6:	74 0f                	je     c000b1c7 <Directory::exists()+0x39>
c000b1b8:	83 c2 0d             	add    edx,0xd
c000b1bb:	50                   	push   eax
c000b1bc:	50                   	push   eax
c000b1bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1bf:	52                   	push   edx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	c3                   	ret    
c000b1cb:	90                   	nop

c000b1cc <Directory::read(dirent*)>:
c000b1cc:	83 ec 1c             	sub    esp,0x1c
c000b1cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1df:	80 fa 19             	cmp    dl,0x19
c000b1e2:	77 30                	ja     c000b214 <Directory::read(dirent*)+0x48>
c000b1e4:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000b1eb:	85 d2                	test   edx,edx
c000b1ed:	74 25                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1f6:	74 1c                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b201:	52                   	push   edx
c000b202:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b206:	6a 00                	push   0x0
c000b208:	68 10 01 00 00       	push   0x110
c000b20d:	51                   	push   ecx
c000b20e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b211:	83 c4 20             	add    esp,0x20
c000b214:	83 c4 1c             	add    esp,0x1c
c000b217:	c3                   	ret    

c000b218 <Directory::create()>:
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	b8 0b 00 00 00       	mov    eax,0xb
c000b220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b22b:	80 f9 19             	cmp    cl,0x19
c000b22e:	77 2f                	ja     c000b25f <Directory::create()+0x47>
c000b230:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b237:	85 c9                	test   ecx,ecx
c000b239:	74 24                	je     c000b25f <Directory::create()+0x47>
c000b23b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 1a                	je     c000b25f <Directory::create()+0x47>
c000b245:	b8 06 00 00 00       	mov    eax,0x6
c000b24a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24e:	75 0f                	jne    c000b25f <Directory::create()+0x47>
c000b250:	83 c2 0d             	add    edx,0xd
c000b253:	50                   	push   eax
c000b254:	50                   	push   eax
c000b255:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b257:	52                   	push   edx
c000b258:	51                   	push   ecx
c000b259:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b25c:	83 c4 10             	add    esp,0x10
c000b25f:	83 c4 0c             	add    esp,0xc
c000b262:	c3                   	ret    
c000b263:	90                   	nop

c000b264 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b264:	b8 0a 00 00 00       	mov    eax,0xa
c000b269:	c3                   	ret    
c000b26a:	66 90                	xchg   ax,ax

c000b26c <Bus::Bus(char const*)>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	83 ec 08             	sub    esp,0x8
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	50                   	push   eax
c000b27b:	e8 30 08 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	ba 18 d9 01 c0       	mov    edx,0xc001d918
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b29c:	90                   	nop
c000b29d:	83 c4 0c             	add    esp,0xc
c000b2a0:	c3                   	ret    
c000b2a1:	90                   	nop
c000b2a2:	66 90                	xchg   ax,ax

c000b2a4 <Bus::~Bus()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	ba 18 d9 01 c0       	mov    edx,0xc001d918
c000b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b0:	89 10                	mov    DWORD PTR [eax],edx
c000b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	50                   	push   eax
c000b2ba:	e8 5b 05 00 00       	call   c000b81a <Device::~Device()>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	90                   	nop
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	c3                   	ret    
c000b2c7:	90                   	nop

c000b2c8 <Bus::~Bus()>:
c000b2c8:	83 ec 0c             	sub    esp,0xc
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d2:	e8 cd ff ff ff       	call   c000b2a4 <Bus::~Bus()>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	68 58 01 00 00       	push   0x158
c000b2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e6:	e8 f7 f0 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	c3                   	ret    

c000b2f2 <beepThread(void*)>:
c000b2f2:	83 ec 0c             	sub    esp,0xc
c000b2f5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000b2fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2fe:	48                   	dec    eax
c000b2ff:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000b304:	75 01                	jne    c000b307 <beepThread(void*)+0x15>
c000b306:	fb                   	sti    
c000b307:	83 ec 0c             	sub    esp,0xc
c000b30a:	6b c2 0a             	imul   eax,edx,0xa
c000b30d:	50                   	push   eax
c000b30e:	e8 39 83 00 00       	call   c001364c <milliTenthSleep(unsigned int)>
c000b313:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b31a:	e8 df a0 00 00       	call   c00153fe <HalMakeBeep(int)>
c000b31f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b327:	83 c4 1c             	add    esp,0x1c
c000b32a:	e9 19 82 00 00       	jmp    c0013548 <blockTask(TaskState)>

c000b32f <Krnl::beep(int, int, bool)>:
c000b32f:	56                   	push   esi
c000b330:	53                   	push   ebx
c000b331:	83 ec 10             	sub    esp,0x10
c000b334:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b340:	e8 b9 a0 00 00       	call   c00153fe <HalMakeBeep(int)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	89 f0                	mov    eax,esi
c000b34a:	84 c0                	test   al,al
c000b34c:	74 1e                	je     c000b36c <Krnl::beep(int, int, bool)+0x3d>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	6b db 0a             	imul   ebx,ebx,0xa
c000b354:	53                   	push   ebx
c000b355:	e8 f2 82 00 00       	call   c001364c <milliTenthSleep(unsigned int)>
c000b35a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b362:	83 c4 14             	add    esp,0x14
c000b365:	5b                   	pop    ebx
c000b366:	5e                   	pop    esi
c000b367:	e9 92 a0 00 00       	jmp    c00153fe <HalMakeBeep(int)>
c000b36c:	68 e6 00 00 00       	push   0xe6
c000b371:	53                   	push   ebx
c000b372:	68 f2 b2 00 c0       	push   0xc000b2f2
c000b377:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000b37d:	e8 aa 7d 00 00       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c000b382:	83 c4 14             	add    esp,0x14
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    

c000b388 <User::loadClockSettings(int)>:
c000b388:	53                   	push   ebx
c000b389:	83 ec 14             	sub    esp,0x14
c000b38c:	68 14 01 00 00       	push   0x114
c000b391:	e8 23 c4 ff ff       	call   c00077b9 <malloc>
c000b396:	83 c4 0c             	add    esp,0xc
c000b399:	89 c3                	mov    ebx,eax
c000b39b:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000b3a1:	68 3c d9 01 c0       	push   0xc001d93c
c000b3a6:	50                   	push   eax
c000b3a7:	e8 a2 f6 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000b3ac:	58                   	pop    eax
c000b3ad:	5a                   	pop    edx
c000b3ae:	6a 01                	push   0x1
c000b3b0:	53                   	push   ebx
c000b3b1:	e8 58 f7 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000b3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3b9:	e8 ae f7 ff ff       	call   c000ab6c <File::close()>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	85 db                	test   ebx,ebx
c000b3c3:	74 0f                	je     c000b3d4 <User::loadClockSettings(int)+0x4c>
c000b3c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3ce:	83 c4 08             	add    esp,0x8
c000b3d1:	5b                   	pop    ebx
c000b3d2:	ff e0                	jmp    eax
c000b3d4:	83 c4 08             	add    esp,0x8
c000b3d7:	5b                   	pop    ebx
c000b3d8:	c3                   	ret    
c000b3d9:	90                   	nop

c000b3da <Clock::Clock(char const*)>:
c000b3da:	83 ec 0c             	sub    esp,0xc
c000b3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e1:	83 ec 08             	sub    esp,0x8
c000b3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e8:	50                   	push   eax
c000b3e9:	e8 c2 06 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	ba 64 d9 01 c0       	mov    edx,0xc001d964
c000b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fa:	89 10                	mov    DWORD PTR [eax],edx
c000b3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b400:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b40a:	90                   	nop
c000b40b:	83 c4 0c             	add    esp,0xc
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <Clock::~Clock()>:
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	ba 64 d9 01 c0       	mov    edx,0xc001d964
c000b418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41c:	89 10                	mov    DWORD PTR [eax],edx
c000b41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	50                   	push   eax
c000b426:	e8 ef 03 00 00       	call   c000b81a <Device::~Device()>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	90                   	nop
c000b42f:	83 c4 0c             	add    esp,0xc
c000b432:	c3                   	ret    
c000b433:	90                   	nop

c000b434 <Clock::~Clock()>:
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43e:	e8 cd ff ff ff       	call   c000b410 <Clock::~Clock()>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	68 58 01 00 00       	push   0x158
c000b44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b452:	e8 8b ef ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	c3                   	ret    

c000b45e <Clock::timeInSecondsLocal()>:
c000b45e:	53                   	push   ebx
c000b45f:	83 ec 14             	sub    esp,0x14
c000b462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b466:	8b 10                	mov    edx,DWORD PTR [eax]
c000b468:	50                   	push   eax
c000b469:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b46c:	0f b6 0d 98 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020598
c000b473:	03 0d 9c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002059c
c000b479:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b47f:	89 cb                	mov    ebx,ecx
c000b481:	c1 fb 1f             	sar    ebx,0x1f
c000b484:	01 c8                	add    eax,ecx
c000b486:	11 da                	adc    edx,ebx
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	31 c9                	xor    ecx,ecx
c000b48d:	80 3d 99 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020599,0x0
c000b494:	74 05                	je     c000b49b <Clock::timeInSecondsLocal()+0x3d>
c000b496:	b9 08 07 00 00       	mov    ecx,0x708
c000b49b:	31 db                	xor    ebx,ebx
c000b49d:	01 c8                	add    eax,ecx
c000b49f:	11 da                	adc    edx,ebx
c000b4a1:	83 c4 08             	add    esp,0x8
c000b4a4:	5b                   	pop    ebx
c000b4a5:	c3                   	ret    

c000b4a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4a6:	57                   	push   edi
c000b4a7:	56                   	push   esi
c000b4a8:	53                   	push   ebx
c000b4a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ba:	0f b6 05 98 05 02 c0 	movzx  eax,BYTE PTR ds:0xc0020598
c000b4c1:	03 05 9c 05 02 c0    	add    eax,DWORD PTR ds:0xc002059c
c000b4c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4cd:	99                   	cdq    
c000b4ce:	29 c6                	sub    esi,eax
c000b4d0:	19 d7                	sbb    edi,edx
c000b4d2:	89 f0                	mov    eax,esi
c000b4d4:	89 fa                	mov    edx,edi
c000b4d6:	31 f6                	xor    esi,esi
c000b4d8:	80 3d 99 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020599,0x0
c000b4df:	74 05                	je     c000b4e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4e1:	be 08 07 00 00       	mov    esi,0x708
c000b4e6:	31 ff                	xor    edi,edi
c000b4e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4ec:	29 f0                	sub    eax,esi
c000b4ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4f2:	19 fa                	sbb    edx,edi
c000b4f4:	89 d8                	mov    eax,ebx
c000b4f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4fa:	5b                   	pop    ebx
c000b4fb:	5e                   	pop    esi
c000b4fc:	5f                   	pop    edi
c000b4fd:	ff e0                	jmp    eax

c000b4ff <datetimeToSeconds(datetime_t)>:
c000b4ff:	55                   	push   ebp
c000b500:	57                   	push   edi
c000b501:	56                   	push   esi
c000b502:	53                   	push   ebx
c000b503:	83 ec 14             	sub    esp,0x14
c000b506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b50a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b50e:	89 d3                	mov    ebx,edx
c000b510:	0f b6 c6             	movzx  eax,dh
c000b513:	c1 eb 10             	shr    ebx,0x10
c000b516:	48                   	dec    eax
c000b517:	66 81 eb 6c 07       	sub    bx,0x76c
c000b51c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b520:	0f b6 f5             	movzx  esi,ch
c000b523:	89 cf                	mov    edi,ecx
c000b525:	6b f6 3c             	imul   esi,esi,0x3c
c000b528:	c1 ef 10             	shr    edi,0x10
c000b52b:	0f b6 c9             	movzx  ecx,cl
c000b52e:	89 f8                	mov    eax,edi
c000b530:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b536:	0f b6 f8             	movzx  edi,al
c000b539:	0f b6 d2             	movzx  edx,dl
c000b53c:	01 fe                	add    esi,edi
c000b53e:	01 f1                	add    ecx,esi
c000b540:	0f b7 f3             	movzx  esi,bx
c000b543:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b547:	c1 f9 1f             	sar    ecx,0x1f
c000b54a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b54f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b553:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b558:	8b 0c 8d a0 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2660]
c000b55f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b563:	76 29                	jbe    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b565:	f6 c3 03             	test   bl,0x3
c000b568:	75 24                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b56a:	31 d2                	xor    edx,edx
c000b56c:	bf 64 00 00 00       	mov    edi,0x64
c000b571:	89 d8                	mov    eax,ebx
c000b573:	66 f7 f7             	div    di
c000b576:	66 85 d2             	test   dx,dx
c000b579:	75 12                	jne    c000b58d <datetimeToSeconds(datetime_t)+0x8e>
c000b57b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b581:	bf 90 01 00 00       	mov    edi,0x190
c000b586:	99                   	cdq    
c000b587:	f7 ff                	idiv   edi
c000b589:	85 d2                	test   edx,edx
c000b58b:	75 01                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b58d:	41                   	inc    ecx
c000b58e:	66 83 fb 46          	cmp    bx,0x46
c000b592:	76 45                	jbe    c000b5d9 <datetimeToSeconds(datetime_t)+0xda>
c000b594:	bb 46 00 00 00       	mov    ebx,0x46
c000b599:	bf 64 00 00 00       	mov    edi,0x64
c000b59e:	bd 90 01 00 00       	mov    ebp,0x190
c000b5a3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5a8:	f6 c3 03             	test   bl,0x3
c000b5ab:	75 23                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5ad:	89 d8                	mov    eax,ebx
c000b5af:	99                   	cdq    
c000b5b0:	f7 ff                	idiv   edi
c000b5b2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5b7:	85 d2                	test   edx,edx
c000b5b9:	75 15                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5bb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5c1:	99                   	cdq    
c000b5c2:	f7 fd                	idiv   ebp
c000b5c4:	31 c0                	xor    eax,eax
c000b5c6:	85 d2                	test   edx,edx
c000b5c8:	0f 94 c0             	sete   al
c000b5cb:	05 6d 01 00 00       	add    eax,0x16d
c000b5d0:	01 c1                	add    ecx,eax
c000b5d2:	43                   	inc    ebx
c000b5d3:	39 f3                	cmp    ebx,esi
c000b5d5:	7c cc                	jl     c000b5a3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5d7:	eb 3b                	jmp    c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5d9:	74 39                	je     c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5db:	b8 45 00 00 00       	mov    eax,0x45
c000b5e0:	89 c2                	mov    edx,eax
c000b5e2:	83 e2 03             	and    edx,0x3
c000b5e5:	39 f0                	cmp    eax,esi
c000b5e7:	7e 13                	jle    c000b5fc <datetimeToSeconds(datetime_t)+0xfd>
c000b5e9:	85 d2                	test   edx,edx
c000b5eb:	0f 94 c2             	sete   dl
c000b5ee:	48                   	dec    eax
c000b5ef:	0f b6 d2             	movzx  edx,dl
c000b5f2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5f8:	29 d1                	sub    ecx,edx
c000b5fa:	eb e4                	jmp    c000b5e0 <datetimeToSeconds(datetime_t)+0xe1>
c000b5fc:	b8 6d 01 00 00       	mov    eax,0x16d
c000b601:	85 d2                	test   edx,edx
c000b603:	75 0d                	jne    c000b612 <datetimeToSeconds(datetime_t)+0x113>
c000b605:	31 c0                	xor    eax,eax
c000b607:	66 85 db             	test   bx,bx
c000b60a:	0f 95 c0             	setne  al
c000b60d:	05 6d 01 00 00       	add    eax,0x16d
c000b612:	29 c1                	sub    ecx,eax
c000b614:	b8 80 51 01 00       	mov    eax,0x15180
c000b619:	f7 e9                	imul   ecx
c000b61b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b61f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b623:	83 c4 14             	add    esp,0x14
c000b626:	5b                   	pop    ebx
c000b627:	5e                   	pop    esi
c000b628:	5f                   	pop    edi
c000b629:	5d                   	pop    ebp
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b633:	8b 06                	mov    eax,DWORD PTR [esi]
c000b635:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b63c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b640:	e8 ba fe ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c000b645:	59                   	pop    ecx
c000b646:	0f b6 0d 98 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020598
c000b64d:	5b                   	pop    ebx
c000b64e:	03 0d 9c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002059c
c000b654:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b65a:	89 cb                	mov    ebx,ecx
c000b65c:	c1 fb 1f             	sar    ebx,0x1f
c000b65f:	29 c8                	sub    eax,ecx
c000b661:	19 da                	sbb    edx,ebx
c000b663:	31 c9                	xor    ecx,ecx
c000b665:	80 3d 99 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020599,0x0
c000b66c:	74 05                	je     c000b673 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b66e:	b9 08 07 00 00       	mov    ecx,0x708
c000b673:	31 db                	xor    ebx,ebx
c000b675:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b679:	29 c8                	sub    eax,ecx
c000b67b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b67f:	19 da                	sbb    edx,ebx
c000b681:	89 f8                	mov    eax,edi
c000b683:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b687:	5b                   	pop    ebx
c000b688:	5e                   	pop    esi
c000b689:	5f                   	pop    edi
c000b68a:	ff e0                	jmp    eax

c000b68c <secondsToDatetime(unsigned long long)>:
c000b68c:	55                   	push   ebp
c000b68d:	57                   	push   edi
c000b68e:	56                   	push   esi
c000b68f:	53                   	push   ebx
c000b690:	83 ec 1c             	sub    esp,0x1c
c000b693:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b697:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b69b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b69f:	6a 00                	push   0x0
c000b6a1:	68 80 51 01 00       	push   0x15180
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	e8 a3 05 01 00       	call   c001bc50 <__udivdi3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ba:	6a 00                	push   0x0
c000b6bc:	68 80 51 01 00       	push   0x15180
c000b6c1:	55                   	push   ebp
c000b6c2:	57                   	push   edi
c000b6c3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6c8:	e8 83 06 01 00       	call   c001bd50 <__umoddi3>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	99                   	cdq    
c000b6d1:	f7 ff                	idiv   edi
c000b6d3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6d8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6db:	89 d0                	mov    eax,edx
c000b6dd:	99                   	cdq    
c000b6de:	f7 ff                	idiv   edi
c000b6e0:	85 db                	test   ebx,ebx
c000b6e2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6e5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6e8:	79 11                	jns    c000b6fb <secondsToDatetime(unsigned long long)+0x6f>
c000b6ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6ee:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6f4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6f9:	eb 07                	jmp    c000b702 <secondsToDatetime(unsigned long long)+0x76>
c000b6fb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b700:	89 d8                	mov    eax,ebx
c000b702:	bf b4 05 00 00       	mov    edi,0x5b4
c000b707:	99                   	cdq    
c000b708:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b70d:	f7 f9                	idiv   ecx
c000b70f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b718:	31 d2                	xor    edx,edx
c000b71a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b722:	01 c3                	add    ebx,eax
c000b724:	89 d8                	mov    eax,ebx
c000b726:	f7 f1                	div    ecx
c000b728:	31 d2                	xor    edx,edx
c000b72a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b72d:	89 d8                	mov    eax,ebx
c000b72f:	f7 f7                	div    edi
c000b731:	31 d2                	xor    edx,edx
c000b733:	29 c1                	sub    ecx,eax
c000b735:	89 d8                	mov    eax,ebx
c000b737:	f7 f5                	div    ebp
c000b739:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b73e:	29 c1                	sub    ecx,eax
c000b740:	31 d2                	xor    edx,edx
c000b742:	89 c8                	mov    eax,ecx
c000b744:	f7 f5                	div    ebp
c000b746:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b74f:	31 d2                	xor    edx,edx
c000b751:	89 c8                	mov    eax,ecx
c000b753:	f7 f5                	div    ebp
c000b755:	31 d2                	xor    edx,edx
c000b757:	01 c3                	add    ebx,eax
c000b759:	89 c8                	mov    eax,ecx
c000b75b:	f7 f7                	div    edi
c000b75d:	bf 99 00 00 00       	mov    edi,0x99
c000b762:	29 c3                	sub    ebx,eax
c000b764:	31 d2                	xor    edx,edx
c000b766:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b76e:	29 c3                	sub    ebx,eax
c000b770:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b773:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b776:	bb 05 00 00 00       	mov    ebx,0x5
c000b77b:	83 c1 02             	add    ecx,0x2
c000b77e:	89 c8                	mov    eax,ecx
c000b780:	f7 f7                	div    edi
c000b782:	31 d2                	xor    edx,edx
c000b784:	89 c7                	mov    edi,eax
c000b786:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b78c:	83 c0 02             	add    eax,0x2
c000b78f:	f7 f3                	div    ebx
c000b791:	89 eb                	mov    ebx,ebp
c000b793:	29 c3                	sub    ebx,eax
c000b795:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b79b:	88 1e                	mov    BYTE PTR [esi],bl
c000b79d:	19 c0                	sbb    eax,eax
c000b79f:	31 d2                	xor    edx,edx
c000b7a1:	83 e0 0c             	and    eax,0xc
c000b7a4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7a8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7b0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7b4:	83 f9 01             	cmp    ecx,0x1
c000b7b7:	0f 96 c2             	setbe  dl
c000b7ba:	41                   	inc    ecx
c000b7bb:	01 d0                	add    eax,edx
c000b7bd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7c0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7c4:	83 c4 1c             	add    esp,0x1c
c000b7c7:	89 f0                	mov    eax,esi
c000b7c9:	5b                   	pop    ebx
c000b7ca:	5e                   	pop    esi
c000b7cb:	5f                   	pop    edi
c000b7cc:	5d                   	pop    ebp
c000b7cd:	c2 04 00             	ret    0x4

c000b7d0 <Clock::timeInDatetimeLocal()>:
c000b7d0:	53                   	push   ebx
c000b7d1:	83 ec 14             	sub    esp,0x14
c000b7d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7dc:	e8 7d fc ff ff       	call   c000b45e <Clock::timeInSecondsLocal()>
c000b7e1:	83 c4 0c             	add    esp,0xc
c000b7e4:	52                   	push   edx
c000b7e5:	50                   	push   eax
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 a0 fe ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c000b7ec:	89 d8                	mov    eax,ebx
c000b7ee:	83 c4 14             	add    esp,0x14
c000b7f1:	5b                   	pop    ebx
c000b7f2:	c2 04 00             	ret    0x4
c000b7f5:	90                   	nop

c000b7f6 <Device::hibernate()>:
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <Device::wake()>:
c000b7f8:	c3                   	ret    
c000b7f9:	90                   	nop

c000b7fa <Device::detect()>:
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <Device::disableLegacy()>:
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Device::powerSaving(PowerSavingLevel)>:
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <DriverlessDevice::close(int, int, void*)>:
c000b800:	31 c0                	xor    eax,eax
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <DriverlessDevice::detect()>:
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <DriverlessDevice::open(int, int, void*)>:
c000b806:	83 ec 18             	sub    esp,0x18
c000b809:	68 d0 d9 01 c0       	push   0xc001d9d0
c000b80e:	e8 28 49 00 00       	call   c001013b <KePanic(char const*)>
c000b813:	83 c8 ff             	or     eax,0xffffffff
c000b816:	83 c4 1c             	add    esp,0x1c
c000b819:	c3                   	ret    

c000b81a <Device::~Device()>:
c000b81a:	ba 30 da 01 c0       	mov    edx,0xc001da30
c000b81f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b823:	89 10                	mov    DWORD PTR [eax],edx
c000b825:	90                   	nop
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <Device::~Device()>:
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b82f:	e8 e6 ff ff ff       	call   c000b81a <Device::~Device()>
c000b834:	83 c4 04             	add    esp,0x4
c000b837:	83 ec 08             	sub    esp,0x8
c000b83a:	68 58 01 00 00       	push   0x158
c000b83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b843:	e8 9a eb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Device::findAndLoadDriver()>:
c000b850:	c7 44 24 04 ee d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9ee
c000b858:	e9 7b ec ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000b85d:	90                   	nop

c000b85e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b85e:	57                   	push   edi
c000b85f:	b9 09 00 00 00       	mov    ecx,0x9
c000b864:	56                   	push   esi
c000b865:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b869:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b86d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b877:	81 c7 18 01 00 00    	add    edi,0x118
c000b87d:	fc                   	cld    
c000b87e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b880:	5e                   	pop    esi
c000b881:	5f                   	pop    edi
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Device::preOpenACPI(void*, char*, char*)>:
c000b884:	57                   	push   edi
c000b885:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b88a:	56                   	push   esi
c000b88b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b893:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b89d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8a3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8af:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8b4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8c0:	5e                   	pop    esi
c000b8c1:	5f                   	pop    edi
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8d5:	0f b6 c0             	movzx  eax,al
c000b8d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8e8:	5b                   	pop    ebx
c000b8e9:	e9 a6 05 00 00       	jmp    c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8ee <Device::getParent()>:
c000b8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b902:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b90b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b90f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b913:	e9 e8 06 00 00       	jmp    c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b918 <Device::addChild(Device*)>:
c000b918:	53                   	push   ebx
c000b919:	83 ec 08             	sub    esp,0x8
c000b91c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b924:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b92a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b930:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b932:	85 d2                	test   edx,edx
c000b934:	74 04                	je     c000b93a <Device::addChild(Device*)+0x22>
c000b936:	89 d3                	mov    ebx,edx
c000b938:	eb f6                	jmp    c000b930 <Device::addChild(Device*)+0x18>
c000b93a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b93d:	83 ec 0c             	sub    esp,0xc
c000b940:	6a 08                	push   0x8
c000b942:	e8 72 be ff ff       	call   c00077b9 <malloc>
c000b947:	89 03                	mov    DWORD PTR [ebx],eax
c000b949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b94f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b956:	83 c4 18             	add    esp,0x18
c000b959:	5b                   	pop    ebx
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::removeAllChildren()>:
c000b95c:	56                   	push   esi
c000b95d:	53                   	push   ebx
c000b95e:	52                   	push   edx
c000b95f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b963:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b969:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b96c:	74 17                	je     c000b985 <Device::removeAllChildren()+0x29>
c000b96e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b971:	85 c0                	test   eax,eax
c000b973:	74 0c                	je     c000b981 <Device::removeAllChildren()+0x25>
c000b975:	83 ec 0c             	sub    esp,0xc
c000b978:	8b 10                	mov    edx,DWORD PTR [eax]
c000b97a:	50                   	push   eax
c000b97b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b983:	eb e4                	jmp    c000b969 <Device::removeAllChildren()+0xd>
c000b985:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b98b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b991:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b99e:	58                   	pop    eax
c000b99f:	5b                   	pop    ebx
c000b9a0:	5e                   	pop    esi
c000b9a1:	c3                   	ret    

c000b9a2 <Device::hibernateAll()>:
c000b9a2:	53                   	push   ebx
c000b9a3:	83 ec 14             	sub    esp,0x14
c000b9a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9ac:	53                   	push   ebx
c000b9ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9b6:	83 c4 10             	add    esp,0x10
c000b9b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9bc:	74 0f                	je     c000b9cd <Device::hibernateAll()+0x2b>
c000b9be:	83 ec 0c             	sub    esp,0xc
c000b9c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9c4:	e8 d9 ff ff ff       	call   c000b9a2 <Device::hibernateAll()>
c000b9c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9cb:	eb e9                	jmp    c000b9b6 <Device::hibernateAll()+0x14>
c000b9cd:	83 c4 08             	add    esp,0x8
c000b9d0:	5b                   	pop    ebx
c000b9d1:	c3                   	ret    

c000b9d2 <Device::wakeAll()>:
c000b9d2:	53                   	push   ebx
c000b9d3:	83 ec 14             	sub    esp,0x14
c000b9d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9dc:	53                   	push   ebx
c000b9dd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9ec:	74 0f                	je     c000b9fd <Device::wakeAll()+0x2b>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9f4:	e8 d9 ff ff ff       	call   c000b9d2 <Device::wakeAll()>
c000b9f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9fb:	eb e9                	jmp    c000b9e6 <Device::wakeAll()+0x14>
c000b9fd:	83 c4 08             	add    esp,0x8
c000ba00:	5b                   	pop    ebx
c000ba01:	c3                   	ret    

c000ba02 <Device::detectAll()>:
c000ba02:	53                   	push   ebx
c000ba03:	83 ec 14             	sub    esp,0x14
c000ba06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba0c:	53                   	push   ebx
c000ba0d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1c:	74 0f                	je     c000ba2d <Device::detectAll()+0x2b>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba24:	e8 d9 ff ff ff       	call   c000ba02 <Device::detectAll()>
c000ba29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2b:	eb e9                	jmp    c000ba16 <Device::detectAll()+0x14>
c000ba2d:	83 c4 08             	add    esp,0x8
c000ba30:	5b                   	pop    ebx
c000ba31:	c3                   	ret    

c000ba32 <Device::disableLegacyAll()>:
c000ba32:	c3                   	ret    
c000ba33:	90                   	nop

c000ba34 <Device::loadDriversForAll()>:
c000ba34:	c3                   	ret    
c000ba35:	90                   	nop

c000ba36 <Device::closeAll()>:
c000ba36:	53                   	push   ebx
c000ba37:	83 ec 08             	sub    esp,0x8
c000ba3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba40:	6a 00                	push   0x0
c000ba42:	6a 00                	push   0x0
c000ba44:	6a 00                	push   0x0
c000ba46:	53                   	push   ebx
c000ba47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba56:	74 0f                	je     c000ba67 <Device::closeAll()+0x31>
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba5e:	e8 d3 ff ff ff       	call   c000ba36 <Device::closeAll()>
c000ba63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba65:	eb e9                	jmp    c000ba50 <Device::closeAll()+0x1a>
c000ba67:	83 c4 08             	add    esp,0x8
c000ba6a:	5b                   	pop    ebx
c000ba6b:	c3                   	ret    

c000ba6c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	83 ec 0c             	sub    esp,0xc
c000ba71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba79:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba7b:	56                   	push   esi
c000ba7c:	53                   	push   ebx
c000ba7d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 0f                	je     c000ba9d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba8e:	52                   	push   edx
c000ba8f:	52                   	push   edx
c000ba90:	56                   	push   esi
c000ba91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba94:	e8 d3 ff ff ff       	call   c000ba6c <Device::powerSavingAll(PowerSavingLevel)>
c000ba99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9b:	eb e9                	jmp    c000ba86 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba9d:	58                   	pop    eax
c000ba9e:	5b                   	pop    ebx
c000ba9f:	5e                   	pop    esi
c000baa0:	c3                   	ret    
c000baa1:	90                   	nop

c000baa2 <Device::setName(char const*)>:
c000baa2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baaa:	e9 51 4b ff ff       	jmp    c0000600 <strcpy>
c000baaf:	90                   	nop

c000bab0 <Device::Device(char const*)>:
c000bab0:	83 ec 1c             	sub    esp,0x1c
c000bab3:	ba 30 da 01 c0       	mov    edx,0xc001da30
c000bab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000babc:	89 10                	mov    DWORD PTR [eax],edx
c000babe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bade:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000baf6:	83 ec 08             	sub    esp,0x8
c000baf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb01:	e8 9c ff ff ff       	call   c000baa2 <Device::setName(char const*)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb18:	e8 9c bc ff ff       	call   c00077b9 <malloc>
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb31:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb67:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bba6:	90                   	nop
c000bba7:	83 c4 1c             	add    esp,0x1c
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Device::getName()>:
c000bbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb0:	05 d0 00 00 00       	add    eax,0xd0
c000bbb5:	c3                   	ret    

c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbb6:	83 ec 0c             	sub    esp,0xc
c000bbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbbd:	83 ec 08             	sub    esp,0x8
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	50                   	push   eax
c000bbc5:	e8 e6 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	ba 5c da 01 c0       	mov    edx,0xc001da5c
c000bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd6:	89 10                	mov    DWORD PTR [eax],edx
c000bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbe6:	90                   	nop
c000bbe7:	83 c4 0c             	add    esp,0xc
c000bbea:	c3                   	ret    
c000bbeb:	90                   	nop

c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbec:	57                   	push   edi
c000bbed:	56                   	push   esi
c000bbee:	53                   	push   ebx
c000bbef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbfb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc01:	75 0c                	jne    c000bc0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc03:	52                   	push   edx
c000bc04:	52                   	push   edx
c000bc05:	53                   	push   ebx
c000bc06:	56                   	push   esi
c000bc07:	e8 f6 04 01 00       	call   c001c102 <LinkedList<Device>::addElement(Device*)>
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc18:	74 12                	je     c000bc2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc1a:	50                   	push   eax
c000bc1b:	57                   	push   edi
c000bc1c:	56                   	push   esi
c000bc1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc20:	e8 c7 ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc27:	83 c4 10             	add    esp,0x10
c000bc2a:	eb e9                	jmp    c000bc15 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc2c:	5b                   	pop    ebx
c000bc2d:	5e                   	pop    esi
c000bc2e:	5f                   	pop    edi
c000bc2f:	c3                   	ret    

c000bc30 <getDevicesOfType(DeviceType)>:
c000bc30:	53                   	push   ebx
c000bc31:	83 ec 14             	sub    esp,0x14
c000bc34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc38:	53                   	push   ebx
c000bc39:	e8 a0 05 01 00       	call   c001c1de <LinkedList<Device>::LinkedList()>
c000bc3e:	83 c4 0c             	add    esp,0xc
c000bc41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc45:	53                   	push   ebx
c000bc46:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c000bc4c:	e8 9b ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc51:	89 d8                	mov    eax,ebx
c000bc53:	83 c4 18             	add    esp,0x18
c000bc56:	5b                   	pop    ebx
c000bc57:	c2 04 00             	ret    0x4
c000bc5a:	66 90                	xchg   ax,ax

c000bc5c <HardDiskController::HardDiskController(char const*)>:
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc63:	83 ec 08             	sub    esp,0x8
c000bc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6a:	50                   	push   eax
c000bc6b:	e8 40 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bc70:	83 c4 10             	add    esp,0x10
c000bc73:	ba 88 da 01 c0       	mov    edx,0xc001da88
c000bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7c:	89 10                	mov    DWORD PTR [eax],edx
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc8c:	90                   	nop
c000bc8d:	83 c4 0c             	add    esp,0xc
c000bc90:	c3                   	ret    
c000bc91:	90                   	nop
c000bc92:	66 90                	xchg   ax,ax

c000bc94 <HardDiskController::~HardDiskController()>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	ba 88 da 01 c0       	mov    edx,0xc001da88
c000bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca0:	89 10                	mov    DWORD PTR [eax],edx
c000bca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca6:	83 ec 0c             	sub    esp,0xc
c000bca9:	50                   	push   eax
c000bcaa:	e8 6b fb ff ff       	call   c000b81a <Device::~Device()>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	90                   	nop
c000bcb3:	83 c4 0c             	add    esp,0xc
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <HardDiskController::~HardDiskController()>:
c000bcb8:	83 ec 0c             	sub    esp,0xc
c000bcbb:	83 ec 0c             	sub    esp,0xc
c000bcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc2:	e8 cd ff ff ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c000bcc7:	83 c4 10             	add    esp,0x10
c000bcca:	83 ec 08             	sub    esp,0x8
c000bccd:	68 58 01 00 00       	push   0x158
c000bcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcd6:	e8 07 e7 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bcdb:	83 c4 10             	add    esp,0x10
c000bcde:	83 c4 0c             	add    esp,0xc
c000bce1:	c3                   	ret    

c000bce2 <PhysicalDisk::eject()>:
c000bce2:	83 c8 ff             	or     eax,0xffffffff
c000bce5:	c3                   	ret    

c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bced:	83 ec 08             	sub    esp,0x8
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	50                   	push   eax
c000bcf5:	e8 b6 fd ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	ba b4 da 01 c0       	mov    edx,0xc001dab4
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	89 10                	mov    DWORD PTR [eax],edx
c000bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd17:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd22:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd48:	90                   	nop
c000bd49:	83 c4 0c             	add    esp,0xc
c000bd4c:	c3                   	ret    
c000bd4d:	90                   	nop

c000bd4e <PhysicalDisk::startCache()>:
c000bd4e:	56                   	push   esi
c000bd4f:	53                   	push   ebx
c000bd50:	83 ec 10             	sub    esp,0x10
c000bd53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd57:	6a 44                	push   0x44
c000bd59:	e8 5b ba ff ff       	call   c00077b9 <malloc>
c000bd5e:	89 c6                	mov    esi,eax
c000bd60:	58                   	pop    eax
c000bd61:	5a                   	pop    edx
c000bd62:	53                   	push   ebx
c000bd63:	56                   	push   esi
c000bd64:	e8 ab 15 00 00       	call   c000d314 <VCache::VCache(PhysicalDisk*)>
c000bd69:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd6f:	83 c4 14             	add    esp,0x14
c000bd72:	5b                   	pop    ebx
c000bd73:	5e                   	pop    esi
c000bd74:	c3                   	ret    
c000bd75:	90                   	nop

c000bd76 <PhysicalDisk::~PhysicalDisk()>:
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	ba b4 da 01 c0       	mov    edx,0xc001dab4
c000bd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd82:	89 10                	mov    DWORD PTR [eax],edx
c000bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	50                   	push   eax
c000bd8c:	e8 89 fa ff ff       	call   c000b81a <Device::~Device()>
c000bd91:	83 c4 10             	add    esp,0x10
c000bd94:	90                   	nop
c000bd95:	83 c4 0c             	add    esp,0xc
c000bd98:	c3                   	ret    
c000bd99:	90                   	nop

c000bd9a <PhysicalDisk::~PhysicalDisk()>:
c000bd9a:	83 ec 0c             	sub    esp,0xc
c000bd9d:	83 ec 0c             	sub    esp,0xc
c000bda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda4:	e8 cd ff ff ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c000bda9:	83 c4 10             	add    esp,0x10
c000bdac:	83 ec 08             	sub    esp,0x8
c000bdaf:	68 6c 01 00 00       	push   0x16c
c000bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb8:	e8 25 e6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	c3                   	ret    

c000bdc4 <int_handler>:
c000bdc4:	55                   	push   ebp
c000bdc5:	57                   	push   edi
c000bdc6:	56                   	push   esi
c000bdc7:	53                   	push   ebx
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdcf:	80 3d 18 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f18,0x0
c000bdd6:	74 0b                	je     c000bde3 <int_handler+0x1f>
c000bdd8:	fa                   	cli    
c000bdd9:	f4                   	hlt    
c000bdda:	80 3d 18 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f18,0x0
c000bde1:	75 f5                	jne    c000bdd8 <int_handler+0x14>
c000bde3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bde6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bde9:	83 f8 17             	cmp    eax,0x17
c000bdec:	76 3e                	jbe    c000be2c <int_handler+0x68>
c000bdee:	c1 e6 04             	shl    esi,0x4
c000bdf1:	31 db                	xor    ebx,ebx
c000bdf3:	8d ae a0 15 02 c0    	lea    ebp,[esi-0x3ffdea60]
c000bdf9:	81 c6 a0 05 02 c0    	add    esi,0xc00205a0
c000bdff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be03:	85 c0                	test   eax,eax
c000be05:	74 13                	je     c000be1a <int_handler+0x56>
c000be07:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be0a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be0e:	74 2a                	je     c000be3a <int_handler+0x76>
c000be10:	83 ec 08             	sub    esp,0x8
c000be13:	52                   	push   edx
c000be14:	57                   	push   edi
c000be15:	ff d0                	call   eax
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	43                   	inc    ebx
c000be1b:	83 fb 04             	cmp    ebx,0x4
c000be1e:	75 df                	jne    c000bdff <int_handler+0x3b>
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	31 c0                	xor    eax,eax
c000be25:	5b                   	pop    ebx
c000be26:	31 d2                	xor    edx,edx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	50                   	push   eax
c000be30:	e8 06 96 00 00       	call   c001543b <HalEndOfInterrupt(int)>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	eb b4                	jmp    c000bdee <int_handler+0x2a>
c000be3a:	83 ec 08             	sub    esp,0x8
c000be3d:	52                   	push   edx
c000be3e:	57                   	push   edi
c000be3f:	ff d0                	call   eax
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	83 c4 0c             	add    esp,0xc
c000be47:	5b                   	pop    ebx
c000be48:	5e                   	pop    esi
c000be49:	5f                   	pop    edi
c000be4a:	5d                   	pop    ebp
c000be4b:	c3                   	ret    

c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be4c:	56                   	push   esi
c000be4d:	31 c0                	xor    eax,eax
c000be4f:	53                   	push   ebx
c000be50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be58:	89 ca                	mov    edx,ecx
c000be5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be5e:	c1 e2 04             	shl    edx,0x4
c000be61:	83 bc 82 a0 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdea60],0x0
c000be69:	74 15                	je     c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be6b:	40                   	inc    eax
c000be6c:	83 f8 04             	cmp    eax,0x4
c000be6f:	75 f0                	jne    c000be61 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be71:	c7 44 24 0c e4 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dae4
c000be79:	5b                   	pop    ebx
c000be7a:	5e                   	pop    esi
c000be7b:	e9 bb 42 00 00       	jmp    c001013b <KePanic(char const*)>
c000be80:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be83:	89 1c 85 a0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea60],ebx
c000be8a:	89 34 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],esi
c000be91:	5b                   	pop    ebx
c000be92:	5e                   	pop    esi
c000be93:	c3                   	ret    

c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be94:	57                   	push   edi
c000be95:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000be9b:	56                   	push   esi
c000be9c:	53                   	push   ebx
c000be9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bea1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bea5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000beac:	74 5b                	je     c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000beae:	89 c7                	mov    edi,eax
c000beb0:	84 c0                	test   al,al
c000beb2:	74 24                	je     c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000beb4:	83 fe 0f             	cmp    esi,0xf
c000beb7:	0f 8f d9 00 00 00    	jg     c000bf96 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bebd:	8a 86 c0 f1 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0e40]
c000bec3:	25 ff 00 00 00       	and    eax,0xff
c000bec8:	66 8b bc 00 40 2d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd2c0]
c000bed0:	89 c6                	mov    esi,eax
c000bed2:	66 d1 ef             	shr    di,1
c000bed5:	83 e7 01             	and    edi,0x1
c000bed8:	83 ec 08             	sub    esp,0x8
c000bedb:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c000bee0:	31 db                	xor    ebx,ebx
c000bee2:	50                   	push   eax
c000bee3:	68 f1 da 01 c0       	push   0xc001daf1
c000bee8:	e8 eb e5 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c000bef5:	85 c0                	test   eax,eax
c000bef7:	7f 51                	jg     c000bf4a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bef9:	83 ec 0c             	sub    esp,0xc
c000befc:	68 08 db 01 c0       	push   0xc001db08
c000bf01:	e8 35 42 00 00       	call   c001013b <KePanic(char const*)>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf0c:	31 d2                	xor    edx,edx
c000bf0e:	89 c8                	mov    eax,ecx
c000bf10:	c1 e0 04             	shl    eax,0x4
c000bf13:	8b 9c 90 a0 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdea60]
c000bf1a:	85 db                	test   ebx,ebx
c000bf1c:	0f 84 8b 00 00 00    	je     c000bfad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf22:	42                   	inc    edx
c000bf23:	83 fa 04             	cmp    edx,0x4
c000bf26:	75 eb                	jne    c000bf13 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf28:	83 ec 0c             	sub    esp,0xc
c000bf2b:	68 5c db 01 c0       	push   0xc001db5c
c000bf30:	e8 06 42 00 00       	call   c001013b <KePanic(char const*)>
c000bf35:	83 c4 10             	add    esp,0x10
c000bf38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf3d:	5b                   	pop    ebx
c000bf3e:	5e                   	pop    esi
c000bf3f:	5f                   	pop    edi
c000bf40:	c3                   	ret    
c000bf41:	43                   	inc    ebx
c000bf42:	39 1d 40 41 02 c0    	cmp    DWORD PTR ds:0xc0024140,ebx
c000bf48:	7e af                	jle    c000bef9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf4a:	83 ec 08             	sub    esp,0x8
c000bf4d:	8b 04 9d 60 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbea0]
c000bf54:	56                   	push   esi
c000bf55:	50                   	push   eax
c000bf56:	e8 cd f1 00 00       	call   c001b128 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	84 c0                	test   al,al
c000bf60:	74 df                	je     c000bf41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf62:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf68:	50                   	push   eax
c000bf69:	8d 46 20             	lea    eax,[esi+0x20]
c000bf6c:	57                   	push   edi
c000bf6d:	25 ff 00 00 00       	and    eax,0xff
c000bf72:	6a 00                	push   0x0
c000bf74:	50                   	push   eax
c000bf75:	89 f0                	mov    eax,esi
c000bf77:	6a 00                	push   0x0
c000bf79:	25 ff 00 00 00       	and    eax,0xff
c000bf7e:	6a 00                	push   0x0
c000bf80:	50                   	push   eax
c000bf81:	8b 04 9d 60 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbea0]
c000bf88:	50                   	push   eax
c000bf89:	e8 14 f3 00 00       	call   c001b2a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf8e:	83 c4 20             	add    esp,0x20
c000bf91:	e9 73 ff ff ff       	jmp    c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf96:	83 ec 0c             	sub    esp,0xc
c000bf99:	31 ff                	xor    edi,edi
c000bf9b:	68 24 db 01 c0       	push   0xc001db24
c000bfa0:	e8 96 41 00 00       	call   c001013b <KePanic(char const*)>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	e9 2b ff ff ff       	jmp    c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfad:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfb4:	89 14 85 a0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea60],edx
c000bfbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfbf:	5b                   	pop    ebx
c000bfc0:	89 14 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],edx
c000bfc7:	89 f0                	mov    eax,esi
c000bfc9:	5e                   	pop    esi
c000bfca:	5f                   	pop    edi
c000bfcb:	c3                   	ret    

c000bfcc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfd4:	c1 e0 04             	shl    eax,0x4
c000bfd7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfda:	39 88 a0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea60],ecx
c000bfe0:	74 08                	je     c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfe2:	83 c0 04             	add    eax,0x4
c000bfe5:	39 d0                	cmp    eax,edx
c000bfe7:	75 f1                	jne    c000bfda <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bfe9:	c3                   	ret    
c000bfea:	c7 80 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea60],0x0
c000bff4:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000bffe:	eb e2                	jmp    c000bfe2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c000:	53                   	push   ebx
c000c001:	83 ec 08             	sub    esp,0x8
c000c004:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c008:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c00d:	74 0e                	je     c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c00f:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000c014:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c01b:	75 37                	jne    c000c054 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c021:	83 c0 20             	add    eax,0x20
c000c024:	c1 e0 04             	shl    eax,0x4
c000c027:	8d 50 10             	lea    edx,[eax+0x10]
c000c02a:	39 98 a0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea60],ebx
c000c030:	74 0c                	je     c000c03e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c032:	83 c0 04             	add    eax,0x4
c000c035:	39 d0                	cmp    eax,edx
c000c037:	75 f1                	jne    c000c02a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c039:	83 c4 08             	add    esp,0x8
c000c03c:	5b                   	pop    ebx
c000c03d:	c3                   	ret    
c000c03e:	c7 80 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea60],0x0
c000c048:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000c052:	eb de                	jmp    c000c032 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c054:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c059:	7f 12                	jg     c000c06d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c05b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c05f:	31 c0                	xor    eax,eax
c000c061:	8a 81 c0 f1 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0e40]
c000c067:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c06b:	eb b0                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c06d:	83 ec 0c             	sub    esp,0xc
c000c070:	68 15 db 01 c0       	push   0xc001db15
c000c075:	e8 c1 40 00 00       	call   c001013b <KePanic(char const*)>
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	eb 9e                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c07f <setupINTS()>:
c000c07f:	31 c0                	xor    eax,eax
c000c081:	c7 80 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea60],0x0
c000c08b:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000c095:	c7 80 a4 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea5c],0x0
c000c09f:	c7 80 a4 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa5c],0x0
c000c0a9:	c7 80 a8 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea58],0x0
c000c0b3:	c7 80 a8 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa58],0x0
c000c0bd:	c7 80 ac 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea54],0x0
c000c0c7:	c7 80 ac 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa54],0x0
c000c0d1:	83 c0 10             	add    eax,0x10
c000c0d4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0d9:	75 a6                	jne    c000c081 <setupINTS()+0x2>
c000c0db:	c3                   	ret    

c000c0dc <convertLegacyIRQNumber(int)>:
c000c0dc:	83 ec 0c             	sub    esp,0xc
c000c0df:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0f0:	74 0f                	je     c000c101 <convertLegacyIRQNumber(int)+0x25>
c000c0f2:	83 f8 0f             	cmp    eax,0xf
c000c0f5:	7f 0e                	jg     c000c105 <convertLegacyIRQNumber(int)+0x29>
c000c0f7:	31 c9                	xor    ecx,ecx
c000c0f9:	8a 88 c0 f1 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0e40]
c000c0ff:	89 c8                	mov    eax,ecx
c000c101:	83 c4 0c             	add    esp,0xc
c000c104:	c3                   	ret    
c000c105:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c109:	83 ec 0c             	sub    esp,0xc
c000c10c:	68 24 db 01 c0       	push   0xc001db24
c000c111:	e8 25 40 00 00       	call   c001013b <KePanic(char const*)>
c000c116:	83 c4 10             	add    esp,0x10
c000c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11d:	83 c4 0c             	add    esp,0xc
c000c120:	c3                   	ret    
c000c121:	90                   	nop

c000c122 <startGUI(void*)>:
c000c122:	55                   	push   ebp
c000c123:	89 e5                	mov    ebp,esp
c000c125:	53                   	push   ebx
c000c126:	83 ec 04             	sub    esp,0x4
c000c129:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c12e:	48                   	dec    eax
c000c12f:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c134:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c139:	85 c0                	test   eax,eax
c000c13b:	75 01                	jne    c000c13e <startGUI(void*)+0x1c>
c000c13d:	fb                   	sti    
c000c13e:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	6a 01                	push   0x1
c000c149:	68 81 db 01 c0       	push   0xc001db81
c000c14e:	e8 07 68 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	83 ec 08             	sub    esp,0x8
c000c159:	53                   	push   ebx
c000c15a:	50                   	push   eax
c000c15b:	e8 2b 6a 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c169:	83 ec 08             	sub    esp,0x8
c000c16c:	6a 01                	push   0x1
c000c16e:	68 9b db 01 c0       	push   0xc001db9b
c000c173:	e8 e2 67 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000c178:	83 c4 10             	add    esp,0x10
c000c17b:	83 ec 08             	sub    esp,0x8
c000c17e:	53                   	push   ebx
c000c17f:	50                   	push   eax
c000c180:	e8 06 6a 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000c185:	83 c4 10             	add    esp,0x10
c000c188:	90                   	nop
c000c189:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c18c:	c9                   	leave  
c000c18d:	c3                   	ret    

c000c18e <startGUIVESA(void*)>:
c000c18e:	55                   	push   ebp
c000c18f:	89 e5                	mov    ebp,esp
c000c191:	53                   	push   ebx
c000c192:	83 ec 04             	sub    esp,0x4
c000c195:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c19a:	48                   	dec    eax
c000c19b:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c1a0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c1a5:	85 c0                	test   eax,eax
c000c1a7:	75 01                	jne    c000c1aa <startGUIVESA(void*)+0x1c>
c000c1a9:	fb                   	sti    
c000c1aa:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c1b0:	83 ec 08             	sub    esp,0x8
c000c1b3:	6a 01                	push   0x1
c000c1b5:	68 b9 db 01 c0       	push   0xc001dbb9
c000c1ba:	e8 9b 67 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000c1bf:	83 c4 10             	add    esp,0x10
c000c1c2:	83 ec 08             	sub    esp,0x8
c000c1c5:	53                   	push   ebx
c000c1c6:	50                   	push   eax
c000c1c7:	e8 bf 69 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000c1cc:	83 c4 10             	add    esp,0x10
c000c1cf:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c1d5:	83 ec 08             	sub    esp,0x8
c000c1d8:	6a 01                	push   0x1
c000c1da:	68 9b db 01 c0       	push   0xc001db9b
c000c1df:	e8 76 67 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	83 ec 08             	sub    esp,0x8
c000c1ea:	53                   	push   ebx
c000c1eb:	50                   	push   eax
c000c1ec:	e8 9a 69 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	90                   	nop
c000c1f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1f8:	c9                   	leave  
c000c1f9:	c3                   	ret    

c000c1fa <sendKeyToTerminal(unsigned char)>:
c000c1fa:	55                   	push   ebp
c000c1fb:	89 e5                	mov    ebp,esp
c000c1fd:	83 ec 28             	sub    esp,0x28
c000c200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c203:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c206:	8b 15 e4 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204e4
c000c20c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c20f:	25 ff 00 00 00       	and    eax,0xff
c000c214:	83 ec 08             	sub    esp,0x8
c000c217:	50                   	push   eax
c000c218:	52                   	push   edx
c000c219:	e8 28 c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c225:	0f 85 8f 00 00 00    	jne    c000c2ba <sendKeyToTerminal(unsigned char)+0xc0>
c000c22b:	fa                   	cli    
c000c22c:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c231:	40                   	inc    eax
c000c232:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c237:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000c23c:	40                   	inc    eax
c000c23d:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000c242:	a1 a0 25 02 c0       	mov    eax,ds:0xc00225a0
c000c247:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c24a:	c7 05 a0 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00225a0,0x0
c000c254:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c258:	74 1f                	je     c000c279 <sendKeyToTerminal(unsigned char)+0x7f>
c000c25a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c25d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c260:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c263:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c266:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c269:	83 ec 0c             	sub    esp,0xc
c000c26c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c26f:	e8 9c 75 00 00       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c000c274:	83 c4 10             	add    esp,0x10
c000c277:	eb db                	jmp    c000c254 <sendKeyToTerminal(unsigned char)+0x5a>
c000c279:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000c27e:	48                   	dec    eax
c000c27f:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000c284:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000c289:	85 c0                	test   eax,eax
c000c28b:	75 18                	jne    c000c2a5 <sendKeyToTerminal(unsigned char)+0xab>
c000c28d:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c000c292:	85 c0                	test   eax,eax
c000c294:	74 0f                	je     c000c2a5 <sendKeyToTerminal(unsigned char)+0xab>
c000c296:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c000c2a0:	e8 a7 70 00 00       	call   c001334c <schedule()>
c000c2a5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c2aa:	48                   	dec    eax
c000c2ab:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c2b0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c2b5:	85 c0                	test   eax,eax
c000c2b7:	75 01                	jne    c000c2ba <sendKeyToTerminal(unsigned char)+0xc0>
c000c2b9:	fb                   	sti    
c000c2ba:	90                   	nop
c000c2bb:	c9                   	leave  
c000c2bc:	c3                   	ret    

c000c2bd <sendKeyboardToken(KeyboardToken)>:
c000c2bd:	55                   	push   ebp
c000c2be:	89 e5                	mov    ebp,esp
c000c2c0:	83 ec 18             	sub    esp,0x18
c000c2c3:	e8 c3 3e 00 00       	call   c001018b <Krnl::userIOReceived()>
c000c2c8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ce:	25 ff ff 00 00       	and    eax,0xffff
c000c2d3:	83 f2 01             	xor    edx,0x1
c000c2d6:	88 90 c0 25 02 c0    	mov    BYTE PTR [eax-0x3ffdda40],dl
c000c2dc:	a1 a8 25 02 c0       	mov    eax,ds:0xc00225a8
c000c2e1:	85 c0                	test   eax,eax
c000c2e3:	74 24                	je     c000c309 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2e5:	8b 0d a8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225a8
c000c2eb:	83 ec 04             	sub    esp,0x4
c000c2ee:	68 c0 25 02 c0       	push   0xc00225c0
c000c2f3:	83 ec 08             	sub    esp,0x8
c000c2f6:	89 e2                	mov    edx,esp
c000c2f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2fb:	89 02                	mov    DWORD PTR [edx],eax
c000c2fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c300:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c304:	ff d1                	call   ecx
c000c306:	83 c4 10             	add    esp,0x10
c000c309:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c30d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c310:	a0 c8 29 02 c0       	mov    al,ds:0xc00229c8
c000c315:	38 c2                	cmp    dl,al
c000c317:	74 1e                	je     c000c337 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c319:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c31c:	a2 c8 29 02 c0       	mov    ds:0xc00229c8,al
c000c321:	a0 c8 29 02 c0       	mov    al,ds:0xc00229c8
c000c326:	25 ff 00 00 00       	and    eax,0xff
c000c32b:	83 ec 0c             	sub    esp,0xc
c000c32e:	50                   	push   eax
c000c32f:	e8 64 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c33a:	84 c0                	test   al,al
c000c33c:	0f 84 ae 00 00 00    	je     c000c3f0 <sendKeyboardToken(KeyboardToken)+0x133>
c000c342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c345:	66 3d 10 03          	cmp    ax,0x310
c000c349:	75 06                	jne    c000c351 <sendKeyboardToken(KeyboardToken)+0x94>
c000c34b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c354:	66 3d 11 03          	cmp    ax,0x311
c000c358:	75 06                	jne    c000c360 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c35a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c363:	66 3d 12 03          	cmp    ax,0x312
c000c367:	75 06                	jne    c000c36f <sendKeyboardToken(KeyboardToken)+0xb2>
c000c369:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c372:	66 3d 13 03          	cmp    ax,0x313
c000c376:	75 06                	jne    c000c37e <sendKeyboardToken(KeyboardToken)+0xc1>
c000c378:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c37e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c381:	66 3d 14 03          	cmp    ax,0x314
c000c385:	75 06                	jne    c000c38d <sendKeyboardToken(KeyboardToken)+0xd0>
c000c387:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c390:	66 3d 15 03          	cmp    ax,0x315
c000c394:	75 06                	jne    c000c39c <sendKeyboardToken(KeyboardToken)+0xdf>
c000c396:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c39f:	66 3d 16 03          	cmp    ax,0x316
c000c3a3:	75 06                	jne    c000c3ab <sendKeyboardToken(KeyboardToken)+0xee>
c000c3a5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ae:	66 3d 17 03          	cmp    ax,0x317
c000c3b2:	75 06                	jne    c000c3ba <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3b4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bd:	66 3d 18 03          	cmp    ax,0x318
c000c3c1:	75 06                	jne    c000c3c9 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3c3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3cc:	66 3d 19 03          	cmp    ax,0x319
c000c3d0:	75 06                	jne    c000c3d8 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3d2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3db:	66 3d 1a 03          	cmp    ax,0x31a
c000c3df:	0f 85 c9 00 00 00    	jne    c000c4ae <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3e5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3eb:	e9 be 00 00 00       	jmp    c000c4ae <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f3:	66 3d 10 03          	cmp    ax,0x310
c000c3f7:	75 0a                	jne    c000c403 <sendKeyboardToken(KeyboardToken)+0x146>
c000c3f9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c3ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c406:	66 3d 11 03          	cmp    ax,0x311
c000c40a:	75 0a                	jne    c000c416 <sendKeyboardToken(KeyboardToken)+0x159>
c000c40c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c412:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c419:	66 3d 12 03          	cmp    ax,0x312
c000c41d:	75 0a                	jne    c000c429 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c41f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c425:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42c:	66 3d 13 03          	cmp    ax,0x313
c000c430:	75 0a                	jne    c000c43c <sendKeyboardToken(KeyboardToken)+0x17f>
c000c432:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c438:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43f:	66 3d 14 03          	cmp    ax,0x314
c000c443:	75 0a                	jne    c000c44f <sendKeyboardToken(KeyboardToken)+0x192>
c000c445:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c44b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c44f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c452:	66 3d 15 03          	cmp    ax,0x315
c000c456:	75 0a                	jne    c000c462 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c458:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c45e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c465:	66 3d 16 03          	cmp    ax,0x316
c000c469:	75 0a                	jne    c000c475 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c46b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c471:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c478:	66 3d 17 03          	cmp    ax,0x317
c000c47c:	75 0a                	jne    c000c488 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c47e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c484:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48b:	66 3d 18 03          	cmp    ax,0x318
c000c48f:	75 0a                	jne    c000c49b <sendKeyboardToken(KeyboardToken)+0x1de>
c000c491:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c497:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49e:	66 3d 19 03          	cmp    ax,0x319
c000c4a2:	75 0a                	jne    c000c4ae <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4a4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b1:	66 3d 00 02          	cmp    ax,0x200
c000c4b5:	75 2c                	jne    c000c4e3 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4b7:	a0 c0 29 02 c0       	mov    al,ds:0xc00229c0
c000c4bc:	83 f0 01             	xor    eax,0x1
c000c4bf:	84 c0                	test   al,al
c000c4c1:	74 20                	je     c000c4e3 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4c3:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000c4c8:	6a 01                	push   0x1
c000c4ca:	6a 00                	push   0x0
c000c4cc:	68 22 c1 00 c0       	push   0xc000c122
c000c4d1:	50                   	push   eax
c000c4d2:	e8 55 6c 00 00       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c000c4d7:	83 c4 10             	add    esp,0x10
c000c4da:	c6 05 c0 29 02 c0 01 	mov    BYTE PTR ds:0xc00229c0,0x1
c000c4e1:	eb 33                	jmp    c000c516 <sendKeyboardToken(KeyboardToken)+0x259>
c000c4e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e6:	66 3d 01 02          	cmp    ax,0x201
c000c4ea:	75 2a                	jne    c000c516 <sendKeyboardToken(KeyboardToken)+0x259>
c000c4ec:	a0 c0 29 02 c0       	mov    al,ds:0xc00229c0
c000c4f1:	83 f0 01             	xor    eax,0x1
c000c4f4:	84 c0                	test   al,al
c000c4f6:	74 1e                	je     c000c516 <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f8:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000c4fd:	6a 01                	push   0x1
c000c4ff:	6a 00                	push   0x0
c000c501:	68 8e c1 00 c0       	push   0xc000c18e
c000c506:	50                   	push   eax
c000c507:	e8 20 6c 00 00       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c000c50c:	83 c4 10             	add    esp,0x10
c000c50f:	c6 05 c0 29 02 c0 01 	mov    BYTE PTR ds:0xc00229c0,0x1
c000c516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c519:	66 3d 1d 03          	cmp    ax,0x31d
c000c51d:	75 06                	jne    c000c525 <sendKeyboardToken(KeyboardToken)+0x268>
c000c51f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c528:	66 3d 1c 03          	cmp    ax,0x31c
c000c52c:	75 06                	jne    c000c534 <sendKeyboardToken(KeyboardToken)+0x277>
c000c52e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c537:	66 3d 1b 03          	cmp    ax,0x31b
c000c53b:	75 06                	jne    c000c543 <sendKeyboardToken(KeyboardToken)+0x286>
c000c53d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c546:	66 3d 1e 03          	cmp    ax,0x31e
c000c54a:	75 06                	jne    c000c552 <sendKeyboardToken(KeyboardToken)+0x295>
c000c54c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c555:	66 3d 1f 03          	cmp    ax,0x31f
c000c559:	75 06                	jne    c000c561 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c55b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c564:	66 3d 1a 03          	cmp    ax,0x31a
c000c568:	75 06                	jne    c000c570 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c56a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c570:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c574:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c577:	83 f0 01             	xor    eax,0x1
c000c57a:	84 c0                	test   al,al
c000c57c:	74 7b                	je     c000c5f9 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c57e:	a0 c1 26 02 c0       	mov    al,ds:0xc00226c1
c000c583:	84 c0                	test   al,al
c000c585:	74 43                	je     c000c5ca <sendKeyboardToken(KeyboardToken)+0x30d>
c000c587:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c58b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c58f:	74 2d                	je     c000c5be <sendKeyboardToken(KeyboardToken)+0x301>
c000c591:	8b 15 c4 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229c4
c000c597:	89 d0                	mov    eax,edx
c000c599:	c1 e0 02             	shl    eax,0x2
c000c59c:	01 d0                	add    eax,edx
c000c59e:	01 c0                	add    eax,eax
c000c5a0:	a3 c4 29 02 c0       	mov    ds:0xc00229c4,eax
c000c5a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a8:	25 ff ff 00 00       	and    eax,0xffff
c000c5ad:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5b0:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c5b5:	01 d0                	add    eax,edx
c000c5b7:	a3 c4 29 02 c0       	mov    ds:0xc00229c4,eax
c000c5bc:	eb 71                	jmp    c000c62f <sendKeyboardToken(KeyboardToken)+0x372>
c000c5be:	c7 05 c4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c4,0x0
c000c5c8:	eb 65                	jmp    c000c62f <sendKeyboardToken(KeyboardToken)+0x372>
c000c5ca:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c5cf:	85 c0                	test   eax,eax
c000c5d1:	74 1a                	je     c000c5ed <sendKeyboardToken(KeyboardToken)+0x330>
c000c5d3:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c5d8:	25 ff 00 00 00       	and    eax,0xff
c000c5dd:	83 ec 0c             	sub    esp,0xc
c000c5e0:	50                   	push   eax
c000c5e1:	e8 14 fc ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c5e6:	83 c4 10             	add    esp,0x10
c000c5e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5ed:	c7 05 c4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c4,0x0
c000c5f7:	eb 36                	jmp    c000c62f <sendKeyboardToken(KeyboardToken)+0x372>
c000c5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5fc:	66 3d 01 01          	cmp    ax,0x101
c000c600:	75 2d                	jne    c000c62f <sendKeyboardToken(KeyboardToken)+0x372>
c000c602:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c607:	85 c0                	test   eax,eax
c000c609:	74 1a                	je     c000c625 <sendKeyboardToken(KeyboardToken)+0x368>
c000c60b:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c610:	25 ff 00 00 00       	and    eax,0xff
c000c615:	83 ec 0c             	sub    esp,0xc
c000c618:	50                   	push   eax
c000c619:	e8 dc fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c61e:	83 c4 10             	add    esp,0x10
c000c621:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c625:	c7 05 c4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c4,0x0
c000c62f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c632:	83 f0 01             	xor    eax,0x1
c000c635:	84 c0                	test   al,al
c000c637:	74 4e                	je     c000c687 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c639:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c63c:	83 f0 01             	xor    eax,0x1
c000c63f:	84 c0                	test   al,al
c000c641:	74 44                	je     c000c687 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c643:	a0 c0 26 02 c0       	mov    al,ds:0xc00226c0
c000c648:	83 f0 01             	xor    eax,0x1
c000c64b:	84 c0                	test   al,al
c000c64d:	74 38                	je     c000c687 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c64f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c652:	66 83 f8 1f          	cmp    ax,0x1f
c000c656:	76 09                	jbe    c000c661 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65b:	66 83 f8 7e          	cmp    ax,0x7e
c000c65f:	76 12                	jbe    c000c673 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c664:	66 83 f8 0a          	cmp    ax,0xa
c000c668:	74 09                	je     c000c673 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66d:	66 83 f8 08          	cmp    ax,0x8
c000c671:	75 14                	jne    c000c687 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c676:	25 ff 00 00 00       	and    eax,0xff
c000c67b:	83 ec 0c             	sub    esp,0xc
c000c67e:	50                   	push   eax
c000c67f:	e8 76 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c684:	83 c4 10             	add    esp,0x10
c000c687:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c68a:	83 f0 01             	xor    eax,0x1
c000c68d:	84 c0                	test   al,al
c000c68f:	74 51                	je     c000c6e2 <sendKeyboardToken(KeyboardToken)+0x425>
c000c691:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c694:	83 f0 01             	xor    eax,0x1
c000c697:	84 c0                	test   al,al
c000c699:	74 47                	je     c000c6e2 <sendKeyboardToken(KeyboardToken)+0x425>
c000c69b:	a0 c0 26 02 c0       	mov    al,ds:0xc00226c0
c000c6a0:	84 c0                	test   al,al
c000c6a2:	74 3e                	je     c000c6e2 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a7:	66 83 f8 3f          	cmp    ax,0x3f
c000c6ab:	76 35                	jbe    c000c6e2 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b0:	66 83 f8 7f          	cmp    ax,0x7f
c000c6b4:	77 2c                	ja     c000c6e2 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b9:	88 c2                	mov    dl,al
c000c6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6be:	66 83 f8 5f          	cmp    ax,0x5f
c000c6c2:	76 04                	jbe    c000c6c8 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6c4:	b0 20                	mov    al,0x20
c000c6c6:	eb 02                	jmp    c000c6ca <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6c8:	b0 00                	mov    al,0x0
c000c6ca:	29 c2                	sub    edx,eax
c000c6cc:	88 d0                	mov    al,dl
c000c6ce:	83 e8 40             	sub    eax,0x40
c000c6d1:	25 ff 00 00 00       	and    eax,0xff
c000c6d6:	83 ec 0c             	sub    esp,0xc
c000c6d9:	50                   	push   eax
c000c6da:	e8 1b fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e5:	66 3d 00 03          	cmp    ax,0x300
c000c6e9:	75 0f                	jne    c000c6fa <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6eb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ee:	83 f0 01             	xor    eax,0x1
c000c6f1:	84 c0                	test   al,al
c000c6f3:	74 05                	je     c000c6fa <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6f5:	e8 9f ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c6fa:	90                   	nop
c000c6fb:	c9                   	leave  
c000c6fc:	c3                   	ret    

c000c6fd <clearInternalKeybuffer(VgaText*)>:
c000c6fd:	55                   	push   ebp
c000c6fe:	89 e5                	mov    ebp,esp
c000c700:	83 ec 08             	sub    esp,0x8
c000c703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c706:	05 b2 00 00 00       	add    eax,0xb2
c000c70b:	83 ec 0c             	sub    esp,0xc
c000c70e:	50                   	push   eax
c000c70f:	e8 2c 3e ff ff       	call   c0000540 <strlen>
c000c714:	83 c4 10             	add    esp,0x10
c000c717:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c71a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c720:	83 ec 04             	sub    esp,0x4
c000c723:	50                   	push   eax
c000c724:	6a 00                	push   0x0
c000c726:	52                   	push   edx
c000c727:	e8 a4 3d ff ff       	call   c00004d0 <memset>
c000c72c:	83 c4 10             	add    esp,0x10
c000c72f:	90                   	nop
c000c730:	c9                   	leave  
c000c731:	c3                   	ret    

c000c732 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c732:	55                   	push   ebp
c000c733:	89 e5                	mov    ebp,esp
c000c735:	83 ec 18             	sub    esp,0x18
c000c738:	a1 a8 25 02 c0       	mov    eax,ds:0xc00225a8
c000c73d:	85 c0                	test   eax,eax
c000c73f:	74 2a                	je     c000c76b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c741:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c747:	8b 0d a8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225a8
c000c74d:	83 ec 04             	sub    esp,0x4
c000c750:	68 c0 25 02 c0       	push   0xc00225c0
c000c755:	83 ec 08             	sub    esp,0x8
c000c758:	89 e2                	mov    edx,esp
c000c75a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c75d:	89 02                	mov    DWORD PTR [edx],eax
c000c75f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c762:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c766:	ff d1                	call   ecx
c000c768:	83 c4 10             	add    esp,0x10
c000c76b:	fb                   	sti    
c000c76c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c773:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c777:	0f 84 a1 00 00 00    	je     c000c81e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c780:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c786:	84 c0                	test   al,al
c000c788:	75 28                	jne    c000c7b2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c78a:	fa                   	cli    
c000c78b:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c790:	40                   	inc    eax
c000c791:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c796:	e8 b1 6b 00 00       	call   c001334c <schedule()>
c000c79b:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c7a0:	48                   	dec    eax
c000c7a1:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c7a6:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c7ab:	85 c0                	test   eax,eax
c000c7ad:	75 ce                	jne    c000c77d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7af:	fb                   	sti    
c000c7b0:	eb cb                	jmp    c000c77d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7b5:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7be:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7c4:	88 10                	mov    BYTE PTR [eax],dl
c000c7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c9:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7cf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d5:	05 b2 00 00 00       	add    eax,0xb2
c000c7da:	83 ec 0c             	sub    esp,0xc
c000c7dd:	50                   	push   eax
c000c7de:	e8 5d 3d ff ff       	call   c0000540 <strlen>
c000c7e3:	83 c4 10             	add    esp,0x10
c000c7e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7e9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7ef:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c7f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7f5:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7fb:	83 ec 04             	sub    esp,0x4
c000c7fe:	50                   	push   eax
c000c7ff:	51                   	push   ecx
c000c800:	52                   	push   edx
c000c801:	e8 da 3b ff ff       	call   c00003e0 <memmove>
c000c806:	83 c4 10             	add    esp,0x10
c000c809:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c80c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c80f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c813:	0f 85 5a ff ff ff    	jne    c000c773 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c819:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c81c:	eb 03                	jmp    c000c821 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c81e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c821:	c9                   	leave  
c000c822:	c3                   	ret    
c000c823:	90                   	nop

c000c824 <Keyboard::Keyboard(char const*)>:
c000c824:	83 ec 0c             	sub    esp,0xc
c000c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82b:	83 ec 08             	sub    esp,0x8
c000c82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c832:	50                   	push   eax
c000c833:	e8 78 f2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c838:	83 c4 10             	add    esp,0x10
c000c83b:	ba dc db 01 c0       	mov    edx,0xc001dbdc
c000c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c844:	89 10                	mov    DWORD PTR [eax],edx
c000c846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c854:	c6 05 a4 25 02 c0 01 	mov    BYTE PTR ds:0xc00225a4,0x1
c000c85b:	90                   	nop
c000c85c:	83 c4 0c             	add    esp,0xc
c000c85f:	c3                   	ret    

c000c860 <Keyboard::~Keyboard()>:
c000c860:	83 ec 0c             	sub    esp,0xc
c000c863:	ba dc db 01 c0       	mov    edx,0xc001dbdc
c000c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86c:	89 10                	mov    DWORD PTR [eax],edx
c000c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c872:	83 ec 0c             	sub    esp,0xc
c000c875:	50                   	push   eax
c000c876:	e8 9f ef ff ff       	call   c000b81a <Device::~Device()>
c000c87b:	83 c4 10             	add    esp,0x10
c000c87e:	90                   	nop
c000c87f:	83 c4 0c             	add    esp,0xc
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <Keyboard::~Keyboard()>:
c000c884:	83 ec 0c             	sub    esp,0xc
c000c887:	83 ec 0c             	sub    esp,0xc
c000c88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c88e:	e8 cd ff ff ff       	call   c000c860 <Keyboard::~Keyboard()>
c000c893:	83 c4 10             	add    esp,0x10
c000c896:	83 ec 08             	sub    esp,0x8
c000c899:	68 5c 01 00 00       	push   0x15c
c000c89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a2:	e8 3b db ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	83 c4 0c             	add    esp,0xc
c000c8ad:	c3                   	ret    

c000c8ae <LogicalDisk::close(int, int, void*)>:
c000c8ae:	83 c8 ff             	or     eax,0xffffffff
c000c8b1:	c3                   	ret    

c000c8b2 <LogicalDisk::~LogicalDisk()>:
c000c8b2:	83 ec 0c             	sub    esp,0xc
c000c8b5:	ba 54 dc 01 c0       	mov    edx,0xc001dc54
c000c8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8be:	89 10                	mov    DWORD PTR [eax],edx
c000c8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c4:	83 ec 0c             	sub    esp,0xc
c000c8c7:	50                   	push   eax
c000c8c8:	e8 4d ef ff ff       	call   c000b81a <Device::~Device()>
c000c8cd:	83 c4 10             	add    esp,0x10
c000c8d0:	90                   	nop
c000c8d1:	83 c4 0c             	add    esp,0xc
c000c8d4:	c3                   	ret    
c000c8d5:	90                   	nop

c000c8d6 <LogicalDisk::~LogicalDisk()>:
c000c8d6:	83 ec 0c             	sub    esp,0xc
c000c8d9:	83 ec 0c             	sub    esp,0xc
c000c8dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e0:	e8 cd ff ff ff       	call   c000c8b2 <LogicalDisk::~LogicalDisk()>
c000c8e5:	83 c4 10             	add    esp,0x10
c000c8e8:	83 ec 08             	sub    esp,0x8
c000c8eb:	68 74 01 00 00       	push   0x174
c000c8f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f4:	e8 e9 da ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	83 c4 0c             	add    esp,0xc
c000c8ff:	c3                   	ret    

c000c900 <LogicalDisk::open(int, int, void*)>:
c000c900:	83 ec 18             	sub    esp,0x18
c000c903:	68 08 dc 01 c0       	push   0xc001dc08
c000c908:	e8 2e 38 00 00       	call   c001013b <KePanic(char const*)>
c000c90d:	83 c8 ff             	or     eax,0xffffffff
c000c910:	83 c4 1c             	add    esp,0x1c
c000c913:	c3                   	ret    

c000c914 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c914:	53                   	push   ebx
c000c915:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c91d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c921:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c927:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c92d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c933:	77 10                	ja     c000c945 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c935:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c93b:	89 d3                	mov    ebx,edx
c000c93d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c943:	72 05                	jb     c000c94a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c945:	83 c8 ff             	or     eax,0xffffffff
c000c948:	89 c2                	mov    edx,eax
c000c94a:	5b                   	pop    ebx
c000c94b:	c3                   	ret    

c000c94c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c94c:	56                   	push   esi
c000c94d:	83 c8 ff             	or     eax,0xffffffff
c000c950:	53                   	push   ebx
c000c951:	89 c2                	mov    edx,eax
c000c953:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c957:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c95b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c95f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c965:	77 27                	ja     c000c98e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c967:	89 d8                	mov    eax,ebx
c000c969:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c96f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c975:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c97a:	89 c2                	mov    edx,eax
c000c97c:	73 10                	jae    c000c98e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c97e:	89 c8                	mov    eax,ecx
c000c980:	89 da                	mov    edx,ebx
c000c982:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c988:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c98e:	5b                   	pop    ebx
c000c98f:	5e                   	pop    esi
c000c990:	c3                   	ret    
c000c991:	90                   	nop

c000c992 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c992:	83 ec 1c             	sub    esp,0x1c
c000c995:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c999:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b8:	83 ec 08             	sub    esp,0x8
c000c9bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bf:	50                   	push   eax
c000c9c0:	e8 eb f0 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c9c5:	83 c4 10             	add    esp,0x10
c000c9c8:	ba 54 dc 01 c0       	mov    edx,0xc001dc54
c000c9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d1:	89 10                	mov    DWORD PTR [eax],edx
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ed:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c9f7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca03:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca09:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca1a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca20:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca2e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca38:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca42:	90                   	nop
c000ca43:	83 c4 1c             	add    esp,0x1c
c000ca46:	c3                   	ret    
c000ca47:	90                   	nop

c000ca48 <LogicalDisk::assignDriveLetter()>:
c000ca48:	55                   	push   ebp
c000ca49:	57                   	push   edi
c000ca4a:	56                   	push   esi
c000ca4b:	53                   	push   ebx
c000ca4c:	83 ec 14             	sub    esp,0x14
c000ca4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca53:	8b 3d e0 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229e0
c000ca59:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca5f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca63:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca69:	8b 3d e4 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229e4
c000ca6f:	3c 01                	cmp    al,0x1
c000ca71:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca75:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca79:	19 c0                	sbb    eax,eax
c000ca7b:	83 e0 02             	and    eax,0x2
c000ca7e:	83 c0 41             	add    eax,0x41
c000ca81:	0f be e8             	movsx  ebp,al
c000ca84:	3c 43                	cmp    al,0x43
c000ca86:	75 10                	jne    c000ca98 <LogicalDisk::assignDriveLetter()+0x50>
c000ca88:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca8f:	75 5d                	jne    c000caee <LogicalDisk::assignDriveLetter()+0xa6>
c000ca91:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca96:	75 56                	jne    c000caee <LogicalDisk::assignDriveLetter()+0xa6>
c000ca98:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca9b:	ba 01 00 00 00       	mov    edx,0x1
c000caa0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000caa4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caa8:	d3 e2                	shl    edx,cl
c000caaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caae:	89 d7                	mov    edi,edx
c000cab0:	89 d6                	mov    esi,edx
c000cab2:	c1 ff 1f             	sar    edi,0x1f
c000cab5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cab9:	21 f9                	and    ecx,edi
c000cabb:	09 d1                	or     ecx,edx
c000cabd:	75 2f                	jne    c000caee <LogicalDisk::assignDriveLetter()+0xa6>
c000cabf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cac3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cac7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cacd:	09 f2                	or     edx,esi
c000cacf:	89 15 e0 29 02 c0    	mov    DWORD PTR ds:0xc00229e0,edx
c000cad5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad9:	09 fa                	or     edx,edi
c000cadb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cadf:	89 15 e4 29 02 c0    	mov    DWORD PTR ds:0xc00229e4,edx
c000cae5:	89 1c bd 00 2a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd600],ebx
c000caec:	eb 08                	jmp    c000caf6 <LogicalDisk::assignDriveLetter()+0xae>
c000caee:	45                   	inc    ebp
c000caef:	40                   	inc    eax
c000caf0:	3c 5b                	cmp    al,0x5b
c000caf2:	75 90                	jne    c000ca84 <LogicalDisk::assignDriveLetter()+0x3c>
c000caf4:	31 c0                	xor    eax,eax
c000caf6:	83 c4 14             	add    esp,0x14
c000caf9:	5b                   	pop    ebx
c000cafa:	5e                   	pop    esi
c000cafb:	5f                   	pop    edi
c000cafc:	5d                   	pop    ebp
c000cafd:	c3                   	ret    

c000cafe <LogicalDisk::mount()>:
c000cafe:	56                   	push   esi
c000caff:	53                   	push   ebx
c000cb00:	53                   	push   ebx
c000cb01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb05:	8b 1d 94 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020594
c000cb0b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb15:	85 db                	test   ebx,ebx
c000cb17:	74 27                	je     c000cb40 <LogicalDisk::mount()+0x42>
c000cb19:	51                   	push   ecx
c000cb1a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb21:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb23:	83 e8 41             	sub    eax,0x41
c000cb26:	50                   	push   eax
c000cb27:	56                   	push   esi
c000cb28:	53                   	push   ebx
c000cb29:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb2c:	83 c4 10             	add    esp,0x10
c000cb2f:	84 c0                	test   al,al
c000cb31:	74 08                	je     c000cb3b <LogicalDisk::mount()+0x3d>
c000cb33:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb39:	eb 07                	jmp    c000cb42 <LogicalDisk::mount()+0x44>
c000cb3b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb3e:	eb d5                	jmp    c000cb15 <LogicalDisk::mount()+0x17>
c000cb40:	31 c0                	xor    eax,eax
c000cb42:	5a                   	pop    edx
c000cb43:	5b                   	pop    ebx
c000cb44:	5e                   	pop    esi
c000cb45:	c3                   	ret    

c000cb46 <LogicalDisk::unmount()>:
c000cb46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb4a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb54:	c3                   	ret    
c000cb55:	90                   	nop

c000cb56 <LogicalDisk::eject()>:
c000cb56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb5a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb60:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb66:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb69:	90                   	nop

c000cb6a <LogicalDisk::unassignDriveLetter()>:
c000cb6a:	57                   	push   edi
c000cb6b:	56                   	push   esi
c000cb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb70:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb77:	84 c9                	test   cl,cl
c000cb79:	75 0f                	jne    c000cb8a <LogicalDisk::unassignDriveLetter()+0x20>
c000cb7b:	c7 44 24 0c 2c dc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dc2c
c000cb83:	5e                   	pop    esi
c000cb84:	5f                   	pop    edi
c000cb85:	e9 b1 35 00 00       	jmp    c001013b <KePanic(char const*)>
c000cb8a:	83 e9 41             	sub    ecx,0x41
c000cb8d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb94:	b8 01 00 00 00       	mov    eax,0x1
c000cb99:	c7 04 8d 00 2a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd600],0x0
c000cba4:	d3 e0                	shl    eax,cl
c000cba6:	89 c7                	mov    edi,eax
c000cba8:	f7 d0                	not    eax
c000cbaa:	c1 ff 1f             	sar    edi,0x1f
c000cbad:	21 05 e0 29 02 c0    	and    DWORD PTR ds:0xc00229e0,eax
c000cbb3:	89 fe                	mov    esi,edi
c000cbb5:	f7 d6                	not    esi
c000cbb7:	21 35 e4 29 02 c0    	and    DWORD PTR ds:0xc00229e4,esi
c000cbbd:	5e                   	pop    esi
c000cbbe:	5f                   	pop    edi
c000cbbf:	c3                   	ret    

c000cbc0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbc0:	57                   	push   edi
c000cbc1:	56                   	push   esi
c000cbc2:	53                   	push   ebx
c000cbc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbcb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbd3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbd9:	77 41                	ja     c000cc1c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cbdb:	99                   	cdq    
c000cbdc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cbe2:	01 c8                	add    eax,ecx
c000cbe4:	11 da                	adc    edx,ebx
c000cbe6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbec:	19 d7                	sbb    edi,edx
c000cbee:	72 33                	jb     c000cc23 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cbf0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbf6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbfc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc00:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc04:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc14:	5b                   	pop    ebx
c000cc15:	5e                   	pop    esi
c000cc16:	5f                   	pop    edi
c000cc17:	e9 4e 0a 00 00       	jmp    c000d66a <VCache::read(unsigned long long, int, void*)>
c000cc1c:	b8 05 00 00 00       	mov    eax,0x5
c000cc21:	eb 05                	jmp    c000cc28 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc23:	b8 07 00 00 00       	mov    eax,0x7
c000cc28:	5b                   	pop    ebx
c000cc29:	5e                   	pop    esi
c000cc2a:	5f                   	pop    edi
c000cc2b:	c3                   	ret    

c000cc2c <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc2c:	57                   	push   edi
c000cc2d:	56                   	push   esi
c000cc2e:	53                   	push   ebx
c000cc2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc3f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc45:	77 41                	ja     c000cc88 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc47:	99                   	cdq    
c000cc48:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc4e:	01 c8                	add    eax,ecx
c000cc50:	11 da                	adc    edx,ebx
c000cc52:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc58:	19 d7                	sbb    edi,edx
c000cc5a:	72 33                	jb     c000cc8f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc5c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc62:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc6c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc70:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc80:	5b                   	pop    ebx
c000cc81:	5e                   	pop    esi
c000cc82:	5f                   	pop    edi
c000cc83:	e9 cc 08 00 00       	jmp    c000d554 <VCache::write(unsigned long long, int, void*)>
c000cc88:	b8 05 00 00 00       	mov    eax,0x5
c000cc8d:	eb 05                	jmp    c000cc94 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc8f:	b8 07 00 00 00       	mov    eax,0x7
c000cc94:	5b                   	pop    ebx
c000cc95:	5e                   	pop    esi
c000cc96:	5f                   	pop    edi
c000cc97:	c3                   	ret    

c000cc98 <Mouse::Mouse(char const*)>:
c000cc98:	83 ec 0c             	sub    esp,0xc
c000cc9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9f:	83 ec 08             	sub    esp,0x8
c000cca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca6:	50                   	push   eax
c000cca7:	e8 04 ee ff ff       	call   c000bab0 <Device::Device(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	ba 80 dc 01 c0       	mov    edx,0xc001dc80
c000ccb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb8:	89 10                	mov    DWORD PTR [eax],edx
c000ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccbe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ccc8:	90                   	nop
c000ccc9:	83 c4 0c             	add    esp,0xc
c000cccc:	c3                   	ret    
c000cccd:	90                   	nop
c000ccce:	66 90                	xchg   ax,ax

c000ccd0 <Mouse::~Mouse()>:
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	ba 80 dc 01 c0       	mov    edx,0xc001dc80
c000ccd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccdc:	89 10                	mov    DWORD PTR [eax],edx
c000ccde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce2:	83 ec 0c             	sub    esp,0xc
c000cce5:	50                   	push   eax
c000cce6:	e8 2f eb ff ff       	call   c000b81a <Device::~Device()>
c000cceb:	83 c4 10             	add    esp,0x10
c000ccee:	90                   	nop
c000ccef:	83 c4 0c             	add    esp,0xc
c000ccf2:	c3                   	ret    
c000ccf3:	90                   	nop

c000ccf4 <Mouse::~Mouse()>:
c000ccf4:	83 ec 0c             	sub    esp,0xc
c000ccf7:	83 ec 0c             	sub    esp,0xc
c000ccfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfe:	e8 cd ff ff ff       	call   c000ccd0 <Mouse::~Mouse()>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	83 ec 08             	sub    esp,0x8
c000cd09:	68 58 01 00 00       	push   0x158
c000cd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd12:	e8 cb d6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000cd17:	83 c4 10             	add    esp,0x10
c000cd1a:	83 c4 0c             	add    esp,0xc
c000cd1d:	c3                   	ret    

c000cd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd1e:	55                   	push   ebp
c000cd1f:	57                   	push   edi
c000cd20:	56                   	push   esi
c000cd21:	53                   	push   ebx
c000cd22:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd28:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd2f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd36:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd3d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd4c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd53:	e8 54 ee ff ff       	call   c000bbac <Device::getName()>
c000cd58:	5a                   	pop    edx
c000cd59:	59                   	pop    ecx
c000cd5a:	50                   	push   eax
c000cd5b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd5f:	55                   	push   ebp
c000cd60:	e8 9b 38 ff ff       	call   c0000600 <strcpy>
c000cd65:	5b                   	pop    ebx
c000cd66:	58                   	pop    eax
c000cd67:	68 a4 dc 01 c0       	push   0xc001dca4
c000cd6c:	55                   	push   ebp
c000cd6d:	e8 4e 3a ff ff       	call   c00007c0 <strcat>
c000cd72:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd79:	e8 3b aa ff ff       	call   c00077b9 <malloc>
c000cd7e:	83 c4 0c             	add    esp,0xc
c000cd81:	89 c3                	mov    ebx,eax
c000cd83:	57                   	push   edi
c000cd84:	56                   	push   esi
c000cd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd8d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd94:	55                   	push   ebp
c000cd95:	50                   	push   eax
c000cd96:	e8 f7 fb ff ff       	call   c000c992 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd9b:	83 c4 14             	add    esp,0x14
c000cd9e:	53                   	push   ebx
c000cd9f:	e8 a4 fc ff ff       	call   c000ca48 <LogicalDisk::assignDriveLetter()>
c000cda4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cda7:	e8 52 fd ff ff       	call   c000cafe <LogicalDisk::mount()>
c000cdac:	58                   	pop    eax
c000cdad:	5a                   	pop    edx
c000cdae:	53                   	push   ebx
c000cdaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdb6:	e8 5d eb ff ff       	call   c000b918 <Device::addChild(Device*)>
c000cdbb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cdc1:	5b                   	pop    ebx
c000cdc2:	5e                   	pop    esi
c000cdc3:	5f                   	pop    edi
c000cdc4:	5d                   	pop    ebp
c000cdc5:	c3                   	ret    

c000cdc6 <createPartitionsForDisk(PhysicalDisk*)>:
c000cdc6:	55                   	push   ebp
c000cdc7:	57                   	push   edi
c000cdc8:	56                   	push   esi
c000cdc9:	53                   	push   ebx
c000cdca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cdd0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cdd7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cddd:	3d 00 02 00 00       	cmp    eax,0x200
c000cde2:	74 27                	je     c000ce0b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cde4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cdea:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cdf0:	83 ec 10             	sub    esp,0x10
c000cdf3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cdf7:	99                   	cdq    
c000cdf8:	c1 e6 0a             	shl    esi,0xa
c000cdfb:	52                   	push   edx
c000cdfc:	89 fd                	mov    ebp,edi
c000cdfe:	50                   	push   eax
c000cdff:	55                   	push   ebp
c000ce00:	56                   	push   esi
c000ce01:	e8 4a ee 00 00       	call   c001bc50 <__udivdi3>
c000ce06:	e9 b1 00 00 00       	jmp    c000cebc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce0b:	83 ec 0c             	sub    esp,0xc
c000ce0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce10:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce14:	56                   	push   esi
c000ce15:	6a 01                	push   0x1
c000ce17:	6a 00                	push   0x0
c000ce19:	6a 00                	push   0x0
c000ce1b:	53                   	push   ebx
c000ce1c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce1f:	83 c4 20             	add    esp,0x20
c000ce22:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce2a:	75 0a                	jne    c000ce36 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce2c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce34:	74 2c                	je     c000ce62 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce36:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce3c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce42:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce48:	83 ec 10             	sub    esp,0x10
c000ce4b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce4f:	89 f7                	mov    edi,esi
c000ce51:	c1 e0 0a             	shl    eax,0xa
c000ce54:	c1 ff 1f             	sar    edi,0x1f
c000ce57:	57                   	push   edi
c000ce58:	56                   	push   esi
c000ce59:	52                   	push   edx
c000ce5a:	50                   	push   eax
c000ce5b:	e8 f0 ed 00 00       	call   c001bc50 <__udivdi3>
c000ce60:	eb 5a                	jmp    c000cebc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce62:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce69:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce70:	83 e1 7f             	and    ecx,0x7f
c000ce73:	83 e0 7f             	and    eax,0x7f
c000ce76:	01 c1                	add    ecx,eax
c000ce78:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce7f:	83 e0 7f             	and    eax,0x7f
c000ce82:	01 c1                	add    ecx,eax
c000ce84:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce8b:	83 e0 7f             	and    eax,0x7f
c000ce8e:	00 c1                	add    cl,al
c000ce90:	74 41                	je     c000ced3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce92:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce98:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cea4:	83 ec 10             	sub    esp,0x10
c000cea7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ceab:	89 f7                	mov    edi,esi
c000cead:	c1 e0 0a             	shl    eax,0xa
c000ceb0:	c1 ff 1f             	sar    edi,0x1f
c000ceb3:	57                   	push   edi
c000ceb4:	56                   	push   esi
c000ceb5:	52                   	push   edx
c000ceb6:	50                   	push   eax
c000ceb7:	e8 94 ed 00 00       	call   c001bc50 <__udivdi3>
c000cebc:	83 c4 14             	add    esp,0x14
c000cebf:	52                   	push   edx
c000cec0:	50                   	push   eax
c000cec1:	6a 00                	push   0x0
c000cec3:	6a 00                	push   0x0
c000cec5:	53                   	push   ebx
c000cec6:	e8 53 fe ff ff       	call   c000cd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cecb:	83 c4 20             	add    esp,0x20
c000cece:	e9 79 01 00 00       	jmp    c000d04c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000ced3:	89 f0                	mov    eax,esi
c000ced5:	31 f6                	xor    esi,esi
c000ced7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cede:	75 02                	jne    c000cee2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cee0:	89 f1                	mov    ecx,esi
c000cee2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cee9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cef0:	c1 e2 08             	shl    edx,0x8
c000cef3:	c1 e7 10             	shl    edi,0x10
c000cef6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cefe:	09 fa                	or     edx,edi
c000cf00:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf08:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf0f:	83 c0 10             	add    eax,0x10
c000cf12:	09 fa                	or     edx,edi
c000cf14:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf1b:	c1 e7 18             	shl    edi,0x18
c000cf1e:	09 fa                	or     edx,edi
c000cf20:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf27:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf2b:	c1 e7 10             	shl    edi,0x10
c000cf2e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf35:	c1 e2 08             	shl    edx,0x8
c000cf38:	09 fa                	or     edx,edi
c000cf3a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf41:	09 fa                	or     edx,edi
c000cf43:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf4a:	c1 e7 18             	shl    edi,0x18
c000cf4d:	09 fa                	or     edx,edi
c000cf4f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf53:	46                   	inc    esi
c000cf54:	83 fe 04             	cmp    esi,0x4
c000cf57:	0f 85 7a ff ff ff    	jne    c000ced7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf61:	83 f0 01             	xor    eax,0x1
c000cf64:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf68:	75 57                	jne    c000cfc1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf6e:	83 f0 01             	xor    eax,0x1
c000cf71:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf75:	75 4a                	jne    c000cfc1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf77:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf7b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf8b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf91:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf97:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfa1:	89 f7                	mov    edi,esi
c000cfa3:	c1 e0 0a             	shl    eax,0xa
c000cfa6:	c1 ff 1f             	sar    edi,0x1f
c000cfa9:	57                   	push   edi
c000cfaa:	56                   	push   esi
c000cfab:	52                   	push   edx
c000cfac:	50                   	push   eax
c000cfad:	e8 9e ec 00 00       	call   c001bc50 <__udivdi3>
c000cfb2:	83 c4 10             	add    esp,0x10
c000cfb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfbd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cfc1:	84 c9                	test   cl,cl
c000cfc3:	74 53                	je     c000d018 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cfc5:	0f b6 c9             	movzx  ecx,cl
c000cfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfd0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cfd4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cfd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfe0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cfe4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cfe8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cff8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cffc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d000:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d004:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d008:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d00c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d010:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d014:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d018:	31 ed                	xor    ebp,ebp
c000d01a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d01e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d022:	89 f8                	mov    eax,edi
c000d024:	09 f0                	or     eax,esi
c000d026:	74 1e                	je     c000d046 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d028:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d02c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d030:	89 d1                	mov    ecx,edx
c000d032:	09 c1                	or     ecx,eax
c000d034:	74 10                	je     c000d046 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d036:	83 ec 0c             	sub    esp,0xc
c000d039:	57                   	push   edi
c000d03a:	56                   	push   esi
c000d03b:	52                   	push   edx
c000d03c:	50                   	push   eax
c000d03d:	53                   	push   ebx
c000d03e:	e8 db fc ff ff       	call   c000cd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d043:	83 c4 20             	add    esp,0x20
c000d046:	45                   	inc    ebp
c000d047:	83 fd 04             	cmp    ebp,0x4
c000d04a:	75 ce                	jne    c000d01a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d04c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d052:	5b                   	pop    ebx
c000d053:	5e                   	pop    esi
c000d054:	5f                   	pop    edi
c000d055:	5d                   	pop    ebp
c000d056:	c3                   	ret    
c000d057:	90                   	nop

c000d058 <Serial::Serial(char const*)>:
c000d058:	83 ec 0c             	sub    esp,0xc
c000d05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d05f:	83 ec 08             	sub    esp,0x8
c000d062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d066:	50                   	push   eax
c000d067:	e8 44 ea ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d06c:	83 c4 10             	add    esp,0x10
c000d06f:	ba b8 dc 01 c0       	mov    edx,0xc001dcb8
c000d074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d078:	89 10                	mov    DWORD PTR [eax],edx
c000d07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d088:	90                   	nop
c000d089:	83 c4 0c             	add    esp,0xc
c000d08c:	c3                   	ret    
c000d08d:	90                   	nop
c000d08e:	66 90                	xchg   ax,ax

c000d090 <Serial::~Serial()>:
c000d090:	83 ec 0c             	sub    esp,0xc
c000d093:	ba b8 dc 01 c0       	mov    edx,0xc001dcb8
c000d098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09c:	89 10                	mov    DWORD PTR [eax],edx
c000d09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a2:	83 ec 0c             	sub    esp,0xc
c000d0a5:	50                   	push   eax
c000d0a6:	e8 6f e7 ff ff       	call   c000b81a <Device::~Device()>
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	90                   	nop
c000d0af:	83 c4 0c             	add    esp,0xc
c000d0b2:	c3                   	ret    
c000d0b3:	90                   	nop

c000d0b4 <Serial::~Serial()>:
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	83 ec 0c             	sub    esp,0xc
c000d0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0be:	e8 cd ff ff ff       	call   c000d090 <Serial::~Serial()>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	83 ec 08             	sub    esp,0x8
c000d0c9:	68 58 01 00 00       	push   0x158
c000d0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d2:	e8 0b d3 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d0d7:	83 c4 10             	add    esp,0x10
c000d0da:	83 c4 0c             	add    esp,0xc
c000d0dd:	c3                   	ret    
c000d0de:	66 90                	xchg   ax,ax

c000d0e0 <Timer::Timer(char const*)>:
c000d0e0:	83 ec 0c             	sub    esp,0xc
c000d0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e7:	83 ec 08             	sub    esp,0x8
c000d0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ee:	50                   	push   eax
c000d0ef:	e8 bc e9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d0f4:	83 c4 10             	add    esp,0x10
c000d0f7:	ba fc dc 01 c0       	mov    edx,0xc001dcfc
c000d0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d100:	89 10                	mov    DWORD PTR [eax],edx
c000d102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d106:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d110:	90                   	nop
c000d111:	83 c4 0c             	add    esp,0xc
c000d114:	c3                   	ret    
c000d115:	90                   	nop
c000d116:	66 90                	xchg   ax,ax

c000d118 <Timer::~Timer()>:
c000d118:	83 ec 0c             	sub    esp,0xc
c000d11b:	ba fc dc 01 c0       	mov    edx,0xc001dcfc
c000d120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d124:	89 10                	mov    DWORD PTR [eax],edx
c000d126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	50                   	push   eax
c000d12e:	e8 e7 e6 ff ff       	call   c000b81a <Device::~Device()>
c000d133:	83 c4 10             	add    esp,0x10
c000d136:	90                   	nop
c000d137:	83 c4 0c             	add    esp,0xc
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <Timer::~Timer()>:
c000d13c:	83 ec 0c             	sub    esp,0xc
c000d13f:	83 ec 0c             	sub    esp,0xc
c000d142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d146:	e8 cd ff ff ff       	call   c000d118 <Timer::~Timer()>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	83 ec 08             	sub    esp,0x8
c000d151:	68 5c 01 00 00       	push   0x15c
c000d156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d15a:	e8 83 d2 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	83 c4 0c             	add    esp,0xc
c000d165:	c3                   	ret    

c000d166 <Timer::read()>:
c000d166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d16a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d170:	c3                   	ret    

c000d171 <setupTimer(int)>:
c000d171:	53                   	push   ebx
c000d172:	83 ec 14             	sub    esp,0x14
c000d175:	68 5c 01 00 00       	push   0x15c
c000d17a:	e8 3a a6 ff ff       	call   c00077b9 <malloc>
c000d17f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d182:	89 c3                	mov    ebx,eax
c000d184:	e8 37 e4 00 00       	call   c001b5c0 <PIT::PIT()>
c000d189:	58                   	pop    eax
c000d18a:	5a                   	pop    edx
c000d18b:	53                   	push   ebx
c000d18c:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c000d192:	e8 81 e7 ff ff       	call   c000b918 <Device::addChild(Device*)>
c000d197:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d199:	6a 00                	push   0x0
c000d19b:	6a 00                	push   0x0
c000d19d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1a1:	53                   	push   ebx
c000d1a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1a5:	89 d8                	mov    eax,ebx
c000d1a7:	83 c4 28             	add    esp,0x28
c000d1aa:	5b                   	pop    ebx
c000d1ab:	c3                   	ret    

c000d1ac <timerHandler(unsigned int)>:
c000d1ac:	56                   	push   esi
c000d1ad:	53                   	push   ebx
c000d1ae:	51                   	push   ecx
c000d1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b3:	01 05 6c 2a 02 c0    	add    DWORD PTR ds:0xc0022a6c,eax
c000d1b9:	80 3d 9d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002049d,0x0
c000d1c0:	0f 84 4a 01 00 00    	je     c000d310 <timerHandler(unsigned int)+0x164>
c000d1c6:	fa                   	cli    
c000d1c7:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c000d1cd:	83 ec 0c             	sub    esp,0xc
c000d1d0:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c000d1d6:	68 58 37 02 c0       	push   0xc0023758
c000d1db:	e8 40 f0 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1e0:	83 c4 10             	add    esp,0x10
c000d1e3:	84 c0                	test   al,al
c000d1e5:	0f 85 a1 00 00 00    	jne    c000d28c <timerHandler(unsigned int)+0xe0>
c000d1eb:	83 ec 0c             	sub    esp,0xc
c000d1ee:	68 58 37 02 c0       	push   0xc0023758
c000d1f3:	e8 44 f0 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1f8:	83 c4 10             	add    esp,0x10
c000d1fb:	89 c6                	mov    esi,eax
c000d1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d200:	83 ec 0c             	sub    esp,0xc
c000d203:	68 58 37 02 c0       	push   0xc0023758
c000d208:	e8 2f f0 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d20d:	c7 04 24 58 37 02 c0 	mov    DWORD PTR [esp],0xc0023758
c000d214:	89 c3                	mov    ebx,eax
c000d216:	e8 29 f0 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d21b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d21e:	83 c4 10             	add    esp,0x10
c000d221:	3b 05 6c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a6c
c000d227:	77 23                	ja     c000d24c <timerHandler(unsigned int)+0xa0>
c000d229:	83 ec 0c             	sub    esp,0xc
c000d22c:	53                   	push   ebx
c000d22d:	e8 de 65 00 00       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c000d232:	83 c4 10             	add    esp,0x10
c000d235:	39 de                	cmp    esi,ebx
c000d237:	75 27                	jne    c000d260 <timerHandler(unsigned int)+0xb4>
c000d239:	83 ec 0c             	sub    esp,0xc
c000d23c:	68 58 37 02 c0       	push   0xc0023758
c000d241:	e8 f6 ef 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d246:	89 c6                	mov    esi,eax
c000d248:	eb 12                	jmp    c000d25c <timerHandler(unsigned int)+0xb0>
c000d24a:	66 90                	xchg   ax,ax
c000d24c:	52                   	push   edx
c000d24d:	52                   	push   edx
c000d24e:	53                   	push   ebx
c000d24f:	68 58 37 02 c0       	push   0xc0023758
c000d254:	e8 a3 f0 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	90                   	nop
c000d260:	83 ec 0c             	sub    esp,0xc
c000d263:	68 58 37 02 c0       	push   0xc0023758
c000d268:	e8 b3 ef 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d26d:	83 c4 10             	add    esp,0x10
c000d270:	84 c0                	test   al,al
c000d272:	75 18                	jne    c000d28c <timerHandler(unsigned int)+0xe0>
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	68 58 37 02 c0       	push   0xc0023758
c000d27c:	e8 bb ef 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	39 f0                	cmp    eax,esi
c000d286:	0f 85 74 ff ff ff    	jne    c000d200 <timerHandler(unsigned int)+0x54>
c000d28c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d291:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d295:	74 41                	je     c000d2d8 <timerHandler(unsigned int)+0x12c>
c000d297:	80 3d 9c 04 02 c0 00 	cmp    BYTE PTR ds:0xc002049c,0x0
c000d29e:	74 38                	je     c000d2d8 <timerHandler(unsigned int)+0x12c>
c000d2a0:	fa                   	cli    
c000d2a1:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c000d2a7:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c000d2ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2b2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2bb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2be:	72 08                	jb     c000d2c8 <timerHandler(unsigned int)+0x11c>
c000d2c0:	e8 87 60 00 00       	call   c001334c <schedule()>
c000d2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c8:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000d2cd:	48                   	dec    eax
c000d2ce:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000d2d3:	75 03                	jne    c000d2d8 <timerHandler(unsigned int)+0x12c>
c000d2d5:	fb                   	sti    
c000d2d6:	66 90                	xchg   ax,ax
c000d2d8:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000d2dd:	48                   	dec    eax
c000d2de:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000d2e3:	75 1b                	jne    c000d300 <timerHandler(unsigned int)+0x154>
c000d2e5:	83 3d 40 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023740,0x0
c000d2ec:	74 12                	je     c000d300 <timerHandler(unsigned int)+0x154>
c000d2ee:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c000d2f8:	e8 4f 60 00 00       	call   c001334c <schedule()>
c000d2fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d300:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000d305:	48                   	dec    eax
c000d306:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000d30b:	75 03                	jne    c000d310 <timerHandler(unsigned int)+0x164>
c000d30d:	fb                   	sti    
c000d30e:	66 90                	xchg   ax,ax
c000d310:	58                   	pop    eax
c000d311:	5b                   	pop    ebx
c000d312:	5e                   	pop    esi
c000d313:	c3                   	ret    

c000d314 <VCache::VCache(PhysicalDisk*)>:
c000d314:	53                   	push   ebx
c000d315:	83 ec 18             	sub    esp,0x18
c000d318:	ba 2c dd 01 c0       	mov    edx,0xc001dd2c
c000d31d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d321:	89 10                	mov    DWORD PTR [eax],edx
c000d323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d327:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d332:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d33d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d344:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d356:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d361:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d36c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d374:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d37b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d386:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d396:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d39a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3ad:	83 ec 0c             	sub    esp,0xc
c000d3b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3b4:	e8 00 a4 ff ff       	call   c00077b9 <malloc>
c000d3b9:	83 c4 10             	add    esp,0x10
c000d3bc:	89 c3                	mov    ebx,eax
c000d3be:	83 ec 0c             	sub    esp,0xc
c000d3c1:	53                   	push   ebx
c000d3c2:	e8 51 5d 00 00       	call   c0013118 <Mutex::Mutex()>
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d3e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d3f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d402:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d408:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d40c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d40f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d416:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d41a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d41e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d424:	05 00 01 00 00       	add    eax,0x100
c000d429:	c1 e0 04             	shl    eax,0x4
c000d42c:	83 ec 0c             	sub    esp,0xc
c000d42f:	50                   	push   eax
c000d430:	e8 84 a3 ff ff       	call   c00077b9 <malloc>
c000d435:	83 c4 10             	add    esp,0x10
c000d438:	89 c2                	mov    edx,eax
c000d43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d445:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d450:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d454:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d458:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d45e:	c1 e0 06             	shl    eax,0x6
c000d461:	83 ec 0c             	sub    esp,0xc
c000d464:	50                   	push   eax
c000d465:	e8 4f a3 ff ff       	call   c00077b9 <malloc>
c000d46a:	83 c4 10             	add    esp,0x10
c000d46d:	89 c2                	mov    edx,eax
c000d46f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d473:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d476:	90                   	nop
c000d477:	83 c4 18             	add    esp,0x18
c000d47a:	5b                   	pop    ebx
c000d47b:	c3                   	ret    

c000d47c <VCache::invalidateReadBuffer()>:
c000d47c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d480:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d486:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d48a:	c3                   	ret    
c000d48b:	90                   	nop

c000d48c <VCache::writeWriteBuffer()>:
c000d48c:	53                   	push   ebx
c000d48d:	83 ec 08             	sub    esp,0x8
c000d490:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d494:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d498:	74 1e                	je     c000d4b8 <VCache::writeWriteBuffer()+0x2c>
c000d49a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d49d:	83 ec 0c             	sub    esp,0xc
c000d4a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4ab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4ae:	50                   	push   eax
c000d4af:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4b2:	83 c4 20             	add    esp,0x20
c000d4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4b8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4bf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4c6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d4ca:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d4d1:	83 c4 08             	add    esp,0x8
c000d4d4:	5b                   	pop    ebx
c000d4d5:	c3                   	ret    
c000d4d6:	66 90                	xchg   ax,ax

c000d4d8 <VCache::~VCache()>:
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	ba 2c dd 01 c0       	mov    edx,0xc001dd2c
c000d4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e4:	89 10                	mov    DWORD PTR [eax],edx
c000d4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ea:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d4ed:	84 c0                	test   al,al
c000d4ef:	74 0f                	je     c000d500 <VCache::~VCache()+0x28>
c000d4f1:	83 ec 0c             	sub    esp,0xc
c000d4f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f8:	e8 8f ff ff ff       	call   c000d48c <VCache::writeWriteBuffer()>
c000d4fd:	83 c4 10             	add    esp,0x10
c000d500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d504:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d507:	83 ec 0c             	sub    esp,0xc
c000d50a:	50                   	push   eax
c000d50b:	e8 b9 a2 ff ff       	call   c00077c9 <free>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d517:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d51a:	83 ec 0c             	sub    esp,0xc
c000d51d:	50                   	push   eax
c000d51e:	e8 a6 a2 ff ff       	call   c00077c9 <free>
c000d523:	83 c4 10             	add    esp,0x10
c000d526:	90                   	nop
c000d527:	83 c4 0c             	add    esp,0xc
c000d52a:	c3                   	ret    
c000d52b:	90                   	nop

c000d52c <VCache::~VCache()>:
c000d52c:	83 ec 0c             	sub    esp,0xc
c000d52f:	83 ec 0c             	sub    esp,0xc
c000d532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d536:	e8 9d ff ff ff       	call   c000d4d8 <VCache::~VCache()>
c000d53b:	83 c4 10             	add    esp,0x10
c000d53e:	83 ec 08             	sub    esp,0x8
c000d541:	6a 44                	push   0x44
c000d543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d547:	e8 96 ce ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d54c:	83 c4 10             	add    esp,0x10
c000d54f:	83 c4 0c             	add    esp,0xc
c000d552:	c3                   	ret    
c000d553:	90                   	nop

c000d554 <VCache::write(unsigned long long, int, void*)>:
c000d554:	55                   	push   ebp
c000d555:	57                   	push   edi
c000d556:	56                   	push   esi
c000d557:	53                   	push   ebx
c000d558:	83 ec 1c             	sub    esp,0x1c
c000d55b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d55f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d567:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d56b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d56f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d577:	31 c0                	xor    eax,eax
c000d579:	8d 76 00             	lea    esi,[esi+0x0]
c000d57c:	39 e8                	cmp    eax,ebp
c000d57e:	7d 18                	jge    c000d598 <VCache::write(unsigned long long, int, void*)+0x44>
c000d580:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d583:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d589:	0f af c8             	imul   ecx,eax
c000d58c:	89 ca                	mov    edx,ecx
c000d58e:	01 f2                	add    edx,esi
c000d590:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d592:	40                   	inc    eax
c000d593:	eb e7                	jmp    c000d57c <VCache::write(unsigned long long, int, void*)+0x28>
c000d595:	8d 76 00             	lea    esi,[esi+0x0]
c000d598:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d59c:	74 0a                	je     c000d5a8 <VCache::write(unsigned long long, int, void*)+0x54>
c000d59e:	53                   	push   ebx
c000d59f:	e8 d8 fe ff ff       	call   c000d47c <VCache::invalidateReadBuffer()>
c000d5a4:	58                   	pop    eax
c000d5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5ac:	74 5a                	je     c000d608 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5ae:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5b5:	89 f8                	mov    eax,edi
c000d5b7:	99                   	cdq    
c000d5b8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5bb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5be:	31 c1                	xor    ecx,eax
c000d5c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5c4:	31 d0                	xor    eax,edx
c000d5c6:	09 c1                	or     ecx,eax
c000d5c8:	75 32                	jne    c000d5fc <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5ca:	83 fd 01             	cmp    ebp,0x1
c000d5cd:	75 2d                	jne    c000d5fc <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5cf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5d2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5d8:	0f af f9             	imul   edi,ecx
c000d5db:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d5e3:	40                   	inc    eax
c000d5e4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d5e7:	83 f8 40             	cmp    eax,0x40
c000d5ea:	75 74                	jne    c000d660 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5ec:	83 ec 0c             	sub    esp,0xc
c000d5ef:	53                   	push   ebx
c000d5f0:	e8 97 fe ff ff       	call   c000d48c <VCache::writeWriteBuffer()>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	eb 66                	jmp    c000d660 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5fa:	66 90                	xchg   ax,ax
c000d5fc:	83 ec 0c             	sub    esp,0xc
c000d5ff:	53                   	push   ebx
c000d600:	e8 87 fe ff ff       	call   c000d48c <VCache::writeWriteBuffer()>
c000d605:	83 c4 10             	add    esp,0x10
c000d608:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d60b:	83 fd 3f             	cmp    ebp,0x3f
c000d60e:	7f 24                	jg     c000d634 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d614:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d617:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d61a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d61e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d622:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d625:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d628:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d62e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d630:	eb 2e                	jmp    c000d660 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d632:	66 90                	xchg   ax,ax
c000d634:	8b 10                	mov    edx,DWORD PTR [eax]
c000d636:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d63a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d63e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d642:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d646:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d64a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d64e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d652:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d655:	83 c4 1c             	add    esp,0x1c
c000d658:	5b                   	pop    ebx
c000d659:	5e                   	pop    esi
c000d65a:	5f                   	pop    edi
c000d65b:	5d                   	pop    ebp
c000d65c:	ff e0                	jmp    eax
c000d65e:	66 90                	xchg   ax,ax
c000d660:	83 c4 1c             	add    esp,0x1c
c000d663:	31 c0                	xor    eax,eax
c000d665:	5b                   	pop    ebx
c000d666:	5e                   	pop    esi
c000d667:	5f                   	pop    edi
c000d668:	5d                   	pop    ebp
c000d669:	c3                   	ret    

c000d66a <VCache::read(unsigned long long, int, void*)>:
c000d66a:	55                   	push   ebp
c000d66b:	57                   	push   edi
c000d66c:	56                   	push   esi
c000d66d:	53                   	push   ebx
c000d66e:	83 ec 1c             	sub    esp,0x1c
c000d671:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d675:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d679:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d67d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d681:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d685:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d689:	31 c0                	xor    eax,eax
c000d68b:	90                   	nop
c000d68c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d690:	7d 16                	jge    c000d6a8 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d692:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d695:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d69b:	0f af c8             	imul   ecx,eax
c000d69e:	89 ca                	mov    edx,ecx
c000d6a0:	01 f2                	add    edx,esi
c000d6a2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d6a4:	40                   	inc    eax
c000d6a5:	eb e5                	jmp    c000d68c <VCache::read(unsigned long long, int, void*)+0x22>
c000d6a7:	90                   	nop
c000d6a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6ac:	74 0e                	je     c000d6bc <VCache::read(unsigned long long, int, void*)+0x52>
c000d6ae:	83 ec 0c             	sub    esp,0xc
c000d6b1:	53                   	push   ebx
c000d6b2:	e8 d5 fd ff ff       	call   c000d48c <VCache::writeWriteBuffer()>
c000d6b7:	83 c4 10             	add    esp,0x10
c000d6ba:	66 90                	xchg   ax,ax
c000d6bc:	83 ec 0c             	sub    esp,0xc
c000d6bf:	53                   	push   ebx
c000d6c0:	e8 b7 fd ff ff       	call   c000d47c <VCache::invalidateReadBuffer()>
c000d6c5:	83 c4 0c             	add    esp,0xc
c000d6c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6cb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6d1:	6a 00                	push   0x0
c000d6d3:	56                   	push   esi
c000d6d4:	e8 f7 2d ff ff       	call   c00004d0 <memset>
c000d6d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6de:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d6e2:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d6e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6ea:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d6ee:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d6f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6f6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d6f9:	83 c4 2c             	add    esp,0x2c
c000d6fc:	5b                   	pop    ebx
c000d6fd:	5e                   	pop    esi
c000d6fe:	5f                   	pop    edi
c000d6ff:	5d                   	pop    ebp
c000d700:	ff e0                	jmp    eax

c000d702 <Video::putrect(int, int, int, int, unsigned int)>:
c000d702:	55                   	push   ebp
c000d703:	57                   	push   edi
c000d704:	56                   	push   esi
c000d705:	53                   	push   ebx
c000d706:	83 ec 1c             	sub    esp,0x1c
c000d709:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d70d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d711:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d715:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d719:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d721:	01 df                	add    edi,ebx
c000d723:	39 fb                	cmp    ebx,edi
c000d725:	7d 1f                	jge    c000d746 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d727:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d72b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d72f:	7d 12                	jge    c000d743 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d731:	8b 16                	mov    edx,DWORD PTR [esi]
c000d733:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d737:	53                   	push   ebx
c000d738:	55                   	push   ebp
c000d739:	45                   	inc    ebp
c000d73a:	56                   	push   esi
c000d73b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d73e:	83 c4 10             	add    esp,0x10
c000d741:	eb e8                	jmp    c000d72b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d743:	43                   	inc    ebx
c000d744:	eb dd                	jmp    c000d723 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d746:	83 c4 1c             	add    esp,0x1c
c000d749:	5b                   	pop    ebx
c000d74a:	5e                   	pop    esi
c000d74b:	5f                   	pop    edi
c000d74c:	5d                   	pop    ebp
c000d74d:	c3                   	ret    

c000d74e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	31 ff                	xor    edi,edi
c000d752:	56                   	push   esi
c000d753:	53                   	push   ebx
c000d754:	83 ec 1c             	sub    esp,0x1c
c000d757:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d75b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d75f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d766:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d773:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d777:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d77a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d77e:	01 f9                	add    ecx,edi
c000d780:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d784:	7d 2f                	jge    c000d7b5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d786:	31 f6                	xor    esi,esi
c000d788:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d78c:	01 f2                	add    edx,esi
c000d78e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d792:	7d 1a                	jge    c000d7ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d794:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d797:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d79a:	46                   	inc    esi
c000d79b:	51                   	push   ecx
c000d79c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7a0:	52                   	push   edx
c000d7a1:	55                   	push   ebp
c000d7a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7a5:	83 c4 10             	add    esp,0x10
c000d7a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7ac:	eb da                	jmp    c000d788 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7ae:	47                   	inc    edi
c000d7af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7b3:	eb c5                	jmp    c000d77a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7b5:	83 c4 1c             	add    esp,0x1c
c000d7b8:	5b                   	pop    ebx
c000d7b9:	5e                   	pop    esi
c000d7ba:	5f                   	pop    edi
c000d7bb:	5d                   	pop    ebp
c000d7bc:	c3                   	ret    
c000d7bd:	90                   	nop

c000d7be <Video::blit(unsigned int*, int, int, int, int)>:
c000d7be:	55                   	push   ebp
c000d7bf:	57                   	push   edi
c000d7c0:	56                   	push   esi
c000d7c1:	53                   	push   ebx
c000d7c2:	83 ec 1c             	sub    esp,0x1c
c000d7c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7cd:	85 c0                	test   eax,eax
c000d7cf:	79 02                	jns    c000d7d3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7d1:	31 c0                	xor    eax,eax
c000d7d3:	c1 e0 02             	shl    eax,0x2
c000d7d6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7e2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7e6:	39 d8                	cmp    eax,ebx
c000d7e8:	7e 49                	jle    c000d833 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7ea:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7f0:	7c 41                	jl     c000d833 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7f2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7fa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7fe:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d802:	39 f9                	cmp    ecx,edi
c000d804:	7e 22                	jle    c000d828 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d806:	83 c5 04             	add    ebp,0x4
c000d809:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d80f:	7c 14                	jl     c000d825 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d811:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d813:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d816:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d81a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d81e:	56                   	push   esi
c000d81f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d822:	83 c4 10             	add    esp,0x10
c000d825:	47                   	inc    edi
c000d826:	eb d2                	jmp    c000d7fa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d82c:	43                   	inc    ebx
c000d82d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d831:	eb ab                	jmp    c000d7de <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d833:	83 c4 1c             	add    esp,0x1c
c000d836:	5b                   	pop    ebx
c000d837:	5e                   	pop    esi
c000d838:	5f                   	pop    edi
c000d839:	5d                   	pop    ebp
c000d83a:	c3                   	ret    
c000d83b:	90                   	nop

c000d83c <Video::clearScreen(unsigned int)>:
c000d83c:	57                   	push   edi
c000d83d:	56                   	push   esi
c000d83e:	53                   	push   ebx
c000d83f:	31 db                	xor    ebx,ebx
c000d841:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d845:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d84b:	7e 1f                	jle    c000d86c <Video::clearScreen(unsigned int)+0x30>
c000d84d:	31 ff                	xor    edi,edi
c000d84f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d855:	7e 12                	jle    c000d869 <Video::clearScreen(unsigned int)+0x2d>
c000d857:	8b 06                	mov    eax,DWORD PTR [esi]
c000d859:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d85d:	53                   	push   ebx
c000d85e:	57                   	push   edi
c000d85f:	47                   	inc    edi
c000d860:	56                   	push   esi
c000d861:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d864:	83 c4 10             	add    esp,0x10
c000d867:	eb e6                	jmp    c000d84f <Video::clearScreen(unsigned int)+0x13>
c000d869:	43                   	inc    ebx
c000d86a:	eb d9                	jmp    c000d845 <Video::clearScreen(unsigned int)+0x9>
c000d86c:	5b                   	pop    ebx
c000d86d:	5e                   	pop    esi
c000d86e:	5f                   	pop    edi
c000d86f:	c3                   	ret    

c000d870 <Video::putpixel(int, int, unsigned int)>:
c000d870:	c7 44 24 04 34 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd34
c000d878:	e9 be 28 00 00       	jmp    c001013b <KePanic(char const*)>
c000d87d:	90                   	nop

c000d87e <Video::Video(char const*)>:
c000d87e:	83 ec 0c             	sub    esp,0xc
c000d881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d885:	83 ec 08             	sub    esp,0x8
c000d888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d88c:	50                   	push   eax
c000d88d:	e8 1e e2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	ba a4 dd 01 c0       	mov    edx,0xc001dda4
c000d89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89e:	89 10                	mov    DWORD PTR [eax],edx
c000d8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8ae:	90                   	nop
c000d8af:	83 c4 0c             	add    esp,0xc
c000d8b2:	c3                   	ret    
c000d8b3:	90                   	nop

c000d8b4 <Video::~Video()>:
c000d8b4:	83 ec 0c             	sub    esp,0xc
c000d8b7:	ba a4 dd 01 c0       	mov    edx,0xc001dda4
c000d8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c0:	89 10                	mov    DWORD PTR [eax],edx
c000d8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c6:	83 ec 0c             	sub    esp,0xc
c000d8c9:	50                   	push   eax
c000d8ca:	e8 4b df ff ff       	call   c000b81a <Device::~Device()>
c000d8cf:	83 c4 10             	add    esp,0x10
c000d8d2:	90                   	nop
c000d8d3:	83 c4 0c             	add    esp,0xc
c000d8d6:	c3                   	ret    
c000d8d7:	90                   	nop

c000d8d8 <Video::~Video()>:
c000d8d8:	83 ec 0c             	sub    esp,0xc
c000d8db:	83 ec 0c             	sub    esp,0xc
c000d8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e2:	e8 cd ff ff ff       	call   c000d8b4 <Video::~Video()>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	83 ec 08             	sub    esp,0x8
c000d8ed:	68 64 01 00 00       	push   0x164
c000d8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f6:	e8 e7 ca ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d8fb:	83 c4 10             	add    esp,0x10
c000d8fe:	83 c4 0c             	add    esp,0xc
c000d901:	c3                   	ret    

c000d902 <Video::isMonochrome()>:
c000d902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d906:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d90c:	c3                   	ret    
c000d90d:	90                   	nop

c000d90e <Video::getWidth()>:
c000d90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d912:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d918:	c3                   	ret    
c000d919:	90                   	nop

c000d91a <Video::getHeight()>:
c000d91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d91e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d924:	c3                   	ret    
c000d925:	90                   	nop

c000d926 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d926:	55                   	push   ebp
c000d927:	57                   	push   edi
c000d928:	56                   	push   esi
c000d929:	53                   	push   ebx
c000d92a:	83 ec 2c             	sub    esp,0x2c
c000d92d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d931:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d935:	83 f8 01             	cmp    eax,0x1
c000d938:	19 c9                	sbb    ecx,ecx
c000d93a:	31 db                	xor    ebx,ebx
c000d93c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d940:	89 cd                	mov    ebp,ecx
c000d942:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d94a:	f7 d5                	not    ebp
c000d94c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d952:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d956:	01 d8                	add    eax,ebx
c000d958:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d95c:	56                   	push   esi
c000d95d:	e8 b8 ff ff ff       	call   c000d91a <Video::getHeight()>
c000d962:	59                   	pop    ecx
c000d963:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d967:	7e 70                	jle    c000d9d9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d969:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d96d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d971:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d974:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d978:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d97c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d983:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d987:	89 f8                	mov    eax,edi
c000d989:	83 c0 20             	add    eax,0x20
c000d98c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d990:	56                   	push   esi
c000d991:	e8 78 ff ff ff       	call   c000d90e <Video::getWidth()>
c000d996:	5a                   	pop    edx
c000d997:	39 c7                	cmp    edi,eax
c000d999:	7d 34                	jge    c000d9cf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d99b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9a0:	74 05                	je     c000d9a7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9a2:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9a4:	55                   	push   ebp
c000d9a5:	eb 0d                	jmp    c000d9b4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9a7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9ac:	74 12                	je     c000d9c0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9ae:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9b8:	57                   	push   edi
c000d9b9:	56                   	push   esi
c000d9ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9c4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9c8:	47                   	inc    edi
c000d9c9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9cd:	75 c1                	jne    c000d990 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9cf:	43                   	inc    ebx
c000d9d0:	83 fb 20             	cmp    ebx,0x20
c000d9d3:	0f 85 79 ff ff ff    	jne    c000d952 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9d9:	83 c4 2c             	add    esp,0x2c
c000d9dc:	5b                   	pop    ebx
c000d9dd:	5e                   	pop    esi
c000d9de:	5f                   	pop    edi
c000d9df:	5d                   	pop    ebp
c000d9e0:	c3                   	ret    
c000d9e1:	90                   	nop

c000d9e2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9e2:	55                   	push   ebp
c000d9e3:	57                   	push   edi
c000d9e4:	56                   	push   esi
c000d9e5:	53                   	push   ebx
c000d9e6:	83 ec 28             	sub    esp,0x28
c000d9e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9ed:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9f1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9f5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d9f9:	c1 e6 08             	shl    esi,0x8
c000d9fc:	01 c6                	add    esi,eax
c000d9fe:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da02:	c1 e0 08             	shl    eax,0x8
c000da05:	01 d0                	add    eax,edx
c000da07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da0f:	0f af c6             	imul   eax,esi
c000da12:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da19:	50                   	push   eax
c000da1a:	e8 9a 9d ff ff       	call   c00077b9 <malloc>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 c7                	mov    edi,eax
c000da24:	85 c0                	test   eax,eax
c000da26:	75 10                	jne    c000da38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	68 55 dd 01 c0       	push   0xc001dd55
c000da30:	e8 06 27 00 00       	call   c001013b <KePanic(char const*)>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da3b:	ba 12 00 00 00       	mov    edx,0x12
c000da40:	84 c0                	test   al,al
c000da42:	74 11                	je     c000da55 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da44:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da48:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da4c:	c1 fa 03             	sar    edx,0x3
c000da4f:	0f af d1             	imul   edx,ecx
c000da52:	83 c2 12             	add    edx,0x12
c000da55:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da59:	74 04                	je     c000da5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da5b:	85 f6                	test   esi,esi
c000da5d:	75 12                	jne    c000da71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da5f:	83 ec 0c             	sub    esp,0xc
c000da62:	68 65 dd 01 c0       	push   0xc001dd65
c000da67:	e8 6c ca ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000da6c:	e9 b8 00 00 00       	jmp    c000db29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da71:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da75:	80 f9 02             	cmp    cl,0x2
c000da78:	0f 85 96 00 00 00    	jne    c000db14 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da7e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da83:	75 0e                	jne    c000da93 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da85:	84 c0                	test   al,al
c000da87:	75 0a                	jne    c000da93 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da89:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da8c:	83 e8 18             	sub    eax,0x18
c000da8f:	a8 f7                	test   al,0xf7
c000da91:	74 0a                	je     c000da9d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	68 7a dd 01 c0       	push   0xc001dd7a
c000da9b:	eb 7f                	jmp    c000db1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da9d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daa5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000daad:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dab1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dab9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dabd:	75 0c                	jne    c000dacb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dabf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dac4:	c1 e0 18             	shl    eax,0x18
c000dac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dacb:	45                   	inc    ebp
c000dacc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dad1:	c1 e1 10             	shl    ecx,0x10
c000dad4:	89 c8                	mov    eax,ecx
c000dad6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dadb:	c1 e1 08             	shl    ecx,0x8
c000dade:	09 c1                	or     ecx,eax
c000dae0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dae4:	09 c1                	or     ecx,eax
c000dae6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000daea:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000daee:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000daf2:	c1 f8 03             	sar    eax,0x3
c000daf5:	01 c2                	add    edx,eax
c000daf7:	89 e8                	mov    eax,ebp
c000daf9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dafd:	39 c6                	cmp    esi,eax
c000daff:	7f b0                	jg     c000dab1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db01:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db09:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db0c:	7e 22                	jle    c000db30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db0e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db12:	eb 99                	jmp    c000daad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db14:	50                   	push   eax
c000db15:	50                   	push   eax
c000db16:	51                   	push   ecx
c000db17:	68 88 dd 01 c0       	push   0xc001dd88
c000db1c:	e8 b7 c9 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000db21:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db24:	e8 a0 9c ff ff       	call   c00077c9 <free>
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	31 ff                	xor    edi,edi
c000db2e:	eb 0f                	jmp    c000db3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db34:	89 30                	mov    DWORD PTR [eax],esi
c000db36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db3a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db3d:	89 30                	mov    DWORD PTR [eax],esi
c000db3f:	83 c4 1c             	add    esp,0x1c
c000db42:	89 f8                	mov    eax,edi
c000db44:	5b                   	pop    ebx
c000db45:	5e                   	pop    esi
c000db46:	5f                   	pop    edi
c000db47:	5d                   	pop    ebp
c000db48:	c3                   	ret    
c000db49:	90                   	nop

c000db4a <Video::putTGA(int, int, unsigned char*, int)>:
c000db4a:	55                   	push   ebp
c000db4b:	57                   	push   edi
c000db4c:	56                   	push   esi
c000db4d:	53                   	push   ebx
c000db4e:	83 ec 28             	sub    esp,0x28
c000db51:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db55:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db59:	50                   	push   eax
c000db5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db5e:	50                   	push   eax
c000db5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db63:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db67:	56                   	push   esi
c000db68:	e8 75 fe ff ff       	call   c000d9e2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db6d:	83 c4 20             	add    esp,0x20
c000db70:	85 c0                	test   eax,eax
c000db72:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db76:	74 35                	je     c000dbad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db78:	89 c7                	mov    edi,eax
c000db7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db7e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db82:	39 d8                	cmp    eax,ebx
c000db84:	7e 27                	jle    c000dbad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db86:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db8e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db92:	39 e8                	cmp    eax,ebp
c000db94:	7e 14                	jle    c000dbaa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db96:	8b 06                	mov    eax,DWORD PTR [esi]
c000db98:	83 c7 04             	add    edi,0x4
c000db9b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db9e:	53                   	push   ebx
c000db9f:	55                   	push   ebp
c000dba0:	45                   	inc    ebp
c000dba1:	56                   	push   esi
c000dba2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dba5:	83 c4 10             	add    esp,0x10
c000dba8:	eb e0                	jmp    c000db8a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbaa:	43                   	inc    ebx
c000dbab:	eb cd                	jmp    c000db7a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbad:	83 c4 1c             	add    esp,0x1c
c000dbb0:	5b                   	pop    ebx
c000dbb1:	5e                   	pop    esi
c000dbb2:	5f                   	pop    edi
c000dbb3:	5d                   	pop    ebp
c000dbb4:	c3                   	ret    
c000dbb5:	66 90                	xchg   ax,ax
c000dbb7:	90                   	nop

c000dbb8 <ACPI::close(int, int, void*)>:
c000dbb8:	83 ec 1c             	sub    esp,0x1c
c000dbbb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbc3:	74 0b                	je     c000dbd0 <ACPI::close(int, int, void*)+0x18>
c000dbc5:	b8 00 00 00 00       	mov    eax,0x0
c000dbca:	e9 9d 00 00 00       	jmp    c000dc6c <ACPI::close(int, int, void*)+0xb4>
c000dbcf:	90                   	nop
c000dbd0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbd5:	75 29                	jne    c000dc00 <ACPI::close(int, int, void*)+0x48>
c000dbd7:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	74 08                	je     c000dbe8 <ACPI::close(int, int, void*)+0x30>
c000dbe0:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000dbe5:	ff d0                	call   eax
c000dbe7:	90                   	nop
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	68 e4 dd 01 c0       	push   0xc001dde4
c000dbf0:	e8 46 25 00 00       	call   c001013b <KePanic(char const*)>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbfd:	eb 6d                	jmp    c000dc6c <ACPI::close(int, int, void*)+0xb4>
c000dbff:	90                   	nop
c000dc00:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc05:	75 5d                	jne    c000dc64 <ACPI::close(int, int, void*)+0xac>
c000dc07:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000dc0c:	85 c0                	test   eax,eax
c000dc0e:	74 08                	je     c000dc18 <ACPI::close(int, int, void*)+0x60>
c000dc10:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000dc15:	ff d0                	call   eax
c000dc17:	90                   	nop
c000dc18:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc1d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc20:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc24:	25 ff 00 00 00       	and    eax,0xff
c000dc29:	83 e0 02             	and    eax,0x2
c000dc2c:	74 1e                	je     c000dc4c <ACPI::close(int, int, void*)+0x94>
c000dc2e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc39:	89 c2                	mov    edx,eax
c000dc3b:	ec                   	in     al,dx
c000dc3c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc40:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc44:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc48:	eb d6                	jmp    c000dc20 <ACPI::close(int, int, void*)+0x68>
c000dc4a:	66 90                	xchg   ax,ax
c000dc4c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc53:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc58:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc60:	ee                   	out    dx,al
c000dc61:	8d 76 00             	lea    esi,[esi+0x0]
c000dc64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc69:	8d 76 00             	lea    esi,[esi+0x0]
c000dc6c:	83 c4 1c             	add    esp,0x1c
c000dc6f:	c3                   	ret    

c000dc70 <findRSDP()>:
c000dc70:	83 ec 1c             	sub    esp,0x1c
c000dc73:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000dc78:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc7e:	83 e0 04             	and    eax,0x4
c000dc81:	84 c0                	test   al,al
c000dc83:	75 07                	jne    c000dc8c <findRSDP()+0x1c>
c000dc85:	b8 00 00 00 00       	mov    eax,0x0
c000dc8a:	eb 70                	jmp    c000dcfc <findRSDP()+0x8c>
c000dc8c:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c000dc91:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc96:	7f 1c                	jg     c000dcb4 <findRSDP()+0x44>
c000dc98:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000dc9d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dca3:	83 e2 fb             	and    edx,0xfffffffb
c000dca6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcac:	b8 00 00 00 00       	mov    eax,0x0
c000dcb1:	eb 49                	jmp    c000dcfc <findRSDP()+0x8c>
c000dcb3:	90                   	nop
c000dcb4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcbc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dcc4:	77 2e                	ja     c000dcf4 <findRSDP()+0x84>
c000dcc6:	83 ec 04             	sub    esp,0x4
c000dcc9:	6a 08                	push   0x8
c000dccb:	68 7f de 01 c0       	push   0xc001de7f
c000dcd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcd4:	e8 b7 26 ff ff       	call   c0000390 <memcmp>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 94 c0             	sete   al
c000dce1:	84 c0                	test   al,al
c000dce3:	74 07                	je     c000dcec <findRSDP()+0x7c>
c000dce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dce9:	eb 11                	jmp    c000dcfc <findRSDP()+0x8c>
c000dceb:	90                   	nop
c000dcec:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dcf1:	eb c9                	jmp    c000dcbc <findRSDP()+0x4c>
c000dcf3:	90                   	nop
c000dcf4:	b8 00 00 00 00       	mov    eax,0x0
c000dcf9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcfc:	83 c4 1c             	add    esp,0x1c
c000dcff:	c3                   	ret    

c000dd00 <loadACPITables(unsigned char*)>:
c000dd00:	57                   	push   edi
c000dd01:	56                   	push   esi
c000dd02:	53                   	push   ebx
c000dd03:	83 ec 60             	sub    esp,0x60
c000dd06:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000dd0b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd11:	83 e0 04             	and    eax,0x4
c000dd14:	84 c0                	test   al,al
c000dd16:	0f 84 3c 02 00 00    	je     c000df58 <loadACPITables(unsigned char*)+0x258>
c000dd1c:	a0 a0 2c 02 c0       	mov    al,ds:0xc0022ca0
c000dd21:	84 c0                	test   al,al
c000dd23:	74 77                	je     c000dd9c <loadACPITables(unsigned char*)+0x9c>
c000dd25:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd29:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd34:	83 e8 24             	sub    eax,0x24
c000dd37:	c1 e8 03             	shr    eax,0x3
c000dd3a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd3e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd46:	66 90                	xchg   ax,ax
c000dd48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd4c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd50:	0f 8d b6 00 00 00    	jge    c000de0c <loadACPITables(unsigned char*)+0x10c>
c000dd56:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd5a:	83 c0 24             	add    eax,0x24
c000dd5d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd69:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd6d:	c1 e0 03             	shl    eax,0x3
c000dd70:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd74:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd7d:	89 c1                	mov    ecx,eax
c000dd7f:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000dd84:	8d 50 01             	lea    edx,[eax+0x1]
c000dd87:	89 15 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,edx
c000dd8d:	89 ca                	mov    edx,ecx
c000dd8f:	89 14 c5 a4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd55c],edx
c000dd96:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd9a:	eb ac                	jmp    c000dd48 <loadACPITables(unsigned char*)+0x48>
c000dd9c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dda0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dda4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dda8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddab:	83 e8 24             	sub    eax,0x24
c000ddae:	c1 e8 02             	shr    eax,0x2
c000ddb1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddb5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ddbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddc4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddc8:	7d 42                	jge    c000de0c <loadACPITables(unsigned char*)+0x10c>
c000ddca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddce:	83 c0 24             	add    eax,0x24
c000ddd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddd5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddd9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dddd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dde1:	c1 e0 02             	shl    eax,0x2
c000dde4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dde8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddec:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddee:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000ddf3:	8d 50 01             	lea    edx,[eax+0x1]
c000ddf6:	89 15 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,edx
c000ddfc:	89 ca                	mov    edx,ecx
c000ddfe:	89 14 c5 a4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd55c],edx
c000de05:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de09:	eb b5                	jmp    c000ddc0 <loadACPITables(unsigned char*)+0xc0>
c000de0b:	90                   	nop
c000de0c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de14:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000de19:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de1d:	0f 8d 39 01 00 00    	jge    c000df5c <loadACPITables(unsigned char*)+0x25c>
c000de23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de27:	8b 04 c5 a4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd55c]
c000de2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de36:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de3e:	25 ff 0f 00 00       	and    eax,0xfff
c000de43:	89 c6                	mov    esi,eax
c000de45:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000de4b:	83 ec 0c             	sub    esp,0xc
c000de4e:	6a 01                	push   0x1
c000de50:	e8 30 b4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000de55:	83 c4 10             	add    esp,0x10
c000de58:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de5c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de62:	83 ec 0c             	sub    esp,0xc
c000de65:	6a 01                	push   0x1
c000de67:	6a 01                	push   0x1
c000de69:	50                   	push   eax
c000de6a:	52                   	push   edx
c000de6b:	53                   	push   ebx
c000de6c:	e8 a3 bd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de71:	83 c4 20             	add    esp,0x20
c000de74:	09 f0                	or     eax,esi
c000de76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de7a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de7e:	c1 e0 03             	shl    eax,0x3
c000de81:	05 a0 2a 02 c0       	add    eax,0xc0022aa0
c000de86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de92:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dea6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000deaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000deae:	89 c6                	mov    esi,eax
c000deb0:	89 d7                	mov    edi,edx
c000deb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000deb4:	89 c8                	mov    eax,ecx
c000deb6:	89 fa                	mov    edx,edi
c000deb8:	89 f3                	mov    ebx,esi
c000deba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000debe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dec2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000decd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ded1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ded5:	05 00 10 00 00       	add    eax,0x1000
c000deda:	c1 e8 0c             	shr    eax,0xc
c000dedd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dee1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dee5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deed:	25 ff 0f 00 00       	and    eax,0xfff
c000def2:	89 c6                	mov    esi,eax
c000def4:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000defa:	83 ec 0c             	sub    esp,0xc
c000defd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df01:	e8 7f b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df0d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	6a 01                	push   0x1
c000df18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df1c:	50                   	push   eax
c000df1d:	52                   	push   edx
c000df1e:	53                   	push   ebx
c000df1f:	e8 f0 bc ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df24:	83 c4 20             	add    esp,0x20
c000df27:	09 f0                	or     eax,esi
c000df29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df31:	83 ec 0c             	sub    esp,0xc
c000df34:	50                   	push   eax
c000df35:	e8 7b b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df3a:	83 c4 10             	add    esp,0x10
c000df3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df45:	89 14 c5 a4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd55c],edx
c000df4c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df50:	e9 bf fe ff ff       	jmp    c000de14 <loadACPITables(unsigned char*)+0x114>
c000df55:	8d 76 00             	lea    esi,[esi+0x0]
c000df58:	90                   	nop
c000df59:	8d 76 00             	lea    esi,[esi+0x0]
c000df5c:	83 c4 60             	add    esp,0x60
c000df5f:	5b                   	pop    ebx
c000df60:	5e                   	pop    esi
c000df61:	5f                   	pop    edi
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <findRSDT(unsigned char*)>:
c000df64:	57                   	push   edi
c000df65:	56                   	push   esi
c000df66:	53                   	push   ebx
c000df67:	83 ec 50             	sub    esp,0x50
c000df6a:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000df6f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df75:	83 e0 04             	and    eax,0x4
c000df78:	84 c0                	test   al,al
c000df7a:	75 0c                	jne    c000df88 <findRSDT(unsigned char*)+0x24>
c000df7c:	b8 00 00 00 00       	mov    eax,0x0
c000df81:	e9 26 01 00 00       	jmp    c000e0ac <findRSDT(unsigned char*)+0x148>
c000df86:	66 90                	xchg   ax,ax
c000df88:	89 e0                	mov    eax,esp
c000df8a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df8e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df96:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfa2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfa6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfaa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfb2:	89 c6                	mov    esi,eax
c000dfb4:	89 d7                	mov    edi,edx
c000dfb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfb8:	89 c8                	mov    eax,ecx
c000dfba:	89 fa                	mov    edx,edi
c000dfbc:	89 f3                	mov    ebx,esi
c000dfbe:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfc2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfc6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfca:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfce:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dfd2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dfda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfe2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dff2:	25 ff 0f 00 00       	and    eax,0xfff
c000dff7:	89 c6                	mov    esi,eax
c000dff9:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000dfff:	83 ec 0c             	sub    esp,0xc
c000e002:	6a 02                	push   0x2
c000e004:	e8 7c b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e010:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e016:	83 ec 0c             	sub    esp,0xc
c000e019:	6a 01                	push   0x1
c000e01b:	6a 02                	push   0x2
c000e01d:	50                   	push   eax
c000e01e:	52                   	push   edx
c000e01f:	53                   	push   ebx
c000e020:	e8 ef bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e025:	83 c4 20             	add    esp,0x20
c000e028:	09 f0                	or     eax,esi
c000e02a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e02e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e032:	25 ff 0f 00 00       	and    eax,0xfff
c000e037:	89 c6                	mov    esi,eax
c000e039:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000e03f:	83 ec 0c             	sub    esp,0xc
c000e042:	6a 02                	push   0x2
c000e044:	e8 3c b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e050:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	6a 01                	push   0x1
c000e05b:	6a 02                	push   0x2
c000e05d:	50                   	push   eax
c000e05e:	52                   	push   edx
c000e05f:	53                   	push   ebx
c000e060:	e8 af bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e065:	83 c4 20             	add    esp,0x20
c000e068:	09 f0                	or     eax,esi
c000e06a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e06e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e073:	75 13                	jne    c000e088 <findRSDT(unsigned char*)+0x124>
c000e075:	c6 05 a0 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022ca0,0x0
c000e07c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e080:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e084:	eb 22                	jmp    c000e0a8 <findRSDT(unsigned char*)+0x144>
c000e086:	66 90                	xchg   ax,ax
c000e088:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e08d:	75 11                	jne    c000e0a0 <findRSDT(unsigned char*)+0x13c>
c000e08f:	c6 05 a0 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ca0,0x1
c000e096:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e09a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e09e:	eb 08                	jmp    c000e0a8 <findRSDT(unsigned char*)+0x144>
c000e0a0:	b8 00 00 00 00       	mov    eax,0x0
c000e0a5:	eb 05                	jmp    c000e0ac <findRSDT(unsigned char*)+0x148>
c000e0a7:	90                   	nop
c000e0a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0ac:	83 c4 50             	add    esp,0x50
c000e0af:	5b                   	pop    ebx
c000e0b0:	5e                   	pop    esi
c000e0b1:	5f                   	pop    edi
c000e0b2:	c3                   	ret    
c000e0b3:	90                   	nop

c000e0b4 <findDataTable(unsigned char*, char*)>:
c000e0b4:	83 ec 1c             	sub    esp,0x1c
c000e0b7:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e0bc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0c2:	83 e0 04             	and    eax,0x4
c000e0c5:	84 c0                	test   al,al
c000e0c7:	75 07                	jne    c000e0d0 <findDataTable(unsigned char*, char*)+0x1c>
c000e0c9:	b8 00 00 00 00       	mov    eax,0x0
c000e0ce:	eb 58                	jmp    c000e128 <findDataTable(unsigned char*, char*)+0x74>
c000e0d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0d8:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000e0dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0e1:	7d 3d                	jge    c000e120 <findDataTable(unsigned char*, char*)+0x6c>
c000e0e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0e7:	c1 e0 03             	shl    eax,0x3
c000e0ea:	05 a0 2a 02 c0       	add    eax,0xc0022aa0
c000e0ef:	83 ec 04             	sub    esp,0x4
c000e0f2:	6a 04                	push   0x4
c000e0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f8:	50                   	push   eax
c000e0f9:	e8 92 22 ff ff       	call   c0000390 <memcmp>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	0f 94 c0             	sete   al
c000e106:	84 c0                	test   al,al
c000e108:	74 0e                	je     c000e118 <findDataTable(unsigned char*, char*)+0x64>
c000e10a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10e:	8b 04 c5 a4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd55c]
c000e115:	eb 11                	jmp    c000e128 <findDataTable(unsigned char*, char*)+0x74>
c000e117:	90                   	nop
c000e118:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e11c:	eb ba                	jmp    c000e0d8 <findDataTable(unsigned char*, char*)+0x24>
c000e11e:	66 90                	xchg   ax,ax
c000e120:	b8 00 00 00 00       	mov    eax,0x0
c000e125:	8d 76 00             	lea    esi,[esi+0x0]
c000e128:	83 c4 1c             	add    esp,0x1c
c000e12b:	c3                   	ret    

c000e12c <scanMADT()>:
c000e12c:	53                   	push   ebx
c000e12d:	83 ec 38             	sub    esp,0x38
c000e130:	a1 b0 04 02 c0       	mov    eax,ds:0xc00204b0
c000e135:	25 00 04 00 00       	and    eax,0x400
c000e13a:	74 14                	je     c000e150 <scanMADT()+0x24>
c000e13c:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e141:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e147:	83 e2 fb             	and    edx,0xfffffffb
c000e14a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e150:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e155:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e15b:	83 e0 04             	and    eax,0x4
c000e15e:	84 c0                	test   al,al
c000e160:	0f 84 8a 04 00 00    	je     c000e5f0 <scanMADT()+0x4c4>
c000e166:	e8 05 fb ff ff       	call   c000dc70 <findRSDP()>
c000e16b:	a3 ac 2c 02 c0       	mov    ds:0xc0022cac,eax
c000e170:	a1 ac 2c 02 c0       	mov    eax,ds:0xc0022cac
c000e175:	85 c0                	test   eax,eax
c000e177:	75 1b                	jne    c000e194 <scanMADT()+0x68>
c000e179:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e17e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e184:	83 e2 fb             	and    edx,0xfffffffb
c000e187:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e18d:	e9 66 04 00 00       	jmp    c000e5f8 <scanMADT()+0x4cc>
c000e192:	66 90                	xchg   ax,ax
c000e194:	a1 ac 2c 02 c0       	mov    eax,ds:0xc0022cac
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	50                   	push   eax
c000e19d:	e8 c2 fd ff ff       	call   c000df64 <findRSDT(unsigned char*)>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	a3 a8 2c 02 c0       	mov    ds:0xc0022ca8,eax
c000e1aa:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e1af:	85 c0                	test   eax,eax
c000e1b1:	75 19                	jne    c000e1cc <scanMADT()+0xa0>
c000e1b3:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e1b8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1be:	83 e2 fb             	and    edx,0xfffffffb
c000e1c1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1c7:	e9 2c 04 00 00       	jmp    c000e5f8 <scanMADT()+0x4cc>
c000e1cc:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e1d1:	83 ec 0c             	sub    esp,0xc
c000e1d4:	50                   	push   eax
c000e1d5:	e8 26 fb ff ff       	call   c000dd00 <loadACPITables(unsigned char*)>
c000e1da:	83 c4 10             	add    esp,0x10
c000e1dd:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e1e2:	83 ec 08             	sub    esp,0x8
c000e1e5:	68 88 de 01 c0       	push   0xc001de88
c000e1ea:	50                   	push   eax
c000e1eb:	e8 c4 fe ff ff       	call   c000e0b4 <findDataTable(unsigned char*, char*)>
c000e1f0:	83 c4 10             	add    esp,0x10
c000e1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1f7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e1fc:	75 1a                	jne    c000e218 <scanMADT()+0xec>
c000e1fe:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e203:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e209:	83 e2 fe             	and    edx,0xfffffffe
c000e20c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e212:	e9 e1 03 00 00       	jmp    c000e5f8 <scanMADT()+0x4cc>
c000e217:	90                   	nop
c000e218:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e224:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e227:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e22b:	0f 87 c7 03 00 00    	ja     c000e5f8 <scanMADT()+0x4cc>
c000e231:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e239:	0f 87 b9 03 00 00    	ja     c000e5f8 <scanMADT()+0x4cc>
c000e23f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e243:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e24b:	8d 50 01             	lea    edx,[eax+0x1]
c000e24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e252:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e256:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e25a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e25e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e262:	8d 50 01             	lea    edx,[eax+0x1]
c000e265:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e269:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e26d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e271:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e275:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e27a:	0f 86 74 03 00 00    	jbe    c000e5f4 <scanMADT()+0x4c8>
c000e280:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e285:	75 5d                	jne    c000e2e4 <scanMADT()+0x1b8>
c000e287:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e28b:	8d 50 01             	lea    edx,[eax+0x1]
c000e28e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e292:	8a 15 a0 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022ea0
c000e298:	81 e2 ff 00 00 00    	and    edx,0xff
c000e29e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2a2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2a6:	88 82 e0 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd120],al
c000e2ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2b0:	8d 42 01             	lea    eax,[edx+0x1]
c000e2b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2b7:	a0 a0 2e 02 c0       	mov    al,ds:0xc0022ea0
c000e2bc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2bf:	88 0d a0 2e 02 c0    	mov    BYTE PTR ds:0xc0022ea0,cl
c000e2c5:	25 ff 00 00 00       	and    eax,0xff
c000e2ca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ce:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2d2:	88 90 c0 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd140],dl
c000e2d8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2dd:	e9 f6 02 00 00       	jmp    c000e5d8 <scanMADT()+0x4ac>
c000e2e2:	66 90                	xchg   ax,ax
c000e2e4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2e9:	0f 85 29 01 00 00    	jne    c000e418 <scanMADT()+0x2ec>
c000e2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e2f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2fa:	8a 15 60 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d60
c000e300:	81 e2 ff 00 00 00    	and    edx,0xff
c000e306:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e30a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e30e:	88 82 80 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd280],al
c000e314:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e318:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e31c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e320:	01 d0                	add    eax,edx
c000e322:	83 c0 2c             	add    eax,0x2c
c000e325:	8a 00                	mov    al,BYTE PTR [eax]
c000e327:	31 d2                	xor    edx,edx
c000e329:	88 c2                	mov    dl,al
c000e32b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e32f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e336:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e33a:	25 ff 00 00 00       	and    eax,0xff
c000e33f:	c1 e0 08             	shl    eax,0x8
c000e342:	89 d1                	mov    ecx,edx
c000e344:	09 c1                	or     ecx,eax
c000e346:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e34a:	8d 50 02             	lea    edx,[eax+0x2]
c000e34d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e351:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e355:	25 ff 00 00 00       	and    eax,0xff
c000e35a:	c1 e0 10             	shl    eax,0x10
c000e35d:	09 c1                	or     ecx,eax
c000e35f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e363:	8d 50 03             	lea    edx,[eax+0x3]
c000e366:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e36a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e36e:	25 ff 00 00 00       	and    eax,0xff
c000e373:	c1 e0 18             	shl    eax,0x18
c000e376:	09 c1                	or     ecx,eax
c000e378:	89 ca                	mov    edx,ecx
c000e37a:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000e37f:	25 ff 00 00 00       	and    eax,0xff
c000e384:	89 14 85 a0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd260],edx
c000e38b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e390:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e398:	01 d0                	add    eax,edx
c000e39a:	83 c0 2c             	add    eax,0x2c
c000e39d:	8a 00                	mov    al,BYTE PTR [eax]
c000e39f:	31 d2                	xor    edx,edx
c000e3a1:	88 c2                	mov    dl,al
c000e3a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3b2:	25 ff 00 00 00       	and    eax,0xff
c000e3b7:	c1 e0 08             	shl    eax,0x8
c000e3ba:	89 d1                	mov    ecx,edx
c000e3bc:	09 c1                	or     ecx,eax
c000e3be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c2:	8d 50 02             	lea    edx,[eax+0x2]
c000e3c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3c9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3cd:	25 ff 00 00 00       	and    eax,0xff
c000e3d2:	c1 e0 10             	shl    eax,0x10
c000e3d5:	09 c1                	or     ecx,eax
c000e3d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3db:	8d 50 03             	lea    edx,[eax+0x3]
c000e3de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3e6:	25 ff 00 00 00       	and    eax,0xff
c000e3eb:	c1 e0 18             	shl    eax,0x18
c000e3ee:	09 c1                	or     ecx,eax
c000e3f0:	89 ca                	mov    edx,ecx
c000e3f2:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000e3f7:	25 ff 00 00 00       	and    eax,0xff
c000e3fc:	89 14 85 20 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd1e0],edx
c000e403:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e408:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000e40d:	40                   	inc    eax
c000e40e:	a2 60 2d 02 c0       	mov    ds:0xc0022d60,al
c000e413:	e9 c0 01 00 00       	jmp    c000e5d8 <scanMADT()+0x4ac>
c000e418:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e41d:	0f 85 fd 00 00 00    	jne    c000e520 <scanMADT()+0x3f4>
c000e423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e427:	8d 50 01             	lea    edx,[eax+0x1]
c000e42a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e42e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e432:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e436:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e43a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43e:	8d 50 01             	lea    edx,[eax+0x1]
c000e441:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e445:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e449:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e44d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e451:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e455:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e459:	01 d0                	add    eax,edx
c000e45b:	83 c0 2c             	add    eax,0x2c
c000e45e:	8a 00                	mov    al,BYTE PTR [eax]
c000e460:	31 d2                	xor    edx,edx
c000e462:	88 c2                	mov    dl,al
c000e464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e468:	8d 48 01             	lea    ecx,[eax+0x1]
c000e46b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e46f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e473:	25 ff 00 00 00       	and    eax,0xff
c000e478:	c1 e0 08             	shl    eax,0x8
c000e47b:	89 d1                	mov    ecx,edx
c000e47d:	09 c1                	or     ecx,eax
c000e47f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e483:	8d 50 02             	lea    edx,[eax+0x2]
c000e486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e48a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e48e:	25 ff 00 00 00       	and    eax,0xff
c000e493:	c1 e0 10             	shl    eax,0x10
c000e496:	09 c1                	or     ecx,eax
c000e498:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49c:	8d 50 03             	lea    edx,[eax+0x3]
c000e49f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4a7:	25 ff 00 00 00       	and    eax,0xff
c000e4ac:	c1 e0 18             	shl    eax,0x18
c000e4af:	09 c8                	or     eax,ecx
c000e4b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c2:	01 d0                	add    eax,edx
c000e4c4:	83 c0 2c             	add    eax,0x2c
c000e4c7:	8a 00                	mov    al,BYTE PTR [eax]
c000e4c9:	25 ff 00 00 00       	and    eax,0xff
c000e4ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4d2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4dd:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4e3:	c1 e2 08             	shl    edx,0x8
c000e4e6:	09 d0                	or     eax,edx
c000e4e8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4ed:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4f6:	25 ff 00 00 00       	and    eax,0xff
c000e4fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4ff:	88 90 c0 f1 01 c0    	mov    BYTE PTR [eax-0x3ffe0e40],dl
c000e505:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e509:	31 d2                	xor    edx,edx
c000e50b:	88 c2                	mov    dl,al
c000e50d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e512:	66 89 84 12 40 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd2c0],ax
c000e51a:	e9 b9 00 00 00       	jmp    c000e5d8 <scanMADT()+0x4ac>
c000e51f:	90                   	nop
c000e520:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e525:	0f 85 a1 00 00 00    	jne    c000e5cc <scanMADT()+0x4a0>
c000e52b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52f:	8d 50 01             	lea    edx,[eax+0x1]
c000e532:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e536:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e53a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e53e:	25 ff 00 00 00       	and    eax,0xff
c000e543:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e547:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e54b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54f:	01 d0                	add    eax,edx
c000e551:	83 c0 2c             	add    eax,0x2c
c000e554:	8a 00                	mov    al,BYTE PTR [eax]
c000e556:	31 d2                	xor    edx,edx
c000e558:	88 c2                	mov    dl,al
c000e55a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e55e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e561:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e565:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e569:	25 ff 00 00 00       	and    eax,0xff
c000e56e:	c1 e0 08             	shl    eax,0x8
c000e571:	09 d0                	or     eax,edx
c000e573:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e577:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e57c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e580:	8d 50 01             	lea    edx,[eax+0x1]
c000e583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e587:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e58b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e58f:	25 ff 00 00 00       	and    eax,0xff
c000e594:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59c:	c1 e0 08             	shl    eax,0x8
c000e59f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5a3:	89 c1                	mov    ecx,eax
c000e5a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a9:	c1 e0 18             	shl    eax,0x18
c000e5ac:	89 c3                	mov    ebx,eax
c000e5ae:	a1 b0 2c 02 c0       	mov    eax,ds:0xc0022cb0
c000e5b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5b6:	89 15 b0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cb0,edx
c000e5bc:	09 d9                	or     ecx,ebx
c000e5be:	89 ca                	mov    edx,ecx
c000e5c0:	89 14 85 c0 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd340],edx
c000e5c7:	eb 0f                	jmp    c000e5d8 <scanMADT()+0x4ac>
c000e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5cc:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5d1:	75 05                	jne    c000e5d8 <scanMADT()+0x4ac>
c000e5d3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5d8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5dc:	31 d2                	xor    edx,edx
c000e5de:	88 c2                	mov    dl,al
c000e5e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5e4:	01 d0                	add    eax,edx
c000e5e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5ea:	e9 31 fc ff ff       	jmp    c000e220 <scanMADT()+0xf4>
c000e5ef:	90                   	nop
c000e5f0:	90                   	nop
c000e5f1:	eb 05                	jmp    c000e5f8 <scanMADT()+0x4cc>
c000e5f3:	90                   	nop
c000e5f4:	90                   	nop
c000e5f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f8:	83 c4 38             	add    esp,0x38
c000e5fb:	5b                   	pop    ebx
c000e5fc:	c3                   	ret    
c000e5fd:	90                   	nop
c000e5fe:	66 90                	xchg   ax,ax

c000e600 <ACPI::ACPI()>:
c000e600:	83 ec 0c             	sub    esp,0xc
c000e603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e607:	83 ec 08             	sub    esp,0x8
c000e60a:	68 8d de 01 c0       	push   0xc001de8d
c000e60f:	50                   	push   eax
c000e610:	e8 9b d4 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000e615:	83 c4 10             	add    esp,0x10
c000e618:	ba c4 df 01 c0       	mov    edx,0xc001dfc4
c000e61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e621:	89 10                	mov    DWORD PTR [eax],edx
c000e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e627:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e632:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e640:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e64a:	e8 dd fa ff ff       	call   c000e12c <scanMADT()>
c000e64f:	90                   	nop
c000e650:	83 c4 0c             	add    esp,0xc
c000e653:	c3                   	ret    

c000e654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e654:	83 ec 2c             	sub    esp,0x2c
c000e657:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e65b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e65f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e663:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e667:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e66c:	88 d0                	mov    al,dl
c000e66e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e672:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e677:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e67f:	90                   	nop
c000e680:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e684:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e68a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e68e:	0f 8d 9c 00 00 00    	jge    c000e730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e694:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e698:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e69c:	83 c2 2a             	add    edx,0x2a
c000e69f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6a3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6a8:	75 7a                	jne    c000e724 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6b2:	83 c2 2a             	add    edx,0x2a
c000e6b5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6b9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6bd:	75 65                	jne    c000e724 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6bf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6c4:	74 3a                	je     c000e700 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ce:	83 c2 2a             	add    edx,0x2a
c000e6d1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6dc:	39 c2                	cmp    edx,eax
c000e6de:	74 10                	je     c000e6f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	68 08 de 01 c0       	push   0xc001de08
c000e6e8:	e8 4e 1a 00 00       	call   c001013b <KePanic(char const*)>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	68 92 de 01 c0       	push   0xc001de92
c000e6f8:	e8 3e 1a 00 00       	call   c001013b <KePanic(char const*)>
c000e6fd:	83 c4 10             	add    esp,0x10
c000e700:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e704:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e708:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e70c:	83 c2 2a             	add    edx,0x2a
c000e70f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e713:	8b 02                	mov    eax,DWORD PTR [edx]
c000e715:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e718:	89 01                	mov    DWORD PTR [ecx],eax
c000e71a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e71d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e722:	66 90                	xchg   ax,ax
c000e724:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e728:	e9 53 ff ff ff       	jmp    c000e680 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e72d:	8d 76 00             	lea    esi,[esi+0x0]
c000e730:	90                   	nop
c000e731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e735:	83 c4 2c             	add    esp,0x2c
c000e738:	c2 04 00             	ret    0x4
c000e73b:	90                   	nop

c000e73c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e73c:	83 ec 1c             	sub    esp,0x1c
c000e73f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e743:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e747:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e74b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e750:	88 c8                	mov    al,cl
c000e752:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e756:	88 d0                	mov    al,dl
c000e758:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e760:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e76d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e771:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e779:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e77f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e783:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e78a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e793:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e799:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e79d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a4:	83 c2 2a             	add    edx,0x2a
c000e7a7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7af:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7c0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7df:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7e5:	3d 00 02 00 00       	cmp    eax,0x200
c000e7ea:	75 10                	jne    c000e7fc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7ec:	83 ec 0c             	sub    esp,0xc
c000e7ef:	68 a1 de 01 c0       	push   0xc001dea1
c000e7f4:	e8 42 19 00 00       	call   c001013b <KePanic(char const*)>
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	90                   	nop
c000e7fd:	83 c4 1c             	add    esp,0x1c
c000e800:	c3                   	ret    
c000e801:	90                   	nop
c000e802:	66 90                	xchg   ax,ax

c000e804 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e804:	b8 00 00 00 00       	mov    eax,0x0
c000e809:	c3                   	ret    
c000e80a:	66 90                	xchg   ax,ax

c000e80c <ACPI::detectPCI()>:
c000e80c:	53                   	push   ebx
c000e80d:	83 ec 28             	sub    esp,0x28
c000e810:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e815:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e81a:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e81f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e825:	83 e0 04             	and    eax,0x4
c000e828:	84 c0                	test   al,al
c000e82a:	74 2c                	je     c000e858 <ACPI::detectPCI()+0x4c>
c000e82c:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e831:	83 ec 08             	sub    esp,0x8
c000e834:	68 be de 01 c0       	push   0xc001debe
c000e839:	50                   	push   eax
c000e83a:	e8 75 f8 ff ff       	call   c000e0b4 <findDataTable(unsigned char*, char*)>
c000e83f:	83 c4 10             	add    esp,0x10
c000e842:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e846:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e84b:	74 0b                	je     c000e858 <ACPI::detectPCI()+0x4c>
c000e84d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e852:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e857:	90                   	nop
c000e858:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e864:	8a 00                	mov    al,BYTE PTR [eax]
c000e866:	3c 01                	cmp    al,0x1
c000e868:	75 0e                	jne    c000e878 <ACPI::detectPCI()+0x6c>
c000e86a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e86f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e874:	eb 2a                	jmp    c000e8a0 <ACPI::detectPCI()+0x94>
c000e876:	66 90                	xchg   ax,ax
c000e878:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e87c:	8a 00                	mov    al,BYTE PTR [eax]
c000e87e:	3c 02                	cmp    al,0x2
c000e880:	75 1e                	jne    c000e8a0 <ACPI::detectPCI()+0x94>
c000e882:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e887:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e88c:	74 12                	je     c000e8a0 <ACPI::detectPCI()+0x94>
c000e88e:	83 ec 0c             	sub    esp,0xc
c000e891:	68 38 de 01 c0       	push   0xc001de38
c000e896:	e8 a0 18 00 00       	call   c001013b <KePanic(char const*)>
c000e89b:	83 c4 10             	add    esp,0x10
c000e89e:	66 90                	xchg   ax,ax
c000e8a0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8a4:	83 f0 01             	xor    eax,0x1
c000e8a7:	84 c0                	test   al,al
c000e8a9:	74 41                	je     c000e8ec <ACPI::detectPCI()+0xe0>
c000e8ab:	e8 80 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8b4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8b9:	75 0d                	jne    c000e8c8 <ACPI::detectPCI()+0xbc>
c000e8bb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8c0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8c5:	eb 25                	jmp    c000e8ec <ACPI::detectPCI()+0xe0>
c000e8c7:	90                   	nop
c000e8c8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8cd:	75 1d                	jne    c000e8ec <ACPI::detectPCI()+0xe0>
c000e8cf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8d4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8d9:	74 11                	je     c000e8ec <ACPI::detectPCI()+0xe0>
c000e8db:	83 ec 0c             	sub    esp,0xc
c000e8de:	68 38 de 01 c0       	push   0xc001de38
c000e8e3:	e8 53 18 00 00       	call   c001013b <KePanic(char const*)>
c000e8e8:	83 c4 10             	add    esp,0x10
c000e8eb:	90                   	nop
c000e8ec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8f1:	0f 84 85 00 00 00    	je     c000e97c <ACPI::detectPCI()+0x170>
c000e8f7:	83 ec 0c             	sub    esp,0xc
c000e8fa:	68 c3 de 01 c0       	push   0xc001dec3
c000e8ff:	e8 bf 11 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000e904:	83 c4 10             	add    esp,0x10
c000e907:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e90f:	83 ec 0c             	sub    esp,0xc
c000e912:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e916:	e8 9e 8e ff ff       	call   c00077b9 <malloc>
c000e91b:	83 c4 10             	add    esp,0x10
c000e91e:	89 c3                	mov    ebx,eax
c000e920:	83 ec 0c             	sub    esp,0xc
c000e923:	53                   	push   ebx
c000e924:	e8 c9 96 00 00       	call   c0017ff2 <PCI::PCI()>
c000e929:	83 c4 10             	add    esp,0x10
c000e92c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e934:	83 ec 08             	sub    esp,0x8
c000e937:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e93b:	50                   	push   eax
c000e93c:	e8 d7 cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e948:	8b 00                	mov    eax,DWORD PTR [eax]
c000e94a:	83 c0 08             	add    eax,0x8
c000e94d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e94f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e954:	74 0a                	je     c000e960 <ACPI::detectPCI()+0x154>
c000e956:	ba 01 00 00 00       	mov    edx,0x1
c000e95b:	eb 0b                	jmp    c000e968 <ACPI::detectPCI()+0x15c>
c000e95d:	8d 76 00             	lea    esi,[esi+0x0]
c000e960:	ba 02 00 00 00       	mov    edx,0x2
c000e965:	8d 76 00             	lea    esi,[esi+0x0]
c000e968:	6a 00                	push   0x0
c000e96a:	6a 00                	push   0x0
c000e96c:	52                   	push   edx
c000e96d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e971:	ff d0                	call   eax
c000e973:	83 c4 10             	add    esp,0x10
c000e976:	e9 91 00 00 00       	jmp    c000ea0c <ACPI::detectPCI()+0x200>
c000e97b:	90                   	nop
c000e97c:	83 ec 0c             	sub    esp,0xc
c000e97f:	68 db de 01 c0       	push   0xc001dedb
c000e984:	e8 3a 11 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e993:	83 ec 0c             	sub    esp,0xc
c000e996:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e99a:	e8 1a 8e ff ff       	call   c00077b9 <malloc>
c000e99f:	83 c4 10             	add    esp,0x10
c000e9a2:	89 c3                	mov    ebx,eax
c000e9a4:	83 ec 0c             	sub    esp,0xc
c000e9a7:	53                   	push   ebx
c000e9a8:	e8 71 a1 00 00       	call   c0018b1e <IDE::IDE()>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b8:	83 ec 08             	sub    esp,0x8
c000e9bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9bf:	50                   	push   eax
c000e9c0:	e8 53 cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9cc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9da:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9e7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9f6:	83 c0 08             	add    eax,0x8
c000e9f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9fb:	6a 00                	push   0x0
c000e9fd:	6a 00                	push   0x0
c000e9ff:	6a 00                	push   0x0
c000ea01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea05:	ff d0                	call   eax
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	66 90                	xchg   ax,ax
c000ea0c:	90                   	nop
c000ea0d:	83 c4 28             	add    esp,0x28
c000ea10:	5b                   	pop    ebx
c000ea11:	c3                   	ret    
c000ea12:	66 90                	xchg   ax,ax

c000ea14 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea14:	83 ec 1c             	sub    esp,0x1c
c000ea17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea1b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea1e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea22:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000ea28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea2c:	25 ff 00 00 00       	and    eax,0xff
c000ea31:	83 ec 08             	sub    esp,0x8
c000ea34:	50                   	push   eax
c000ea35:	52                   	push   edx
c000ea36:	e8 6b 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea3b:	83 c4 10             	add    esp,0x10
c000ea3e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea42:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000ea48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea4c:	25 ff 00 00 00       	and    eax,0xff
c000ea51:	83 ec 04             	sub    esp,0x4
c000ea54:	6a 01                	push   0x1
c000ea56:	50                   	push   eax
c000ea57:	52                   	push   edx
c000ea58:	e8 5f 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea5d:	83 c4 10             	add    esp,0x10
c000ea60:	90                   	nop
c000ea61:	83 c4 1c             	add    esp,0x1c
c000ea64:	c3                   	ret    
c000ea65:	90                   	nop
c000ea66:	66 90                	xchg   ax,ax

c000ea68 <ACPI::sleep()>:
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c000ea70:	85 c0                	test   eax,eax
c000ea72:	74 08                	je     c000ea7c <ACPI::sleep()+0x14>
c000ea74:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c000ea79:	ff d0                	call   eax
c000ea7b:	90                   	nop
c000ea7c:	90                   	nop
c000ea7d:	83 c4 0c             	add    esp,0xc
c000ea80:	c3                   	ret    
c000ea81:	90                   	nop
c000ea82:	66 90                	xchg   ax,ax

c000ea84 <ACPI::open(int, int, void*)>:
c000ea84:	57                   	push   edi
c000ea85:	56                   	push   esi
c000ea86:	53                   	push   ebx
c000ea87:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea8d:	83 ec 0c             	sub    esp,0xc
c000ea90:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea97:	e8 70 fd ff ff       	call   c000e80c <ACPI::detectPCI()>
c000ea9c:	83 c4 10             	add    esp,0x10
c000ea9f:	83 ec 0c             	sub    esp,0xc
c000eaa2:	68 60 de 01 c0       	push   0xc001de60
c000eaa7:	e8 17 10 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000eaac:	83 c4 10             	add    esp,0x10
c000eaaf:	83 ec 0c             	sub    esp,0xc
c000eab2:	68 f0 de 01 c0       	push   0xc001def0
c000eab7:	e8 27 34 00 00       	call   c0011ee3 <Thr::loadKernelSymbolTable(char const*)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eac7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eadc:	e8 d8 8c ff ff       	call   c00077b9 <malloc>
c000eae1:	83 c4 10             	add    esp,0x10
c000eae4:	89 c3                	mov    ebx,eax
c000eae6:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000eaeb:	83 ec 04             	sub    esp,0x4
c000eaee:	50                   	push   eax
c000eaef:	68 0e df 01 c0       	push   0xc001df0e
c000eaf4:	53                   	push   ebx
c000eaf5:	e8 54 bf ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb04:	83 ec 08             	sub    esp,0x8
c000eb07:	6a 01                	push   0x1
c000eb09:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb10:	e8 f9 bf ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000eb15:	83 c4 10             	add    esp,0x10
c000eb18:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb1f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb27:	75 17                	jne    c000eb40 <ACPI::open(int, int, void*)+0xbc>
c000eb29:	83 ec 0c             	sub    esp,0xc
c000eb2c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb33:	e8 34 c0 ff ff       	call   c000ab6c <File::close()>
c000eb38:	83 c4 10             	add    esp,0x10
c000eb3b:	eb 0b                	jmp    c000eb48 <ACPI::open(int, int, void*)+0xc4>
c000eb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb40:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb48:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb50:	74 1e                	je     c000eb70 <ACPI::open(int, int, void*)+0xec>
c000eb52:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb59:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb5b:	83 c0 08             	add    eax,0x8
c000eb5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb6a:	ff d0                	call   eax
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	90                   	nop
c000eb70:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb77:	83 f0 01             	xor    eax,0x1
c000eb7a:	84 c0                	test   al,al
c000eb7c:	74 42                	je     c000ebc0 <ACPI::open(int, int, void*)+0x13c>
c000eb7e:	83 ec 0c             	sub    esp,0xc
c000eb81:	68 2c df 01 c0       	push   0xc001df2c
c000eb86:	e8 38 0f 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000eb8b:	83 c4 10             	add    esp,0x10
c000eb8e:	83 ec 04             	sub    esp,0x4
c000eb91:	6a 0c                	push   0xc
c000eb93:	68 47 df 01 c0       	push   0xc001df47
c000eb98:	68 58 df 01 c0       	push   0xc001df58
c000eb9d:	e8 6c 29 00 00       	call   c001150e <Reg::readIntWithDefault(char*, char*, int)>
c000eba2:	83 c4 10             	add    esp,0x10
c000eba5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebb6:	e8 d4 a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	66 90                	xchg   ax,ax
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	68 d7 cf 01 c0       	push   0xc001cfd7
c000ebc8:	e8 f6 0e 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000ebcd:	83 c4 10             	add    esp,0x10
c000ebd0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebd7:	83 ec 08             	sub    esp,0x8
c000ebda:	6a 12                	push   0x12
c000ebdc:	50                   	push   eax
c000ebdd:	e8 4e d0 ff ff       	call   c000bc30 <getDevicesOfType(DeviceType)>
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe8:	83 ec 0c             	sub    esp,0xc
c000ebeb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebf2:	50                   	push   eax
c000ebf3:	e8 34 d8 00 00       	call   c001c42c <LinkedList<Device>::isEmpty()>
c000ebf8:	83 c4 10             	add    esp,0x10
c000ebfb:	83 f0 01             	xor    eax,0x1
c000ebfe:	84 c0                	test   al,al
c000ec00:	0f 84 46 01 00 00    	je     c000ed4c <ACPI::open(int, int, void*)+0x2c8>
c000ec06:	83 ec 0c             	sub    esp,0xc
c000ec09:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec10:	50                   	push   eax
c000ec11:	e8 32 d8 00 00       	call   c001c448 <LinkedList<Device>::getFirstElement()>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec2a:	50                   	push   eax
c000ec2b:	e8 20 d8 00 00       	call   c001c450 <LinkedList<Device>::removeFirst()>
c000ec30:	83 c4 10             	add    esp,0x10
c000ec33:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec3a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec41:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec48:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec4c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec52:	ba 09 00 00 00       	mov    edx,0x9
c000ec57:	fc                   	cld    
c000ec58:	89 c7                	mov    edi,eax
c000ec5a:	89 de                	mov    esi,ebx
c000ec5c:	89 d1                	mov    ecx,edx
c000ec5e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec60:	83 ec 08             	sub    esp,0x8
c000ec63:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec67:	50                   	push   eax
c000ec68:	83 ec 24             	sub    esp,0x24
c000ec6b:	89 e0                	mov    eax,esp
c000ec6d:	89 c3                	mov    ebx,eax
c000ec6f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec73:	ba 09 00 00 00       	mov    edx,0x9
c000ec78:	89 df                	mov    edi,ebx
c000ec7a:	89 c6                	mov    esi,eax
c000ec7c:	89 d1                	mov    ecx,edx
c000ec7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec80:	e8 4f 98 00 00       	call   c00184d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec85:	83 c4 30             	add    esp,0x30
c000ec88:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec8f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec97:	0f 84 4b ff ff ff    	je     c000ebe8 <ACPI::open(int, int, void*)+0x164>
c000ec9d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecb2:	e8 02 8b ff ff       	call   c00077b9 <malloc>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	89 c3                	mov    ebx,eax
c000ecbc:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000ecc1:	83 ec 04             	sub    esp,0x4
c000ecc4:	50                   	push   eax
c000ecc5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eccc:	53                   	push   ebx
c000eccd:	e8 7c bd ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000ecd2:	83 c4 10             	add    esp,0x10
c000ecd5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ecdc:	83 ec 0c             	sub    esp,0xc
c000ecdf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ece6:	e8 91 c0 ff ff       	call   c000ad7c <File::exists()>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	84 c0                	test   al,al
c000ecf0:	74 2a                	je     c000ed1c <ACPI::open(int, int, void*)+0x298>
c000ecf2:	83 ec 08             	sub    esp,0x8
c000ecf5:	6a 01                	push   0x1
c000ecf7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecfe:	e8 57 3c 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	83 ec 08             	sub    esp,0x8
c000ed09:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed10:	50                   	push   eax
c000ed11:	e8 75 3e 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000ed16:	83 c4 10             	add    esp,0x10
c000ed19:	8d 76 00             	lea    esi,[esi+0x0]
c000ed1c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed24:	0f 84 be fe ff ff    	je     c000ebe8 <ACPI::open(int, int, void*)+0x164>
c000ed2a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed31:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed33:	83 c0 08             	add    eax,0x8
c000ed36:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed38:	83 ec 0c             	sub    esp,0xc
c000ed3b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed42:	ff d0                	call   eax
c000ed44:	83 c4 10             	add    esp,0x10
c000ed47:	e9 9c fe ff ff       	jmp    c000ebe8 <ACPI::open(int, int, void*)+0x164>
c000ed4c:	83 ec 0c             	sub    esp,0xc
c000ed4f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed56:	50                   	push   eax
c000ed57:	e8 cc d6 00 00       	call   c001c428 <LinkedList<Device>::~LinkedList()>
c000ed5c:	83 c4 10             	add    esp,0x10
c000ed5f:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000ed65:	83 ec 08             	sub    esp,0x8
c000ed68:	6a 01                	push   0x1
c000ed6a:	68 5f df 01 c0       	push   0xc001df5f
c000ed6f:	e8 e6 3b 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000ed74:	83 c4 10             	add    esp,0x10
c000ed77:	83 ec 08             	sub    esp,0x8
c000ed7a:	53                   	push   ebx
c000ed7b:	50                   	push   eax
c000ed7c:	e8 0a 3e 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000ed89:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed8f:	83 e0 04             	and    eax,0x4
c000ed92:	84 c0                	test   al,al
c000ed94:	0f 84 16 01 00 00    	je     c000eeb0 <ACPI::open(int, int, void*)+0x42c>
c000ed9a:	83 ec 0c             	sub    esp,0xc
c000ed9d:	68 7c df 01 c0       	push   0xc001df7c
c000eda2:	e8 1c 0d 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000eda7:	83 c4 10             	add    esp,0x10
c000edaa:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edb5:	83 ec 0c             	sub    esp,0xc
c000edb8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000edbf:	e8 f5 89 ff ff       	call   c00077b9 <malloc>
c000edc4:	83 c4 10             	add    esp,0x10
c000edc7:	89 c3                	mov    ebx,eax
c000edc9:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000edce:	83 ec 04             	sub    esp,0x4
c000edd1:	50                   	push   eax
c000edd2:	68 99 df 01 c0       	push   0xc001df99
c000edd7:	53                   	push   ebx
c000edd8:	e8 71 bc ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000eddd:	83 c4 10             	add    esp,0x10
c000ede0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ede7:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edef:	74 1b                	je     c000ee0c <ACPI::open(int, int, void*)+0x388>
c000edf1:	83 ec 0c             	sub    esp,0xc
c000edf4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000edfb:	e8 7c bf ff ff       	call   c000ad7c <File::exists()>
c000ee00:	83 c4 10             	add    esp,0x10
c000ee03:	84 c0                	test   al,al
c000ee05:	74 05                	je     c000ee0c <ACPI::open(int, int, void*)+0x388>
c000ee07:	b0 01                	mov    al,0x1
c000ee09:	eb 05                	jmp    c000ee10 <ACPI::open(int, int, void*)+0x38c>
c000ee0b:	90                   	nop
c000ee0c:	b0 00                	mov    al,0x0
c000ee0e:	66 90                	xchg   ax,ax
c000ee10:	84 c0                	test   al,al
c000ee12:	74 28                	je     c000ee3c <ACPI::open(int, int, void*)+0x3b8>
c000ee14:	83 ec 08             	sub    esp,0x8
c000ee17:	6a 01                	push   0x1
c000ee19:	68 99 df 01 c0       	push   0xc001df99
c000ee1e:	e8 37 3b 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c000ee23:	83 c4 10             	add    esp,0x10
c000ee26:	83 ec 08             	sub    esp,0x8
c000ee29:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee30:	50                   	push   eax
c000ee31:	e8 55 3d 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c000ee36:	83 c4 10             	add    esp,0x10
c000ee39:	8d 76 00             	lea    esi,[esi+0x0]
c000ee3c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee44:	74 2a                	je     c000ee70 <ACPI::open(int, int, void*)+0x3ec>
c000ee46:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee4e:	74 20                	je     c000ee70 <ACPI::open(int, int, void*)+0x3ec>
c000ee50:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee57:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee59:	83 c0 08             	add    eax,0x8
c000ee5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee68:	ff d0                	call   eax
c000ee6a:	83 c4 10             	add    esp,0x10
c000ee6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee70:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000ee75:	83 ec 08             	sub    esp,0x8
c000ee78:	68 b6 df 01 c0       	push   0xc001dfb6
c000ee7d:	50                   	push   eax
c000ee7e:	e8 31 f2 ff ff       	call   c000e0b4 <findDataTable(unsigned char*, char*)>
c000ee83:	83 c4 10             	add    esp,0x10
c000ee86:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee8d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee95:	74 19                	je     c000eeb0 <ACPI::open(int, int, void*)+0x42c>
c000ee97:	83 ec 08             	sub    esp,0x8
c000ee9a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eea1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eea8:	e8 67 fb ff ff       	call   c000ea14 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	b8 00 00 00 00       	mov    eax,0x0
c000eeb5:	81 c4 70 01 00 00    	add    esp,0x170
c000eebb:	5b                   	pop    ebx
c000eebc:	5e                   	pop    esi
c000eebd:	5f                   	pop    edi
c000eebe:	c3                   	ret    
c000eebf:	90                   	nop

c000eec0 <CPU::close(int, int, void*)>:
c000eec0:	31 c0                	xor    eax,eax
c000eec2:	c3                   	ret    
c000eec3:	90                   	nop

c000eec4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eec4:	60                   	pusha  
c000eec5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eec9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eecd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eed1:	9c                   	pushf  
c000eed2:	fa                   	cli    
c000eed3:	0f 09                	wbinvd 
c000eed5:	0f 30                	wrmsr  
c000eed7:	9d                   	popf   
c000eed8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eedc:	89 02                	mov    DWORD PTR [edx],eax
c000eede:	61                   	popa   
c000eedf:	c3                   	ret    

c000eee0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eee0:	60                   	pusha  
c000eee1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eee5:	9c                   	pushf  
c000eee6:	fa                   	cli    
c000eee7:	0f 09                	wbinvd 
c000eee9:	31 c0                	xor    eax,eax
c000eeeb:	31 d2                	xor    edx,edx
c000eeed:	0f 32                	rdmsr  
c000eeef:	9d                   	popf   
c000eef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eef4:	89 02                	mov    DWORD PTR [edx],eax
c000eef6:	61                   	popa   
c000eef7:	c3                   	ret    

c000eef8 <CPU::AMD_K6_writeback(int, int, int)>:
c000eef8:	56                   	push   esi
c000eef9:	53                   	push   ebx
c000eefa:	83 ec 10             	sub    esp,0x10
c000eefd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef01:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef06:	75 5d                	jne    c000ef65 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef08:	83 f8 08             	cmp    eax,0x8
c000ef0b:	75 09                	jne    c000ef16 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef0d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef12:	7e 13                	jle    c000ef27 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef14:	eb 30                	jmp    c000ef46 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef16:	83 f8 06             	cmp    eax,0x6
c000ef19:	7c 4a                	jl     c000ef65 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef1b:	83 f8 07             	cmp    eax,0x7
c000ef1e:	7e 07                	jle    c000ef27 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef20:	83 f8 09             	cmp    eax,0x9
c000ef23:	74 21                	je     c000ef46 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef25:	eb 3e                	jmp    c000ef65 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef27:	89 e6                	mov    esi,esp
c000ef29:	8b 1d bc 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204bc
c000ef2f:	56                   	push   esi
c000ef30:	c1 eb 15             	shr    ebx,0x15
c000ef33:	68 82 00 00 c0       	push   0xc0000082
c000ef38:	83 e3 7e             	and    ebx,0x7e
c000ef3b:	e8 a0 ff ff ff       	call   c000eee0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef40:	56                   	push   esi
c000ef41:	6a 00                	push   0x0
c000ef43:	53                   	push   ebx
c000ef44:	eb 12                	jmp    c000ef58 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef46:	89 e3                	mov    ebx,esp
c000ef48:	53                   	push   ebx
c000ef49:	68 82 00 00 c0       	push   0xc0000082
c000ef4e:	e8 8d ff ff ff       	call   c000eee0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef53:	53                   	push   ebx
c000ef54:	6a 00                	push   0x0
c000ef56:	6a 00                	push   0x0
c000ef58:	68 82 00 00 c0       	push   0xc0000082
c000ef5d:	e8 62 ff ff ff       	call   c000eec4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef62:	83 c4 18             	add    esp,0x18
c000ef65:	83 c4 10             	add    esp,0x10
c000ef68:	5b                   	pop    ebx
c000ef69:	5e                   	pop    esi
c000ef6a:	c3                   	ret    
c000ef6b:	90                   	nop

c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef6c:	55                   	push   ebp
c000ef6d:	57                   	push   edi
c000ef6e:	56                   	push   esi
c000ef6f:	53                   	push   ebx
c000ef70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef7c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef80:	39 05 d0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1d0,eax
c000ef86:	75 23                	jne    c000efab <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef88:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000ef8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef91:	89 06                	mov    DWORD PTR [esi],eax
c000ef93:	a1 08 2f 02 c0       	mov    eax,ds:0xc0022f08
c000ef98:	89 07                	mov    DWORD PTR [edi],eax
c000ef9a:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000ef9f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efa2:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c000efa7:	89 02                	mov    DWORD PTR [edx],eax
c000efa9:	eb 3f                	jmp    c000efea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efab:	31 c9                	xor    ecx,ecx
c000efad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efb1:	0f a2                	cpuid  
c000efb3:	89 06                	mov    DWORD PTR [esi],eax
c000efb5:	89 1f                	mov    DWORD PTR [edi],ebx
c000efb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efbb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efbe:	89 10                	mov    DWORD PTR [eax],edx
c000efc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc4:	a3 d0 f1 01 c0       	mov    ds:0xc001f1d0,eax
c000efc9:	8b 06                	mov    eax,DWORD PTR [esi]
c000efcb:	a3 0c 2f 02 c0       	mov    ds:0xc0022f0c,eax
c000efd0:	8b 07                	mov    eax,DWORD PTR [edi]
c000efd2:	a3 08 2f 02 c0       	mov    ds:0xc0022f08,eax
c000efd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efda:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c000efdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efe3:	8b 00                	mov    eax,DWORD PTR [eax]
c000efe5:	a3 00 2f 02 c0       	mov    ds:0xc0022f00,eax
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	5f                   	pop    edi
c000efed:	5d                   	pop    ebp
c000efee:	c3                   	ret    
c000efef:	90                   	nop

c000eff0 <CPU::cpuidCheckEDX(unsigned int)>:
c000eff0:	83 ec 10             	sub    esp,0x10
c000eff3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff7:	50                   	push   eax
c000eff8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000effc:	50                   	push   eax
c000effd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f001:	50                   	push   eax
c000f002:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f006:	50                   	push   eax
c000f007:	6a 01                	push   0x1
c000f009:	e8 5e ff ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f00e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f012:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f016:	0f 95 c0             	setne  al
c000f019:	83 c4 24             	add    esp,0x24
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <CPU::cpuidCheckECX(unsigned int)>:
c000f01e:	83 ec 10             	sub    esp,0x10
c000f021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f025:	50                   	push   eax
c000f026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02a:	50                   	push   eax
c000f02b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02f:	50                   	push   eax
c000f030:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f034:	50                   	push   eax
c000f035:	6a 01                	push   0x1
c000f037:	e8 30 ff ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f03c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f040:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f044:	0f 95 c0             	setne  al
c000f047:	83 c4 24             	add    esp,0x24
c000f04a:	c3                   	ret    
c000f04b:	90                   	nop

c000f04c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f04c:	83 ec 10             	sub    esp,0x10
c000f04f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f053:	50                   	push   eax
c000f054:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f058:	50                   	push   eax
c000f059:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05d:	50                   	push   eax
c000f05e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f062:	50                   	push   eax
c000f063:	6a 07                	push   0x7
c000f065:	e8 02 ff ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f06a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f06e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f072:	0f 95 c0             	setne  al
c000f075:	83 c4 24             	add    esp,0x24
c000f078:	c3                   	ret    
c000f079:	90                   	nop

c000f07a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f07a:	83 ec 10             	sub    esp,0x10
c000f07d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f081:	50                   	push   eax
c000f082:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f086:	50                   	push   eax
c000f087:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f08b:	50                   	push   eax
c000f08c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f090:	50                   	push   eax
c000f091:	6a 07                	push   0x7
c000f093:	e8 d4 fe ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f09c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0a0:	0f 95 c0             	setne  al
c000f0a3:	83 c4 24             	add    esp,0x24
c000f0a6:	c3                   	ret    
c000f0a7:	90                   	nop

c000f0a8 <CPU::CPU()>:
c000f0a8:	83 ec 0c             	sub    esp,0xc
c000f0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0af:	83 ec 08             	sub    esp,0x8
c000f0b2:	68 d9 e0 01 c0       	push   0xc001e0d9
c000f0b7:	50                   	push   eax
c000f0b8:	e8 f3 c9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000f0bd:	83 c4 10             	add    esp,0x10
c000f0c0:	ba 60 e1 01 c0       	mov    edx,0xc001e160
c000f0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0c9:	89 10                	mov    DWORD PTR [eax],edx
c000f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0dd:	05 78 01 00 00       	add    eax,0x178
c000f0e2:	83 ec 0c             	sub    esp,0xc
c000f0e5:	50                   	push   eax
c000f0e6:	e8 8f 7f ff ff       	call   c000707a <GDT::GDT()>
c000f0eb:	83 c4 10             	add    esp,0x10
c000f0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f2:	05 7c 09 00 00       	add    eax,0x97c
c000f0f7:	83 ec 0c             	sub    esp,0xc
c000f0fa:	50                   	push   eax
c000f0fb:	e8 b4 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f100:	83 c4 10             	add    esp,0x10
c000f103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f107:	05 7c 11 00 00       	add    eax,0x117c
c000f10c:	83 ec 0c             	sub    esp,0xc
c000f10f:	50                   	push   eax
c000f110:	e8 b3 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f115:	83 c4 10             	add    esp,0x10
c000f118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f11c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f127:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f131:	90                   	nop
c000f132:	83 c4 0c             	add    esp,0xc
c000f135:	c3                   	ret    

c000f136 <CPU::displayFeatures()>:
c000f136:	c3                   	ret    
c000f137:	90                   	nop

c000f138 <CPU::detectFeatures()>:
c000f138:	55                   	push   ebp
c000f139:	57                   	push   edi
c000f13a:	56                   	push   esi
c000f13b:	53                   	push   ebx
c000f13c:	83 ec 30             	sub    esp,0x30
c000f13f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f143:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f14d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f154:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f15a:	6a 0d                	push   0xd
c000f15c:	6a 00                	push   0x0
c000f15e:	55                   	push   ebp
c000f15f:	e8 6c 13 ff ff       	call   c00004d0 <memset>
c000f164:	83 c4 10             	add    esp,0x10
c000f167:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000f16c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f173:	0f 84 d5 05 00 00    	je     c000f74e <CPU::detectFeatures()+0x616>
c000f179:	83 ec 0c             	sub    esp,0xc
c000f17c:	89 ef                	mov    edi,ebp
c000f17e:	6a 10                	push   0x10
c000f180:	e8 6b fe ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f185:	83 e0 01             	and    eax,0x1
c000f188:	8d 14 00             	lea    edx,[eax+eax*1]
c000f18b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f191:	83 e0 fd             	and    eax,0xfffffffd
c000f194:	09 d0                	or     eax,edx
c000f196:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f19c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1a3:	e8 48 fe ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f1a8:	83 e0 01             	and    eax,0x1
c000f1ab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b8:	83 e0 fb             	and    eax,0xfffffffb
c000f1bb:	09 d0                	or     eax,edx
c000f1bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1c3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1ca:	e8 21 fe ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f1cf:	83 e0 01             	and    eax,0x1
c000f1d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1d9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1df:	83 e0 f7             	and    eax,0xfffffff7
c000f1e2:	09 d0                	or     eax,edx
c000f1e4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1ea:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1f1:	e8 fa fd ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f1f6:	83 e0 01             	and    eax,0x1
c000f1f9:	c1 e0 04             	shl    eax,0x4
c000f1fc:	88 c2                	mov    dl,al
c000f1fe:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f204:	83 e0 ef             	and    eax,0xffffffef
c000f207:	09 d0                	or     eax,edx
c000f209:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f20f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f216:	e8 d5 fd ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f21b:	83 e0 01             	and    eax,0x1
c000f21e:	c1 e0 05             	shl    eax,0x5
c000f221:	88 c2                	mov    dl,al
c000f223:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f229:	83 e0 df             	and    eax,0xffffffdf
c000f22c:	09 d0                	or     eax,edx
c000f22e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f234:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f23b:	e8 b0 fd ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f240:	83 e0 01             	and    eax,0x1
c000f243:	8d 14 00             	lea    edx,[eax+eax*1]
c000f246:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f24c:	83 e0 fd             	and    eax,0xfffffffd
c000f24f:	09 d0                	or     eax,edx
c000f251:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f257:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f25e:	e8 8d fd ff ff       	call   c000eff0 <CPU::cpuidCheckEDX(unsigned int)>
c000f263:	83 e0 01             	and    eax,0x1
c000f266:	c1 e0 06             	shl    eax,0x6
c000f269:	88 c2                	mov    dl,al
c000f26b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f271:	83 e0 bf             	and    eax,0xffffffbf
c000f274:	09 d0                	or     eax,edx
c000f276:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f27c:	58                   	pop    eax
c000f27d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f281:	50                   	push   eax
c000f282:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f286:	50                   	push   eax
c000f287:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f28b:	56                   	push   esi
c000f28c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f290:	50                   	push   eax
c000f291:	6a 00                	push   0x0
c000f293:	e8 d4 fc ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f298:	b8 04 00 00 00       	mov    eax,0x4
c000f29d:	89 c1                	mov    ecx,eax
c000f29f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2a1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2a7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2ab:	89 c1                	mov    ecx,eax
c000f2ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2af:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2b5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2b9:	89 c1                	mov    ecx,eax
c000f2bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2bd:	83 c4 18             	add    esp,0x18
c000f2c0:	68 e8 df 01 c0       	push   0xc001dfe8
c000f2c5:	55                   	push   ebp
c000f2c6:	e8 15 14 ff ff       	call   c00006e0 <strcmp>
c000f2cb:	83 c4 10             	add    esp,0x10
c000f2ce:	85 c0                	test   eax,eax
c000f2d0:	75 0f                	jne    c000f2e1 <CPU::detectFeatures()+0x1a9>
c000f2d2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2dc:	e9 22 02 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f2e1:	50                   	push   eax
c000f2e2:	50                   	push   eax
c000f2e3:	68 f5 df 01 c0       	push   0xc001dff5
c000f2e8:	55                   	push   ebp
c000f2e9:	e8 f2 13 ff ff       	call   c00006e0 <strcmp>
c000f2ee:	83 c4 10             	add    esp,0x10
c000f2f1:	85 c0                	test   eax,eax
c000f2f3:	74 dd                	je     c000f2d2 <CPU::detectFeatures()+0x19a>
c000f2f5:	50                   	push   eax
c000f2f6:	50                   	push   eax
c000f2f7:	68 02 e0 01 c0       	push   0xc001e002
c000f2fc:	55                   	push   ebp
c000f2fd:	e8 de 13 ff ff       	call   c00006e0 <strcmp>
c000f302:	83 c4 10             	add    esp,0x10
c000f305:	85 c0                	test   eax,eax
c000f307:	74 2a                	je     c000f333 <CPU::detectFeatures()+0x1fb>
c000f309:	50                   	push   eax
c000f30a:	50                   	push   eax
c000f30b:	68 0f e0 01 c0       	push   0xc001e00f
c000f310:	55                   	push   ebp
c000f311:	e8 ca 13 ff ff       	call   c00006e0 <strcmp>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	85 c0                	test   eax,eax
c000f31b:	74 16                	je     c000f333 <CPU::detectFeatures()+0x1fb>
c000f31d:	50                   	push   eax
c000f31e:	50                   	push   eax
c000f31f:	68 1c e0 01 c0       	push   0xc001e01c
c000f324:	55                   	push   ebp
c000f325:	e8 b6 13 ff ff       	call   c00006e0 <strcmp>
c000f32a:	83 c4 10             	add    esp,0x10
c000f32d:	85 c0                	test   eax,eax
c000f32f:	74 48                	je     c000f379 <CPU::detectFeatures()+0x241>
c000f331:	eb 0f                	jmp    c000f342 <CPU::detectFeatures()+0x20a>
c000f333:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f33d:	e9 c1 01 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f342:	50                   	push   eax
c000f343:	50                   	push   eax
c000f344:	68 29 e0 01 c0       	push   0xc001e029
c000f349:	55                   	push   ebp
c000f34a:	e8 91 13 ff ff       	call   c00006e0 <strcmp>
c000f34f:	83 c4 10             	add    esp,0x10
c000f352:	85 c0                	test   eax,eax
c000f354:	74 23                	je     c000f379 <CPU::detectFeatures()+0x241>
c000f356:	57                   	push   edi
c000f357:	57                   	push   edi
c000f358:	68 36 e0 01 c0       	push   0xc001e036
c000f35d:	55                   	push   ebp
c000f35e:	e8 7d 13 ff ff       	call   c00006e0 <strcmp>
c000f363:	83 c4 10             	add    esp,0x10
c000f366:	85 c0                	test   eax,eax
c000f368:	75 1e                	jne    c000f388 <CPU::detectFeatures()+0x250>
c000f36a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f374:	e9 8a 01 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f379:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f383:	e9 7b 01 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f388:	56                   	push   esi
c000f389:	56                   	push   esi
c000f38a:	68 43 e0 01 c0       	push   0xc001e043
c000f38f:	55                   	push   ebp
c000f390:	e8 4b 13 ff ff       	call   c00006e0 <strcmp>
c000f395:	83 c4 10             	add    esp,0x10
c000f398:	85 c0                	test   eax,eax
c000f39a:	75 0f                	jne    c000f3ab <CPU::detectFeatures()+0x273>
c000f39c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3a6:	e9 58 01 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f3ab:	51                   	push   ecx
c000f3ac:	51                   	push   ecx
c000f3ad:	68 02 e0 01 c0       	push   0xc001e002
c000f3b2:	55                   	push   ebp
c000f3b3:	e8 28 13 ff ff       	call   c00006e0 <strcmp>
c000f3b8:	83 c4 10             	add    esp,0x10
c000f3bb:	85 c0                	test   eax,eax
c000f3bd:	75 0f                	jne    c000f3ce <CPU::detectFeatures()+0x296>
c000f3bf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3c9:	e9 35 01 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f3ce:	52                   	push   edx
c000f3cf:	52                   	push   edx
c000f3d0:	68 50 e0 01 c0       	push   0xc001e050
c000f3d5:	55                   	push   ebp
c000f3d6:	e8 05 13 ff ff       	call   c00006e0 <strcmp>
c000f3db:	83 c4 10             	add    esp,0x10
c000f3de:	85 c0                	test   eax,eax
c000f3e0:	75 0f                	jne    c000f3f1 <CPU::detectFeatures()+0x2b9>
c000f3e2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3ec:	e9 12 01 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f3f1:	50                   	push   eax
c000f3f2:	50                   	push   eax
c000f3f3:	68 5d e0 01 c0       	push   0xc001e05d
c000f3f8:	55                   	push   ebp
c000f3f9:	e8 e2 12 ff ff       	call   c00006e0 <strcmp>
c000f3fe:	83 c4 10             	add    esp,0x10
c000f401:	85 c0                	test   eax,eax
c000f403:	75 0f                	jne    c000f414 <CPU::detectFeatures()+0x2dc>
c000f405:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f40f:	e9 ef 00 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f414:	50                   	push   eax
c000f415:	50                   	push   eax
c000f416:	68 6a e0 01 c0       	push   0xc001e06a
c000f41b:	55                   	push   ebp
c000f41c:	e8 bf 12 ff ff       	call   c00006e0 <strcmp>
c000f421:	83 c4 10             	add    esp,0x10
c000f424:	85 c0                	test   eax,eax
c000f426:	75 0f                	jne    c000f437 <CPU::detectFeatures()+0x2ff>
c000f428:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f432:	e9 cc 00 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f437:	50                   	push   eax
c000f438:	50                   	push   eax
c000f439:	68 77 e0 01 c0       	push   0xc001e077
c000f43e:	55                   	push   ebp
c000f43f:	e8 9c 12 ff ff       	call   c00006e0 <strcmp>
c000f444:	83 c4 10             	add    esp,0x10
c000f447:	85 c0                	test   eax,eax
c000f449:	75 0f                	jne    c000f45a <CPU::detectFeatures()+0x322>
c000f44b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f455:	e9 a9 00 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f45a:	50                   	push   eax
c000f45b:	50                   	push   eax
c000f45c:	68 84 e0 01 c0       	push   0xc001e084
c000f461:	55                   	push   ebp
c000f462:	e8 79 12 ff ff       	call   c00006e0 <strcmp>
c000f467:	83 c4 10             	add    esp,0x10
c000f46a:	85 c0                	test   eax,eax
c000f46c:	75 0f                	jne    c000f47d <CPU::detectFeatures()+0x345>
c000f46e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f478:	e9 86 00 00 00       	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f47d:	50                   	push   eax
c000f47e:	50                   	push   eax
c000f47f:	68 91 e0 01 c0       	push   0xc001e091
c000f484:	55                   	push   ebp
c000f485:	e8 56 12 ff ff       	call   c00006e0 <strcmp>
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	85 c0                	test   eax,eax
c000f48f:	75 0c                	jne    c000f49d <CPU::detectFeatures()+0x365>
c000f491:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f49b:	eb 66                	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f49d:	50                   	push   eax
c000f49e:	50                   	push   eax
c000f49f:	68 9e e0 01 c0       	push   0xc001e09e
c000f4a4:	55                   	push   ebp
c000f4a5:	e8 36 12 ff ff       	call   c00006e0 <strcmp>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	85 c0                	test   eax,eax
c000f4af:	75 0c                	jne    c000f4bd <CPU::detectFeatures()+0x385>
c000f4b1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4bb:	eb 46                	jmp    c000f503 <CPU::detectFeatures()+0x3cb>
c000f4bd:	57                   	push   edi
c000f4be:	57                   	push   edi
c000f4bf:	68 ab e0 01 c0       	push   0xc001e0ab
c000f4c4:	55                   	push   ebp
c000f4c5:	e8 16 12 ff ff       	call   c00006e0 <strcmp>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	85 c0                	test   eax,eax
c000f4cf:	74 e0                	je     c000f4b1 <CPU::detectFeatures()+0x379>
c000f4d1:	56                   	push   esi
c000f4d2:	56                   	push   esi
c000f4d3:	68 b8 e0 01 c0       	push   0xc001e0b8
c000f4d8:	55                   	push   ebp
c000f4d9:	e8 02 12 ff ff       	call   c00006e0 <strcmp>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	74 cc                	je     c000f4b1 <CPU::detectFeatures()+0x379>
c000f4e5:	51                   	push   ecx
c000f4e6:	51                   	push   ecx
c000f4e7:	68 c5 e0 01 c0       	push   0xc001e0c5
c000f4ec:	55                   	push   ebp
c000f4ed:	e8 ee 11 ff ff       	call   c00006e0 <strcmp>
c000f4f2:	83 c4 10             	add    esp,0x10
c000f4f5:	85 c0                	test   eax,eax
c000f4f7:	74 b8                	je     c000f4b1 <CPU::detectFeatures()+0x379>
c000f4f9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f503:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f508:	0f 86 be 00 00 00    	jbe    c000f5cc <CPU::detectFeatures()+0x494>
c000f50e:	83 ec 0c             	sub    esp,0xc
c000f511:	68 80 00 00 00       	push   0x80
c000f516:	e8 31 fb ff ff       	call   c000f04c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f51b:	83 e0 01             	and    eax,0x1
c000f51e:	c1 e0 06             	shl    eax,0x6
c000f521:	88 c2                	mov    dl,al
c000f523:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f529:	83 e0 bf             	and    eax,0xffffffbf
c000f52c:	09 d0                	or     eax,edx
c000f52e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f534:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f53b:	e8 0c fb ff ff       	call   c000f04c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f540:	83 e0 01             	and    eax,0x1
c000f543:	c1 e0 04             	shl    eax,0x4
c000f546:	88 c2                	mov    dl,al
c000f548:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f54e:	83 e0 ef             	and    eax,0xffffffef
c000f551:	09 d0                	or     eax,edx
c000f553:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f559:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f560:	e8 e7 fa ff ff       	call   c000f04c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f565:	c1 e0 07             	shl    eax,0x7
c000f568:	88 c2                	mov    dl,al
c000f56a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f570:	83 e0 7f             	and    eax,0x7f
c000f573:	09 d0                	or     eax,edx
c000f575:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f57b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f582:	e8 f3 fa ff ff       	call   c000f07a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f587:	83 e0 01             	and    eax,0x1
c000f58a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f591:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f597:	83 e0 f7             	and    eax,0xfffffff7
c000f59a:	09 d0                	or     eax,edx
c000f59c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5a2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5a9:	e8 cc fa ff ff       	call   c000f07a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5ae:	83 c4 10             	add    esp,0x10
c000f5b1:	83 e0 01             	and    eax,0x1
c000f5b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5bb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5c1:	83 e0 fb             	and    eax,0xfffffffb
c000f5c4:	09 d0                	or     eax,edx
c000f5c6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5cc:	83 ec 0c             	sub    esp,0xc
c000f5cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5d3:	50                   	push   eax
c000f5d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5d8:	50                   	push   eax
c000f5d9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5dd:	56                   	push   esi
c000f5de:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5e2:	50                   	push   eax
c000f5e3:	6a 01                	push   0x1
c000f5e5:	e8 82 f9 ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5ea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5ee:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5f4:	88 ca                	mov    dl,cl
c000f5f6:	83 e0 f0             	and    eax,0xfffffff0
c000f5f9:	83 e2 0f             	and    edx,0xf
c000f5fc:	09 d0                	or     eax,edx
c000f5fe:	88 ca                	mov    dl,cl
c000f600:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f606:	c0 ea 04             	shr    dl,0x4
c000f609:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f60d:	0f b6 c2             	movzx  eax,dl
c000f610:	83 c4 20             	add    esp,0x20
c000f613:	c1 e0 06             	shl    eax,0x6
c000f616:	89 c7                	mov    edi,eax
c000f618:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f61e:	66 25 3f c0          	and    ax,0xc03f
c000f622:	09 f8                	or     eax,edi
c000f624:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f62b:	89 c8                	mov    eax,ecx
c000f62d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f634:	c1 e8 08             	shr    eax,0x8
c000f637:	83 e5 3f             	and    ebp,0x3f
c000f63a:	83 e0 0f             	and    eax,0xf
c000f63d:	89 c7                	mov    edi,eax
c000f63f:	c1 e7 06             	shl    edi,0x6
c000f642:	09 ef                	or     edi,ebp
c000f644:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f64b:	89 fa                	mov    edx,edi
c000f64d:	83 e5 c0             	and    ebp,0xffffffc0
c000f650:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f656:	88 c2                	mov    dl,al
c000f658:	c0 ea 02             	shr    dl,0x2
c000f65b:	89 d7                	mov    edi,edx
c000f65d:	09 ef                	or     edi,ebp
c000f65f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f665:	89 fa                	mov    edx,edi
c000f667:	83 e5 cf             	and    ebp,0xffffffcf
c000f66a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f670:	89 cf                	mov    edi,ecx
c000f672:	c1 ef 0c             	shr    edi,0xc
c000f675:	83 e7 03             	and    edi,0x3
c000f678:	c1 e7 04             	shl    edi,0x4
c000f67b:	09 ef                	or     edi,ebp
c000f67d:	3c 06                	cmp    al,0x6
c000f67f:	89 fa                	mov    edx,edi
c000f681:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f687:	74 04                	je     c000f68d <CPU::detectFeatures()+0x555>
c000f689:	3c 0f                	cmp    al,0xf
c000f68b:	75 5c                	jne    c000f6e9 <CPU::detectFeatures()+0x5b1>
c000f68d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f691:	89 cf                	mov    edi,ecx
c000f693:	c1 ef 10             	shr    edi,0x10
c000f696:	c1 e7 04             	shl    edi,0x4
c000f699:	09 fa                	or     edx,edi
c000f69b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6a1:	0f b6 d2             	movzx  edx,dl
c000f6a4:	66 81 e7 3f c0       	and    di,0xc03f
c000f6a9:	c1 e2 06             	shl    edx,0x6
c000f6ac:	09 fa                	or     edx,edi
c000f6ae:	3c 0f                	cmp    al,0xf
c000f6b0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6b7:	75 30                	jne    c000f6e9 <CPU::detectFeatures()+0x5b1>
c000f6b9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6bf:	c1 e9 14             	shr    ecx,0x14
c000f6c2:	83 e0 3f             	and    eax,0x3f
c000f6c5:	83 c1 0f             	add    ecx,0xf
c000f6c8:	88 ca                	mov    dl,cl
c000f6ca:	c0 e9 02             	shr    cl,0x2
c000f6cd:	c1 e2 06             	shl    edx,0x6
c000f6d0:	09 d0                	or     eax,edx
c000f6d2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6d8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6de:	83 e0 c0             	and    eax,0xffffffc0
c000f6e1:	09 c1                	or     ecx,eax
c000f6e3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6e9:	83 ec 0c             	sub    esp,0xc
c000f6ec:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6f7:	50                   	push   eax
c000f6f8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f6fc:	55                   	push   ebp
c000f6fd:	56                   	push   esi
c000f6fe:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f702:	57                   	push   edi
c000f703:	68 00 00 00 80       	push   0x80000000
c000f708:	e8 5f f8 ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f70d:	83 c4 20             	add    esp,0x20
c000f710:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f718:	76 22                	jbe    c000f73c <CPU::detectFeatures()+0x604>
c000f71a:	83 ec 0c             	sub    esp,0xc
c000f71d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f721:	50                   	push   eax
c000f722:	55                   	push   ebp
c000f723:	56                   	push   esi
c000f724:	57                   	push   edi
c000f725:	68 01 00 00 80       	push   0x80000001
c000f72a:	e8 3d f8 ff ff       	call   c000ef6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f739:	83 c4 20             	add    esp,0x20
c000f73c:	52                   	push   edx
c000f73d:	52                   	push   edx
c000f73e:	68 d1 e0 01 c0       	push   0xc001e0d1
c000f743:	53                   	push   ebx
c000f744:	e8 59 c3 ff ff       	call   c000baa2 <Device::setName(char const*)>
c000f749:	83 c4 10             	add    esp,0x10
c000f74c:	eb 67                	jmp    c000f7b5 <CPU::detectFeatures()+0x67d>
c000f74e:	50                   	push   eax
c000f74f:	50                   	push   eax
c000f750:	68 36 e0 01 c0       	push   0xc001e036
c000f755:	55                   	push   ebp
c000f756:	e8 a5 0e ff ff       	call   c0000600 <strcpy>
c000f75b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f765:	e8 59 0a ff ff       	call   c00001c3 <is486>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	85 c0                	test   eax,eax
c000f76f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f775:	74 1d                	je     c000f794 <CPU::detectFeatures()+0x65c>
c000f777:	83 c8 07             	or     eax,0x7
c000f77a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f780:	0f 20 c0             	mov    eax,cr0
c000f783:	83 e0 14             	and    eax,0x14
c000f786:	83 f8 04             	cmp    eax,0x4
c000f789:	75 0e                	jne    c000f799 <CPU::detectFeatures()+0x661>
c000f78b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f792:	eb 21                	jmp    c000f7b5 <CPU::detectFeatures()+0x67d>
c000f794:	83 e0 f8             	and    eax,0xfffffff8
c000f797:	eb e1                	jmp    c000f77a <CPU::detectFeatures()+0x642>
c000f799:	e8 00 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f79e:	83 e0 01             	and    eax,0x1
c000f7a1:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7a4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7aa:	83 e0 fd             	and    eax,0xfffffffd
c000f7ad:	09 d0                	or     eax,edx
c000f7af:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7b5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7bc:	74 0e                	je     c000f7cc <CPU::detectFeatures()+0x694>
c000f7be:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000f7c3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7ca:	eb 20                	jmp    c000f7ec <CPU::detectFeatures()+0x6b4>
c000f7cc:	e8 cd 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7d1:	83 e0 01             	and    eax,0x1
c000f7d4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7d7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7dd:	83 e0 fd             	and    eax,0xfffffffd
c000f7e0:	09 d0                	or     eax,edx
c000f7e2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7e8:	a8 02                	test   al,0x2
c000f7ea:	75 d2                	jne    c000f7be <CPU::detectFeatures()+0x686>
c000f7ec:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7f3:	83 c4 2c             	add    esp,0x2c
c000f7f6:	5b                   	pop    ebx
c000f7f7:	5e                   	pop    esi
c000f7f8:	5f                   	pop    edi
c000f7f9:	5d                   	pop    ebp
c000f7fa:	c3                   	ret    
c000f7fb:	90                   	nop

c000f7fc <CPU::setupSMEP()>:
c000f7fc:	0f 20 e0             	mov    eax,cr4
c000f7ff:	0d 00 00 10 00       	or     eax,0x100000
c000f804:	0f 22 e0             	mov    cr4,eax
c000f807:	c3                   	ret    

c000f808 <CPU::setupUMIP()>:
c000f808:	0f 20 e0             	mov    eax,cr4
c000f80b:	80 cc 08             	or     ah,0x8
c000f80e:	0f 22 e0             	mov    cr4,eax
c000f811:	c3                   	ret    

c000f812 <CPU::setupTSC()>:
c000f812:	0f 20 e0             	mov    eax,cr4
c000f815:	83 c8 04             	or     eax,0x4
c000f818:	0f 22 e0             	mov    cr4,eax
c000f81b:	c3                   	ret    

c000f81c <CPU::setupLargePages()>:
c000f81c:	0f 20 e0             	mov    eax,cr4
c000f81f:	83 c8 10             	or     eax,0x10
c000f822:	0f 22 e0             	mov    cr4,eax
c000f825:	c3                   	ret    

c000f826 <CPU::setupPAT()>:
c000f826:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000f82b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f832:	74 2c                	je     c000f860 <CPU::setupPAT()+0x3a>
c000f834:	53                   	push   ebx
c000f835:	83 ec 10             	sub    esp,0x10
c000f838:	68 77 02 00 00       	push   0x277
c000f83d:	50                   	push   eax
c000f83e:	e8 af 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f843:	83 e2 f8             	and    edx,0xfffffff8
c000f846:	83 ca 01             	or     edx,0x1
c000f849:	52                   	push   edx
c000f84a:	50                   	push   eax
c000f84b:	68 77 02 00 00       	push   0x277
c000f850:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c000f856:	e8 c3 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f85b:	83 c4 28             	add    esp,0x28
c000f85e:	5b                   	pop    ebx
c000f85f:	c3                   	ret    
c000f860:	c3                   	ret    
c000f861:	90                   	nop

c000f862 <CPU::setupMTRR()>:
c000f862:	c3                   	ret    
c000f863:	90                   	nop

c000f864 <CPU::setupGlobalPages()>:
c000f864:	0f 20 e0             	mov    eax,cr4
c000f867:	0c 80                	or     al,0x80
c000f869:	0f 22 e0             	mov    cr4,eax
c000f86c:	c3                   	ret    
c000f86d:	90                   	nop

c000f86e <CPU::allowUsermodeDataAccess()>:
c000f86e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f872:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f879:	74 03                	je     c000f87e <CPU::allowUsermodeDataAccess()+0x10>
c000f87b:	0f 01 cb             	stac   
c000f87e:	c3                   	ret    
c000f87f:	90                   	nop

c000f880 <CPU::prohibitUsermodeDataAccess()>:
c000f880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f884:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f88b:	74 03                	je     c000f890 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f88d:	0f 01 ca             	clac   
c000f890:	c3                   	ret    
c000f891:	90                   	nop

c000f892 <CPU::setupSMAP()>:
c000f892:	0f 20 e0             	mov    eax,cr4
c000f895:	0d 00 00 20 00       	or     eax,0x200000
c000f89a:	0f 22 e0             	mov    cr4,eax
c000f89d:	eb e1                	jmp    c000f880 <CPU::prohibitUsermodeDataAccess()>
c000f89f:	90                   	nop

c000f8a0 <CPU::setupFeatures()>:
c000f8a0:	53                   	push   ebx
c000f8a1:	83 ec 08             	sub    esp,0x8
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8af:	74 18                	je     c000f8c9 <CPU::setupFeatures()+0x29>
c000f8b1:	83 ec 0c             	sub    esp,0xc
c000f8b4:	68 dd e0 01 c0       	push   0xc001e0dd
c000f8b9:	e8 1a ac ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8c1:	e8 42 ff ff ff       	call   c000f808 <CPU::setupUMIP()>
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8d0:	74 18                	je     c000f8ea <CPU::setupFeatures()+0x4a>
c000f8d2:	83 ec 0c             	sub    esp,0xc
c000f8d5:	68 e7 e0 01 c0       	push   0xc001e0e7
c000f8da:	e8 f9 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e2:	e8 2b ff ff ff       	call   c000f812 <CPU::setupTSC()>
c000f8e7:	83 c4 10             	add    esp,0x10
c000f8ea:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8f1:	74 18                	je     c000f90b <CPU::setupFeatures()+0x6b>
c000f8f3:	83 ec 0c             	sub    esp,0xc
c000f8f6:	68 f0 e0 01 c0       	push   0xc001e0f0
c000f8fb:	e8 d8 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f900:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f903:	e8 14 ff ff ff       	call   c000f81c <CPU::setupLargePages()>
c000f908:	83 c4 10             	add    esp,0x10
c000f90b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f912:	74 18                	je     c000f92c <CPU::setupFeatures()+0x8c>
c000f914:	83 ec 0c             	sub    esp,0xc
c000f917:	68 f9 e0 01 c0       	push   0xc001e0f9
c000f91c:	e8 b7 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f921:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f924:	e8 3b ff ff ff       	call   c000f864 <CPU::setupGlobalPages()>
c000f929:	83 c4 10             	add    esp,0x10
c000f92c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f933:	74 18                	je     c000f94d <CPU::setupFeatures()+0xad>
c000f935:	83 ec 0c             	sub    esp,0xc
c000f938:	68 0b e1 01 c0       	push   0xc001e10b
c000f93d:	e8 96 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f945:	e8 dc fe ff ff       	call   c000f826 <CPU::setupPAT()>
c000f94a:	83 c4 10             	add    esp,0x10
c000f94d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f954:	74 11                	je     c000f967 <CPU::setupFeatures()+0xc7>
c000f956:	c7 44 24 10 14 e1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e114
c000f95e:	83 c4 08             	add    esp,0x8
c000f961:	5b                   	pop    ebx
c000f962:	e9 71 ab ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f967:	83 c4 08             	add    esp,0x8
c000f96a:	5b                   	pop    ebx
c000f96b:	c3                   	ret    

c000f96c <CPU::open(int, int, void*)>:
c000f96c:	57                   	push   edi
c000f96d:	56                   	push   esi
c000f96e:	53                   	push   ebx
c000f96f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f973:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f977:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f97d:	83 ec 0c             	sub    esp,0xc
c000f980:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f986:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f98c:	50                   	push   eax
c000f98d:	e8 4a 77 ff ff       	call   c00070dc <GDT::setup()>
c000f992:	83 c4 0c             	add    esp,0xc
c000f995:	6a 00                	push   0x0
c000f997:	68 ef be ad de       	push   0xdeadbeef
c000f99c:	57                   	push   edi
c000f99d:	e8 6a 92 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000f9a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9a5:	e8 42 92 ff ff       	call   c0008bec <TSS::flush()>
c000f9aa:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9b3:	e8 72 79 ff ff       	call   c000732a <IDT::setup()>
c000f9b8:	b8 00 04 00 00       	mov    eax,0x400
c000f9bd:	0f 23 f8             	mov    db7,eax
c000f9c0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9ca:	e8 c6 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9cf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9d5:	89 30                	mov    DWORD PTR [eax],esi
c000f9d7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9dd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9e0:	58                   	pop    eax
c000f9e1:	5a                   	pop    edx
c000f9e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9ec:	e8 05 a2 ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c000f9f1:	c7 04 24 1e e1 01 c0 	mov    DWORD PTR [esp],0xc001e11e
c000f9f8:	e8 c6 00 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000f9fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa00:	e8 33 f7 ff ff       	call   c000f138 <CPU::detectFeatures()>
c000fa05:	c7 04 24 41 e1 01 c0 	mov    DWORD PTR [esp],0xc001e141
c000fa0c:	e8 b2 00 00 00       	call   c000fac3 <KeSetBootMessage(char const*)>
c000fa11:	e8 42 58 00 00       	call   c0015258 <HalInitialise()>
c000fa16:	a1 b0 04 02 c0       	mov    eax,ds:0xc00204b0
c000fa1b:	83 e0 10             	and    eax,0x10
c000fa1e:	83 f8 01             	cmp    eax,0x1
c000fa21:	19 c0                	sbb    eax,eax
c000fa23:	83 e0 46             	and    eax,0x46
c000fa26:	83 c0 1e             	add    eax,0x1e
c000fa29:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa2c:	e8 40 d7 ff ff       	call   c000d171 <setupTimer(int)>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa3a:	f6 05 b0 04 02 c0 20 	test   BYTE PTR ds:0xc00204b0,0x20
c000fa41:	74 0c                	je     c000fa4f <CPU::open(int, int, void*)+0xe3>
c000fa43:	83 ec 0c             	sub    esp,0xc
c000fa46:	53                   	push   ebx
c000fa47:	e8 54 fe ff ff       	call   c000f8a0 <CPU::setupFeatures()>
c000fa4c:	83 c4 10             	add    esp,0x10
c000fa4f:	5b                   	pop    ebx
c000fa50:	31 c0                	xor    eax,eax
c000fa52:	5e                   	pop    esi
c000fa53:	5f                   	pop    edi
c000fa54:	c3                   	ret    

c000fa55 <KeDisplaySplashScreen()>:
c000fa55:	55                   	push   ebp
c000fa56:	bd 05 00 00 00       	mov    ebp,0x5
c000fa5b:	57                   	push   edi
c000fa5c:	bf e0 f1 01 c0       	mov    edi,0xc001f1e0
c000fa61:	56                   	push   esi
c000fa62:	be 0a 00 00 00       	mov    esi,0xa
c000fa67:	53                   	push   ebx
c000fa68:	31 db                	xor    ebx,ebx
c000fa6a:	83 ec 0c             	sub    esp,0xc
c000fa6d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa70:	84 c0                	test   al,al
c000fa72:	74 47                	je     c000fabb <KeDisplaySplashScreen()+0x66>
c000fa74:	80 bb 16 f2 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0dea],0xdb
c000fa7b:	75 13                	jne    c000fa90 <KeDisplaySplashScreen()+0x3b>
c000fa7d:	0f b6 93 15 f2 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0deb]
c000fa84:	83 e2 fe             	and    edx,0xfffffffe
c000fa87:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa8d:	75 01                	jne    c000fa90 <KeDisplaySplashScreen()+0x3b>
c000fa8f:	46                   	inc    esi
c000fa90:	3c 0d                	cmp    al,0xd
c000fa92:	74 24                	je     c000fab8 <KeDisplaySplashScreen()+0x63>
c000fa94:	3c 0a                	cmp    al,0xa
c000fa96:	75 0a                	jne    c000faa2 <KeDisplaySplashScreen()+0x4d>
c000fa98:	45                   	inc    ebp
c000fa99:	be 0a 00 00 00       	mov    esi,0xa
c000fa9e:	31 db                	xor    ebx,ebx
c000faa0:	eb 16                	jmp    c000fab8 <KeDisplaySplashScreen()+0x63>
c000faa2:	83 ec 0c             	sub    esp,0xc
c000faa5:	8d 14 33             	lea    edx,[ebx+esi*1]
c000faa8:	55                   	push   ebp
c000faa9:	43                   	inc    ebx
c000faaa:	52                   	push   edx
c000faab:	6a 00                	push   0x0
c000faad:	6a 0e                	push   0xe
c000faaf:	50                   	push   eax
c000fab0:	e8 07 64 00 00       	call   c0015ebc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fab5:	83 c4 20             	add    esp,0x20
c000fab8:	47                   	inc    edi
c000fab9:	eb b2                	jmp    c000fa6d <KeDisplaySplashScreen()+0x18>
c000fabb:	83 c4 0c             	add    esp,0xc
c000fabe:	5b                   	pop    ebx
c000fabf:	5e                   	pop    esi
c000fac0:	5f                   	pop    edi
c000fac1:	5d                   	pop    ebp
c000fac2:	c3                   	ret    

c000fac3 <KeSetBootMessage(char const*)>:
c000fac3:	57                   	push   edi
c000fac4:	56                   	push   esi
c000fac5:	53                   	push   ebx
c000fac6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000facc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fad3:	68 9e 00 00 00       	push   0x9e
c000fad8:	6a 00                	push   0x0
c000fada:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fade:	56                   	push   esi
c000fadf:	e8 ec 09 ff ff       	call   c00004d0 <memset>
c000fae4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fae7:	e8 54 0a ff ff       	call   c0000540 <strlen>
c000faec:	ba 50 00 00 00       	mov    edx,0x50
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	29 c2                	sub    edx,eax
c000faf6:	31 c9                	xor    ecx,ecx
c000faf8:	83 e2 fe             	and    edx,0xfffffffe
c000fafb:	01 f2                	add    edx,esi
c000fafd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb02:	84 c0                	test   al,al
c000fb04:	74 0a                	je     c000fb10 <KeSetBootMessage(char const*)+0x4d>
c000fb06:	80 cc 0f             	or     ah,0xf
c000fb09:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb0d:	41                   	inc    ecx
c000fb0e:	eb ed                	jmp    c000fafd <KeSetBootMessage(char const*)+0x3a>
c000fb10:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb15:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb1c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb22:	5b                   	pop    ebx
c000fb23:	5e                   	pop    esi
c000fb24:	5f                   	pop    edi
c000fb25:	c3                   	ret    

c000fb26 <EnvVarContainer::getEnv(char const*)>:
c000fb26:	57                   	push   edi
c000fb27:	56                   	push   esi
c000fb28:	53                   	push   ebx
c000fb29:	31 db                	xor    ebx,ebx
c000fb2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb2f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb31:	7e 2b                	jle    c000fb5e <EnvVarContainer::getEnv(char const*)+0x38>
c000fb33:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb3a:	50                   	push   eax
c000fb3b:	50                   	push   eax
c000fb3c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb3f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb46:	e8 95 0b ff ff       	call   c00006e0 <strcmp>
c000fb4b:	83 c4 10             	add    esp,0x10
c000fb4e:	85 c0                	test   eax,eax
c000fb50:	75 09                	jne    c000fb5b <EnvVarContainer::getEnv(char const*)+0x35>
c000fb52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb55:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb59:	eb 05                	jmp    c000fb60 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb5b:	43                   	inc    ebx
c000fb5c:	eb d1                	jmp    c000fb2f <EnvVarContainer::getEnv(char const*)+0x9>
c000fb5e:	31 c0                	xor    eax,eax
c000fb60:	5b                   	pop    ebx
c000fb61:	5e                   	pop    esi
c000fb62:	5f                   	pop    edi
c000fb63:	c3                   	ret    

c000fb64 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb64:	55                   	push   ebp
c000fb65:	57                   	push   edi
c000fb66:	56                   	push   esi
c000fb67:	53                   	push   ebx
c000fb68:	83 ec 28             	sub    esp,0x28
c000fb6b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb73:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb77:	56                   	push   esi
c000fb78:	e8 c3 09 ff ff       	call   c0000540 <strlen>
c000fb7d:	40                   	inc    eax
c000fb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb81:	e8 33 7c ff ff       	call   c00077b9 <malloc>
c000fb86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb8d:	e8 ae 09 ff ff       	call   c0000540 <strlen>
c000fb92:	40                   	inc    eax
c000fb93:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb96:	e8 1e 7c ff ff       	call   c00077b9 <malloc>
c000fb9b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fba2:	e8 99 09 ff ff       	call   c0000540 <strlen>
c000fba7:	83 c4 0c             	add    esp,0xc
c000fbaa:	40                   	inc    eax
c000fbab:	50                   	push   eax
c000fbac:	6a 00                	push   0x0
c000fbae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbb2:	e8 19 09 ff ff       	call   c00004d0 <memset>
c000fbb7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbba:	e8 81 09 ff ff       	call   c0000540 <strlen>
c000fbbf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbc3:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbcb:	89 de                	mov    esi,ebx
c000fbcd:	e8 6e 09 ff ff       	call   c0000540 <strlen>
c000fbd2:	83 c4 0c             	add    esp,0xc
c000fbd5:	40                   	inc    eax
c000fbd6:	50                   	push   eax
c000fbd7:	6a 00                	push   0x0
c000fbd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbdd:	e8 ee 08 ff ff       	call   c00004d0 <memset>
c000fbe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbe5:	e8 56 09 ff ff       	call   c0000540 <strlen>
c000fbea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbee:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbf3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbf6:	40                   	inc    eax
c000fbf7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fbfa:	c1 e0 03             	shl    eax,0x3
c000fbfd:	5a                   	pop    edx
c000fbfe:	59                   	pop    ecx
c000fbff:	50                   	push   eax
c000fc00:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc03:	e8 9d 7b ff ff       	call   c00077a5 <realloc>
c000fc08:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc12:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc16:	b9 08 00 00 00       	mov    ecx,0x8
c000fc1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc1d:	83 c4 2c             	add    esp,0x2c
c000fc20:	5b                   	pop    ebx
c000fc21:	5e                   	pop    esi
c000fc22:	5f                   	pop    edi
c000fc23:	5d                   	pop    ebp
c000fc24:	c3                   	ret    
c000fc25:	90                   	nop

c000fc26 <EnvVarContainer::deleteEnv(char const*)>:
c000fc26:	c3                   	ret    
c000fc27:	90                   	nop

c000fc28 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc28:	55                   	push   ebp
c000fc29:	57                   	push   edi
c000fc2a:	56                   	push   esi
c000fc2b:	53                   	push   ebx
c000fc2c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc32:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc39:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc40:	68 14 01 00 00       	push   0x114
c000fc45:	e8 6f 7b ff ff       	call   c00077b9 <malloc>
c000fc4a:	83 c4 0c             	add    esp,0xc
c000fc4d:	89 c3                	mov    ebx,eax
c000fc4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc52:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc59:	50                   	push   eax
c000fc5a:	e8 ef ad ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000fc5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc62:	e8 15 b1 ff ff       	call   c000ad7c <File::exists()>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	84 c0                	test   al,al
c000fc6c:	75 31                	jne    c000fc9f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc6e:	50                   	push   eax
c000fc6f:	50                   	push   eax
c000fc70:	6a 12                	push   0x12
c000fc72:	53                   	push   ebx
c000fc73:	e8 96 ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fc78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc7a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc7d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc80:	e8 bb 08 ff ff       	call   c0000540 <strlen>
c000fc85:	5a                   	pop    edx
c000fc86:	31 d2                	xor    edx,edx
c000fc88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc8c:	51                   	push   ecx
c000fc8d:	56                   	push   esi
c000fc8e:	52                   	push   edx
c000fc8f:	50                   	push   eax
c000fc90:	53                   	push   ebx
c000fc91:	ff d7                	call   edi
c000fc93:	83 c4 14             	add    esp,0x14
c000fc96:	53                   	push   ebx
c000fc97:	e8 d0 ae ff ff       	call   c000ab6c <File::close()>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	56                   	push   esi
c000fca0:	31 f6                	xor    esi,esi
c000fca2:	68 00 01 00 00       	push   0x100
c000fca7:	6a 00                	push   0x0
c000fca9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcad:	50                   	push   eax
c000fcae:	e8 1d 08 ff ff       	call   c00004d0 <memset>
c000fcb3:	5f                   	pop    edi
c000fcb4:	58                   	pop    eax
c000fcb5:	6a 01                	push   0x1
c000fcb7:	53                   	push   ebx
c000fcb8:	e8 51 ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fccd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcd1:	51                   	push   ecx
c000fcd2:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcd6:	52                   	push   edx
c000fcd7:	6a 00                	push   0x0
c000fcd9:	6a 01                	push   0x1
c000fcdb:	53                   	push   ebx
c000fcdc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fcdf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fce3:	83 c4 20             	add    esp,0x20
c000fce6:	3c 0d                	cmp    al,0xd
c000fce8:	0f 84 09 01 00 00    	je     c000fdf7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcf3:	0f 84 ef 00 00 00    	je     c000fde8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcf9:	3c 0a                	cmp    al,0xa
c000fcfb:	74 13                	je     c000fd10 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcfd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd02:	74 0c                	je     c000fd10 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd0a:	0f 8e d8 00 00 00    	jle    c000fde8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd14:	83 ec 0c             	sub    esp,0xc
c000fd17:	8d 78 01             	lea    edi,[eax+0x1]
c000fd1a:	57                   	push   edi
c000fd1b:	e8 99 7a ff ff       	call   c00077b9 <malloc>
c000fd20:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd28:	8d 56 04             	lea    edx,[esi+0x4]
c000fd2b:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd32:	e8 82 7a ff ff       	call   c00077b9 <malloc>
c000fd37:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd3b:	83 c4 0c             	add    esp,0xc
c000fd3e:	57                   	push   edi
c000fd3f:	6a 00                	push   0x0
c000fd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd45:	e8 86 07 ff ff       	call   c00004d0 <memset>
c000fd4a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd58:	83 c4 0c             	add    esp,0xc
c000fd5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd5f:	52                   	push   edx
c000fd60:	6a 00                	push   0x0
c000fd62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd66:	e8 65 07 ff ff       	call   c00004d0 <memset>
c000fd6b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd6f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd73:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd76:	e8 c5 07 ff ff       	call   c0000540 <strlen>
c000fd7b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd7f:	89 c1                	mov    ecx,eax
c000fd81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd86:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd89:	40                   	inc    eax
c000fd8a:	83 c4 10             	add    esp,0x10
c000fd8d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd90:	85 d2                	test   edx,edx
c000fd92:	75 0c                	jne    c000fda0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	6a 08                	push   0x8
c000fd99:	e8 1b 7a ff ff       	call   c00077b9 <malloc>
c000fd9e:	eb 0c                	jmp    c000fdac <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fda0:	c1 e0 03             	shl    eax,0x3
c000fda3:	51                   	push   ecx
c000fda4:	51                   	push   ecx
c000fda5:	50                   	push   eax
c000fda6:	52                   	push   edx
c000fda7:	e8 f9 79 ff ff       	call   c00077a5 <realloc>
c000fdac:	83 c4 10             	add    esp,0x10
c000fdaf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdb2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdb5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fdb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdbc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdc0:	b9 08 00 00 00       	mov    ecx,0x8
c000fdc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc7:	31 f6                	xor    esi,esi
c000fdc9:	50                   	push   eax
c000fdca:	68 00 01 00 00       	push   0x100
c000fdcf:	6a 00                	push   0x0
c000fdd1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdd5:	50                   	push   eax
c000fdd6:	e8 f5 06 ff ff       	call   c00004d0 <memset>
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fde6:	eb 0f                	jmp    c000fdf7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fde8:	3c 3d                	cmp    al,0x3d
c000fdea:	74 07                	je     c000fdf3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fdec:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdf0:	46                   	inc    esi
c000fdf1:	eb 04                	jmp    c000fdf7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdf3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fdf7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdfc:	0f 85 c6 fe ff ff    	jne    c000fcc8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe02:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe08:	5b                   	pop    ebx
c000fe09:	5e                   	pop    esi
c000fe0a:	5f                   	pop    edi
c000fe0b:	5d                   	pop    ebp
c000fe0c:	c3                   	ret    
c000fe0d:	90                   	nop

c000fe0e <EnvVarContainer::__loadSystem()>:
c000fe0e:	83 ec 10             	sub    esp,0x10
c000fe11:	68 40 f3 01 c0       	push   0xc001f340
c000fe16:	68 84 e1 01 c0       	push   0xc001e184
c000fe1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe1f:	e8 04 fe ff ff       	call   c000fc28 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe24:	83 c4 1c             	add    esp,0x1c
c000fe27:	c3                   	ret    

c000fe28 <EnvVarContainer::__loadUser()>:
c000fe28:	c3                   	ret    
c000fe29:	90                   	nop

c000fe2a <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe3c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe4a:	90                   	nop
c000fe4b:	c3                   	ret    

c000fe4c <EnvVarContainer::~EnvVarContainer()>:
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe56:	85 c0                	test   eax,eax
c000fe58:	74 1d                	je     c000fe77 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe60:	85 c0                	test   eax,eax
c000fe62:	74 13                	je     c000fe77 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe6b:	83 ec 0c             	sub    esp,0xc
c000fe6e:	50                   	push   eax
c000fe6f:	e8 55 79 ff ff       	call   c00077c9 <free>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	90                   	nop
c000fe78:	83 c4 0c             	add    esp,0xc
c000fe7b:	c3                   	ret    

c000fe7c <Krnl::getEnv(Process*, char const*)>:
c000fe7c:	53                   	push   ebx
c000fe7d:	83 ec 08             	sub    esp,0x8
c000fe80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe88:	39 05 70 37 02 c0    	cmp    DWORD PTR ds:0xc0023770,eax
c000fe8e:	74 04                	je     c000fe94 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe90:	85 c0                	test   eax,eax
c000fe92:	75 0b                	jne    c000fe9f <Krnl::getEnv(Process*, char const*)+0x23>
c000fe94:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c000fe99:	85 c0                	test   eax,eax
c000fe9b:	75 19                	jne    c000feb6 <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe9d:	eb 27                	jmp    c000fec6 <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe9f:	52                   	push   edx
c000fea0:	52                   	push   edx
c000fea1:	53                   	push   ebx
c000fea2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fea8:	e8 79 fc ff ff       	call   c000fb26 <EnvVarContainer::getEnv(char const*)>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	85 c0                	test   eax,eax
c000feb2:	75 28                	jne    c000fedc <Krnl::getEnv(Process*, char const*)+0x60>
c000feb4:	eb de                	jmp    c000fe94 <Krnl::getEnv(Process*, char const*)+0x18>
c000feb6:	52                   	push   edx
c000feb7:	52                   	push   edx
c000feb8:	53                   	push   ebx
c000feb9:	50                   	push   eax
c000feba:	e8 67 fc ff ff       	call   c000fb26 <EnvVarContainer::getEnv(char const*)>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	85 c0                	test   eax,eax
c000fec4:	75 16                	jne    c000fedc <Krnl::getEnv(Process*, char const*)+0x60>
c000fec6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000feca:	a1 14 2f 02 c0       	mov    eax,ds:0xc0022f14
c000fecf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fed3:	83 c4 08             	add    esp,0x8
c000fed6:	5b                   	pop    ebx
c000fed7:	e9 4a fc ff ff       	jmp    c000fb26 <EnvVarContainer::getEnv(char const*)>
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	c3                   	ret    

c000fee1 <Krnl::setEnvSystem(char const*, char const*)>:
c000fee1:	83 ec 10             	sub    esp,0x10
c000fee4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feec:	ff 35 14 2f 02 c0    	push   DWORD PTR ds:0xc0022f14
c000fef2:	e8 6d fc ff ff       	call   c000fb64 <EnvVarContainer::setEnv(char const*, char const*)>
c000fef7:	83 c4 1c             	add    esp,0x1c
c000fefa:	c3                   	ret    

c000fefb <Krnl::setEnvUser(char const*, char const*)>:
c000fefb:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c000ff00:	85 c0                	test   eax,eax
c000ff02:	74 15                	je     c000ff19 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff04:	83 ec 10             	sub    esp,0x10
c000ff07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff0f:	50                   	push   eax
c000ff10:	e8 4f fc ff ff       	call   c000fb64 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff15:	83 c4 1c             	add    esp,0x1c
c000ff18:	c3                   	ret    
c000ff19:	c3                   	ret    

c000ff1a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff1e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff28:	e9 37 fc ff ff       	jmp    c000fb64 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff2d <Krnl::deleteEnvSystem(char const*)>:
c000ff2d:	c3                   	ret    

c000ff2e <Krnl::deleteEnvUser(char const*)>:
c000ff2e:	c3                   	ret    

c000ff2f <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff2f:	c3                   	ret    

c000ff30 <Krnl::newProcessEnv(Process*)>:
c000ff30:	83 ec 28             	sub    esp,0x28
c000ff33:	6a 0c                	push   0xc
c000ff35:	e8 7f 78 ff ff       	call   c00077b9 <malloc>
c000ff3a:	5a                   	pop    edx
c000ff3b:	59                   	pop    ecx
c000ff3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff40:	50                   	push   eax
c000ff41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff45:	e8 e0 fe ff ff       	call   c000fe2a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff4e:	83 c4 2c             	add    esp,0x2c
c000ff51:	c3                   	ret    

c000ff52 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff52:	57                   	push   edi
c000ff53:	56                   	push   esi
c000ff54:	53                   	push   ebx
c000ff55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff59:	83 ec 0c             	sub    esp,0xc
c000ff5c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff62:	6a 0c                	push   0xc
c000ff64:	e8 50 78 ff ff       	call   c00077b9 <malloc>
c000ff69:	89 c3                	mov    ebx,eax
c000ff6b:	58                   	pop    eax
c000ff6c:	5a                   	pop    edx
c000ff6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff71:	53                   	push   ebx
c000ff72:	e8 b3 fe ff ff       	call   c000fe2a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff77:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff79:	89 03                	mov    DWORD PTR [ebx],eax
c000ff7b:	c1 e0 03             	shl    eax,0x3
c000ff7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff81:	e8 33 78 ff ff       	call   c00077b9 <malloc>
c000ff86:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff89:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff8b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff8e:	c1 e1 03             	shl    ecx,0x3
c000ff91:	89 c7                	mov    edi,eax
c000ff93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff95:	83 c4 10             	add    esp,0x10
c000ff98:	89 d8                	mov    eax,ebx
c000ff9a:	5b                   	pop    ebx
c000ff9b:	5e                   	pop    esi
c000ff9c:	5f                   	pop    edi
c000ff9d:	c3                   	ret    

c000ff9e <Krnl::loadSystemEnv()>:
c000ff9e:	53                   	push   ebx
c000ff9f:	83 ec 14             	sub    esp,0x14
c000ffa2:	6a 0c                	push   0xc
c000ffa4:	e8 10 78 ff ff       	call   c00077b9 <malloc>
c000ffa9:	89 c3                	mov    ebx,eax
c000ffab:	58                   	pop    eax
c000ffac:	5a                   	pop    edx
c000ffad:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000ffb3:	53                   	push   ebx
c000ffb4:	e8 71 fe ff ff       	call   c000fe2a <EnvVarContainer::EnvVarContainer(Process*)>
c000ffb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffbc:	89 1d 14 2f 02 c0    	mov    DWORD PTR ds:0xc0022f14,ebx
c000ffc2:	e8 47 fe ff ff       	call   c000fe0e <EnvVarContainer::__loadSystem()>
c000ffc7:	83 c4 18             	add    esp,0x18
c000ffca:	5b                   	pop    ebx
c000ffcb:	c3                   	ret    

c000ffcc <Krnl::loadUserEnv()>:
c000ffcc:	53                   	push   ebx
c000ffcd:	83 ec 14             	sub    esp,0x14
c000ffd0:	6a 0c                	push   0xc
c000ffd2:	e8 e2 77 ff ff       	call   c00077b9 <malloc>
c000ffd7:	89 c3                	mov    ebx,eax
c000ffd9:	58                   	pop    eax
c000ffda:	5a                   	pop    edx
c000ffdb:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000ffe1:	53                   	push   ebx
c000ffe2:	e8 43 fe ff ff       	call   c000fe2a <EnvVarContainer::EnvVarContainer(Process*)>
c000ffe7:	89 1d 10 2f 02 c0    	mov    DWORD PTR ds:0xc0022f10,ebx
c000ffed:	83 c4 18             	add    esp,0x18
c000fff0:	5b                   	pop    ebx
c000fff1:	c3                   	ret    

c000fff2 <Krnl::flushEnv()>:
c000fff2:	c3                   	ret    

c000fff3 <Krnl::getProcessTotalEnvCount(Process*)>:
c000fff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff7:	8b 15 10 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f10
c000fffd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010003:	a1 14 2f 02 c0       	mov    eax,ds:0xc0022f14
c0010008:	8b 00                	mov    eax,DWORD PTR [eax]
c001000a:	03 01                	add    eax,DWORD PTR [ecx]
c001000c:	85 d2                	test   edx,edx
c001000e:	74 02                	je     c0010012 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010010:	03 02                	add    eax,DWORD PTR [edx]
c0010012:	c3                   	ret    

c0010013 <Krnl::getProcessEnvPair(Process*, int)>:
c0010013:	57                   	push   edi
c0010014:	56                   	push   esi
c0010015:	8b 35 10 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f10
c001001b:	53                   	push   ebx
c001001c:	85 f6                	test   esi,esi
c001001e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010022:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010026:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001002c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010030:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010032:	75 16                	jne    c001004a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010034:	39 c2                	cmp    edx,eax
c0010036:	7c 16                	jl     c001004e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010038:	8b 0d 14 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f14
c001003e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010040:	01 c6                	add    esi,eax
c0010042:	39 d6                	cmp    esi,edx
c0010044:	7e 3c                	jle    c0010082 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010046:	29 c2                	sub    edx,eax
c0010048:	eb 04                	jmp    c001004e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001004a:	39 c2                	cmp    edx,eax
c001004c:	7d 05                	jge    c0010053 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001004e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010051:	eb 20                	jmp    c0010073 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010053:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010055:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010058:	39 d1                	cmp    ecx,edx
c001005a:	7e 04                	jle    c0010060 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001005c:	29 c2                	sub    edx,eax
c001005e:	eb 10                	jmp    c0010070 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010060:	8b 35 14 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f14
c0010066:	03 0e                	add    ecx,DWORD PTR [esi]
c0010068:	39 d1                	cmp    ecx,edx
c001006a:	7e 16                	jle    c0010082 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001006c:	29 c2                	sub    edx,eax
c001006e:	29 fa                	sub    edx,edi
c0010070:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010073:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010076:	8b 02                	mov    eax,DWORD PTR [edx]
c0010078:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001007b:	89 03                	mov    DWORD PTR [ebx],eax
c001007d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010080:	eb 1d                	jmp    c001009f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010082:	83 ec 0c             	sub    esp,0xc
c0010085:	68 a6 e1 01 c0       	push   0xc001e1a6
c001008a:	e8 ac 00 00 00       	call   c001013b <KePanic(char const*)>
c001008f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010095:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	89 d8                	mov    eax,ebx
c00100a1:	5b                   	pop    ebx
c00100a2:	5e                   	pop    esi
c00100a3:	5f                   	pop    edi
c00100a4:	c2 04 00             	ret    0x4

c00100a7 <CPU::current()>:
c00100a7:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00100ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100b2:	c3                   	ret    

c00100b3 <operator new(unsigned long)>:
c00100b3:	e9 01 77 ff ff       	jmp    c00077b9 <malloc>

c00100b8 <operator delete(void*)>:
c00100b8:	e9 1c 77 ff ff       	jmp    c00077d9 <rfree>

c00100bd <disableIRQs()>:
c00100bd:	fa                   	cli    
c00100be:	c3                   	ret    

c00100bf <enableIRQs()>:
c00100bf:	fb                   	sti    
c00100c0:	c3                   	ret    

c00100c1 <lockScheduler()>:
c00100c1:	fa                   	cli    
c00100c2:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00100c8:	c3                   	ret    

c00100c9 <unlockScheduler()>:
c00100c9:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00100ce:	48                   	dec    eax
c00100cf:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00100d4:	75 01                	jne    c00100d7 <unlockScheduler()+0xe>
c00100d6:	fb                   	sti    
c00100d7:	c3                   	ret    

c00100d8 <lockStuff()>:
c00100d8:	fa                   	cli    
c00100d9:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00100df:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c00100e5:	c3                   	ret    

c00100e6 <unlockStuff()>:
c00100e6:	83 ec 0c             	sub    esp,0xc
c00100e9:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00100ee:	48                   	dec    eax
c00100ef:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00100f4:	75 18                	jne    c001010e <unlockStuff()+0x28>
c00100f6:	83 3d 40 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023740,0x0
c00100fd:	74 0f                	je     c001010e <unlockStuff()+0x28>
c00100ff:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0010109:	e8 3e 32 00 00       	call   c001334c <schedule()>
c001010e:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0010113:	48                   	dec    eax
c0010114:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0010119:	75 01                	jne    c001011c <unlockStuff()+0x36>
c001011b:	fb                   	sti    
c001011c:	83 c4 0c             	add    esp,0xc
c001011f:	c3                   	ret    

c0010120 <Virt::getAKernelVAS()>:
c0010120:	a1 90 05 02 c0       	mov    eax,ds:0xc0020590
c0010125:	c3                   	ret    

c0010126 <__not_memcpy>:
c0010126:	57                   	push   edi
c0010127:	56                   	push   esi
c0010128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001012c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010130:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010134:	89 c7                	mov    edi,eax
c0010136:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010138:	5e                   	pop    esi
c0010139:	5f                   	pop    edi
c001013a:	c3                   	ret    

c001013b <KePanic(char const*)>:
c001013b:	c6 05 18 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f18,0x1
c0010142:	e9 fd 4f 00 00       	jmp    c0015144 <HalPanic(char const*)>

c0010147 <Krnl::powerThread(void*)>:
c0010147:	83 ec 0c             	sub    esp,0xc
c001014a:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001014f:	48                   	dec    eax
c0010150:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0010155:	75 01                	jne    c0010158 <Krnl::powerThread(void*)+0x11>
c0010157:	fb                   	sti    
c0010158:	83 ec 0c             	sub    esp,0xc
c001015b:	c6 05 20 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f20,0x0
c0010162:	6a 0a                	push   0xa
c0010164:	e8 f3 34 00 00       	call   c001365c <sleep(unsigned int)>
c0010169:	83 05 64 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022f64,0xa
c0010170:	83 c4 10             	add    esp,0x10
c0010173:	eb e3                	jmp    c0010158 <Krnl::powerThread(void*)+0x11>

c0010175 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010175:	57                   	push   edi
c0010176:	b9 09 00 00 00       	mov    ecx,0x9
c001017b:	56                   	push   esi
c001017c:	bf 40 2f 02 c0       	mov    edi,0xc0022f40
c0010181:	fc                   	cld    
c0010182:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010186:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010188:	5e                   	pop    esi
c0010189:	5f                   	pop    edi
c001018a:	c3                   	ret    

c001018b <Krnl::userIOReceived()>:
c001018b:	c7 05 64 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f64,0x0
c0010195:	c3                   	ret    

c0010196 <Krnl::handlePowerButton()>:
c0010196:	83 ec 0c             	sub    esp,0xc
c0010199:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c001019e:	83 f8 02             	cmp    eax,0x2
c00101a1:	75 10                	jne    c00101b3 <Krnl::handlePowerButton()+0x1d>
c00101a3:	83 ec 0c             	sub    esp,0xc
c00101a6:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101ac:	e8 a5 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101b1:	eb 11                	jmp    c00101c4 <Krnl::handlePowerButton()+0x2e>
c00101b3:	48                   	dec    eax
c00101b4:	75 11                	jne    c00101c7 <Krnl::handlePowerButton()+0x31>
c00101b6:	83 ec 0c             	sub    esp,0xc
c00101b9:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101bf:	e8 c2 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	83 c4 0c             	add    esp,0xc
c00101ca:	c3                   	ret    

c00101cb <Krnl::handleSleepButton()>:
c00101cb:	83 ec 0c             	sub    esp,0xc
c00101ce:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c00101d3:	83 f8 02             	cmp    eax,0x2
c00101d6:	75 10                	jne    c00101e8 <Krnl::handleSleepButton()+0x1d>
c00101d8:	83 ec 0c             	sub    esp,0xc
c00101db:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101e1:	e8 70 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101e6:	eb 11                	jmp    c00101f9 <Krnl::handleSleepButton()+0x2e>
c00101e8:	48                   	dec    eax
c00101e9:	75 11                	jne    c00101fc <Krnl::handleSleepButton()+0x31>
c00101eb:	83 ec 0c             	sub    esp,0xc
c00101ee:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101f4:	e8 8d 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101f9:	83 c4 10             	add    esp,0x10
c00101fc:	83 c4 0c             	add    esp,0xc
c00101ff:	c3                   	ret    

c0010200 <Krnl::setupPowerManager()>:
c0010200:	83 ec 0c             	sub    esp,0xc
c0010203:	c7 05 64 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f64,0x0
c001020d:	68 f0 00 00 00       	push   0xf0
c0010212:	c6 05 20 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f20,0x0
c0010219:	6a 00                	push   0x0
c001021b:	68 47 01 01 c0       	push   0xc0010147
c0010220:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0010226:	e8 01 2f 00 00       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c001022b:	c7 05 40 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022f40,0x2
c0010235:	c7 05 44 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022f44,0x1
c001023f:	c7 05 48 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022f48,0x3
c0010249:	c7 05 4c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f4c,0x0
c0010253:	c7 05 58 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f58,0x0
c001025d:	c7 05 50 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f50,0x0
c0010267:	c7 05 5c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f5c,0x0
c0010271:	c7 05 54 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f54,0x3c
c001027b:	c7 05 60 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f60,0x3c
c0010285:	83 c4 1c             	add    esp,0x1c
c0010288:	c3                   	ret    
c0010289:	66 90                	xchg   ax,ax
c001028b:	90                   	nop

c001028c <KeResolveCompatibilitySymbol(char*)>:
c001028c:	83 ec 0c             	sub    esp,0xc
c001028f:	83 ec 08             	sub    esp,0x8
c0010292:	68 c0 e1 01 c0       	push   0xc001e1c0
c0010297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029b:	e8 40 04 ff ff       	call   c00006e0 <strcmp>
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	85 c0                	test   eax,eax
c00102a5:	0f 94 c0             	sete   al
c00102a8:	84 c0                	test   al,al
c00102aa:	74 0c                	je     c00102b8 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102ac:	b8 98 04 02 c0       	mov    eax,0xc0020498
c00102b1:	e9 62 01 00 00       	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102b6:	66 90                	xchg   ax,ax
c00102b8:	83 ec 08             	sub    esp,0x8
c00102bb:	68 c9 e1 01 c0       	push   0xc001e1c9
c00102c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c4:	e8 17 04 ff ff       	call   c00006e0 <strcmp>
c00102c9:	83 c4 10             	add    esp,0x10
c00102cc:	85 c0                	test   eax,eax
c00102ce:	0f 94 c0             	sete   al
c00102d1:	84 c0                	test   al,al
c00102d3:	74 0b                	je     c00102e0 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102d5:	b8 50 bc 01 c0       	mov    eax,0xc001bc50
c00102da:	e9 39 01 00 00       	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102df:	90                   	nop
c00102e0:	83 ec 08             	sub    esp,0x8
c00102e3:	68 d3 e1 01 c0       	push   0xc001e1d3
c00102e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ec:	e8 ef 03 ff ff       	call   c00006e0 <strcmp>
c00102f1:	83 c4 10             	add    esp,0x10
c00102f4:	85 c0                	test   eax,eax
c00102f6:	0f 94 c0             	sete   al
c00102f9:	84 c0                	test   al,al
c00102fb:	74 0b                	je     c0010308 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00102fd:	b8 84 b9 01 c0       	mov    eax,0xc001b984
c0010302:	e9 11 01 00 00       	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010307:	90                   	nop
c0010308:	83 ec 08             	sub    esp,0x8
c001030b:	68 dc e1 01 c0       	push   0xc001e1dc
c0010310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010314:	e8 c7 03 ff ff       	call   c00006e0 <strcmp>
c0010319:	83 c4 10             	add    esp,0x10
c001031c:	85 c0                	test   eax,eax
c001031e:	0f 94 c0             	sete   al
c0010321:	84 c0                	test   al,al
c0010323:	74 0b                	je     c0010330 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010325:	b8 3b 01 01 c0       	mov    eax,0xc001013b
c001032a:	e9 e9 00 00 00       	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001032f:	90                   	nop
c0010330:	83 ec 08             	sub    esp,0x8
c0010333:	68 ef e1 01 c0       	push   0xc001e1ef
c0010338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001033c:	e8 9f 03 ff ff       	call   c00006e0 <strcmp>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	85 c0                	test   eax,eax
c0010346:	0f 94 c0             	sete   al
c0010349:	84 c0                	test   al,al
c001034b:	74 0b                	je     c0010358 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001034d:	b8 c3 fa 00 c0       	mov    eax,0xc000fac3
c0010352:	e9 c1 00 00 00       	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010357:	90                   	nop
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	68 0c e2 01 c0       	push   0xc001e20c
c0010360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010364:	e8 77 03 ff ff       	call   c00006e0 <strcmp>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	85 c0                	test   eax,eax
c001036e:	0f 94 c0             	sete   al
c0010371:	84 c0                	test   al,al
c0010373:	74 0b                	je     c0010380 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010375:	b8 50 bd 01 c0       	mov    eax,0xc001bd50
c001037a:	e9 99 00 00 00       	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037f:	90                   	nop
c0010380:	83 ec 08             	sub    esp,0x8
c0010383:	68 16 e2 01 c0       	push   0xc001e216
c0010388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038c:	e8 4f 03 ff ff       	call   c00006e0 <strcmp>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	85 c0                	test   eax,eax
c0010396:	0f 94 c0             	sete   al
c0010399:	84 c0                	test   al,al
c001039b:	74 07                	je     c00103a4 <KeResolveCompatibilitySymbol(char*)+0x118>
c001039d:	b8 d0 ba 01 c0       	mov    eax,0xc001bad0
c00103a2:	eb 74                	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a4:	83 ec 08             	sub    esp,0x8
c00103a7:	68 1f e2 01 c0       	push   0xc001e21f
c00103ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b0:	e8 2b 03 ff ff       	call   c00006e0 <strcmp>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	85 c0                	test   eax,eax
c00103ba:	0f 94 c0             	sete   al
c00103bd:	84 c0                	test   al,al
c00103bf:	74 07                	je     c00103c8 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103c1:	b8 9c 04 02 c0       	mov    eax,0xc002049c
c00103c6:	eb 50                	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103c8:	83 ec 08             	sub    esp,0x8
c00103cb:	68 37 e2 01 c0       	push   0xc001e237
c00103d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d4:	e8 07 03 ff ff       	call   c00006e0 <strcmp>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	85 c0                	test   eax,eax
c00103de:	0f 94 c0             	sete   al
c00103e1:	84 c0                	test   al,al
c00103e3:	74 07                	je     c00103ec <KeResolveCompatibilitySymbol(char*)+0x160>
c00103e5:	b8 9c 04 02 c0       	mov    eax,0xc002049c
c00103ea:	eb 2c                	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ec:	83 ec 08             	sub    esp,0x8
c00103ef:	68 44 e2 01 c0       	push   0xc001e244
c00103f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f8:	e8 e3 02 ff ff       	call   c00006e0 <strcmp>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	85 c0                	test   eax,eax
c0010402:	0f 94 c0             	sete   al
c0010405:	84 c0                	test   al,al
c0010407:	74 07                	je     c0010410 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010409:	b8 9d 04 02 c0       	mov    eax,0xc002049d
c001040e:	eb 08                	jmp    c0010418 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010410:	b8 00 00 00 00       	mov    eax,0x0
c0010415:	8d 76 00             	lea    esi,[esi+0x0]
c0010418:	83 c4 0c             	add    esp,0xc
c001041b:	c3                   	ret    

c001041c <SysSeekDir(regs*)>:
c001041c:	31 c0                	xor    eax,eax
c001041e:	31 d2                	xor    edx,edx
c0010420:	c3                   	ret    

c0010421 <SysTellDir(regs*)>:
c0010421:	31 c0                	xor    eax,eax
c0010423:	31 d2                	xor    edx,edx
c0010425:	c3                   	ret    

c0010426 <SysVerify(regs*)>:
c0010426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042a:	31 d2                	xor    edx,edx
c001042c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001042f:	c3                   	ret    

c0010430 <SysGetArgc(regs*)>:
c0010430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010435:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010438:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001043e:	99                   	cdq    
c001043f:	c3                   	ret    

c0010440 <SysTTYName(regs*)>:
c0010440:	b8 01 00 00 00       	mov    eax,0x1
c0010445:	31 d2                	xor    edx,edx
c0010447:	c3                   	ret    

c0010448 <SysFormatDisk(regs*)>:
c0010448:	56                   	push   esi
c0010449:	53                   	push   ebx
c001044a:	50                   	push   eax
c001044b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001044f:	8b 1d 94 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020594
c0010455:	eb 28                	jmp    c001047f <SysFormatDisk(regs*)+0x37>
c0010457:	83 ec 0c             	sub    esp,0xc
c001045a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001045d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010460:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010462:	51                   	push   ecx
c0010463:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010466:	51                   	push   ecx
c0010467:	50                   	push   eax
c0010468:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c001046f:	50                   	push   eax
c0010470:	53                   	push   ebx
c0010471:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010474:	83 c4 20             	add    esp,0x20
c0010477:	83 f8 08             	cmp    eax,0x8
c001047a:	75 12                	jne    c001048e <SysFormatDisk(regs*)+0x46>
c001047c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001047f:	85 db                	test   ebx,ebx
c0010481:	75 d4                	jne    c0010457 <SysFormatDisk(regs*)+0xf>
c0010483:	59                   	pop    ecx
c0010484:	b8 03 00 00 00       	mov    eax,0x3
c0010489:	31 d2                	xor    edx,edx
c001048b:	5b                   	pop    ebx
c001048c:	5e                   	pop    esi
c001048d:	c3                   	ret    
c001048e:	85 c0                	test   eax,eax
c0010490:	74 1b                	je     c00104ad <SysFormatDisk(regs*)+0x65>
c0010492:	83 f8 09             	cmp    eax,0x9
c0010495:	74 0b                	je     c00104a2 <SysFormatDisk(regs*)+0x5a>
c0010497:	59                   	pop    ecx
c0010498:	b8 02 00 00 00       	mov    eax,0x2
c001049d:	31 d2                	xor    edx,edx
c001049f:	5b                   	pop    ebx
c00104a0:	5e                   	pop    esi
c00104a1:	c3                   	ret    
c00104a2:	59                   	pop    ecx
c00104a3:	b8 01 00 00 00       	mov    eax,0x1
c00104a8:	31 d2                	xor    edx,edx
c00104aa:	5b                   	pop    ebx
c00104ab:	5e                   	pop    esi
c00104ac:	c3                   	ret    
c00104ad:	59                   	pop    ecx
c00104ae:	31 c0                	xor    eax,eax
c00104b0:	31 d2                	xor    edx,edx
c00104b2:	5b                   	pop    ebx
c00104b3:	5e                   	pop    esi
c00104b4:	c3                   	ret    

c00104b5 <SysSetDiskVolumeLabel(regs*)>:
c00104b5:	56                   	push   esi
c00104b6:	53                   	push   ebx
c00104b7:	53                   	push   ebx
c00104b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00104bc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00104bf:	83 f8 19             	cmp    eax,0x19
c00104c2:	77 2d                	ja     c00104f1 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104c4:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c00104cb:	85 c9                	test   ecx,ecx
c00104cd:	74 22                	je     c00104f1 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104cf:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00104d2:	85 db                	test   ebx,ebx
c00104d4:	74 1b                	je     c00104f1 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104d6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00104dc:	85 d2                	test   edx,edx
c00104de:	74 11                	je     c00104f1 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104e0:	8b 32                	mov    esi,DWORD PTR [edx]
c00104e2:	53                   	push   ebx
c00104e3:	50                   	push   eax
c00104e4:	51                   	push   ecx
c00104e5:	52                   	push   edx
c00104e6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00104e9:	83 c4 10             	add    esp,0x10
c00104ec:	99                   	cdq    
c00104ed:	59                   	pop    ecx
c00104ee:	5b                   	pop    ebx
c00104ef:	5e                   	pop    esi
c00104f0:	c3                   	ret    
c00104f1:	59                   	pop    ecx
c00104f2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104fc:	5b                   	pop    ebx
c00104fd:	5e                   	pop    esi
c00104fe:	c3                   	ret    

c00104ff <SysGetDiskVolumeLabel(regs*)>:
c00104ff:	57                   	push   edi
c0010500:	56                   	push   esi
c0010501:	53                   	push   ebx
c0010502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010506:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010509:	83 fa 19             	cmp    edx,0x19
c001050c:	77 38                	ja     c0010546 <SysGetDiskVolumeLabel(regs*)+0x47>
c001050e:	8b 0c 95 00 2a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd600]
c0010515:	85 c9                	test   ecx,ecx
c0010517:	74 2d                	je     c0010546 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010519:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001051c:	85 db                	test   ebx,ebx
c001051e:	74 26                	je     c0010546 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010520:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010523:	85 f6                	test   esi,esi
c0010525:	74 1f                	je     c0010546 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010527:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001052d:	85 c0                	test   eax,eax
c001052f:	74 15                	je     c0010546 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010531:	83 ec 0c             	sub    esp,0xc
c0010534:	8b 38                	mov    edi,DWORD PTR [eax]
c0010536:	56                   	push   esi
c0010537:	53                   	push   ebx
c0010538:	52                   	push   edx
c0010539:	51                   	push   ecx
c001053a:	50                   	push   eax
c001053b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001053e:	83 c4 20             	add    esp,0x20
c0010541:	99                   	cdq    
c0010542:	5b                   	pop    ebx
c0010543:	5e                   	pop    esi
c0010544:	5f                   	pop    edi
c0010545:	c3                   	ret    
c0010546:	5b                   	pop    ebx
c0010547:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001054c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010551:	5e                   	pop    esi
c0010552:	5f                   	pop    edi
c0010553:	c3                   	ret    

c0010554 <SysShutdown(regs*)>:
c0010554:	83 ec 0c             	sub    esp,0xc
c0010557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001055e:	85 c0                	test   eax,eax
c0010560:	74 18                	je     c001057a <SysShutdown(regs*)+0x26>
c0010562:	83 f8 01             	cmp    eax,0x1
c0010565:	74 38                	je     c001059f <SysShutdown(regs*)+0x4b>
c0010567:	83 f8 02             	cmp    eax,0x2
c001056a:	74 24                	je     c0010590 <SysShutdown(regs*)+0x3c>
c001056c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010571:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010576:	83 c4 0c             	add    esp,0xc
c0010579:	c3                   	ret    
c001057a:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001057f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010581:	6a 00                	push   0x0
c0010583:	6a 00                	push   0x0
c0010585:	6a 00                	push   0x0
c0010587:	50                   	push   eax
c0010588:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	eb dc                	jmp    c001056c <SysShutdown(regs*)+0x18>
c0010590:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0010595:	8b 10                	mov    edx,DWORD PTR [eax]
c0010597:	6a 00                	push   0x0
c0010599:	6a 00                	push   0x0
c001059b:	6a 01                	push   0x1
c001059d:	eb e8                	jmp    c0010587 <SysShutdown(regs*)+0x33>
c001059f:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c00105a4:	85 c0                	test   eax,eax
c00105a6:	74 02                	je     c00105aa <SysShutdown(regs*)+0x56>
c00105a8:	ff d0                	call   eax
c00105aa:	31 c0                	xor    eax,eax
c00105ac:	31 d2                	xor    edx,edx
c00105ae:	83 c4 0c             	add    esp,0xc
c00105b1:	c3                   	ret    

c00105b2 <SysRealpath(regs*)>:
c00105b2:	83 ec 0c             	sub    esp,0xc
c00105b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00105bc:	85 d2                	test   edx,edx
c00105be:	74 07                	je     c00105c7 <SysRealpath(regs*)+0x15>
c00105c0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105c3:	85 c0                	test   eax,eax
c00105c5:	75 0b                	jne    c00105d2 <SysRealpath(regs*)+0x20>
c00105c7:	b8 01 00 00 00       	mov    eax,0x1
c00105cc:	31 d2                	xor    edx,edx
c00105ce:	83 c4 0c             	add    esp,0xc
c00105d1:	c3                   	ret    
c00105d2:	51                   	push   ecx
c00105d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00105d9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00105dc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00105e2:	51                   	push   ecx
c00105e3:	52                   	push   edx
c00105e4:	50                   	push   eax
c00105e5:	e8 ba a2 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00105ea:	83 c4 10             	add    esp,0x10
c00105ed:	31 c0                	xor    eax,eax
c00105ef:	31 d2                	xor    edx,edx
c00105f1:	83 c4 0c             	add    esp,0xc
c00105f4:	c3                   	ret    

c00105f5 <SysReadDir(regs*)>:
c00105f5:	53                   	push   ebx
c00105f6:	83 ec 18             	sub    esp,0x18
c00105f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00105fd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010600:	83 f8 02             	cmp    eax,0x2
c0010603:	76 61                	jbe    c0010666 <SysReadDir(regs*)+0x71>
c0010605:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001060c:	77 49                	ja     c0010657 <SysReadDir(regs*)+0x62>
c001060e:	83 ec 0c             	sub    esp,0xc
c0010611:	50                   	push   eax
c0010612:	e8 18 8b ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010617:	83 c4 10             	add    esp,0x10
c001061a:	85 c0                	test   eax,eax
c001061c:	74 39                	je     c0010657 <SysReadDir(regs*)+0x62>
c001061e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010626:	83 ec 0c             	sub    esp,0xc
c0010629:	8b 10                	mov    edx,DWORD PTR [eax]
c001062b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001062f:	51                   	push   ecx
c0010630:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010633:	51                   	push   ecx
c0010634:	6a 00                	push   0x0
c0010636:	68 10 01 00 00       	push   0x110
c001063b:	50                   	push   eax
c001063c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001063f:	83 c4 20             	add    esp,0x20
c0010642:	85 c0                	test   eax,eax
c0010644:	74 29                	je     c001066f <SysReadDir(regs*)+0x7a>
c0010646:	83 f8 07             	cmp    eax,0x7
c0010649:	74 1b                	je     c0010666 <SysReadDir(regs*)+0x71>
c001064b:	b8 02 00 00 00       	mov    eax,0x2
c0010650:	31 d2                	xor    edx,edx
c0010652:	83 c4 18             	add    esp,0x18
c0010655:	5b                   	pop    ebx
c0010656:	c3                   	ret    
c0010657:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001065c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010661:	83 c4 18             	add    esp,0x18
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    
c0010666:	b8 01 00 00 00       	mov    eax,0x1
c001066b:	31 d2                	xor    edx,edx
c001066d:	eb e3                	jmp    c0010652 <SysReadDir(regs*)+0x5d>
c001066f:	31 c0                	xor    eax,eax
c0010671:	31 d2                	xor    edx,edx
c0010673:	eb dd                	jmp    c0010652 <SysReadDir(regs*)+0x5d>

c0010675 <SysIsATTY(regs*)>:
c0010675:	83 ec 0c             	sub    esp,0xc
c0010678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001067f:	83 f8 02             	cmp    eax,0x2
c0010682:	76 07                	jbe    c001068b <SysIsATTY(regs*)+0x16>
c0010684:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010689:	75 28                	jne    c00106b3 <SysIsATTY(regs*)+0x3e>
c001068b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010690:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010693:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010699:	85 c0                	test   eax,eax
c001069b:	74 26                	je     c00106c3 <SysIsATTY(regs*)+0x4e>
c001069d:	83 ec 0c             	sub    esp,0xc
c00106a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00106a2:	50                   	push   eax
c00106a3:	ff 12                	call   DWORD PTR [edx]
c00106a5:	31 d2                	xor    edx,edx
c00106a7:	25 ff 00 00 00       	and    eax,0xff
c00106ac:	83 c4 10             	add    esp,0x10
c00106af:	83 c4 0c             	add    esp,0xc
c00106b2:	c3                   	ret    
c00106b3:	83 ec 0c             	sub    esp,0xc
c00106b6:	50                   	push   eax
c00106b7:	e8 73 8a ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	85 c0                	test   eax,eax
c00106c1:	75 da                	jne    c001069d <SysIsATTY(regs*)+0x28>
c00106c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106cd:	83 c4 0c             	add    esp,0xc
c00106d0:	c3                   	ret    

c00106d1 <SysSeek(regs*)>:
c00106d1:	53                   	push   ebx
c00106d2:	83 ec 08             	sub    esp,0x8
c00106d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106dc:	8d 50 fd             	lea    edx,[eax-0x3]
c00106df:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106e5:	77 34                	ja     c001071b <SysSeek(regs*)+0x4a>
c00106e7:	83 ec 0c             	sub    esp,0xc
c00106ea:	50                   	push   eax
c00106eb:	e8 3f 8a ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00106f0:	83 c4 0c             	add    esp,0xc
c00106f3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00106f6:	31 db                	xor    ebx,ebx
c00106f8:	53                   	push   ebx
c00106f9:	51                   	push   ecx
c00106fa:	50                   	push   eax
c00106fb:	e8 cc a4 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0010700:	83 c4 10             	add    esp,0x10
c0010703:	85 c0                	test   eax,eax
c0010705:	0f 95 c0             	setne  al
c0010708:	31 d2                	xor    edx,edx
c001070a:	25 ff 00 00 00       	and    eax,0xff
c001070f:	f7 d8                	neg    eax
c0010711:	83 d2 00             	adc    edx,0x0
c0010714:	83 c4 08             	add    esp,0x8
c0010717:	f7 da                	neg    edx
c0010719:	5b                   	pop    ebx
c001071a:	c3                   	ret    
c001071b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010720:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010725:	83 c4 08             	add    esp,0x8
c0010728:	5b                   	pop    ebx
c0010729:	c3                   	ret    

c001072a <SysTell(regs*)>:
c001072a:	53                   	push   ebx
c001072b:	83 ec 08             	sub    esp,0x8
c001072e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010732:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010735:	83 f8 02             	cmp    eax,0x2
c0010738:	76 50                	jbe    c001078a <SysTell(regs*)+0x60>
c001073a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001073f:	76 19                	jbe    c001075a <SysTell(regs*)+0x30>
c0010741:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010744:	31 d2                	xor    edx,edx
c0010746:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001074c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010753:	31 c0                	xor    eax,eax
c0010755:	83 c4 08             	add    esp,0x8
c0010758:	5b                   	pop    ebx
c0010759:	c3                   	ret    
c001075a:	83 ec 0c             	sub    esp,0xc
c001075d:	50                   	push   eax
c001075e:	e8 cc 89 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010763:	5a                   	pop    edx
c0010764:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010767:	59                   	pop    ecx
c0010768:	53                   	push   ebx
c0010769:	50                   	push   eax
c001076a:	e8 b3 a4 ff ff       	call   c000ac22 <File::tell(unsigned long long*)>
c001076f:	83 c4 10             	add    esp,0x10
c0010772:	85 c0                	test   eax,eax
c0010774:	0f 95 c0             	setne  al
c0010777:	31 d2                	xor    edx,edx
c0010779:	25 ff 00 00 00       	and    eax,0xff
c001077e:	f7 d8                	neg    eax
c0010780:	83 d2 00             	adc    edx,0x0
c0010783:	83 c4 08             	add    esp,0x8
c0010786:	f7 da                	neg    edx
c0010788:	5b                   	pop    ebx
c0010789:	c3                   	ret    
c001078a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001078f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010794:	83 c4 08             	add    esp,0x8
c0010797:	5b                   	pop    ebx
c0010798:	c3                   	ret    

c0010799 <SysSize(regs*)>:
c0010799:	53                   	push   ebx
c001079a:	83 ec 18             	sub    esp,0x18
c001079d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107a4:	83 f8 02             	cmp    eax,0x2
c00107a7:	76 56                	jbe    c00107ff <SysSize(regs*)+0x66>
c00107a9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00107ae:	76 19                	jbe    c00107c9 <SysSize(regs*)+0x30>
c00107b0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00107b3:	31 d2                	xor    edx,edx
c00107b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107c2:	31 c0                	xor    eax,eax
c00107c4:	83 c4 18             	add    esp,0x18
c00107c7:	5b                   	pop    ebx
c00107c8:	c3                   	ret    
c00107c9:	83 ec 0c             	sub    esp,0xc
c00107cc:	50                   	push   eax
c00107cd:	e8 5d 89 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00107d2:	83 c4 0c             	add    esp,0xc
c00107d5:	8d 54 24 13          	lea    edx,[esp+0x13]
c00107d9:	52                   	push   edx
c00107da:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107dd:	52                   	push   edx
c00107de:	50                   	push   eax
c00107df:	e8 d6 a5 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c00107e4:	83 c4 10             	add    esp,0x10
c00107e7:	85 c0                	test   eax,eax
c00107e9:	0f 95 c0             	setne  al
c00107ec:	31 d2                	xor    edx,edx
c00107ee:	25 ff 00 00 00       	and    eax,0xff
c00107f3:	f7 d8                	neg    eax
c00107f5:	83 d2 00             	adc    edx,0x0
c00107f8:	83 c4 18             	add    esp,0x18
c00107fb:	f7 da                	neg    edx
c00107fd:	5b                   	pop    ebx
c00107fe:	c3                   	ret    
c00107ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010804:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010809:	83 c4 18             	add    esp,0x18
c001080c:	5b                   	pop    ebx
c001080d:	c3                   	ret    

c001080e <SysSizeFromFilename(regs*)>:
c001080e:	57                   	push   edi
c001080f:	56                   	push   esi
c0010810:	53                   	push   ebx
c0010811:	83 ec 20             	sub    esp,0x20
c0010814:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010818:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001081b:	83 fb 02             	cmp    ebx,0x2
c001081e:	0f 86 8c 00 00 00    	jbe    c00108b0 <SysSizeFromFilename(regs*)+0xa2>
c0010824:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001082a:	76 1b                	jbe    c0010847 <SysSizeFromFilename(regs*)+0x39>
c001082c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001082f:	31 d2                	xor    edx,edx
c0010831:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010837:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001083e:	83 c4 20             	add    esp,0x20
c0010841:	31 c0                	xor    eax,eax
c0010843:	5b                   	pop    ebx
c0010844:	5e                   	pop    esi
c0010845:	5f                   	pop    edi
c0010846:	c3                   	ret    
c0010847:	83 ec 0c             	sub    esp,0xc
c001084a:	68 14 01 00 00       	push   0x114
c001084f:	e8 65 6f ff ff       	call   c00077b9 <malloc>
c0010854:	83 c4 0c             	add    esp,0xc
c0010857:	89 c7                	mov    edi,eax
c0010859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001085e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010861:	50                   	push   eax
c0010862:	53                   	push   ebx
c0010863:	57                   	push   edi
c0010864:	e8 e5 a1 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010869:	83 c4 0c             	add    esp,0xc
c001086c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010870:	50                   	push   eax
c0010871:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010874:	52                   	push   edx
c0010875:	57                   	push   edi
c0010876:	e8 3f a5 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c001087b:	83 c4 10             	add    esp,0x10
c001087e:	85 ff                	test   edi,edi
c0010880:	74 14                	je     c0010896 <SysSizeFromFilename(regs*)+0x88>
c0010882:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010886:	8b 17                	mov    edx,DWORD PTR [edi]
c0010888:	83 ec 0c             	sub    esp,0xc
c001088b:	57                   	push   edi
c001088c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010896:	85 c0                	test   eax,eax
c0010898:	0f 95 c0             	setne  al
c001089b:	31 d2                	xor    edx,edx
c001089d:	25 ff 00 00 00       	and    eax,0xff
c00108a2:	f7 d8                	neg    eax
c00108a4:	83 d2 00             	adc    edx,0x0
c00108a7:	83 c4 20             	add    esp,0x20
c00108aa:	f7 da                	neg    edx
c00108ac:	5b                   	pop    ebx
c00108ad:	5e                   	pop    esi
c00108ae:	5f                   	pop    edi
c00108af:	c3                   	ret    
c00108b0:	83 c4 20             	add    esp,0x20
c00108b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108b8:	5b                   	pop    ebx
c00108b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108be:	5e                   	pop    esi
c00108bf:	5f                   	pop    edi
c00108c0:	c3                   	ret    

c00108c1 <SysClose(regs*)>:
c00108c1:	53                   	push   ebx
c00108c2:	83 ec 08             	sub    esp,0x8
c00108c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108cc:	83 f8 02             	cmp    eax,0x2
c00108cf:	76 41                	jbe    c0010912 <SysClose(regs*)+0x51>
c00108d1:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00108d7:	83 fa 01             	cmp    edx,0x1
c00108da:	76 2d                	jbe    c0010909 <SysClose(regs*)+0x48>
c00108dc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00108e1:	77 2f                	ja     c0010912 <SysClose(regs*)+0x51>
c00108e3:	83 ec 0c             	sub    esp,0xc
c00108e6:	50                   	push   eax
c00108e7:	e8 43 88 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00108ec:	89 c3                	mov    ebx,eax
c00108ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00108f1:	e8 76 a2 ff ff       	call   c000ab6c <File::close()>
c00108f6:	83 c4 10             	add    esp,0x10
c00108f9:	85 db                	test   ebx,ebx
c00108fb:	74 0c                	je     c0010909 <SysClose(regs*)+0x48>
c00108fd:	83 ec 0c             	sub    esp,0xc
c0010900:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010902:	53                   	push   ebx
c0010903:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010906:	83 c4 10             	add    esp,0x10
c0010909:	31 c0                	xor    eax,eax
c001090b:	31 d2                	xor    edx,edx
c001090d:	83 c4 08             	add    esp,0x8
c0010910:	5b                   	pop    ebx
c0010911:	c3                   	ret    
c0010912:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010917:	ba ff ff ff ff       	mov    edx,0xffffffff
c001091c:	83 c4 08             	add    esp,0x8
c001091f:	5b                   	pop    ebx
c0010920:	c3                   	ret    

c0010921 <SysOpenDir(regs*)>:
c0010921:	56                   	push   esi
c0010922:	53                   	push   ebx
c0010923:	50                   	push   eax
c0010924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010928:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001092b:	85 c0                	test   eax,eax
c001092d:	74 5b                	je     c001098a <SysOpenDir(regs*)+0x69>
c001092f:	83 ec 0c             	sub    esp,0xc
c0010932:	68 14 01 00 00       	push   0x114
c0010937:	e8 7d 6e ff ff       	call   c00077b9 <malloc>
c001093c:	83 c4 0c             	add    esp,0xc
c001093f:	89 c6                	mov    esi,eax
c0010941:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010946:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010949:	50                   	push   eax
c001094a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001094d:	50                   	push   eax
c001094e:	56                   	push   esi
c001094f:	e8 24 a6 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	85 f6                	test   esi,esi
c0010959:	74 2f                	je     c001098a <SysOpenDir(regs*)+0x69>
c001095b:	83 ec 0c             	sub    esp,0xc
c001095e:	56                   	push   esi
c001095f:	e8 d4 a6 ff ff       	call   c000b038 <Directory::open()>
c0010964:	83 c4 10             	add    esp,0x10
c0010967:	85 c0                	test   eax,eax
c0010969:	75 1f                	jne    c001098a <SysOpenDir(regs*)+0x69>
c001096b:	83 ec 0c             	sub    esp,0xc
c001096e:	56                   	push   esi
c001096f:	e8 c6 84 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010974:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 02                	mov    DWORD PTR [edx],eax
c001097c:	c1 f8 1f             	sar    eax,0x1f
c001097f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010982:	31 c0                	xor    eax,eax
c0010984:	59                   	pop    ecx
c0010985:	31 d2                	xor    edx,edx
c0010987:	5b                   	pop    ebx
c0010988:	5e                   	pop    esi
c0010989:	c3                   	ret    
c001098a:	59                   	pop    ecx
c001098b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010990:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010995:	5b                   	pop    ebx
c0010996:	5e                   	pop    esi
c0010997:	c3                   	ret    

c0010998 <SysCloseDir(regs*)>:
c0010998:	53                   	push   ebx
c0010999:	83 ec 08             	sub    esp,0x8
c001099c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109a3:	8d 50 fd             	lea    edx,[eax-0x3]
c00109a6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00109ac:	77 2f                	ja     c00109dd <SysCloseDir(regs*)+0x45>
c00109ae:	83 ec 0c             	sub    esp,0xc
c00109b1:	50                   	push   eax
c00109b2:	e8 78 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109b7:	89 c3                	mov    ebx,eax
c00109b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109bc:	e8 d3 a6 ff ff       	call   c000b094 <Directory::close()>
c00109c1:	83 c4 10             	add    esp,0x10
c00109c4:	85 db                	test   ebx,ebx
c00109c6:	74 0c                	je     c00109d4 <SysCloseDir(regs*)+0x3c>
c00109c8:	83 ec 0c             	sub    esp,0xc
c00109cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109cd:	53                   	push   ebx
c00109ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109d1:	83 c4 10             	add    esp,0x10
c00109d4:	31 c0                	xor    eax,eax
c00109d6:	31 d2                	xor    edx,edx
c00109d8:	83 c4 08             	add    esp,0x8
c00109db:	5b                   	pop    ebx
c00109dc:	c3                   	ret    
c00109dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109e7:	83 c4 08             	add    esp,0x8
c00109ea:	5b                   	pop    ebx
c00109eb:	c3                   	ret    

c00109ec <SysMakeDir(regs*)>:
c00109ec:	56                   	push   esi
c00109ed:	53                   	push   ebx
c00109ee:	83 ec 10             	sub    esp,0x10
c00109f1:	68 14 01 00 00       	push   0x114
c00109f6:	e8 be 6d ff ff       	call   c00077b9 <malloc>
c00109fb:	83 c4 0c             	add    esp,0xc
c00109fe:	89 c3                	mov    ebx,eax
c0010a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a05:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010a08:	56                   	push   esi
c0010a09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010a0d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a10:	50                   	push   eax
c0010a11:	53                   	push   ebx
c0010a12:	e8 61 a5 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010a17:	83 c4 10             	add    esp,0x10
c0010a1a:	85 db                	test   ebx,ebx
c0010a1c:	74 32                	je     c0010a50 <SysMakeDir(regs*)+0x64>
c0010a1e:	83 ec 0c             	sub    esp,0xc
c0010a21:	53                   	push   ebx
c0010a22:	e8 f1 a7 ff ff       	call   c000b218 <Directory::create()>
c0010a27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a2a:	89 c6                	mov    esi,eax
c0010a2c:	e8 63 a6 ff ff       	call   c000b094 <Directory::close()>
c0010a31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	31 c0                	xor    eax,eax
c0010a3e:	59                   	pop    ecx
c0010a3f:	85 f6                	test   esi,esi
c0010a41:	5b                   	pop    ebx
c0010a42:	0f 95 c0             	setne  al
c0010a45:	5e                   	pop    esi
c0010a46:	31 d2                	xor    edx,edx
c0010a48:	f7 d8                	neg    eax
c0010a4a:	83 d2 00             	adc    edx,0x0
c0010a4d:	f7 da                	neg    edx
c0010a4f:	c3                   	ret    
c0010a50:	59                   	pop    ecx
c0010a51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a56:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a5b:	5b                   	pop    ebx
c0010a5c:	5e                   	pop    esi
c0010a5d:	c3                   	ret    

c0010a5e <SysWait(regs*)>:
c0010a5e:	83 ec 10             	sub    esp,0x10
c0010a61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a65:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a68:	52                   	push   edx
c0010a69:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a6c:	51                   	push   ecx
c0010a6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a70:	50                   	push   eax
c0010a71:	e8 02 2b 00 00       	call   c0013578 <waitTask(int, int*, int)>
c0010a76:	83 c4 1c             	add    esp,0x1c
c0010a79:	99                   	cdq    
c0010a7a:	c3                   	ret    

c0010a7b <SysNotImpl(regs*)>:
c0010a7b:	83 ec 18             	sub    esp,0x18
c0010a7e:	68 51 e2 01 c0       	push   0xc001e251
c0010a83:	e8 b3 f6 ff ff       	call   c001013b <KePanic(char const*)>
c0010a88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a92:	83 c4 1c             	add    esp,0x1c
c0010a95:	c3                   	ret    

c0010a96 <SysPanic(regs*)>:
c0010a96:	83 ec 18             	sub    esp,0x18
c0010a99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a9d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010aa0:	50                   	push   eax
c0010aa1:	e8 95 f6 ff ff       	call   c001013b <KePanic(char const*)>
c0010aa6:	b8 01 00 00 00       	mov    eax,0x1
c0010aab:	31 d2                	xor    edx,edx
c0010aad:	83 c4 1c             	add    esp,0x1c
c0010ab0:	c3                   	ret    

c0010ab1 <SysRmdir(regs*)>:
c0010ab1:	56                   	push   esi
c0010ab2:	53                   	push   ebx
c0010ab3:	83 ec 20             	sub    esp,0x20
c0010ab6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010aba:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010abd:	68 14 01 00 00       	push   0x114
c0010ac2:	e8 f2 6c ff ff       	call   c00077b9 <malloc>
c0010ac7:	83 c4 0c             	add    esp,0xc
c0010aca:	89 c3                	mov    ebx,eax
c0010acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ad1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ad4:	50                   	push   eax
c0010ad5:	56                   	push   esi
c0010ad6:	53                   	push   ebx
c0010ad7:	e8 72 9f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010adf:	e8 a2 a1 ff ff       	call   c000ac86 <File::unlink()>
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	85 db                	test   ebx,ebx
c0010ae9:	74 14                	je     c0010aff <SysRmdir(regs*)+0x4e>
c0010aeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010aef:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010af1:	83 ec 0c             	sub    esp,0xc
c0010af4:	53                   	push   ebx
c0010af5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010af8:	83 c4 10             	add    esp,0x10
c0010afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aff:	85 c0                	test   eax,eax
c0010b01:	0f 95 c0             	setne  al
c0010b04:	31 d2                	xor    edx,edx
c0010b06:	25 ff 00 00 00       	and    eax,0xff
c0010b0b:	f7 d8                	neg    eax
c0010b0d:	83 d2 00             	adc    edx,0x0
c0010b10:	83 c4 14             	add    esp,0x14
c0010b13:	f7 da                	neg    edx
c0010b15:	5b                   	pop    ebx
c0010b16:	5e                   	pop    esi
c0010b17:	c3                   	ret    

c0010b18 <SysUnlink(regs*)>:
c0010b18:	56                   	push   esi
c0010b19:	53                   	push   ebx
c0010b1a:	83 ec 20             	sub    esp,0x20
c0010b1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b21:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b24:	68 14 01 00 00       	push   0x114
c0010b29:	e8 8b 6c ff ff       	call   c00077b9 <malloc>
c0010b2e:	83 c4 0c             	add    esp,0xc
c0010b31:	89 c3                	mov    ebx,eax
c0010b33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b3b:	50                   	push   eax
c0010b3c:	56                   	push   esi
c0010b3d:	53                   	push   ebx
c0010b3e:	e8 0b 9f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010b43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b46:	e8 3b a1 ff ff       	call   c000ac86 <File::unlink()>
c0010b4b:	83 c4 10             	add    esp,0x10
c0010b4e:	85 db                	test   ebx,ebx
c0010b50:	74 14                	je     c0010b66 <SysUnlink(regs*)+0x4e>
c0010b52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b56:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	53                   	push   ebx
c0010b5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b5f:	83 c4 10             	add    esp,0x10
c0010b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b66:	85 c0                	test   eax,eax
c0010b68:	0f 95 c0             	setne  al
c0010b6b:	31 d2                	xor    edx,edx
c0010b6d:	25 ff 00 00 00       	and    eax,0xff
c0010b72:	f7 d8                	neg    eax
c0010b74:	83 d2 00             	adc    edx,0x0
c0010b77:	83 c4 14             	add    esp,0x14
c0010b7a:	f7 da                	neg    edx
c0010b7c:	5b                   	pop    ebx
c0010b7d:	5e                   	pop    esi
c0010b7e:	c3                   	ret    

c0010b7f <SysGetArgv(regs*)>:
c0010b7f:	83 ec 0c             	sub    esp,0xc
c0010b82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b86:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b89:	85 c0                	test   eax,eax
c0010b8b:	78 2c                	js     c0010bb9 <SysGetArgv(regs*)+0x3a>
c0010b8d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b93:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b96:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b9c:	7d 1b                	jge    c0010bb9 <SysGetArgv(regs*)+0x3a>
c0010b9e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010ba5:	85 c0                	test   eax,eax
c0010ba7:	74 18                	je     c0010bc1 <SysGetArgv(regs*)+0x42>
c0010ba9:	83 ec 08             	sub    esp,0x8
c0010bac:	50                   	push   eax
c0010bad:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010bb0:	50                   	push   eax
c0010bb1:	e8 4a fa fe ff       	call   c0000600 <strcpy>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	31 c0                	xor    eax,eax
c0010bbb:	31 d2                	xor    edx,edx
c0010bbd:	83 c4 0c             	add    esp,0xc
c0010bc0:	c3                   	ret    
c0010bc1:	b8 01 00 00 00       	mov    eax,0x1
c0010bc6:	31 d2                	xor    edx,edx
c0010bc8:	83 c4 0c             	add    esp,0xc
c0010bcb:	c3                   	ret    

c0010bcc <SysUSleep(regs*)>:
c0010bcc:	83 ec 1c             	sub    esp,0x1c
c0010bcf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010bd3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010bd6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010bd9:	6a 00                	push   0x0
c0010bdb:	6a 64                	push   0x64
c0010bdd:	52                   	push   edx
c0010bde:	50                   	push   eax
c0010bdf:	e8 6c b0 00 00       	call   c001bc50 <__udivdi3>
c0010be4:	83 c4 14             	add    esp,0x14
c0010be7:	50                   	push   eax
c0010be8:	e8 5f 2a 00 00       	call   c001364c <milliTenthSleep(unsigned int)>
c0010bed:	31 c0                	xor    eax,eax
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	83 c4 1c             	add    esp,0x1c
c0010bf4:	c3                   	ret    

c0010bf5 <SysSpawn(regs*)>:
c0010bf5:	56                   	push   esi
c0010bf6:	53                   	push   ebx
c0010bf7:	50                   	push   eax
c0010bf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bff:	85 c0                	test   eax,eax
c0010c01:	75 08                	jne    c0010c0b <SysSpawn(regs*)+0x16>
c0010c03:	59                   	pop    ecx
c0010c04:	31 c0                	xor    eax,eax
c0010c06:	31 d2                	xor    edx,edx
c0010c08:	5b                   	pop    ebx
c0010c09:	5e                   	pop    esi
c0010c0a:	c3                   	ret    
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	68 1f 07 00 00       	push   0x71f
c0010c13:	e8 a1 6b ff ff       	call   c00077b9 <malloc>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	89 c6                	mov    esi,eax
c0010c1d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c23:	85 c0                	test   eax,eax
c0010c25:	75 33                	jne    c0010c5a <SysSpawn(regs*)+0x65>
c0010c27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c2f:	52                   	push   edx
c0010c30:	50                   	push   eax
c0010c31:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010c34:	53                   	push   ebx
c0010c35:	56                   	push   esi
c0010c36:	e8 f5 20 00 00       	call   c0012d30 <Process::Process(char const*, Process*, char**)>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c45:	75 bc                	jne    c0010c03 <SysSpawn(regs*)+0xe>
c0010c47:	83 ec 0c             	sub    esp,0xc
c0010c4a:	56                   	push   esi
c0010c4b:	e8 d4 25 00 00       	call   c0013224 <Process::createUserThread()>
c0010c50:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c52:	83 c4 10             	add    esp,0x10
c0010c55:	99                   	cdq    
c0010c56:	59                   	pop    ecx
c0010c57:	5b                   	pop    ebx
c0010c58:	5e                   	pop    esi
c0010c59:	c3                   	ret    
c0010c5a:	31 c0                	xor    eax,eax
c0010c5c:	eb d1                	jmp    c0010c2f <SysSpawn(regs*)+0x3a>

c0010c5e <SysGetEnv(regs*)>:
c0010c5e:	57                   	push   edi
c0010c5f:	56                   	push   esi
c0010c60:	53                   	push   ebx
c0010c61:	83 ec 1c             	sub    esp,0x1c
c0010c64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c6d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c70:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c76:	50                   	push   eax
c0010c77:	e8 77 f3 ff ff       	call   c000fff3 <Krnl::getProcessTotalEnvCount(Process*)>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	39 c7                	cmp    edi,eax
c0010c81:	7c 14                	jl     c0010c97 <SysGetEnv(regs*)+0x39>
c0010c83:	85 f6                	test   esi,esi
c0010c85:	75 0b                	jne    c0010c92 <SysGetEnv(regs*)+0x34>
c0010c87:	83 c4 10             	add    esp,0x10
c0010c8a:	31 c0                	xor    eax,eax
c0010c8c:	5b                   	pop    ebx
c0010c8d:	31 d2                	xor    edx,edx
c0010c8f:	5e                   	pop    esi
c0010c90:	5f                   	pop    edi
c0010c91:	c3                   	ret    
c0010c92:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c95:	eb f0                	jmp    c0010c87 <SysGetEnv(regs*)+0x29>
c0010c97:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c9b:	52                   	push   edx
c0010c9c:	57                   	push   edi
c0010c9d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ca3:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010ca6:	51                   	push   ecx
c0010ca7:	50                   	push   eax
c0010ca8:	e8 66 f3 ff ff       	call   c0010013 <Krnl::getProcessEnvPair(Process*, int)>
c0010cad:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010cb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cb4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cb8:	83 c4 0c             	add    esp,0xc
c0010cbb:	85 db                	test   ebx,ebx
c0010cbd:	75 23                	jne    c0010ce2 <SysGetEnv(regs*)+0x84>
c0010cbf:	83 ec 0c             	sub    esp,0xc
c0010cc2:	50                   	push   eax
c0010cc3:	e8 78 f8 fe ff       	call   c0000540 <strlen>
c0010cc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ccb:	89 c3                	mov    ebx,eax
c0010ccd:	e8 6e f8 fe ff       	call   c0000540 <strlen>
c0010cd2:	31 d2                	xor    edx,edx
c0010cd4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010cd8:	83 c4 10             	add    esp,0x10
c0010cdb:	83 c4 10             	add    esp,0x10
c0010cde:	5b                   	pop    ebx
c0010cdf:	5e                   	pop    esi
c0010ce0:	5f                   	pop    edi
c0010ce1:	c3                   	ret    
c0010ce2:	83 ec 08             	sub    esp,0x8
c0010ce5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010ce8:	50                   	push   eax
c0010ce9:	56                   	push   esi
c0010cea:	e8 11 f9 fe ff       	call   c0000600 <strcpy>
c0010cef:	58                   	pop    eax
c0010cf0:	5a                   	pop    edx
c0010cf1:	68 6b e2 01 c0       	push   0xc001e26b
c0010cf6:	56                   	push   esi
c0010cf7:	e8 c4 fa fe ff       	call   c00007c0 <strcat>
c0010cfc:	59                   	pop    ecx
c0010cfd:	5b                   	pop    ebx
c0010cfe:	57                   	push   edi
c0010cff:	56                   	push   esi
c0010d00:	e8 bb fa fe ff       	call   c00007c0 <strcat>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	e9 7a ff ff ff       	jmp    c0010c87 <SysGetEnv(regs*)+0x29>

c0010d0d <SysSetFatAttrib(regs*)>:
c0010d0d:	57                   	push   edi
c0010d0e:	56                   	push   esi
c0010d0f:	53                   	push   ebx
c0010d10:	83 ec 1c             	sub    esp,0x1c
c0010d13:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010d17:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010d1a:	68 14 01 00 00       	push   0x114
c0010d1f:	e8 95 6a ff ff       	call   c00077b9 <malloc>
c0010d24:	83 c4 0c             	add    esp,0xc
c0010d27:	89 c3                	mov    ebx,eax
c0010d29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d31:	50                   	push   eax
c0010d32:	57                   	push   edi
c0010d33:	53                   	push   ebx
c0010d34:	e8 15 9d ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010d39:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d3c:	83 c4 0c             	add    esp,0xc
c0010d3f:	0f b6 d4             	movzx  edx,ah
c0010d42:	25 ff 00 00 00       	and    eax,0xff
c0010d47:	52                   	push   edx
c0010d48:	50                   	push   eax
c0010d49:	53                   	push   ebx
c0010d4a:	e8 d1 9f ff ff       	call   c000ad20 <File::chfatattr(unsigned char, unsigned char)>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	85 db                	test   ebx,ebx
c0010d54:	74 14                	je     c0010d6a <SysSetFatAttrib(regs*)+0x5d>
c0010d56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	53                   	push   ebx
c0010d60:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d6a:	85 c0                	test   eax,eax
c0010d6c:	0f 95 c0             	setne  al
c0010d6f:	31 d2                	xor    edx,edx
c0010d71:	25 ff 00 00 00       	and    eax,0xff
c0010d76:	f7 d8                	neg    eax
c0010d78:	83 d2 00             	adc    edx,0x0
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	f7 da                	neg    edx
c0010d80:	5b                   	pop    ebx
c0010d81:	5e                   	pop    esi
c0010d82:	5f                   	pop    edi
c0010d83:	c3                   	ret    

c0010d84 <SysPipe(regs*)>:
c0010d84:	57                   	push   edi
c0010d85:	56                   	push   esi
c0010d86:	53                   	push   ebx
c0010d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8b:	83 ec 0c             	sub    esp,0xc
c0010d8e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d91:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d94:	6a 20                	push   0x20
c0010d96:	e8 1e 6a ff ff       	call   c00077b9 <malloc>
c0010d9b:	89 c3                	mov    ebx,eax
c0010d9d:	58                   	pop    eax
c0010d9e:	5a                   	pop    edx
c0010d9f:	68 00 50 00 00       	push   0x5000
c0010da4:	53                   	push   ebx
c0010da5:	e8 14 73 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010daa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dad:	e8 88 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010db2:	89 07                	mov    DWORD PTR [edi],eax
c0010db4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db7:	e8 7e 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	89 06                	mov    DWORD PTR [esi],eax
c0010dc1:	31 d2                	xor    edx,edx
c0010dc3:	5b                   	pop    ebx
c0010dc4:	31 c0                	xor    eax,eax
c0010dc6:	5e                   	pop    esi
c0010dc7:	5f                   	pop    edi
c0010dc8:	c3                   	ret    

c0010dc9 <SysGetUnixTime(regs*)>:
c0010dc9:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0010dce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010dd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd8:	e9 81 a6 ff ff       	jmp    c000b45e <Clock::timeInSecondsLocal()>

c0010ddd <string_ends_with(char const*, char const*)>:
c0010ddd:	57                   	push   edi
c0010dde:	56                   	push   esi
c0010ddf:	53                   	push   ebx
c0010de0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010de4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010de8:	83 ec 0c             	sub    esp,0xc
c0010deb:	53                   	push   ebx
c0010dec:	e8 4f f7 fe ff       	call   c0000540 <strlen>
c0010df1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010df4:	89 c6                	mov    esi,eax
c0010df6:	e8 45 f7 fe ff       	call   c0000540 <strlen>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	39 c6                	cmp    esi,eax
c0010e00:	7d 06                	jge    c0010e08 <string_ends_with(char const*, char const*)+0x2b>
c0010e02:	5b                   	pop    ebx
c0010e03:	31 c0                	xor    eax,eax
c0010e05:	5e                   	pop    esi
c0010e06:	5f                   	pop    edi
c0010e07:	c3                   	ret    
c0010e08:	83 ec 08             	sub    esp,0x8
c0010e0b:	29 c6                	sub    esi,eax
c0010e0d:	57                   	push   edi
c0010e0e:	01 f3                	add    ebx,esi
c0010e10:	53                   	push   ebx
c0010e11:	e8 ca f8 fe ff       	call   c00006e0 <strcmp>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	85 c0                	test   eax,eax
c0010e1b:	5b                   	pop    ebx
c0010e1c:	0f 94 c0             	sete   al
c0010e1f:	5e                   	pop    esi
c0010e20:	25 ff 00 00 00       	and    eax,0xff
c0010e25:	5f                   	pop    edi
c0010e26:	c3                   	ret    

c0010e27 <SysOpen(regs*)>:
c0010e27:	56                   	push   esi
c0010e28:	53                   	push   ebx
c0010e29:	81 ec 04 01 00 00    	sub    esp,0x104
c0010e2f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010e36:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e39:	85 c9                	test   ecx,ecx
c0010e3b:	0f 84 b9 01 00 00    	je     c0010ffa <SysOpen(regs*)+0x1d3>
c0010e41:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e44:	85 c0                	test   eax,eax
c0010e46:	0f 84 ae 01 00 00    	je     c0010ffa <SysOpen(regs*)+0x1d3>
c0010e4c:	52                   	push   edx
c0010e4d:	68 6d e2 01 c0       	push   0xc001e26d
c0010e52:	50                   	push   eax
c0010e53:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e57:	56                   	push   esi
c0010e58:	e8 47 9a ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e60:	e8 db f6 fe ff       	call   c0000540 <strlen>
c0010e65:	83 c4 10             	add    esp,0x10
c0010e68:	48                   	dec    eax
c0010e69:	74 1d                	je     c0010e88 <SysOpen(regs*)+0x61>
c0010e6b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e6e:	eb 0f                	jmp    c0010e7f <SysOpen(regs*)+0x58>
c0010e70:	80 fa 3a             	cmp    dl,0x3a
c0010e73:	74 0f                	je     c0010e84 <SysOpen(regs*)+0x5d>
c0010e75:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e79:	48                   	dec    eax
c0010e7a:	74 0c                	je     c0010e88 <SysOpen(regs*)+0x61>
c0010e7c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e7f:	80 fa 2e             	cmp    dl,0x2e
c0010e82:	75 ec                	jne    c0010e70 <SysOpen(regs*)+0x49>
c0010e84:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	68 71 e2 01 c0       	push   0xc001e271
c0010e90:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e93:	50                   	push   eax
c0010e94:	e8 44 ff ff ff       	call   c0010ddd <string_ends_with(char const*, char const*)>
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	85 c0                	test   eax,eax
c0010e9e:	74 1d                	je     c0010ebd <SysOpen(regs*)+0x96>
c0010ea0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ea3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010eb0:	81 c4 04 01 00 00    	add    esp,0x104
c0010eb6:	31 c0                	xor    eax,eax
c0010eb8:	31 d2                	xor    edx,edx
c0010eba:	5b                   	pop    ebx
c0010ebb:	5e                   	pop    esi
c0010ebc:	c3                   	ret    
c0010ebd:	83 ec 08             	sub    esp,0x8
c0010ec0:	68 76 e2 01 c0       	push   0xc001e276
c0010ec5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ec8:	50                   	push   eax
c0010ec9:	e8 0f ff ff ff       	call   c0010ddd <string_ends_with(char const*, char const*)>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	85 c0                	test   eax,eax
c0010ed3:	75 cb                	jne    c0010ea0 <SysOpen(regs*)+0x79>
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	68 72 e2 01 c0       	push   0xc001e272
c0010edd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ee0:	50                   	push   eax
c0010ee1:	e8 fa f7 fe ff       	call   c00006e0 <strcmp>
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	85 c0                	test   eax,eax
c0010eeb:	74 b3                	je     c0010ea0 <SysOpen(regs*)+0x79>
c0010eed:	83 ec 08             	sub    esp,0x8
c0010ef0:	68 71 e2 01 c0       	push   0xc001e271
c0010ef5:	56                   	push   esi
c0010ef6:	e8 e2 fe ff ff       	call   c0010ddd <string_ends_with(char const*, char const*)>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	85 c0                	test   eax,eax
c0010f00:	75 9e                	jne    c0010ea0 <SysOpen(regs*)+0x79>
c0010f02:	83 ec 08             	sub    esp,0x8
c0010f05:	68 7b e2 01 c0       	push   0xc001e27b
c0010f0a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f0d:	50                   	push   eax
c0010f0e:	e8 ca fe ff ff       	call   c0010ddd <string_ends_with(char const*, char const*)>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	85 c0                	test   eax,eax
c0010f18:	0f 85 ef 00 00 00    	jne    c001100d <SysOpen(regs*)+0x1e6>
c0010f1e:	83 ec 08             	sub    esp,0x8
c0010f21:	68 80 e2 01 c0       	push   0xc001e280
c0010f26:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f29:	50                   	push   eax
c0010f2a:	e8 ae fe ff ff       	call   c0010ddd <string_ends_with(char const*, char const*)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	85 c0                	test   eax,eax
c0010f34:	0f 85 d3 00 00 00    	jne    c001100d <SysOpen(regs*)+0x1e6>
c0010f3a:	83 ec 08             	sub    esp,0x8
c0010f3d:	68 7c e2 01 c0       	push   0xc001e27c
c0010f42:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f45:	51                   	push   ecx
c0010f46:	e8 95 f7 fe ff       	call   c00006e0 <strcmp>
c0010f4b:	83 c4 10             	add    esp,0x10
c0010f4e:	85 c0                	test   eax,eax
c0010f50:	0f 84 b7 00 00 00    	je     c001100d <SysOpen(regs*)+0x1e6>
c0010f56:	83 ec 08             	sub    esp,0x8
c0010f59:	68 7b e2 01 c0       	push   0xc001e27b
c0010f5e:	56                   	push   esi
c0010f5f:	e8 79 fe ff ff       	call   c0010ddd <string_ends_with(char const*, char const*)>
c0010f64:	83 c4 10             	add    esp,0x10
c0010f67:	85 c0                	test   eax,eax
c0010f69:	0f 85 9e 00 00 00    	jne    c001100d <SysOpen(regs*)+0x1e6>
c0010f6f:	83 ec 0c             	sub    esp,0xc
c0010f72:	68 14 01 00 00       	push   0x114
c0010f77:	e8 3d 68 ff ff       	call   c00077b9 <malloc>
c0010f7c:	83 c4 0c             	add    esp,0xc
c0010f7f:	89 c6                	mov    esi,eax
c0010f81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f89:	50                   	push   eax
c0010f8a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f8d:	52                   	push   edx
c0010f8e:	56                   	push   esi
c0010f8f:	e8 ba 9a ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010f94:	83 c4 10             	add    esp,0x10
c0010f97:	85 f6                	test   esi,esi
c0010f99:	74 5f                	je     c0010ffa <SysOpen(regs*)+0x1d3>
c0010f9b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f9e:	89 d0                	mov    eax,edx
c0010fa0:	25 ff 00 00 00       	and    eax,0xff
c0010fa5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010fa8:	89 d0                	mov    eax,edx
c0010faa:	83 e0 01             	and    eax,0x1
c0010fad:	f6 c2 02             	test   dl,0x2
c0010fb0:	74 03                	je     c0010fb5 <SysOpen(regs*)+0x18e>
c0010fb2:	83 c8 02             	or     eax,0x2
c0010fb5:	f6 c2 04             	test   dl,0x4
c0010fb8:	74 03                	je     c0010fbd <SysOpen(regs*)+0x196>
c0010fba:	83 c8 04             	or     eax,0x4
c0010fbd:	f6 c2 08             	test   dl,0x8
c0010fc0:	74 03                	je     c0010fc5 <SysOpen(regs*)+0x19e>
c0010fc2:	83 c8 0a             	or     eax,0xa
c0010fc5:	83 e2 10             	and    edx,0x10
c0010fc8:	74 03                	je     c0010fcd <SysOpen(regs*)+0x1a6>
c0010fca:	83 c8 12             	or     eax,0x12
c0010fcd:	83 ec 08             	sub    esp,0x8
c0010fd0:	50                   	push   eax
c0010fd1:	56                   	push   esi
c0010fd2:	e8 37 9b ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	85 c0                	test   eax,eax
c0010fdc:	75 1c                	jne    c0010ffa <SysOpen(regs*)+0x1d3>
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	56                   	push   esi
c0010fe2:	e8 53 7e ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010fe7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	89 02                	mov    DWORD PTR [edx],eax
c0010fef:	c1 f8 1f             	sar    eax,0x1f
c0010ff2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ff5:	e9 b6 fe ff ff       	jmp    c0010eb0 <SysOpen(regs*)+0x89>
c0010ffa:	81 c4 04 01 00 00    	add    esp,0x104
c0011000:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011005:	ba ff ff ff ff       	mov    edx,0xffffffff
c001100a:	5b                   	pop    ebx
c001100b:	5e                   	pop    esi
c001100c:	c3                   	ret    
c001100d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011010:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011016:	e9 8e fe ff ff       	jmp    c0010ea9 <SysOpen(regs*)+0x82>

c001101b <KeSystemCall(regs*, void*)>:
c001101b:	53                   	push   ebx
c001101c:	83 ec 10             	sub    esp,0x10
c001101f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011023:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011026:	68 85 e2 01 c0       	push   0xc001e285
c001102b:	e8 a8 94 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011030:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	83 f8 31             	cmp    eax,0x31
c0011039:	77 16                	ja     c0011051 <KeSystemCall(regs*, void*)+0x36>
c001103b:	8b 14 85 a0 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c60]
c0011042:	85 d2                	test   edx,edx
c0011044:	74 0b                	je     c0011051 <KeSystemCall(regs*, void*)+0x36>
c0011046:	83 ec 0c             	sub    esp,0xc
c0011049:	53                   	push   ebx
c001104a:	ff d2                	call   edx
c001104c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001104f:	eb 0d                	jmp    c001105e <KeSystemCall(regs*, void*)+0x43>
c0011051:	52                   	push   edx
c0011052:	52                   	push   edx
c0011053:	50                   	push   eax
c0011054:	68 95 e2 01 c0       	push   0xc001e295
c0011059:	e8 7a 94 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001105e:	83 c4 10             	add    esp,0x10
c0011061:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011066:	31 d2                	xor    edx,edx
c0011068:	83 c4 08             	add    esp,0x8
c001106b:	5b                   	pop    ebx
c001106c:	c3                   	ret    

c001106d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001106d:	55                   	push   ebp
c001106e:	57                   	push   edi
c001106f:	56                   	push   esi
c0011070:	53                   	push   ebx
c0011071:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011077:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001107e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011080:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011083:	80 fb 40             	cmp    bl,0x40
c0011086:	75 1b                	jne    c00110a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011088:	8a 16                	mov    dl,BYTE PTR [esi]
c001108a:	84 d2                	test   dl,dl
c001108c:	0f 84 f1 00 00 00    	je     c0011183 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011092:	8d 46 01             	lea    eax,[esi+0x1]
c0011095:	80 fa 3a             	cmp    dl,0x3a
c0011098:	74 04                	je     c001109e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001109a:	89 c6                	mov    esi,eax
c001109c:	eb ea                	jmp    c0011088 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001109e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110a1:	89 c6                	mov    esi,eax
c00110a3:	50                   	push   eax
c00110a4:	6a 40                	push   0x40
c00110a6:	6a 00                	push   0x0
c00110a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110ac:	50                   	push   eax
c00110ad:	e8 1e f4 fe ff       	call   c00004d0 <memset>
c00110b2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00110b9:	31 c0                	xor    eax,eax
c00110bb:	83 c4 10             	add    esp,0x10
c00110be:	8a 0f                	mov    cl,BYTE PTR [edi]
c00110c0:	84 c9                	test   cl,cl
c00110c2:	0f 84 bb 00 00 00    	je     c0011183 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110c8:	3d c7 00 00 00       	cmp    eax,0xc7
c00110cd:	0f 8f b0 00 00 00    	jg     c0011183 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110d3:	80 f9 0a             	cmp    cl,0xa
c00110d6:	0f 85 98 00 00 00    	jne    c0011174 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00110dc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00110e1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00110e5:	a8 df                	test   al,0xdf
c00110e7:	0f 94 c1             	sete   cl
c00110ea:	3c 23                	cmp    al,0x23
c00110ec:	0f 94 c2             	sete   dl
c00110ef:	08 d1                	or     cl,dl
c00110f1:	75 4a                	jne    c001113d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110f3:	8d 50 f7             	lea    edx,[eax-0x9]
c00110f6:	80 fa 01             	cmp    dl,0x1
c00110f9:	76 42                	jbe    c001113d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110fb:	3c 5b                	cmp    al,0x5b
c00110fd:	75 42                	jne    c0011141 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00110ff:	80 fb 40             	cmp    bl,0x40
c0011102:	75 39                	jne    c001113d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011104:	83 ec 0c             	sub    esp,0xc
c0011107:	8d 54 24 65          	lea    edx,[esp+0x65]
c001110b:	52                   	push   edx
c001110c:	e8 2f f4 fe ff       	call   c0000540 <strlen>
c0011111:	83 c4 10             	add    esp,0x10
c0011114:	83 f8 3f             	cmp    eax,0x3f
c0011117:	77 6a                	ja     c0011183 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011119:	50                   	push   eax
c001111a:	50                   	push   eax
c001111b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001111f:	52                   	push   edx
c0011120:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011124:	52                   	push   edx
c0011125:	e8 d6 f4 fe ff       	call   c0000600 <strcpy>
c001112a:	58                   	pop    eax
c001112b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001112f:	52                   	push   edx
c0011130:	e8 0b f4 fe ff       	call   c0000540 <strlen>
c0011135:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001113a:	83 c4 10             	add    esp,0x10
c001113d:	31 d2                	xor    edx,edx
c001113f:	eb 3a                	jmp    c001117b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011141:	80 fb 40             	cmp    bl,0x40
c0011144:	74 06                	je     c001114c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011146:	8d 44 24 58          	lea    eax,[esp+0x58]
c001114a:	eb 20                	jmp    c001116c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001114c:	50                   	push   eax
c001114d:	50                   	push   eax
c001114e:	55                   	push   ebp
c001114f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011153:	50                   	push   eax
c0011154:	e8 87 f5 fe ff       	call   c00006e0 <strcmp>
c0011159:	83 c4 10             	add    esp,0x10
c001115c:	85 c0                	test   eax,eax
c001115e:	75 dd                	jne    c001113d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011160:	eb e4                	jmp    c0011146 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011162:	8d 50 01             	lea    edx,[eax+0x1]
c0011165:	80 f9 3d             	cmp    cl,0x3d
c0011168:	74 1d                	je     c0011187 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001116a:	89 d0                	mov    eax,edx
c001116c:	8a 08                	mov    cl,BYTE PTR [eax]
c001116e:	84 c9                	test   cl,cl
c0011170:	75 f0                	jne    c0011162 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011172:	eb 0f                	jmp    c0011183 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011174:	8d 50 01             	lea    edx,[eax+0x1]
c0011177:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001117b:	47                   	inc    edi
c001117c:	89 d0                	mov    eax,edx
c001117e:	e9 3b ff ff ff       	jmp    c00110be <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011183:	31 c0                	xor    eax,eax
c0011185:	eb 33                	jmp    c00111ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001118b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001118e:	50                   	push   eax
c001118f:	50                   	push   eax
c0011190:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011194:	50                   	push   eax
c0011195:	56                   	push   esi
c0011196:	e8 45 f5 fe ff       	call   c00006e0 <strcmp>
c001119b:	83 c4 10             	add    esp,0x10
c001119e:	85 c0                	test   eax,eax
c00111a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111a4:	75 97                	jne    c001113d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111a6:	51                   	push   ecx
c00111a7:	51                   	push   ecx
c00111a8:	52                   	push   edx
c00111a9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00111b0:	e8 4b f4 fe ff       	call   c0000600 <strcpy>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	b0 01                	mov    al,0x1
c00111ba:	81 c4 2c 01 00 00    	add    esp,0x12c
c00111c0:	5b                   	pop    ebx
c00111c1:	5e                   	pop    esi
c00111c2:	5f                   	pop    edi
c00111c3:	5d                   	pop    ebp
c00111c4:	c3                   	ret    

c00111c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00111c5:	57                   	push   edi
c00111c6:	56                   	push   esi
c00111c7:	53                   	push   ebx
c00111c8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00111ce:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00111d5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00111dc:	53                   	push   ebx
c00111dd:	e8 5e f3 fe ff       	call   c0000540 <strlen>
c00111e2:	89 34 24             	mov    DWORD PTR [esp],esi
c00111e5:	89 c7                	mov    edi,eax
c00111e7:	e8 54 f3 fe ff       	call   c0000540 <strlen>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00111f3:	3d ff 00 00 00       	cmp    eax,0xff
c00111f8:	0f 87 d3 00 00 00    	ja     c00112d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00111fe:	57                   	push   edi
c00111ff:	57                   	push   edi
c0011200:	56                   	push   esi
c0011201:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011205:	56                   	push   esi
c0011206:	e8 f5 f3 fe ff       	call   c0000600 <strcpy>
c001120b:	58                   	pop    eax
c001120c:	5a                   	pop    edx
c001120d:	68 46 e5 01 c0       	push   0xc001e546
c0011212:	56                   	push   esi
c0011213:	e8 a8 f5 fe ff       	call   c00007c0 <strcat>
c0011218:	59                   	pop    ecx
c0011219:	5f                   	pop    edi
c001121a:	53                   	push   ebx
c001121b:	56                   	push   esi
c001121c:	e8 9f f5 fe ff       	call   c00007c0 <strcat>
c0011221:	58                   	pop    eax
c0011222:	5a                   	pop    edx
c0011223:	68 a9 e2 01 c0       	push   0xc001e2a9
c0011228:	56                   	push   esi
c0011229:	e8 92 f5 fe ff       	call   c00007c0 <strcat>
c001122e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011235:	e8 7f 65 ff ff       	call   c00077b9 <malloc>
c001123a:	83 c4 0c             	add    esp,0xc
c001123d:	89 c3                	mov    ebx,eax
c001123f:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0011245:	56                   	push   esi
c0011246:	50                   	push   eax
c0011247:	e8 02 98 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001124c:	83 c4 10             	add    esp,0x10
c001124f:	85 db                	test   ebx,ebx
c0011251:	74 7e                	je     c00112d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011253:	51                   	push   ecx
c0011254:	51                   	push   ecx
c0011255:	6a 01                	push   0x1
c0011257:	53                   	push   ebx
c0011258:	e8 b1 98 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	85 c0                	test   eax,eax
c0011262:	74 08                	je     c001126c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011264:	83 ec 0c             	sub    esp,0xc
c0011267:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011269:	53                   	push   ebx
c001126a:	eb 5f                	jmp    c00112cb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001126c:	52                   	push   edx
c001126d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011271:	50                   	push   eax
c0011272:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011276:	50                   	push   eax
c0011277:	53                   	push   ebx
c0011278:	e8 3d 9b ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c001127d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011281:	83 c4 10             	add    esp,0x10
c0011284:	89 c1                	mov    ecx,eax
c0011286:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001128a:	74 31                	je     c00112bd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001128c:	83 ec 0c             	sub    esp,0xc
c001128f:	50                   	push   eax
c0011290:	e8 24 65 ff ff       	call   c00077b9 <malloc>
c0011295:	89 c6                	mov    esi,eax
c0011297:	58                   	pop    eax
c0011298:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001129e:	52                   	push   edx
c001129f:	56                   	push   esi
c00112a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112a8:	53                   	push   ebx
c00112a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112ac:	83 c4 20             	add    esp,0x20
c00112af:	85 c0                	test   eax,eax
c00112b1:	75 0a                	jne    c00112bd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112b7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00112bb:	74 18                	je     c00112d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00112bd:	83 ec 0c             	sub    esp,0xc
c00112c0:	53                   	push   ebx
c00112c1:	e8 a6 98 ff ff       	call   c000ab6c <File::close()>
c00112c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	31 c0                	xor    eax,eax
c00112d3:	eb 3b                	jmp    c0011310 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00112d5:	83 ec 0c             	sub    esp,0xc
c00112d8:	53                   	push   ebx
c00112d9:	e8 8e 98 ff ff       	call   c000ab6c <File::close()>
c00112de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112e6:	83 c4 0c             	add    esp,0xc
c00112e9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112f0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112f7:	56                   	push   esi
c00112f8:	e8 70 fd ff ff       	call   c001106d <Reg::findLineFromLoadedData(char*, char*, char*)>
c00112fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011300:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011304:	e8 c0 64 ff ff       	call   c00077c9 <free>
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011310:	81 c4 20 01 00 00    	add    esp,0x120
c0011316:	5b                   	pop    ebx
c0011317:	5e                   	pop    esi
c0011318:	5f                   	pop    edi
c0011319:	c3                   	ret    

c001131a <Reg::getLine(char*, char*, char*)>:
c001131a:	57                   	push   edi
c001131b:	56                   	push   esi
c001131c:	53                   	push   ebx
c001131d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011321:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011325:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011329:	57                   	push   edi
c001132a:	56                   	push   esi
c001132b:	53                   	push   ebx
c001132c:	68 ae e2 01 c0       	push   0xc001e2ae
c0011331:	e8 8f fe ff ff       	call   c00111c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	84 c0                	test   al,al
c001133b:	75 10                	jne    c001134d <Reg::getLine(char*, char*, char*)+0x33>
c001133d:	57                   	push   edi
c001133e:	56                   	push   esi
c001133f:	53                   	push   ebx
c0011340:	68 d3 e2 01 c0       	push   0xc001e2d3
c0011345:	e8 7b fe ff ff       	call   c00111c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	5b                   	pop    ebx
c001134e:	5e                   	pop    esi
c001134f:	5f                   	pop    edi
c0011350:	c3                   	ret    

c0011351 <Reg::readInt(char*, char*, int*)>:
c0011351:	55                   	push   ebp
c0011352:	57                   	push   edi
c0011353:	56                   	push   esi
c0011354:	53                   	push   ebx
c0011355:	81 ec f0 00 00 00    	sub    esp,0xf0
c001135b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001135f:	57                   	push   edi
c0011360:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011367:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001136e:	e8 a7 ff ff ff       	call   c001131a <Reg::getLine(char*, char*, char*)>
c0011373:	83 c4 10             	add    esp,0x10
c0011376:	84 c0                	test   al,al
c0011378:	0f 84 b3 00 00 00    	je     c0011431 <Reg::readInt(char*, char*, int*)+0xe0>
c001137e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011382:	80 fa 2b             	cmp    dl,0x2b
c0011385:	74 0c                	je     c0011393 <Reg::readInt(char*, char*, int*)+0x42>
c0011387:	80 fa 2d             	cmp    dl,0x2d
c001138a:	75 0e                	jne    c001139a <Reg::readInt(char*, char*, int*)+0x49>
c001138c:	ba 01 00 00 00       	mov    edx,0x1
c0011391:	eb 0b                	jmp    c001139e <Reg::readInt(char*, char*, int*)+0x4d>
c0011393:	ba 01 00 00 00       	mov    edx,0x1
c0011398:	eb 02                	jmp    c001139c <Reg::readInt(char*, char*, int*)+0x4b>
c001139a:	31 d2                	xor    edx,edx
c001139c:	31 c0                	xor    eax,eax
c001139e:	be 0a 00 00 00       	mov    esi,0xa
c00113a3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00113a8:	75 20                	jne    c00113ca <Reg::readInt(char*, char*, int*)+0x79>
c00113aa:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00113ae:	80 f9 78             	cmp    cl,0x78
c00113b1:	75 0a                	jne    c00113bd <Reg::readInt(char*, char*, int*)+0x6c>
c00113b3:	83 c2 02             	add    edx,0x2
c00113b6:	be 10 00 00 00       	mov    esi,0x10
c00113bb:	eb 0d                	jmp    c00113ca <Reg::readInt(char*, char*, int*)+0x79>
c00113bd:	80 f9 62             	cmp    cl,0x62
c00113c0:	75 08                	jne    c00113ca <Reg::readInt(char*, char*, int*)+0x79>
c00113c2:	83 c2 02             	add    edx,0x2
c00113c5:	be 02 00 00 00       	mov    esi,0x2
c00113ca:	01 d7                	add    edi,edx
c00113cc:	31 d2                	xor    edx,edx
c00113ce:	8a 1f                	mov    bl,BYTE PTR [edi]
c00113d0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00113d4:	80 fb 0d             	cmp    bl,0xd
c00113d7:	0f 94 c3             	sete   bl
c00113da:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00113df:	0f 94 c1             	sete   cl
c00113e2:	08 cb                	or     bl,cl
c00113e4:	75 3a                	jne    c0011420 <Reg::readInt(char*, char*, int*)+0xcf>
c00113e6:	0f af d6             	imul   edx,esi
c00113e9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00113ee:	83 fe 10             	cmp    esi,0x10
c00113f1:	75 26                	jne    c0011419 <Reg::readInt(char*, char*, int*)+0xc8>
c00113f3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113f7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00113fa:	89 e9                	mov    ecx,ebp
c00113fc:	80 f9 05             	cmp    cl,0x5
c00113ff:	77 06                	ja     c0011407 <Reg::readInt(char*, char*, int*)+0xb6>
c0011401:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011405:	eb 16                	jmp    c001141d <Reg::readInt(char*, char*, int*)+0xcc>
c0011407:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001140b:	83 e9 61             	sub    ecx,0x61
c001140e:	80 f9 05             	cmp    cl,0x5
c0011411:	77 06                	ja     c0011419 <Reg::readInt(char*, char*, int*)+0xc8>
c0011413:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011417:	eb 04                	jmp    c001141d <Reg::readInt(char*, char*, int*)+0xcc>
c0011419:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001141d:	47                   	inc    edi
c001141e:	eb ae                	jmp    c00113ce <Reg::readInt(char*, char*, int*)+0x7d>
c0011420:	84 c0                	test   al,al
c0011422:	74 02                	je     c0011426 <Reg::readInt(char*, char*, int*)+0xd5>
c0011424:	f7 da                	neg    edx
c0011426:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001142d:	89 10                	mov    DWORD PTR [eax],edx
c001142f:	88 d8                	mov    al,bl
c0011431:	81 c4 ec 00 00 00    	add    esp,0xec
c0011437:	5b                   	pop    ebx
c0011438:	5e                   	pop    esi
c0011439:	5f                   	pop    edi
c001143a:	5d                   	pop    ebp
c001143b:	c3                   	ret    

c001143c <Reg::readString(char*, char*, char*, int)>:
c001143c:	57                   	push   edi
c001143d:	56                   	push   esi
c001143e:	53                   	push   ebx
c001143f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011445:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001144c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011450:	57                   	push   edi
c0011451:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011458:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001145f:	e8 b6 fe ff ff       	call   c001131a <Reg::getLine(char*, char*, char*)>
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	89 c6                	mov    esi,eax
c0011469:	84 c0                	test   al,al
c001146b:	74 44                	je     c00114b1 <Reg::readString(char*, char*, char*, int)+0x75>
c001146d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011474:	31 c0                	xor    eax,eax
c0011476:	4a                   	dec    edx
c0011477:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001147a:	84 c9                	test   cl,cl
c001147c:	74 0f                	je     c001148d <Reg::readString(char*, char*, char*, int)+0x51>
c001147e:	39 c2                	cmp    edx,eax
c0011480:	7e 0b                	jle    c001148d <Reg::readString(char*, char*, char*, int)+0x51>
c0011482:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011485:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001148a:	40                   	inc    eax
c001148b:	eb ea                	jmp    c0011477 <Reg::readString(char*, char*, char*, int)+0x3b>
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	53                   	push   ebx
c0011491:	e8 aa f0 fe ff       	call   c0000540 <strlen>
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001149e:	75 11                	jne    c00114b1 <Reg::readString(char*, char*, char*, int)+0x75>
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	53                   	push   ebx
c00114a4:	e8 97 f0 fe ff       	call   c0000540 <strlen>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00114b1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00114b7:	89 f0                	mov    eax,esi
c00114b9:	5b                   	pop    ebx
c00114ba:	5e                   	pop    esi
c00114bb:	5f                   	pop    edi
c00114bc:	c3                   	ret    

c00114bd <Reg::readBool(char*, char*, bool*)>:
c00114bd:	83 ec 20             	sub    esp,0x20
c00114c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00114c4:	50                   	push   eax
c00114c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114cd:	e8 7f fe ff ff       	call   c0011351 <Reg::readInt(char*, char*, int*)>
c00114d2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00114db:	0f 95 02             	setne  BYTE PTR [edx]
c00114de:	83 c4 2c             	add    esp,0x2c
c00114e1:	c3                   	ret    

c00114e2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00114e2:	53                   	push   ebx
c00114e3:	83 ec 1c             	sub    esp,0x1c
c00114e6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00114ea:	8d 44 24 13          	lea    eax,[esp+0x13]
c00114ee:	50                   	push   eax
c00114ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114f7:	e8 c1 ff ff ff       	call   c00114bd <Reg::readBool(char*, char*, bool*)>
c00114fc:	83 c4 10             	add    esp,0x10
c00114ff:	84 c0                	test   al,al
c0011501:	74 04                	je     c0011507 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011503:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011507:	88 d8                	mov    al,bl
c0011509:	83 c4 18             	add    esp,0x18
c001150c:	5b                   	pop    ebx
c001150d:	c3                   	ret    

c001150e <Reg::readIntWithDefault(char*, char*, int)>:
c001150e:	53                   	push   ebx
c001150f:	83 ec 1c             	sub    esp,0x1c
c0011512:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011516:	8d 44 24 10          	lea    eax,[esp+0x10]
c001151a:	50                   	push   eax
c001151b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001151f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011523:	e8 29 fe ff ff       	call   c0011351 <Reg::readInt(char*, char*, int*)>
c0011528:	83 c4 10             	add    esp,0x10
c001152b:	84 c0                	test   al,al
c001152d:	74 04                	je     c0011533 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001152f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011533:	89 d8                	mov    eax,ebx
c0011535:	83 c4 18             	add    esp,0x18
c0011538:	5b                   	pop    ebx
c0011539:	c3                   	ret    

c001153a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001153a:	57                   	push   edi
c001153b:	56                   	push   esi
c001153c:	56                   	push   esi
c001153d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011541:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011545:	56                   	push   esi
c0011546:	57                   	push   edi
c0011547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154f:	e8 e8 fe ff ff       	call   c001143c <Reg::readString(char*, char*, char*, int)>
c0011554:	83 c4 10             	add    esp,0x10
c0011557:	84 c0                	test   al,al
c0011559:	75 1a                	jne    c0011575 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001155b:	51                   	push   ecx
c001155c:	56                   	push   esi
c001155d:	6a 00                	push   0x0
c001155f:	57                   	push   edi
c0011560:	e8 6b ef fe ff       	call   c00004d0 <memset>
c0011565:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011568:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001156c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011575:	89 f8                	mov    eax,edi
c0011577:	5a                   	pop    edx
c0011578:	5e                   	pop    esi
c0011579:	5f                   	pop    edi
c001157a:	c3                   	ret    

c001157b <SysEject(regs*)>:
c001157b:	83 ec 0c             	sub    esp,0xc
c001157e:	83 ca ff             	or     edx,0xffffffff
c0011581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011585:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011588:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001158d:	83 e9 41             	sub    ecx,0x41
c0011590:	83 f9 19             	cmp    ecx,0x19
c0011593:	77 18                	ja     c00115ad <SysEject(regs*)+0x32>
c0011595:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c001159c:	85 c9                	test   ecx,ecx
c001159e:	74 0d                	je     c00115ad <SysEject(regs*)+0x32>
c00115a0:	83 ec 0c             	sub    esp,0xc
c00115a3:	51                   	push   ecx
c00115a4:	e8 ad b5 ff ff       	call   c000cb56 <LogicalDisk::eject()>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	99                   	cdq    
c00115ad:	83 c4 0c             	add    esp,0xc
c00115b0:	c3                   	ret    

c00115b1 <SysExit(regs*)>:
c00115b1:	83 ec 18             	sub    esp,0x18
c00115b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00115bb:	e8 b0 26 00 00       	call   c0013c70 <terminateTask(int)>
c00115c0:	83 c8 ff             	or     eax,0xffffffff
c00115c3:	83 c4 1c             	add    esp,0x1c
c00115c6:	89 c2                	mov    edx,eax
c00115c8:	c3                   	ret    

c00115c9 <SysGetCwd(regs*)>:
c00115c9:	83 ec 10             	sub    esp,0x10
c00115cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115d0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00115d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00115d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00115de:	e8 6d 92 ff ff       	call   c000a850 <Fs::getcwd(Process*, char*, int)>
c00115e3:	83 c4 1c             	add    esp,0x1c
c00115e6:	99                   	cdq    
c00115e7:	c3                   	ret    

c00115e8 <SysGetPID(regs*)>:
c00115e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00115f2:	99                   	cdq    
c00115f3:	c3                   	ret    

c00115f4 <SysGetRAMData(regs*)>:
c00115f4:	8b 0d c8 04 02 c0    	mov    ecx,DWORD PTR ds:0xc00204c8
c00115fa:	69 05 c4 04 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00204c4,0xc8
c0011604:	99                   	cdq    
c0011605:	f7 f9                	idiv   ecx
c0011607:	c1 e0 18             	shl    eax,0x18
c001160a:	09 c8                	or     eax,ecx
c001160c:	99                   	cdq    
c001160d:	c3                   	ret    

c001160e <SysGetVGAPtr(regs*)>:
c001160e:	55                   	push   ebp
c001160f:	57                   	push   edi
c0011610:	56                   	push   esi
c0011611:	53                   	push   ebx
c0011612:	83 ec 18             	sub    esp,0x18
c0011615:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011619:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001161c:	e8 4f 21 00 00       	call   c0013770 <Thr::processFromPID(int)>
c0011621:	83 c4 10             	add    esp,0x10
c0011624:	89 c1                	mov    ecx,eax
c0011626:	b8 01 00 00 00       	mov    eax,0x1
c001162b:	85 c9                	test   ecx,ecx
c001162d:	74 57                	je     c0011686 <SysGetVGAPtr(regs*)+0x78>
c001162f:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011635:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011639:	74 0c                	je     c0011647 <SysGetVGAPtr(regs*)+0x39>
c001163b:	83 ec 0c             	sub    esp,0xc
c001163e:	55                   	push   ebp
c001163f:	e8 b3 6d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011644:	83 c4 10             	add    esp,0x10
c0011647:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001164a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001164d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011654:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011657:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001165a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011660:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011663:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011666:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001166c:	50                   	push   eax
c001166d:	50                   	push   eax
c001166e:	68 ee e2 01 c0       	push   0xc001e2ee
c0011673:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011676:	05 a8 0f 00 00       	add    eax,0xfa8
c001167b:	50                   	push   eax
c001167c:	e8 7f ef fe ff       	call   c0000600 <strcpy>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	31 c0                	xor    eax,eax
c0011686:	83 c4 0c             	add    esp,0xc
c0011689:	31 d2                	xor    edx,edx
c001168b:	5b                   	pop    ebx
c001168c:	5e                   	pop    esi
c001168d:	5f                   	pop    edi
c001168e:	5d                   	pop    ebp
c001168f:	c3                   	ret    

c0011690 <SysLoadDLL(regs*)>:
c0011690:	56                   	push   esi
c0011691:	53                   	push   ebx
c0011692:	31 d2                	xor    edx,edx
c0011694:	51                   	push   ecx
c0011695:	b8 01 00 00 00       	mov    eax,0x1
c001169a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001169e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00116a2:	0f 84 8c 00 00 00    	je     c0011734 <SysLoadDLL(regs*)+0xa4>
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	68 14 01 00 00       	push   0x114
c00116b0:	e8 04 61 ff ff       	call   c00077b9 <malloc>
c00116b5:	83 c4 0c             	add    esp,0xc
c00116b8:	89 c3                	mov    ebx,eax
c00116ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116bf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00116c2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00116c5:	53                   	push   ebx
c00116c6:	e8 83 93 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00116cb:	83 c4 10             	add    esp,0x10
c00116ce:	31 d2                	xor    edx,edx
c00116d0:	b8 02 00 00 00       	mov    eax,0x2
c00116d5:	85 db                	test   ebx,ebx
c00116d7:	74 5b                	je     c0011734 <SysLoadDLL(regs*)+0xa4>
c00116d9:	83 ec 0c             	sub    esp,0xc
c00116dc:	53                   	push   ebx
c00116dd:	e8 9a 96 ff ff       	call   c000ad7c <File::exists()>
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	84 c0                	test   al,al
c00116e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116e9:	75 11                	jne    c00116fc <SysLoadDLL(regs*)+0x6c>
c00116eb:	83 ec 0c             	sub    esp,0xc
c00116ee:	53                   	push   ebx
c00116ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	b8 03 00 00 00       	mov    eax,0x3
c00116fa:	eb 36                	jmp    c0011732 <SysLoadDLL(regs*)+0xa2>
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	53                   	push   ebx
c0011700:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011703:	58                   	pop    eax
c0011704:	5a                   	pop    edx
c0011705:	6a 00                	push   0x0
c0011707:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001170a:	e8 4b 12 00 00       	call   c001295a <Thr::loadDLL(char const*, bool)>
c001170f:	83 c4 10             	add    esp,0x10
c0011712:	89 c1                	mov    ecx,eax
c0011714:	31 d2                	xor    edx,edx
c0011716:	b8 04 00 00 00       	mov    eax,0x4
c001171b:	85 c9                	test   ecx,ecx
c001171d:	74 15                	je     c0011734 <SysLoadDLL(regs*)+0xa4>
c001171f:	53                   	push   ebx
c0011720:	53                   	push   ebx
c0011721:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0011727:	51                   	push   ecx
c0011728:	e8 5e 14 00 00       	call   c0012b8b <Thr::executeDLL(unsigned long, void*)>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	31 c0                	xor    eax,eax
c0011732:	31 d2                	xor    edx,edx
c0011734:	59                   	pop    ecx
c0011735:	5b                   	pop    ebx
c0011736:	5e                   	pop    esi
c0011737:	c3                   	ret    

c0011738 <SysRead(regs*)>:
c0011738:	57                   	push   edi
c0011739:	56                   	push   esi
c001173a:	53                   	push   ebx
c001173b:	83 ec 10             	sub    esp,0x10
c001173e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011742:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011745:	83 f8 02             	cmp    eax,0x2
c0011748:	77 10                	ja     c001175a <SysRead(regs*)+0x22>
c001174a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001174f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011752:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011758:	eb 0e                	jmp    c0011768 <SysRead(regs*)+0x30>
c001175a:	83 ec 0c             	sub    esp,0xc
c001175d:	50                   	push   eax
c001175e:	e8 cc 79 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011763:	83 c4 10             	add    esp,0x10
c0011766:	89 c1                	mov    ecx,eax
c0011768:	83 c8 ff             	or     eax,0xffffffff
c001176b:	85 c9                	test   ecx,ecx
c001176d:	89 c2                	mov    edx,eax
c001176f:	74 28                	je     c0011799 <SysRead(regs*)+0x61>
c0011771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011779:	31 ff                	xor    edi,edi
c001177b:	83 ec 0c             	sub    esp,0xc
c001177e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011784:	52                   	push   edx
c0011785:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011788:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001178b:	57                   	push   edi
c001178c:	56                   	push   esi
c001178d:	51                   	push   ecx
c001178e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011791:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011795:	83 c4 20             	add    esp,0x20
c0011798:	99                   	cdq    
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	5b                   	pop    ebx
c001179d:	5e                   	pop    esi
c001179e:	5f                   	pop    edi
c001179f:	c3                   	ret    

c00117a0 <SysSbrk(regs*)>:
c00117a0:	56                   	push   esi
c00117a1:	53                   	push   ebx
c00117a2:	50                   	push   eax
c00117a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00117ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117af:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00117b2:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00117b8:	85 db                	test   ebx,ebx
c00117ba:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00117bd:	74 02                	je     c00117c1 <SysSbrk(regs*)+0x21>
c00117bf:	79 06                	jns    c00117c7 <SysSbrk(regs*)+0x27>
c00117c1:	89 f0                	mov    eax,esi
c00117c3:	31 d2                	xor    edx,edx
c00117c5:	eb 2a                	jmp    c00117f1 <SysSbrk(regs*)+0x51>
c00117c7:	83 c8 ff             	or     eax,0xffffffff
c00117ca:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00117d0:	89 c2                	mov    edx,eax
c00117d2:	77 1d                	ja     c00117f1 <SysSbrk(regs*)+0x51>
c00117d4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00117da:	50                   	push   eax
c00117db:	c1 ea 0c             	shr    edx,0xc
c00117de:	68 07 0c 00 00       	push   0xc07
c00117e3:	52                   	push   edx
c00117e4:	51                   	push   ecx
c00117e5:	e8 34 82 ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c00117ea:	89 f0                	mov    eax,esi
c00117ec:	31 d2                	xor    edx,edx
c00117ee:	83 c4 10             	add    esp,0x10
c00117f1:	59                   	pop    ecx
c00117f2:	5b                   	pop    ebx
c00117f3:	5e                   	pop    esi
c00117f4:	c3                   	ret    

c00117f5 <SysSetCwd(regs*)>:
c00117f5:	83 ec 14             	sub    esp,0x14
c00117f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117fc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00117ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011804:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011807:	e8 0f 96 ff ff       	call   c000ae1b <Fs::setcwd(Process*, char*)>
c001180c:	83 c4 1c             	add    esp,0x1c
c001180f:	99                   	cdq    
c0011810:	c3                   	ret    

c0011811 <SysSetTime(regs*)>:
c0011811:	55                   	push   ebp
c0011812:	31 c9                	xor    ecx,ecx
c0011814:	57                   	push   edi
c0011815:	bd 0c 00 00 00       	mov    ebp,0xc
c001181a:	56                   	push   esi
c001181b:	53                   	push   ebx
c001181c:	31 db                	xor    ebx,ebx
c001181e:	83 ec 10             	sub    esp,0x10
c0011821:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011825:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011828:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001182b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001182e:	89 c2                	mov    edx,eax
c0011830:	66 81 ef 6c 07       	sub    di,0x76c
c0011835:	83 e2 1f             	and    edx,0x1f
c0011838:	c1 e7 10             	shl    edi,0x10
c001183b:	42                   	inc    edx
c001183c:	c1 e8 05             	shr    eax,0x5
c001183f:	88 d1                	mov    cl,dl
c0011841:	31 d2                	xor    edx,edx
c0011843:	f7 f5                	div    ebp
c0011845:	89 dd                	mov    ebp,ebx
c0011847:	88 d5                	mov    ch,dl
c0011849:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001184f:	0f b7 c1             	movzx  eax,cx
c0011852:	31 d2                	xor    edx,edx
c0011854:	09 f8                	or     eax,edi
c0011856:	bf 3c 00 00 00       	mov    edi,0x3c
c001185b:	89 c1                	mov    ecx,eax
c001185d:	89 f0                	mov    eax,esi
c001185f:	f7 f7                	div    edi
c0011861:	c1 e2 10             	shl    edx,0x10
c0011864:	09 d5                	or     ebp,edx
c0011866:	31 d2                	xor    edx,edx
c0011868:	89 eb                	mov    ebx,ebp
c001186a:	f7 f7                	div    edi
c001186c:	bf 10 0e 00 00       	mov    edi,0xe10
c0011871:	88 d7                	mov    bh,dl
c0011873:	89 f0                	mov    eax,esi
c0011875:	31 d2                	xor    edx,edx
c0011877:	f7 f7                	div    edi
c0011879:	bf 18 00 00 00       	mov    edi,0x18
c001187e:	31 d2                	xor    edx,edx
c0011880:	f7 f7                	div    edi
c0011882:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0011887:	88 d3                	mov    bl,dl
c0011889:	53                   	push   ebx
c001188a:	51                   	push   ecx
c001188b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011891:	e8 96 9d ff ff       	call   c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011896:	83 c4 1c             	add    esp,0x1c
c0011899:	83 f0 01             	xor    eax,0x1
c001189c:	5b                   	pop    ebx
c001189d:	0f b6 c0             	movzx  eax,al
c00118a0:	5e                   	pop    esi
c00118a1:	31 d2                	xor    edx,edx
c00118a3:	5f                   	pop    edi
c00118a4:	5d                   	pop    ebp
c00118a5:	c3                   	ret    

c00118a6 <SysTimezone(regs*)>:
c00118a6:	53                   	push   ebx
c00118a7:	83 ec 08             	sub    esp,0x8
c00118aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118ae:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00118b2:	75 17                	jne    c00118cb <SysTimezone(regs*)+0x25>
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	68 f8 e2 01 c0       	push   0xc001e2f8
c00118bc:	e8 17 8c ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00118c1:	83 c8 ff             	or     eax,0xffffffff
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	89 c2                	mov    edx,eax
c00118c9:	eb 20                	jmp    c00118eb <SysTimezone(regs*)+0x45>
c00118cb:	83 ec 0c             	sub    esp,0xc
c00118ce:	68 0d e3 01 c0       	push   0xc001e30d
c00118d3:	e8 00 8c ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00118d8:	58                   	pop    eax
c00118d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00118dc:	e8 a7 9a ff ff       	call   c000b388 <User::loadClockSettings(int)>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	b8 01 00 00 00       	mov    eax,0x1
c00118e9:	31 d2                	xor    edx,edx
c00118eb:	83 c4 08             	add    esp,0x8
c00118ee:	5b                   	pop    ebx
c00118ef:	c3                   	ret    

c00118f0 <SysWrite(regs*)>:
c00118f0:	57                   	push   edi
c00118f1:	56                   	push   esi
c00118f2:	53                   	push   ebx
c00118f3:	83 ec 10             	sub    esp,0x10
c00118f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118fd:	83 f8 02             	cmp    eax,0x2
c0011900:	77 10                	ja     c0011912 <SysWrite(regs*)+0x22>
c0011902:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011907:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001190a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011910:	eb 0e                	jmp    c0011920 <SysWrite(regs*)+0x30>
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	50                   	push   eax
c0011916:	e8 14 78 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	89 c1                	mov    ecx,eax
c0011920:	83 c8 ff             	or     eax,0xffffffff
c0011923:	85 c9                	test   ecx,ecx
c0011925:	89 c2                	mov    edx,eax
c0011927:	74 28                	je     c0011951 <SysWrite(regs*)+0x61>
c0011929:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011931:	31 ff                	xor    edi,edi
c0011933:	83 ec 0c             	sub    esp,0xc
c0011936:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011938:	8d 54 24 18          	lea    edx,[esp+0x18]
c001193c:	52                   	push   edx
c001193d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011940:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011943:	57                   	push   edi
c0011944:	56                   	push   esi
c0011945:	51                   	push   ecx
c0011946:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011949:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001194d:	83 c4 20             	add    esp,0x20
c0011950:	99                   	cdq    
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	5b                   	pop    ebx
c0011955:	5e                   	pop    esi
c0011956:	5f                   	pop    edi
c0011957:	c3                   	ret    

c0011958 <SysWsbe(regs*)>:
c0011958:	57                   	push   edi
c0011959:	b9 0b 00 00 00       	mov    ecx,0xb
c001195e:	56                   	push   esi
c001195f:	be 4c e3 01 c0       	mov    esi,0xc001e34c
c0011964:	53                   	push   ebx
c0011965:	83 ec 30             	sub    esp,0x30
c0011968:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001196c:	fc                   	cld    
c001196d:	83 ec 0c             	sub    esp,0xc
c0011970:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011972:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001197b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001197e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011984:	8b 06                	mov    eax,DWORD PTR [esi]
c0011986:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011989:	57                   	push   edi
c001198a:	e8 b1 eb fe ff       	call   c0000540 <strlen>
c001198f:	5a                   	pop    edx
c0011990:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011994:	52                   	push   edx
c0011995:	31 d2                	xor    edx,edx
c0011997:	57                   	push   edi
c0011998:	52                   	push   edx
c0011999:	50                   	push   eax
c001199a:	56                   	push   esi
c001199b:	ff d3                	call   ebx
c001199d:	83 c4 14             	add    esp,0x14
c00119a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00119a4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00119a7:	e8 c4 22 00 00       	call   c0013c70 <terminateTask(int)>
c00119ac:	83 c4 40             	add    esp,0x40
c00119af:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00119b4:	5b                   	pop    ebx
c00119b5:	31 d2                	xor    edx,edx
c00119b7:	5e                   	pop    esi
c00119b8:	5f                   	pop    edi
c00119b9:	c3                   	ret    

c00119ba <SysYield(regs*)>:
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	fa                   	cli    
c00119be:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00119c4:	e8 83 19 00 00       	call   c001334c <schedule()>
c00119c9:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00119ce:	48                   	dec    eax
c00119cf:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00119d4:	75 01                	jne    c00119d7 <SysYield(regs*)+0x1d>
c00119d6:	fb                   	sti    
c00119d7:	31 c0                	xor    eax,eax
c00119d9:	31 d2                	xor    edx,edx
c00119db:	83 c4 0c             	add    esp,0xc
c00119de:	c3                   	ret    

c00119df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00119df:	55                   	push   ebp
c00119e0:	57                   	push   edi
c00119e1:	56                   	push   esi
c00119e2:	53                   	push   ebx
c00119e3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00119e9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00119f1:	0f 95 c2             	setne  dl
c00119f4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00119fc:	0f 94 c0             	sete   al
c00119ff:	84 c2                	test   dl,al
c0011a01:	74 34                	je     c0011a37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a03:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011a0e:	74 27                	je     c0011a37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a10:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011a17:	05 00 10 00 00       	add    eax,0x1000
c0011a1c:	89 c1                	mov    ecx,eax
c0011a1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a23:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011a29:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011a30:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011a37:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011a47:	6a 01                	push   0x1
c0011a49:	e8 37 78 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	89 c3                	mov    ebx,eax
c0011a53:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011a59:	0f 86 25 01 00 00    	jbe    c0011b84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011a5f:	c1 ee 0c             	shr    esi,0xc
c0011a62:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011a69:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011a6d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a75:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011a7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a80:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011a87:	29 ef                	sub    edi,ebp
c0011a89:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011a8d:	0f 83 f8 00 00 00    	jae    c0011b8b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011a93:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011a99:	76 05                	jbe    c0011aa0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011a9b:	bf 00 10 00 00       	mov    edi,0x1000
c0011aa0:	83 ec 0c             	sub    esp,0xc
c0011aa3:	31 d2                	xor    edx,edx
c0011aa5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011aac:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011aae:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ab2:	50                   	push   eax
c0011ab3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ab7:	56                   	push   esi
c0011ab8:	52                   	push   edx
c0011ab9:	57                   	push   edi
c0011aba:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ac1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ac4:	83 c4 20             	add    esp,0x20
c0011ac7:	85 c0                	test   eax,eax
c0011ac9:	75 06                	jne    c0011ad1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011acb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011acf:	74 13                	je     c0011ae4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ad1:	83 ec 0c             	sub    esp,0xc
c0011ad4:	53                   	push   ebx
c0011ad5:	e8 db 7a ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	31 c0                	xor    eax,eax
c0011adf:	e9 7c 01 00 00       	jmp    c0011c60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011ae4:	fa                   	cli    
c0011ae5:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0011aeb:	e8 a5 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011af0:	6a 07                	push   0x7
c0011af2:	89 c7                	mov    edi,eax
c0011af4:	53                   	push   ebx
c0011af5:	50                   	push   eax
c0011af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011afb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011afe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b04:	e8 11 7e ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b09:	83 c4 0c             	add    esp,0xc
c0011b0c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b13:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b19:	6a 00                	push   0x0
c0011b1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b23:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b29:	e8 5e 7c ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011b2e:	58                   	pop    eax
c0011b2f:	5a                   	pop    edx
c0011b30:	68 07 0c 00 00       	push   0xc07
c0011b35:	55                   	push   ebp
c0011b36:	57                   	push   edi
c0011b37:	89 df                	mov    edi,ebx
c0011b39:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b40:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b46:	6a 00                	push   0x0
c0011b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b50:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b56:	e8 7f 81 ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011b5b:	b9 00 10 00 00       	mov    ecx,0x1000
c0011b60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b62:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0011b67:	83 c4 20             	add    esp,0x20
c0011b6a:	48                   	dec    eax
c0011b6b:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0011b70:	85 c0                	test   eax,eax
c0011b72:	75 01                	jne    c0011b75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011b74:	fb                   	sti    
c0011b75:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b7b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011b7f:	e9 f1 fe ff ff       	jmp    c0011a75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011b84:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011b8b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011b92:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011b98:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011b9e:	0f 86 ae 00 00 00    	jbe    c0011c52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011ba4:	fa                   	cli    
c0011ba5:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0011bab:	c1 ee 0c             	shr    esi,0xc
c0011bae:	51                   	push   ecx
c0011baf:	31 ff                	xor    edi,edi
c0011bb1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011bb8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bbe:	6a 00                	push   0x0
c0011bc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bce:	e8 b9 7b ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011bd3:	83 c4 10             	add    esp,0x10
c0011bd6:	e8 ba 5e ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011bdb:	47                   	inc    edi
c0011bdc:	6a 07                	push   0x7
c0011bde:	53                   	push   ebx
c0011bdf:	50                   	push   eax
c0011be0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011be4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bea:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011bed:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011bf3:	e8 22 7d ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bf8:	58                   	pop    eax
c0011bf9:	5a                   	pop    edx
c0011bfa:	68 07 0c 00 00       	push   0xc07
c0011bff:	55                   	push   ebp
c0011c00:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011c06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c0a:	50                   	push   eax
c0011c0b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011c12:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c18:	6a 00                	push   0x0
c0011c1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c28:	e8 ad 80 ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011c2d:	83 c4 1c             	add    esp,0x1c
c0011c30:	68 00 10 00 00       	push   0x1000
c0011c35:	6a 00                	push   0x0
c0011c37:	53                   	push   ebx
c0011c38:	e8 93 e8 fe ff       	call   c00004d0 <memset>
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	39 fe                	cmp    esi,edi
c0011c42:	77 92                	ja     c0011bd6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011c44:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0011c49:	48                   	dec    eax
c0011c4a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0011c4f:	75 01                	jne    c0011c52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c51:	fb                   	sti    
c0011c52:	83 ec 0c             	sub    esp,0xc
c0011c55:	53                   	push   ebx
c0011c56:	e8 5a 79 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c5b:	83 c4 10             	add    esp,0x10
c0011c5e:	b0 01                	mov    al,0x1
c0011c60:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011c66:	5b                   	pop    ebx
c0011c67:	5e                   	pop    esi
c0011c68:	5f                   	pop    edi
c0011c69:	5d                   	pop    ebp
c0011c6a:	c3                   	ret    

c0011c6b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011c6b:	55                   	push   ebp
c0011c6c:	57                   	push   edi
c0011c6d:	56                   	push   esi
c0011c6e:	53                   	push   ebx
c0011c6f:	83 ec 48             	sub    esp,0x48
c0011c72:	68 14 01 00 00       	push   0x114
c0011c77:	e8 3d 5b ff ff       	call   c00077b9 <malloc>
c0011c7c:	83 c4 0c             	add    esp,0xc
c0011c7f:	89 c6                	mov    esi,eax
c0011c81:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011c85:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011c89:	50                   	push   eax
c0011c8a:	e8 bf 8d ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011c8f:	58                   	pop    eax
c0011c90:	5a                   	pop    edx
c0011c91:	6a 01                	push   0x1
c0011c93:	56                   	push   esi
c0011c94:	e8 75 8e ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0011c99:	83 c4 10             	add    esp,0x10
c0011c9c:	85 c0                	test   eax,eax
c0011c9e:	0f 85 47 01 00 00    	jne    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ca4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011cac:	83 ec 0c             	sub    esp,0xc
c0011caf:	6a 34                	push   0x34
c0011cb1:	e8 03 5b ff ff       	call   c00077b9 <malloc>
c0011cb6:	89 c3                	mov    ebx,eax
c0011cb8:	58                   	pop    eax
c0011cb9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cbb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011cbf:	57                   	push   edi
c0011cc0:	53                   	push   ebx
c0011cc1:	6a 00                	push   0x0
c0011cc3:	6a 34                	push   0x34
c0011cc5:	56                   	push   esi
c0011cc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011cc9:	83 c4 20             	add    esp,0x20
c0011ccc:	85 c0                	test   eax,eax
c0011cce:	0f 85 17 01 00 00    	jne    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cd4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011cda:	0f 85 0b 01 00 00    	jne    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ce0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ce3:	85 c0                	test   eax,eax
c0011ce5:	0f 84 00 01 00 00    	je     c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ceb:	31 d2                	xor    edx,edx
c0011ced:	55                   	push   ebp
c0011cee:	52                   	push   edx
c0011cef:	50                   	push   eax
c0011cf0:	56                   	push   esi
c0011cf1:	e8 d6 8e ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	85 c0                	test   eax,eax
c0011cfb:	0f 85 ea 00 00 00    	jne    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d01:	83 ec 0c             	sub    esp,0xc
c0011d04:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011d07:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d0f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d13:	0f af c2             	imul   eax,edx
c0011d16:	50                   	push   eax
c0011d17:	e8 9d 5a ff ff       	call   c00077b9 <malloc>
c0011d1c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d29:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d2d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d31:	0f af c2             	imul   eax,edx
c0011d34:	99                   	cdq    
c0011d35:	52                   	push   edx
c0011d36:	50                   	push   eax
c0011d37:	56                   	push   esi
c0011d38:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d3b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011d3e:	83 c4 20             	add    esp,0x20
c0011d41:	85 c0                	test   eax,eax
c0011d43:	0f 84 a2 00 00 00    	je     c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d49:	31 d2                	xor    edx,edx
c0011d4b:	51                   	push   ecx
c0011d4c:	52                   	push   edx
c0011d4d:	50                   	push   eax
c0011d4e:	56                   	push   esi
c0011d4f:	e8 78 8e ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	85 c0                	test   eax,eax
c0011d59:	0f 85 8c 00 00 00    	jne    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d5f:	83 ec 0c             	sub    esp,0xc
c0011d62:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d66:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d6a:	31 ed                	xor    ebp,ebp
c0011d6c:	0f af c2             	imul   eax,edx
c0011d6f:	50                   	push   eax
c0011d70:	e8 44 5a ff ff       	call   c00077b9 <malloc>
c0011d75:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d82:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d86:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d8a:	0f af c2             	imul   eax,edx
c0011d8d:	99                   	cdq    
c0011d8e:	52                   	push   edx
c0011d8f:	50                   	push   eax
c0011d90:	56                   	push   esi
c0011d91:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d94:	83 c4 20             	add    esp,0x20
c0011d97:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d9f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011da3:	0f 86 80 00 00 00    	jbe    c0011e29 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011da9:	0f b7 fd             	movzx  edi,bp
c0011dac:	c1 e7 05             	shl    edi,0x5
c0011daf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011db3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011db6:	75 6b                	jne    c0011e23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011db8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dbf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011dc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dc6:	52                   	push   edx
c0011dc7:	31 d2                	xor    edx,edx
c0011dc9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011dcc:	52                   	push   edx
c0011dcd:	50                   	push   eax
c0011dce:	56                   	push   esi
c0011dcf:	e8 f8 8d ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	85 c0                	test   eax,eax
c0011dd9:	74 17                	je     c0011df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011ddb:	83 ec 0c             	sub    esp,0xc
c0011dde:	68 78 e3 01 c0       	push   0xc001e378
c0011de3:	e8 f0 86 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011de8:	83 c4 10             	add    esp,0x10
c0011deb:	31 c0                	xor    eax,eax
c0011ded:	e9 87 00 00 00       	jmp    c0011e79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011df8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011dfb:	50                   	push   eax
c0011dfc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e04:	56                   	push   esi
c0011e05:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011e09:	e8 d1 fb ff ff       	call   c00119df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011e0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e12:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011e16:	83 c4 20             	add    esp,0x20
c0011e19:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011e1d:	73 04                	jae    c0011e23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011e1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e23:	45                   	inc    ebp
c0011e24:	e9 76 ff ff ff       	jmp    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011e29:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011e2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e35:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011e3b:	83 ec 0c             	sub    esp,0xc
c0011e3e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011e44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e49:	05 00 10 00 00       	add    eax,0x1000
c0011e4e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e55:	e8 6f 59 ff ff       	call   c00077c9 <free>
c0011e5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e5d:	e8 67 59 ff ff       	call   c00077c9 <free>
c0011e62:	58                   	pop    eax
c0011e63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e67:	e8 5d 59 ff ff       	call   c00077c9 <free>
c0011e6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6f:	e8 f8 8c ff ff       	call   c000ab6c <File::close()>
c0011e74:	83 c4 10             	add    esp,0x10
c0011e77:	b0 01                	mov    al,0x1
c0011e79:	83 c4 3c             	add    esp,0x3c
c0011e7c:	5b                   	pop    ebx
c0011e7d:	5e                   	pop    esi
c0011e7e:	5f                   	pop    edi
c0011e7f:	5d                   	pop    ebp
c0011e80:	c3                   	ret    

c0011e81 <Thr::runtimeReferenceHelper()>:
c0011e81:	83 ec 18             	sub    esp,0x18
c0011e84:	68 80 e3 01 c0       	push   0xc001e380
c0011e89:	e8 4a 86 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011e8e:	fa                   	cli    
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	eb fe                	jmp    c0011e92 <Thr::runtimeReferenceHelper()+0x11>

c0011e94 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011e94:	57                   	push   edi
c0011e95:	56                   	push   esi
c0011e96:	53                   	push   ebx
c0011e97:	31 db                	xor    ebx,ebx
c0011e99:	39 1d 20 37 02 c0    	cmp    DWORD PTR ds:0xc0023720,ebx
c0011e9f:	7e 3c                	jle    c0011edd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011ea1:	8b 34 9d a0 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc960]
c0011ea8:	31 ff                	xor    edi,edi
c0011eaa:	39 3c 9d a0 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdca60],edi
c0011eb1:	7e 27                	jle    c0011eda <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011eb3:	50                   	push   eax
c0011eb4:	50                   	push   eax
c0011eb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011eb9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ebb:	03 04 9d 20 36 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc9e0]
c0011ec2:	50                   	push   eax
c0011ec3:	e8 18 e8 fe ff       	call   c00006e0 <strcmp>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	85 c0                	test   eax,eax
c0011ecd:	75 05                	jne    c0011ed4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011ecf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011ed2:	eb 0b                	jmp    c0011edf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011ed4:	83 c6 10             	add    esi,0x10
c0011ed7:	47                   	inc    edi
c0011ed8:	eb d0                	jmp    c0011eaa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011eda:	43                   	inc    ebx
c0011edb:	eb bc                	jmp    c0011e99 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011edd:	31 c0                	xor    eax,eax
c0011edf:	5b                   	pop    ebx
c0011ee0:	5e                   	pop    esi
c0011ee1:	5f                   	pop    edi
c0011ee2:	c3                   	ret    

c0011ee3 <Thr::loadKernelSymbolTable(char const*)>:
c0011ee3:	55                   	push   ebp
c0011ee4:	57                   	push   edi
c0011ee5:	56                   	push   esi
c0011ee6:	53                   	push   ebx
c0011ee7:	83 ec 68             	sub    esp,0x68
c0011eea:	8b 35 70 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023770
c0011ef0:	68 14 01 00 00       	push   0x114
c0011ef5:	e8 bf 58 ff ff       	call   c00077b9 <malloc>
c0011efa:	83 c4 0c             	add    esp,0xc
c0011efd:	89 c3                	mov    ebx,eax
c0011eff:	56                   	push   esi
c0011f00:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011f04:	50                   	push   eax
c0011f05:	e8 44 8b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011f0a:	5e                   	pop    esi
c0011f0b:	5f                   	pop    edi
c0011f0c:	6a 01                	push   0x1
c0011f0e:	53                   	push   ebx
c0011f0f:	e8 fa 8b ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	85 c0                	test   eax,eax
c0011f19:	74 0a                	je     c0011f25 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011f1b:	83 ec 0c             	sub    esp,0xc
c0011f1e:	68 a2 e3 01 c0       	push   0xc001e3a2
c0011f23:	eb 34                	jmp    c0011f59 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011f25:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	6a 34                	push   0x34
c0011f32:	e8 82 58 ff ff       	call   c00077b9 <malloc>
c0011f37:	59                   	pop    ecx
c0011f38:	89 c7                	mov    edi,eax
c0011f3a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011f3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f40:	56                   	push   esi
c0011f41:	57                   	push   edi
c0011f42:	6a 00                	push   0x0
c0011f44:	6a 34                	push   0x34
c0011f46:	53                   	push   ebx
c0011f47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f4a:	83 c4 20             	add    esp,0x20
c0011f4d:	85 c0                	test   eax,eax
c0011f4f:	74 17                	je     c0011f68 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f51:	83 ec 0c             	sub    esp,0xc
c0011f54:	68 b9 e3 01 c0       	push   0xc001e3b9
c0011f59:	e8 dd e1 ff ff       	call   c001013b <KePanic(char const*)>
c0011f5e:	83 c4 10             	add    esp,0x10
c0011f61:	31 c0                	xor    eax,eax
c0011f63:	e9 31 02 00 00       	jmp    c0012199 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011f68:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011f6e:	75 e1                	jne    c0011f51 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f70:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011f73:	85 c0                	test   eax,eax
c0011f75:	74 da                	je     c0011f51 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f77:	52                   	push   edx
c0011f78:	31 d2                	xor    edx,edx
c0011f7a:	52                   	push   edx
c0011f7b:	50                   	push   eax
c0011f7c:	53                   	push   ebx
c0011f7d:	e8 4a 8c ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0011f82:	83 c4 10             	add    esp,0x10
c0011f85:	85 c0                	test   eax,eax
c0011f87:	75 c8                	jne    c0011f51 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f90:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f94:	31 ed                	xor    ebp,ebp
c0011f96:	0f af c2             	imul   eax,edx
c0011f99:	50                   	push   eax
c0011f9a:	e8 1a 58 ff ff       	call   c00077b9 <malloc>
c0011f9f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011fa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011fa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011fac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011fb0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011fb4:	0f af c2             	imul   eax,edx
c0011fb7:	99                   	cdq    
c0011fb8:	52                   	push   edx
c0011fb9:	50                   	push   eax
c0011fba:	53                   	push   ebx
c0011fbb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fbe:	83 c4 20             	add    esp,0x20
c0011fc1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011fc9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011fd1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011fd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fe1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011fe5:	0f 86 aa 00 00 00    	jbe    c0012095 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011feb:	0f b7 f5             	movzx  esi,bp
c0011fee:	6b f6 28             	imul   esi,esi,0x28
c0011ff1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011ff5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ffc:	50                   	push   eax
c0011ffd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012001:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012005:	8b 16                	mov    edx,DWORD PTR [esi]
c0012007:	6b c0 28             	imul   eax,eax,0x28
c001200a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001200e:	89 d0                	mov    eax,edx
c0012010:	31 d2                	xor    edx,edx
c0012012:	52                   	push   edx
c0012013:	50                   	push   eax
c0012014:	53                   	push   ebx
c0012015:	e8 b2 8b ff ff       	call   c000abcc <File::seek(unsigned long long)>
c001201a:	83 c4 0c             	add    esp,0xc
c001201d:	6a 20                	push   0x20
c001201f:	6a 00                	push   0x0
c0012021:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012025:	52                   	push   edx
c0012026:	e8 a5 e4 fe ff       	call   c00004d0 <memset>
c001202b:	58                   	pop    eax
c001202c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001202e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012032:	51                   	push   ecx
c0012033:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012037:	52                   	push   edx
c0012038:	6a 00                	push   0x0
c001203a:	6a 1f                	push   0x1f
c001203c:	53                   	push   ebx
c001203d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012040:	83 c4 18             	add    esp,0x18
c0012043:	68 d0 e3 01 c0       	push   0xc001e3d0
c0012048:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001204c:	52                   	push   edx
c001204d:	e8 8e e6 fe ff       	call   c00006e0 <strcmp>
c0012052:	83 c4 10             	add    esp,0x10
c0012055:	85 c0                	test   eax,eax
c0012057:	75 0f                	jne    c0012068 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012059:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001205c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012060:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012068:	50                   	push   eax
c0012069:	50                   	push   eax
c001206a:	68 d8 e3 01 c0       	push   0xc001e3d8
c001206f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012073:	50                   	push   eax
c0012074:	e8 67 e6 fe ff       	call   c00006e0 <strcmp>
c0012079:	83 c4 10             	add    esp,0x10
c001207c:	85 c0                	test   eax,eax
c001207e:	75 0f                	jne    c001208f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012080:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012083:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012087:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001208b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001208f:	45                   	inc    ebp
c0012090:	e9 4c ff ff ff       	jmp    c0011fe1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012095:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001209a:	75 10                	jne    c00120ac <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001209c:	83 ec 0c             	sub    esp,0xc
c001209f:	68 e0 e3 01 c0       	push   0xc001e3e0
c00120a4:	e8 92 e0 ff ff       	call   c001013b <KePanic(char const*)>
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00120b1:	75 10                	jne    c00120c3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	68 e0 e3 01 c0       	push   0xc001e3e0
c00120bb:	e8 7b e0 ff ff       	call   c001013b <KePanic(char const*)>
c00120c0:	83 c4 10             	add    esp,0x10
c00120c3:	31 d2                	xor    edx,edx
c00120c5:	50                   	push   eax
c00120c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ca:	52                   	push   edx
c00120cb:	50                   	push   eax
c00120cc:	53                   	push   ebx
c00120cd:	e8 fa 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00120d2:	5a                   	pop    edx
c00120d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120d7:	e8 dd 56 ff ff       	call   c00077b9 <malloc>
c00120dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120e4:	31 c9                	xor    ecx,ecx
c00120e6:	5e                   	pop    esi
c00120e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120e9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00120ed:	55                   	push   ebp
c00120ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120f2:	51                   	push   ecx
c00120f3:	52                   	push   edx
c00120f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120f8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00120fc:	53                   	push   ebx
c00120fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012100:	83 c4 14             	add    esp,0x14
c0012103:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012107:	e8 ad 56 ff ff       	call   c00077b9 <malloc>
c001210c:	89 c6                	mov    esi,eax
c001210e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012110:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012113:	56                   	push   esi
c0012114:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012118:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001211c:	51                   	push   ecx
c001211d:	52                   	push   edx
c001211e:	53                   	push   ebx
c001211f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012122:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012126:	8b 15 20 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023720
c001212c:	83 c4 1c             	add    esp,0x1c
c001212f:	c1 e8 04             	shr    eax,0x4
c0012132:	89 04 95 a0 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdca60],eax
c0012139:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001213d:	31 d2                	xor    edx,edx
c001213f:	52                   	push   edx
c0012140:	50                   	push   eax
c0012141:	53                   	push   ebx
c0012142:	e8 85 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012147:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012149:	31 d2                	xor    edx,edx
c001214b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001214e:	56                   	push   esi
c001214f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012153:	52                   	push   edx
c0012154:	50                   	push   eax
c0012155:	53                   	push   ebx
c0012156:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012159:	83 c4 14             	add    esp,0x14
c001215c:	53                   	push   ebx
c001215d:	e8 0a 8a ff ff       	call   c000ab6c <File::close()>
c0012162:	5d                   	pop    ebp
c0012163:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012167:	e8 5d 56 ff ff       	call   c00077c9 <free>
c001216c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001216f:	e8 55 56 ff ff       	call   c00077c9 <free>
c0012174:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c0012179:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001217d:	8d 50 01             	lea    edx,[eax+0x1]
c0012180:	89 0c 85 a0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc960],ecx
c0012187:	89 34 85 20 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9e0],esi
c001218e:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c0012194:	83 c4 10             	add    esp,0x10
c0012197:	b0 01                	mov    al,0x1
c0012199:	83 c4 5c             	add    esp,0x5c
c001219c:	5b                   	pop    ebx
c001219d:	5e                   	pop    esi
c001219e:	5f                   	pop    edi
c001219f:	5d                   	pop    ebp
c00121a0:	c3                   	ret    

c00121a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00121a1:	55                   	push   ebp
c00121a2:	57                   	push   edi
c00121a3:	56                   	push   esi
c00121a4:	53                   	push   ebx
c00121a5:	81 ec 68 03 00 00    	sub    esp,0x368
c00121ab:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00121b2:	8b 1d 70 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023770
c00121b8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00121bc:	68 14 01 00 00       	push   0x114
c00121c1:	e8 f3 55 ff ff       	call   c00077b9 <malloc>
c00121c6:	83 c4 0c             	add    esp,0xc
c00121c9:	89 c5                	mov    ebp,eax
c00121cb:	53                   	push   ebx
c00121cc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00121d3:	50                   	push   eax
c00121d4:	e8 75 88 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00121d9:	5e                   	pop    esi
c00121da:	5f                   	pop    edi
c00121db:	6a 01                	push   0x1
c00121dd:	55                   	push   ebp
c00121de:	e8 2b 89 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	85 c0                	test   eax,eax
c00121e8:	0f 85 a7 06 00 00    	jne    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121ee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	6a 34                	push   0x34
c00121fb:	e8 b9 55 ff ff       	call   c00077b9 <malloc>
c0012200:	5b                   	pop    ebx
c0012201:	89 c7                	mov    edi,eax
c0012203:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012207:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001220a:	53                   	push   ebx
c001220b:	57                   	push   edi
c001220c:	6a 00                	push   0x0
c001220e:	6a 34                	push   0x34
c0012210:	55                   	push   ebp
c0012211:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012214:	83 c4 20             	add    esp,0x20
c0012217:	85 c0                	test   eax,eax
c0012219:	0f 85 76 06 00 00    	jne    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001221f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012225:	0f 85 6a 06 00 00    	jne    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001222b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001222e:	85 c0                	test   eax,eax
c0012230:	0f 84 5f 06 00 00    	je     c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012236:	31 d2                	xor    edx,edx
c0012238:	51                   	push   ecx
c0012239:	52                   	push   edx
c001223a:	50                   	push   eax
c001223b:	55                   	push   ebp
c001223c:	e8 8b 89 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012241:	83 c4 10             	add    esp,0x10
c0012244:	85 c0                	test   eax,eax
c0012246:	0f 85 49 06 00 00    	jne    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001224c:	83 ec 0c             	sub    esp,0xc
c001224f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012252:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012256:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001225a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001225e:	0f af c2             	imul   eax,edx
c0012261:	50                   	push   eax
c0012262:	e8 52 55 ff ff       	call   c00077b9 <malloc>
c0012267:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001226a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001226e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012271:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012275:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012279:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001227d:	0f af c2             	imul   eax,edx
c0012280:	99                   	cdq    
c0012281:	52                   	push   edx
c0012282:	50                   	push   eax
c0012283:	55                   	push   ebp
c0012284:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012287:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001228a:	83 c4 20             	add    esp,0x20
c001228d:	85 c0                	test   eax,eax
c001228f:	0f 84 00 06 00 00    	je     c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012295:	52                   	push   edx
c0012296:	31 d2                	xor    edx,edx
c0012298:	52                   	push   edx
c0012299:	50                   	push   eax
c001229a:	55                   	push   ebp
c001229b:	e8 2c 89 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00122a0:	83 c4 10             	add    esp,0x10
c00122a3:	85 c0                	test   eax,eax
c00122a5:	0f 85 ea 05 00 00    	jne    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122ab:	83 ec 0c             	sub    esp,0xc
c00122ae:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122b2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122b6:	31 f6                	xor    esi,esi
c00122b8:	0f af c2             	imul   eax,edx
c00122bb:	50                   	push   eax
c00122bc:	e8 f8 54 ff ff       	call   c00077b9 <malloc>
c00122c1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00122c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122cf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122d3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122d7:	0f af c2             	imul   eax,edx
c00122da:	99                   	cdq    
c00122db:	52                   	push   edx
c00122dc:	50                   	push   eax
c00122dd:	55                   	push   ebp
c00122de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122e1:	83 c4 20             	add    esp,0x20
c00122e4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00122e8:	0f 86 8a 00 00 00    	jbe    c0012378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00122ee:	0f b7 de             	movzx  ebx,si
c00122f1:	c1 e3 05             	shl    ebx,0x5
c00122f4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00122f8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00122fb:	75 75                	jne    c0012372 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00122fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012300:	31 d2                	xor    edx,edx
c0012302:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012306:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001230d:	50                   	push   eax
c001230e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012311:	52                   	push   edx
c0012312:	50                   	push   eax
c0012313:	55                   	push   ebp
c0012314:	e8 b3 88 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	85 c0                	test   eax,eax
c001231e:	0f 85 71 05 00 00    	jne    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012324:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001232b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001232e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012332:	31 d2                	xor    edx,edx
c0012334:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012338:	83 ec 0c             	sub    esp,0xc
c001233b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001233f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012346:	50                   	push   eax
c0012347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001234b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001234f:	52                   	push   edx
c0012350:	50                   	push   eax
c0012351:	55                   	push   ebp
c0012352:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012355:	83 c4 1c             	add    esp,0x1c
c0012358:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001235b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001235e:	50                   	push   eax
c001235f:	6a 00                	push   0x0
c0012361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012365:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012369:	50                   	push   eax
c001236a:	e8 61 e1 fe ff       	call   c00004d0 <memset>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	46                   	inc    esi
c0012373:	e9 6c ff ff ff       	jmp    c00122e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012378:	53                   	push   ebx
c0012379:	31 db                	xor    ebx,ebx
c001237b:	68 00 01 00 00       	push   0x100
c0012380:	6a 00                	push   0x0
c0012382:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012386:	50                   	push   eax
c0012387:	e8 44 e1 fe ff       	call   c00004d0 <memset>
c001238c:	83 c4 0c             	add    esp,0xc
c001238f:	68 00 01 00 00       	push   0x100
c0012394:	6a 00                	push   0x0
c0012396:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001239d:	50                   	push   eax
c001239e:	e8 2d e1 fe ff       	call   c00004d0 <memset>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00123b6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00123be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123ce:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00123d2:	0f 86 30 01 00 00    	jbe    c0012508 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00123d8:	0f b7 f3             	movzx  esi,bx
c00123db:	6b f6 28             	imul   esi,esi,0x28
c00123de:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00123e2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00123e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123e9:	52                   	push   edx
c00123ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00123ee:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00123f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00123f4:	6b d2 28             	imul   edx,edx,0x28
c00123f7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00123fb:	31 d2                	xor    edx,edx
c00123fd:	52                   	push   edx
c00123fe:	50                   	push   eax
c00123ff:	55                   	push   ebp
c0012400:	e8 c7 87 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012405:	83 c4 0c             	add    esp,0xc
c0012408:	6a 20                	push   0x20
c001240a:	6a 00                	push   0x0
c001240c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012413:	51                   	push   ecx
c0012414:	e8 b7 e0 fe ff       	call   c00004d0 <memset>
c0012419:	59                   	pop    ecx
c001241a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001241d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012421:	52                   	push   edx
c0012422:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012429:	51                   	push   ecx
c001242a:	6a 00                	push   0x0
c001242c:	6a 1f                	push   0x1f
c001242e:	55                   	push   ebp
c001242f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012432:	83 c4 1c             	add    esp,0x1c
c0012435:	6a 09                	push   0x9
c0012437:	68 fa e3 01 c0       	push   0xc001e3fa
c001243c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012443:	51                   	push   ecx
c0012444:	e8 47 df fe ff       	call   c0000390 <memcmp>
c0012449:	83 c4 10             	add    esp,0x10
c001244c:	85 c0                	test   eax,eax
c001244e:	75 21                	jne    c0012471 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012454:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012458:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001245c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012460:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012463:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001246a:	89 d0                	mov    eax,edx
c001246c:	40                   	inc    eax
c001246d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012471:	50                   	push   eax
c0012472:	6a 09                	push   0x9
c0012474:	68 04 e4 01 c0       	push   0xc001e404
c0012479:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012480:	50                   	push   eax
c0012481:	e8 0a df fe ff       	call   c0000390 <memcmp>
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	85 c0                	test   eax,eax
c001248b:	75 21                	jne    c00124ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001248d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012491:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012495:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012499:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001249d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124a0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124a7:	89 d0                	mov    eax,edx
c00124a9:	40                   	inc    eax
c00124aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124ae:	50                   	push   eax
c00124af:	50                   	push   eax
c00124b0:	68 d0 e3 01 c0       	push   0xc001e3d0
c00124b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124bc:	50                   	push   eax
c00124bd:	e8 1e e2 fe ff       	call   c00006e0 <strcmp>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	85 c0                	test   eax,eax
c00124c7:	75 0f                	jne    c00124d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00124c9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124d8:	50                   	push   eax
c00124d9:	50                   	push   eax
c00124da:	68 d8 e3 01 c0       	push   0xc001e3d8
c00124df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124e6:	50                   	push   eax
c00124e7:	e8 f4 e1 fe ff       	call   c00006e0 <strcmp>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	85 c0                	test   eax,eax
c00124f1:	75 0f                	jne    c0012502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00124f3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00124fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012502:	43                   	inc    ebx
c0012503:	e9 c6 fe ff ff       	jmp    c00123ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012508:	31 d2                	xor    edx,edx
c001250a:	50                   	push   eax
c001250b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001250f:	52                   	push   edx
c0012510:	50                   	push   eax
c0012511:	55                   	push   ebp
c0012512:	e8 b5 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012517:	58                   	pop    eax
c0012518:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001251c:	e8 98 52 ff ff       	call   c00077b9 <malloc>
c0012521:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012524:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012528:	31 d2                	xor    edx,edx
c001252a:	58                   	pop    eax
c001252b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001252f:	53                   	push   ebx
c0012530:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012534:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012538:	52                   	push   edx
c0012539:	50                   	push   eax
c001253a:	55                   	push   ebp
c001253b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001253e:	83 c4 14             	add    esp,0x14
c0012541:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012545:	e8 6f 52 ff ff       	call   c00077b9 <malloc>
c001254a:	31 d2                	xor    edx,edx
c001254c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012550:	83 c4 0c             	add    esp,0xc
c0012553:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012557:	52                   	push   edx
c0012558:	50                   	push   eax
c0012559:	55                   	push   ebp
c001255a:	e8 6d 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c001255f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012562:	31 d2                	xor    edx,edx
c0012564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012567:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001256b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256f:	52                   	push   edx
c0012570:	50                   	push   eax
c0012571:	55                   	push   ebp
c0012572:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012575:	83 c4 20             	add    esp,0x20
c0012578:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012580:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012584:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012588:	0f 84 0b 03 00 00    	je     c0012899 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001258e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012595:	31 d2                	xor    edx,edx
c0012597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001259b:	c1 e8 03             	shr    eax,0x3
c001259e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00125a2:	51                   	push   ecx
c00125a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125a7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00125ab:	52                   	push   edx
c00125ac:	50                   	push   eax
c00125ad:	55                   	push   ebp
c00125ae:	e8 19 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00125b3:	5b                   	pop    ebx
c00125b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00125bf:	e8 f5 51 ff ff       	call   c00077b9 <malloc>
c00125c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125cb:	31 d2                	xor    edx,edx
c00125cd:	5e                   	pop    esi
c00125ce:	8d 44 24 58          	lea    eax,[esp+0x58]
c00125d2:	50                   	push   eax
c00125d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125db:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00125e2:	52                   	push   edx
c00125e3:	50                   	push   eax
c00125e4:	55                   	push   ebp
c00125e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125e8:	83 c4 20             	add    esp,0x20
c00125eb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00125f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125f7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00125fb:	0f 8d 7c 02 00 00    	jge    c001287d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012601:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012605:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012609:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001260e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012611:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012619:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001261d:	89 d8                	mov    eax,ebx
c001261f:	c1 e8 08             	shr    eax,0x8
c0012622:	89 c6                	mov    esi,eax
c0012624:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012628:	c1 e6 04             	shl    esi,0x4
c001262b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001262f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012632:	85 d2                	test   edx,edx
c0012634:	0f 85 bf 00 00 00    	jne    c00126f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012641:	03 06                	add    eax,DWORD PTR [esi]
c0012643:	50                   	push   eax
c0012644:	e8 4b f8 ff ff       	call   c0011e94 <Thr::getAddressOfKernelSymbol(char const*)>
c0012649:	83 c4 10             	add    esp,0x10
c001264c:	89 c2                	mov    edx,eax
c001264e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012653:	85 c0                	test   eax,eax
c0012655:	0f 85 9e 00 00 00    	jne    c00126f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001265b:	83 ec 0c             	sub    esp,0xc
c001265e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012662:	03 06                	add    eax,DWORD PTR [esi]
c0012664:	50                   	push   eax
c0012665:	e8 22 dc ff ff       	call   c001028c <KeResolveCompatibilitySymbol(char*)>
c001266a:	83 c4 10             	add    esp,0x10
c001266d:	89 c2                	mov    edx,eax
c001266f:	85 c0                	test   eax,eax
c0012671:	0f 85 82 00 00 00    	jne    c00126f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012677:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001267b:	50                   	push   eax
c001267c:	50                   	push   eax
c001267d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012681:	03 06                	add    eax,DWORD PTR [esi]
c0012683:	50                   	push   eax
c0012684:	68 0e e4 01 c0       	push   0xc001e40e
c0012689:	e8 4a 7e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001268e:	58                   	pop    eax
c001268f:	5a                   	pop    edx
c0012690:	68 28 e4 01 c0       	push   0xc001e428
c0012695:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001269c:	50                   	push   eax
c001269d:	e8 5e df fe ff       	call   c0000600 <strcpy>
c00126a2:	59                   	pop    ecx
c00126a3:	58                   	pop    eax
c00126a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126a8:	03 06                	add    eax,DWORD PTR [esi]
c00126aa:	50                   	push   eax
c00126ab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126b2:	50                   	push   eax
c00126b3:	e8 08 e1 fe ff       	call   c00007c0 <strcat>
c00126b8:	58                   	pop    eax
c00126b9:	5a                   	pop    edx
c00126ba:	68 be e4 01 c0       	push   0xc001e4be
c00126bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126c6:	50                   	push   eax
c00126c7:	e8 f4 e0 fe ff       	call   c00007c0 <strcat>
c00126cc:	83 c4 10             	add    esp,0x10
c00126cf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126d4:	0f 84 5d 01 00 00    	je     c0012837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00126da:	83 ec 0c             	sub    esp,0xc
c00126dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126e4:	50                   	push   eax
c00126e5:	e8 51 da ff ff       	call   c001013b <KePanic(char const*)>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00126f1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00126f5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00126f9:	80 fb 01             	cmp    bl,0x1
c00126fc:	0f 85 88 00 00 00    	jne    c001278a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012702:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012709:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001270d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012711:	01 ce                	add    esi,ecx
c0012713:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012719:	0f 94 c0             	sete   al
c001271c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012722:	0f 94 c3             	sete   bl
c0012725:	09 c3                	or     ebx,eax
c0012727:	8b 06                	mov    eax,DWORD PTR [esi]
c0012729:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001272e:	74 41                	je     c0012771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012730:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012733:	84 db                	test   bl,bl
c0012735:	75 15                	jne    c001274c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012737:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001273b:	66 83 f8 0c          	cmp    ax,0xc
c001273f:	76 05                	jbe    c0012746 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012741:	b8 0c 00 00 00       	mov    eax,0xc
c0012746:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001274a:	76 37                	jbe    c0012783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001274c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012750:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012755:	0f 84 dc 00 00 00    	je     c0012837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	68 3f e4 01 c0       	push   0xc001e43f
c0012763:	e8 d3 d9 ff ff       	call   c001013b <KePanic(char const*)>
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001276f:	eb 12                	jmp    c0012783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012771:	01 c1                	add    ecx,eax
c0012773:	84 db                	test   bl,bl
c0012775:	75 0c                	jne    c0012783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012777:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001277b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001277f:	77 02                	ja     c0012783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012781:	01 d1                	add    ecx,edx
c0012783:	89 0e                	mov    DWORD PTR [esi],ecx
c0012785:	e9 ea 00 00 00       	jmp    c0012874 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001278a:	80 fb 02             	cmp    bl,0x2
c001278d:	75 7c                	jne    c001280b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001278f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012796:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001279a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001279e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00127a4:	74 20                	je     c00127c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127a6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00127ac:	74 18                	je     c00127c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127b2:	b9 0a 00 00 00       	mov    ecx,0xa
c00127b7:	66 83 f8 0e          	cmp    ax,0xe
c00127bb:	77 03                	ja     c00127c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00127bd:	8d 48 fc             	lea    ecx,[eax-0x4]
c00127c0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00127c4:	76 1f                	jbe    c00127e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00127c6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00127ca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127cf:	74 66                	je     c0012837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127d1:	83 ec 0c             	sub    esp,0xc
c00127d4:	68 5b e4 01 c0       	push   0xc001e45b
c00127d9:	e8 5d d9 ff ff       	call   c001013b <KePanic(char const*)>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00127e7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00127ec:	74 13                	je     c0012801 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00127ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00127f2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00127f9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00127fd:	01 c8                	add    eax,ecx
c00127ff:	eb 04                	jmp    c0012805 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012801:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012805:	01 c2                	add    edx,eax
c0012807:	89 16                	mov    DWORD PTR [esi],edx
c0012809:	eb 69                	jmp    c0012874 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001280b:	0f b6 db             	movzx  ebx,bl
c001280e:	50                   	push   eax
c001280f:	50                   	push   eax
c0012810:	53                   	push   ebx
c0012811:	68 77 e4 01 c0       	push   0xc001e477
c0012816:	e8 bd 7c ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001281b:	83 c4 10             	add    esp,0x10
c001281e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012823:	74 12                	je     c0012837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012825:	83 ec 0c             	sub    esp,0xc
c0012828:	68 82 e4 01 c0       	push   0xc001e482
c001282d:	e8 09 d9 ff ff       	call   c001013b <KePanic(char const*)>
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	eb 3d                	jmp    c0012874 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012837:	83 ec 0c             	sub    esp,0xc
c001283a:	55                   	push   ebp
c001283b:	e8 2c 83 ff ff       	call   c000ab6c <File::close()>
c0012840:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012843:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012846:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012849:	59                   	pop    ecx
c001284a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001284e:	e8 76 4f ff ff       	call   c00077c9 <free>
c0012853:	5b                   	pop    ebx
c0012854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012858:	e8 6c 4f ff ff       	call   c00077c9 <free>
c001285d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012860:	e8 64 4f ff ff       	call   c00077c9 <free>
c0012865:	5e                   	pop    esi
c0012866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001286a:	e8 5a 4f ff ff       	call   c00077c9 <free>
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	eb 21                	jmp    c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012874:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012878:	e9 76 fd ff ff       	jmp    c00125f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001287d:	83 ec 0c             	sub    esp,0xc
c0012880:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012884:	e8 40 4f ff ff       	call   c00077c9 <free>
c0012889:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	e9 eb fc ff ff       	jmp    c0012580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012895:	31 c0                	xor    eax,eax
c0012897:	eb 33                	jmp    c00128cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012899:	83 ec 0c             	sub    esp,0xc
c001289c:	55                   	push   ebp
c001289d:	e8 ca 82 ff ff       	call   c000ab6c <File::close()>
c00128a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00128ab:	58                   	pop    eax
c00128ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128b0:	e8 14 4f ff ff       	call   c00077c9 <free>
c00128b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128b8:	e8 0c 4f ff ff       	call   c00077c9 <free>
c00128bd:	5a                   	pop    edx
c00128be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c2:	e8 02 4f ff ff       	call   c00077c9 <free>
c00128c7:	83 c4 10             	add    esp,0x10
c00128ca:	b0 01                	mov    al,0x1
c00128cc:	81 c4 5c 03 00 00    	add    esp,0x35c
c00128d2:	5b                   	pop    ebx
c00128d3:	5e                   	pop    esi
c00128d4:	5f                   	pop    edi
c00128d5:	5d                   	pop    ebp
c00128d6:	c3                   	ret    

c00128d7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00128d7:	56                   	push   esi
c00128d8:	31 d2                	xor    edx,edx
c00128da:	53                   	push   ebx
c00128db:	8b 1d 80 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f80
c00128e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128e5:	39 d3                	cmp    ebx,edx
c00128e7:	7e 1b                	jle    c0012904 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00128e9:	8b 04 95 a0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce60]
c00128f0:	39 c8                	cmp    eax,ecx
c00128f2:	77 0d                	ja     c0012901 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00128f4:	8b 34 95 a0 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd060]
c00128fb:	01 c6                	add    esi,eax
c00128fd:	39 ce                	cmp    esi,ecx
c00128ff:	77 05                	ja     c0012906 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012901:	42                   	inc    edx
c0012902:	eb e1                	jmp    c00128e5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012904:	31 c0                	xor    eax,eax
c0012906:	5b                   	pop    ebx
c0012907:	5e                   	pop    esi
c0012908:	c3                   	ret    

c0012909 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012909:	53                   	push   ebx
c001290a:	31 c0                	xor    eax,eax
c001290c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012910:	8b 1d 80 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f80
c0012916:	39 c3                	cmp    ebx,eax
c0012918:	7e 22                	jle    c001293c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001291a:	8b 14 85 a0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce60]
c0012921:	39 ca                	cmp    edx,ecx
c0012923:	77 14                	ja     c0012939 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012925:	03 14 85 a0 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd060]
c001292c:	39 ca                	cmp    edx,ecx
c001292e:	76 09                	jbe    c0012939 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012930:	8b 04 85 a0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc60]
c0012937:	eb 05                	jmp    c001293e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012939:	40                   	inc    eax
c001293a:	eb da                	jmp    c0012916 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001293c:	31 c0                	xor    eax,eax
c001293e:	5b                   	pop    ebx
c001293f:	c3                   	ret    

c0012940 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012940:	53                   	push   ebx
c0012941:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012945:	53                   	push   ebx
c0012946:	e8 8c ff ff ff       	call   c00128d7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001294b:	5a                   	pop    edx
c001294c:	31 d2                	xor    edx,edx
c001294e:	85 c0                	test   eax,eax
c0012950:	74 04                	je     c0012956 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012952:	89 da                	mov    edx,ebx
c0012954:	29 c2                	sub    edx,eax
c0012956:	89 d0                	mov    eax,edx
c0012958:	5b                   	pop    ebx
c0012959:	c3                   	ret    

c001295a <Thr::loadDLL(char const*, bool)>:
c001295a:	55                   	push   ebp
c001295b:	57                   	push   edi
c001295c:	56                   	push   esi
c001295d:	53                   	push   ebx
c001295e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012964:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001296b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012972:	56                   	push   esi
c0012973:	68 9a e4 01 c0       	push   0xc001e49a
c0012978:	e8 5b 7b ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001297d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012984:	e8 30 4e ff ff       	call   c00077b9 <malloc>
c0012989:	83 c4 0c             	add    esp,0xc
c001298c:	89 c3                	mov    ebx,eax
c001298e:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0012994:	56                   	push   esi
c0012995:	50                   	push   eax
c0012996:	e8 b3 80 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	85 db                	test   ebx,ebx
c00129a0:	75 3c                	jne    c00129de <Thr::loadDLL(char const*, bool)+0x84>
c00129a2:	89 f8                	mov    eax,edi
c00129a4:	84 c0                	test   al,al
c00129a6:	0f 84 d2 01 00 00    	je     c0012b7e <Thr::loadDLL(char const*, bool)+0x224>
c00129ac:	55                   	push   ebp
c00129ad:	55                   	push   ebp
c00129ae:	68 ab e4 01 c0       	push   0xc001e4ab
c00129b3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00129b7:	55                   	push   ebp
c00129b8:	e8 43 dc fe ff       	call   c0000600 <strcpy>
c00129bd:	58                   	pop    eax
c00129be:	5a                   	pop    edx
c00129bf:	56                   	push   esi
c00129c0:	55                   	push   ebp
c00129c1:	e8 fa dd fe ff       	call   c00007c0 <strcat>
c00129c6:	59                   	pop    ecx
c00129c7:	58                   	pop    eax
c00129c8:	68 be e4 01 c0       	push   0xc001e4be
c00129cd:	55                   	push   ebp
c00129ce:	e8 ed dd fe ff       	call   c00007c0 <strcat>
c00129d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00129d6:	e8 60 d7 ff ff       	call   c001013b <KePanic(char const*)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	51                   	push   ecx
c00129df:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00129e3:	50                   	push   eax
c00129e4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00129e8:	50                   	push   eax
c00129e9:	53                   	push   ebx
c00129ea:	e8 cb 83 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 db                	test   ebx,ebx
c00129f4:	74 0c                	je     c0012a02 <Thr::loadDLL(char const*, bool)+0xa8>
c00129f6:	83 ec 0c             	sub    esp,0xc
c00129f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129fb:	53                   	push   ebx
c00129fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012a07:	75 0a                	jne    c0012a13 <Thr::loadDLL(char const*, bool)+0xb9>
c0012a09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a0d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012a11:	75 3c                	jne    c0012a4f <Thr::loadDLL(char const*, bool)+0xf5>
c0012a13:	89 f8                	mov    eax,edi
c0012a15:	84 c0                	test   al,al
c0012a17:	0f 84 49 01 00 00    	je     c0012b66 <Thr::loadDLL(char const*, bool)+0x20c>
c0012a1d:	51                   	push   ecx
c0012a1e:	51                   	push   ecx
c0012a1f:	68 ab e4 01 c0       	push   0xc001e4ab
c0012a24:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012a28:	53                   	push   ebx
c0012a29:	e8 d2 db fe ff       	call   c0000600 <strcpy>
c0012a2e:	5d                   	pop    ebp
c0012a2f:	58                   	pop    eax
c0012a30:	56                   	push   esi
c0012a31:	53                   	push   ebx
c0012a32:	e8 89 dd fe ff       	call   c00007c0 <strcat>
c0012a37:	58                   	pop    eax
c0012a38:	5a                   	pop    edx
c0012a39:	68 be e4 01 c0       	push   0xc001e4be
c0012a3e:	53                   	push   ebx
c0012a3f:	e8 7c dd fe ff       	call   c00007c0 <strcat>
c0012a44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a47:	e8 ef d6 ff ff       	call   c001013b <KePanic(char const*)>
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	52                   	push   edx
c0012a50:	6a 03                	push   0x3
c0012a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a5a:	05 ff 0f 00 00       	add    eax,0xfff
c0012a5f:	83 d2 00             	adc    edx,0x0
c0012a62:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012a66:	50                   	push   eax
c0012a67:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0012a6d:	e8 ac 6f ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0012a72:	59                   	pop    ecx
c0012a73:	89 c3                	mov    ebx,eax
c0012a75:	5d                   	pop    ebp
c0012a76:	50                   	push   eax
c0012a77:	68 76 d2 01 c0       	push   0xc001d276
c0012a7c:	e8 57 7a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012a81:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a84:	e8 b7 da fe ff       	call   c0000540 <strlen>
c0012a89:	8b 2d 80 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f80
c0012a8f:	40                   	inc    eax
c0012a90:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a93:	e8 21 4d ff ff       	call   c00077b9 <malloc>
c0012a98:	89 04 ad a0 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcc60],eax
c0012a9f:	58                   	pop    eax
c0012aa0:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c0012aa5:	5a                   	pop    edx
c0012aa6:	56                   	push   esi
c0012aa7:	ff 34 85 a0 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcc60]
c0012aae:	e8 4d db fe ff       	call   c0000600 <strcpy>
c0012ab3:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c0012ab8:	8d 50 01             	lea    edx,[eax+0x1]
c0012abb:	89 1c 85 a0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce60],ebx
c0012ac2:	89 15 80 2f 02 c0    	mov    DWORD PTR ds:0xc0022f80,edx
c0012ac8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012acc:	83 c4 0c             	add    esp,0xc
c0012acf:	89 14 85 a0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd060],edx
c0012ad6:	6a 01                	push   0x1
c0012ad8:	53                   	push   ebx
c0012ad9:	56                   	push   esi
c0012ada:	e8 c2 f6 ff ff       	call   c00121a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012adf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ae3:	83 c4 10             	add    esp,0x10
c0012ae6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012aeb:	0f 85 89 00 00 00    	jne    c0012b7a <Thr::loadDLL(char const*, bool)+0x220>
c0012af1:	89 f8                	mov    eax,edi
c0012af3:	84 c0                	test   al,al
c0012af5:	74 73                	je     c0012b6a <Thr::loadDLL(char const*, bool)+0x210>
c0012af7:	83 ec 0c             	sub    esp,0xc
c0012afa:	68 c0 e4 01 c0       	push   0xc001e4c0
c0012aff:	e8 37 d6 ff ff       	call   c001013b <KePanic(char const*)>
c0012b04:	83 c4 10             	add    esp,0x10
c0012b07:	eb 61                	jmp    c0012b6a <Thr::loadDLL(char const*, bool)+0x210>
c0012b09:	50                   	push   eax
c0012b0a:	50                   	push   eax
c0012b0b:	89 e8                	mov    eax,ebp
c0012b0d:	c1 e0 0c             	shl    eax,0xc
c0012b10:	01 d8                	add    eax,ebx
c0012b12:	50                   	push   eax
c0012b13:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0012b19:	e8 78 6a ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012b1e:	83 c4 10             	add    esp,0x10
c0012b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b23:	a8 60                	test   al,0x60
c0012b25:	75 11                	jne    c0012b38 <Thr::loadDLL(char const*, bool)+0x1de>
c0012b27:	83 ec 0c             	sub    esp,0xc
c0012b2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b2f:	50                   	push   eax
c0012b30:	e8 fe 4e ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012b35:	83 c4 10             	add    esp,0x10
c0012b38:	45                   	inc    ebp
c0012b39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b41:	05 ff 0f 00 00       	add    eax,0xfff
c0012b46:	bf 00 00 00 00       	mov    edi,0x0
c0012b4b:	83 d2 00             	adc    edx,0x0
c0012b4e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b52:	c1 ea 0c             	shr    edx,0xc
c0012b55:	39 c5                	cmp    ebp,eax
c0012b57:	89 d1                	mov    ecx,edx
c0012b59:	89 f8                	mov    eax,edi
c0012b5b:	19 c8                	sbb    eax,ecx
c0012b5d:	72 aa                	jb     c0012b09 <Thr::loadDLL(char const*, bool)+0x1af>
c0012b5f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b64:	75 18                	jne    c0012b7e <Thr::loadDLL(char const*, bool)+0x224>
c0012b66:	31 db                	xor    ebx,ebx
c0012b68:	eb 14                	jmp    c0012b7e <Thr::loadDLL(char const*, bool)+0x224>
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	68 df e4 01 c0       	push   0xc001e4df
c0012b72:	e8 c4 d5 ff ff       	call   c001013b <KePanic(char const*)>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	31 ed                	xor    ebp,ebp
c0012b7c:	eb bb                	jmp    c0012b39 <Thr::loadDLL(char const*, bool)+0x1df>
c0012b7e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b84:	89 d8                	mov    eax,ebx
c0012b86:	5b                   	pop    ebx
c0012b87:	5e                   	pop    esi
c0012b88:	5f                   	pop    edi
c0012b89:	5d                   	pop    ebp
c0012b8a:	c3                   	ret    

c0012b8b <Thr::executeDLL(unsigned long, void*)>:
c0012b8b:	56                   	push   esi
c0012b8c:	53                   	push   ebx
c0012b8d:	52                   	push   edx
c0012b8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b92:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b96:	85 db                	test   ebx,ebx
c0012b98:	75 10                	jne    c0012baa <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	68 fb e4 01 c0       	push   0xc001e4fb
c0012ba2:	e8 94 d5 ff ff       	call   c001013b <KePanic(char const*)>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	50                   	push   eax
c0012bab:	50                   	push   eax
c0012bac:	53                   	push   ebx
c0012bad:	68 25 e5 01 c0       	push   0xc001e525
c0012bb2:	e8 21 79 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012bb7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012bbb:	89 d8                	mov    eax,ebx
c0012bbd:	83 c4 14             	add    esp,0x14
c0012bc0:	5b                   	pop    ebx
c0012bc1:	5e                   	pop    esi
c0012bc2:	ff e0                	jmp    eax

c0012bc4 <userModeEntryPoint(void*)>:
c0012bc4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012bc9:	48                   	dec    eax
c0012bca:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0012bcf:	75 03                	jne    c0012bd4 <userModeEntryPoint(void*)+0x10>
c0012bd1:	fb                   	sti    
c0012bd2:	66 90                	xchg   ax,ax
c0012bd4:	fb                   	sti    
c0012bd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012bdd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012be3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012be7:	e9 53 d6 fe ff       	jmp    c000023f <goToUsermode>

c0012bec <changeTSS>:
c0012bec:	83 ec 14             	sub    esp,0x14
c0012bef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bf4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012bf7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012bfc:	c1 e2 15             	shl    edx,0x15
c0012bff:	29 d0                	sub    eax,edx
c0012c01:	50                   	push   eax
c0012c02:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0012c07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c0d:	05 7c 11 00 00       	add    eax,0x117c
c0012c12:	50                   	push   eax
c0012c13:	e8 c0 5f ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0012c18:	83 c4 1c             	add    esp,0x1c
c0012c1b:	c3                   	ret    

c0012c1c <switchToThread(ThreadControlBlock*)>:
c0012c1c:	57                   	push   edi
c0012c1d:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0012c22:	56                   	push   esi
c0012c23:	85 c0                	test   eax,eax
c0012c25:	53                   	push   ebx
c0012c26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c2a:	0f 85 90 00 00 00    	jne    c0012cc0 <switchToThread(ThreadControlBlock*)+0xa4>
c0012c30:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012c33:	80 fa ff             	cmp    dl,0xff
c0012c36:	0f 84 80 00 00 00    	je     c0012cbc <switchToThread(ThreadControlBlock*)+0xa0>
c0012c3c:	81 e2 ff 00 00 00    	and    edx,0xff
c0012c42:	b8 00 04 00 00       	mov    eax,0x400
c0012c47:	29 d0                	sub    eax,edx
c0012c49:	d1 f8                	sar    eax,1
c0012c4b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c4e:	66 90                	xchg   ax,ax
c0012c50:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c53:	e8 e5 25 00 00       	call   c001523d <HalQueryPerformanceCounter()>
c0012c58:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0012c5d:	89 15 8c 37 02 c0    	mov    DWORD PTR ds:0xc002378c,edx
c0012c63:	89 c6                	mov    esi,eax
c0012c65:	89 d7                	mov    edi,edx
c0012c67:	2b 35 78 37 02 c0    	sub    esi,DWORD PTR ds:0xc0023778
c0012c6d:	a3 78 37 02 c0       	mov    ds:0xc0023778,eax
c0012c72:	1b 3d 7c 37 02 c0    	sbb    edi,DWORD PTR ds:0xc002377c
c0012c78:	89 35 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,esi
c0012c7e:	89 3d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edi
c0012c84:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c8a:	89 15 7c 37 02 c0    	mov    DWORD PTR ds:0xc002377c,edx
c0012c90:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012c93:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012c96:	01 c6                	add    esi,eax
c0012c98:	11 d7                	adc    edi,edx
c0012c9a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012c9d:	83 ec 0c             	sub    esp,0xc
c0012ca0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012ca3:	53                   	push   ebx
c0012ca4:	e8 ce d5 fe ff       	call   c0000277 <switchToThreadASM>
c0012ca9:	0f 20 c0             	mov    eax,cr0
c0012cac:	83 c8 08             	or     eax,0x8
c0012caf:	0f 22 c0             	mov    cr0,eax
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	5b                   	pop    ebx
c0012cb6:	5e                   	pop    esi
c0012cb7:	5f                   	pop    edi
c0012cb8:	c3                   	ret    
c0012cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cbc:	31 c0                	xor    eax,eax
c0012cbe:	eb 90                	jmp    c0012c50 <switchToThread(ThreadControlBlock*)+0x34>
c0012cc0:	5b                   	pop    ebx
c0012cc1:	c7 05 40 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x1
c0012ccb:	5e                   	pop    esi
c0012ccc:	5f                   	pop    edi
c0012ccd:	c3                   	ret    
c0012cce:	66 90                	xchg   ax,ax

c0012cd0 <Process::addArgs(char**)>:
c0012cd0:	57                   	push   edi
c0012cd1:	56                   	push   esi
c0012cd2:	53                   	push   ebx
c0012cd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cd7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cdb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012ce5:	85 ff                	test   edi,edi
c0012ce7:	74 43                	je     c0012d2c <Process::addArgs(char**)+0x5c>
c0012ce9:	8b 07                	mov    eax,DWORD PTR [edi]
c0012ceb:	85 c0                	test   eax,eax
c0012ced:	74 3d                	je     c0012d2c <Process::addArgs(char**)+0x5c>
c0012cef:	31 db                	xor    ebx,ebx
c0012cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	50                   	push   eax
c0012cf8:	e8 43 d8 fe ff       	call   c0000540 <strlen>
c0012cfd:	40                   	inc    eax
c0012cfe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d01:	e8 b3 4a ff ff       	call   c00077b9 <malloc>
c0012d06:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012d0d:	5a                   	pop    edx
c0012d0e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012d11:	59                   	pop    ecx
c0012d12:	43                   	inc    ebx
c0012d13:	52                   	push   edx
c0012d14:	50                   	push   eax
c0012d15:	e8 e6 d8 fe ff       	call   c0000600 <strcpy>
c0012d1a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012d20:	83 c4 10             	add    esp,0x10
c0012d23:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012d26:	85 c0                	test   eax,eax
c0012d28:	75 ca                	jne    c0012cf4 <Process::addArgs(char**)+0x24>
c0012d2a:	66 90                	xchg   ax,ax
c0012d2c:	5b                   	pop    ebx
c0012d2d:	5e                   	pop    esi
c0012d2e:	5f                   	pop    edi
c0012d2f:	c3                   	ret    

c0012d30 <Process::Process(char const*, Process*, char**)>:
c0012d30:	56                   	push   esi
c0012d31:	53                   	push   ebx
c0012d32:	83 ec 14             	sub    esp,0x14
c0012d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d39:	05 0c 02 00 00       	add    eax,0x20c
c0012d3e:	bb 07 00 00 00       	mov    ebx,0x7
c0012d43:	89 c6                	mov    esi,eax
c0012d45:	8d 76 00             	lea    esi,[esi+0x0]
c0012d48:	85 db                	test   ebx,ebx
c0012d4a:	78 14                	js     c0012d60 <Process::Process(char const*, Process*, char**)+0x30>
c0012d4c:	83 ec 0c             	sub    esp,0xc
c0012d4f:	56                   	push   esi
c0012d50:	e8 07 98 00 00       	call   c001c55c <ThreadControlBlock::ThreadControlBlock()>
c0012d55:	83 c4 10             	add    esp,0x10
c0012d58:	83 c6 5f             	add    esi,0x5f
c0012d5b:	4b                   	dec    ebx
c0012d5c:	eb ea                	jmp    c0012d48 <Process::Process(char const*, Process*, char**)+0x18>
c0012d5e:	66 90                	xchg   ax,ax
c0012d60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d64:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012d6b:	83 ec 0c             	sub    esp,0xc
c0012d6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d72:	e8 b9 d1 ff ff       	call   c000ff30 <Krnl::newProcessEnv(Process*)>
c0012d77:	83 c4 10             	add    esp,0x10
c0012d7a:	89 c2                	mov    edx,eax
c0012d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d80:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d8a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012d93:	a1 68 f4 01 c0       	mov    eax,ds:0xc001f468
c0012d98:	8d 50 01             	lea    edx,[eax+0x1]
c0012d9b:	89 15 68 f4 01 c0    	mov    DWORD PTR ds:0xc001f468,edx
c0012da1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012da5:	89 02                	mov    DWORD PTR [edx],eax
c0012da7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012daf:	83 ec 0c             	sub    esp,0xc
c0012db2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012db6:	e8 fe 49 ff ff       	call   c00077b9 <malloc>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	89 c3                	mov    ebx,eax
c0012dc0:	83 ec 08             	sub    esp,0x8
c0012dc3:	6a 00                	push   0x0
c0012dc5:	53                   	push   ebx
c0012dc6:	e8 fd 6f ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dd2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ddc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012dee:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012df8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dfe:	85 c0                	test   eax,eax
c0012e00:	74 42                	je     c0012e44 <Process::Process(char const*, Process*, char**)+0x114>
c0012e02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e06:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e0c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e16:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e26:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e30:	05 0c 01 00 00       	add    eax,0x10c
c0012e35:	83 ec 08             	sub    esp,0x8
c0012e38:	52                   	push   edx
c0012e39:	50                   	push   eax
c0012e3a:	e8 c1 d7 fe ff       	call   c0000600 <strcpy>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	eb 64                	jmp    c0012ea8 <Process::Process(char const*, Process*, char**)+0x178>
c0012e44:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e53:	e8 61 49 ff ff       	call   c00077b9 <malloc>
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	89 c3                	mov    ebx,eax
c0012e5d:	83 ec 08             	sub    esp,0x8
c0012e60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e64:	53                   	push   ebx
c0012e65:	e8 90 5a ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012e6a:	83 c4 10             	add    esp,0x10
c0012e6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e71:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012e81:	83 ec 0c             	sub    esp,0xc
c0012e84:	50                   	push   eax
c0012e85:	e8 10 53 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012e8a:	83 c4 10             	add    esp,0x10
c0012e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e91:	05 0c 01 00 00       	add    eax,0x10c
c0012e96:	83 ec 08             	sub    esp,0x8
c0012e99:	68 44 e5 01 c0       	push   0xc001e544
c0012e9e:	50                   	push   eax
c0012e9f:	e8 5c d7 fe ff       	call   c0000600 <strcpy>
c0012ea4:	83 c4 10             	add    esp,0x10
c0012ea7:	90                   	nop
c0012ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012eac:	83 c0 0c             	add    eax,0xc
c0012eaf:	83 ec 08             	sub    esp,0x8
c0012eb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eb6:	50                   	push   eax
c0012eb7:	e8 44 d7 fe ff       	call   c0000600 <strcpy>
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	83 ec 08             	sub    esp,0x8
c0012ec2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eca:	e8 01 fe ff ff       	call   c0012cd0 <Process::addArgs(char**)>
c0012ecf:	83 c4 10             	add    esp,0x10
c0012ed2:	83 ec 08             	sub    esp,0x8
c0012ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012edd:	e8 89 ed ff ff       	call   c0011c6b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012ee2:	83 c4 10             	add    esp,0x10
c0012ee5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012ee9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012eed:	83 f0 01             	xor    eax,0x1
c0012ef0:	88 c2                	mov    dl,al
c0012ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ef6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012efc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f00:	25 ff 00 00 00       	and    eax,0xff
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	50                   	push   eax
c0012f09:	68 9c e5 01 c0       	push   0xc001e59c
c0012f0e:	e8 c5 75 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	90                   	nop
c0012f17:	83 c4 14             	add    esp,0x14
c0012f1a:	5b                   	pop    ebx
c0012f1b:	5e                   	pop    esi
c0012f1c:	c3                   	ret    
c0012f1d:	90                   	nop
c0012f1e:	66 90                	xchg   ax,ax

c0012f20 <Process::Process(bool, char const*, Process*, char**)>:
c0012f20:	56                   	push   esi
c0012f21:	53                   	push   ebx
c0012f22:	83 ec 24             	sub    esp,0x24
c0012f25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f29:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f31:	05 0c 02 00 00       	add    eax,0x20c
c0012f36:	bb 07 00 00 00       	mov    ebx,0x7
c0012f3b:	89 c6                	mov    esi,eax
c0012f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f40:	85 db                	test   ebx,ebx
c0012f42:	78 14                	js     c0012f58 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012f44:	83 ec 0c             	sub    esp,0xc
c0012f47:	56                   	push   esi
c0012f48:	e8 0f 96 00 00       	call   c001c55c <ThreadControlBlock::ThreadControlBlock()>
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	83 c6 5f             	add    esi,0x5f
c0012f53:	4b                   	dec    ebx
c0012f54:	eb ea                	jmp    c0012f40 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012f56:	66 90                	xchg   ax,ax
c0012f58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f5c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012f63:	83 ec 0c             	sub    esp,0xc
c0012f66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f6a:	e8 c1 cf ff ff       	call   c000ff30 <Krnl::newProcessEnv(Process*)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	89 c2                	mov    edx,eax
c0012f74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f78:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012f7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f82:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f8b:	a1 68 f4 01 c0       	mov    eax,ds:0xc001f468
c0012f90:	8d 50 01             	lea    edx,[eax+0x1]
c0012f93:	89 15 68 f4 01 c0    	mov    DWORD PTR ds:0xc001f468,edx
c0012f99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f9d:	89 02                	mov    DWORD PTR [edx],eax
c0012f9f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012fae:	e8 06 48 ff ff       	call   c00077b9 <malloc>
c0012fb3:	83 c4 10             	add    esp,0x10
c0012fb6:	89 c3                	mov    ebx,eax
c0012fb8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012fbc:	25 ff 00 00 00       	and    eax,0xff
c0012fc1:	83 ec 08             	sub    esp,0x8
c0012fc4:	50                   	push   eax
c0012fc5:	53                   	push   ebx
c0012fc6:	e8 fd 6d ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c0012fcb:	83 c4 10             	add    esp,0x10
c0012fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fd2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012fd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fdc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012fee:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012ff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ff8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012ffe:	85 c0                	test   eax,eax
c0013000:	74 42                	je     c0013044 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0013002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013006:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001300c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013016:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001301c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013020:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013026:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001302c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013030:	05 0c 01 00 00       	add    eax,0x10c
c0013035:	83 ec 08             	sub    esp,0x8
c0013038:	52                   	push   edx
c0013039:	50                   	push   eax
c001303a:	e8 c1 d5 fe ff       	call   c0000600 <strcpy>
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	eb 64                	jmp    c00130a8 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013044:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001304c:	83 ec 0c             	sub    esp,0xc
c001304f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013053:	e8 61 47 ff ff       	call   c00077b9 <malloc>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	89 c3                	mov    ebx,eax
c001305d:	83 ec 08             	sub    esp,0x8
c0013060:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013064:	53                   	push   ebx
c0013065:	e8 90 58 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013071:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001307b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	50                   	push   eax
c0013085:	e8 10 51 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001308a:	83 c4 10             	add    esp,0x10
c001308d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013091:	05 0c 01 00 00       	add    eax,0x10c
c0013096:	83 ec 08             	sub    esp,0x8
c0013099:	68 44 e5 01 c0       	push   0xc001e544
c001309e:	50                   	push   eax
c001309f:	e8 5c d5 fe ff       	call   c0000600 <strcpy>
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	90                   	nop
c00130a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130ac:	83 c0 0c             	add    eax,0xc
c00130af:	83 ec 08             	sub    esp,0x8
c00130b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00130b6:	50                   	push   eax
c00130b7:	e8 44 d5 fe ff       	call   c0000600 <strcpy>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	83 ec 08             	sub    esp,0x8
c00130c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00130ca:	e8 01 fc ff ff       	call   c0012cd0 <Process::addArgs(char**)>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	90                   	nop
c00130d3:	83 c4 24             	add    esp,0x24
c00130d6:	5b                   	pop    ebx
c00130d7:	5e                   	pop    esi
c00130d8:	c3                   	ret    
c00130d9:	8d 76 00             	lea    esi,[esi+0x0]

c00130dc <taskStartupFunction>:
c00130dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130e1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00130e4:	c3                   	ret    
c00130e5:	90                   	nop
c00130e6:	66 90                	xchg   ax,ax

c00130e8 <Semaphore::Semaphore(int)>:
c00130e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130f0:	89 10                	mov    DWORD PTR [eax],edx
c00130f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00130fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013101:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001310c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013113:	90                   	nop
c0013114:	c3                   	ret    
c0013115:	90                   	nop
c0013116:	66 90                	xchg   ax,ax

c0013118 <Mutex::Mutex()>:
c0013118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001311c:	6a 01                	push   0x1
c001311e:	50                   	push   eax
c001311f:	e8 c4 ff ff ff       	call   c00130e8 <Semaphore::Semaphore(int)>
c0013124:	83 c4 08             	add    esp,0x8
c0013127:	90                   	nop
c0013128:	c3                   	ret    
c0013129:	90                   	nop
c001312a:	66 90                	xchg   ax,ax

c001312c <Process::createThread(void (*)(void*), void*, int)>:
c001312c:	57                   	push   edi
c001312d:	31 c9                	xor    ecx,ecx
c001312f:	56                   	push   esi
c0013130:	53                   	push   ebx
c0013131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013135:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001313c:	89 f2                	mov    edx,esi
c001313e:	66 90                	xchg   ax,ax
c0013140:	31 c0                	xor    eax,eax
c0013142:	66 89 d0             	mov    ax,dx
c0013145:	83 e2 01             	and    edx,0x1
c0013148:	74 12                	je     c001315c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001314a:	d1 f8                	sar    eax,1
c001314c:	41                   	inc    ecx
c001314d:	89 c2                	mov    edx,eax
c001314f:	83 f9 10             	cmp    ecx,0x10
c0013152:	75 ec                	jne    c0013140 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013154:	31 db                	xor    ebx,ebx
c0013156:	89 d8                	mov    eax,ebx
c0013158:	5b                   	pop    ebx
c0013159:	5e                   	pop    esi
c001315a:	5f                   	pop    edi
c001315b:	c3                   	ret    
c001315c:	b8 01 00 00 00       	mov    eax,0x1
c0013161:	d3 e0                	shl    eax,cl
c0013163:	09 c6                	or     esi,eax
c0013165:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013168:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001316f:	01 c0                	add    eax,eax
c0013171:	01 c8                	add    eax,ecx
c0013173:	8d 04 80             	lea    eax,[eax+eax*4]
c0013176:	01 d8                	add    eax,ebx
c0013178:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001317f:	75 0b                	jne    c001318c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013181:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001318b:	90                   	nop
c001318c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013192:	83 ec 08             	sub    esp,0x8
c0013195:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013198:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001319b:	01 c0                	add    eax,eax
c001319d:	01 c8                	add    eax,ecx
c001319f:	8d 3c 80             	lea    edi,[eax+eax*4]
c00131a2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00131a5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00131ab:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00131b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131b5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00131bb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00131c1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00131c8:	89 ca                	mov    edx,ecx
c00131ca:	f7 da                	neg    edx
c00131cc:	c1 e2 15             	shl    edx,0x15
c00131cf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00131d5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00131db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00131df:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00131e9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00131ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131f3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00131f9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013203:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001320d:	53                   	push   ebx
c001320e:	68 64 37 02 c0       	push   0xc0023764
c0013213:	e8 e4 90 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013218:	83 c4 10             	add    esp,0x10
c001321b:	89 d8                	mov    eax,ebx
c001321d:	5b                   	pop    ebx
c001321e:	5e                   	pop    esi
c001321f:	5f                   	pop    edi
c0013220:	c3                   	ret    
c0013221:	90                   	nop
c0013222:	66 90                	xchg   ax,ax

c0013224 <Process::createUserThread()>:
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	68 80 00 00 00       	push   0x80
c001322c:	6a 00                	push   0x0
c001322e:	68 c4 2b 01 c0       	push   0xc0012bc4
c0013233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013237:	50                   	push   eax
c0013238:	e8 ef fe ff ff       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c001323d:	83 c4 1c             	add    esp,0x1c
c0013240:	c3                   	ret    
c0013241:	8d 76 00             	lea    esi,[esi+0x0]

c0013244 <setupMultitasking(void (*)())>:
c0013244:	56                   	push   esi
c0013245:	53                   	push   ebx
c0013246:	53                   	push   ebx
c0013247:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001324b:	eb 13                	jmp    c0013260 <setupMultitasking(void (*)())+0x1c>
c001324d:	8d 76 00             	lea    esi,[esi+0x0]
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	68 64 37 02 c0       	push   0xc0023764
c0013258:	e8 e7 8f 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001325d:	83 c4 10             	add    esp,0x10
c0013260:	83 ec 0c             	sub    esp,0xc
c0013263:	68 64 37 02 c0       	push   0xc0023764
c0013268:	e8 b3 8f 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	84 c0                	test   al,al
c0013272:	74 dc                	je     c0013250 <setupMultitasking(void (*)())+0xc>
c0013274:	83 ec 0c             	sub    esp,0xc
c0013277:	68 1f 07 00 00       	push   0x71f
c001327c:	e8 38 45 ff ff       	call   c00077b9 <malloc>
c0013281:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013288:	89 c3                	mov    ebx,eax
c001328a:	6a 00                	push   0x0
c001328c:	68 48 e5 01 c0       	push   0xc001e548
c0013291:	6a 01                	push   0x1
c0013293:	50                   	push   eax
c0013294:	e8 87 fc ff ff       	call   c0012f20 <Process::Process(bool, char const*, Process*, char**)>
c0013299:	83 c4 14             	add    esp,0x14
c001329c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00132a2:	89 1d 70 37 02 c0    	mov    DWORD PTR ds:0xc0023770,ebx
c00132a8:	50                   	push   eax
c00132a9:	e8 49 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00132ae:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00132b6:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00132c0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00132c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00132c9:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00132d3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00132d9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00132df:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00132e9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00132f3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00132fd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013303:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013309:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013313:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013319:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013323:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013329:	5a                   	pop    edx
c001332a:	59                   	pop    ecx
c001332b:	68 44 e5 01 c0       	push   0xc001e544
c0013330:	50                   	push   eax
c0013331:	e8 ca d2 fe ff       	call   c0000600 <strcpy>
c0013336:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001333d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013341:	83 c4 14             	add    esp,0x14
c0013344:	5b                   	pop    ebx
c0013345:	5e                   	pop    esi
c0013346:	e9 1e cf fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001334b:	90                   	nop

c001334c <schedule()>:
c001334c:	8b 15 44 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023744
c0013352:	85 d2                	test   edx,edx
c0013354:	74 0e                	je     c0013364 <schedule()+0x18>
c0013356:	c7 05 40 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x1
c0013360:	c3                   	ret    
c0013361:	8d 76 00             	lea    esi,[esi+0x0]
c0013364:	53                   	push   ebx
c0013365:	83 ec 14             	sub    esp,0x14
c0013368:	68 64 37 02 c0       	push   0xc0023764
c001336d:	e8 ae 8e 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013372:	83 c4 10             	add    esp,0x10
c0013375:	84 c0                	test   al,al
c0013377:	75 3b                	jne    c00133b4 <schedule()+0x68>
c0013379:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001337e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013381:	4a                   	dec    edx
c0013382:	74 38                	je     c00133bc <schedule()+0x70>
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	68 64 37 02 c0       	push   0xc0023764
c001338c:	e8 ab 8e 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013391:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013398:	89 c3                	mov    ebx,eax
c001339a:	e8 a5 8e 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001339f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00133a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133a9:	e8 6e f8 ff ff       	call   c0012c1c <switchToThread(ThreadControlBlock*)>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	8d 76 00             	lea    esi,[esi+0x0]
c00133b4:	83 c4 08             	add    esp,0x8
c00133b7:	5b                   	pop    ebx
c00133b8:	c3                   	ret    
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00133c3:	83 ec 08             	sub    esp,0x8
c00133c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133cb:	50                   	push   eax
c00133cc:	68 64 37 02 c0       	push   0xc0023764
c00133d1:	e8 26 8f 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	eb a9                	jmp    c0013384 <schedule()+0x38>
c00133db:	90                   	nop

c00133dc <Semaphore::tryAcquire()>:
c00133dc:	53                   	push   ebx
c00133dd:	83 ec 08             	sub    esp,0x8
c00133e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133e4:	fa                   	cli    
c00133e5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00133ea:	8d 50 01             	lea    edx,[eax+0x1]
c00133ed:	89 15 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,edx
c00133f3:	8b 15 44 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023744
c00133f9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00133fc:	89 1d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ebx
c0013402:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013405:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013407:	7c 33                	jl     c001343c <Semaphore::tryAcquire()+0x60>
c0013409:	89 15 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edx
c001340f:	85 d2                	test   edx,edx
c0013411:	75 0d                	jne    c0013420 <Semaphore::tryAcquire()+0x44>
c0013413:	8b 15 40 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023740
c0013419:	85 d2                	test   edx,edx
c001341b:	75 6b                	jne    c0013488 <Semaphore::tryAcquire()+0xac>
c001341d:	8d 76 00             	lea    esi,[esi+0x0]
c0013420:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013425:	85 c0                	test   eax,eax
c0013427:	74 0b                	je     c0013434 <Semaphore::tryAcquire()+0x58>
c0013429:	8d 76 00             	lea    esi,[esi+0x0]
c001342c:	31 c0                	xor    eax,eax
c001342e:	83 c4 08             	add    esp,0x8
c0013431:	5b                   	pop    ebx
c0013432:	c3                   	ret    
c0013433:	90                   	nop
c0013434:	fb                   	sti    
c0013435:	83 c4 08             	add    esp,0x8
c0013438:	5b                   	pop    ebx
c0013439:	c3                   	ret    
c001343a:	66 90                	xchg   ax,ax
c001343c:	43                   	inc    ebx
c001343d:	89 15 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edx
c0013443:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013446:	85 d2                	test   edx,edx
c0013448:	75 22                	jne    c001346c <Semaphore::tryAcquire()+0x90>
c001344a:	8b 0d 40 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023740
c0013450:	85 c9                	test   ecx,ecx
c0013452:	74 18                	je     c001346c <Semaphore::tryAcquire()+0x90>
c0013454:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c001345e:	e8 e9 fe ff ff       	call   c001334c <schedule()>
c0013463:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013468:	48                   	dec    eax
c0013469:	8d 76 00             	lea    esi,[esi+0x0]
c001346c:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013471:	85 c0                	test   eax,eax
c0013473:	75 0b                	jne    c0013480 <Semaphore::tryAcquire()+0xa4>
c0013475:	fb                   	sti    
c0013476:	b0 01                	mov    al,0x1
c0013478:	83 c4 08             	add    esp,0x8
c001347b:	5b                   	pop    ebx
c001347c:	c3                   	ret    
c001347d:	8d 76 00             	lea    esi,[esi+0x0]
c0013480:	b0 01                	mov    al,0x1
c0013482:	83 c4 08             	add    esp,0x8
c0013485:	5b                   	pop    ebx
c0013486:	c3                   	ret    
c0013487:	90                   	nop
c0013488:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013492:	e8 b5 fe ff ff       	call   c001334c <schedule()>
c0013497:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001349c:	48                   	dec    eax
c001349d:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00134a2:	85 c0                	test   eax,eax
c00134a4:	75 86                	jne    c001342c <Semaphore::tryAcquire()+0x50>
c00134a6:	eb 8c                	jmp    c0013434 <Semaphore::tryAcquire()+0x58>

c00134a8 <Semaphore::assertLocked(char const*)>:
c00134a8:	83 ec 0c             	sub    esp,0xc
c00134ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134af:	fa                   	cli    
c00134b0:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00134b6:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00134bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00134be:	89 0d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ecx
c00134c4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00134c6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00134c9:	7c 29                	jl     c00134f4 <Semaphore::assertLocked(char const*)+0x4c>
c00134cb:	90                   	nop
c00134cc:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00134d1:	85 c0                	test   eax,eax
c00134d3:	75 0b                	jne    c00134e0 <Semaphore::assertLocked(char const*)+0x38>
c00134d5:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c00134da:	85 c0                	test   eax,eax
c00134dc:	75 2e                	jne    c001350c <Semaphore::assertLocked(char const*)+0x64>
c00134de:	66 90                	xchg   ax,ax
c00134e0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00134e5:	48                   	dec    eax
c00134e6:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00134eb:	75 03                	jne    c00134f0 <Semaphore::assertLocked(char const*)+0x48>
c00134ed:	fb                   	sti    
c00134ee:	66 90                	xchg   ax,ax
c00134f0:	83 c4 0c             	add    esp,0xc
c00134f3:	c3                   	ret    
c00134f4:	83 ec 0c             	sub    esp,0xc
c00134f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134fb:	52                   	push   edx
c00134fc:	e8 3a cc ff ff       	call   c001013b <KePanic(char const*)>
c0013501:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	48                   	dec    eax
c001350a:	eb c0                	jmp    c00134cc <Semaphore::assertLocked(char const*)+0x24>
c001350c:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013516:	e8 31 fe ff ff       	call   c001334c <schedule()>
c001351b:	eb c3                	jmp    c00134e0 <Semaphore::assertLocked(char const*)+0x38>
c001351d:	8d 76 00             	lea    esi,[esi+0x0]

c0013520 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013520:	83 ec 0c             	sub    esp,0xc
c0013523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013528:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001352c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001352f:	e8 18 fe ff ff       	call   c001334c <schedule()>
c0013534:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013539:	48                   	dec    eax
c001353a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001353f:	75 03                	jne    c0013544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013541:	fb                   	sti    
c0013542:	66 90                	xchg   ax,ax
c0013544:	83 c4 0c             	add    esp,0xc
c0013547:	c3                   	ret    

c0013548 <blockTask(TaskState)>:
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	fa                   	cli    
c001354c:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001355b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001355e:	e8 e9 fd ff ff       	call   c001334c <schedule()>
c0013563:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013568:	48                   	dec    eax
c0013569:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001356e:	75 04                	jne    c0013574 <blockTask(TaskState)+0x2c>
c0013570:	fb                   	sti    
c0013571:	8d 76 00             	lea    esi,[esi+0x0]
c0013574:	83 c4 0c             	add    esp,0xc
c0013577:	c3                   	ret    

c0013578 <waitTask(int, int*, int)>:
c0013578:	83 ec 18             	sub    esp,0x18
c001357b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013580:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013584:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013587:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001358b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013590:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013593:	6a 07                	push   0x7
c0013595:	e8 ae ff ff ff       	call   c0013548 <blockTask(TaskState)>
c001359a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001359f:	83 c4 10             	add    esp,0x10
c00135a2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00135a5:	85 d2                	test   edx,edx
c00135a7:	74 0b                	je     c00135b4 <waitTask(int, int*, int)+0x3c>
c00135a9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00135ac:	89 02                	mov    DWORD PTR [edx],eax
c00135ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b3:	90                   	nop
c00135b4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00135b7:	83 c4 0c             	add    esp,0xc
c00135ba:	c3                   	ret    
c00135bb:	90                   	nop

c00135bc <milliTenthSleepUntil(unsigned int)>:
c00135bc:	83 ec 0c             	sub    esp,0xc
c00135bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c3:	39 05 6c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a6c,eax
c00135c9:	76 05                	jbe    c00135d0 <milliTenthSleepUntil(unsigned int)+0x14>
c00135cb:	90                   	nop
c00135cc:	83 c4 0c             	add    esp,0xc
c00135cf:	c3                   	ret    
c00135d0:	fa                   	cli    
c00135d1:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00135d7:	83 ec 08             	sub    esp,0x8
c00135da:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c00135e0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135e6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00135e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135ef:	52                   	push   edx
c00135f0:	68 58 37 02 c0       	push   0xc0023758
c00135f5:	e8 02 8d 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00135fa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013601:	e8 42 ff ff ff       	call   c0013548 <blockTask(TaskState)>
c0013606:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c001360b:	83 c4 10             	add    esp,0x10
c001360e:	48                   	dec    eax
c001360f:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013614:	85 c0                	test   eax,eax
c0013616:	75 0c                	jne    c0013624 <milliTenthSleepUntil(unsigned int)+0x68>
c0013618:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c001361d:	85 c0                	test   eax,eax
c001361f:	75 17                	jne    c0013638 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013621:	8d 76 00             	lea    esi,[esi+0x0]
c0013624:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013629:	48                   	dec    eax
c001362a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001362f:	75 9b                	jne    c00135cc <milliTenthSleepUntil(unsigned int)+0x10>
c0013631:	fb                   	sti    
c0013632:	83 c4 0c             	add    esp,0xc
c0013635:	c3                   	ret    
c0013636:	66 90                	xchg   ax,ax
c0013638:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013642:	e8 05 fd ff ff       	call   c001334c <schedule()>
c0013647:	eb db                	jmp    c0013624 <milliTenthSleepUntil(unsigned int)+0x68>
c0013649:	8d 76 00             	lea    esi,[esi+0x0]

c001364c <milliTenthSleep(unsigned int)>:
c001364c:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c0013651:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013655:	e9 62 ff ff ff       	jmp    c00135bc <milliTenthSleepUntil(unsigned int)>
c001365a:	66 90                	xchg   ax,ax

c001365c <sleep(unsigned int)>:
c001365c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013660:	8d 04 80             	lea    eax,[eax+eax*4]
c0013663:	8d 04 80             	lea    eax,[eax+eax*4]
c0013666:	8d 04 80             	lea    eax,[eax+eax*4]
c0013669:	8d 04 80             	lea    eax,[eax+eax*4]
c001366c:	c1 e0 04             	shl    eax,0x4
c001366f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013673:	eb d7                	jmp    c001364c <milliTenthSleep(unsigned int)>
c0013675:	90                   	nop
c0013676:	66 90                	xchg   ax,ax

c0013678 <Semaphore::acquire()>:
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001367f:	fa                   	cli    
c0013680:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013685:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001368b:	8d 48 01             	lea    ecx,[eax+0x1]
c001368e:	89 0d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ecx
c0013694:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013697:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013699:	7d 2d                	jge    c00136c8 <Semaphore::acquire()+0x50>
c001369b:	41                   	inc    ecx
c001369c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001369f:	90                   	nop
c00136a0:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00136a5:	85 c0                	test   eax,eax
c00136a7:	75 0b                	jne    c00136b4 <Semaphore::acquire()+0x3c>
c00136a9:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c00136ae:	85 c0                	test   eax,eax
c00136b0:	75 62                	jne    c0013714 <Semaphore::acquire()+0x9c>
c00136b2:	66 90                	xchg   ax,ax
c00136b4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00136b9:	48                   	dec    eax
c00136ba:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00136bf:	75 03                	jne    c00136c4 <Semaphore::acquire()+0x4c>
c00136c1:	fb                   	sti    
c00136c2:	66 90                	xchg   ax,ax
c00136c4:	83 c4 0c             	add    esp,0xc
c00136c7:	c3                   	ret    
c00136c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00136d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00136d7:	85 c9                	test   ecx,ecx
c00136d9:	74 4d                	je     c0013728 <Semaphore::acquire()+0xb0>
c00136db:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00136de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00136e4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00136e7:	90                   	nop
c00136e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00136f3:	68 c4 e5 01 c0       	push   0xc001e5c4
c00136f8:	e8 db 6d ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00136fd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013704:	e8 3f fe ff ff       	call   c0013548 <blockTask(TaskState)>
c0013709:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	48                   	dec    eax
c0013712:	eb 8c                	jmp    c00136a0 <Semaphore::acquire()+0x28>
c0013714:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c001371e:	e8 29 fc ff ff       	call   c001334c <schedule()>
c0013723:	eb 8f                	jmp    c00136b4 <Semaphore::acquire()+0x3c>
c0013725:	8d 76 00             	lea    esi,[esi+0x0]
c0013728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001372d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013730:	eb b6                	jmp    c00136e8 <Semaphore::acquire()+0x70>
c0013732:	66 90                	xchg   ax,ax

c0013734 <taskReturned>:
c0013734:	83 ec 18             	sub    esp,0x18
c0013737:	68 e4 e5 01 c0       	push   0xc001e5e4
c001373c:	e8 fa c9 ff ff       	call   c001013b <KePanic(char const*)>
c0013741:	83 c4 10             	add    esp,0x10
c0013744:	83 ec 0c             	sub    esp,0xc
c0013747:	6a 02                	push   0x2
c0013749:	e8 fa fd ff ff       	call   c0013548 <blockTask(TaskState)>
c001374e:	fa                   	cli    
c001374f:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013755:	e8 f2 fb ff ff       	call   c001334c <schedule()>
c001375a:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001375f:	83 c4 10             	add    esp,0x10
c0013762:	48                   	dec    eax
c0013763:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013768:	85 c0                	test   eax,eax
c001376a:	75 d8                	jne    c0013744 <taskReturned+0x10>
c001376c:	fb                   	sti    
c001376d:	eb d5                	jmp    c0013744 <taskReturned+0x10>
c001376f:	90                   	nop

c0013770 <Thr::processFromPID(int)>:
c0013770:	57                   	push   edi
c0013771:	56                   	push   esi
c0013772:	53                   	push   ebx
c0013773:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013777:	fa                   	cli    
c0013778:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001377e:	83 ec 0c             	sub    esp,0xc
c0013781:	68 64 37 02 c0       	push   0xc0023764
c0013786:	e8 b1 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001378b:	83 c4 10             	add    esp,0x10
c001378e:	89 c7                	mov    edi,eax
c0013790:	eb 16                	jmp    c00137a8 <Thr::processFromPID(int)+0x38>
c0013792:	66 90                	xchg   ax,ax
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	68 64 37 02 c0       	push   0xc0023764
c001379c:	e8 9b 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137a1:	83 c4 10             	add    esp,0x10
c00137a4:	39 f8                	cmp    eax,edi
c00137a6:	74 4c                	je     c00137f4 <Thr::processFromPID(int)+0x84>
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	68 64 37 02 c0       	push   0xc0023764
c00137b0:	e8 87 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137b5:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c00137bc:	89 c3                	mov    ebx,eax
c00137be:	e8 81 8a 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137c3:	58                   	pop    eax
c00137c4:	5a                   	pop    edx
c00137c5:	53                   	push   ebx
c00137c6:	68 64 37 02 c0       	push   0xc0023764
c00137cb:	e8 2c 8b 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00137d3:	83 c4 10             	add    esp,0x10
c00137d6:	39 30                	cmp    DWORD PTR [eax],esi
c00137d8:	75 ba                	jne    c0013794 <Thr::processFromPID(int)+0x24>
c00137da:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00137df:	48                   	dec    eax
c00137e0:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00137e5:	74 09                	je     c00137f0 <Thr::processFromPID(int)+0x80>
c00137e7:	90                   	nop
c00137e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00137eb:	5b                   	pop    ebx
c00137ec:	5e                   	pop    esi
c00137ed:	5f                   	pop    edi
c00137ee:	c3                   	ret    
c00137ef:	90                   	nop
c00137f0:	fb                   	sti    
c00137f1:	eb f5                	jmp    c00137e8 <Thr::processFromPID(int)+0x78>
c00137f3:	90                   	nop
c00137f4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00137f9:	48                   	dec    eax
c00137fa:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00137ff:	75 07                	jne    c0013808 <Thr::processFromPID(int)+0x98>
c0013801:	fb                   	sti    
c0013802:	5b                   	pop    ebx
c0013803:	5e                   	pop    esi
c0013804:	5f                   	pop    edi
c0013805:	c3                   	ret    
c0013806:	66 90                	xchg   ax,ax
c0013808:	5b                   	pop    ebx
c0013809:	31 c0                	xor    eax,eax
c001380b:	5e                   	pop    esi
c001380c:	5f                   	pop    edi
c001380d:	c3                   	ret    
c001380e:	66 90                	xchg   ax,ax

c0013810 <unblockTask(ThreadControlBlock*)>:
c0013810:	53                   	push   ebx
c0013811:	83 ec 08             	sub    esp,0x8
c0013814:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013818:	fa                   	cli    
c0013819:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001381f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013822:	85 c0                	test   eax,eax
c0013824:	74 66                	je     c001388c <unblockTask(ThreadControlBlock*)+0x7c>
c0013826:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013829:	48                   	dec    eax
c001382a:	74 38                	je     c0013864 <unblockTask(ThreadControlBlock*)+0x54>
c001382c:	83 ec 0c             	sub    esp,0xc
c001382f:	68 64 37 02 c0       	push   0xc0023764
c0013834:	e8 03 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013839:	83 c4 10             	add    esp,0x10
c001383c:	85 c0                	test   eax,eax
c001383e:	75 1c                	jne    c001385c <unblockTask(ThreadControlBlock*)+0x4c>
c0013840:	eb 5e                	jmp    c00138a0 <unblockTask(ThreadControlBlock*)+0x90>
c0013842:	66 90                	xchg   ax,ax
c0013844:	83 ec 08             	sub    esp,0x8
c0013847:	50                   	push   eax
c0013848:	68 64 37 02 c0       	push   0xc0023764
c001384d:	e8 9a 8d 00 00       	call   c001c5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013852:	83 c4 10             	add    esp,0x10
c0013855:	85 c0                	test   eax,eax
c0013857:	74 47                	je     c00138a0 <unblockTask(ThreadControlBlock*)+0x90>
c0013859:	8d 76 00             	lea    esi,[esi+0x0]
c001385c:	39 c3                	cmp    ebx,eax
c001385e:	75 e4                	jne    c0013844 <unblockTask(ThreadControlBlock*)+0x34>
c0013860:	eb 12                	jmp    c0013874 <unblockTask(ThreadControlBlock*)+0x64>
c0013862:	66 90                	xchg   ax,ax
c0013864:	83 ec 0c             	sub    esp,0xc
c0013867:	68 66 e5 01 c0       	push   0xc001e566
c001386c:	e8 67 6c ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013871:	83 c4 10             	add    esp,0x10
c0013874:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013879:	48                   	dec    eax
c001387a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001387f:	75 03                	jne    c0013884 <unblockTask(ThreadControlBlock*)+0x74>
c0013881:	fb                   	sti    
c0013882:	66 90                	xchg   ax,ax
c0013884:	83 c4 08             	add    esp,0x8
c0013887:	5b                   	pop    ebx
c0013888:	c3                   	ret    
c0013889:	8d 76 00             	lea    esi,[esi+0x0]
c001388c:	83 ec 0c             	sub    esp,0xc
c001388f:	68 4f e5 01 c0       	push   0xc001e54f
c0013894:	e8 3f 6c ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	eb d6                	jmp    c0013874 <unblockTask(ThreadControlBlock*)+0x64>
c001389e:	66 90                	xchg   ax,ax
c00138a0:	83 ec 08             	sub    esp,0x8
c00138a3:	53                   	push   ebx
c00138a4:	68 64 37 02 c0       	push   0xc0023764
c00138a9:	e8 4e 8a 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	eb c1                	jmp    c0013874 <unblockTask(ThreadControlBlock*)+0x64>
c00138b3:	90                   	nop

c00138b4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00138b4:	55                   	push   ebp
c00138b5:	57                   	push   edi
c00138b6:	56                   	push   esi
c00138b7:	53                   	push   ebx
c00138b8:	83 ec 1c             	sub    esp,0x1c
c00138bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00138bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138c2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00138c8:	85 ed                	test   ebp,ebp
c00138ca:	7e 24                	jle    c00138f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00138cc:	31 f6                	xor    esi,esi
c00138ce:	66 90                	xchg   ax,ax
c00138d0:	83 ec 0c             	sub    esp,0xc
c00138d3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00138da:	46                   	inc    esi
c00138db:	57                   	push   edi
c00138dc:	e8 e8 3e ff ff       	call   c00077c9 <free>
c00138e1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00138ed:	7f e1                	jg     c00138d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00138ef:	90                   	nop
c00138f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00138fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138ff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013902:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013905:	d3 c0                	rol    eax,cl
c0013907:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001390e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013911:	89 f7                	mov    edi,esi
c0013913:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001391b:	0f 85 77 01 00 00    	jne    c0013a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013921:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013927:	85 ed                	test   ebp,ebp
c0013929:	74 1d                	je     c0013948 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001392b:	83 ec 0c             	sub    esp,0xc
c001392e:	55                   	push   ebp
c001392f:	e8 18 c5 ff ff       	call   c000fe4c <EnvVarContainer::~EnvVarContainer()>
c0013934:	59                   	pop    ecx
c0013935:	5e                   	pop    esi
c0013936:	6a 0c                	push   0xc
c0013938:	55                   	push   ebp
c0013939:	e8 a4 6a ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001393e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013941:	83 c4 10             	add    esp,0x10
c0013944:	89 f7                	mov    edi,esi
c0013946:	66 90                	xchg   ax,ax
c0013948:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001394e:	85 c0                	test   eax,eax
c0013950:	0f 84 b6 00 00 00    	je     c0013a0c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013956:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013959:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001395d:	31 c9                	xor    ecx,ecx
c001395f:	eb 17                	jmp    c0013978 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013961:	8d 76 00             	lea    esi,[esi+0x0]
c0013964:	41                   	inc    ecx
c0013965:	83 f9 10             	cmp    ecx,0x10
c0013968:	0f 84 9e 00 00 00    	je     c0013a0c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001396e:	66 90                	xchg   ax,ax
c0013970:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013976:	66 90                	xchg   ax,ax
c0013978:	31 d2                	xor    edx,edx
c001397a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013981:	d3 fa                	sar    edx,cl
c0013983:	83 e2 01             	and    edx,0x1
c0013986:	74 dc                	je     c0013964 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013988:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001398b:	01 d2                	add    edx,edx
c001398d:	01 ca                	add    edx,ecx
c001398f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013992:	01 d0                	add    eax,edx
c0013994:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001399a:	83 fd 07             	cmp    ebp,0x7
c001399d:	75 c5                	jne    c0013964 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001399f:	05 40 02 00 00       	add    eax,0x240
c00139a4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00139a7:	83 fd ff             	cmp    ebp,0xffffffff
c00139aa:	0f 8c f0 00 00 00    	jl     c0013aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00139b0:	0f 84 ae 01 00 00    	je     c0013b64 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00139b6:	85 ed                	test   ebp,ebp
c00139b8:	0f 84 92 01 00 00    	je     c0013b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00139be:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00139c0:	75 a2                	jne    c0013964 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139c2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00139c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00139cc:	01 d0                	add    eax,edx
c00139ce:	66 90                	xchg   ax,ax
c00139d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00139dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00139e6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00139ed:	50                   	push   eax
c00139ee:	e8 1d fe ff ff       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00139f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139fd:	89 f7                	mov    edi,esi
c00139ff:	41                   	inc    ecx
c0013a00:	83 f9 10             	cmp    ecx,0x10
c0013a03:	0f 85 67 ff ff ff    	jne    c0013970 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013a09:	8d 76 00             	lea    esi,[esi+0x0]
c0013a0c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013a12:	85 c0                	test   eax,eax
c0013a14:	74 62                	je     c0013a78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a16:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013a1c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013a22:	74 54                	je     c0013a78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	68 64 37 02 c0       	push   0xc0023764
c0013a2c:	e8 0b 88 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a31:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013a38:	89 c7                	mov    edi,eax
c0013a3a:	e8 e1 87 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a3f:	83 c4 10             	add    esp,0x10
c0013a42:	84 c0                	test   al,al
c0013a44:	0f 84 ce 00 00 00    	je     c0013b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013a4a:	66 90                	xchg   ax,ax
c0013a4c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a4f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013a55:	85 d2                	test   edx,edx
c0013a57:	74 0f                	je     c0013a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013a59:	83 ec 0c             	sub    esp,0xc
c0013a5c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a5e:	52                   	push   edx
c0013a5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a62:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a65:	83 c4 10             	add    esp,0x10
c0013a68:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013a72:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013a75:	8d 76 00             	lea    esi,[esi+0x0]
c0013a78:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013a7e:	85 db                	test   ebx,ebx
c0013a80:	74 16                	je     c0013a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	53                   	push   ebx
c0013a86:	e8 2b 5d ff ff       	call   c00097b6 <VAS::~VAS()>
c0013a8b:	58                   	pop    eax
c0013a8c:	5a                   	pop    edx
c0013a8d:	6a 14                	push   0x14
c0013a8f:	53                   	push   ebx
c0013a90:	e8 4d 69 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0013a95:	83 c4 10             	add    esp,0x10
c0013a98:	83 c4 1c             	add    esp,0x1c
c0013a9b:	5b                   	pop    ebx
c0013a9c:	5e                   	pop    esi
c0013a9d:	5f                   	pop    edi
c0013a9e:	5d                   	pop    ebp
c0013a9f:	c3                   	ret    
c0013aa0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	68 18 e6 01 c0       	push   0xc001e618
c0013aac:	e8 8a c6 ff ff       	call   c001013b <KePanic(char const*)>
c0013ab1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	89 f7                	mov    edi,esi
c0013ab9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013abd:	e9 a2 fe ff ff       	jmp    c0013964 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ac2:	66 90                	xchg   ax,ax
c0013ac4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013aca:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013ad0:	75 1e                	jne    c0013af0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ad2:	83 ec 0c             	sub    esp,0xc
c0013ad5:	68 80 e6 01 c0       	push   0xc001e680
c0013ada:	e8 f9 69 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013adf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013ae6:	e8 5d fa ff ff       	call   c0013548 <blockTask(TaskState)>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	66 90                	xchg   ax,ax
c0013af0:	83 ec 08             	sub    esp,0x8
c0013af3:	56                   	push   esi
c0013af4:	68 64 37 02 c0       	push   0xc0023764
c0013af9:	e8 fe 87 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013afe:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013b05:	e8 32 87 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	39 f8                	cmp    eax,edi
c0013b0f:	0f 84 37 ff ff ff    	je     c0013a4c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013b15:	8d 76 00             	lea    esi,[esi+0x0]
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	68 64 37 02 c0       	push   0xc0023764
c0013b20:	e8 17 87 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b25:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013b2c:	89 c6                	mov    esi,eax
c0013b2e:	e8 11 87 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	39 f3                	cmp    ebx,esi
c0013b38:	74 b6                	je     c0013af0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b3a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013b3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b40:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013b46:	75 a8                	jne    c0013af0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b48:	e9 77 ff ff ff       	jmp    c0013ac4 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	68 4c e6 01 c0       	push   0xc001e64c
c0013b5c:	e9 4b ff ff ff       	jmp    c0013aac <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013b61:	8d 76 00             	lea    esi,[esi+0x0]
c0013b64:	8b 36                	mov    esi,DWORD PTR [esi]
c0013b66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b6a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013b6d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b70:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013b76:	01 d7                	add    edi,edx
c0013b78:	89 f8                	mov    eax,edi
c0013b7a:	e9 51 fe ff ff       	jmp    c00139d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013b7f:	90                   	nop

c0013b80 <cleanerTaskFunction(void*)>:
c0013b80:	53                   	push   ebx
c0013b81:	83 ec 08             	sub    esp,0x8
c0013b84:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013b89:	48                   	dec    eax
c0013b8a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013b8f:	75 03                	jne    c0013b94 <cleanerTaskFunction(void*)+0x14>
c0013b91:	fb                   	sti    
c0013b92:	66 90                	xchg   ax,ax
c0013b94:	fa                   	cli    
c0013b95:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013b9a:	80 3d 2c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002372c,0x0
c0013ba1:	8d 50 01             	lea    edx,[eax+0x1]
c0013ba4:	89 15 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,edx
c0013baa:	0f 84 ac 00 00 00    	je     c0013c5c <cleanerTaskFunction(void*)+0xdc>
c0013bb0:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013bb5:	85 c0                	test   eax,eax
c0013bb7:	75 03                	jne    c0013bbc <cleanerTaskFunction(void*)+0x3c>
c0013bb9:	fb                   	sti    
c0013bba:	66 90                	xchg   ax,ax
c0013bbc:	c6 05 2c 37 02 c0 00 	mov    BYTE PTR ds:0xc002372c,0x0
c0013bc3:	fa                   	cli    
c0013bc4:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013bca:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c0013bd0:	fa                   	cli    
c0013bd1:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013bd7:	eb 2b                	jmp    c0013c04 <cleanerTaskFunction(void*)+0x84>
c0013bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	68 4c 37 02 c0       	push   0xc002374c
c0013be4:	e8 53 86 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013be9:	c7 04 24 4c 37 02 c0 	mov    DWORD PTR [esp],0xc002374c
c0013bf0:	89 c3                	mov    ebx,eax
c0013bf2:	e8 4d 86 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bfa:	e8 b5 fc ff ff       	call   c00138b4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013bff:	83 c4 10             	add    esp,0x10
c0013c02:	66 90                	xchg   ax,ax
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	68 4c 37 02 c0       	push   0xc002374c
c0013c0c:	e8 0f 86 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013c11:	83 c4 10             	add    esp,0x10
c0013c14:	84 c0                	test   al,al
c0013c16:	74 c4                	je     c0013bdc <cleanerTaskFunction(void*)+0x5c>
c0013c18:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013c1d:	48                   	dec    eax
c0013c1e:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013c23:	75 03                	jne    c0013c28 <cleanerTaskFunction(void*)+0xa8>
c0013c25:	fb                   	sti    
c0013c26:	66 90                	xchg   ax,ax
c0013c28:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013c2d:	48                   	dec    eax
c0013c2e:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013c33:	0f 85 4b ff ff ff    	jne    c0013b84 <cleanerTaskFunction(void*)+0x4>
c0013c39:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c0013c3e:	85 c0                	test   eax,eax
c0013c40:	0f 84 3e ff ff ff    	je     c0013b84 <cleanerTaskFunction(void*)+0x4>
c0013c46:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013c50:	e8 f7 f6 ff ff       	call   c001334c <schedule()>
c0013c55:	e9 2a ff ff ff       	jmp    c0013b84 <cleanerTaskFunction(void*)+0x4>
c0013c5a:	66 90                	xchg   ax,ax
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	6a 02                	push   0x2
c0013c61:	e8 ba f8 ff ff       	call   c0013520 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	e9 4e ff ff ff       	jmp    c0013bbc <cleanerTaskFunction(void*)+0x3c>
c0013c6e:	66 90                	xchg   ax,ax

c0013c70 <terminateTask(int)>:
c0013c70:	83 ec 14             	sub    esp,0x14
c0013c73:	fa                   	cli    
c0013c74:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013c7a:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c0013c80:	fa                   	cli    
c0013c81:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013c87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c90:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c98:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013c9b:	50                   	push   eax
c0013c9c:	68 4c 37 02 c0       	push   0xc002374c
c0013ca1:	e8 56 86 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ca6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013cb5:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013cba:	85 c0                	test   eax,eax
c0013cbc:	74 5e                	je     c0013d1c <terminateTask(int)+0xac>
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	c6 05 2c 37 02 c0 01 	mov    BYTE PTR ds:0xc002372c,0x1
c0013cc8:	50                   	push   eax
c0013cc9:	e8 42 fb ff ff       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013cd9:	48                   	dec    eax
c0013cda:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013cdf:	75 03                	jne    c0013ce4 <terminateTask(int)+0x74>
c0013ce1:	fb                   	sti    
c0013ce2:	66 90                	xchg   ax,ax
c0013ce4:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013ce9:	48                   	dec    eax
c0013cea:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013cef:	75 0b                	jne    c0013cfc <terminateTask(int)+0x8c>
c0013cf1:	83 3d 40 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023740,0x0
c0013cf8:	75 36                	jne    c0013d30 <terminateTask(int)+0xc0>
c0013cfa:	66 90                	xchg   ax,ax
c0013cfc:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013d01:	48                   	dec    eax
c0013d02:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013d07:	75 03                	jne    c0013d0c <terminateTask(int)+0x9c>
c0013d09:	fb                   	sti    
c0013d0a:	66 90                	xchg   ax,ax
c0013d0c:	fa                   	cli    
c0013d0d:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013d13:	90                   	nop
c0013d14:	e8 33 f6 ff ff       	call   c001334c <schedule()>
c0013d19:	eb e1                	jmp    c0013cfc <terminateTask(int)+0x8c>
c0013d1b:	90                   	nop
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	68 7d e5 01 c0       	push   0xc001e57d
c0013d24:	e8 af 67 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	eb a6                	jmp    c0013cd4 <terminateTask(int)+0x64>
c0013d2e:	66 90                	xchg   ax,ax
c0013d30:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013d3a:	eb d8                	jmp    c0013d14 <terminateTask(int)+0xa4>

c0013d3c <Thr::terminateFromIRQ(int)>:
c0013d3c:	83 ec 18             	sub    esp,0x18
c0013d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d43:	50                   	push   eax
c0013d44:	e8 27 ff ff ff       	call   c0013c70 <terminateTask(int)>
c0013d49:	90                   	nop
c0013d4a:	66 90                	xchg   ax,ax

c0013d4c <Semaphore::release()>:
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d53:	fa                   	cli    
c0013d54:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013d59:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013d5f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d62:	89 0d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ecx
c0013d68:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013d6b:	85 c9                	test   ecx,ecx
c0013d6d:	74 41                	je     c0013db0 <Semaphore::release()+0x64>
c0013d6f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013d72:	83 ec 0c             	sub    esp,0xc
c0013d75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d78:	51                   	push   ecx
c0013d79:	e8 92 fa ff ff       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c0013d7e:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	48                   	dec    eax
c0013d87:	90                   	nop
c0013d88:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013d8d:	85 c0                	test   eax,eax
c0013d8f:	75 0b                	jne    c0013d9c <Semaphore::release()+0x50>
c0013d91:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c0013d96:	85 c0                	test   eax,eax
c0013d98:	75 1e                	jne    c0013db8 <Semaphore::release()+0x6c>
c0013d9a:	66 90                	xchg   ax,ax
c0013d9c:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013da1:	48                   	dec    eax
c0013da2:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013da7:	75 03                	jne    c0013dac <Semaphore::release()+0x60>
c0013da9:	fb                   	sti    
c0013daa:	66 90                	xchg   ax,ax
c0013dac:	83 c4 0c             	add    esp,0xc
c0013daf:	c3                   	ret    
c0013db0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013db3:	eb d3                	jmp    c0013d88 <Semaphore::release()+0x3c>
c0013db5:	8d 76 00             	lea    esi,[esi+0x0]
c0013db8:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013dc2:	e8 85 f5 ff ff       	call   c001334c <schedule()>
c0013dc7:	eb d3                	jmp    c0013d9c <Semaphore::release()+0x50>
c0013dc9:	8d 76 00             	lea    esi,[esi+0x0]

c0013dcc <__static_initialization_and_destruction_0(int, int)>:
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013dd4:	0f 85 8e 00 00 00    	jne    c0013e68 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013dda:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013de2:	0f 85 80 00 00 00    	jne    c0013e68 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013de8:	83 ec 0c             	sub    esp,0xc
c0013deb:	68 64 37 02 c0       	push   0xc0023764
c0013df0:	e8 b3 87 00 00       	call   c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013df5:	83 c4 10             	add    esp,0x10
c0013df8:	83 ec 04             	sub    esp,0x4
c0013dfb:	68 30 f1 01 c0       	push   0xc001f130
c0013e00:	68 64 37 02 c0       	push   0xc0023764
c0013e05:	68 58 c5 01 c0       	push   0xc001c558
c0013e0a:	e8 83 65 ff ff       	call   c000a392 <__cxa_atexit>
c0013e0f:	83 c4 10             	add    esp,0x10
c0013e12:	83 ec 0c             	sub    esp,0xc
c0013e15:	68 58 37 02 c0       	push   0xc0023758
c0013e1a:	e8 89 87 00 00       	call   c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e1f:	83 c4 10             	add    esp,0x10
c0013e22:	83 ec 04             	sub    esp,0x4
c0013e25:	68 30 f1 01 c0       	push   0xc001f130
c0013e2a:	68 58 37 02 c0       	push   0xc0023758
c0013e2f:	68 58 c5 01 c0       	push   0xc001c558
c0013e34:	e8 59 65 ff ff       	call   c000a392 <__cxa_atexit>
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	83 ec 0c             	sub    esp,0xc
c0013e3f:	68 4c 37 02 c0       	push   0xc002374c
c0013e44:	e8 5f 87 00 00       	call   c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e49:	83 c4 10             	add    esp,0x10
c0013e4c:	83 ec 04             	sub    esp,0x4
c0013e4f:	68 30 f1 01 c0       	push   0xc001f130
c0013e54:	68 4c 37 02 c0       	push   0xc002374c
c0013e59:	68 58 c5 01 c0       	push   0xc001c558
c0013e5e:	e8 2f 65 ff ff       	call   c000a392 <__cxa_atexit>
c0013e63:	83 c4 10             	add    esp,0x10
c0013e66:	66 90                	xchg   ax,ax
c0013e68:	90                   	nop
c0013e69:	83 c4 0c             	add    esp,0xc
c0013e6c:	c3                   	ret    
c0013e6d:	8d 76 00             	lea    esi,[esi+0x0]

c0013e70 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	83 ec 08             	sub    esp,0x8
c0013e76:	68 ff ff 00 00       	push   0xffff
c0013e7b:	6a 01                	push   0x1
c0013e7d:	e8 4a ff ff ff       	call   c0013dcc <__static_initialization_and_destruction_0(int, int)>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	83 c4 0c             	add    esp,0xc
c0013e88:	c3                   	ret    

c0013e89 <Vm::inbv(unsigned short)>:
c0013e89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e8d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e92:	75 06                	jne    c0013e9a <Vm::inbv(unsigned short)+0x11>
c0013e94:	a0 ac 37 02 c0       	mov    al,ds:0xc00237ac
c0013e99:	c3                   	ret    
c0013e9a:	ec                   	in     al,dx
c0013e9b:	c3                   	ret    

c0013e9c <Vm::outbv(unsigned short, unsigned char)>:
c0013e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013ea0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ea4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013ea9:	75 25                	jne    c0013ed0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013eab:	8b 0d ac 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ac
c0013eb1:	8d 51 01             	lea    edx,[ecx+0x1]
c0013eb4:	88 81 c0 37 02 c0    	mov    BYTE PTR [ecx-0x3ffdc840],al
c0013eba:	89 15 ac 37 02 c0    	mov    DWORD PTR ds:0xc00237ac,edx
c0013ec0:	83 fa 20             	cmp    edx,0x20
c0013ec3:	75 0c                	jne    c0013ed1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013ec5:	c7 05 ac 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x1f
c0013ecf:	c3                   	ret    
c0013ed0:	ee                   	out    dx,al
c0013ed1:	c3                   	ret    

c0013ed2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0013ed2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013ed7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013edc:	c1 e0 04             	shl    eax,0x4
c0013edf:	01 d0                	add    eax,edx
c0013ee1:	c3                   	ret    

c0013ee2 <Vm::getSegment(unsigned int)>:
c0013ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ee6:	c1 e8 10             	shr    eax,0x10
c0013ee9:	c3                   	ret    

c0013eea <Vm::getOffset(unsigned int)>:
c0013eea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eee:	c3                   	ret    

c0013eef <Vm::mainloop2()>:
c0013eef:	83 ec 18             	sub    esp,0x18
c0013ef2:	fa                   	cli    
c0013ef3:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013ef9:	6a 02                	push   0x2
c0013efb:	c6 05 a5 37 02 c0 01 	mov    BYTE PTR ds:0xc00237a5,0x1
c0013f02:	e8 19 f6 ff ff       	call   c0013520 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f0c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013f10:	52                   	push   edx
c0013f11:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013f15:	52                   	push   edx
c0013f16:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013f1a:	52                   	push   edx
c0013f1b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013f1f:	50                   	push   eax
c0013f20:	e8 ea c2 fe ff       	call   c000020f <goToVM86>
c0013f25:	83 c4 2c             	add    esp,0x2c
c0013f28:	c3                   	ret    

c0013f29 <Vm::mainVm8086Loop(void*)>:
c0013f29:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013f2e:	48                   	dec    eax
c0013f2f:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013f34:	75 01                	jne    c0013f37 <Vm::mainVm8086Loop(void*)+0xe>
c0013f36:	fb                   	sti    
c0013f37:	eb b6                	jmp    c0013eef <Vm::mainloop2()>

c0013f39 <Vm::mainloop3(unsigned long)>:
c0013f39:	83 ec 18             	sub    esp,0x18
c0013f3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f40:	fa                   	cli    
c0013f41:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013f47:	6a 02                	push   0x2
c0013f49:	c6 05 a4 37 02 c0 01 	mov    BYTE PTR ds:0xc00237a4,0x1
c0013f50:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c0013f55:	e8 c6 f5 ff ff       	call   c0013520 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f5a:	83 c4 1c             	add    esp,0x1c
c0013f5d:	eb 90                	jmp    c0013eef <Vm::mainloop2()>

c0013f5f <Vm::initialise8086()>:
c0013f5f:	83 ec 0c             	sub    esp,0xc
c0013f62:	68 80 00 00 00       	push   0x80
c0013f67:	6a 00                	push   0x0
c0013f69:	68 29 3f 01 c0       	push   0xc0013f29
c0013f6e:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0013f74:	e8 b3 f1 ff ff       	call   c001312c <Process::createThread(void (*)(void*), void*, int)>
c0013f79:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013f80:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013f85:	68 00 01 00 00       	push   0x100
c0013f8a:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0013f8f:	6a 00                	push   0x0
c0013f91:	6a 00                	push   0x0
c0013f93:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f99:	e8 76 5c ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f9e:	83 c4 2c             	add    esp,0x2c
c0013fa1:	c3                   	ret    

c0013fa2 <Vm::finish8086()>:
c0013fa2:	53                   	push   ebx
c0013fa3:	83 ec 08             	sub    esp,0x8
c0013fa6:	fa                   	cli    
c0013fa7:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013fad:	80 3d a4 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a4,0x0
c0013fb4:	75 15                	jne    c0013fcb <Vm::finish8086()+0x29>
c0013fb6:	e8 91 f3 ff ff       	call   c001334c <schedule()>
c0013fbb:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013fc0:	48                   	dec    eax
c0013fc1:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013fc6:	75 de                	jne    c0013fa6 <Vm::finish8086()+0x4>
c0013fc8:	fb                   	sti    
c0013fc9:	eb db                	jmp    c0013fa6 <Vm::finish8086()+0x4>
c0013fcb:	83 ec 0c             	sub    esp,0xc
c0013fce:	8b 1d a0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a0
c0013fd4:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0013fda:	c6 05 a4 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a4,0x0
c0013fe1:	e8 2a f8 ff ff       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c0013fe6:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	8d 50 ff             	lea    edx,[eax-0x1]
c0013ff1:	89 15 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,edx
c0013ff7:	85 d2                	test   edx,edx
c0013ff9:	75 01                	jne    c0013ffc <Vm::finish8086()+0x5a>
c0013ffb:	fb                   	sti    
c0013ffc:	89 d8                	mov    eax,ebx
c0013ffe:	83 c4 08             	add    esp,0x8
c0014001:	5b                   	pop    ebx
c0014002:	c3                   	ret    

c0014003 <Vm::getOutput8086(unsigned char*)>:
c0014003:	57                   	push   edi
c0014004:	8b 0d ac 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ac
c001400a:	56                   	push   esi
c001400b:	be c0 37 02 c0       	mov    esi,0xc00237c0
c0014010:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014014:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014016:	a1 ac 37 02 c0       	mov    eax,ds:0xc00237ac
c001401b:	5e                   	pop    esi
c001401c:	c7 05 ac 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x0
c0014026:	5f                   	pop    edi
c0014027:	c3                   	ret    

c0014028 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014028:	55                   	push   ebp
c0014029:	57                   	push   edi
c001402a:	56                   	push   esi
c001402b:	53                   	push   ebx
c001402c:	83 ec 0c             	sub    esp,0xc
c001402f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014033:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014037:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001403b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001403f:	fa                   	cli    
c0014040:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0014046:	80 3d a5 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a5,0x0
c001404d:	75 15                	jne    c0014064 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001404f:	e8 f8 f2 ff ff       	call   c001334c <schedule()>
c0014054:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0014059:	48                   	dec    eax
c001405a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001405f:	75 de                	jne    c001403f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014061:	fb                   	sti    
c0014062:	eb db                	jmp    c001403f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014064:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014069:	c7 05 ac 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x0
c0014073:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014077:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001407b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001407f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014083:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014087:	0f b7 ff             	movzx  edi,di
c001408a:	0f b7 f6             	movzx  esi,si
c001408d:	50                   	push   eax
c001408e:	6a 20                	push   0x20
c0014090:	6a 00                	push   0x0
c0014092:	68 c0 37 02 c0       	push   0xc00237c0
c0014097:	e8 34 c4 fe ff       	call   c00004d0 <memset>
c001409c:	5a                   	pop    edx
c001409d:	59                   	pop    ecx
c001409e:	57                   	push   edi
c001409f:	56                   	push   esi
c00140a0:	e8 2d fe ff ff       	call   c0013ed2 <Vm::realToLinear(unsigned short, unsigned short)>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	89 c7                	mov    edi,eax
c00140aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00140b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140b4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00140b9:	c6 05 a5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a5,0x0
c00140c0:	48                   	dec    eax
c00140c1:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00140c6:	75 01                	jne    c00140c9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00140c8:	fb                   	sti    
c00140c9:	83 ec 0c             	sub    esp,0xc
c00140cc:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c00140d2:	e8 39 f7 ff ff       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c00140d7:	83 c4 1c             	add    esp,0x1c
c00140da:	b0 01                	mov    al,0x1
c00140dc:	5b                   	pop    ebx
c00140dd:	5e                   	pop    esi
c00140de:	5f                   	pop    edi
c00140df:	5d                   	pop    ebp
c00140e0:	c3                   	ret    

c00140e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00140e1:	55                   	push   ebp
c00140e2:	57                   	push   edi
c00140e3:	56                   	push   esi
c00140e4:	53                   	push   ebx
c00140e5:	83 ec 2c             	sub    esp,0x2c
c00140e8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00140ec:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00140f0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00140f4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00140f8:	fa                   	cli    
c00140f9:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00140ff:	0f b6 35 a5 37 02 c0 	movzx  esi,BYTE PTR ds:0xc00237a5
c0014106:	89 f0                	mov    eax,esi
c0014108:	84 c0                	test   al,al
c001410a:	75 1d                	jne    c0014129 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001410c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014110:	e8 37 f2 ff ff       	call   c001334c <schedule()>
c0014115:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001411a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001411e:	48                   	dec    eax
c001411f:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0014124:	75 d2                	jne    c00140f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014126:	fb                   	sti    
c0014127:	eb cf                	jmp    c00140f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014129:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001412e:	c7 05 ac 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x0
c0014138:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001413c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014140:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014144:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014148:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001414c:	50                   	push   eax
c001414d:	6a 20                	push   0x20
c001414f:	6a 00                	push   0x0
c0014151:	68 c0 37 02 c0       	push   0xc00237c0
c0014156:	e8 75 c3 fe ff       	call   c00004d0 <memset>
c001415b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014162:	e8 52 36 ff ff       	call   c00077b9 <malloc>
c0014167:	83 c4 0c             	add    esp,0xc
c001416a:	89 c3                	mov    ebx,eax
c001416c:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0014172:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014176:	50                   	push   eax
c0014177:	e8 d2 68 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	85 db                	test   ebx,ebx
c0014181:	75 0a                	jne    c001418d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014183:	83 ec 0c             	sub    esp,0xc
c0014186:	68 a8 e6 01 c0       	push   0xc001e6a8
c001418b:	eb 3e                	jmp    c00141cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001418d:	50                   	push   eax
c001418e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014192:	50                   	push   eax
c0014193:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014197:	50                   	push   eax
c0014198:	53                   	push   ebx
c0014199:	e8 1c 6c ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c001419e:	83 c4 10             	add    esp,0x10
c00141a1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00141a6:	74 0a                	je     c00141b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00141a8:	83 ec 0c             	sub    esp,0xc
c00141ab:	68 bc e6 01 c0       	push   0xc001e6bc
c00141b0:	eb 19                	jmp    c00141cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141b2:	51                   	push   ecx
c00141b3:	51                   	push   ecx
c00141b4:	6a 01                	push   0x1
c00141b6:	53                   	push   ebx
c00141b7:	e8 52 69 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00141bc:	83 c4 10             	add    esp,0x10
c00141bf:	85 c0                	test   eax,eax
c00141c1:	74 24                	je     c00141e7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00141c3:	83 ec 0c             	sub    esp,0xc
c00141c6:	68 d5 e6 01 c0       	push   0xc001e6d5
c00141cb:	e8 6b bf ff ff       	call   c001013b <KePanic(char const*)>
c00141d0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	48                   	dec    eax
c00141d9:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00141de:	85 c0                	test   eax,eax
c00141e0:	75 01                	jne    c00141e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00141e2:	fb                   	sti    
c00141e3:	31 f6                	xor    esi,esi
c00141e5:	eb 58                	jmp    c001423f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00141e7:	0f b7 ed             	movzx  ebp,bp
c00141ea:	50                   	push   eax
c00141eb:	0f b7 ff             	movzx  edi,di
c00141ee:	50                   	push   eax
c00141ef:	55                   	push   ebp
c00141f0:	57                   	push   edi
c00141f1:	e8 dc fc ff ff       	call   c0013ed2 <Vm::realToLinear(unsigned short, unsigned short)>
c00141f6:	5a                   	pop    edx
c00141f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141f9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00141fd:	51                   	push   ecx
c00141fe:	50                   	push   eax
c00141ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014207:	53                   	push   ebx
c0014208:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001420b:	83 c4 14             	add    esp,0x14
c001420e:	53                   	push   ebx
c001420f:	e8 58 69 ff ff       	call   c000ab6c <File::close()>
c0014214:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0014219:	83 c4 10             	add    esp,0x10
c001421c:	48                   	dec    eax
c001421d:	c6 05 a5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a5,0x0
c0014224:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0014229:	85 c0                	test   eax,eax
c001422b:	75 01                	jne    c001422e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001422d:	fb                   	sti    
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0014237:	e8 d4 f5 ff ff       	call   c0013810 <unblockTask(ThreadControlBlock*)>
c001423c:	83 c4 10             	add    esp,0x10
c001423f:	83 c4 2c             	add    esp,0x2c
c0014242:	89 f0                	mov    eax,esi
c0014244:	5b                   	pop    ebx
c0014245:	5e                   	pop    esi
c0014246:	5f                   	pop    edi
c0014247:	5d                   	pop    ebp
c0014248:	c3                   	ret    

c0014249 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014249:	57                   	push   edi
c001424a:	56                   	push   esi
c001424b:	53                   	push   ebx
c001424c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014258:	83 e8 06             	sub    eax,0x6
c001425b:	0f b7 c0             	movzx  eax,ax
c001425e:	50                   	push   eax
c001425f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014264:	50                   	push   eax
c0014265:	e8 68 fc ff ff       	call   c0013ed2 <Vm::realToLinear(unsigned short, unsigned short)>
c001426a:	5a                   	pop    edx
c001426b:	5e                   	pop    esi
c001426c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001426f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014272:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014278:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001427b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001427e:	83 c2 02             	add    edx,0x2
c0014281:	66 89 10             	mov    WORD PTR [eax],dx
c0014284:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014287:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001428b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001428e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014292:	89 d6                	mov    esi,edx
c0014294:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001429a:	66 81 e6 ff fd       	and    si,0xfdff
c001429f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00142a3:	74 07                	je     c00142ac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00142a5:	89 d6                	mov    esi,edx
c00142a7:	66 81 ce 00 02       	or     si,0x200
c00142ac:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00142b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142b5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00142b9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00142c1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00142c4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00142cc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00142cf:	5b                   	pop    ebx
c00142d0:	5e                   	pop    esi
c00142d1:	5f                   	pop    edi
c00142d2:	c3                   	ret    

c00142d3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00142d3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142dd:	c1 e0 04             	shl    eax,0x4
c00142e0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00142e3:	c3                   	ret    

c00142e4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00142e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142ee:	c1 e0 04             	shl    eax,0x4
c00142f1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00142f5:	c3                   	ret    

c00142f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00142f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014300:	c1 e0 04             	shl    eax,0x4
c0014303:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014306:	c3                   	ret    

c0014307 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014307:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001430c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014311:	c1 e0 04             	shl    eax,0x4
c0014314:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014318:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001431b:	c3                   	ret    

c001431c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001431c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014321:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014326:	c1 e0 04             	shl    eax,0x4
c0014329:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001432d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014331:	c3                   	ret    

c0014332 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014332:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014337:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001433c:	c1 e0 04             	shl    eax,0x4
c001433f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014343:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014346:	c3                   	ret    

c0014347 <Vm::faultHandler(regs*)>:
c0014347:	55                   	push   ebp
c0014348:	57                   	push   edi
c0014349:	56                   	push   esi
c001434a:	53                   	push   ebx
c001434b:	83 ec 1c             	sub    esp,0x1c
c001434e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014352:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014355:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014359:	0f b7 f8             	movzx  edi,ax
c001435c:	52                   	push   edx
c001435d:	0f b7 c0             	movzx  eax,ax
c0014360:	50                   	push   eax
c0014361:	e8 6c fb ff ff       	call   c0013ed2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014366:	5a                   	pop    edx
c0014367:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001436a:	59                   	pop    ecx
c001436b:	89 c1                	mov    ecx,eax
c001436d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014370:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014374:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014379:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001437d:	0f b7 c5             	movzx  eax,bp
c0014380:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014384:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014388:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001438c:	e8 41 fb ff ff       	call   c0013ed2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014391:	5e                   	pop    esi
c0014392:	be 06 00 00 00       	mov    esi,0x6
c0014397:	5a                   	pop    edx
c0014398:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001439d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00143a2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00143a5:	80 fa 9d             	cmp    dl,0x9d
c00143a8:	0f 84 2c 02 00 00    	je     c00145da <Vm::faultHandler(regs*)+0x293>
c00143ae:	0f 87 91 00 00 00    	ja     c0014445 <Vm::faultHandler(regs*)+0xfe>
c00143b4:	80 fa 66             	cmp    dl,0x66
c00143b7:	0f 84 98 01 00 00    	je     c0014555 <Vm::faultHandler(regs*)+0x20e>
c00143bd:	77 47                	ja     c0014406 <Vm::faultHandler(regs*)+0xbf>
c00143bf:	80 fa 36             	cmp    dl,0x36
c00143c2:	0f 84 80 01 00 00    	je     c0014548 <Vm::faultHandler(regs*)+0x201>
c00143c8:	77 1a                	ja     c00143e4 <Vm::faultHandler(regs*)+0x9d>
c00143ca:	80 fa 26             	cmp    dl,0x26
c00143cd:	0f 84 4e 01 00 00    	je     c0014521 <Vm::faultHandler(regs*)+0x1da>
c00143d3:	80 fa 2e             	cmp    dl,0x2e
c00143d6:	0f 85 e2 05 00 00    	jne    c00149be <Vm::faultHandler(regs*)+0x677>
c00143dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143df:	31 f6                	xor    esi,esi
c00143e1:	41                   	inc    ecx
c00143e2:	eb be                	jmp    c00143a2 <Vm::faultHandler(regs*)+0x5b>
c00143e4:	80 fa 64             	cmp    dl,0x64
c00143e7:	0f 84 41 01 00 00    	je     c001452e <Vm::faultHandler(regs*)+0x1e7>
c00143ed:	0f 87 48 01 00 00    	ja     c001453b <Vm::faultHandler(regs*)+0x1f4>
c00143f3:	80 fa 3e             	cmp    dl,0x3e
c00143f6:	0f 85 c2 05 00 00    	jne    c00149be <Vm::faultHandler(regs*)+0x677>
c00143fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143ff:	be 01 00 00 00       	mov    esi,0x1
c0014404:	eb db                	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c0014406:	80 fa 6d             	cmp    dl,0x6d
c0014409:	0f 84 ec 02 00 00    	je     c00146fb <Vm::faultHandler(regs*)+0x3b4>
c001440f:	77 17                	ja     c0014428 <Vm::faultHandler(regs*)+0xe1>
c0014411:	80 fa 67             	cmp    dl,0x67
c0014414:	0f 84 48 01 00 00    	je     c0014562 <Vm::faultHandler(regs*)+0x21b>
c001441a:	80 fa 6c             	cmp    dl,0x6c
c001441d:	0f 84 69 02 00 00    	je     c001468c <Vm::faultHandler(regs*)+0x345>
c0014423:	e9 96 05 00 00       	jmp    c00149be <Vm::faultHandler(regs*)+0x677>
c0014428:	80 fa 6f             	cmp    dl,0x6f
c001442b:	0f 84 f4 03 00 00    	je     c0014825 <Vm::faultHandler(regs*)+0x4de>
c0014431:	0f 82 59 03 00 00    	jb     c0014790 <Vm::faultHandler(regs*)+0x449>
c0014437:	80 fa 9c             	cmp    dl,0x9c
c001443a:	0f 84 2f 01 00 00    	je     c001456f <Vm::faultHandler(regs*)+0x228>
c0014440:	e9 79 05 00 00       	jmp    c00149be <Vm::faultHandler(regs*)+0x677>
c0014445:	80 fa ec             	cmp    dl,0xec
c0014448:	0f 84 14 05 00 00    	je     c0014962 <Vm::faultHandler(regs*)+0x61b>
c001444e:	77 7b                	ja     c00144cb <Vm::faultHandler(regs*)+0x184>
c0014450:	80 fa e4             	cmp    dl,0xe4
c0014453:	0f 84 93 04 00 00    	je     c00148ec <Vm::faultHandler(regs*)+0x5a5>
c0014459:	77 53                	ja     c00144ae <Vm::faultHandler(regs*)+0x167>
c001445b:	80 fa cd             	cmp    dl,0xcd
c001445e:	0f 84 d9 01 00 00    	je     c001463d <Vm::faultHandler(regs*)+0x2f6>
c0014464:	80 fa cf             	cmp    dl,0xcf
c0014467:	0f 85 51 05 00 00    	jne    c00149be <Vm::faultHandler(regs*)+0x677>
c001446d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014470:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014473:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014477:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001447a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001447e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014484:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014487:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001448b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014491:	66 c1 e8 09          	shr    ax,0x9
c0014495:	83 e0 01             	and    eax,0x1
c0014498:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001449b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001449e:	83 c0 06             	add    eax,0x6
c00144a1:	25 ff ff 00 00       	and    eax,0xffff
c00144a6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00144a9:	e9 0c 05 00 00       	jmp    c00149ba <Vm::faultHandler(regs*)+0x673>
c00144ae:	80 fa e6             	cmp    dl,0xe6
c00144b1:	0f 84 7f 04 00 00    	je     c0014936 <Vm::faultHandler(regs*)+0x5ef>
c00144b7:	0f 82 4b 04 00 00    	jb     c0014908 <Vm::faultHandler(regs*)+0x5c1>
c00144bd:	80 fa e7             	cmp    dl,0xe7
c00144c0:	0f 84 87 04 00 00    	je     c001494d <Vm::faultHandler(regs*)+0x606>
c00144c6:	e9 f3 04 00 00       	jmp    c00149be <Vm::faultHandler(regs*)+0x677>
c00144cb:	80 fa ef             	cmp    dl,0xef
c00144ce:	0f 84 d1 04 00 00    	je     c00149a5 <Vm::faultHandler(regs*)+0x65e>
c00144d4:	77 28                	ja     c00144fe <Vm::faultHandler(regs*)+0x1b7>
c00144d6:	80 fa ed             	cmp    dl,0xed
c00144d9:	0f 84 9f 04 00 00    	je     c001497e <Vm::faultHandler(regs*)+0x637>
c00144df:	80 fa ee             	cmp    dl,0xee
c00144e2:	0f 85 d6 04 00 00    	jne    c00149be <Vm::faultHandler(regs*)+0x677>
c00144e8:	50                   	push   eax
c00144e9:	50                   	push   eax
c00144ea:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00144ee:	50                   	push   eax
c00144ef:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00144f3:	50                   	push   eax
c00144f4:	e8 a3 f9 ff ff       	call   c0013e9c <Vm::outbv(unsigned short, unsigned char)>
c00144f9:	e9 9f 04 00 00       	jmp    c001499d <Vm::faultHandler(regs*)+0x656>
c00144fe:	80 fa fa             	cmp    dl,0xfa
c0014501:	0f 84 69 01 00 00    	je     c0014670 <Vm::faultHandler(regs*)+0x329>
c0014507:	80 fa fb             	cmp    dl,0xfb
c001450a:	0f 84 6e 01 00 00    	je     c001467e <Vm::faultHandler(regs*)+0x337>
c0014510:	80 fa f3             	cmp    dl,0xf3
c0014513:	0f 85 a5 04 00 00    	jne    c00149be <Vm::faultHandler(regs*)+0x677>
c0014519:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001451c:	e9 c0 fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c0014521:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014524:	be 02 00 00 00       	mov    esi,0x2
c0014529:	e9 b3 fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c001452e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014531:	be 03 00 00 00       	mov    esi,0x3
c0014536:	e9 a6 fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c001453b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001453e:	be 04 00 00 00       	mov    esi,0x4
c0014543:	e9 99 fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c0014548:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001454b:	be 05 00 00 00       	mov    esi,0x5
c0014550:	e9 8c fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c0014555:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014558:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001455d:	e9 7f fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c0014562:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014565:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001456a:	e9 72 fe ff ff       	jmp    c00143e1 <Vm::faultHandler(regs*)+0x9a>
c001456f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014572:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014576:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001457b:	74 30                	je     c00145ad <Vm::faultHandler(regs*)+0x266>
c001457d:	83 e9 04             	sub    ecx,0x4
c0014580:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014586:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001458c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001458f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014592:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014598:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001459c:	0f 84 15 04 00 00    	je     c00149b7 <Vm::faultHandler(regs*)+0x670>
c00145a2:	80 ce 02             	or     dh,0x2
c00145a5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145a8:	e9 0a 04 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c00145ad:	83 e9 02             	sub    ecx,0x2
c00145b0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145b6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00145b9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00145bd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00145c3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00145c7:	74 05                	je     c00145ce <Vm::faultHandler(regs*)+0x287>
c00145c9:	80 ce 02             	or     dh,0x2
c00145cc:	eb 03                	jmp    c00145d1 <Vm::faultHandler(regs*)+0x28a>
c00145ce:	80 e6 fd             	and    dh,0xfd
c00145d1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00145d5:	e9 dd 03 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c00145da:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00145df:	74 2a                	je     c001460b <Vm::faultHandler(regs*)+0x2c4>
c00145e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00145e3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00145e9:	81 ca 00 02 02 00    	or     edx,0x20200
c00145ef:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00145f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145fa:	c1 e8 09             	shr    eax,0x9
c00145fd:	83 e0 01             	and    eax,0x1
c0014600:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014603:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014606:	83 c0 04             	add    eax,0x4
c0014609:	eb 25                	jmp    c0014630 <Vm::faultHandler(regs*)+0x2e9>
c001460b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001460e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014614:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014617:	66 8b 00             	mov    ax,WORD PTR [eax]
c001461a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014620:	66 c1 e8 09          	shr    ax,0x9
c0014624:	83 e0 01             	and    eax,0x1
c0014627:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001462a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001462d:	83 c0 02             	add    eax,0x2
c0014630:	25 ff ff 00 00       	and    eax,0xffff
c0014635:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014638:	e9 7a 03 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c001463d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014641:	3c ee                	cmp    al,0xee
c0014643:	75 10                	jne    c0014655 <Vm::faultHandler(regs*)+0x30e>
c0014645:	83 ec 0c             	sub    esp,0xc
c0014648:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001464b:	e8 e9 f8 ff ff       	call   c0013f39 <Vm::mainloop3(unsigned long)>
c0014650:	e9 4b 03 00 00       	jmp    c00149a0 <Vm::faultHandler(regs*)+0x659>
c0014655:	83 ec 0c             	sub    esp,0xc
c0014658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001465c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014660:	51                   	push   ecx
c0014661:	50                   	push   eax
c0014662:	53                   	push   ebx
c0014663:	e8 e1 fb ff ff       	call   c0014249 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014668:	83 c4 20             	add    esp,0x20
c001466b:	e9 4a 03 00 00       	jmp    c00149ba <Vm::faultHandler(regs*)+0x673>
c0014670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014675:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014679:	e9 39 03 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c001467e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014683:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014687:	e9 2b 03 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c001468c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001468f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014694:	74 2b                	je     c00146c1 <Vm::faultHandler(regs*)+0x37a>
c0014696:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001469d:	76 22                	jbe    c00146c1 <Vm::faultHandler(regs*)+0x37a>
c001469f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00146a3:	50                   	push   eax
c00146a4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146a8:	50                   	push   eax
c00146a9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146ad:	50                   	push   eax
c00146ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146b2:	50                   	push   eax
c00146b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146b7:	50                   	push   eax
c00146b8:	6a 6c                	push   0x6c
c00146ba:	6a 6c                	push   0x6c
c00146bc:	e9 b9 01 00 00       	jmp    c001487a <Vm::faultHandler(regs*)+0x533>
c00146c1:	83 ec 0c             	sub    esp,0xc
c00146c4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00146c8:	0f b7 f6             	movzx  esi,si
c00146cb:	50                   	push   eax
c00146cc:	e8 b8 f7 ff ff       	call   c0013e89 <Vm::inbv(unsigned short)>
c00146d1:	83 c4 0c             	add    esp,0xc
c00146d4:	0f b6 c0             	movzx  eax,al
c00146d7:	50                   	push   eax
c00146d8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00146dc:	50                   	push   eax
c00146dd:	56                   	push   esi
c00146de:	e8 24 fc ff ff       	call   c0014307 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146ed:	74 03                	je     c00146f2 <Vm::faultHandler(regs*)+0x3ab>
c00146ef:	48                   	dec    eax
c00146f0:	eb 01                	jmp    c00146f3 <Vm::faultHandler(regs*)+0x3ac>
c00146f2:	40                   	inc    eax
c00146f3:	0f b7 c0             	movzx  eax,ax
c00146f6:	e9 8d 00 00 00       	jmp    c0014788 <Vm::faultHandler(regs*)+0x441>
c00146fb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014701:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014706:	74 29                	je     c0014731 <Vm::faultHandler(regs*)+0x3ea>
c0014708:	3d ff ff 00 00       	cmp    eax,0xffff
c001470d:	76 22                	jbe    c0014731 <Vm::faultHandler(regs*)+0x3ea>
c001470f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014713:	50                   	push   eax
c0014714:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014718:	50                   	push   eax
c0014719:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001471d:	50                   	push   eax
c001471e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014722:	50                   	push   eax
c0014723:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014727:	50                   	push   eax
c0014728:	6a 6d                	push   0x6d
c001472a:	6a 6d                	push   0x6d
c001472c:	e9 49 01 00 00       	jmp    c001487a <Vm::faultHandler(regs*)+0x533>
c0014731:	0f b7 c8             	movzx  ecx,ax
c0014734:	0f b7 f6             	movzx  esi,si
c0014737:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001473a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001473f:	74 20                	je     c0014761 <Vm::faultHandler(regs*)+0x41a>
c0014741:	ed                   	in     eax,dx
c0014742:	55                   	push   ebp
c0014743:	50                   	push   eax
c0014744:	51                   	push   ecx
c0014745:	56                   	push   esi
c0014746:	e8 e7 fb ff ff       	call   c0014332 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001474b:	83 c4 10             	add    esp,0x10
c001474e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014751:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014755:	74 05                	je     c001475c <Vm::faultHandler(regs*)+0x415>
c0014757:	83 e8 04             	sub    eax,0x4
c001475a:	eb 27                	jmp    c0014783 <Vm::faultHandler(regs*)+0x43c>
c001475c:	83 c0 04             	add    eax,0x4
c001475f:	eb 22                	jmp    c0014783 <Vm::faultHandler(regs*)+0x43c>
c0014761:	66 ed                	in     ax,dx
c0014763:	0f b7 c0             	movzx  eax,ax
c0014766:	57                   	push   edi
c0014767:	50                   	push   eax
c0014768:	51                   	push   ecx
c0014769:	56                   	push   esi
c001476a:	e8 ad fb ff ff       	call   c001431c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014775:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014779:	74 05                	je     c0014780 <Vm::faultHandler(regs*)+0x439>
c001477b:	83 e8 02             	sub    eax,0x2
c001477e:	eb 03                	jmp    c0014783 <Vm::faultHandler(regs*)+0x43c>
c0014780:	83 c0 02             	add    eax,0x2
c0014783:	25 ff ff 00 00       	and    eax,0xffff
c0014788:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001478b:	e9 27 02 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c0014790:	8d 46 ff             	lea    eax,[esi-0x1]
c0014793:	3c 05                	cmp    al,0x5
c0014795:	77 24                	ja     c00147bb <Vm::faultHandler(regs*)+0x474>
c0014797:	0f b6 c0             	movzx  eax,al
c001479a:	ff 24 85 48 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe18b8]
c00147a1:	0f b7 fd             	movzx  edi,bp
c00147a4:	eb 15                	jmp    c00147bb <Vm::faultHandler(regs*)+0x474>
c00147a6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00147aa:	eb 0f                	jmp    c00147bb <Vm::faultHandler(regs*)+0x474>
c00147ac:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00147b0:	eb 09                	jmp    c00147bb <Vm::faultHandler(regs*)+0x474>
c00147b2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00147b6:	eb 03                	jmp    c00147bb <Vm::faultHandler(regs*)+0x474>
c00147b8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00147bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00147be:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00147c3:	74 29                	je     c00147ee <Vm::faultHandler(regs*)+0x4a7>
c00147c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00147ca:	76 22                	jbe    c00147ee <Vm::faultHandler(regs*)+0x4a7>
c00147cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00147d0:	50                   	push   eax
c00147d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00147d5:	50                   	push   eax
c00147d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00147da:	50                   	push   eax
c00147db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00147df:	50                   	push   eax
c00147e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00147e4:	50                   	push   eax
c00147e5:	6a 6e                	push   0x6e
c00147e7:	6a 6e                	push   0x6e
c00147e9:	e9 8c 00 00 00       	jmp    c001487a <Vm::faultHandler(regs*)+0x533>
c00147ee:	0f b7 c0             	movzx  eax,ax
c00147f1:	52                   	push   edx
c00147f2:	52                   	push   edx
c00147f3:	50                   	push   eax
c00147f4:	57                   	push   edi
c00147f5:	e8 d9 fa ff ff       	call   c00142d3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00147fa:	59                   	pop    ecx
c00147fb:	0f b6 c0             	movzx  eax,al
c00147fe:	5e                   	pop    esi
c00147ff:	50                   	push   eax
c0014800:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014804:	50                   	push   eax
c0014805:	e8 92 f6 ff ff       	call   c0013e9c <Vm::outbv(unsigned short, unsigned char)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014810:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014814:	74 03                	je     c0014819 <Vm::faultHandler(regs*)+0x4d2>
c0014816:	48                   	dec    eax
c0014817:	eb 01                	jmp    c001481a <Vm::faultHandler(regs*)+0x4d3>
c0014819:	40                   	inc    eax
c001481a:	0f b7 c0             	movzx  eax,ax
c001481d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014820:	e9 92 01 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c0014825:	8d 46 ff             	lea    eax,[esi-0x1]
c0014828:	3c 05                	cmp    al,0x5
c001482a:	77 1f                	ja     c001484b <Vm::faultHandler(regs*)+0x504>
c001482c:	0f b6 c0             	movzx  eax,al
c001482f:	ff 24 85 60 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe18a0]
c0014836:	89 ef                	mov    edi,ebp
c0014838:	eb 11                	jmp    c001484b <Vm::faultHandler(regs*)+0x504>
c001483a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001483d:	eb 0c                	jmp    c001484b <Vm::faultHandler(regs*)+0x504>
c001483f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014842:	eb 07                	jmp    c001484b <Vm::faultHandler(regs*)+0x504>
c0014844:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014847:	eb 02                	jmp    c001484b <Vm::faultHandler(regs*)+0x504>
c0014849:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001484b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001484e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014853:	74 37                	je     c001488c <Vm::faultHandler(regs*)+0x545>
c0014855:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001485b:	76 2f                	jbe    c001488c <Vm::faultHandler(regs*)+0x545>
c001485d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014861:	50                   	push   eax
c0014862:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014866:	50                   	push   eax
c0014867:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001486b:	50                   	push   eax
c001486c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014870:	50                   	push   eax
c0014871:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014875:	50                   	push   eax
c0014876:	6a 6f                	push   0x6f
c0014878:	6a 6f                	push   0x6f
c001487a:	68 ee e6 01 c0       	push   0xc001e6ee
c001487f:	e8 54 5c ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014884:	83 c4 20             	add    esp,0x20
c0014887:	e9 86 01 00 00       	jmp    c0014a12 <Vm::faultHandler(regs*)+0x6cb>
c001488c:	0f b7 d7             	movzx  edx,di
c001488f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014892:	0f b7 c6             	movzx  eax,si
c0014895:	81 e1 00 04 00 00    	and    ecx,0x400
c001489b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001489e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148a3:	74 1d                	je     c00148c2 <Vm::faultHandler(regs*)+0x57b>
c00148a5:	55                   	push   ebp
c00148a6:	55                   	push   ebp
c00148a7:	50                   	push   eax
c00148a8:	52                   	push   edx
c00148a9:	e8 48 fa ff ff       	call   c00142f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00148ae:	83 c4 10             	add    esp,0x10
c00148b1:	89 fa                	mov    edx,edi
c00148b3:	ef                   	out    dx,eax
c00148b4:	85 c9                	test   ecx,ecx
c00148b6:	74 05                	je     c00148bd <Vm::faultHandler(regs*)+0x576>
c00148b8:	83 ee 04             	sub    esi,0x4
c00148bb:	eb 21                	jmp    c00148de <Vm::faultHandler(regs*)+0x597>
c00148bd:	83 c6 04             	add    esi,0x4
c00148c0:	eb 1c                	jmp    c00148de <Vm::faultHandler(regs*)+0x597>
c00148c2:	55                   	push   ebp
c00148c3:	55                   	push   ebp
c00148c4:	50                   	push   eax
c00148c5:	52                   	push   edx
c00148c6:	e8 19 fa ff ff       	call   c00142e4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	89 fa                	mov    edx,edi
c00148d0:	66 ef                	out    dx,ax
c00148d2:	85 c9                	test   ecx,ecx
c00148d4:	74 05                	je     c00148db <Vm::faultHandler(regs*)+0x594>
c00148d6:	83 ee 02             	sub    esi,0x2
c00148d9:	eb 03                	jmp    c00148de <Vm::faultHandler(regs*)+0x597>
c00148db:	83 c6 02             	add    esi,0x2
c00148de:	81 e6 ff ff 00 00    	and    esi,0xffff
c00148e4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00148e7:	e9 cb 00 00 00       	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c00148ec:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148fa:	50                   	push   eax
c00148fb:	e8 89 f5 ff ff       	call   c0013e89 <Vm::inbv(unsigned short)>
c0014900:	0f b6 c0             	movzx  eax,al
c0014903:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014906:	eb 3f                	jmp    c0014947 <Vm::faultHandler(regs*)+0x600>
c0014908:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001490d:	74 07                	je     c0014916 <Vm::faultHandler(regs*)+0x5cf>
c001490f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014913:	ed                   	in     eax,dx
c0014914:	eb 14                	jmp    c001492a <Vm::faultHandler(regs*)+0x5e3>
c0014916:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014919:	66 31 f6             	xor    si,si
c001491c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001491f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014923:	66 ed                	in     ax,dx
c0014925:	0f b7 c0             	movzx  eax,ax
c0014928:	09 f0                	or     eax,esi
c001492a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001492d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014931:	e9 84 00 00 00       	jmp    c00149ba <Vm::faultHandler(regs*)+0x673>
c0014936:	52                   	push   edx
c0014937:	52                   	push   edx
c0014938:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001493c:	50                   	push   eax
c001493d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014941:	50                   	push   eax
c0014942:	e8 55 f5 ff ff       	call   c0013e9c <Vm::outbv(unsigned short, unsigned char)>
c0014947:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001494b:	eb 53                	jmp    c00149a0 <Vm::faultHandler(regs*)+0x659>
c001494d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014950:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014954:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014959:	74 03                	je     c001495e <Vm::faultHandler(regs*)+0x617>
c001495b:	ef                   	out    dx,eax
c001495c:	eb cf                	jmp    c001492d <Vm::faultHandler(regs*)+0x5e6>
c001495e:	66 ef                	out    dx,ax
c0014960:	eb cb                	jmp    c001492d <Vm::faultHandler(regs*)+0x5e6>
c0014962:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014969:	83 ec 0c             	sub    esp,0xc
c001496c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014970:	50                   	push   eax
c0014971:	e8 13 f5 ff ff       	call   c0013e89 <Vm::inbv(unsigned short)>
c0014976:	0f b6 c0             	movzx  eax,al
c0014979:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001497c:	eb 1f                	jmp    c001499d <Vm::faultHandler(regs*)+0x656>
c001497e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014981:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014986:	74 03                	je     c001498b <Vm::faultHandler(regs*)+0x644>
c0014988:	ed                   	in     eax,dx
c0014989:	eb 0d                	jmp    c0014998 <Vm::faultHandler(regs*)+0x651>
c001498b:	66 ed                	in     ax,dx
c001498d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014990:	0f b7 c0             	movzx  eax,ax
c0014993:	66 31 d2             	xor    dx,dx
c0014996:	09 d0                	or     eax,edx
c0014998:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001499b:	eb 1a                	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c001499d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a0:	83 c4 10             	add    esp,0x10
c00149a3:	eb 15                	jmp    c00149ba <Vm::faultHandler(regs*)+0x673>
c00149a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00149a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149ab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149b0:	74 03                	je     c00149b5 <Vm::faultHandler(regs*)+0x66e>
c00149b2:	ef                   	out    dx,eax
c00149b3:	eb 02                	jmp    c00149b7 <Vm::faultHandler(regs*)+0x670>
c00149b5:	66 ef                	out    dx,ax
c00149b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ba:	b0 01                	mov    al,0x1
c00149bc:	eb 56                	jmp    c0014a14 <Vm::faultHandler(regs*)+0x6cd>
c00149be:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00149c2:	50                   	push   eax
c00149c3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00149c7:	50                   	push   eax
c00149c8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00149cc:	50                   	push   eax
c00149cd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00149d1:	50                   	push   eax
c00149d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00149d6:	50                   	push   eax
c00149d7:	52                   	push   edx
c00149d8:	52                   	push   edx
c00149d9:	68 1b e7 01 c0       	push   0xc001e71b
c00149de:	e8 f5 5a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00149e3:	83 c4 20             	add    esp,0x20
c00149e6:	83 ec 0c             	sub    esp,0xc
c00149e9:	6a 60                	push   0x60
c00149eb:	e8 99 f4 ff ff       	call   c0013e89 <Vm::inbv(unsigned short)>
c00149f0:	83 c4 10             	add    esp,0x10
c00149f3:	3c 1c                	cmp    al,0x1c
c00149f5:	74 04                	je     c00149fb <Vm::faultHandler(regs*)+0x6b4>
c00149f7:	3c 5a                	cmp    al,0x5a
c00149f9:	75 eb                	jne    c00149e6 <Vm::faultHandler(regs*)+0x69f>
c00149fb:	3c 5a                	cmp    al,0x5a
c00149fd:	74 04                	je     c0014a03 <Vm::faultHandler(regs*)+0x6bc>
c00149ff:	3c 1c                	cmp    al,0x1c
c0014a01:	75 0f                	jne    c0014a12 <Vm::faultHandler(regs*)+0x6cb>
c0014a03:	83 ec 0c             	sub    esp,0xc
c0014a06:	6a 60                	push   0x60
c0014a08:	e8 7c f4 ff ff       	call   c0013e89 <Vm::inbv(unsigned short)>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	eb e9                	jmp    c00149fb <Vm::faultHandler(regs*)+0x6b4>
c0014a12:	31 c0                	xor    eax,eax
c0014a14:	83 c4 1c             	add    esp,0x1c
c0014a17:	5b                   	pop    ebx
c0014a18:	5e                   	pop    esi
c0014a19:	5f                   	pop    edi
c0014a1a:	5d                   	pop    ebp
c0014a1b:	c3                   	ret    

c0014a1c <noCopro(unsigned long)>:
c0014a1c:	c3                   	ret    

c0014a1d <nmiHandler(regs*, void*)>:
c0014a1d:	83 ec 0c             	sub    esp,0xc
c0014a20:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014a25:	83 ec 0c             	sub    esp,0xc
c0014a28:	50                   	push   eax
c0014a29:	e8 ac 25 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014a2e:	83 c4 10             	add    esp,0x10
c0014a31:	90                   	nop
c0014a32:	83 c4 0c             	add    esp,0xc
c0014a35:	c3                   	ret    

c0014a36 <doubleFault(regs*, void*)>:
c0014a36:	55                   	push   ebp
c0014a37:	89 e5                	mov    ebp,esp
c0014a39:	83 ec 08             	sub    esp,0x8
c0014a3c:	83 ec 0c             	sub    esp,0xc
c0014a3f:	68 78 e7 01 c0       	push   0xc001e778
c0014a44:	e8 f2 b6 ff ff       	call   c001013b <KePanic(char const*)>
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	90                   	nop
c0014a4d:	c9                   	leave  
c0014a4e:	c3                   	ret    

c0014a4f <displayDebugInfo(regs*)>:
c0014a4f:	83 ec 1c             	sub    esp,0x1c
c0014a52:	0f 20 c0             	mov    eax,cr0
c0014a55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a59:	0f 20 d0             	mov    eax,cr2
c0014a5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a60:	0f 20 d8             	mov    eax,cr3
c0014a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a67:	0f 20 e0             	mov    eax,cr4
c0014a6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a71:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014a74:	83 ec 08             	sub    esp,0x8
c0014a77:	50                   	push   eax
c0014a78:	68 94 e7 01 c0       	push   0xc001e794
c0014a7d:	e8 56 5a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014a82:	83 c4 10             	add    esp,0x10
c0014a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a89:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014a8c:	83 ec 08             	sub    esp,0x8
c0014a8f:	50                   	push   eax
c0014a90:	68 85 e7 01 c0       	push   0xc001e785
c0014a95:	e8 3e 5a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014aa4:	83 ec 08             	sub    esp,0x8
c0014aa7:	50                   	push   eax
c0014aa8:	68 90 e7 01 c0       	push   0xc001e790
c0014aad:	e8 26 5a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014abc:	83 ec 08             	sub    esp,0x8
c0014abf:	50                   	push   eax
c0014ac0:	68 9f e7 01 c0       	push   0xc001e79f
c0014ac5:	e8 0e 5a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014aca:	83 c4 10             	add    esp,0x10
c0014acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014ad4:	83 ec 08             	sub    esp,0x8
c0014ad7:	50                   	push   eax
c0014ad8:	68 aa e7 01 c0       	push   0xc001e7aa
c0014add:	e8 f6 59 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	83 ec 08             	sub    esp,0x8
c0014ae8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014aec:	68 b5 e7 01 c0       	push   0xc001e7b5
c0014af1:	e8 e2 59 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	83 ec 08             	sub    esp,0x8
c0014afc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014b00:	68 c0 e7 01 c0       	push   0xc001e7c0
c0014b05:	e8 ce 59 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b18:	83 ec 0c             	sub    esp,0xc
c0014b1b:	50                   	push   eax
c0014b1c:	e8 d6 38 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014b21:	83 c4 10             	add    esp,0x10
c0014b24:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b2f:	83 ec 08             	sub    esp,0x8
c0014b32:	68 cb e7 01 c0       	push   0xc001e7cb
c0014b37:	50                   	push   eax
c0014b38:	e8 f9 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b4b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014b50:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b52:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014b55:	83 c2 0c             	add    edx,0xc
c0014b58:	83 ec 08             	sub    esp,0x8
c0014b5b:	52                   	push   edx
c0014b5c:	50                   	push   eax
c0014b5d:	e8 d4 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b62:	83 c4 10             	add    esp,0x10
c0014b65:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b70:	83 ec 08             	sub    esp,0x8
c0014b73:	68 d4 e7 01 c0       	push   0xc001e7d4
c0014b78:	50                   	push   eax
c0014b79:	e8 b8 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b90:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014b93:	83 ec 08             	sub    esp,0x8
c0014b96:	52                   	push   edx
c0014b97:	50                   	push   eax
c0014b98:	e8 53 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014ba5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bab:	83 ec 08             	sub    esp,0x8
c0014bae:	68 dc e7 01 c0       	push   0xc001e7dc
c0014bb3:	50                   	push   eax
c0014bb4:	e8 7d 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bb9:	83 c4 10             	add    esp,0x10
c0014bbc:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014bc1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bcb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014bce:	83 ec 08             	sub    esp,0x8
c0014bd1:	52                   	push   edx
c0014bd2:	50                   	push   eax
c0014bd3:	e8 18 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014be0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014be6:	83 ec 08             	sub    esp,0x8
c0014be9:	68 e4 e7 01 c0       	push   0xc001e7e4
c0014bee:	50                   	push   eax
c0014bef:	e8 42 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bf4:	83 c4 10             	add    esp,0x10
c0014bf7:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014bfc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c06:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014c09:	83 ec 08             	sub    esp,0x8
c0014c0c:	52                   	push   edx
c0014c0d:	50                   	push   eax
c0014c0e:	e8 dd 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c13:	83 c4 10             	add    esp,0x10
c0014c16:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c21:	83 ec 08             	sub    esp,0x8
c0014c24:	68 ec e7 01 c0       	push   0xc001e7ec
c0014c29:	50                   	push   eax
c0014c2a:	e8 07 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c41:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014c44:	83 ec 08             	sub    esp,0x8
c0014c47:	52                   	push   edx
c0014c48:	50                   	push   eax
c0014c49:	e8 a2 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c4e:	83 c4 10             	add    esp,0x10
c0014c51:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c5c:	83 ec 08             	sub    esp,0x8
c0014c5f:	68 f4 e7 01 c0       	push   0xc001e7f4
c0014c64:	50                   	push   eax
c0014c65:	e8 cc 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c6a:	83 c4 10             	add    esp,0x10
c0014c6d:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c7c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014c7f:	83 ec 08             	sub    esp,0x8
c0014c82:	52                   	push   edx
c0014c83:	50                   	push   eax
c0014c84:	e8 67 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c89:	83 c4 10             	add    esp,0x10
c0014c8c:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c97:	83 ec 08             	sub    esp,0x8
c0014c9a:	68 fc e7 01 c0       	push   0xc001e7fc
c0014c9f:	50                   	push   eax
c0014ca0:	e8 91 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ca5:	83 c4 10             	add    esp,0x10
c0014ca8:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014cad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cb7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014cba:	83 ec 08             	sub    esp,0x8
c0014cbd:	52                   	push   edx
c0014cbe:	50                   	push   eax
c0014cbf:	e8 2c 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cc4:	83 c4 10             	add    esp,0x10
c0014cc7:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014ccc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd2:	83 ec 08             	sub    esp,0x8
c0014cd5:	68 04 e8 01 c0       	push   0xc001e804
c0014cda:	50                   	push   eax
c0014cdb:	e8 56 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ce0:	83 c4 10             	add    esp,0x10
c0014ce3:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014ce8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cee:	83 ec 08             	sub    esp,0x8
c0014cf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014cf5:	50                   	push   eax
c0014cf6:	e8 f5 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cfb:	83 c4 10             	add    esp,0x10
c0014cfe:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d09:	83 ec 08             	sub    esp,0x8
c0014d0c:	68 0d e8 01 c0       	push   0xc001e80d
c0014d11:	50                   	push   eax
c0014d12:	e8 1f 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d25:	83 ec 08             	sub    esp,0x8
c0014d28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d2c:	50                   	push   eax
c0014d2d:	e8 be 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d32:	83 c4 10             	add    esp,0x10
c0014d35:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d40:	83 ec 08             	sub    esp,0x8
c0014d43:	68 15 e8 01 c0       	push   0xc001e815
c0014d48:	50                   	push   eax
c0014d49:	e8 e8 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d5c:	83 ec 08             	sub    esp,0x8
c0014d5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014d63:	50                   	push   eax
c0014d64:	e8 87 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	fa                   	cli    
c0014d6d:	f4                   	hlt    
c0014d6e:	eb fe                	jmp    c0014d6e <displayDebugInfo(regs*)+0x31f>

c0014d70 <HalSystemIdle()>:
c0014d70:	56                   	push   esi
c0014d71:	53                   	push   ebx
c0014d72:	83 ec 14             	sub    esp,0x14
c0014d75:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014d7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d80:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014d86:	83 e0 04             	and    eax,0x4
c0014d89:	84 c0                	test   al,al
c0014d8b:	0f 95 c0             	setne  al
c0014d8e:	84 c0                	test   al,al
c0014d90:	74 4c                	je     c0014dde <HalSystemIdle()+0x6e>
c0014d92:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014d97:	83 ec 08             	sub    esp,0x8
c0014d9a:	68 e1 00 00 00       	push   0xe1
c0014d9f:	50                   	push   eax
c0014da0:	e8 4d 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014da5:	83 c4 10             	add    esp,0x10
c0014da8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014dac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014db0:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014db5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014db9:	83 e2 02             	and    edx,0x2
c0014dbc:	89 d3                	mov    ebx,edx
c0014dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dc2:	83 e2 00             	and    edx,0x0
c0014dc5:	89 d6                	mov    esi,edx
c0014dc7:	56                   	push   esi
c0014dc8:	53                   	push   ebx
c0014dc9:	68 e1 00 00 00       	push   0xe1
c0014dce:	50                   	push   eax
c0014dcf:	e8 4a 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014dd4:	83 c4 10             	add    esp,0x10
c0014dd7:	e8 b8 b3 fe ff       	call   c0000194 <doTPAUSE>
c0014ddc:	eb 01                	jmp    c0014ddf <HalSystemIdle()+0x6f>
c0014dde:	f4                   	hlt    
c0014ddf:	90                   	nop
c0014de0:	83 c4 14             	add    esp,0x14
c0014de3:	5b                   	pop    ebx
c0014de4:	5e                   	pop    esi
c0014de5:	c3                   	ret    

c0014de6 <displayProgramFault(char const*)>:
c0014de6:	83 ec 0c             	sub    esp,0xc
c0014de9:	83 ec 0c             	sub    esp,0xc
c0014dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df0:	e8 e3 56 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014df5:	83 c4 10             	add    esp,0x10
c0014df8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e08:	85 c0                	test   eax,eax
c0014e0a:	74 21                	je     c0014e2d <displayProgramFault(char const*)+0x47>
c0014e0c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e1c:	6a 04                	push   0x4
c0014e1e:	6a 0f                	push   0xf
c0014e20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e24:	50                   	push   eax
c0014e25:	e8 7e 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014e2a:	83 c4 10             	add    esp,0x10
c0014e2d:	90                   	nop
c0014e2e:	83 c4 0c             	add    esp,0xc
c0014e31:	c3                   	ret    

c0014e32 <gpFault(regs*, void*)>:
c0014e32:	83 ec 1c             	sub    esp,0x1c
c0014e35:	c7 05 f0 37 02 c0 47 43 01 c0 	mov    DWORD PTR ds:0xc00237f0,0xc0014347
c0014e3f:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c0014e44:	85 c0                	test   eax,eax
c0014e46:	74 1c                	je     c0014e64 <gpFault(regs*, void*)+0x32>
c0014e48:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c0014e4d:	83 ec 0c             	sub    esp,0xc
c0014e50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e54:	ff d0                	call   eax
c0014e56:	83 c4 10             	add    esp,0x10
c0014e59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014e5d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e62:	75 2e                	jne    c0014e92 <gpFault(regs*, void*)+0x60>
c0014e64:	83 ec 0c             	sub    esp,0xc
c0014e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e6b:	e8 df fb ff ff       	call   c0014a4f <displayDebugInfo(regs*)>
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	83 ec 0c             	sub    esp,0xc
c0014e76:	68 1d e8 01 c0       	push   0xc001e81d
c0014e7b:	e8 66 ff ff ff       	call   c0014de6 <displayProgramFault(char const*)>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	83 ec 0c             	sub    esp,0xc
c0014e86:	6a 00                	push   0x0
c0014e88:	e8 af ee ff ff       	call   c0013d3c <Thr::terminateFromIRQ(int)>
c0014e8d:	83 c4 10             	add    esp,0x10
c0014e90:	eb 01                	jmp    c0014e93 <gpFault(regs*, void*)+0x61>
c0014e92:	90                   	nop
c0014e93:	83 c4 1c             	add    esp,0x1c
c0014e96:	c3                   	ret    

c0014e97 <pgFault(regs*, void*)>:
c0014e97:	83 ec 1c             	sub    esp,0x1c
c0014e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e9e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ea1:	0f 20 d0             	mov    eax,cr2
c0014ea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014eac:	83 ec 04             	sub    esp,0x4
c0014eaf:	52                   	push   edx
c0014eb0:	50                   	push   eax
c0014eb1:	68 fc e8 01 c0       	push   0xc001e8fc
c0014eb6:	e8 1d 56 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014ebb:	83 c4 10             	add    esp,0x10
c0014ebe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ec8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014ece:	0f 20 d2             	mov    edx,cr2
c0014ed1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ed5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ed9:	83 ec 08             	sub    esp,0x8
c0014edc:	52                   	push   edx
c0014edd:	50                   	push   eax
c0014ede:	e8 27 52 ff ff       	call   c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	84 c0                	test   al,al
c0014ee8:	75 2e                	jne    c0014f18 <pgFault(regs*, void*)+0x81>
c0014eea:	83 ec 0c             	sub    esp,0xc
c0014eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ef1:	e8 59 fb ff ff       	call   c0014a4f <displayDebugInfo(regs*)>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	83 ec 0c             	sub    esp,0xc
c0014efc:	68 36 e8 01 c0       	push   0xc001e836
c0014f01:	e8 e0 fe ff ff       	call   c0014de6 <displayProgramFault(char const*)>
c0014f06:	83 c4 10             	add    esp,0x10
c0014f09:	83 ec 0c             	sub    esp,0xc
c0014f0c:	6a 00                	push   0x0
c0014f0e:	e8 29 ee ff ff       	call   c0013d3c <Thr::terminateFromIRQ(int)>
c0014f13:	83 c4 10             	add    esp,0x10
c0014f16:	eb 01                	jmp    c0014f19 <pgFault(regs*, void*)+0x82>
c0014f18:	90                   	nop
c0014f19:	83 c4 1c             	add    esp,0x1c
c0014f1c:	c3                   	ret    

c0014f1d <otherISRHandler(regs*, void*)>:
c0014f1d:	83 ec 0c             	sub    esp,0xc
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f27:	e8 23 fb ff ff       	call   c0014a4f <displayDebugInfo(regs*)>
c0014f2c:	83 c4 10             	add    esp,0x10
c0014f2f:	83 ec 0c             	sub    esp,0xc
c0014f32:	68 24 e9 01 c0       	push   0xc001e924
c0014f37:	e8 aa fe ff ff       	call   c0014de6 <displayProgramFault(char const*)>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	83 ec 0c             	sub    esp,0xc
c0014f42:	6a 00                	push   0x0
c0014f44:	e8 f3 ed ff ff       	call   c0013d3c <Thr::terminateFromIRQ(int)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	90                   	nop
c0014f4d:	83 c4 0c             	add    esp,0xc
c0014f50:	c3                   	ret    

c0014f51 <opcodeFault(regs*, void*)>:
c0014f51:	55                   	push   ebp
c0014f52:	89 e5                	mov    ebp,esp
c0014f54:	83 ec 08             	sub    esp,0x8
c0014f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f5d:	83 ec 08             	sub    esp,0x8
c0014f60:	50                   	push   eax
c0014f61:	68 41 e8 01 c0       	push   0xc001e841
c0014f66:	e8 6d 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f6b:	83 c4 10             	add    esp,0x10
c0014f6e:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014f73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f79:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014f7f:	84 c0                	test   al,al
c0014f81:	74 21                	je     c0014fa4 <opcodeFault(regs*, void*)+0x53>
c0014f83:	83 ec 0c             	sub    esp,0xc
c0014f86:	68 4c e9 01 c0       	push   0xc001e94c
c0014f8b:	e8 48 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f99:	8d 50 19             	lea    edx,[eax+0x19]
c0014f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa2:	eb 2b                	jmp    c0014fcf <opcodeFault(regs*, void*)+0x7e>
c0014fa4:	83 ec 0c             	sub    esp,0xc
c0014fa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014faa:	e8 a0 fa ff ff       	call   c0014a4f <displayDebugInfo(regs*)>
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	83 ec 0c             	sub    esp,0xc
c0014fb5:	68 4f e8 01 c0       	push   0xc001e84f
c0014fba:	e8 27 fe ff ff       	call   c0014de6 <displayProgramFault(char const*)>
c0014fbf:	83 c4 10             	add    esp,0x10
c0014fc2:	83 ec 0c             	sub    esp,0xc
c0014fc5:	6a 00                	push   0x0
c0014fc7:	e8 70 ed ff ff       	call   c0013d3c <Thr::terminateFromIRQ(int)>
c0014fcc:	83 c4 10             	add    esp,0x10
c0014fcf:	c9                   	leave  
c0014fd0:	c3                   	ret    

c0014fd1 <i386SaveCoprocessor(void*)>:
c0014fd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fd5:	83 c0 3f             	add    eax,0x3f
c0014fd8:	83 e0 c0             	and    eax,0xffffffc0
c0014fdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fdf:	ff 25 ec 37 02 c0    	jmp    DWORD PTR ds:0xc00237ec

c0014fe5 <i386LoadCoprocessor(void*)>:
c0014fe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fe9:	83 c0 3f             	add    eax,0x3f
c0014fec:	83 e0 c0             	and    eax,0xffffffc0
c0014fef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ff3:	ff 25 e8 37 02 c0    	jmp    DWORD PTR ds:0xc00237e8

c0014ff9 <x87EmulHandler(regs*, void*)>:
c0014ff9:	53                   	push   ebx
c0014ffa:	83 ec 08             	sub    esp,0x8
c0014ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015002:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015006:	74 10                	je     c0015018 <x87EmulHandler(regs*, void*)+0x1f>
c0015008:	83 ec 0c             	sub    esp,0xc
c001500b:	68 5c e8 01 c0       	push   0xc001e85c
c0015010:	e8 26 b1 ff ff       	call   c001013b <KePanic(char const*)>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	0f 20 c0             	mov    eax,cr0
c001501b:	a8 08                	test   al,0x8
c001501d:	74 59                	je     c0015078 <x87EmulHandler(regs*, void*)+0x7f>
c001501f:	0f 06                	clts   
c0015021:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c0015026:	85 c0                	test   eax,eax
c0015028:	74 0e                	je     c0015038 <x87EmulHandler(regs*, void*)+0x3f>
c001502a:	83 ec 0c             	sub    esp,0xc
c001502d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015030:	e8 9c ff ff ff       	call   c0014fd1 <i386SaveCoprocessor(void*)>
c0015035:	83 c4 10             	add    esp,0x10
c0015038:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001503e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015042:	75 12                	jne    c0015056 <x87EmulHandler(regs*, void*)+0x5d>
c0015044:	83 ec 0c             	sub    esp,0xc
c0015047:	68 40 02 00 00       	push   0x240
c001504c:	e8 68 27 ff ff       	call   c00077b9 <malloc>
c0015051:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015054:	eb 10                	jmp    c0015066 <x87EmulHandler(regs*, void*)+0x6d>
c0015056:	83 ec 0c             	sub    esp,0xc
c0015059:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c001505e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015061:	e8 7f ff ff ff       	call   c0014fe5 <i386LoadCoprocessor(void*)>
c0015066:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	a3 e4 37 02 c0       	mov    ds:0xc00237e4,eax
c0015073:	83 c4 08             	add    esp,0x8
c0015076:	5b                   	pop    ebx
c0015077:	c3                   	ret    
c0015078:	83 ec 0c             	sub    esp,0xc
c001507b:	68 70 e8 01 c0       	push   0xc001e870
c0015080:	e8 53 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015085:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001508d:	83 c4 18             	add    esp,0x18
c0015090:	5b                   	pop    ebx
c0015091:	e9 a6 ec ff ff       	jmp    c0013d3c <Thr::terminateFromIRQ(int)>

c0015096 <HalInitialiseCoprocessor()>:
c0015096:	83 ec 10             	sub    esp,0x10
c0015099:	c7 05 e4 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e4,0x0
c00150a3:	6a 00                	push   0x0
c00150a5:	68 f9 4f 01 c0       	push   0xc0014ff9
c00150aa:	6a 07                	push   0x7
c00150ac:	e8 9b 6d ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00150b1:	e8 9a 65 00 00       	call   c001b650 <avxDetect>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	85 c0                	test   eax,eax
c00150bb:	74 1c                	je     c00150d9 <HalInitialiseCoprocessor()+0x43>
c00150bd:	c7 05 ec 37 02 c0 7a b6 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001b67a
c00150c7:	c7 05 e8 37 02 c0 8b b6 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc001b68b
c00150d1:	83 c4 0c             	add    esp,0xc
c00150d4:	e9 c3 65 00 00       	jmp    c001b69c <avxInit>
c00150d9:	e8 f2 67 00 00       	call   c001b8d0 <absolutelyNoChanceInHell>
c00150de:	85 c0                	test   eax,eax
c00150e0:	74 1c                	je     c00150fe <HalInitialiseCoprocessor()+0x68>
c00150e2:	c7 05 ec 37 02 c0 e8 b8 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001b8e8
c00150ec:	c7 05 e8 37 02 c0 f0 b8 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc001b8f0
c00150f6:	83 c4 0c             	add    esp,0xc
c00150f9:	e9 fa 67 00 00       	jmp    c001b8f8 <sseInit>
c00150fe:	e8 13 68 00 00       	call   c001b916 <x87Detect>
c0015103:	85 c0                	test   eax,eax
c0015105:	74 1c                	je     c0015123 <HalInitialiseCoprocessor()+0x8d>
c0015107:	c7 05 ec 37 02 c0 31 b9 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001b931
c0015111:	c7 05 e8 37 02 c0 38 b9 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc001b938
c001511b:	83 c4 0c             	add    esp,0xc
c001511e:	e9 1c 68 00 00       	jmp    c001b93f <x87Init>
c0015123:	c7 05 ec 37 02 c0 1c 4a 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc0014a1c
c001512d:	c7 05 e8 37 02 c0 1c 4a 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc0014a1c
c0015137:	0f 20 c0             	mov    eax,cr0
c001513a:	83 c8 04             	or     eax,0x4
c001513d:	0f 22 c0             	mov    cr0,eax
c0015140:	83 c4 0c             	add    esp,0xc
c0015143:	c3                   	ret    

c0015144 <HalPanic(char const*)>:
c0015144:	53                   	push   ebx
c0015145:	83 ec 10             	sub    esp,0x10
c0015148:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001514c:	fa                   	cli    
c001514d:	53                   	push   ebx
c001514e:	68 86 e8 01 c0       	push   0xc001e886
c0015153:	e8 80 53 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015158:	83 c4 0c             	add    esp,0xc
c001515b:	6a 01                	push   0x1
c001515d:	6a 0f                	push   0xf
c001515f:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015165:	e8 e0 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001516a:	58                   	pop    eax
c001516b:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015171:	e8 cc 32 ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015176:	5a                   	pop    edx
c0015177:	59                   	pop    ecx
c0015178:	68 28 d3 01 c0       	push   0xc001d328
c001517d:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015183:	e8 fa 30 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015188:	83 c4 0c             	add    esp,0xc
c001518b:	6a 01                	push   0x1
c001518d:	6a 0f                	push   0xf
c001518f:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015195:	e8 b0 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001519a:	58                   	pop    eax
c001519b:	5a                   	pop    edx
c001519c:	68 9f e8 01 c0       	push   0xc001e89f
c00151a1:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151a7:	e8 8a 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151ac:	83 c4 0c             	add    esp,0xc
c00151af:	6a 0f                	push   0xf
c00151b1:	6a 01                	push   0x1
c00151b3:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151b9:	e8 8c 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151be:	59                   	pop    ecx
c00151bf:	58                   	pop    eax
c00151c0:	68 a8 e8 01 c0       	push   0xc001e8a8
c00151c5:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151cb:	e8 66 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151d0:	83 c4 0c             	add    esp,0xc
c00151d3:	6a 01                	push   0x1
c00151d5:	6a 0f                	push   0xf
c00151d7:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151dd:	e8 68 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151e2:	58                   	pop    eax
c00151e3:	5a                   	pop    edx
c00151e4:	68 ec e8 01 c0       	push   0xc001e8ec
c00151e9:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151ef:	e8 42 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151f4:	59                   	pop    ecx
c00151f5:	58                   	pop    eax
c00151f6:	68 b5 e8 01 c0       	push   0xc001e8b5
c00151fb:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015201:	e8 30 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015206:	58                   	pop    eax
c0015207:	5a                   	pop    edx
c0015208:	68 ef e8 01 c0       	push   0xc001e8ef
c001520d:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015213:	e8 1e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015218:	59                   	pop    ecx
c0015219:	58                   	pop    eax
c001521a:	53                   	push   ebx
c001521b:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015221:	e8 10 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015226:	58                   	pop    eax
c0015227:	5a                   	pop    edx
c0015228:	68 ec e8 01 c0       	push   0xc001e8ec
c001522d:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015233:	e8 fe 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	eb fe                	jmp    c001523b <HalPanic(char const*)+0xf7>

c001523d <HalQueryPerformanceCounter()>:
c001523d:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0015242:	31 d2                	xor    edx,edx
c0015244:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001524a:	31 c0                	xor    eax,eax
c001524c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015253:	74 02                	je     c0015257 <HalQueryPerformanceCounter()+0x1a>
c0015255:	0f 31                	rdtsc  
c0015257:	c3                   	ret    

c0015258 <HalInitialise()>:
c0015258:	53                   	push   ebx
c0015259:	83 ec 08             	sub    esp,0x8
c001525c:	e8 1e 6e ff ff       	call   c000c07f <setupINTS()>
c0015261:	80 3d 60 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d60,0x0
c0015268:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001526d:	75 07                	jne    c0015276 <HalInitialise()+0x1e>
c001526f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015276:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001527c:	83 e0 01             	and    eax,0x1
c001527f:	a2 e0 37 02 c0       	mov    ds:0xc00237e0,al
c0015284:	e8 a7 02 00 00       	call   c0015530 <picOpen()>
c0015289:	80 3d e0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e0,0x0
c0015290:	74 0a                	je     c001529c <HalInitialise()+0x44>
c0015292:	e8 e1 01 00 00       	call   c0015478 <picDisable()>
c0015297:	e8 26 5d 00 00       	call   c001afc2 <apicOpen()>
c001529c:	bb 0f 00 00 00       	mov    ebx,0xf
c00152a1:	50                   	push   eax
c00152a2:	6a 00                	push   0x0
c00152a4:	68 1d 4f 01 c0       	push   0xc0014f1d
c00152a9:	6a 00                	push   0x0
c00152ab:	e8 9c 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152b0:	83 c4 0c             	add    esp,0xc
c00152b3:	6a 00                	push   0x0
c00152b5:	68 1d 4f 01 c0       	push   0xc0014f1d
c00152ba:	6a 01                	push   0x1
c00152bc:	e8 8b 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152c1:	83 c4 0c             	add    esp,0xc
c00152c4:	6a 00                	push   0x0
c00152c6:	68 1d 4a 01 c0       	push   0xc0014a1d
c00152cb:	6a 02                	push   0x2
c00152cd:	e8 7a 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152d2:	83 c4 0c             	add    esp,0xc
c00152d5:	6a 00                	push   0x0
c00152d7:	68 1d 4f 01 c0       	push   0xc0014f1d
c00152dc:	6a 03                	push   0x3
c00152de:	e8 69 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152e3:	83 c4 0c             	add    esp,0xc
c00152e6:	6a 00                	push   0x0
c00152e8:	68 1d 4f 01 c0       	push   0xc0014f1d
c00152ed:	6a 04                	push   0x4
c00152ef:	e8 58 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152f4:	83 c4 0c             	add    esp,0xc
c00152f7:	6a 00                	push   0x0
c00152f9:	68 1d 4f 01 c0       	push   0xc0014f1d
c00152fe:	6a 05                	push   0x5
c0015300:	e8 47 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015305:	83 c4 0c             	add    esp,0xc
c0015308:	6a 00                	push   0x0
c001530a:	68 51 4f 01 c0       	push   0xc0014f51
c001530f:	6a 06                	push   0x6
c0015311:	e8 36 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015316:	83 c4 0c             	add    esp,0xc
c0015319:	6a 00                	push   0x0
c001531b:	68 36 4a 01 c0       	push   0xc0014a36
c0015320:	6a 08                	push   0x8
c0015322:	e8 25 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015327:	83 c4 0c             	add    esp,0xc
c001532a:	6a 00                	push   0x0
c001532c:	68 1d 4f 01 c0       	push   0xc0014f1d
c0015331:	6a 09                	push   0x9
c0015333:	e8 14 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015338:	83 c4 0c             	add    esp,0xc
c001533b:	6a 00                	push   0x0
c001533d:	68 1d 4f 01 c0       	push   0xc0014f1d
c0015342:	6a 0a                	push   0xa
c0015344:	e8 03 6b ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015349:	83 c4 0c             	add    esp,0xc
c001534c:	6a 00                	push   0x0
c001534e:	68 1d 4f 01 c0       	push   0xc0014f1d
c0015353:	6a 0b                	push   0xb
c0015355:	e8 f2 6a ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001535a:	83 c4 0c             	add    esp,0xc
c001535d:	6a 00                	push   0x0
c001535f:	68 32 4e 01 c0       	push   0xc0014e32
c0015364:	6a 0d                	push   0xd
c0015366:	e8 e1 6a ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001536b:	83 c4 0c             	add    esp,0xc
c001536e:	6a 00                	push   0x0
c0015370:	68 97 4e 01 c0       	push   0xc0014e97
c0015375:	6a 0e                	push   0xe
c0015377:	e8 d0 6a ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001537c:	83 c4 10             	add    esp,0x10
c001537f:	50                   	push   eax
c0015380:	6a 00                	push   0x0
c0015382:	68 1d 4f 01 c0       	push   0xc0014f1d
c0015387:	53                   	push   ebx
c0015388:	43                   	inc    ebx
c0015389:	e8 be 6a ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001538e:	83 c4 10             	add    esp,0x10
c0015391:	83 fb 1e             	cmp    ebx,0x1e
c0015394:	75 e9                	jne    c001537f <HalInitialise()+0x127>
c0015396:	50                   	push   eax
c0015397:	6a 00                	push   0x0
c0015399:	68 1b 10 01 c0       	push   0xc001101b
c001539e:	6a 60                	push   0x60
c00153a0:	e8 a7 6a ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153a5:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00153aa:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00153b4:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00153bb:	e8 f9 23 ff ff       	call   c00077b9 <malloc>
c00153c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00153c3:	89 c3                	mov    ebx,eax
c00153c5:	e8 2e 09 00 00       	call   c0015cf8 <RTC::RTC()>
c00153ca:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00153d4:	5a                   	pop    edx
c00153d5:	59                   	pop    ecx
c00153d6:	53                   	push   ebx
c00153d7:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00153dd:	e8 36 65 ff ff       	call   c000b918 <Device::addChild(Device*)>
c00153e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153e4:	6a 00                	push   0x0
c00153e6:	6a 00                	push   0x0
c00153e8:	6a 00                	push   0x0
c00153ea:	53                   	push   ebx
c00153eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153ee:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00153f3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00153f9:	83 c4 28             	add    esp,0x28
c00153fc:	5b                   	pop    ebx
c00153fd:	c3                   	ret    

c00153fe <HalMakeBeep(int)>:
c00153fe:	53                   	push   ebx
c00153ff:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015403:	85 db                	test   ebx,ebx
c0015405:	75 07                	jne    c001540e <HalMakeBeep(int)+0x10>
c0015407:	e4 61                	in     al,0x61
c0015409:	83 e0 fc             	and    eax,0xfffffffc
c001540c:	eb 26                	jmp    c0015434 <HalMakeBeep(int)+0x36>
c001540e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015413:	99                   	cdq    
c0015414:	f7 fb                	idiv   ebx
c0015416:	89 c1                	mov    ecx,eax
c0015418:	b0 b6                	mov    al,0xb6
c001541a:	e6 43                	out    0x43,al
c001541c:	88 c8                	mov    al,cl
c001541e:	e6 42                	out    0x42,al
c0015420:	89 c8                	mov    eax,ecx
c0015422:	c1 e8 08             	shr    eax,0x8
c0015425:	e6 42                	out    0x42,al
c0015427:	e4 61                	in     al,0x61
c0015429:	88 c2                	mov    dl,al
c001542b:	83 ca 03             	or     edx,0x3
c001542e:	38 c2                	cmp    dl,al
c0015430:	74 04                	je     c0015436 <HalMakeBeep(int)+0x38>
c0015432:	88 d0                	mov    al,dl
c0015434:	e6 61                	out    0x61,al
c0015436:	5b                   	pop    ebx
c0015437:	c3                   	ret    

c0015438 <HalGetRand()>:
c0015438:	31 c0                	xor    eax,eax
c001543a:	c3                   	ret    

c001543b <HalEndOfInterrupt(int)>:
c001543b:	80 3d e0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e0,0x0
c0015442:	74 23                	je     c0015467 <HalEndOfInterrupt(int)+0x2c>
c0015444:	83 ec 14             	sub    esp,0x14
c0015447:	6a 1b                	push   0x1b
c0015449:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001544f:	e8 9e 19 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015454:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015459:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015463:	83 c4 1c             	add    esp,0x1c
c0015466:	c3                   	ret    
c0015467:	e9 54 02 00 00       	jmp    c00156c0 <picEOI(int)>

c001546c <HalRestart()>:
c001546c:	c3                   	ret    

c001546d <HalShutdown()>:
c001546d:	c3                   	ret    

c001546e <HalSleep()>:
c001546e:	c3                   	ret    
c001546f:	90                   	nop

c0015470 <picIoWait()>:
c0015470:	eb 00                	jmp    c0015472 <picIoWait()+0x2>
c0015472:	eb 00                	jmp    c0015474 <picIoWait()+0x4>
c0015474:	90                   	nop
c0015475:	c3                   	ret    
c0015476:	66 90                	xchg   ax,ax

c0015478 <picDisable()>:
c0015478:	83 ec 10             	sub    esp,0x10
c001547b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015482:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015487:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001548b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015490:	ee                   	out    dx,al
c0015491:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015498:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001549d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00154a1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00154a6:	ee                   	out    dx,al
c00154a7:	90                   	nop
c00154a8:	83 c4 10             	add    esp,0x10
c00154ab:	c3                   	ret    

c00154ac <picGetIRQReg(int)>:
c00154ac:	83 ec 10             	sub    esp,0x10
c00154af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154b3:	25 ff 00 00 00       	and    eax,0xff
c00154b8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00154bf:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00154c3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00154c7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00154cc:	ee                   	out    dx,al
c00154cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154d1:	25 ff 00 00 00       	and    eax,0xff
c00154d6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00154dd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00154e1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00154e5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00154ea:	ee                   	out    dx,al
c00154eb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00154f2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00154f7:	89 c2                	mov    edx,eax
c00154f9:	ec                   	in     al,dx
c00154fa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154fe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015502:	25 ff 00 00 00       	and    eax,0xff
c0015507:	c1 e0 08             	shl    eax,0x8
c001550a:	89 c1                	mov    ecx,eax
c001550c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015513:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015518:	89 c2                	mov    edx,eax
c001551a:	ec                   	in     al,dx
c001551b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001551f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015523:	25 ff 00 00 00       	and    eax,0xff
c0015528:	09 c8                	or     eax,ecx
c001552a:	83 c4 10             	add    esp,0x10
c001552d:	c3                   	ret    
c001552e:	66 90                	xchg   ax,ax

c0015530 <picOpen()>:
c0015530:	83 ec 50             	sub    esp,0x50
c0015533:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001553a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001553f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015543:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015547:	ee                   	out    dx,al
c0015548:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001554f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015554:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015558:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001555c:	ee                   	out    dx,al
c001555d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015565:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001556d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015574:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015578:	89 c2                	mov    edx,eax
c001557a:	ec                   	in     al,dx
c001557b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001557f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015583:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015587:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001558e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015592:	89 c2                	mov    edx,eax
c0015594:	ec                   	in     al,dx
c0015595:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015599:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001559d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00155a1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00155a8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00155ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00155b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155b5:	ee                   	out    dx,al
c00155b6:	e8 b5 fe ff ff       	call   c0015470 <picIoWait()>
c00155bb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00155c2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00155c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00155cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155cf:	ee                   	out    dx,al
c00155d0:	e8 9b fe ff ff       	call   c0015470 <picIoWait()>
c00155d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155d9:	25 ff 00 00 00       	and    eax,0xff
c00155de:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00155e5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00155e9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00155ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155f1:	ee                   	out    dx,al
c00155f2:	e8 79 fe ff ff       	call   c0015470 <picIoWait()>
c00155f7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00155fb:	25 ff 00 00 00       	and    eax,0xff
c0015600:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015607:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001560b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001560f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015613:	ee                   	out    dx,al
c0015614:	e8 57 fe ff ff       	call   c0015470 <picIoWait()>
c0015619:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015620:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015625:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015629:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001562d:	ee                   	out    dx,al
c001562e:	e8 3d fe ff ff       	call   c0015470 <picIoWait()>
c0015633:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001563a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001563f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015643:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015647:	ee                   	out    dx,al
c0015648:	e8 23 fe ff ff       	call   c0015470 <picIoWait()>
c001564d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015654:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015659:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001565d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015661:	ee                   	out    dx,al
c0015662:	e8 09 fe ff ff       	call   c0015470 <picIoWait()>
c0015667:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001566e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015673:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015677:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001567b:	ee                   	out    dx,al
c001567c:	e8 ef fd ff ff       	call   c0015470 <picIoWait()>
c0015681:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015685:	25 ff 00 00 00       	and    eax,0xff
c001568a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015691:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015695:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015699:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001569d:	ee                   	out    dx,al
c001569e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c00156a2:	25 ff 00 00 00       	and    eax,0xff
c00156a7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00156ae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00156b2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00156b6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00156ba:	ee                   	out    dx,al
c00156bb:	90                   	nop
c00156bc:	83 c4 50             	add    esp,0x50
c00156bf:	c3                   	ret    

c00156c0 <picEOI(int)>:
c00156c0:	83 ec 10             	sub    esp,0x10
c00156c3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00156c8:	75 22                	jne    c00156ec <picEOI(int)+0x2c>
c00156ca:	6a 0b                	push   0xb
c00156cc:	e8 db fd ff ff       	call   c00154ac <picGetIRQReg(int)>
c00156d1:	83 c4 04             	add    esp,0x4
c00156d4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00156d9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00156de:	25 ff ff 00 00       	and    eax,0xffff
c00156e3:	25 80 00 00 00       	and    eax,0x80
c00156e8:	74 72                	je     c001575c <picEOI(int)+0x9c>
c00156ea:	66 90                	xchg   ax,ax
c00156ec:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00156f1:	75 31                	jne    c0015724 <picEOI(int)+0x64>
c00156f3:	6a 0b                	push   0xb
c00156f5:	e8 b2 fd ff ff       	call   c00154ac <picGetIRQReg(int)>
c00156fa:	83 c4 04             	add    esp,0x4
c00156fd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015706:	66 85 c0             	test   ax,ax
c0015709:	78 19                	js     c0015724 <picEOI(int)+0x64>
c001570b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015712:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015717:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001571b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015720:	ee                   	out    dx,al
c0015721:	eb 3d                	jmp    c0015760 <picEOI(int)+0xa0>
c0015723:	90                   	nop
c0015724:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015729:	7e 19                	jle    c0015744 <picEOI(int)+0x84>
c001572b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015732:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015737:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001573b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015740:	ee                   	out    dx,al
c0015741:	8d 76 00             	lea    esi,[esi+0x0]
c0015744:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001574b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015750:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015754:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015759:	ee                   	out    dx,al
c001575a:	eb 04                	jmp    c0015760 <picEOI(int)+0xa0>
c001575c:	90                   	nop
c001575d:	8d 76 00             	lea    esi,[esi+0x0]
c0015760:	83 c4 10             	add    esp,0x10
c0015763:	c3                   	ret    

c0015764 <RTC::open(int, int, void*)>:
c0015764:	31 c0                	xor    eax,eax
c0015766:	c3                   	ret    
c0015767:	90                   	nop

c0015768 <RTC::close(int, int, void*)>:
c0015768:	31 c0                	xor    eax,eax
c001576a:	c3                   	ret    
c001576b:	90                   	nop

c001576c <RTC::timeInSecondsUTC()>:
c001576c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015770:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015776:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001577c:	c3                   	ret    
c001577d:	90                   	nop

c001577e <RTC::timeInDatetimeUTC()>:
c001577e:	53                   	push   ebx
c001577f:	83 ec 14             	sub    esp,0x14
c0015782:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001578a:	8b 10                	mov    edx,DWORD PTR [eax]
c001578c:	50                   	push   eax
c001578d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015790:	83 c4 0c             	add    esp,0xc
c0015793:	52                   	push   edx
c0015794:	50                   	push   eax
c0015795:	53                   	push   ebx
c0015796:	e8 f1 5e ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c001579b:	89 d8                	mov    eax,ebx
c001579d:	83 c4 14             	add    esp,0x14
c00157a0:	5b                   	pop    ebx
c00157a1:	c2 04 00             	ret    0x4

c00157a4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00157a4:	56                   	push   esi
c00157a5:	53                   	push   ebx
c00157a6:	83 ec 14             	sub    esp,0x14
c00157a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157af:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00157b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00157b6:	52                   	push   edx
c00157b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157bf:	50                   	push   eax
c00157c0:	e8 c7 5e ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c00157c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00157cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00157d1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00157d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00157d9:	89 f0                	mov    eax,esi
c00157db:	83 c4 20             	add    esp,0x20
c00157de:	5b                   	pop    ebx
c00157df:	5e                   	pop    esi
c00157e0:	ff e0                	jmp    eax

c00157e2 <RTC::~RTC()>:
c00157e2:	83 ec 0c             	sub    esp,0xc
c00157e5:	ba 8c e9 01 c0       	mov    edx,0xc001e98c
c00157ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ee:	89 10                	mov    DWORD PTR [eax],edx
c00157f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	50                   	push   eax
c00157f8:	e8 13 5c ff ff       	call   c000b410 <Clock::~Clock()>
c00157fd:	83 c4 10             	add    esp,0x10
c0015800:	90                   	nop
c0015801:	83 c4 0c             	add    esp,0xc
c0015804:	c3                   	ret    
c0015805:	90                   	nop

c0015806 <RTC::~RTC()>:
c0015806:	83 ec 0c             	sub    esp,0xc
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015810:	e8 cd ff ff ff       	call   c00157e2 <RTC::~RTC()>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	83 ec 08             	sub    esp,0x8
c001581b:	68 60 01 00 00       	push   0x160
c0015820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015824:	e8 b9 4b ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0015829:	83 c4 10             	add    esp,0x10
c001582c:	83 c4 0c             	add    esp,0xc
c001582f:	c3                   	ret    

c0015830 <RTC::get_update_in_progress_flag()>:
c0015830:	83 ec 14             	sub    esp,0x14
c0015833:	6a 0a                	push   0xa
c0015835:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001583b:	e8 66 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015840:	83 c4 1c             	add    esp,0x1c
c0015843:	c0 e8 07             	shr    al,0x7
c0015846:	c3                   	ret    
c0015847:	90                   	nop

c0015848 <RTC::completeRTCRefresh()>:
c0015848:	55                   	push   ebp
c0015849:	57                   	push   edi
c001584a:	56                   	push   esi
c001584b:	53                   	push   ebx
c001584c:	83 ec 2c             	sub    esp,0x2c
c001584f:	8b 1d 6c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a6c
c0015855:	83 ec 0c             	sub    esp,0xc
c0015858:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001585c:	e8 cf ff ff ff       	call   c0015830 <RTC::get_update_in_progress_flag()>
c0015861:	83 c4 10             	add    esp,0x10
c0015864:	84 c0                	test   al,al
c0015866:	74 0e                	je     c0015876 <RTC::completeRTCRefresh()+0x2e>
c0015868:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001586e:	3b 05 6c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a6c
c0015874:	73 df                	jae    c0015855 <RTC::completeRTCRefresh()+0xd>
c0015876:	55                   	push   ebp
c0015877:	55                   	push   ebp
c0015878:	6a 00                	push   0x0
c001587a:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015880:	e8 21 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015885:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015889:	58                   	pop    eax
c001588a:	5a                   	pop    edx
c001588b:	6a 02                	push   0x2
c001588d:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015893:	e8 0e 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015898:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001589c:	59                   	pop    ecx
c001589d:	5b                   	pop    ebx
c001589e:	6a 04                	push   0x4
c00158a0:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158a6:	e8 fb 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158ab:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00158af:	5e                   	pop    esi
c00158b0:	5f                   	pop    edi
c00158b1:	6a 07                	push   0x7
c00158b3:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158b9:	e8 e8 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158be:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00158c2:	5d                   	pop    ebp
c00158c3:	58                   	pop    eax
c00158c4:	6a 08                	push   0x8
c00158c6:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158cc:	e8 d5 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158d1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00158d5:	58                   	pop    eax
c00158d6:	5a                   	pop    edx
c00158d7:	6a 09                	push   0x9
c00158d9:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158df:	e8 c2 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	0f b6 e8             	movzx  ebp,al
c00158ea:	8b 1d 6c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a6c
c00158f0:	83 ec 0c             	sub    esp,0xc
c00158f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158f7:	e8 34 ff ff ff       	call   c0015830 <RTC::get_update_in_progress_flag()>
c00158fc:	83 c4 10             	add    esp,0x10
c00158ff:	84 c0                	test   al,al
c0015901:	74 0e                	je     c0015911 <RTC::completeRTCRefresh()+0xc9>
c0015903:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015909:	3b 05 6c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a6c
c001590f:	73 df                	jae    c00158f0 <RTC::completeRTCRefresh()+0xa8>
c0015911:	50                   	push   eax
c0015912:	50                   	push   eax
c0015913:	6a 00                	push   0x0
c0015915:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001591b:	e8 86 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015920:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015924:	58                   	pop    eax
c0015925:	5a                   	pop    edx
c0015926:	6a 02                	push   0x2
c0015928:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001592e:	e8 73 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015933:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015937:	59                   	pop    ecx
c0015938:	5b                   	pop    ebx
c0015939:	6a 04                	push   0x4
c001593b:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015941:	e8 60 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015946:	5e                   	pop    esi
c0015947:	88 c3                	mov    bl,al
c0015949:	5f                   	pop    edi
c001594a:	6a 07                	push   0x7
c001594c:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015952:	e8 4f 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015957:	89 c6                	mov    esi,eax
c0015959:	58                   	pop    eax
c001595a:	5a                   	pop    edx
c001595b:	6a 08                	push   0x8
c001595d:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015963:	e8 3e 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015968:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001596c:	59                   	pop    ecx
c001596d:	5f                   	pop    edi
c001596e:	6a 09                	push   0x9
c0015970:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015976:	e8 2b 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001597b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001597f:	0f b6 f8             	movzx  edi,al
c0015982:	83 c4 10             	add    esp,0x10
c0015985:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015989:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001598d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015991:	89 f1                	mov    ecx,esi
c0015993:	0f 94 c0             	sete   al
c0015996:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001599a:	0f 94 c2             	sete   dl
c001599d:	21 d0                	and    eax,edx
c001599f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c00159a3:	0f 94 c2             	sete   dl
c00159a6:	21 c2                	and    edx,eax
c00159a8:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00159ac:	0f 94 c0             	sete   al
c00159af:	21 d0                	and    eax,edx
c00159b1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00159b5:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c00159b9:	0f 94 c1             	sete   cl
c00159bc:	84 c8                	test   al,cl
c00159be:	75 29                	jne    c00159e9 <RTC::completeRTCRefresh()+0x1a1>
c00159c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00159c4:	89 fd                	mov    ebp,edi
c00159c6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00159ca:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c00159ce:	89 f0                	mov    eax,esi
c00159d0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00159d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159d8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00159dc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00159e0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159e4:	e9 01 ff ff ff       	jmp    c00158ea <RTC::completeRTCRefresh()+0xa2>
c00159e9:	39 fd                	cmp    ebp,edi
c00159eb:	75 d3                	jne    c00159c0 <RTC::completeRTCRefresh()+0x178>
c00159ed:	55                   	push   ebp
c00159ee:	55                   	push   ebp
c00159ef:	6a 0b                	push   0xb
c00159f1:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00159f7:	e8 aa 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159fc:	83 c4 10             	add    esp,0x10
c00159ff:	89 c5                	mov    ebp,eax
c0015a01:	a8 04                	test   al,0x4
c0015a03:	75 78                	jne    c0015a7d <RTC::completeRTCRefresh()+0x235>
c0015a05:	b1 0a                	mov    cl,0xa
c0015a07:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015a0b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a0f:	83 e2 0f             	and    edx,0xf
c0015a12:	c0 e8 04             	shr    al,0x4
c0015a15:	c1 ef 04             	shr    edi,0x4
c0015a18:	f6 e1                	mul    cl
c0015a1a:	6b ff 0a             	imul   edi,edi,0xa
c0015a1d:	01 d0                	add    eax,edx
c0015a1f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015a23:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015a27:	83 e2 0f             	and    edx,0xf
c0015a2a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a2e:	c0 e8 04             	shr    al,0x4
c0015a31:	f6 e1                	mul    cl
c0015a33:	01 d0                	add    eax,edx
c0015a35:	88 da                	mov    dl,bl
c0015a37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a3b:	83 e2 0f             	and    edx,0xf
c0015a3e:	88 d8                	mov    al,bl
c0015a40:	83 e3 80             	and    ebx,0xffffff80
c0015a43:	c0 e8 04             	shr    al,0x4
c0015a46:	83 e0 07             	and    eax,0x7
c0015a49:	f6 e1                	mul    cl
c0015a4b:	01 d0                	add    eax,edx
c0015a4d:	89 f2                	mov    edx,esi
c0015a4f:	09 c3                	or     ebx,eax
c0015a51:	83 e2 0f             	and    edx,0xf
c0015a54:	89 f0                	mov    eax,esi
c0015a56:	c0 e8 04             	shr    al,0x4
c0015a59:	f6 e1                	mul    cl
c0015a5b:	8d 34 02             	lea    esi,[edx+eax*1]
c0015a5e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015a62:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a66:	83 e2 0f             	and    edx,0xf
c0015a69:	c0 e8 04             	shr    al,0x4
c0015a6c:	f6 e1                	mul    cl
c0015a6e:	01 d0                	add    eax,edx
c0015a70:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a78:	83 e0 0f             	and    eax,0xf
c0015a7b:	01 c7                	add    edi,eax
c0015a7d:	83 e5 02             	and    ebp,0x2
c0015a80:	75 14                	jne    c0015a96 <RTC::completeRTCRefresh()+0x24e>
c0015a82:	84 db                	test   bl,bl
c0015a84:	79 10                	jns    c0015a96 <RTC::completeRTCRefresh()+0x24e>
c0015a86:	83 e3 7f             	and    ebx,0x7f
c0015a89:	b9 18 00 00 00       	mov    ecx,0x18
c0015a8e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015a91:	99                   	cdq    
c0015a92:	f7 f9                	idiv   ecx
c0015a94:	88 d3                	mov    bl,dl
c0015a96:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015a9c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015aa2:	77 06                	ja     c0015aaa <RTC::completeRTCRefresh()+0x262>
c0015aa4:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015aaa:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015aaf:	31 d2                	xor    edx,edx
c0015ab1:	c1 e1 10             	shl    ecx,0x10
c0015ab4:	89 d7                	mov    edi,edx
c0015ab6:	c1 e5 10             	shl    ebp,0x10
c0015ab9:	31 c0                	xor    eax,eax
c0015abb:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015ac1:	09 cf                	or     edi,ecx
c0015ac3:	89 fa                	mov    edx,edi
c0015ac5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015ac9:	88 da                	mov    dl,bl
c0015acb:	89 f3                	mov    ebx,esi
c0015acd:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015ad1:	88 d8                	mov    al,bl
c0015ad3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015ad7:	0f b7 c8             	movzx  ecx,ax
c0015ada:	09 e9                	or     ecx,ebp
c0015adc:	89 c8                	mov    eax,ecx
c0015ade:	51                   	push   ecx
c0015adf:	51                   	push   ecx
c0015ae0:	52                   	push   edx
c0015ae1:	50                   	push   eax
c0015ae2:	e8 18 5a ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c0015ae7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015aeb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015af1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015af7:	83 c4 3c             	add    esp,0x3c
c0015afa:	5b                   	pop    ebx
c0015afb:	5e                   	pop    esi
c0015afc:	5f                   	pop    edi
c0015afd:	5d                   	pop    ebp
c0015afe:	c3                   	ret    
c0015aff:	90                   	nop

c0015b00 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015b00:	55                   	push   ebp
c0015b01:	57                   	push   edi
c0015b02:	56                   	push   esi
c0015b03:	53                   	push   ebx
c0015b04:	83 ec 30             	sub    esp,0x30
c0015b07:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015b0b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015b0f:	6a 00                	push   0x0
c0015b11:	6a 00                	push   0x0
c0015b13:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015b19:	e8 9e 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b1e:	83 c4 0c             	add    esp,0xc
c0015b21:	6a 00                	push   0x0
c0015b23:	6a 02                	push   0x2
c0015b25:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015b2b:	e8 8c 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b30:	31 d2                	xor    edx,edx
c0015b32:	89 f9                	mov    ecx,edi
c0015b34:	89 f8                	mov    eax,edi
c0015b36:	c1 e9 10             	shr    ecx,0x10
c0015b39:	0f b6 c4             	movzx  eax,ah
c0015b3c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015b40:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015b44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b48:	b9 64 00 00 00       	mov    ecx,0x64
c0015b4d:	89 f0                	mov    eax,esi
c0015b4f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015b53:	89 f0                	mov    eax,esi
c0015b55:	0f b6 c4             	movzx  eax,ah
c0015b58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b5c:	89 f0                	mov    eax,esi
c0015b5e:	c1 e8 10             	shr    eax,0x10
c0015b61:	66 f7 f1             	div    cx
c0015b64:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015b69:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015b6e:	59                   	pop    ecx
c0015b6f:	5b                   	pop    ebx
c0015b70:	89 fb                	mov    ebx,edi
c0015b72:	6a 0b                	push   0xb
c0015b74:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015b7a:	e8 27 13 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015b7f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015b8b:	75 74                	jne    c0015c01 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015b8d:	b2 0a                	mov    dl,0xa
c0015b8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b93:	0f b6 c1             	movzx  eax,cl
c0015b96:	f6 f2                	div    dl
c0015b98:	88 c3                	mov    bl,al
c0015b9a:	88 e0                	mov    al,ah
c0015b9c:	c1 e3 04             	shl    ebx,0x4
c0015b9f:	09 c3                	or     ebx,eax
c0015ba1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ba6:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015baa:	f6 f2                	div    dl
c0015bac:	88 c1                	mov    cl,al
c0015bae:	88 e0                	mov    al,ah
c0015bb0:	c1 e1 04             	shl    ecx,0x4
c0015bb3:	09 c1                	or     ecx,eax
c0015bb5:	89 f8                	mov    eax,edi
c0015bb7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015bbb:	0f b6 c0             	movzx  eax,al
c0015bbe:	f6 f2                	div    dl
c0015bc0:	88 c3                	mov    bl,al
c0015bc2:	88 e0                	mov    al,ah
c0015bc4:	c1 e3 04             	shl    ebx,0x4
c0015bc7:	09 c3                	or     ebx,eax
c0015bc9:	89 f0                	mov    eax,esi
c0015bcb:	0f b6 c0             	movzx  eax,al
c0015bce:	f6 f2                	div    dl
c0015bd0:	88 c1                	mov    cl,al
c0015bd2:	88 e0                	mov    al,ah
c0015bd4:	c1 e1 04             	shl    ecx,0x4
c0015bd7:	09 c1                	or     ecx,eax
c0015bd9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015bde:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015be2:	f6 f2                	div    dl
c0015be4:	88 c1                	mov    cl,al
c0015be6:	88 e0                	mov    al,ah
c0015be8:	c1 e1 04             	shl    ecx,0x4
c0015beb:	09 c1                	or     ecx,eax
c0015bed:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015bf2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015bf6:	f6 f2                	div    dl
c0015bf8:	89 c5                	mov    ebp,eax
c0015bfa:	88 e0                	mov    al,ah
c0015bfc:	c1 e5 04             	shl    ebp,0x4
c0015bff:	09 c5                	or     ebp,eax
c0015c01:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015c06:	75 17                	jne    c0015c1f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c08:	80 fb 0b             	cmp    bl,0xb
c0015c0b:	76 0c                	jbe    c0015c19 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015c0d:	80 eb 0c             	sub    bl,0xc
c0015c10:	75 02                	jne    c0015c14 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015c12:	b3 0c                	mov    bl,0xc
c0015c14:	83 cb 80             	or     ebx,0xffffff80
c0015c17:	eb 06                	jmp    c0015c1f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c19:	84 db                	test   bl,bl
c0015c1b:	75 02                	jne    c0015c1f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c1d:	b3 0c                	mov    bl,0xc
c0015c1f:	0f b6 db             	movzx  ebx,bl
c0015c22:	50                   	push   eax
c0015c23:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015c28:	50                   	push   eax
c0015c29:	6a 00                	push   0x0
c0015c2b:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c31:	e8 86 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c36:	83 c4 0c             	add    esp,0xc
c0015c39:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c3e:	50                   	push   eax
c0015c3f:	6a 02                	push   0x2
c0015c41:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c47:	e8 70 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c4c:	83 c4 0c             	add    esp,0xc
c0015c4f:	53                   	push   ebx
c0015c50:	6a 04                	push   0x4
c0015c52:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c58:	e8 5f 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c5d:	83 c4 0c             	add    esp,0xc
c0015c60:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015c65:	50                   	push   eax
c0015c66:	6a 07                	push   0x7
c0015c68:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c6e:	e8 49 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c73:	83 c4 0c             	add    esp,0xc
c0015c76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015c7b:	50                   	push   eax
c0015c7c:	6a 08                	push   0x8
c0015c7e:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c84:	e8 33 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c89:	83 c4 0c             	add    esp,0xc
c0015c8c:	89 e8                	mov    eax,ebp
c0015c8e:	0f b6 e8             	movzx  ebp,al
c0015c91:	55                   	push   ebp
c0015c92:	6a 09                	push   0x9
c0015c94:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c9a:	e8 1d 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c9f:	5a                   	pop    edx
c0015ca0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ca4:	e8 9f fb ff ff       	call   c0015848 <RTC::completeRTCRefresh()>
c0015ca9:	83 c4 3c             	add    esp,0x3c
c0015cac:	b0 01                	mov    al,0x1
c0015cae:	5b                   	pop    ebx
c0015caf:	5e                   	pop    esi
c0015cb0:	5f                   	pop    edi
c0015cb1:	5d                   	pop    ebp
c0015cb2:	c3                   	ret    

c0015cb3 <rtcIRQHandler(regs*, void*)>:
c0015cb3:	53                   	push   ebx
c0015cb4:	83 ec 10             	sub    esp,0x10
c0015cb7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015cbb:	6a 0c                	push   0xc
c0015cbd:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015cc3:	e8 de 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cc8:	83 c4 10             	add    esp,0x10
c0015ccb:	84 c0                	test   al,al
c0015ccd:	79 24                	jns    c0015cf3 <rtcIRQHandler(regs*, void*)+0x40>
c0015ccf:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015cd6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015cdd:	66 ff 05 f4 37 02 c0 	inc    WORD PTR ds:0xc00237f4
c0015ce4:	75 0d                	jne    c0015cf3 <rtcIRQHandler(regs*, void*)+0x40>
c0015ce6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015cea:	83 c4 08             	add    esp,0x8
c0015ced:	5b                   	pop    ebx
c0015cee:	e9 55 fb ff ff       	jmp    c0015848 <RTC::completeRTCRefresh()>
c0015cf3:	83 c4 08             	add    esp,0x8
c0015cf6:	5b                   	pop    ebx
c0015cf7:	c3                   	ret    

c0015cf8 <RTC::RTC()>:
c0015cf8:	83 ec 1c             	sub    esp,0x1c
c0015cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cff:	83 ec 08             	sub    esp,0x8
c0015d02:	68 6f e9 01 c0       	push   0xc001e96f
c0015d07:	50                   	push   eax
c0015d08:	e8 cd 56 ff ff       	call   c000b3da <Clock::Clock(char const*)>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	ba 8c e9 01 c0       	mov    edx,0xc001e98c
c0015d15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d19:	89 10                	mov    DWORD PTR [eax],edx
c0015d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d1f:	83 ec 0c             	sub    esp,0xc
c0015d22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d26:	6a 01                	push   0x1
c0015d28:	68 b3 5c 01 c0       	push   0xc0015cb3
c0015d2d:	6a 08                	push   0x8
c0015d2f:	50                   	push   eax
c0015d30:	e8 8f 5b ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015d35:	83 c4 20             	add    esp,0x20
c0015d38:	89 c2                	mov    edx,eax
c0015d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d3e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015d44:	fa                   	cli    
c0015d45:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015d4a:	40                   	inc    eax
c0015d4b:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0015d50:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0015d55:	83 ec 08             	sub    esp,0x8
c0015d58:	6a 0b                	push   0xb
c0015d5a:	50                   	push   eax
c0015d5b:	e8 46 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d67:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0015d6c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015d70:	83 ca 10             	or     edx,0x10
c0015d73:	81 e2 ff 00 00 00    	and    edx,0xff
c0015d79:	83 ec 04             	sub    esp,0x4
c0015d7c:	52                   	push   edx
c0015d7d:	6a 0b                	push   0xb
c0015d7f:	50                   	push   eax
c0015d80:	e8 37 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8f:	e8 b4 fa ff ff       	call   c0015848 <RTC::completeRTCRefresh()>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015d9c:	48                   	dec    eax
c0015d9d:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0015da2:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015da7:	85 c0                	test   eax,eax
c0015da9:	75 01                	jne    c0015dac <RTC::RTC()+0xb4>
c0015dab:	fb                   	sti    
c0015dac:	90                   	nop
c0015dad:	83 c4 1c             	add    esp,0x1c
c0015db0:	c3                   	ret    
c0015db1:	66 90                	xchg   ax,ax
c0015db3:	90                   	nop

c0015db4 <HalConsoleScroll(int, int)>:
c0015db4:	83 ec 10             	sub    esp,0x10
c0015db7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015dbf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015dc7:	90                   	nop
c0015dc8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015dcd:	0f 8f e1 00 00 00    	jg     c0015eb4 <HalConsoleScroll(int, int)+0x100>
c0015dd3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015ddb:	90                   	nop
c0015ddc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015de4:	0f 8f be 00 00 00    	jg     c0015ea8 <HalConsoleScroll(int, int)+0xf4>
c0015dea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dee:	89 d0                	mov    eax,edx
c0015df0:	c1 e0 02             	shl    eax,0x2
c0015df3:	01 d0                	add    eax,edx
c0015df5:	c1 e0 05             	shl    eax,0x5
c0015df8:	89 c2                	mov    edx,eax
c0015dfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dfe:	01 d0                	add    eax,edx
c0015e00:	89 c2                	mov    edx,eax
c0015e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e06:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015e09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e0d:	89 d0                	mov    eax,edx
c0015e0f:	c1 e0 02             	shl    eax,0x2
c0015e12:	01 d0                	add    eax,edx
c0015e14:	c1 e0 05             	shl    eax,0x5
c0015e17:	89 c2                	mov    edx,eax
c0015e19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e1d:	01 d0                	add    eax,edx
c0015e1f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015e25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e29:	01 c2                	add    edx,eax
c0015e2b:	8a 01                	mov    al,BYTE PTR [ecx]
c0015e2d:	88 02                	mov    BYTE PTR [edx],al
c0015e2f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e34:	75 66                	jne    c0015e9c <HalConsoleScroll(int, int)+0xe8>
c0015e36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e3a:	83 e0 01             	and    eax,0x1
c0015e3d:	74 39                	je     c0015e78 <HalConsoleScroll(int, int)+0xc4>
c0015e3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e43:	83 e0 0f             	and    eax,0xf
c0015e46:	88 c2                	mov    dl,al
c0015e48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e4c:	c1 e0 04             	shl    eax,0x4
c0015e4f:	88 d1                	mov    cl,dl
c0015e51:	09 c1                	or     ecx,eax
c0015e53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e57:	89 d0                	mov    eax,edx
c0015e59:	c1 e0 02             	shl    eax,0x2
c0015e5c:	01 d0                	add    eax,edx
c0015e5e:	c1 e0 05             	shl    eax,0x5
c0015e61:	89 c2                	mov    edx,eax
c0015e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e67:	01 d0                	add    eax,edx
c0015e69:	89 c2                	mov    edx,eax
c0015e6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e6f:	01 d0                	add    eax,edx
c0015e71:	88 ca                	mov    dl,cl
c0015e73:	88 10                	mov    BYTE PTR [eax],dl
c0015e75:	eb 25                	jmp    c0015e9c <HalConsoleScroll(int, int)+0xe8>
c0015e77:	90                   	nop
c0015e78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e7c:	89 d0                	mov    eax,edx
c0015e7e:	c1 e0 02             	shl    eax,0x2
c0015e81:	01 d0                	add    eax,edx
c0015e83:	c1 e0 05             	shl    eax,0x5
c0015e86:	89 c2                	mov    edx,eax
c0015e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e8c:	01 d0                	add    eax,edx
c0015e8e:	89 c2                	mov    edx,eax
c0015e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e94:	01 d0                	add    eax,edx
c0015e96:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015e99:	8d 76 00             	lea    esi,[esi+0x0]
c0015e9c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015ea0:	e9 37 ff ff ff       	jmp    c0015ddc <HalConsoleScroll(int, int)+0x28>
c0015ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ea8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015eac:	e9 17 ff ff ff       	jmp    c0015dc8 <HalConsoleScroll(int, int)+0x14>
c0015eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015eb4:	90                   	nop
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	c3                   	ret    
c0015eb9:	8d 76 00             	lea    esi,[esi+0x0]

c0015ebc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015ebc:	83 ec 14             	sub    esp,0x14
c0015ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ec3:	88 04 24             	mov    BYTE PTR [esp],al
c0015ec6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015ec9:	25 ff 00 00 00       	and    eax,0xff
c0015ece:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ed2:	89 d1                	mov    ecx,edx
c0015ed4:	83 e1 0f             	and    ecx,0xf
c0015ed7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015edb:	c1 e2 04             	shl    edx,0x4
c0015ede:	81 e2 ff 00 00 00    	and    edx,0xff
c0015ee4:	09 ca                	or     edx,ecx
c0015ee6:	c1 e2 08             	shl    edx,0x8
c0015ee9:	09 d0                	or     eax,edx
c0015eeb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015ef0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015ef8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015efc:	89 d0                	mov    eax,edx
c0015efe:	c1 e0 02             	shl    eax,0x2
c0015f01:	01 d0                	add    eax,edx
c0015f03:	c1 e0 04             	shl    eax,0x4
c0015f06:	89 c2                	mov    edx,eax
c0015f08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f0c:	01 d0                	add    eax,edx
c0015f0e:	01 c0                	add    eax,eax
c0015f10:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015f14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015f1d:	66 89 02             	mov    WORD PTR [edx],ax
c0015f20:	90                   	nop
c0015f21:	83 c4 14             	add    esp,0x14
c0015f24:	c3                   	ret    
c0015f25:	8d 76 00             	lea    esi,[esi+0x0]

c0015f28 <HalConsoleCursorUpdate(int, int)>:
c0015f28:	83 ec 20             	sub    esp,0x20
c0015f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f2f:	89 c2                	mov    edx,eax
c0015f31:	89 d0                	mov    eax,edx
c0015f33:	c1 e0 02             	shl    eax,0x2
c0015f36:	01 d0                	add    eax,edx
c0015f38:	c1 e0 04             	shl    eax,0x4
c0015f3b:	89 c2                	mov    edx,eax
c0015f3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f41:	01 d0                	add    eax,edx
c0015f43:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015f48:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015f4f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015f54:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f5c:	ee                   	out    dx,al
c0015f5d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f62:	25 ff 00 00 00       	and    eax,0xff
c0015f67:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015f6e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015f72:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015f76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015f7a:	ee                   	out    dx,al
c0015f7b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015f82:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015f87:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015f8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f8f:	ee                   	out    dx,al
c0015f90:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f95:	66 c1 e8 08          	shr    ax,0x8
c0015f99:	25 ff 00 00 00       	and    eax,0xff
c0015f9e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015fa5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fa9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015fad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015fb1:	ee                   	out    dx,al
c0015fb2:	90                   	nop
c0015fb3:	83 c4 20             	add    esp,0x20
c0015fb6:	c3                   	ret    
c0015fb7:	90                   	nop

c0015fb8 <FAT::getName()>:
c0015fb8:	b8 c0 e9 01 c0       	mov    eax,0xc001e9c0
c0015fbd:	c3                   	ret    
c0015fbe:	66 90                	xchg   ax,ax

c0015fc0 <FAT::tell(void*, unsigned long long*)>:
c0015fc0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015fc5:	75 09                	jne    c0015fd0 <FAT::tell(void*, unsigned long long*)+0x10>
c0015fc7:	b8 04 00 00 00       	mov    eax,0x4
c0015fcc:	c3                   	ret    
c0015fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015fd5:	75 09                	jne    c0015fe0 <FAT::tell(void*, unsigned long long*)+0x20>
c0015fd7:	b8 04 00 00 00       	mov    eax,0x4
c0015fdc:	c3                   	ret    
c0015fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fe4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015fe7:	ba 00 00 00 00       	mov    edx,0x0
c0015fec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ff0:	89 01                	mov    DWORD PTR [ecx],eax
c0015ff2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015ff5:	b8 00 00 00 00       	mov    eax,0x0
c0015ffa:	c3                   	ret    
c0015ffb:	90                   	nop

c0015ffc <FAT::stat(void*, unsigned long long*)>:
c0015ffc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016001:	75 09                	jne    c001600c <FAT::stat(void*, unsigned long long*)+0x10>
c0016003:	b8 04 00 00 00       	mov    eax,0x4
c0016008:	c3                   	ret    
c0016009:	8d 76 00             	lea    esi,[esi+0x0]
c001600c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016011:	75 09                	jne    c001601c <FAT::stat(void*, unsigned long long*)+0x20>
c0016013:	b8 04 00 00 00       	mov    eax,0x4
c0016018:	c3                   	ret    
c0016019:	8d 76 00             	lea    esi,[esi+0x0]
c001601c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016020:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016023:	ba 00 00 00 00       	mov    edx,0x0
c0016028:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001602c:	89 01                	mov    DWORD PTR [ecx],eax
c001602e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016031:	b8 00 00 00 00       	mov    eax,0x0
c0016036:	c3                   	ret    
c0016037:	90                   	nop

c0016038 <FAT::~FAT()>:
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c0016040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016044:	89 10                	mov    DWORD PTR [eax],edx
c0016046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604a:	83 ec 0c             	sub    esp,0xc
c001604d:	50                   	push   eax
c001604e:	e8 cb 47 ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c0016053:	83 c4 10             	add    esp,0x10
c0016056:	90                   	nop
c0016057:	83 c4 0c             	add    esp,0xc
c001605a:	c3                   	ret    
c001605b:	90                   	nop

c001605c <FAT::~FAT()>:
c001605c:	83 ec 0c             	sub    esp,0xc
c001605f:	83 ec 0c             	sub    esp,0xc
c0016062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016066:	e8 cd ff ff ff       	call   c0016038 <FAT::~FAT()>
c001606b:	83 c4 10             	add    esp,0x10
c001606e:	83 ec 08             	sub    esp,0x8
c0016071:	6a 08                	push   0x8
c0016073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016077:	e8 66 43 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001607c:	83 c4 10             	add    esp,0x10
c001607f:	83 c4 0c             	add    esp,0xc
c0016082:	c3                   	ret    
c0016083:	90                   	nop

c0016084 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016084:	83 ec 1c             	sub    esp,0x1c
c0016087:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001608e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016097:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c001609e:	83 f8 ff             	cmp    eax,0xffffffff
c00160a1:	75 35                	jne    c00160d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00160a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160a7:	88 c2                	mov    dl,al
c00160a9:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00160ae:	01 d0                	add    eax,edx
c00160b0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160b4:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c00160ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160be:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c00160c5:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00160ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160ce:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c00160d5:	eb 19                	jmp    c00160f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00160d7:	90                   	nop
c00160d8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160dc:	88 c2                	mov    dl,al
c00160de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160e2:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c00160e9:	01 d0                	add    eax,edx
c00160eb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160ef:	90                   	nop
c00160f0:	83 ec 04             	sub    esp,0x4
c00160f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160fb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00160ff:	50                   	push   eax
c0016100:	e8 4f ed fe ff       	call   c0004e54 <f_getlabel>
c0016105:	83 c4 10             	add    esp,0x10
c0016108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001610c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016111:	75 09                	jne    c001611c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016113:	b8 00 00 00 00       	mov    eax,0x0
c0016118:	eb 0a                	jmp    c0016124 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001611a:	66 90                	xchg   ax,ax
c001611c:	b8 01 00 00 00       	mov    eax,0x1
c0016121:	8d 76 00             	lea    esi,[esi+0x0]
c0016124:	83 c4 1c             	add    esp,0x1c
c0016127:	c3                   	ret    

c0016128 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016128:	57                   	push   edi
c0016129:	83 ec 58             	sub    esp,0x58
c001612c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016134:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016138:	b8 00 00 00 00       	mov    eax,0x0
c001613d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016142:	fc                   	cld    
c0016143:	89 d7                	mov    edi,edx
c0016145:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016147:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001614b:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016152:	83 f8 ff             	cmp    eax,0xffffffff
c0016155:	75 35                	jne    c001618c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016157:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001615b:	88 c2                	mov    dl,al
c001615d:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0016162:	01 d0                	add    eax,edx
c0016164:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016168:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c001616e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016172:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0016179:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001617e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016182:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c0016189:	eb 19                	jmp    c00161a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001618b:	90                   	nop
c001618c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016190:	88 c2                	mov    dl,al
c0016192:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016196:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c001619d:	01 d0                	add    eax,edx
c001619f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00161a3:	90                   	nop
c00161a4:	83 ec 08             	sub    esp,0x8
c00161a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00161ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161af:	50                   	push   eax
c00161b0:	e8 0b a6 fe ff       	call   c00007c0 <strcat>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161bf:	50                   	push   eax
c00161c0:	e8 e0 ed fe ff       	call   c0004fa5 <f_setlabel>
c00161c5:	83 c4 10             	add    esp,0x10
c00161c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00161cc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00161d1:	75 09                	jne    c00161dc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00161d3:	b8 00 00 00 00       	mov    eax,0x0
c00161d8:	eb 0a                	jmp    c00161e4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00161da:	66 90                	xchg   ax,ax
c00161dc:	b8 01 00 00 00       	mov    eax,0x1
c00161e1:	8d 76 00             	lea    esi,[esi+0x0]
c00161e4:	83 c4 58             	add    esp,0x58
c00161e7:	5f                   	pop    edi
c00161e8:	c3                   	ret    
c00161e9:	90                   	nop
c00161ea:	66 90                	xchg   ax,ax

c00161ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00161ec:	83 ec 2c             	sub    esp,0x2c
c00161ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00161f7:	83 ec 08             	sub    esp,0x8
c00161fa:	68 e4 e9 01 c0       	push   0xc001e9e4
c00161ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016203:	e8 d8 a4 fe ff       	call   c00006e0 <strcmp>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	85 c0                	test   eax,eax
c001620d:	0f 94 c0             	sete   al
c0016210:	84 c0                	test   al,al
c0016212:	74 10                	je     c0016224 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016214:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001621c:	e9 b3 00 00 00       	jmp    c00162d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016221:	8d 76 00             	lea    esi,[esi+0x0]
c0016224:	83 ec 08             	sub    esp,0x8
c0016227:	68 d6 e9 01 c0       	push   0xc001e9d6
c001622c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016230:	e8 ab a4 fe ff       	call   c00006e0 <strcmp>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	85 c0                	test   eax,eax
c001623a:	0f 94 c0             	sete   al
c001623d:	84 c0                	test   al,al
c001623f:	74 0f                	je     c0016250 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016241:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016249:	e9 86 00 00 00       	jmp    c00162d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001624e:	66 90                	xchg   ax,ax
c0016250:	83 ec 08             	sub    esp,0x8
c0016253:	68 dc e9 01 c0       	push   0xc001e9dc
c0016258:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001625c:	e8 7f a4 fe ff       	call   c00006e0 <strcmp>
c0016261:	83 c4 10             	add    esp,0x10
c0016264:	85 c0                	test   eax,eax
c0016266:	0f 94 c0             	sete   al
c0016269:	84 c0                	test   al,al
c001626b:	74 0b                	je     c0016278 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001626d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016275:	eb 5d                	jmp    c00162d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016277:	90                   	nop
c0016278:	83 ec 08             	sub    esp,0x8
c001627b:	68 3c ca 01 c0       	push   0xc001ca3c
c0016280:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016284:	e8 57 a4 fe ff       	call   c00006e0 <strcmp>
c0016289:	83 c4 10             	add    esp,0x10
c001628c:	85 c0                	test   eax,eax
c001628e:	0f 94 c0             	sete   al
c0016291:	84 c0                	test   al,al
c0016293:	74 0b                	je     c00162a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016295:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001629d:	eb 35                	jmp    c00162d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001629f:	90                   	nop
c00162a0:	83 ec 08             	sub    esp,0x8
c00162a3:	68 e2 e9 01 c0       	push   0xc001e9e2
c00162a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162ac:	e8 2f a4 fe ff       	call   c00006e0 <strcmp>
c00162b1:	83 c4 10             	add    esp,0x10
c00162b4:	85 c0                	test   eax,eax
c00162b6:	0f 94 c0             	sete   al
c00162b9:	84 c0                	test   al,al
c00162bb:	74 0b                	je     c00162c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00162bd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00162c5:	eb 0d                	jmp    c00162d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162c7:	90                   	nop
c00162c8:	b8 08 00 00 00       	mov    eax,0x8
c00162cd:	e9 ea 00 00 00       	jmp    c00163bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00162d2:	66 90                	xchg   ax,ax
c00162d4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00162db:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00162e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162e4:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c00162eb:	83 f8 ff             	cmp    eax,0xffffffff
c00162ee:	75 34                	jne    c0016324 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00162f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162f4:	88 c2                	mov    dl,al
c00162f6:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00162fb:	01 d0                	add    eax,edx
c00162fd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016301:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c0016307:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001630b:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0016312:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0016317:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001631b:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c0016322:	eb 18                	jmp    c001633c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016324:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016328:	88 c2                	mov    dl,al
c001632a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001632e:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016335:	01 d0                	add    eax,edx
c0016337:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001633b:	90                   	nop
c001633c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016340:	88 04 24             	mov    BYTE PTR [esp],al
c0016343:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016347:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001634b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016353:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016358:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	68 00 20 00 00       	push   0x2000
c0016368:	e8 4c 14 ff ff       	call   c00077b9 <malloc>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016374:	68 00 20 00 00       	push   0x2000
c0016379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001637d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016381:	50                   	push   eax
c0016382:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016386:	50                   	push   eax
c0016387:	e8 09 ef fe ff       	call   c0005295 <f_mkfs>
c001638c:	83 c4 10             	add    esp,0x10
c001638f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016393:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016398:	75 0a                	jne    c00163a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001639a:	b8 00 00 00 00       	mov    eax,0x0
c001639f:	eb 1b                	jmp    c00163bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163a1:	8d 76 00             	lea    esi,[esi+0x0]
c00163a4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00163a9:	75 09                	jne    c00163b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00163ab:	b8 09 00 00 00       	mov    eax,0x9
c00163b0:	eb 0a                	jmp    c00163bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163b2:	66 90                	xchg   ax,ax
c00163b4:	b8 01 00 00 00       	mov    eax,0x1
c00163b9:	8d 76 00             	lea    esi,[esi+0x0]
c00163bc:	83 c4 2c             	add    esp,0x2c
c00163bf:	c3                   	ret    

c00163c0 <FAT::tryMount(LogicalDisk*, int)>:
c00163c0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00163c6:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00163cb:	83 f8 14             	cmp    eax,0x14
c00163ce:	75 18                	jne    c00163e8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00163d0:	83 ec 0c             	sub    esp,0xc
c00163d3:	68 e8 e9 01 c0       	push   0xc001e9e8
c00163d8:	e8 5e 9d ff ff       	call   c001013b <KePanic(char const*)>
c00163dd:	83 c4 10             	add    esp,0x10
c00163e0:	b0 00                	mov    al,0x0
c00163e2:	e9 e9 01 00 00       	jmp    c00165d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163e7:	90                   	nop
c00163e8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00163ef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00163f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00163fb:	3d 00 02 00 00       	cmp    eax,0x200
c0016400:	74 0a                	je     c001640c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016402:	b0 00                	mov    al,0x0
c0016404:	e9 c7 01 00 00       	jmp    c00165d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016409:	8d 76 00             	lea    esi,[esi+0x0]
c001640c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016414:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001641b:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016422:	83 f8 ff             	cmp    eax,0xffffffff
c0016425:	74 09                	je     c0016430 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016427:	b0 01                	mov    al,0x1
c0016429:	e9 a2 01 00 00       	jmp    c00165d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001642e:	66 90                	xchg   ax,ax
c0016430:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001643a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016442:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016449:	88 c2                	mov    dl,al
c001644b:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0016450:	01 d0                	add    eax,edx
c0016452:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016459:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c001645f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016466:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c001646d:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0016472:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016479:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	68 34 02 00 00       	push   0x234
c0016488:	e8 2c 13 ff ff       	call   c00077b9 <malloc>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016497:	83 ec 04             	sub    esp,0x4
c001649a:	6a 00                	push   0x0
c001649c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00164a3:	50                   	push   eax
c00164a4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00164ab:	e8 0b d6 fe ff       	call   c0003abb <f_mount>
c00164b0:	83 c4 10             	add    esp,0x10
c00164b3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00164ba:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00164c2:	74 1c                	je     c00164e0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00164ce:	e8 06 13 ff ff       	call   c00077d9 <rfree>
c00164d3:	83 c4 10             	add    esp,0x10
c00164d6:	b0 00                	mov    al,0x0
c00164d8:	e9 f3 00 00 00       	jmp    c00165d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00164dd:	8d 76 00             	lea    esi,[esi+0x0]
c00164e0:	83 ec 04             	sub    esp,0x4
c00164e3:	68 00 01 00 00       	push   0x100
c00164e8:	6a 00                	push   0x0
c00164ea:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164f1:	50                   	push   eax
c00164f2:	e8 d9 9f fe ff       	call   c00004d0 <memset>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	83 ec 08             	sub    esp,0x8
c00164fd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016504:	50                   	push   eax
c0016505:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001650c:	50                   	push   eax
c001650d:	e8 ae a2 fe ff       	call   c00007c0 <strcat>
c0016512:	83 c4 10             	add    esp,0x10
c0016515:	83 ec 08             	sub    esp,0x8
c0016518:	68 f6 e9 01 c0       	push   0xc001e9f6
c001651d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016524:	50                   	push   eax
c0016525:	e8 96 a2 fe ff       	call   c00007c0 <strcat>
c001652a:	83 c4 10             	add    esp,0x10
c001652d:	83 ec 04             	sub    esp,0x4
c0016530:	6a 01                	push   0x1
c0016532:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016539:	50                   	push   eax
c001653a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001653e:	50                   	push   eax
c001653f:	e8 d9 d5 fe ff       	call   c0003b1d <f_open>
c0016544:	83 c4 10             	add    esp,0x10
c0016547:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001654e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016555:	85 c0                	test   eax,eax
c0016557:	74 0b                	je     c0016564 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016559:	78 31                	js     c001658c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001655b:	83 e8 04             	sub    eax,0x4
c001655e:	83 f8 01             	cmp    eax,0x1
c0016561:	77 29                	ja     c001658c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016563:	90                   	nop
c0016564:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016573:	50                   	push   eax
c0016574:	e8 57 dd fe ff       	call   c00042d0 <f_close>
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	90                   	nop
c001657d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016585:	74 41                	je     c00165c8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016587:	eb 33                	jmp    c00165bc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016589:	8d 76 00             	lea    esi,[esi+0x0]
c001658c:	83 ec 0c             	sub    esp,0xc
c001658f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016596:	e8 3e 12 ff ff       	call   c00077d9 <rfree>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	83 ec 04             	sub    esp,0x4
c00165a1:	6a 00                	push   0x0
c00165a3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00165aa:	50                   	push   eax
c00165ab:	6a 00                	push   0x0
c00165ad:	e8 09 d5 fe ff       	call   c0003abb <f_mount>
c00165b2:	83 c4 10             	add    esp,0x10
c00165b5:	b0 00                	mov    al,0x0
c00165b7:	eb 17                	jmp    c00165d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00165b9:	8d 76 00             	lea    esi,[esi+0x0]
c00165bc:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00165c1:	40                   	inc    eax
c00165c2:	a3 00 38 02 c0       	mov    ds:0xc0023800,eax
c00165c7:	90                   	nop
c00165c8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00165cf:	90                   	nop
c00165d0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00165d6:	c3                   	ret    
c00165d7:	90                   	nop

c00165d8 <FAT::allocateSwapfile(char const*, int)>:
c00165d8:	55                   	push   ebp
c00165d9:	57                   	push   edi
c00165da:	56                   	push   esi
c00165db:	53                   	push   ebx
c00165dc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00165e2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00165ed:	83 ec 0c             	sub    esp,0xc
c00165f0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00165f7:	e8 bd 11 ff ff       	call   c00077b9 <malloc>
c00165fc:	83 c4 10             	add    esp,0x10
c00165ff:	89 c7                	mov    edi,eax
c0016601:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0016606:	83 ec 04             	sub    esp,0x4
c0016609:	50                   	push   eax
c001660a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016611:	57                   	push   edi
c0016612:	e8 37 44 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016621:	83 ec 04             	sub    esp,0x4
c0016624:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016628:	50                   	push   eax
c0016629:	8d 44 24 18          	lea    eax,[esp+0x18]
c001662d:	50                   	push   eax
c001662e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016635:	e8 80 47 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c001663a:	83 c4 10             	add    esp,0x10
c001663d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016644:	c1 e0 14             	shl    eax,0x14
c0016647:	89 c7                	mov    edi,eax
c0016649:	89 c5                	mov    ebp,eax
c001664b:	c1 fd 1f             	sar    ebp,0x1f
c001664e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016656:	89 f9                	mov    ecx,edi
c0016658:	31 c1                	xor    ecx,eax
c001665a:	89 cb                	mov    ebx,ecx
c001665c:	89 e9                	mov    ecx,ebp
c001665e:	31 d1                	xor    ecx,edx
c0016660:	89 ce                	mov    esi,ecx
c0016662:	89 f0                	mov    eax,esi
c0016664:	09 d8                	or     eax,ebx
c0016666:	0f 84 9c 00 00 00    	je     c0016708 <FAT::allocateSwapfile(char const*, int)+0x130>
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016676:	e8 0b 46 ff ff       	call   c000ac86 <File::unlink()>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	83 ec 08             	sub    esp,0x8
c0016681:	6a 12                	push   0x12
c0016683:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001668a:	e8 7f 44 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016699:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001669f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00166a6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00166ad:	c1 e0 14             	shl    eax,0x14
c00166b0:	83 ec 04             	sub    esp,0x4
c00166b3:	6a 01                	push   0x1
c00166b5:	50                   	push   eax
c00166b6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00166bd:	e8 73 ea fe ff       	call   c0005135 <f_expand>
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00166ce:	83 c0 10             	add    eax,0x10
c00166d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00166d3:	83 ec 0c             	sub    esp,0xc
c00166d6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166da:	52                   	push   edx
c00166db:	8d 54 24 30          	lea    edx,[esp+0x30]
c00166df:	52                   	push   edx
c00166e0:	6a 00                	push   0x0
c00166e2:	68 00 04 00 00       	push   0x400
c00166e7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166ee:	ff d0                	call   eax
c00166f0:	83 c4 20             	add    esp,0x20
c00166f3:	83 ec 0c             	sub    esp,0xc
c00166f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166fd:	e8 6a 44 ff ff       	call   c000ab6c <File::close()>
c0016702:	83 c4 10             	add    esp,0x10
c0016705:	8d 76 00             	lea    esi,[esi+0x0]
c0016708:	83 ec 08             	sub    esp,0x8
c001670b:	6a 01                	push   0x1
c001670d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016714:	e8 f5 43 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016723:	8b 00                	mov    eax,DWORD PTR [eax]
c0016725:	83 c0 0c             	add    eax,0xc
c0016728:	8b 00                	mov    eax,DWORD PTR [eax]
c001672a:	83 ec 0c             	sub    esp,0xc
c001672d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016731:	52                   	push   edx
c0016732:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016736:	52                   	push   edx
c0016737:	6a 00                	push   0x0
c0016739:	6a 04                	push   0x4
c001673b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016742:	ff d0                	call   eax
c0016744:	83 c4 20             	add    esp,0x20
c0016747:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001674e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016754:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001675b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016762:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016765:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016776:	e8 f1 43 ff ff       	call   c000ab6c <File::close()>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016785:	ba 00 00 00 00       	mov    edx,0x0
c001678a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016790:	5b                   	pop    ebx
c0016791:	5e                   	pop    esi
c0016792:	5f                   	pop    edi
c0016793:	5d                   	pop    ebp
c0016794:	c3                   	ret    
c0016795:	90                   	nop
c0016796:	66 90                	xchg   ax,ax

c0016798 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016798:	57                   	push   edi
c0016799:	56                   	push   esi
c001679a:	53                   	push   ebx
c001679b:	81 ec 50 02 00 00    	sub    esp,0x250
c00167a1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00167a9:	74 0d                	je     c00167b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00167ab:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00167b3:	75 0f                	jne    c00167c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00167b5:	8d 76 00             	lea    esi,[esi+0x0]
c00167b8:	b8 04 00 00 00       	mov    eax,0x4
c00167bd:	e9 36 01 00 00       	jmp    c00168f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00167c2:	66 90                	xchg   ax,ax
c00167c4:	83 ec 08             	sub    esp,0x8
c00167c7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00167ce:	50                   	push   eax
c00167cf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00167d6:	e8 b8 dd fe ff       	call   c0004593 <f_readdir>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00167e5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00167ec:	83 ec 0c             	sub    esp,0xc
c00167ef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00167f6:	83 c0 16             	add    eax,0x16
c00167f9:	50                   	push   eax
c00167fa:	e8 41 9d fe ff       	call   c0000540 <strlen>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	ba 00 00 00 00       	mov    edx,0x0
c0016807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001680b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001680f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016816:	25 ff 00 00 00       	and    eax,0xff
c001681b:	83 e0 10             	and    eax,0x10
c001681e:	74 08                	je     c0016828 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016820:	b8 02 00 00 00       	mov    eax,0x2
c0016825:	eb 09                	jmp    c0016830 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016827:	90                   	nop
c0016828:	b8 01 00 00 00       	mov    eax,0x1
c001682d:	8d 76 00             	lea    esi,[esi+0x0]
c0016830:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016834:	83 ec 08             	sub    esp,0x8
c0016837:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001683e:	83 c0 16             	add    eax,0x16
c0016841:	50                   	push   eax
c0016842:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016846:	83 c0 10             	add    eax,0x10
c0016849:	50                   	push   eax
c001684a:	e8 b1 9d fe ff       	call   c0000600 <strcpy>
c001684f:	83 c4 10             	add    esp,0x10
c0016852:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016859:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016860:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016864:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001686b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016872:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016879:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016880:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016887:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001688e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016895:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001689c:	89 c6                	mov    esi,eax
c001689e:	89 d7                	mov    edi,edx
c00168a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168a2:	89 c8                	mov    eax,ecx
c00168a4:	89 fa                	mov    edx,edi
c00168a6:	89 f3                	mov    ebx,esi
c00168a8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00168af:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00168b6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00168bd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00168c4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00168ca:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00168d1:	84 c0                	test   al,al
c00168d3:	75 07                	jne    c00168dc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c00168d5:	b8 07 00 00 00       	mov    eax,0x7
c00168da:	eb 1c                	jmp    c00168f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168dc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00168e3:	85 c0                	test   eax,eax
c00168e5:	75 09                	jne    c00168f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c00168e7:	b8 00 00 00 00       	mov    eax,0x0
c00168ec:	eb 0a                	jmp    c00168f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168ee:	66 90                	xchg   ax,ax
c00168f0:	b8 01 00 00 00       	mov    eax,0x1
c00168f5:	8d 76 00             	lea    esi,[esi+0x0]
c00168f8:	81 c4 50 02 00 00    	add    esp,0x250
c00168fe:	5b                   	pop    ebx
c00168ff:	5e                   	pop    esi
c0016900:	5f                   	pop    edi
c0016901:	c3                   	ret    
c0016902:	66 90                	xchg   ax,ax

c0016904 <FAT::read(void*, unsigned long, void*, int*)>:
c0016904:	83 ec 1c             	sub    esp,0x1c
c0016907:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001690c:	74 0a                	je     c0016918 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001690e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016913:	75 0b                	jne    c0016920 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016915:	8d 76 00             	lea    esi,[esi+0x0]
c0016918:	b8 04 00 00 00       	mov    eax,0x4
c001691d:	eb 41                	jmp    c0016960 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001691f:	90                   	nop
c0016920:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016924:	50                   	push   eax
c0016925:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016929:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001692d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016931:	e8 b2 d4 fe ff       	call   c0003de8 <f_read>
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001693d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016941:	89 c2                	mov    edx,eax
c0016943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016947:	89 10                	mov    DWORD PTR [eax],edx
c0016949:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001694d:	85 c0                	test   eax,eax
c001694f:	75 07                	jne    c0016958 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016951:	b8 00 00 00 00       	mov    eax,0x0
c0016956:	eb 08                	jmp    c0016960 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016958:	b8 01 00 00 00       	mov    eax,0x1
c001695d:	8d 76 00             	lea    esi,[esi+0x0]
c0016960:	83 c4 1c             	add    esp,0x1c
c0016963:	c3                   	ret    

c0016964 <FAT::write(void*, unsigned long, void*, int*)>:
c0016964:	83 ec 1c             	sub    esp,0x1c
c0016967:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001696c:	74 0a                	je     c0016978 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001696e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016973:	75 0b                	jne    c0016980 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016975:	8d 76 00             	lea    esi,[esi+0x0]
c0016978:	b8 04 00 00 00       	mov    eax,0x4
c001697d:	eb 41                	jmp    c00169c0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001697f:	90                   	nop
c0016980:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016984:	50                   	push   eax
c0016985:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016989:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001698d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016991:	e8 51 d6 fe ff       	call   c0003fe7 <f_write>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001699d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169a1:	89 c2                	mov    edx,eax
c00169a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a7:	89 10                	mov    DWORD PTR [eax],edx
c00169a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ad:	85 c0                	test   eax,eax
c00169af:	75 07                	jne    c00169b8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00169b1:	b8 00 00 00 00       	mov    eax,0x0
c00169b6:	eb 08                	jmp    c00169c0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00169b8:	b8 01 00 00 00       	mov    eax,0x1
c00169bd:	8d 76 00             	lea    esi,[esi+0x0]
c00169c0:	83 c4 1c             	add    esp,0x1c
c00169c3:	c3                   	ret    

c00169c4 <FAT::close(void*)>:
c00169c4:	83 ec 1c             	sub    esp,0x1c
c00169c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169cc:	75 0a                	jne    c00169d8 <FAT::close(void*)+0x14>
c00169ce:	b8 04 00 00 00       	mov    eax,0x4
c00169d3:	eb 3f                	jmp    c0016a14 <FAT::close(void*)+0x50>
c00169d5:	8d 76 00             	lea    esi,[esi+0x0]
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169df:	e8 ec d8 fe ff       	call   c00042d0 <f_close>
c00169e4:	83 c4 10             	add    esp,0x10
c00169e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169eb:	83 ec 0c             	sub    esp,0xc
c00169ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169f2:	e8 d2 0d ff ff       	call   c00077c9 <free>
c00169f7:	83 c4 10             	add    esp,0x10
c00169fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169fe:	85 c0                	test   eax,eax
c0016a00:	75 0a                	jne    c0016a0c <FAT::close(void*)+0x48>
c0016a02:	b8 00 00 00 00       	mov    eax,0x0
c0016a07:	eb 0b                	jmp    c0016a14 <FAT::close(void*)+0x50>
c0016a09:	8d 76 00             	lea    esi,[esi+0x0]
c0016a0c:	b8 01 00 00 00       	mov    eax,0x1
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]
c0016a14:	83 c4 1c             	add    esp,0x1c
c0016a17:	c3                   	ret    

c0016a18 <FAT::closeDir(void*)>:
c0016a18:	83 ec 1c             	sub    esp,0x1c
c0016a1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a20:	75 0a                	jne    c0016a2c <FAT::closeDir(void*)+0x14>
c0016a22:	b8 04 00 00 00       	mov    eax,0x4
c0016a27:	eb 3f                	jmp    c0016a68 <FAT::closeDir(void*)+0x50>
c0016a29:	8d 76 00             	lea    esi,[esi+0x0]
c0016a2c:	83 ec 0c             	sub    esp,0xc
c0016a2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a33:	e8 39 db fe ff       	call   c0004571 <f_closedir>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a3f:	83 ec 0c             	sub    esp,0xc
c0016a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a46:	e8 7e 0d ff ff       	call   c00077c9 <free>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a52:	85 c0                	test   eax,eax
c0016a54:	75 0a                	jne    c0016a60 <FAT::closeDir(void*)+0x48>
c0016a56:	b8 00 00 00 00       	mov    eax,0x0
c0016a5b:	eb 0b                	jmp    c0016a68 <FAT::closeDir(void*)+0x50>
c0016a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a60:	b8 01 00 00 00       	mov    eax,0x1
c0016a65:	8d 76 00             	lea    esi,[esi+0x0]
c0016a68:	83 c4 1c             	add    esp,0x1c
c0016a6b:	c3                   	ret    

c0016a6c <FAT::seek(void*, unsigned long long)>:
c0016a6c:	83 ec 2c             	sub    esp,0x2c
c0016a6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a7f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016a84:	75 0a                	jne    c0016a90 <FAT::seek(void*, unsigned long long)+0x24>
c0016a86:	b8 04 00 00 00       	mov    eax,0x4
c0016a8b:	eb 33                	jmp    c0016ac0 <FAT::seek(void*, unsigned long long)+0x54>
c0016a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a94:	83 ec 08             	sub    esp,0x8
c0016a97:	50                   	push   eax
c0016a98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a9c:	e8 5e d8 fe ff       	call   c00042ff <f_lseek>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016aa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aac:	85 c0                	test   eax,eax
c0016aae:	75 08                	jne    c0016ab8 <FAT::seek(void*, unsigned long long)+0x4c>
c0016ab0:	b8 00 00 00 00       	mov    eax,0x0
c0016ab5:	eb 09                	jmp    c0016ac0 <FAT::seek(void*, unsigned long long)+0x54>
c0016ab7:	90                   	nop
c0016ab8:	b8 01 00 00 00       	mov    eax,0x1
c0016abd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac0:	83 c4 2c             	add    esp,0x2c
c0016ac3:	c3                   	ret    

c0016ac4 <fatWrapperReadDisk>:
c0016ac4:	53                   	push   ebx
c0016ac5:	83 ec 18             	sub    esp,0x18
c0016ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ad0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ad4:	25 ff 00 00 00       	and    eax,0xff
c0016ad9:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c0016ae0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ae4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ae8:	ba 00 00 00 00       	mov    edx,0x0
c0016aed:	83 ec 0c             	sub    esp,0xc
c0016af0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016af4:	53                   	push   ebx
c0016af5:	52                   	push   edx
c0016af6:	50                   	push   eax
c0016af7:	51                   	push   ecx
c0016af8:	e8 c3 60 ff ff       	call   c000cbc0 <LogicalDisk::read(unsigned long long, int, void*)>
c0016afd:	83 c4 20             	add    esp,0x20
c0016b00:	83 c4 18             	add    esp,0x18
c0016b03:	5b                   	pop    ebx
c0016b04:	c3                   	ret    
c0016b05:	8d 76 00             	lea    esi,[esi+0x0]

c0016b08 <fatWrapperWriteDisk>:
c0016b08:	53                   	push   ebx
c0016b09:	83 ec 18             	sub    esp,0x18
c0016b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b18:	25 ff 00 00 00       	and    eax,0xff
c0016b1d:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c0016b24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b2c:	ba 00 00 00 00       	mov    edx,0x0
c0016b31:	83 ec 0c             	sub    esp,0xc
c0016b34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b38:	53                   	push   ebx
c0016b39:	52                   	push   edx
c0016b3a:	50                   	push   eax
c0016b3b:	51                   	push   ecx
c0016b3c:	e8 eb 60 ff ff       	call   c000cc2c <LogicalDisk::write(unsigned long long, int, void*)>
c0016b41:	83 c4 20             	add    esp,0x20
c0016b44:	83 c4 18             	add    esp,0x18
c0016b47:	5b                   	pop    ebx
c0016b48:	c3                   	ret    
c0016b49:	8d 76 00             	lea    esi,[esi+0x0]

c0016b4c <fatWrapperIoctl>:
c0016b4c:	53                   	push   ebx
c0016b4d:	83 ec 28             	sub    esp,0x28
c0016b50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b58:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016b5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016b60:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016b65:	75 35                	jne    c0016b9c <fatWrapperIoctl+0x50>
c0016b67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b73:	25 ff 00 00 00       	and    eax,0xff
c0016b78:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c0016b7f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b8f:	66 89 02             	mov    WORD PTR [edx],ax
c0016b92:	b8 00 00 00 00       	mov    eax,0x0
c0016b97:	e9 c4 00 00 00       	jmp    c0016c60 <fatWrapperIoctl+0x114>
c0016b9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016ba1:	75 75                	jne    c0016c18 <fatWrapperIoctl+0xcc>
c0016ba3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ba7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016baf:	25 ff 00 00 00       	and    eax,0xff
c0016bb4:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c0016bbb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016bc1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016bc7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016bcd:	89 c8                	mov    eax,ecx
c0016bcf:	89 da                	mov    edx,ebx
c0016bd1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd5:	c1 e0 0a             	shl    eax,0xa
c0016bd8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016bdc:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016be2:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c0016be9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016bef:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016bf5:	89 cb                	mov    ebx,ecx
c0016bf7:	c1 fb 1f             	sar    ebx,0x1f
c0016bfa:	53                   	push   ebx
c0016bfb:	51                   	push   ecx
c0016bfc:	52                   	push   edx
c0016bfd:	50                   	push   eax
c0016bfe:	e8 4d 50 00 00       	call   c001bc50 <__udivdi3>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	89 c2                	mov    edx,eax
c0016c08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c0c:	89 10                	mov    DWORD PTR [eax],edx
c0016c0e:	b8 00 00 00 00       	mov    eax,0x0
c0016c13:	eb 4b                	jmp    c0016c60 <fatWrapperIoctl+0x114>
c0016c15:	8d 76 00             	lea    esi,[esi+0x0]
c0016c18:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016c1d:	75 09                	jne    c0016c28 <fatWrapperIoctl+0xdc>
c0016c1f:	b8 00 00 00 00       	mov    eax,0x0
c0016c24:	eb 3a                	jmp    c0016c60 <fatWrapperIoctl+0x114>
c0016c26:	66 90                	xchg   ax,ax
c0016c28:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016c2d:	75 19                	jne    c0016c48 <fatWrapperIoctl+0xfc>
c0016c2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c3b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016c41:	b8 00 00 00 00       	mov    eax,0x0
c0016c46:	eb 18                	jmp    c0016c60 <fatWrapperIoctl+0x114>
c0016c48:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016c4d:	75 09                	jne    c0016c58 <fatWrapperIoctl+0x10c>
c0016c4f:	b8 00 00 00 00       	mov    eax,0x0
c0016c54:	eb 0a                	jmp    c0016c60 <fatWrapperIoctl+0x114>
c0016c56:	66 90                	xchg   ax,ax
c0016c58:	b8 04 00 00 00       	mov    eax,0x4
c0016c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c60:	83 c4 28             	add    esp,0x28
c0016c63:	5b                   	pop    ebx
c0016c64:	c3                   	ret    
c0016c65:	90                   	nop
c0016c66:	66 90                	xchg   ax,ax

c0016c68 <FAT::FAT()>:
c0016c68:	83 ec 1c             	sub    esp,0x1c
c0016c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6f:	83 ec 0c             	sub    esp,0xc
c0016c72:	50                   	push   eax
c0016c73:	e8 82 3b ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c0016c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c84:	89 10                	mov    DWORD PTR [eax],edx
c0016c86:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0016c90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c98:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016c9d:	7f 15                	jg     c0016cb4 <FAT::FAT()+0x4c>
c0016c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ca3:	c7 04 85 20 38 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc7e0],0xffffffff
c0016cae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cb2:	eb e4                	jmp    c0016c98 <FAT::FAT()+0x30>
c0016cb4:	90                   	nop
c0016cb5:	83 c4 1c             	add    esp,0x1c
c0016cb8:	c3                   	ret    
c0016cb9:	90                   	nop
c0016cba:	66 90                	xchg   ax,ax

c0016cbc <FAT::fixFilepath(char*)>:
c0016cbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cc0:	8a 00                	mov    al,BYTE PTR [eax]
c0016cc2:	3c 40                	cmp    al,0x40
c0016cc4:	7e 2e                	jle    c0016cf4 <FAT::fixFilepath(char*)+0x38>
c0016cc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cca:	8a 00                	mov    al,BYTE PTR [eax]
c0016ccc:	83 e8 41             	sub    eax,0x41
c0016ccf:	88 c2                	mov    dl,al
c0016cd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cd5:	88 10                	mov    BYTE PTR [eax],dl
c0016cd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0016cdd:	0f be c0             	movsx  eax,al
c0016ce0:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016ce7:	83 c0 30             	add    eax,0x30
c0016cea:	88 c2                	mov    dl,al
c0016cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cf0:	88 10                	mov    BYTE PTR [eax],dl
c0016cf2:	66 90                	xchg   ax,ax
c0016cf4:	90                   	nop
c0016cf5:	c3                   	ret    
c0016cf6:	66 90                	xchg   ax,ax

c0016cf8 <FAT::open(char const*, void**, FileOpenMode)>:
c0016cf8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016cfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016d06:	74 0c                	je     c0016d14 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016d08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016d10:	75 0e                	jne    c0016d20 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016d12:	66 90                	xchg   ax,ax
c0016d14:	b8 04 00 00 00       	mov    eax,0x4
c0016d19:	e9 0a 01 00 00       	jmp    c0016e28 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016d1e:	66 90                	xchg   ax,ax
c0016d20:	83 ec 08             	sub    esp,0x8
c0016d23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d2e:	50                   	push   eax
c0016d2f:	e8 cc 98 fe ff       	call   c0000600 <strcpy>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	83 ec 08             	sub    esp,0x8
c0016d3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d3e:	50                   	push   eax
c0016d3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d46:	e8 71 ff ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016d56:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d5d:	83 e0 01             	and    eax,0x1
c0016d60:	74 0a                	je     c0016d6c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016d62:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016d6a:	66 90                	xchg   ax,ax
c0016d6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d73:	83 e0 04             	and    eax,0x4
c0016d76:	74 10                	je     c0016d88 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016d78:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016d80:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d8f:	83 e0 02             	and    eax,0x2
c0016d92:	74 08                	je     c0016d9c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016d94:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016da3:	83 e0 08             	and    eax,0x8
c0016da6:	74 08                	je     c0016db0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016da8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016db0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016db7:	83 e0 10             	and    eax,0x10
c0016dba:	74 08                	je     c0016dc4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016dbc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	68 28 02 00 00       	push   0x228
c0016dcc:	e8 e8 09 ff ff       	call   c00077b9 <malloc>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	89 c2                	mov    edx,eax
c0016dd6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ddd:	89 10                	mov    DWORD PTR [eax],edx
c0016ddf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016de6:	31 d2                	xor    edx,edx
c0016de8:	88 c2                	mov    dl,al
c0016dea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016df3:	83 ec 04             	sub    esp,0x4
c0016df6:	52                   	push   edx
c0016df7:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016dfb:	52                   	push   edx
c0016dfc:	50                   	push   eax
c0016dfd:	e8 1b cd fe ff       	call   c0003b1d <f_open>
c0016e02:	83 c4 10             	add    esp,0x10
c0016e05:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016e0c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016e14:	74 0a                	je     c0016e20 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016e16:	b8 01 00 00 00       	mov    eax,0x1
c0016e1b:	eb 0b                	jmp    c0016e28 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	b8 00 00 00 00       	mov    eax,0x0
c0016e25:	8d 76 00             	lea    esi,[esi+0x0]
c0016e28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e2e:	c3                   	ret    
c0016e2f:	90                   	nop

c0016e30 <FAT::openDir(char const*, void**)>:
c0016e30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e3e:	74 0c                	je     c0016e4c <FAT::openDir(char const*, void**)+0x1c>
c0016e40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e48:	75 0e                	jne    c0016e58 <FAT::openDir(char const*, void**)+0x28>
c0016e4a:	66 90                	xchg   ax,ax
c0016e4c:	b8 04 00 00 00       	mov    eax,0x4
c0016e51:	e9 82 00 00 00       	jmp    c0016ed8 <FAT::openDir(char const*, void**)+0xa8>
c0016e56:	66 90                	xchg   ax,ax
c0016e58:	83 ec 08             	sub    esp,0x8
c0016e5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e62:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e66:	50                   	push   eax
c0016e67:	e8 94 97 fe ff       	call   c0000600 <strcpy>
c0016e6c:	83 c4 10             	add    esp,0x10
c0016e6f:	83 ec 08             	sub    esp,0x8
c0016e72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e76:	50                   	push   eax
c0016e77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e7e:	e8 39 fe ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	83 ec 0c             	sub    esp,0xc
c0016e89:	6a 30                	push   0x30
c0016e8b:	e8 29 09 ff ff       	call   c00077b9 <malloc>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	89 c2                	mov    edx,eax
c0016e95:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e9c:	89 10                	mov    DWORD PTR [eax],edx
c0016e9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ea5:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ea7:	83 ec 08             	sub    esp,0x8
c0016eaa:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016eae:	52                   	push   edx
c0016eaf:	50                   	push   eax
c0016eb0:	e8 f1 d5 fe ff       	call   c00044a6 <f_opendir>
c0016eb5:	83 c4 10             	add    esp,0x10
c0016eb8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016ebf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016ec7:	74 07                	je     c0016ed0 <FAT::openDir(char const*, void**)+0xa0>
c0016ec9:	b8 01 00 00 00       	mov    eax,0x1
c0016ece:	eb 08                	jmp    c0016ed8 <FAT::openDir(char const*, void**)+0xa8>
c0016ed0:	b8 00 00 00 00       	mov    eax,0x0
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016ede:	c3                   	ret    
c0016edf:	90                   	nop

c0016ee0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016ee0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016ee6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016eee:	75 0c                	jne    c0016efc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016ef0:	b8 04 00 00 00       	mov    eax,0x4
c0016ef5:	e9 d6 00 00 00       	jmp    c0016fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016efa:	66 90                	xchg   ax,ax
c0016efc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016f04:	75 0a                	jne    c0016f10 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016f06:	b8 04 00 00 00       	mov    eax,0x4
c0016f0b:	e9 c0 00 00 00       	jmp    c0016fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f10:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016f18:	75 0a                	jne    c0016f24 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016f1a:	b8 04 00 00 00       	mov    eax,0x4
c0016f1f:	e9 ac 00 00 00       	jmp    c0016fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f24:	83 ec 08             	sub    esp,0x8
c0016f27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f2e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f35:	50                   	push   eax
c0016f36:	e8 c5 96 fe ff       	call   c0000600 <strcpy>
c0016f3b:	83 c4 10             	add    esp,0x10
c0016f3e:	83 ec 08             	sub    esp,0x8
c0016f41:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016f48:	50                   	push   eax
c0016f49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f50:	e8 67 fd ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c0016f55:	83 c4 10             	add    esp,0x10
c0016f58:	83 ec 08             	sub    esp,0x8
c0016f5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f5f:	50                   	push   eax
c0016f60:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f67:	50                   	push   eax
c0016f68:	e8 b8 d6 fe ff       	call   c0004625 <f_stat>
c0016f6d:	83 c4 10             	add    esp,0x10
c0016f70:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016f77:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016f7e:	85 c0                	test   eax,eax
c0016f80:	74 0a                	je     c0016f8c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016f82:	83 f8 04             	cmp    eax,0x4
c0016f85:	74 39                	je     c0016fc0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016f87:	eb 3f                	jmp    c0016fc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016f89:	8d 76 00             	lea    esi,[esi+0x0]
c0016f8c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f90:	25 ff 00 00 00       	and    eax,0xff
c0016f95:	83 e0 10             	and    eax,0x10
c0016f98:	0f 95 c2             	setne  dl
c0016f9b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016fa2:	88 10                	mov    BYTE PTR [eax],dl
c0016fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fa8:	ba 00 00 00 00       	mov    edx,0x0
c0016fad:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016fb4:	89 01                	mov    DWORD PTR [ecx],eax
c0016fb6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016fb9:	b8 00 00 00 00       	mov    eax,0x0
c0016fbe:	eb 10                	jmp    c0016fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016fc0:	b8 02 00 00 00       	mov    eax,0x2
c0016fc5:	eb 09                	jmp    c0016fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016fc7:	90                   	nop
c0016fc8:	b8 01 00 00 00       	mov    eax,0x1
c0016fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016fd6:	c3                   	ret    
c0016fd7:	90                   	nop

c0016fd8 <FAT::unlink(char const*)>:
c0016fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016fe6:	75 08                	jne    c0016ff0 <FAT::unlink(char const*)+0x18>
c0016fe8:	b8 04 00 00 00       	mov    eax,0x4
c0016fed:	eb 61                	jmp    c0017050 <FAT::unlink(char const*)+0x78>
c0016fef:	90                   	nop
c0016ff0:	83 ec 08             	sub    esp,0x8
c0016ff3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ffa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ffe:	50                   	push   eax
c0016fff:	e8 fc 95 fe ff       	call   c0000600 <strcpy>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	83 ec 08             	sub    esp,0x8
c001700a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001700e:	50                   	push   eax
c001700f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017016:	e8 a1 fc ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	83 ec 0c             	sub    esp,0xc
c0017021:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017025:	50                   	push   eax
c0017026:	e8 5f d8 fe ff       	call   c000488a <f_unlink>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017035:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001703c:	85 c0                	test   eax,eax
c001703e:	75 08                	jne    c0017048 <FAT::unlink(char const*)+0x70>
c0017040:	b8 00 00 00 00       	mov    eax,0x0
c0017045:	eb 09                	jmp    c0017050 <FAT::unlink(char const*)+0x78>
c0017047:	90                   	nop
c0017048:	b8 01 00 00 00       	mov    eax,0x1
c001704d:	8d 76 00             	lea    esi,[esi+0x0]
c0017050:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017056:	c3                   	ret    
c0017057:	90                   	nop

c0017058 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017058:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001705e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017065:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001706c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017070:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017074:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001707c:	75 0a                	jne    c0017088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001707e:	b8 04 00 00 00       	mov    eax,0x4
c0017083:	e9 54 01 00 00       	jmp    c00171dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017088:	83 ec 08             	sub    esp,0x8
c001708b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017092:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017096:	50                   	push   eax
c0017097:	e8 64 95 fe ff       	call   c0000600 <strcpy>
c001709c:	83 c4 10             	add    esp,0x10
c001709f:	83 ec 08             	sub    esp,0x8
c00170a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170a6:	50                   	push   eax
c00170a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170ae:	e8 09 fc ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c00170b3:	83 c4 10             	add    esp,0x10
c00170b6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00170be:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00170c6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170ca:	25 ff 00 00 00       	and    eax,0xff
c00170cf:	83 e0 01             	and    eax,0x1
c00170d2:	74 08                	je     c00170dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00170d4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00170dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170e0:	25 ff 00 00 00       	and    eax,0xff
c00170e5:	83 e0 02             	and    eax,0x2
c00170e8:	74 0a                	je     c00170f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00170ea:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00170f2:	66 90                	xchg   ax,ax
c00170f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170f8:	25 ff 00 00 00       	and    eax,0xff
c00170fd:	83 e0 04             	and    eax,0x4
c0017100:	74 0a                	je     c001710c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017102:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001710a:	66 90                	xchg   ax,ax
c001710c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017110:	25 ff 00 00 00       	and    eax,0xff
c0017115:	83 e0 08             	and    eax,0x8
c0017118:	74 0a                	je     c0017124 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001711a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017122:	66 90                	xchg   ax,ax
c0017124:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017128:	25 ff 00 00 00       	and    eax,0xff
c001712d:	83 e0 01             	and    eax,0x1
c0017130:	74 0a                	je     c001713c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017132:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001713a:	66 90                	xchg   ax,ax
c001713c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017140:	25 ff 00 00 00       	and    eax,0xff
c0017145:	83 e0 02             	and    eax,0x2
c0017148:	74 0a                	je     c0017154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001714a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017152:	66 90                	xchg   ax,ax
c0017154:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017158:	25 ff 00 00 00       	and    eax,0xff
c001715d:	83 e0 04             	and    eax,0x4
c0017160:	74 0a                	je     c001716c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017162:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001716a:	66 90                	xchg   ax,ax
c001716c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017170:	25 ff 00 00 00       	and    eax,0xff
c0017175:	83 e0 08             	and    eax,0x8
c0017178:	74 0a                	je     c0017184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001717a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017182:	66 90                	xchg   ax,ax
c0017184:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001718b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017192:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017199:	31 d2                	xor    edx,edx
c001719b:	88 c2                	mov    dl,al
c001719d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171a4:	25 ff 00 00 00       	and    eax,0xff
c00171a9:	83 ec 04             	sub    esp,0x4
c00171ac:	52                   	push   edx
c00171ad:	50                   	push   eax
c00171ae:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171b2:	50                   	push   eax
c00171b3:	e8 45 db fe ff       	call   c0004cfd <f_chmod>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00171c2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00171c9:	85 c0                	test   eax,eax
c00171cb:	75 07                	jne    c00171d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00171cd:	b8 00 00 00 00       	mov    eax,0x0
c00171d2:	eb 08                	jmp    c00171dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00171d4:	b8 01 00 00 00       	mov    eax,0x1
c00171d9:	8d 76 00             	lea    esi,[esi+0x0]
c00171dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00171e2:	c3                   	ret    
c00171e3:	90                   	nop

c00171e4 <FAT::rename(char const*, char const*)>:
c00171e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00171ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00171f2:	74 0c                	je     c0017200 <FAT::rename(char const*, char const*)+0x1c>
c00171f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00171fc:	75 0e                	jne    c001720c <FAT::rename(char const*, char const*)+0x28>
c00171fe:	66 90                	xchg   ax,ax
c0017200:	b8 04 00 00 00       	mov    eax,0x4
c0017205:	e9 9e 00 00 00       	jmp    c00172a8 <FAT::rename(char const*, char const*)+0xc4>
c001720a:	66 90                	xchg   ax,ax
c001720c:	83 ec 08             	sub    esp,0x8
c001720f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017216:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001721d:	50                   	push   eax
c001721e:	e8 dd 93 fe ff       	call   c0000600 <strcpy>
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	83 ec 08             	sub    esp,0x8
c0017229:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017230:	50                   	push   eax
c0017231:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017238:	e8 7f fa ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c001723d:	83 c4 10             	add    esp,0x10
c0017240:	83 ec 08             	sub    esp,0x8
c0017243:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001724a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001724e:	50                   	push   eax
c001724f:	e8 ac 93 fe ff       	call   c0000600 <strcpy>
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	83 ec 08             	sub    esp,0x8
c001725a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001725e:	50                   	push   eax
c001725f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017266:	e8 51 fa ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	83 ec 08             	sub    esp,0x8
c0017271:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017275:	50                   	push   eax
c0017276:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001727d:	50                   	push   eax
c001727e:	e8 c4 d8 fe ff       	call   c0004b47 <f_rename>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001728d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017294:	85 c0                	test   eax,eax
c0017296:	75 08                	jne    c00172a0 <FAT::rename(char const*, char const*)+0xbc>
c0017298:	b8 00 00 00 00       	mov    eax,0x0
c001729d:	eb 09                	jmp    c00172a8 <FAT::rename(char const*, char const*)+0xc4>
c001729f:	90                   	nop
c00172a0:	b8 01 00 00 00       	mov    eax,0x1
c00172a5:	8d 76 00             	lea    esi,[esi+0x0]
c00172a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00172ae:	c3                   	ret    
c00172af:	90                   	nop

c00172b0 <FAT::mkdir(char const*)>:
c00172b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172be:	75 08                	jne    c00172c8 <FAT::mkdir(char const*)+0x18>
c00172c0:	b8 04 00 00 00       	mov    eax,0x4
c00172c5:	eb 61                	jmp    c0017328 <FAT::mkdir(char const*)+0x78>
c00172c7:	90                   	nop
c00172c8:	83 ec 08             	sub    esp,0x8
c00172cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172d6:	50                   	push   eax
c00172d7:	e8 24 93 fe ff       	call   c0000600 <strcpy>
c00172dc:	83 c4 10             	add    esp,0x10
c00172df:	83 ec 08             	sub    esp,0x8
c00172e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172e6:	50                   	push   eax
c00172e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ee:	e8 c9 f9 ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	83 ec 0c             	sub    esp,0xc
c00172f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172fd:	50                   	push   eax
c00172fe:	e8 a9 d6 fe ff       	call   c00049ac <f_mkdir>
c0017303:	83 c4 10             	add    esp,0x10
c0017306:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001730d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017314:	85 c0                	test   eax,eax
c0017316:	75 08                	jne    c0017320 <FAT::mkdir(char const*)+0x70>
c0017318:	b8 00 00 00 00       	mov    eax,0x0
c001731d:	eb 09                	jmp    c0017328 <FAT::mkdir(char const*)+0x78>
c001731f:	90                   	nop
c0017320:	b8 01 00 00 00       	mov    eax,0x1
c0017325:	8d 76 00             	lea    esi,[esi+0x0]
c0017328:	81 c4 1c 01 00 00    	add    esp,0x11c
c001732e:	c3                   	ret    
c001732f:	90                   	nop

c0017330 <FAT::exists(char const*)>:
c0017330:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017336:	83 ec 08             	sub    esp,0x8
c0017339:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017340:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017344:	50                   	push   eax
c0017345:	e8 b6 92 fe ff       	call   c0000600 <strcpy>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	83 ec 08             	sub    esp,0x8
c0017350:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017354:	50                   	push   eax
c0017355:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001735c:	e8 5b f9 ff ff       	call   c0016cbc <FAT::fixFilepath(char*)>
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	83 ec 08             	sub    esp,0x8
c0017367:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001736e:	50                   	push   eax
c001736f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017373:	50                   	push   eax
c0017374:	e8 ac d2 fe ff       	call   c0004625 <f_stat>
c0017379:	83 c4 10             	add    esp,0x10
c001737c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017383:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001738a:	85 c0                	test   eax,eax
c001738c:	75 06                	jne    c0017394 <FAT::exists(char const*)+0x64>
c001738e:	b0 01                	mov    al,0x1
c0017390:	eb 06                	jmp    c0017398 <FAT::exists(char const*)+0x68>
c0017392:	66 90                	xchg   ax,ax
c0017394:	b0 00                	mov    al,0x0
c0017396:	66 90                	xchg   ax,ax
c0017398:	81 c4 2c 02 00 00    	add    esp,0x22c
c001739e:	c3                   	ret    
c001739f:	90                   	nop

c00173a0 <isoReadDiscSectorHelper>:
c00173a0:	83 ec 2c             	sub    esp,0x2c
c00173a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00173ab:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00173b0:	83 e8 41             	sub    eax,0x41
c00173b3:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c00173ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173be:	ba 00 00 00 00       	mov    edx,0x0
c00173c3:	83 ec 0c             	sub    esp,0xc
c00173c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00173ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00173ce:	52                   	push   edx
c00173cf:	50                   	push   eax
c00173d0:	51                   	push   ecx
c00173d1:	e8 ea 57 ff ff       	call   c000cbc0 <LogicalDisk::read(unsigned long long, int, void*)>
c00173d6:	83 c4 20             	add    esp,0x20
c00173d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173dd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00173e2:	74 0c                	je     c00173f0 <isoReadDiscSectorHelper+0x50>
c00173e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173e8:	c1 e0 0b             	shl    eax,0xb
c00173eb:	eb 0b                	jmp    c00173f8 <isoReadDiscSectorHelper+0x58>
c00173ed:	8d 76 00             	lea    esi,[esi+0x0]
c00173f0:	b8 00 00 00 00       	mov    eax,0x0
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	83 c4 2c             	add    esp,0x2c
c00173fb:	c3                   	ret    

c00173fc <iso_kprintf>:
c00173fc:	83 ec 0c             	sub    esp,0xc
c00173ff:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0017404:	83 ec 08             	sub    esp,0x8
c0017407:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001740b:	50                   	push   eax
c001740c:	e8 25 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017411:	83 c4 10             	add    esp,0x10
c0017414:	90                   	nop
c0017415:	83 c4 0c             	add    esp,0xc
c0017418:	c3                   	ret    
c0017419:	8d 76 00             	lea    esi,[esi+0x0]

c001741c <iso_kprintfd>:
c001741c:	83 ec 0c             	sub    esp,0xc
c001741f:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0017424:	83 ec 08             	sub    esp,0x8
c0017427:	68 6c ea 01 c0       	push   0xc001ea6c
c001742c:	50                   	push   eax
c001742d:	e8 04 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c001743a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001743e:	83 ec 08             	sub    esp,0x8
c0017441:	52                   	push   edx
c0017442:	50                   	push   eax
c0017443:	e8 a8 12 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017448:	83 c4 10             	add    esp,0x10
c001744b:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0017450:	83 ec 08             	sub    esp,0x8
c0017453:	68 ed e8 01 c0       	push   0xc001e8ed
c0017458:	50                   	push   eax
c0017459:	e8 d8 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001745e:	83 c4 10             	add    esp,0x10
c0017461:	90                   	nop
c0017462:	83 c4 0c             	add    esp,0xc
c0017465:	c3                   	ret    

c0017466 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017466:	b8 08 00 00 00       	mov    eax,0x8
c001746b:	c3                   	ret    

c001746c <ISO9660::getName()>:
c001746c:	b8 6f ea 01 c0       	mov    eax,0xc001ea6f
c0017471:	c3                   	ret    

c0017472 <ISO9660::closeDir(void*)>:
c0017472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017476:	8b 00                	mov    eax,DWORD PTR [eax]
c0017478:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001747b:	90                   	nop

c001747c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001747c:	b8 01 00 00 00       	mov    eax,0x1
c0017481:	c3                   	ret    

c0017482 <ISO9660::unlink(char const*)>:
c0017482:	b8 01 00 00 00       	mov    eax,0x1
c0017487:	c3                   	ret    

c0017488 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017488:	b8 03 00 00 00       	mov    eax,0x3
c001748d:	c3                   	ret    

c001748e <ISO9660::rename(char const*, char const*)>:
c001748e:	b8 01 00 00 00       	mov    eax,0x1
c0017493:	c3                   	ret    

c0017494 <ISO9660::mkdir(char const*)>:
c0017494:	b8 01 00 00 00       	mov    eax,0x1
c0017499:	c3                   	ret    

c001749a <ISO9660::~ISO9660()>:
c001749a:	83 ec 0c             	sub    esp,0xc
c001749d:	ba c0 ea 01 c0       	mov    edx,0xc001eac0
c00174a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a6:	89 10                	mov    DWORD PTR [eax],edx
c00174a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ac:	83 ec 0c             	sub    esp,0xc
c00174af:	50                   	push   eax
c00174b0:	e8 69 33 ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c00174b5:	83 c4 10             	add    esp,0x10
c00174b8:	90                   	nop
c00174b9:	83 c4 0c             	add    esp,0xc
c00174bc:	c3                   	ret    
c00174bd:	90                   	nop

c00174be <ISO9660::~ISO9660()>:
c00174be:	83 ec 0c             	sub    esp,0xc
c00174c1:	83 ec 0c             	sub    esp,0xc
c00174c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174c8:	e8 cd ff ff ff       	call   c001749a <ISO9660::~ISO9660()>
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	83 ec 08             	sub    esp,0x8
c00174d3:	6a 08                	push   0x8
c00174d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d9:	e8 04 2f ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00174de:	83 c4 10             	add    esp,0x10
c00174e1:	83 c4 0c             	add    esp,0xc
c00174e4:	c3                   	ret    
c00174e5:	90                   	nop

c00174e6 <ISO9660::exists(char const*)>:
c00174e6:	83 ec 18             	sub    esp,0x18
c00174e9:	68 8a ea 01 c0       	push   0xc001ea8a
c00174ee:	e8 48 8c ff ff       	call   c001013b <KePanic(char const*)>
c00174f3:	31 c0                	xor    eax,eax
c00174f5:	83 c4 1c             	add    esp,0x1c
c00174f8:	c3                   	ret    
c00174f9:	90                   	nop

c00174fa <ISO9660::open(char const*, void**, FileOpenMode)>:
c00174fa:	56                   	push   esi
c00174fb:	53                   	push   ebx
c00174fc:	50                   	push   eax
c00174fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017501:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017505:	85 db                	test   ebx,ebx
c0017507:	0f 84 82 00 00 00    	je     c001758f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001750d:	85 f6                	test   esi,esi
c001750f:	74 7e                	je     c001758f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017511:	ba 03 00 00 00       	mov    edx,0x3
c0017516:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001751b:	75 77                	jne    c0017594 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001751d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017520:	3a 05 00 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023900
c0017526:	74 34                	je     c001755c <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017528:	83 ec 0c             	sub    esp,0xc
c001752b:	50                   	push   eax
c001752c:	e8 8e f2 fe ff       	call   c00067bf <init_percd>
c0017531:	83 c4 10             	add    esp,0x10
c0017534:	ba 0b 00 00 00       	mov    edx,0xb
c0017539:	40                   	inc    eax
c001753a:	74 58                	je     c0017594 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001753c:	80 3d 00 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023900,0x0
c0017543:	74 10                	je     c0017555 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017545:	83 ec 0c             	sub    esp,0xc
c0017548:	68 a8 ea 01 c0       	push   0xc001eaa8
c001754d:	e8 e9 8b ff ff       	call   c001013b <KePanic(char const*)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	8a 03                	mov    al,BYTE PTR [ebx]
c0017557:	a2 00 39 02 c0       	mov    ds:0xc0023900,al
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	0f be 05 00 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023900
c0017566:	83 c3 03             	add    ebx,0x3
c0017569:	50                   	push   eax
c001756a:	e8 50 f2 fe ff       	call   c00067bf <init_percd>
c001756f:	59                   	pop    ecx
c0017570:	58                   	pop    eax
c0017571:	6a 00                	push   0x0
c0017573:	53                   	push   ebx
c0017574:	e8 84 ed fe ff       	call   c00062fd <iso_open>
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	ba 01 00 00 00       	mov    edx,0x1
c0017581:	83 f8 ff             	cmp    eax,0xffffffff
c0017584:	74 0e                	je     c0017594 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017586:	83 c0 64             	add    eax,0x64
c0017589:	31 d2                	xor    edx,edx
c001758b:	89 06                	mov    DWORD PTR [esi],eax
c001758d:	eb 05                	jmp    c0017594 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001758f:	ba 04 00 00 00       	mov    edx,0x4
c0017594:	89 d0                	mov    eax,edx
c0017596:	5a                   	pop    edx
c0017597:	5b                   	pop    ebx
c0017598:	5e                   	pop    esi
c0017599:	c3                   	ret    

c001759a <ISO9660::openDir(char const*, void**)>:
c001759a:	56                   	push   esi
c001759b:	53                   	push   ebx
c001759c:	50                   	push   eax
c001759d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00175a5:	85 db                	test   ebx,ebx
c00175a7:	74 76                	je     c001761f <ISO9660::openDir(char const*, void**)+0x85>
c00175a9:	85 f6                	test   esi,esi
c00175ab:	74 72                	je     c001761f <ISO9660::openDir(char const*, void**)+0x85>
c00175ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175b0:	3a 05 00 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023900
c00175b6:	74 34                	je     c00175ec <ISO9660::openDir(char const*, void**)+0x52>
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	50                   	push   eax
c00175bc:	e8 fe f1 fe ff       	call   c00067bf <init_percd>
c00175c1:	83 c4 10             	add    esp,0x10
c00175c4:	ba 0b 00 00 00       	mov    edx,0xb
c00175c9:	40                   	inc    eax
c00175ca:	74 58                	je     c0017624 <ISO9660::openDir(char const*, void**)+0x8a>
c00175cc:	80 3d 00 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023900,0x0
c00175d3:	74 10                	je     c00175e5 <ISO9660::openDir(char const*, void**)+0x4b>
c00175d5:	83 ec 0c             	sub    esp,0xc
c00175d8:	68 a8 ea 01 c0       	push   0xc001eaa8
c00175dd:	e8 59 8b ff ff       	call   c001013b <KePanic(char const*)>
c00175e2:	83 c4 10             	add    esp,0x10
c00175e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00175e7:	a2 00 39 02 c0       	mov    ds:0xc0023900,al
c00175ec:	83 ec 0c             	sub    esp,0xc
c00175ef:	0f be 05 00 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023900
c00175f6:	83 c3 03             	add    ebx,0x3
c00175f9:	50                   	push   eax
c00175fa:	e8 c0 f1 fe ff       	call   c00067bf <init_percd>
c00175ff:	59                   	pop    ecx
c0017600:	58                   	pop    eax
c0017601:	6a 01                	push   0x1
c0017603:	53                   	push   ebx
c0017604:	e8 f4 ec fe ff       	call   c00062fd <iso_open>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	ba 01 00 00 00       	mov    edx,0x1
c0017611:	83 f8 ff             	cmp    eax,0xffffffff
c0017614:	74 0e                	je     c0017624 <ISO9660::openDir(char const*, void**)+0x8a>
c0017616:	83 c0 64             	add    eax,0x64
c0017619:	31 d2                	xor    edx,edx
c001761b:	89 06                	mov    DWORD PTR [esi],eax
c001761d:	eb 05                	jmp    c0017624 <ISO9660::openDir(char const*, void**)+0x8a>
c001761f:	ba 04 00 00 00       	mov    edx,0x4
c0017624:	89 d0                	mov    eax,edx
c0017626:	5a                   	pop    edx
c0017627:	5b                   	pop    ebx
c0017628:	5e                   	pop    esi
c0017629:	c3                   	ret    

c001762a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001762a:	53                   	push   ebx
c001762b:	83 ec 08             	sub    esp,0x8
c001762e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017632:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017636:	85 c0                	test   eax,eax
c0017638:	74 25                	je     c001765f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c001763a:	85 db                	test   ebx,ebx
c001763c:	74 21                	je     c001765f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c001763e:	83 e8 64             	sub    eax,0x64
c0017641:	52                   	push   edx
c0017642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001764a:	50                   	push   eax
c001764b:	e8 55 ed fe ff       	call   c00063a5 <iso_read>
c0017650:	83 c4 10             	add    esp,0x10
c0017653:	89 03                	mov    DWORD PTR [ebx],eax
c0017655:	09 d0                	or     eax,edx
c0017657:	0f 94 c0             	sete   al
c001765a:	0f b6 c0             	movzx  eax,al
c001765d:	eb 05                	jmp    c0017664 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c001765f:	b8 04 00 00 00       	mov    eax,0x4
c0017664:	83 c4 08             	add    esp,0x8
c0017667:	5b                   	pop    ebx
c0017668:	c3                   	ret    
c0017669:	90                   	nop

c001766a <ISO9660::seek(void*, unsigned long long)>:
c001766a:	57                   	push   edi
c001766b:	56                   	push   esi
c001766c:	b8 04 00 00 00       	mov    eax,0x4
c0017671:	51                   	push   ecx
c0017672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017676:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001767a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001767e:	85 d2                	test   edx,edx
c0017680:	74 1c                	je     c001769e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017682:	6a 00                	push   0x0
c0017684:	83 ea 64             	sub    edx,0x64
c0017687:	57                   	push   edi
c0017688:	56                   	push   esi
c0017689:	52                   	push   edx
c001768a:	e8 2c ee fe ff       	call   c00064bb <iso_seek>
c001768f:	83 c4 10             	add    esp,0x10
c0017692:	31 f0                	xor    eax,esi
c0017694:	31 fa                	xor    edx,edi
c0017696:	09 d0                	or     eax,edx
c0017698:	0f 95 c0             	setne  al
c001769b:	0f b6 c0             	movzx  eax,al
c001769e:	5a                   	pop    edx
c001769f:	5e                   	pop    esi
c00176a0:	5f                   	pop    edi
c00176a1:	c3                   	ret    

c00176a2 <ISO9660::tell(void*, unsigned long long*)>:
c00176a2:	53                   	push   ebx
c00176a3:	83 ec 08             	sub    esp,0x8
c00176a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176ae:	85 c0                	test   eax,eax
c00176b0:	74 1c                	je     c00176ce <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176b2:	85 db                	test   ebx,ebx
c00176b4:	74 18                	je     c00176ce <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176b6:	83 ec 0c             	sub    esp,0xc
c00176b9:	83 e8 64             	sub    eax,0x64
c00176bc:	50                   	push   eax
c00176bd:	e8 7d ee fe ff       	call   c000653f <iso_tell>
c00176c2:	83 c4 10             	add    esp,0x10
c00176c5:	89 03                	mov    DWORD PTR [ebx],eax
c00176c7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00176ca:	31 c0                	xor    eax,eax
c00176cc:	eb 05                	jmp    c00176d3 <ISO9660::tell(void*, unsigned long long*)+0x31>
c00176ce:	b8 04 00 00 00       	mov    eax,0x4
c00176d3:	83 c4 08             	add    esp,0x8
c00176d6:	5b                   	pop    ebx
c00176d7:	c3                   	ret    

c00176d8 <ISO9660::stat(void*, unsigned long long*)>:
c00176d8:	53                   	push   ebx
c00176d9:	83 ec 08             	sub    esp,0x8
c00176dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176e4:	85 c0                	test   eax,eax
c00176e6:	74 20                	je     c0017708 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00176e8:	85 db                	test   ebx,ebx
c00176ea:	74 1c                	je     c0017708 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00176ec:	83 ec 0c             	sub    esp,0xc
c00176ef:	83 e8 64             	sub    eax,0x64
c00176f2:	50                   	push   eax
c00176f3:	e8 78 ee fe ff       	call   c0006570 <iso_total>
c00176f8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00176ff:	89 03                	mov    DWORD PTR [ebx],eax
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	31 c0                	xor    eax,eax
c0017706:	eb 05                	jmp    c001770d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017708:	b8 04 00 00 00       	mov    eax,0x4
c001770d:	83 c4 08             	add    esp,0x8
c0017710:	5b                   	pop    ebx
c0017711:	c3                   	ret    

c0017712 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017712:	55                   	push   ebp
c0017713:	57                   	push   edi
c0017714:	56                   	push   esi
c0017715:	53                   	push   ebx
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001771d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017721:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017725:	85 ff                	test   edi,edi
c0017727:	0f 94 c2             	sete   dl
c001772a:	85 f6                	test   esi,esi
c001772c:	0f 94 c0             	sete   al
c001772f:	08 c2                	or     dl,al
c0017731:	0f 85 9e 00 00 00    	jne    c00177d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017737:	85 db                	test   ebx,ebx
c0017739:	0f 84 96 00 00 00    	je     c00177d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001773f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017742:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017748:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001774f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017752:	3a 05 00 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023900
c0017758:	74 34                	je     c001778e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	50                   	push   eax
c001775e:	e8 5c f0 fe ff       	call   c00067bf <init_percd>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	ba 0b 00 00 00       	mov    edx,0xb
c001776b:	40                   	inc    eax
c001776c:	74 6c                	je     c00177da <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c001776e:	80 3d 00 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023900,0x0
c0017775:	74 10                	je     c0017787 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017777:	83 ec 0c             	sub    esp,0xc
c001777a:	68 a8 ea 01 c0       	push   0xc001eaa8
c001777f:	e8 b7 89 ff ff       	call   c001013b <KePanic(char const*)>
c0017784:	83 c4 10             	add    esp,0x10
c0017787:	8a 03                	mov    al,BYTE PTR [ebx]
c0017789:	a2 00 39 02 c0       	mov    ds:0xc0023900,al
c001778e:	83 c3 03             	add    ebx,0x3
c0017791:	52                   	push   edx
c0017792:	52                   	push   edx
c0017793:	6a 00                	push   0x0
c0017795:	53                   	push   ebx
c0017796:	e8 62 eb fe ff       	call   c00062fd <iso_open>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	89 c5                	mov    ebp,eax
c00177a0:	83 f8 ff             	cmp    eax,0xffffffff
c00177a3:	75 0f                	jne    c00177b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c00177a5:	50                   	push   eax
c00177a6:	50                   	push   eax
c00177a7:	6a 01                	push   0x1
c00177a9:	53                   	push   ebx
c00177aa:	e8 4e eb fe ff       	call   c00062fd <iso_open>
c00177af:	c6 07 01             	mov    BYTE PTR [edi],0x1
c00177b2:	eb 1a                	jmp    c00177ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c00177b4:	83 ec 0c             	sub    esp,0xc
c00177b7:	50                   	push   eax
c00177b8:	e8 b3 ed fe ff       	call   c0006570 <iso_total>
c00177bd:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00177c4:	89 06                	mov    DWORD PTR [esi],eax
c00177c6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177c9:	e8 b9 eb fe ff       	call   c0006387 <iso_close>
c00177ce:	83 c4 10             	add    esp,0x10
c00177d1:	31 d2                	xor    edx,edx
c00177d3:	eb 05                	jmp    c00177da <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00177d5:	ba 04 00 00 00       	mov    edx,0x4
c00177da:	83 c4 0c             	add    esp,0xc
c00177dd:	89 d0                	mov    eax,edx
c00177df:	5b                   	pop    ebx
c00177e0:	5e                   	pop    esi
c00177e1:	5f                   	pop    edi
c00177e2:	5d                   	pop    ebp
c00177e3:	c3                   	ret    

c00177e4 <ISO9660::close(void*)>:
c00177e4:	83 ec 0c             	sub    esp,0xc
c00177e7:	b8 04 00 00 00       	mov    eax,0x4
c00177ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177f0:	85 d2                	test   edx,edx
c00177f2:	74 11                	je     c0017805 <ISO9660::close(void*)+0x21>
c00177f4:	83 ec 0c             	sub    esp,0xc
c00177f7:	83 ea 64             	sub    edx,0x64
c00177fa:	52                   	push   edx
c00177fb:	e8 87 eb fe ff       	call   c0006387 <iso_close>
c0017800:	83 c4 10             	add    esp,0x10
c0017803:	31 c0                	xor    eax,eax
c0017805:	83 c4 0c             	add    esp,0xc
c0017808:	c3                   	ret    
c0017809:	90                   	nop

c001780a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001780a:	55                   	push   ebp
c001780b:	57                   	push   edi
c001780c:	56                   	push   esi
c001780d:	53                   	push   ebx
c001780e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017814:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c001781b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017822:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017829:	85 c0                	test   eax,eax
c001782b:	0f 84 96 00 00 00    	je     c00178c7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017831:	85 db                	test   ebx,ebx
c0017833:	0f 84 8e 00 00 00    	je     c00178c7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017839:	83 ec 0c             	sub    esp,0xc
c001783c:	83 e8 64             	sub    eax,0x64
c001783f:	50                   	push   eax
c0017840:	e8 7c ed fe ff       	call   c00065c1 <iso_readdir>
c0017845:	83 c4 10             	add    esp,0x10
c0017848:	89 c6                	mov    esi,eax
c001784a:	85 c0                	test   eax,eax
c001784c:	75 18                	jne    c0017866 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c001784e:	52                   	push   edx
c001784f:	68 10 01 00 00       	push   0x110
c0017854:	6a 00                	push   0x0
c0017856:	57                   	push   edi
c0017857:	e8 74 8c fe ff       	call   c00004d0 <memset>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	b8 01 00 00 00       	mov    eax,0x1
c0017864:	eb 66                	jmp    c00178cc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017866:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001786c:	8d 68 08             	lea    ebp,[eax+0x8]
c001786f:	83 ec 0c             	sub    esp,0xc
c0017872:	55                   	push   ebp
c0017873:	e8 c8 8c fe ff       	call   c0000540 <strlen>
c0017878:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017880:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001788b:	75 0a                	jne    c0017897 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c001788d:	b8 02 00 00 00       	mov    eax,0x2
c0017892:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017895:	74 05                	je     c001789c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017897:	b8 01 00 00 00       	mov    eax,0x1
c001789c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178a0:	50                   	push   eax
c00178a1:	50                   	push   eax
c00178a2:	55                   	push   ebp
c00178a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178a7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00178ab:	50                   	push   eax
c00178ac:	e8 4f 8d fe ff       	call   c0000600 <strcpy>
c00178b1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00178b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178ba:	31 c0                	xor    eax,eax
c00178bc:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00178c2:	83 c4 10             	add    esp,0x10
c00178c5:	eb 05                	jmp    c00178cc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00178c7:	b8 04 00 00 00       	mov    eax,0x4
c00178cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178d2:	5b                   	pop    ebx
c00178d3:	5e                   	pop    esi
c00178d4:	5f                   	pop    edi
c00178d5:	5d                   	pop    ebp
c00178d6:	c3                   	ret    

c00178d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00178d7:	57                   	push   edi
c00178d8:	56                   	push   esi
c00178d9:	53                   	push   ebx
c00178da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00178e6:	39 35 04 39 02 c0    	cmp    DWORD PTR ds:0xc0023904,esi
c00178ec:	75 08                	jne    c00178f6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00178ee:	38 1d 6c f4 01 c0    	cmp    BYTE PTR ds:0xc001f46c,bl
c00178f4:	74 4a                	je     c0017940 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	31 d2                	xor    edx,edx
c00178fb:	68 20 39 02 c0       	push   0xc0023920
c0017900:	0f be c3             	movsx  eax,bl
c0017903:	6a 01                	push   0x1
c0017905:	52                   	push   edx
c0017906:	56                   	push   esi
c0017907:	ff 34 85 fc 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd704]
c001790e:	e8 ad 52 ff ff       	call   c000cbc0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017913:	83 c4 20             	add    esp,0x20
c0017916:	85 c0                	test   eax,eax
c0017918:	75 0e                	jne    c0017928 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001791a:	89 35 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,esi
c0017920:	88 1d 6c f4 01 c0    	mov    BYTE PTR ds:0xc001f46c,bl
c0017926:	eb 18                	jmp    c0017940 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017928:	50                   	push   eax
c0017929:	68 00 08 00 00       	push   0x800
c001792e:	6a 00                	push   0x0
c0017930:	57                   	push   edi
c0017931:	e8 9a 8b fe ff       	call   c00004d0 <memset>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	b8 01 00 00 00       	mov    eax,0x1
c001793e:	eb 0e                	jmp    c001794e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017940:	be 20 39 02 c0       	mov    esi,0xc0023920
c0017945:	b9 00 08 00 00       	mov    ecx,0x800
c001794a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001794c:	31 c0                	xor    eax,eax
c001794e:	5b                   	pop    ebx
c001794f:	5e                   	pop    esi
c0017950:	5f                   	pop    edi
c0017951:	c3                   	ret    

c0017952 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017952:	53                   	push   ebx
c0017953:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017959:	c7 05 04 39 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023904,0xdeadbeef
c0017963:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001796a:	8d 58 41             	lea    ebx,[eax+0x41]
c001796d:	0f be db             	movsx  ebx,bl
c0017970:	53                   	push   ebx
c0017971:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017975:	50                   	push   eax
c0017976:	6a 10                	push   0x10
c0017978:	e8 5a ff ff ff       	call   c00178d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	31 d2                	xor    edx,edx
c0017982:	85 c0                	test   eax,eax
c0017984:	75 33                	jne    c00179b9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017986:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001798b:	75 2c                	jne    c00179b9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001798d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017992:	75 25                	jne    c00179b9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017994:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017999:	75 1e                	jne    c00179b9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001799b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00179a0:	75 17                	jne    c00179b9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179a2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00179a7:	75 10                	jne    c00179b9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179a9:	83 ec 0c             	sub    esp,0xc
c00179ac:	53                   	push   ebx
c00179ad:	e8 0d ee fe ff       	call   c00067bf <init_percd>
c00179b2:	83 c4 10             	add    esp,0x10
c00179b5:	40                   	inc    eax
c00179b6:	0f 95 c2             	setne  dl
c00179b9:	88 d0                	mov    al,dl
c00179bb:	81 c4 08 08 00 00    	add    esp,0x808
c00179c1:	5b                   	pop    ebx
c00179c2:	c3                   	ret    
c00179c3:	90                   	nop

c00179c4 <ISO9660::ISO9660()>:
c00179c4:	83 ec 0c             	sub    esp,0xc
c00179c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cb:	83 ec 0c             	sub    esp,0xc
c00179ce:	50                   	push   eax
c00179cf:	e8 26 2e ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	ba c0 ea 01 c0       	mov    edx,0xc001eac0
c00179dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e0:	89 10                	mov    DWORD PTR [eax],edx
c00179e2:	e8 da ee fe ff       	call   c00068c1 <fs_iso9660_init>
c00179e7:	90                   	nop
c00179e8:	83 c4 0c             	add    esp,0xc
c00179eb:	c3                   	ret    

c00179ec <SoundCard::beginPlayback()>:
c00179ec:	c7 44 24 04 20 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb20
c00179f4:	e9 42 87 ff ff       	jmp    c001013b <KePanic(char const*)>
c00179f9:	90                   	nop

c00179fa <SoundCard::stopPlayback()>:
c00179fa:	c7 44 24 04 20 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb20
c0017a02:	e9 34 87 ff ff       	jmp    c001013b <KePanic(char const*)>
c0017a07:	90                   	nop

c0017a08 <SoundCard::SoundCard(char const*)>:
c0017a08:	83 ec 1c             	sub    esp,0x1c
c0017a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0f:	83 ec 08             	sub    esp,0x8
c0017a12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a16:	50                   	push   eax
c0017a17:	e8 94 40 ff ff       	call   c000bab0 <Device::Device(char const*)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	ba 6c eb 01 c0       	mov    edx,0xc001eb6c
c0017a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a28:	89 10                	mov    DWORD PTR [eax],edx
c0017a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a39:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a47:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a55:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a63:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017a6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a75:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017a7a:	7f 19                	jg     c0017a95 <SoundCard::SoundCard(char const*)+0x8d>
c0017a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a84:	83 c2 54             	add    edx,0x54
c0017a87:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017a8f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a93:	eb e0                	jmp    c0017a75 <SoundCard::SoundCard(char const*)+0x6d>
c0017a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a99:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017aa0:	90                   	nop
c0017aa1:	83 c4 1c             	add    esp,0x1c
c0017aa4:	c3                   	ret    
c0017aa5:	90                   	nop

c0017aa6 <SoundCard::~SoundCard()>:
c0017aa6:	83 ec 0c             	sub    esp,0xc
c0017aa9:	ba 6c eb 01 c0       	mov    edx,0xc001eb6c
c0017aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab2:	89 10                	mov    DWORD PTR [eax],edx
c0017ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab8:	83 ec 0c             	sub    esp,0xc
c0017abb:	50                   	push   eax
c0017abc:	e8 59 3d ff ff       	call   c000b81a <Device::~Device()>
c0017ac1:	83 c4 10             	add    esp,0x10
c0017ac4:	90                   	nop
c0017ac5:	83 c4 0c             	add    esp,0xc
c0017ac8:	c3                   	ret    
c0017ac9:	90                   	nop

c0017aca <SoundCard::~SoundCard()>:
c0017aca:	83 ec 0c             	sub    esp,0xc
c0017acd:	83 ec 0c             	sub    esp,0xc
c0017ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ad4:	e8 cd ff ff ff       	call   c0017aa6 <SoundCard::~SoundCard()>
c0017ad9:	83 c4 10             	add    esp,0x10
c0017adc:	83 ec 08             	sub    esp,0x8
c0017adf:	68 e8 01 00 00       	push   0x1e8
c0017ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ae8:	e8 f5 28 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0017aed:	83 c4 10             	add    esp,0x10
c0017af0:	83 c4 0c             	add    esp,0xc
c0017af3:	c3                   	ret    

c0017af4 <SoundCard::configureRates(int, int, int)>:
c0017af4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017af8:	31 c0                	xor    eax,eax
c0017afa:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017b01:	75 20                	jne    c0017b23 <SoundCard::configureRates(int, int, int)+0x2f>
c0017b03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b07:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b11:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b1b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017b21:	b0 01                	mov    al,0x1
c0017b23:	c3                   	ret    

c0017b24 <SoundCard::getSamples16(int, short*)>:
c0017b24:	55                   	push   ebp
c0017b25:	57                   	push   edi
c0017b26:	31 ff                	xor    edi,edi
c0017b28:	56                   	push   esi
c0017b29:	53                   	push   ebx
c0017b2a:	31 db                	xor    ebx,ebx
c0017b2c:	83 ec 10             	sub    esp,0x10
c0017b2f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b33:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b37:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b3a:	50                   	push   eax
c0017b3b:	6a 00                	push   0x0
c0017b3d:	55                   	push   ebp
c0017b3e:	e8 8d 89 fe ff       	call   c00004d0 <memset>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b4a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017b51:	85 c0                	test   eax,eax
c0017b53:	74 1b                	je     c0017b70 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b55:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b59:	75 15                	jne    c0017b70 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b5f:	55                   	push   ebp
c0017b60:	56                   	push   esi
c0017b61:	50                   	push   eax
c0017b62:	e8 ed 02 00 00       	call   c0017e54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	39 c7                	cmp    edi,eax
c0017b6c:	7d 02                	jge    c0017b70 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b6e:	89 c7                	mov    edi,eax
c0017b70:	43                   	inc    ebx
c0017b71:	83 fb 20             	cmp    ebx,0x20
c0017b74:	75 d0                	jne    c0017b46 <SoundCard::getSamples16(int, short*)+0x22>
c0017b76:	83 c4 0c             	add    esp,0xc
c0017b79:	89 f8                	mov    eax,edi
c0017b7b:	5b                   	pop    ebx
c0017b7c:	5e                   	pop    esi
c0017b7d:	5f                   	pop    edi
c0017b7e:	5d                   	pop    ebp
c0017b7f:	c3                   	ret    

c0017b80 <SoundCard::getSamples32(int, int*)>:
c0017b80:	55                   	push   ebp
c0017b81:	57                   	push   edi
c0017b82:	31 ff                	xor    edi,edi
c0017b84:	56                   	push   esi
c0017b85:	31 f6                	xor    esi,esi
c0017b87:	53                   	push   ebx
c0017b88:	83 ec 10             	sub    esp,0x10
c0017b8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b8f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b93:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b97:	c1 e0 02             	shl    eax,0x2
c0017b9a:	50                   	push   eax
c0017b9b:	6a 00                	push   0x0
c0017b9d:	55                   	push   ebp
c0017b9e:	e8 2d 89 fe ff       	call   c00004d0 <memset>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017bad:	85 c0                	test   eax,eax
c0017baf:	74 1b                	je     c0017bcc <SoundCard::getSamples32(int, int*)+0x4c>
c0017bb1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017bb5:	75 15                	jne    c0017bcc <SoundCard::getSamples32(int, int*)+0x4c>
c0017bb7:	53                   	push   ebx
c0017bb8:	55                   	push   ebp
c0017bb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bbd:	50                   	push   eax
c0017bbe:	e8 55 03 00 00       	call   c0017f18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	39 c6                	cmp    esi,eax
c0017bc8:	7d 02                	jge    c0017bcc <SoundCard::getSamples32(int, int*)+0x4c>
c0017bca:	89 c6                	mov    esi,eax
c0017bcc:	47                   	inc    edi
c0017bcd:	83 ff 20             	cmp    edi,0x20
c0017bd0:	75 d4                	jne    c0017ba6 <SoundCard::getSamples32(int, int*)+0x26>
c0017bd2:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017bd8:	85 f6                	test   esi,esi
c0017bda:	75 0f                	jne    c0017beb <SoundCard::getSamples32(int, int*)+0x6b>
c0017bdc:	84 c0                	test   al,al
c0017bde:	74 1b                	je     c0017bfb <SoundCard::getSamples32(int, int*)+0x7b>
c0017be0:	83 ec 0c             	sub    esp,0xc
c0017be3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017be5:	53                   	push   ebx
c0017be6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017be9:	eb 0d                	jmp    c0017bf8 <SoundCard::getSamples32(int, int*)+0x78>
c0017beb:	84 c0                	test   al,al
c0017bed:	75 0c                	jne    c0017bfb <SoundCard::getSamples32(int, int*)+0x7b>
c0017bef:	83 ec 0c             	sub    esp,0xc
c0017bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bf4:	53                   	push   ebx
c0017bf5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017bf8:	83 c4 10             	add    esp,0x10
c0017bfb:	83 c4 0c             	add    esp,0xc
c0017bfe:	89 f0                	mov    eax,esi
c0017c00:	5b                   	pop    ebx
c0017c01:	5e                   	pop    esi
c0017c02:	5f                   	pop    edi
c0017c03:	5d                   	pop    ebp
c0017c04:	c3                   	ret    
c0017c05:	90                   	nop

c0017c06 <SoundCard::addChannel(SoundPort*)>:
c0017c06:	83 ec 0c             	sub    esp,0xc
c0017c09:	31 c0                	xor    eax,eax
c0017c0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c0f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017c17:	74 1b                	je     c0017c34 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017c19:	40                   	inc    eax
c0017c1a:	83 f8 20             	cmp    eax,0x20
c0017c1d:	75 f0                	jne    c0017c0f <SoundCard::addChannel(SoundPort*)+0x9>
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	68 45 eb 01 c0       	push   0xc001eb45
c0017c27:	e8 0f 85 ff ff       	call   c001013b <KePanic(char const*)>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	83 c8 ff             	or     eax,0xffffffff
c0017c32:	eb 0b                	jmp    c0017c3f <SoundCard::addChannel(SoundPort*)+0x39>
c0017c34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c38:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017c3f:	83 c4 0c             	add    esp,0xc
c0017c42:	c3                   	ret    
c0017c43:	90                   	nop

c0017c44 <SoundCard::removeChannel(int)>:
c0017c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c4c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017c57:	c3                   	ret    

c0017c58 <SoundPort::SoundPort(int, int, int, int)>:
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c5f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c6a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c76:	89 10                	mov    DWORD PTR [eax],edx
c0017c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017c8e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017c93:	75 13                	jne    c0017ca8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c9b:	05 a0 0f 00 00       	add    eax,0xfa0
c0017ca0:	01 c0                	add    eax,eax
c0017ca2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ca6:	66 90                	xchg   ax,ax
c0017ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017cc5:	c1 e0 02             	shl    eax,0x2
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	50                   	push   eax
c0017ccc:	e8 e8 fa fe ff       	call   c00077b9 <malloc>
c0017cd1:	83 c4 10             	add    esp,0x10
c0017cd4:	89 c2                	mov    edx,eax
c0017cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017cdd:	90                   	nop
c0017cde:	83 c4 0c             	add    esp,0xc
c0017ce1:	c3                   	ret    
c0017ce2:	66 90                	xchg   ax,ax

c0017ce4 <SoundPort::~SoundPort()>:
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ceb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cee:	85 c0                	test   eax,eax
c0017cf0:	74 1e                	je     c0017d10 <SoundPort::~SoundPort()+0x2c>
c0017cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cf9:	83 ec 0c             	sub    esp,0xc
c0017cfc:	50                   	push   eax
c0017cfd:	e8 c7 fa fe ff       	call   c00077c9 <free>
c0017d02:	83 c4 10             	add    esp,0x10
c0017d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d09:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d10:	90                   	nop
c0017d11:	83 c4 0c             	add    esp,0xc
c0017d14:	c3                   	ret    
c0017d15:	90                   	nop
c0017d16:	66 90                	xchg   ax,ax

c0017d18 <SoundPort::unpause()>:
c0017d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d1c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017d20:	c3                   	ret    
c0017d21:	90                   	nop
c0017d22:	66 90                	xchg   ax,ax

c0017d24 <SoundPort::pause()>:
c0017d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d28:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017d2c:	c3                   	ret    
c0017d2d:	90                   	nop
c0017d2e:	66 90                	xchg   ax,ax

c0017d30 <SoundPort::getBufferUsed()>:
c0017d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d37:	c3                   	ret    

c0017d38 <SoundPort::getBufferSize()>:
c0017d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d3f:	c3                   	ret    

c0017d40 <SoundPort::buffer16(short*, int)>:
c0017d40:	55                   	push   ebp
c0017d41:	57                   	push   edi
c0017d42:	56                   	push   esi
c0017d43:	53                   	push   ebx
c0017d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017d4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017d4f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017d52:	74 68                	je     c0017dbc <SoundPort::buffer16(short*, int)+0x7c>
c0017d54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d58:	85 c9                	test   ecx,ecx
c0017d5a:	7e 60                	jle    c0017dbc <SoundPort::buffer16(short*, int)+0x7c>
c0017d5c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017d60:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d63:	c1 e1 0f             	shl    ecx,0xf
c0017d66:	8d 70 01             	lea    esi,[eax+0x1]
c0017d69:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d6c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017d6f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d72:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d75:	74 4d                	je     c0017dc4 <SoundPort::buffer16(short*, int)+0x84>
c0017d77:	31 f6                	xor    esi,esi
c0017d79:	eb 21                	jmp    c0017d9c <SoundPort::buffer16(short*, int)+0x5c>
c0017d7b:	90                   	nop
c0017d7c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017d81:	8d 79 01             	lea    edi,[ecx+0x1]
c0017d84:	c1 e3 0f             	shl    ebx,0xf
c0017d87:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017d8a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017d8d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017d90:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d93:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d96:	74 1c                	je     c0017db4 <SoundPort::buffer16(short*, int)+0x74>
c0017d98:	89 c6                	mov    esi,eax
c0017d9a:	66 90                	xchg   ax,ax
c0017d9c:	8d 46 01             	lea    eax,[esi+0x1]
c0017d9f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017da3:	75 d7                	jne    c0017d7c <SoundPort::buffer16(short*, int)+0x3c>
c0017da5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017da9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dac:	5b                   	pop    ebx
c0017dad:	5e                   	pop    esi
c0017dae:	5f                   	pop    edi
c0017daf:	5d                   	pop    ebp
c0017db0:	c3                   	ret    
c0017db1:	8d 76 00             	lea    esi,[esi+0x0]
c0017db4:	5b                   	pop    ebx
c0017db5:	8d 46 02             	lea    eax,[esi+0x2]
c0017db8:	5e                   	pop    esi
c0017db9:	5f                   	pop    edi
c0017dba:	5d                   	pop    ebp
c0017dbb:	c3                   	ret    
c0017dbc:	5b                   	pop    ebx
c0017dbd:	31 c0                	xor    eax,eax
c0017dbf:	5e                   	pop    esi
c0017dc0:	5f                   	pop    edi
c0017dc1:	5d                   	pop    ebp
c0017dc2:	c3                   	ret    
c0017dc3:	90                   	nop
c0017dc4:	b8 01 00 00 00       	mov    eax,0x1
c0017dc9:	eb e1                	jmp    c0017dac <SoundPort::buffer16(short*, int)+0x6c>
c0017dcb:	90                   	nop

c0017dcc <SoundPort::buffer32(int*, int)>:
c0017dcc:	55                   	push   ebp
c0017dcd:	57                   	push   edi
c0017dce:	56                   	push   esi
c0017dcf:	53                   	push   ebx
c0017dd0:	51                   	push   ecx
c0017dd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017ddc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0017de3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017de6:	74 5c                	je     c0017e44 <SoundPort::buffer32(int*, int)+0x78>
c0017de8:	85 c0                	test   eax,eax
c0017dea:	7e 58                	jle    c0017e44 <SoundPort::buffer32(int*, int)+0x78>
c0017dec:	8d 71 01             	lea    esi,[ecx+0x1]
c0017def:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017df2:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017df5:	8b 37                	mov    esi,DWORD PTR [edi]
c0017df7:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017dfa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dfd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e00:	74 4a                	je     c0017e4c <SoundPort::buffer32(int*, int)+0x80>
c0017e02:	31 f6                	xor    esi,esi
c0017e04:	eb 1e                	jmp    c0017e24 <SoundPort::buffer32(int*, int)+0x58>
c0017e06:	66 90                	xchg   ax,ax
c0017e08:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017e0b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017e0e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017e11:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e14:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017e18:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e1b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e1e:	74 18                	je     c0017e38 <SoundPort::buffer32(int*, int)+0x6c>
c0017e20:	89 de                	mov    esi,ebx
c0017e22:	66 90                	xchg   ax,ax
c0017e24:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017e27:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017e2a:	75 dc                	jne    c0017e08 <SoundPort::buffer32(int*, int)+0x3c>
c0017e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017e2f:	90                   	nop
c0017e30:	5a                   	pop    edx
c0017e31:	5b                   	pop    ebx
c0017e32:	5e                   	pop    esi
c0017e33:	5f                   	pop    edi
c0017e34:	5d                   	pop    ebp
c0017e35:	c3                   	ret    
c0017e36:	66 90                	xchg   ax,ax
c0017e38:	5a                   	pop    edx
c0017e39:	8d 46 02             	lea    eax,[esi+0x2]
c0017e3c:	5b                   	pop    ebx
c0017e3d:	5e                   	pop    esi
c0017e3e:	5f                   	pop    edi
c0017e3f:	5d                   	pop    ebp
c0017e40:	c3                   	ret    
c0017e41:	8d 76 00             	lea    esi,[esi+0x0]
c0017e44:	5a                   	pop    edx
c0017e45:	31 c0                	xor    eax,eax
c0017e47:	5b                   	pop    ebx
c0017e48:	5e                   	pop    esi
c0017e49:	5f                   	pop    edi
c0017e4a:	5d                   	pop    ebp
c0017e4b:	c3                   	ret    
c0017e4c:	b8 01 00 00 00       	mov    eax,0x1
c0017e51:	eb dd                	jmp    c0017e30 <SoundPort::buffer32(int*, int)+0x64>
c0017e53:	90                   	nop

c0017e54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017e54:	57                   	push   edi
c0017e55:	56                   	push   esi
c0017e56:	53                   	push   ebx
c0017e57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017e5f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017e65:	39 03                	cmp    DWORD PTR [ebx],eax
c0017e67:	74 13                	je     c0017e7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017e69:	83 ec 0c             	sub    esp,0xc
c0017e6c:	68 98 eb 01 c0       	push   0xc001eb98
c0017e71:	e8 c5 82 ff ff       	call   c001013b <KePanic(char const*)>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	8d 76 00             	lea    esi,[esi+0x0]
c0017e7c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017e82:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017e85:	74 11                	je     c0017e98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017e87:	83 ec 0c             	sub    esp,0xc
c0017e8a:	68 d7 eb 01 c0       	push   0xc001ebd7
c0017e8f:	e8 a7 82 ff ff       	call   c001013b <KePanic(char const*)>
c0017e94:	83 c4 10             	add    esp,0x10
c0017e97:	90                   	nop
c0017e98:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017e9e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017ea1:	74 11                	je     c0017eb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017ea3:	83 ec 0c             	sub    esp,0xc
c0017ea6:	68 d7 eb 01 c0       	push   0xc001ebd7
c0017eab:	e8 8b 82 ff ff       	call   c001013b <KePanic(char const*)>
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	90                   	nop
c0017eb4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017eb7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017ebb:	7e 07                	jle    c0017ec4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017ebd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	85 f6                	test   esi,esi
c0017ec6:	7e 2c                	jle    c0017ef4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017ec8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ecc:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017ecf:	31 c9                	xor    ecx,ecx
c0017ed1:	01 d7                	add    edi,edx
c0017ed3:	90                   	nop
c0017ed4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017ed7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017eda:	85 c0                	test   eax,eax
c0017edc:	79 06                	jns    c0017ee4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017ede:	05 ff 7f 00 00       	add    eax,0x7fff
c0017ee3:	90                   	nop
c0017ee4:	c1 f8 0f             	sar    eax,0xf
c0017ee7:	83 c1 04             	add    ecx,0x4
c0017eea:	66 01 02             	add    WORD PTR [edx],ax
c0017eed:	83 c2 02             	add    edx,0x2
c0017ef0:	39 d7                	cmp    edi,edx
c0017ef2:	75 e0                	jne    c0017ed4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017ef4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017ef7:	50                   	push   eax
c0017ef8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017efb:	29 f0                	sub    eax,esi
c0017efd:	c1 e0 02             	shl    eax,0x2
c0017f00:	50                   	push   eax
c0017f01:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017f04:	50                   	push   eax
c0017f05:	52                   	push   edx
c0017f06:	e8 d5 84 fe ff       	call   c00003e0 <memmove>
c0017f0b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	89 f0                	mov    eax,esi
c0017f13:	5b                   	pop    ebx
c0017f14:	5e                   	pop    esi
c0017f15:	5f                   	pop    edi
c0017f16:	c3                   	ret    
c0017f17:	90                   	nop

c0017f18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017f18:	57                   	push   edi
c0017f19:	56                   	push   esi
c0017f1a:	53                   	push   ebx
c0017f1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f27:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017f2d:	39 06                	cmp    DWORD PTR [esi],eax
c0017f2f:	74 13                	je     c0017f44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017f31:	83 ec 0c             	sub    esp,0xc
c0017f34:	68 b8 eb 01 c0       	push   0xc001ebb8
c0017f39:	e8 fd 81 ff ff       	call   c001013b <KePanic(char const*)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	8d 76 00             	lea    esi,[esi+0x0]
c0017f44:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017f4a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017f4d:	74 11                	je     c0017f60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017f4f:	83 ec 0c             	sub    esp,0xc
c0017f52:	68 f3 eb 01 c0       	push   0xc001ebf3
c0017f57:	e8 df 81 ff ff       	call   c001013b <KePanic(char const*)>
c0017f5c:	83 c4 10             	add    esp,0x10
c0017f5f:	90                   	nop
c0017f60:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017f66:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017f69:	74 11                	je     c0017f7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017f6b:	83 ec 0c             	sub    esp,0xc
c0017f6e:	68 f3 eb 01 c0       	push   0xc001ebf3
c0017f73:	e8 c3 81 ff ff       	call   c001013b <KePanic(char const*)>
c0017f78:	83 c4 10             	add    esp,0x10
c0017f7b:	90                   	nop
c0017f7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017f7f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017f83:	7e 07                	jle    c0017f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017f85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f89:	8d 76 00             	lea    esi,[esi+0x0]
c0017f8c:	85 ff                	test   edi,edi
c0017f8e:	7e 1c                	jle    c0017fac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017f90:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017f97:	31 c0                	xor    eax,eax
c0017f99:	8d 76 00             	lea    esi,[esi+0x0]
c0017f9c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f9f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017fa2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017fa5:	83 c0 04             	add    eax,0x4
c0017fa8:	39 c1                	cmp    ecx,eax
c0017faa:	75 f0                	jne    c0017f9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017fac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017faf:	50                   	push   eax
c0017fb0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017fb3:	29 f8                	sub    eax,edi
c0017fb5:	c1 e0 02             	shl    eax,0x2
c0017fb8:	50                   	push   eax
c0017fb9:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017fbc:	50                   	push   eax
c0017fbd:	52                   	push   edx
c0017fbe:	e8 1d 84 fe ff       	call   c00003e0 <memmove>
c0017fc3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017fc6:	83 c4 10             	add    esp,0x10
c0017fc9:	89 f8                	mov    eax,edi
c0017fcb:	5b                   	pop    ebx
c0017fcc:	5e                   	pop    esi
c0017fcd:	5f                   	pop    edi
c0017fce:	c3                   	ret    
c0017fcf:	90                   	nop

c0017fd0 <PCI::open(int, int, void*)>:
c0017fd0:	83 ec 18             	sub    esp,0x18
c0017fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017fe1:	8b 10                	mov    edx,DWORD PTR [eax]
c0017fe3:	50                   	push   eax
c0017fe4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017fe7:	31 c0                	xor    eax,eax
c0017fe9:	83 c4 1c             	add    esp,0x1c
c0017fec:	c3                   	ret    
c0017fed:	90                   	nop

c0017fee <PCI::close(int, int, void*)>:
c0017fee:	31 c0                	xor    eax,eax
c0017ff0:	c3                   	ret    
c0017ff1:	90                   	nop

c0017ff2 <PCI::PCI()>:
c0017ff2:	83 ec 0c             	sub    esp,0xc
c0017ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff9:	83 ec 08             	sub    esp,0x8
c0017ffc:	68 0f ec 01 c0       	push   0xc001ec0f
c0018001:	50                   	push   eax
c0018002:	e8 65 32 ff ff       	call   c000b26c <Bus::Bus(char const*)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	ba b8 ec 01 c0       	mov    edx,0xc001ecb8
c001800f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018013:	89 10                	mov    DWORD PTR [eax],edx
c0018015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018019:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018027:	a3 20 41 02 c0       	mov    ds:0xc0024120,eax
c001802c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018030:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018036:	31 d2                	xor    edx,edx
c0018038:	88 c2                	mov    dl,al
c001803a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001803e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018049:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001804f:	31 d2                	xor    edx,edx
c0018051:	88 c2                	mov    dl,al
c0018053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018057:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001805c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018060:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018066:	8d 50 01             	lea    edx,[eax+0x1]
c0018069:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001806d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018073:	31 d2                	xor    edx,edx
c0018075:	88 c2                	mov    dl,al
c0018077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001807b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001807f:	83 c9 c0             	or     ecx,0xffffffc0
c0018082:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018086:	90                   	nop
c0018087:	83 c4 0c             	add    esp,0xc
c001808a:	c3                   	ret    
c001808b:	90                   	nop

c001808c <PCI::readBAR8(unsigned int, int)>:
c001808c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018094:	f6 c2 01             	test   dl,0x1
c0018097:	74 07                	je     c00180a0 <PCI::readBAR8(unsigned int, int)+0x14>
c0018099:	83 e2 fc             	and    edx,0xfffffffc
c001809c:	01 c2                	add    edx,eax
c001809e:	ec                   	in     al,dx
c001809f:	c3                   	ret    
c00180a0:	83 e2 f0             	and    edx,0xfffffff0
c00180a3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00180a6:	c3                   	ret    
c00180a7:	90                   	nop

c00180a8 <PCI::readBAR16(unsigned int, int)>:
c00180a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b0:	f6 c2 01             	test   dl,0x1
c00180b3:	74 08                	je     c00180bd <PCI::readBAR16(unsigned int, int)+0x15>
c00180b5:	83 e2 fc             	and    edx,0xfffffffc
c00180b8:	01 c2                	add    edx,eax
c00180ba:	66 ed                	in     ax,dx
c00180bc:	c3                   	ret    
c00180bd:	83 e2 f0             	and    edx,0xfffffff0
c00180c0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00180c4:	c3                   	ret    
c00180c5:	90                   	nop

c00180c6 <PCI::readBAR32(unsigned int, int)>:
c00180c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ce:	f6 c2 01             	test   dl,0x1
c00180d1:	74 07                	je     c00180da <PCI::readBAR32(unsigned int, int)+0x14>
c00180d3:	83 e2 fc             	and    edx,0xfffffffc
c00180d6:	01 c2                	add    edx,eax
c00180d8:	ed                   	in     eax,dx
c00180d9:	c3                   	ret    
c00180da:	83 e2 f0             	and    edx,0xfffffff0
c00180dd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00180e0:	c3                   	ret    
c00180e1:	90                   	nop

c00180e2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00180e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180ee:	f6 c2 01             	test   dl,0x1
c00180f1:	74 07                	je     c00180fa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00180f3:	83 e2 fc             	and    edx,0xfffffffc
c00180f6:	01 ca                	add    edx,ecx
c00180f8:	ee                   	out    dx,al
c00180f9:	c3                   	ret    
c00180fa:	83 e2 f0             	and    edx,0xfffffff0
c00180fd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018100:	c3                   	ret    
c0018101:	90                   	nop

c0018102 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001810a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001810e:	f6 c2 01             	test   dl,0x1
c0018111:	74 08                	je     c001811b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018113:	83 e2 fc             	and    edx,0xfffffffc
c0018116:	01 ca                	add    edx,ecx
c0018118:	66 ef                	out    dx,ax
c001811a:	c3                   	ret    
c001811b:	83 e2 f0             	and    edx,0xfffffff0
c001811e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018122:	c3                   	ret    
c0018123:	90                   	nop

c0018124 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001812c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018130:	f6 c2 01             	test   dl,0x1
c0018133:	74 07                	je     c001813c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018135:	83 e2 fc             	and    edx,0xfffffffc
c0018138:	01 ca                	add    edx,ecx
c001813a:	ef                   	out    dx,eax
c001813b:	c3                   	ret    
c001813c:	83 e2 f0             	and    edx,0xfffffff0
c001813f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018142:	c3                   	ret    
c0018143:	90                   	nop

c0018144 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018144:	55                   	push   ebp
c0018145:	57                   	push   edi
c0018146:	56                   	push   esi
c0018147:	53                   	push   ebx
c0018148:	83 ec 0c             	sub    esp,0xc
c001814b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001814f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018153:	89 f0                	mov    eax,esi
c0018155:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018159:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001815d:	3c 07                	cmp    al,0x7
c001815f:	76 10                	jbe    c0018171 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018161:	83 ec 0c             	sub    esp,0xc
c0018164:	68 17 ec 01 c0       	push   0xc001ec17
c0018169:	e8 cd 7f ff ff       	call   c001013b <KePanic(char const*)>
c001816e:	83 c4 10             	add    esp,0x10
c0018171:	80 fb 0f             	cmp    bl,0xf
c0018174:	76 10                	jbe    c0018186 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018176:	83 ec 0c             	sub    esp,0xc
c0018179:	68 47 ec 01 c0       	push   0xc001ec47
c001817e:	e8 b8 7f ff ff       	call   c001013b <KePanic(char const*)>
c0018183:	83 c4 10             	add    esp,0x10
c0018186:	8d 04 36             	lea    eax,[esi+esi*1]
c0018189:	ba f8 0c 00 00       	mov    edx,0xcf8
c001818e:	83 c8 f0             	or     eax,0xfffffff0
c0018191:	ee                   	out    dx,al
c0018192:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018197:	89 e8                	mov    eax,ebp
c0018199:	ee                   	out    dx,al
c001819a:	83 c4 0c             	add    esp,0xc
c001819d:	89 d8                	mov    eax,ebx
c001819f:	66 81 e7 fc 00       	and    di,0xfc
c00181a4:	5b                   	pop    ebx
c00181a5:	c1 e0 08             	shl    eax,0x8
c00181a8:	5e                   	pop    esi
c00181a9:	09 f8                	or     eax,edi
c00181ab:	5f                   	pop    edi
c00181ac:	66 0d 00 c0          	or     ax,0xc000
c00181b0:	5d                   	pop    ebp
c00181b1:	c3                   	ret    

c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00181b2:	57                   	push   edi
c00181b3:	56                   	push   esi
c00181b4:	53                   	push   ebx
c00181b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00181b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181bd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00181c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181cf:	83 ff 01             	cmp    edi,0x1
c00181d2:	75 3e                	jne    c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00181d4:	89 de                	mov    esi,ebx
c00181d6:	0f b6 c0             	movzx  eax,al
c00181d9:	81 e6 fc 00 00 00    	and    esi,0xfc
c00181df:	c1 e0 10             	shl    eax,0x10
c00181e2:	0f b6 c9             	movzx  ecx,cl
c00181e5:	09 f0                	or     eax,esi
c00181e7:	c1 e1 08             	shl    ecx,0x8
c00181ea:	0f b6 d2             	movzx  edx,dl
c00181ed:	09 c8                	or     eax,ecx
c00181ef:	c1 e2 0b             	shl    edx,0xb
c00181f2:	09 d0                	or     eax,edx
c00181f4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181f9:	0d 00 00 00 80       	or     eax,0x80000000
c00181fe:	ef                   	out    dx,eax
c00181ff:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018204:	ed                   	in     eax,dx
c0018205:	83 e3 02             	and    ebx,0x2
c0018208:	0f b6 cb             	movzx  ecx,bl
c001820b:	c1 e1 03             	shl    ecx,0x3
c001820e:	d3 e8                	shr    eax,cl
c0018210:	eb 43                	jmp    c0018255 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018212:	83 ff 02             	cmp    edi,0x2
c0018215:	75 2c                	jne    c0018243 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018217:	83 ec 0c             	sub    esp,0xc
c001821a:	0f b6 c9             	movzx  ecx,cl
c001821d:	0f b6 d2             	movzx  edx,dl
c0018220:	0f b6 fb             	movzx  edi,bl
c0018223:	0f b6 c0             	movzx  eax,al
c0018226:	57                   	push   edi
c0018227:	51                   	push   ecx
c0018228:	52                   	push   edx
c0018229:	50                   	push   eax
c001822a:	56                   	push   esi
c001822b:	e8 14 ff ff ff       	call   c0018144 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018230:	89 c2                	mov    edx,eax
c0018232:	ed                   	in     eax,dx
c0018233:	83 e3 02             	and    ebx,0x2
c0018236:	83 c4 20             	add    esp,0x20
c0018239:	0f b6 cb             	movzx  ecx,bl
c001823c:	c1 e1 03             	shl    ecx,0x3
c001823f:	d3 e8                	shr    eax,cl
c0018241:	eb 12                	jmp    c0018255 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018243:	83 ec 0c             	sub    esp,0xc
c0018246:	68 77 ec 01 c0       	push   0xc001ec77
c001824b:	e8 eb 7e ff ff       	call   c001013b <KePanic(char const*)>
c0018250:	83 c4 10             	add    esp,0x10
c0018253:	31 c0                	xor    eax,eax
c0018255:	5b                   	pop    ebx
c0018256:	5e                   	pop    esi
c0018257:	5f                   	pop    edi
c0018258:	c3                   	ret    
c0018259:	90                   	nop

c001825a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001825a:	83 ec 18             	sub    esp,0x18
c001825d:	6a 00                	push   0x0
c001825f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018264:	50                   	push   eax
c0018265:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001826a:	50                   	push   eax
c001826b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018270:	50                   	push   eax
c0018271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018275:	e8 38 ff ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001827a:	83 c4 2c             	add    esp,0x2c
c001827d:	c3                   	ret    

c001827e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001827e:	83 ec 18             	sub    esp,0x18
c0018281:	6a 0e                	push   0xe
c0018283:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018288:	50                   	push   eax
c0018289:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001828e:	50                   	push   eax
c001828f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018294:	50                   	push   eax
c0018295:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018299:	e8 14 ff ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001829e:	83 c4 2c             	add    esp,0x2c
c00182a1:	0f b6 c0             	movzx  eax,al
c00182a4:	c3                   	ret    
c00182a5:	90                   	nop

c00182a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00182a6:	55                   	push   ebp
c00182a7:	57                   	push   edi
c00182a8:	56                   	push   esi
c00182a9:	53                   	push   ebx
c00182aa:	83 ec 18             	sub    esp,0x18
c00182ad:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00182b2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00182b7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00182bc:	6a 0a                	push   0xa
c00182be:	56                   	push   esi
c00182bf:	55                   	push   ebp
c00182c0:	57                   	push   edi
c00182c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182c5:	e8 e8 fe ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182ca:	83 c4 14             	add    esp,0x14
c00182cd:	89 c3                	mov    ebx,eax
c00182cf:	6a 0a                	push   0xa
c00182d1:	0f b6 db             	movzx  ebx,bl
c00182d4:	56                   	push   esi
c00182d5:	55                   	push   ebp
c00182d6:	57                   	push   edi
c00182d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182db:	e8 d2 fe ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182e0:	83 c4 2c             	add    esp,0x2c
c00182e3:	25 00 ff 00 00       	and    eax,0xff00
c00182e8:	09 d8                	or     eax,ebx
c00182ea:	5b                   	pop    ebx
c00182eb:	5e                   	pop    esi
c00182ec:	5f                   	pop    edi
c00182ed:	5d                   	pop    ebp
c00182ee:	c3                   	ret    
c00182ef:	90                   	nop

c00182f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00182f0:	83 ec 18             	sub    esp,0x18
c00182f3:	6a 08                	push   0x8
c00182f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182fa:	50                   	push   eax
c00182fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018300:	50                   	push   eax
c0018301:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018306:	50                   	push   eax
c0018307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001830b:	e8 a2 fe ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018310:	83 c4 2c             	add    esp,0x2c
c0018313:	0f b6 c4             	movzx  eax,ah
c0018316:	c3                   	ret    
c0018317:	90                   	nop

c0018318 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018318:	83 ec 18             	sub    esp,0x18
c001831b:	6a 08                	push   0x8
c001831d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018322:	50                   	push   eax
c0018323:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018328:	50                   	push   eax
c0018329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001832e:	50                   	push   eax
c001832f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018333:	e8 7a fe ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018338:	83 c4 2c             	add    esp,0x2c
c001833b:	c3                   	ret    

c001833c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001833c:	83 ec 18             	sub    esp,0x18
c001833f:	6a 3c                	push   0x3c
c0018341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018346:	50                   	push   eax
c0018347:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001834c:	50                   	push   eax
c001834d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018352:	50                   	push   eax
c0018353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018357:	e8 56 fe ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001835c:	83 c4 2c             	add    esp,0x2c
c001835f:	c3                   	ret    

c0018360 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018360:	83 ec 18             	sub    esp,0x18
c0018363:	6a 18                	push   0x18
c0018365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001836a:	50                   	push   eax
c001836b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018370:	50                   	push   eax
c0018371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018376:	50                   	push   eax
c0018377:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001837b:	e8 32 fe ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018380:	83 c4 2c             	add    esp,0x2c
c0018383:	0f b6 c4             	movzx  eax,ah
c0018386:	c3                   	ret    
c0018387:	90                   	nop

c0018388 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018388:	55                   	push   ebp
c0018389:	57                   	push   edi
c001838a:	56                   	push   esi
c001838b:	53                   	push   ebx
c001838c:	83 ec 28             	sub    esp,0x28
c001838f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018393:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018398:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001839d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00183a2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00183a9:	8d 43 12             	lea    eax,[ebx+0x12]
c00183ac:	83 c3 10             	add    ebx,0x10
c00183af:	0f b6 c0             	movzx  eax,al
c00183b2:	0f b6 db             	movzx  ebx,bl
c00183b5:	50                   	push   eax
c00183b6:	51                   	push   ecx
c00183b7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00183bb:	57                   	push   edi
c00183bc:	55                   	push   ebp
c00183bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00183c1:	e8 ec fd ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183c6:	83 c4 14             	add    esp,0x14
c00183c9:	89 c6                	mov    esi,eax
c00183cb:	53                   	push   ebx
c00183cc:	c1 e6 10             	shl    esi,0x10
c00183cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00183d3:	51                   	push   ecx
c00183d4:	57                   	push   edi
c00183d5:	55                   	push   ebp
c00183d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00183da:	e8 d3 fd ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183df:	83 c4 3c             	add    esp,0x3c
c00183e2:	0f b7 c0             	movzx  eax,ax
c00183e5:	5b                   	pop    ebx
c00183e6:	09 f0                	or     eax,esi
c00183e8:	5e                   	pop    esi
c00183e9:	5f                   	pop    edi
c00183ea:	5d                   	pop    ebp
c00183eb:	c3                   	ret    

c00183ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00183ec:	55                   	push   ebp
c00183ed:	57                   	push   edi
c00183ee:	56                   	push   esi
c00183ef:	53                   	push   ebx
c00183f0:	83 ec 0c             	sub    esp,0xc
c00183f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00183f7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183fb:	89 f5                	mov    ebp,esi
c00183fd:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018403:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018407:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001840b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001840f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018413:	83 f9 01             	cmp    ecx,0x1
c0018416:	75 5d                	jne    c0018475 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018418:	0f b6 c8             	movzx  ecx,al
c001841b:	0f b6 d2             	movzx  edx,dl
c001841e:	c1 e1 10             	shl    ecx,0x10
c0018421:	c1 e2 0b             	shl    edx,0xb
c0018424:	89 f0                	mov    eax,esi
c0018426:	25 fc 00 00 00       	and    eax,0xfc
c001842b:	09 c1                	or     ecx,eax
c001842d:	89 e8                	mov    eax,ebp
c001842f:	0f b6 c0             	movzx  eax,al
c0018432:	c1 e0 08             	shl    eax,0x8
c0018435:	09 c1                	or     ecx,eax
c0018437:	09 d1                	or     ecx,edx
c0018439:	ba f8 0c 00 00       	mov    edx,0xcf8
c001843e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018444:	89 c8                	mov    eax,ecx
c0018446:	ef                   	out    dx,eax
c0018447:	ba fc 0c 00 00       	mov    edx,0xcfc
c001844c:	ed                   	in     eax,dx
c001844d:	0f b7 db             	movzx  ebx,bx
c0018450:	83 e6 02             	and    esi,0x2
c0018453:	74 0a                	je     c001845f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018455:	0f b7 d0             	movzx  edx,ax
c0018458:	c1 e3 10             	shl    ebx,0x10
c001845b:	09 d3                	or     ebx,edx
c001845d:	eb 05                	jmp    c0018464 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001845f:	66 31 c0             	xor    ax,ax
c0018462:	09 c3                	or     ebx,eax
c0018464:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018469:	89 c8                	mov    eax,ecx
c001846b:	ef                   	out    dx,eax
c001846c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018471:	89 d8                	mov    eax,ebx
c0018473:	eb 41                	jmp    c00184b6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018475:	83 f9 02             	cmp    ecx,0x2
c0018478:	75 45                	jne    c00184bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001847a:	83 ec 0c             	sub    esp,0xc
c001847d:	0f b6 d2             	movzx  edx,dl
c0018480:	89 f1                	mov    ecx,esi
c0018482:	0f b6 c0             	movzx  eax,al
c0018485:	0f b6 f1             	movzx  esi,cl
c0018488:	89 e9                	mov    ecx,ebp
c001848a:	56                   	push   esi
c001848b:	0f b6 c9             	movzx  ecx,cl
c001848e:	51                   	push   ecx
c001848f:	52                   	push   edx
c0018490:	50                   	push   eax
c0018491:	57                   	push   edi
c0018492:	e8 ad fc ff ff       	call   c0018144 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018497:	89 c2                	mov    edx,eax
c0018499:	ed                   	in     eax,dx
c001849a:	83 c4 20             	add    esp,0x20
c001849d:	0f b7 db             	movzx  ebx,bx
c00184a0:	f6 c2 02             	test   dl,0x2
c00184a3:	74 0c                	je     c00184b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00184a5:	0f b7 c8             	movzx  ecx,ax
c00184a8:	89 d8                	mov    eax,ebx
c00184aa:	c1 e0 10             	shl    eax,0x10
c00184ad:	09 c8                	or     eax,ecx
c00184af:	eb 05                	jmp    c00184b6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184b1:	66 31 c0             	xor    ax,ax
c00184b4:	09 d8                	or     eax,ebx
c00184b6:	ef                   	out    dx,eax
c00184b7:	83 c4 0c             	add    esp,0xc
c00184ba:	5b                   	pop    ebx
c00184bb:	5e                   	pop    esi
c00184bc:	5f                   	pop    edi
c00184bd:	5d                   	pop    ebp
c00184be:	c3                   	ret    
c00184bf:	c7 44 24 20 77 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ec77
c00184c7:	83 c4 0c             	add    esp,0xc
c00184ca:	5b                   	pop    ebx
c00184cb:	5e                   	pop    esi
c00184cc:	5f                   	pop    edi
c00184cd:	5d                   	pop    ebp
c00184ce:	e9 68 7c ff ff       	jmp    c001013b <KePanic(char const*)>
c00184d3:	90                   	nop

c00184d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00184d4:	55                   	push   ebp
c00184d5:	57                   	push   edi
c00184d6:	56                   	push   esi
c00184d7:	53                   	push   ebx
c00184d8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00184de:	80 3d 2c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002412c,0x0
c00184e5:	0f 85 84 00 00 00    	jne    c001856f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00184eb:	83 ec 0c             	sub    esp,0xc
c00184ee:	68 14 01 00 00       	push   0x114
c00184f3:	e8 c1 f2 fe ff       	call   c00077b9 <malloc>
c00184f8:	83 c4 0c             	add    esp,0xc
c00184fb:	89 c3                	mov    ebx,eax
c00184fd:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0018503:	68 7d ec 01 c0       	push   0xc001ec7d
c0018508:	50                   	push   eax
c0018509:	e8 40 25 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001850e:	5a                   	pop    edx
c001850f:	59                   	pop    ecx
c0018510:	6a 01                	push   0x1
c0018512:	53                   	push   ebx
c0018513:	e8 f6 25 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0018518:	83 c4 0c             	add    esp,0xc
c001851b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001851f:	50                   	push   eax
c0018520:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018524:	50                   	push   eax
c0018525:	53                   	push   ebx
c0018526:	e8 8f 28 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c001852b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852f:	40                   	inc    eax
c0018530:	89 04 24             	mov    DWORD PTR [esp],eax
c0018533:	e8 81 f2 fe ff       	call   c00077b9 <malloc>
c0018538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001853c:	a3 28 41 02 c0       	mov    ds:0xc0024128,eax
c0018541:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018545:	5e                   	pop    esi
c0018546:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018548:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001854c:	51                   	push   ecx
c001854d:	50                   	push   eax
c001854e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018552:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018556:	53                   	push   ebx
c0018557:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001855a:	83 c4 14             	add    esp,0x14
c001855d:	53                   	push   ebx
c001855e:	e8 09 26 ff ff       	call   c000ab6c <File::close()>
c0018563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018567:	83 c4 10             	add    esp,0x10
c001856a:	a3 24 41 02 c0       	mov    ds:0xc0024124,eax
c001856f:	a1 24 41 02 c0       	mov    eax,ds:0xc0024124
c0018574:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c001857a:	89 04 24             	mov    DWORD PTR [esp],eax
c001857d:	31 ff                	xor    edi,edi
c001857f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018587:	31 f6                	xor    esi,esi
c0018589:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001858e:	31 db                	xor    ebx,ebx
c0018590:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018598:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001859d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00185a4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00185a8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00185af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00185b3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00185b6:	0f 8e 6b 01 00 00    	jle    c0018727 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00185bc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00185bf:	d4 40                	aam    0x40
c00185c1:	d5 39                	aad    0x39
c00185c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00185c7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00185cb:	d4 40                	aam    0x40
c00185cd:	d5 39                	aad    0x39
c00185cf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00185d3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00185d7:	d4 40                	aam    0x40
c00185d9:	d5 39                	aad    0x39
c00185db:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00185df:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00185e3:	d4 40                	aam    0x40
c00185e5:	d5 39                	aad    0x39
c00185e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00185eb:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00185ef:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00185f3:	3c 56                	cmp    al,0x56
c00185f5:	74 45                	je     c001863c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00185f7:	d4 40                	aam    0x40
c00185f9:	d5 39                	aad    0x39
c00185fb:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185fe:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018602:	0f b6 c9             	movzx  ecx,cl
c0018605:	c1 e1 04             	shl    ecx,0x4
c0018608:	d4 40                	aam    0x40
c001860a:	d5 39                	aad    0x39
c001860c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001860f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018613:	0f b6 db             	movzx  ebx,bl
c0018616:	09 cb                	or     ebx,ecx
c0018618:	c1 e3 04             	shl    ebx,0x4
c001861b:	d4 40                	aam    0x40
c001861d:	d5 39                	aad    0x39
c001861f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018622:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018626:	0f b6 c9             	movzx  ecx,cl
c0018629:	09 cb                	or     ebx,ecx
c001862b:	c1 e3 04             	shl    ebx,0x4
c001862e:	89 d9                	mov    ecx,ebx
c0018630:	d4 40                	aam    0x40
c0018632:	d5 39                	aad    0x39
c0018634:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018637:	0f b6 db             	movzx  ebx,bl
c001863a:	09 cb                	or     ebx,ecx
c001863c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018640:	80 f9 44             	cmp    cl,0x44
c0018643:	74 47                	je     c001868c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018645:	88 c8                	mov    al,cl
c0018647:	d4 40                	aam    0x40
c0018649:	d5 39                	aad    0x39
c001864b:	83 e8 30             	sub    eax,0x30
c001864e:	0f b6 e8             	movzx  ebp,al
c0018651:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018655:	c1 e5 04             	shl    ebp,0x4
c0018658:	d4 40                	aam    0x40
c001865a:	d5 39                	aad    0x39
c001865c:	83 e8 30             	sub    eax,0x30
c001865f:	0f b6 f0             	movzx  esi,al
c0018662:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018666:	09 ee                	or     esi,ebp
c0018668:	c1 e6 04             	shl    esi,0x4
c001866b:	d4 40                	aam    0x40
c001866d:	d5 39                	aad    0x39
c001866f:	83 e8 30             	sub    eax,0x30
c0018672:	0f b6 e8             	movzx  ebp,al
c0018675:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018679:	09 ee                	or     esi,ebp
c001867b:	c1 e6 04             	shl    esi,0x4
c001867e:	89 f5                	mov    ebp,esi
c0018680:	d4 40                	aam    0x40
c0018682:	d5 39                	aad    0x39
c0018684:	83 e8 30             	sub    eax,0x30
c0018687:	0f b6 f0             	movzx  esi,al
c001868a:	09 ee                	or     esi,ebp
c001868c:	83 c7 10             	add    edi,0x10
c001868f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018693:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018696:	3c 0a                	cmp    al,0xa
c0018698:	74 09                	je     c00186a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001869a:	45                   	inc    ebp
c001869b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001869e:	75 16                	jne    c00186b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00186a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00186a3:	3c 0a                	cmp    al,0xa
c00186a5:	0f 94 c0             	sete   al
c00186a8:	0f b6 c0             	movzx  eax,al
c00186ab:	01 c7                	add    edi,eax
c00186ad:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00186b2:	75 0c                	jne    c00186c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00186b4:	eb 15                	jmp    c00186cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00186b6:	47                   	inc    edi
c00186b7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00186ba:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00186be:	eb d3                	jmp    c0018693 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00186c0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00186c5:	0f 85 e8 fe ff ff    	jne    c00185b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186cb:	80 f9 44             	cmp    cl,0x44
c00186ce:	74 0b                	je     c00186db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00186d0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00186d5:	0f 85 d8 fe ff ff    	jne    c00185b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186db:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00186df:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00186e3:	c1 e1 04             	shl    ecx,0x4
c00186e6:	83 e8 30             	sub    eax,0x30
c00186e9:	09 c8                	or     eax,ecx
c00186eb:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00186ef:	0f 85 be fe ff ff    	jne    c00185b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186f5:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00186f9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00186fd:	c1 e1 04             	shl    ecx,0x4
c0018700:	83 e8 30             	sub    eax,0x30
c0018703:	09 c8                	or     eax,ecx
c0018705:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018709:	0f 85 a4 fe ff ff    	jne    c00185b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001870f:	50                   	push   eax
c0018710:	50                   	push   eax
c0018711:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018715:	50                   	push   eax
c0018716:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001871d:	e8 de 7e fe ff       	call   c0000600 <strcpy>
c0018722:	83 c4 10             	add    esp,0x10
c0018725:	eb 15                	jmp    c001873c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018727:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001872e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018739:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001873c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018743:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018749:	5b                   	pop    ebx
c001874a:	5e                   	pop    esi
c001874b:	5f                   	pop    edi
c001874c:	5d                   	pop    ebp
c001874d:	c3                   	ret    

c001874e <PCI::checkBus(unsigned char)>:
c001874e:	56                   	push   esi
c001874f:	53                   	push   ebx
c0018750:	31 f6                	xor    esi,esi
c0018752:	51                   	push   ecx
c0018753:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018757:	0f b6 c3             	movzx  eax,bl
c001875a:	52                   	push   edx
c001875b:	56                   	push   esi
c001875c:	46                   	inc    esi
c001875d:	50                   	push   eax
c001875e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018762:	e8 f3 02 00 00       	call   c0018a5a <PCI::checkDevice(unsigned char, unsigned char)>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	83 fe 20             	cmp    esi,0x20
c001876d:	75 e8                	jne    c0018757 <PCI::checkBus(unsigned char)+0x9>
c001876f:	58                   	pop    eax
c0018770:	5b                   	pop    ebx
c0018771:	5e                   	pop    esi
c0018772:	c3                   	ret    
c0018773:	90                   	nop

c0018774 <PCI::foundDevice(PCIDeviceInfo)>:
c0018774:	55                   	push   ebp
c0018775:	57                   	push   edi
c0018776:	56                   	push   esi
c0018777:	53                   	push   ebx
c0018778:	83 ec 1c             	sub    esp,0x1c
c001877b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001877f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018785:	0f 84 52 01 00 00    	je     c00188dd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001878b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001878f:	66 81 f9 06 04       	cmp    cx,0x406
c0018794:	75 2c                	jne    c00187c2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018796:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001879b:	50                   	push   eax
c001879c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00187a1:	50                   	push   eax
c00187a2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00187a7:	50                   	push   eax
c00187a8:	56                   	push   esi
c00187a9:	e8 b2 fb ff ff       	call   c0018360 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00187ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00187b2:	0f b6 c0             	movzx  eax,al
c00187b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00187b9:	83 c4 2c             	add    esp,0x2c
c00187bc:	5b                   	pop    ebx
c00187bd:	5e                   	pop    esi
c00187be:	5f                   	pop    edi
c00187bf:	5d                   	pop    ebp
c00187c0:	eb 8c                	jmp    c001874e <PCI::checkBus(unsigned char)>
c00187c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00187c6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00187cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00187d0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00187d4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00187d8:	88 d3                	mov    bl,dl
c00187da:	85 c0                	test   eax,eax
c00187dc:	74 33                	je     c0018811 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00187de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00187e1:	85 d2                	test   edx,edx
c00187e3:	74 28                	je     c001880d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187e5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00187eb:	31 ef                	xor    edi,ebp
c00187ed:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00187f3:	75 18                	jne    c001880d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00187f9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00187ff:	75 0c                	jne    c001880d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018801:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018807:	0f 84 d0 00 00 00    	je     c00188dd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001880d:	8b 00                	mov    eax,DWORD PTR [eax]
c001880f:	eb c9                	jmp    c00187da <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018811:	66 81 f9 01 06       	cmp    cx,0x601
c0018816:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001881a:	75 19                	jne    c0018835 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001881c:	83 ec 0c             	sub    esp,0xc
c001881f:	68 64 01 00 00       	push   0x164
c0018824:	e8 90 ef fe ff       	call   c00077b9 <malloc>
c0018829:	89 c5                	mov    ebp,eax
c001882b:	89 04 24             	mov    DWORD PTR [esp],eax
c001882e:	e8 47 0e 00 00       	call   c001967a <SATABus::SATABus()>
c0018833:	eb 1e                	jmp    c0018853 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018835:	66 81 f9 01 01       	cmp    cx,0x101
c001883a:	75 60                	jne    c001889c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001883c:	83 ec 0c             	sub    esp,0xc
c001883f:	68 70 02 00 00       	push   0x270
c0018844:	e8 70 ef fe ff       	call   c00077b9 <malloc>
c0018849:	89 c5                	mov    ebp,eax
c001884b:	89 04 24             	mov    DWORD PTR [esp],eax
c001884e:	e8 cb 02 00 00       	call   c0018b1e <IDE::IDE()>
c0018853:	58                   	pop    eax
c0018854:	5a                   	pop    edx
c0018855:	55                   	push   ebp
c0018856:	56                   	push   esi
c0018857:	e8 bc 30 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001885c:	83 ec 1c             	sub    esp,0x1c
c001885f:	b9 09 00 00 00       	mov    ecx,0x9
c0018864:	fc                   	cld    
c0018865:	89 e7                	mov    edi,esp
c0018867:	89 de                	mov    esi,ebx
c0018869:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001886b:	55                   	push   ebp
c001886c:	e8 ed 2f ff ff       	call   c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018871:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018874:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018878:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018880:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018888:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018890:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018893:	83 c4 4c             	add    esp,0x4c
c0018896:	5b                   	pop    ebx
c0018897:	5e                   	pop    esi
c0018898:	5f                   	pop    edi
c0018899:	5d                   	pop    ebp
c001889a:	ff e0                	jmp    eax
c001889c:	83 ec 0c             	sub    esp,0xc
c001889f:	68 58 01 00 00       	push   0x158
c00188a4:	e8 10 ef fe ff       	call   c00077b9 <malloc>
c00188a9:	89 c5                	mov    ebp,eax
c00188ab:	58                   	pop    eax
c00188ac:	5a                   	pop    edx
c00188ad:	68 96 ec 01 c0       	push   0xc001ec96
c00188b2:	55                   	push   ebp
c00188b3:	e8 fe 32 ff ff       	call   c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>
c00188b8:	59                   	pop    ecx
c00188b9:	5f                   	pop    edi
c00188ba:	55                   	push   ebp
c00188bb:	56                   	push   esi
c00188bc:	e8 57 30 ff ff       	call   c000b918 <Device::addChild(Device*)>
c00188c1:	b9 09 00 00 00       	mov    ecx,0x9
c00188c6:	fc                   	cld    
c00188c7:	89 df                	mov    edi,ebx
c00188c9:	89 de                	mov    esi,ebx
c00188cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188cd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00188d1:	83 c4 2c             	add    esp,0x2c
c00188d4:	5b                   	pop    ebx
c00188d5:	5e                   	pop    esi
c00188d6:	5f                   	pop    edi
c00188d7:	5d                   	pop    ebp
c00188d8:	e9 81 2f ff ff       	jmp    c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c00188dd:	83 c4 1c             	add    esp,0x1c
c00188e0:	5b                   	pop    ebx
c00188e1:	5e                   	pop    esi
c00188e2:	5f                   	pop    edi
c00188e3:	5d                   	pop    ebp
c00188e4:	c3                   	ret    
c00188e5:	90                   	nop

c00188e6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00188e6:	55                   	push   ebp
c00188e7:	57                   	push   edi
c00188e8:	56                   	push   esi
c00188e9:	53                   	push   ebx
c00188ea:	83 ec 68             	sub    esp,0x68
c00188ed:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00188f1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00188f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188fc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018903:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018908:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001890c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018913:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018918:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001891c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018921:	6a 0c                	push   0xc
c0018923:	57                   	push   edi
c0018924:	53                   	push   ebx
c0018925:	56                   	push   esi
c0018926:	55                   	push   ebp
c0018927:	e8 86 f8 ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001892c:	83 c4 20             	add    esp,0x20
c001892f:	57                   	push   edi
c0018930:	53                   	push   ebx
c0018931:	56                   	push   esi
c0018932:	55                   	push   ebp
c0018933:	e8 6e f9 ff ff       	call   c00182a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018938:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001893d:	57                   	push   edi
c001893e:	53                   	push   ebx
c001893f:	56                   	push   esi
c0018940:	55                   	push   ebp
c0018941:	e8 f6 f9 ff ff       	call   c001833c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018946:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001894a:	83 c4 14             	add    esp,0x14
c001894d:	6a 3c                	push   0x3c
c001894f:	57                   	push   edi
c0018950:	53                   	push   ebx
c0018951:	56                   	push   esi
c0018952:	55                   	push   ebp
c0018953:	e8 5a f8 ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018958:	0f b6 c4             	movzx  eax,ah
c001895b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001895f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018963:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018967:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001896c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018972:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018978:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001897c:	83 c4 20             	add    esp,0x20
c001897f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018984:	74 30                	je     c00189b6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018986:	31 c0                	xor    eax,eax
c0018988:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001898c:	7e 28                	jle    c00189b6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001898e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018996:	39 cb                	cmp    ebx,ecx
c0018998:	75 19                	jne    c00189b3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001899a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00189a2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00189a6:	75 0b                	jne    c00189b3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189a8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00189af:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00189b3:	40                   	inc    eax
c00189b4:	eb d2                	jmp    c0018988 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00189b6:	31 d2                	xor    edx,edx
c00189b8:	83 ec 0c             	sub    esp,0xc
c00189bb:	57                   	push   edi
c00189bc:	53                   	push   ebx
c00189bd:	56                   	push   esi
c00189be:	52                   	push   edx
c00189bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00189c3:	55                   	push   ebp
c00189c4:	e8 bf f9 ff ff       	call   c0018388 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189cd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00189d1:	42                   	inc    edx
c00189d2:	83 c4 20             	add    esp,0x20
c00189d5:	83 fa 06             	cmp    edx,0x6
c00189d8:	75 de                	jne    c00189b8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00189da:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189df:	83 ec 0c             	sub    esp,0xc
c00189e2:	86 e0                	xchg   al,ah
c00189e4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00189e9:	6a 02                	push   0x2
c00189eb:	57                   	push   edi
c00189ec:	53                   	push   ebx
c00189ed:	56                   	push   esi
c00189ee:	55                   	push   ebp
c00189ef:	e8 be f7 ff ff       	call   c00181b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189f4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00189f9:	83 c4 20             	add    esp,0x20
c00189fc:	57                   	push   edi
c00189fd:	53                   	push   ebx
c00189fe:	56                   	push   esi
c00189ff:	55                   	push   ebp
c0018a00:	e8 eb f8 ff ff       	call   c00182f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018a05:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018a09:	57                   	push   edi
c0018a0a:	53                   	push   ebx
c0018a0b:	56                   	push   esi
c0018a0c:	55                   	push   ebp
c0018a0d:	e8 48 f8 ff ff       	call   c001825a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a12:	b9 09 00 00 00       	mov    ecx,0x9
c0018a17:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018a1c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018a20:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018a24:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018a28:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018a2c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018a30:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018a34:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018a38:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018a3c:	83 ec 0c             	sub    esp,0xc
c0018a3f:	fc                   	cld    
c0018a40:	89 e7                	mov    edi,esp
c0018a42:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018a46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a48:	55                   	push   ebp
c0018a49:	e8 26 fd ff ff       	call   c0018774 <PCI::foundDevice(PCIDeviceInfo)>
c0018a4e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018a54:	5b                   	pop    ebx
c0018a55:	5e                   	pop    esi
c0018a56:	5f                   	pop    edi
c0018a57:	5d                   	pop    ebp
c0018a58:	c3                   	ret    
c0018a59:	90                   	nop

c0018a5a <PCI::checkDevice(unsigned char, unsigned char)>:
c0018a5a:	55                   	push   ebp
c0018a5b:	57                   	push   edi
c0018a5c:	56                   	push   esi
c0018a5d:	53                   	push   ebx
c0018a5e:	83 ec 0c             	sub    esp,0xc
c0018a61:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a65:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018a6a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018a6f:	6a 00                	push   0x0
c0018a71:	56                   	push   esi
c0018a72:	57                   	push   edi
c0018a73:	55                   	push   ebp
c0018a74:	e8 e1 f7 ff ff       	call   c001825a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a79:	6a 00                	push   0x0
c0018a7b:	56                   	push   esi
c0018a7c:	57                   	push   edi
c0018a7d:	55                   	push   ebp
c0018a7e:	e8 63 fe ff ff       	call   c00188e6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a83:	83 c4 20             	add    esp,0x20
c0018a86:	6a 00                	push   0x0
c0018a88:	56                   	push   esi
c0018a89:	57                   	push   edi
c0018a8a:	55                   	push   ebp
c0018a8b:	e8 ee f7 ff ff       	call   c001827e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a90:	83 c4 10             	add    esp,0x10
c0018a93:	84 c0                	test   al,al
c0018a95:	79 27                	jns    c0018abe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018a97:	bb 01 00 00 00       	mov    ebx,0x1
c0018a9c:	53                   	push   ebx
c0018a9d:	56                   	push   esi
c0018a9e:	57                   	push   edi
c0018a9f:	55                   	push   ebp
c0018aa0:	e8 b5 f7 ff ff       	call   c001825a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018aa5:	83 c4 10             	add    esp,0x10
c0018aa8:	66 40                	inc    ax
c0018aaa:	74 0c                	je     c0018ab8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018aac:	53                   	push   ebx
c0018aad:	56                   	push   esi
c0018aae:	57                   	push   edi
c0018aaf:	55                   	push   ebp
c0018ab0:	e8 31 fe ff ff       	call   c00188e6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ab5:	83 c4 10             	add    esp,0x10
c0018ab8:	43                   	inc    ebx
c0018ab9:	83 fb 08             	cmp    ebx,0x8
c0018abc:	75 de                	jne    c0018a9c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018abe:	83 c4 0c             	add    esp,0xc
c0018ac1:	5b                   	pop    ebx
c0018ac2:	5e                   	pop    esi
c0018ac3:	5f                   	pop    edi
c0018ac4:	5d                   	pop    ebp
c0018ac5:	c3                   	ret    

c0018ac6 <PCI::detect()>:
c0018ac6:	56                   	push   esi
c0018ac7:	53                   	push   ebx
c0018ac8:	53                   	push   ebx
c0018ac9:	31 db                	xor    ebx,ebx
c0018acb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018acf:	6a 00                	push   0x0
c0018ad1:	6a 00                	push   0x0
c0018ad3:	6a 00                	push   0x0
c0018ad5:	56                   	push   esi
c0018ad6:	e8 a3 f7 ff ff       	call   c001827e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018adb:	83 c4 10             	add    esp,0x10
c0018ade:	a8 80                	test   al,0x80
c0018ae0:	75 21                	jne    c0018b03 <PCI::detect()+0x3d>
c0018ae2:	51                   	push   ecx
c0018ae3:	51                   	push   ecx
c0018ae4:	6a 00                	push   0x0
c0018ae6:	56                   	push   esi
c0018ae7:	e8 62 fc ff ff       	call   c001874e <PCI::checkBus(unsigned char)>
c0018aec:	83 c4 10             	add    esp,0x10
c0018aef:	eb 24                	jmp    c0018b15 <PCI::detect()+0x4f>
c0018af1:	52                   	push   edx
c0018af2:	52                   	push   edx
c0018af3:	53                   	push   ebx
c0018af4:	43                   	inc    ebx
c0018af5:	56                   	push   esi
c0018af6:	e8 53 fc ff ff       	call   c001874e <PCI::checkBus(unsigned char)>
c0018afb:	83 c4 10             	add    esp,0x10
c0018afe:	83 fb 08             	cmp    ebx,0x8
c0018b01:	74 12                	je     c0018b15 <PCI::detect()+0x4f>
c0018b03:	53                   	push   ebx
c0018b04:	6a 00                	push   0x0
c0018b06:	6a 00                	push   0x0
c0018b08:	56                   	push   esi
c0018b09:	e8 4c f7 ff ff       	call   c001825a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	66 40                	inc    ax
c0018b13:	74 dc                	je     c0018af1 <PCI::detect()+0x2b>
c0018b15:	58                   	pop    eax
c0018b16:	5b                   	pop    ebx
c0018b17:	5e                   	pop    esi
c0018b18:	c3                   	ret    
c0018b19:	90                   	nop

c0018b1a <IDE::close(int, int, void*)>:
c0018b1a:	83 c8 ff             	or     eax,0xffffffff
c0018b1d:	c3                   	ret    

c0018b1e <IDE::IDE()>:
c0018b1e:	83 ec 0c             	sub    esp,0xc
c0018b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b25:	83 ec 08             	sub    esp,0x8
c0018b28:	68 dc ec 01 c0       	push   0xc001ecdc
c0018b2d:	50                   	push   eax
c0018b2e:	e8 29 31 ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c0018b33:	83 c4 10             	add    esp,0x10
c0018b36:	ba 6c ed 01 c0       	mov    edx,0xc001ed6c
c0018b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b3f:	89 10                	mov    DWORD PTR [eax],edx
c0018b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b45:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018b4c:	90                   	nop
c0018b4d:	83 c4 0c             	add    esp,0xc
c0018b50:	c3                   	ret    
c0018b51:	90                   	nop

c0018b52 <IDE::prepareInterrupt(unsigned char)>:
c0018b52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018b5b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018b63:	c3                   	ret    

c0018b64 <selectDrive(unsigned char, unsigned char)>:
c0018b64:	c3                   	ret    
c0018b65:	90                   	nop

c0018b66 <IDE::getBase(unsigned char)>:
c0018b66:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018b77:	c3                   	ret    

c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018b78:	55                   	push   ebp
c0018b79:	57                   	push   edi
c0018b7a:	56                   	push   esi
c0018b7b:	53                   	push   ebx
c0018b7c:	83 ec 1c             	sub    esp,0x1c
c0018b7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018b83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b87:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018b8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b92:	80 f9 03             	cmp    cl,0x3
c0018b95:	77 51                	ja     c0018be8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018b97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b9b:	0f b6 f2             	movzx  esi,dl
c0018b9e:	0f b6 db             	movzx  ebx,bl
c0018ba1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ba4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018ba8:	83 ca 80             	or     edx,0xffffff80
c0018bab:	0f b6 d2             	movzx  edx,dl
c0018bae:	52                   	push   edx
c0018baf:	6a 0c                	push   0xc
c0018bb1:	56                   	push   esi
c0018bb2:	57                   	push   edi
c0018bb3:	e8 c0 ff ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bb8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018bbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018bc1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018bc5:	ee                   	out    dx,al
c0018bc6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018bcb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018bcf:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018bd3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018bd7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018bdf:	83 c4 2c             	add    esp,0x2c
c0018be2:	5b                   	pop    ebx
c0018be3:	5e                   	pop    esi
c0018be4:	5f                   	pop    edi
c0018be5:	5d                   	pop    ebp
c0018be6:	eb 90                	jmp    c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018be8:	80 fb 07             	cmp    bl,0x7
c0018beb:	77 12                	ja     c0018bff <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018bed:	0f b6 d2             	movzx  edx,dl
c0018bf0:	0f b6 db             	movzx  ebx,bl
c0018bf3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018bfb:	89 da                	mov    edx,ebx
c0018bfd:	eb 2f                	jmp    c0018c2e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018bff:	80 fb 0d             	cmp    bl,0xd
c0018c02:	77 13                	ja     c0018c17 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018c04:	0f b6 d2             	movzx  edx,dl
c0018c07:	0f b6 db             	movzx  ebx,bl
c0018c0a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018c11:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018c15:	eb 17                	jmp    c0018c2e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c17:	80 fb 15             	cmp    bl,0x15
c0018c1a:	77 13                	ja     c0018c2f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018c1c:	0f b6 d2             	movzx  edx,dl
c0018c1f:	0f b6 db             	movzx  ebx,bl
c0018c22:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018c2a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018c2e:	ee                   	out    dx,al
c0018c2f:	83 c4 1c             	add    esp,0x1c
c0018c32:	5b                   	pop    ebx
c0018c33:	5e                   	pop    esi
c0018c34:	5f                   	pop    edi
c0018c35:	5d                   	pop    ebp
c0018c36:	c3                   	ret    
c0018c37:	90                   	nop

c0018c38 <IDE::read(unsigned char, unsigned char)>:
c0018c38:	55                   	push   ebp
c0018c39:	57                   	push   edi
c0018c3a:	56                   	push   esi
c0018c3b:	53                   	push   ebx
c0018c3c:	83 ec 1c             	sub    esp,0x1c
c0018c3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018c43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018c47:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018c4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c4e:	3c 03                	cmp    al,0x3
c0018c50:	77 43                	ja     c0018c95 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018c52:	0f b6 f2             	movzx  esi,dl
c0018c55:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018c58:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018c5c:	83 c8 80             	or     eax,0xffffff80
c0018c5f:	0f b6 c0             	movzx  eax,al
c0018c62:	50                   	push   eax
c0018c63:	6a 0c                	push   0xc
c0018c65:	56                   	push   esi
c0018c66:	57                   	push   edi
c0018c67:	e8 0c ff ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c6c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018c71:	0f b6 c3             	movzx  eax,bl
c0018c74:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018c78:	ec                   	in     al,dx
c0018c79:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018c7d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018c82:	52                   	push   edx
c0018c83:	6a 0c                	push   0xc
c0018c85:	56                   	push   esi
c0018c86:	57                   	push   edi
c0018c87:	e8 ec fe ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c8c:	83 c4 20             	add    esp,0x20
c0018c8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c93:	eb 49                	jmp    c0018cde <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c95:	80 fb 07             	cmp    bl,0x7
c0018c98:	77 12                	ja     c0018cac <IDE::read(unsigned char, unsigned char)+0x74>
c0018c9a:	0f b6 d2             	movzx  edx,dl
c0018c9d:	0f b6 c3             	movzx  eax,bl
c0018ca0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018ca8:	89 c2                	mov    edx,eax
c0018caa:	eb 31                	jmp    c0018cdd <IDE::read(unsigned char, unsigned char)+0xa5>
c0018cac:	80 fb 0d             	cmp    bl,0xd
c0018caf:	77 13                	ja     c0018cc4 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018cb1:	0f b6 d2             	movzx  edx,dl
c0018cb4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018cbb:	0f b6 d3             	movzx  edx,bl
c0018cbe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018cc2:	eb 19                	jmp    c0018cdd <IDE::read(unsigned char, unsigned char)+0xa5>
c0018cc4:	31 c0                	xor    eax,eax
c0018cc6:	80 fb 15             	cmp    bl,0x15
c0018cc9:	77 13                	ja     c0018cde <IDE::read(unsigned char, unsigned char)+0xa6>
c0018ccb:	0f b6 d2             	movzx  edx,dl
c0018cce:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018cd6:	0f b6 d3             	movzx  edx,bl
c0018cd9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018cdd:	ec                   	in     al,dx
c0018cde:	83 c4 1c             	add    esp,0x1c
c0018ce1:	5b                   	pop    ebx
c0018ce2:	5e                   	pop    esi
c0018ce3:	5f                   	pop    edi
c0018ce4:	5d                   	pop    ebp
c0018ce5:	c3                   	ret    

c0018ce6 <IDE::waitInterrupt(unsigned char)>:
c0018ce6:	57                   	push   edi
c0018ce7:	56                   	push   esi
c0018ce8:	31 f6                	xor    esi,esi
c0018cea:	53                   	push   ebx
c0018ceb:	83 ec 10             	sub    esp,0x10
c0018cee:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018cf2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018cf6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cfa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018cff:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018d06:	84 db                	test   bl,bl
c0018d08:	75 33                	jne    c0018d3d <IDE::waitInterrupt(unsigned char)+0x57>
c0018d0a:	52                   	push   edx
c0018d0b:	6a 0c                	push   0xc
c0018d0d:	50                   	push   eax
c0018d0e:	57                   	push   edi
c0018d0f:	e8 24 ff ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	a8 01                	test   al,0x1
c0018d19:	75 2a                	jne    c0018d45 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d1b:	f7 c6 04 00 00 00    	test   esi,0x4
c0018d21:	75 12                	jne    c0018d35 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d23:	83 fe 32             	cmp    esi,0x32
c0018d26:	7e 0d                	jle    c0018d35 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d28:	83 ec 0c             	sub    esp,0xc
c0018d2b:	6a 64                	push   0x64
c0018d2d:	e8 1a a9 ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c0018d32:	83 c4 10             	add    esp,0x10
c0018d35:	83 fe 3c             	cmp    esi,0x3c
c0018d38:	74 0b                	je     c0018d45 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d3a:	46                   	inc    esi
c0018d3b:	eb bd                	jmp    c0018cfa <IDE::waitInterrupt(unsigned char)+0x14>
c0018d3d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	88 d8                	mov    al,bl
c0018d4a:	5b                   	pop    ebx
c0018d4b:	5e                   	pop    esi
c0018d4c:	5f                   	pop    edi
c0018d4d:	c3                   	ret    

c0018d4e <ideChannel0IRQHandler(regs*, void*)>:
c0018d4e:	83 ec 10             	sub    esp,0x10
c0018d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d55:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018d5c:	6a 07                	push   0x7
c0018d5e:	6a 00                	push   0x0
c0018d60:	50                   	push   eax
c0018d61:	e8 d2 fe ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0018d66:	83 c4 1c             	add    esp,0x1c
c0018d69:	c3                   	ret    

c0018d6a <ideChannel1IRQHandler(regs*, void*)>:
c0018d6a:	83 ec 10             	sub    esp,0x10
c0018d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d71:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018d78:	6a 07                	push   0x7
c0018d7a:	6a 01                	push   0x1
c0018d7c:	50                   	push   eax
c0018d7d:	e8 b6 fe ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0018d82:	83 c4 1c             	add    esp,0x1c
c0018d85:	c3                   	ret    

c0018d86 <IDE::enableIRQs(unsigned char, bool)>:
c0018d86:	57                   	push   edi
c0018d87:	56                   	push   esi
c0018d88:	be 04 00 00 00       	mov    esi,0x4
c0018d8d:	53                   	push   ebx
c0018d8e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018d93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d97:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018d9c:	0f 94 c0             	sete   al
c0018d9f:	01 c0                	add    eax,eax
c0018da1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018da8:	0f b6 c0             	movzx  eax,al
c0018dab:	50                   	push   eax
c0018dac:	6a 0c                	push   0xc
c0018dae:	57                   	push   edi
c0018daf:	53                   	push   ebx
c0018db0:	e8 c3 fd ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018db5:	83 c4 10             	add    esp,0x10
c0018db8:	50                   	push   eax
c0018db9:	6a 0c                	push   0xc
c0018dbb:	57                   	push   edi
c0018dbc:	53                   	push   ebx
c0018dbd:	e8 76 fe ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0018dc2:	83 c4 10             	add    esp,0x10
c0018dc5:	4e                   	dec    esi
c0018dc6:	75 f0                	jne    c0018db8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018dc8:	5b                   	pop    ebx
c0018dc9:	5e                   	pop    esi
c0018dca:	5f                   	pop    edi
c0018dcb:	c3                   	ret    

c0018dcc <IDE::open(int, int, void*)>:
c0018dcc:	55                   	push   ebp
c0018dcd:	57                   	push   edi
c0018dce:	56                   	push   esi
c0018dcf:	53                   	push   ebx
c0018dd0:	83 ec 1c             	sub    esp,0x1c
c0018dd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018dd7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018de0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018de9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018df0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018df7:	0f 85 b0 02 00 00    	jne    c00190ad <IDE::open(int, int, void*)+0x2e1>
c0018dfd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018e03:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018e07:	83 e0 7f             	and    eax,0x7f
c0018e0a:	3c 05                	cmp    al,0x5
c0018e0c:	74 04                	je     c0018e12 <IDE::open(int, int, void*)+0x46>
c0018e0e:	3c 0f                	cmp    al,0xf
c0018e10:	75 32                	jne    c0018e44 <IDE::open(int, int, void*)+0x78>
c0018e12:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018e18:	83 e0 fc             	and    eax,0xfffffffc
c0018e1b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018e22:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018e28:	83 e0 fc             	and    eax,0xfffffffc
c0018e2b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018e32:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018e38:	83 e0 fc             	and    eax,0xfffffffc
c0018e3b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e42:	eb 14                	jmp    c0018e58 <IDE::open(int, int, void*)+0x8c>
c0018e44:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018e4e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018e58:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018e5f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018e66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e6a:	89 c6                	mov    esi,eax
c0018e6c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018e71:	c1 e6 10             	shl    esi,0x10
c0018e74:	89 e8                	mov    eax,ebp
c0018e76:	89 fa                	mov    edx,edi
c0018e78:	c1 e0 0b             	shl    eax,0xb
c0018e7b:	09 f0                	or     eax,esi
c0018e7d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018e84:	c1 e6 08             	shl    esi,0x8
c0018e87:	09 c6                	or     esi,eax
c0018e89:	89 f0                	mov    eax,esi
c0018e8b:	0d 08 00 00 80       	or     eax,0x80000008
c0018e90:	ef                   	out    dx,eax
c0018e91:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018e96:	89 ca                	mov    edx,ecx
c0018e98:	ed                   	in     eax,dx
c0018e99:	c1 e8 10             	shr    eax,0x10
c0018e9c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ea1:	0f 84 f5 00 00 00    	je     c0018f9c <IDE::open(int, int, void*)+0x1d0>
c0018ea7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018ead:	89 fa                	mov    edx,edi
c0018eaf:	89 f0                	mov    eax,esi
c0018eb1:	ef                   	out    dx,eax
c0018eb2:	b0 fe                	mov    al,0xfe
c0018eb4:	89 ca                	mov    edx,ecx
c0018eb6:	ee                   	out    dx,al
c0018eb7:	89 f0                	mov    eax,esi
c0018eb9:	89 fa                	mov    edx,edi
c0018ebb:	ef                   	out    dx,eax
c0018ebc:	89 ca                	mov    edx,ecx
c0018ebe:	ed                   	in     eax,dx
c0018ebf:	3c fe                	cmp    al,0xfe
c0018ec1:	0f 85 a9 00 00 00    	jne    c0018f70 <IDE::open(int, int, void*)+0x1a4>
c0018ec7:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c0018ecd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018ed4:	74 33                	je     c0018f09 <IDE::open(int, int, void*)+0x13d>
c0018ed6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018edc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018ee0:	40                   	inc    eax
c0018ee1:	83 ec 0c             	sub    esp,0xc
c0018ee4:	0f b6 c0             	movzx  eax,al
c0018ee7:	50                   	push   eax
c0018ee8:	55                   	push   ebp
c0018ee9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018eed:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018ef3:	51                   	push   ecx
c0018ef4:	e8 5b 57 ff ff       	call   c000e654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018ef9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018efe:	83 c4 1c             	add    esp,0x1c
c0018f01:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018f07:	eb 0a                	jmp    c0018f13 <IDE::open(int, int, void*)+0x147>
c0018f09:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018f13:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018f1a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018f21:	c1 e1 10             	shl    ecx,0x10
c0018f24:	c1 e0 08             	shl    eax,0x8
c0018f27:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018f2c:	09 c1                	or     ecx,eax
c0018f2e:	89 fa                	mov    edx,edi
c0018f30:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018f37:	c1 e0 0b             	shl    eax,0xb
c0018f3a:	09 c1                	or     ecx,eax
c0018f3c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018f42:	89 c8                	mov    eax,ecx
c0018f44:	ef                   	out    dx,eax
c0018f45:	be fc 0c 00 00       	mov    esi,0xcfc
c0018f4a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018f50:	89 f2                	mov    edx,esi
c0018f52:	ee                   	out    dx,al
c0018f53:	89 c8                	mov    eax,ecx
c0018f55:	89 fa                	mov    edx,edi
c0018f57:	ef                   	out    dx,eax
c0018f58:	89 f2                	mov    edx,esi
c0018f5a:	ed                   	in     eax,dx
c0018f5b:	0f b6 c0             	movzx  eax,al
c0018f5e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018f64:	74 46                	je     c0018fac <IDE::open(int, int, void*)+0x1e0>
c0018f66:	83 ec 0c             	sub    esp,0xc
c0018f69:	68 f4 ec 01 c0       	push   0xc001ecf4
c0018f6e:	eb 34                	jmp    c0018fa4 <IDE::open(int, int, void*)+0x1d8>
c0018f70:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018f79:	75 17                	jne    c0018f92 <IDE::open(int, int, void*)+0x1c6>
c0018f7b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018f80:	74 07                	je     c0018f89 <IDE::open(int, int, void*)+0x1bd>
c0018f82:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018f87:	75 09                	jne    c0018f92 <IDE::open(int, int, void*)+0x1c6>
c0018f89:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018f90:	eb 1a                	jmp    c0018fac <IDE::open(int, int, void*)+0x1e0>
c0018f92:	83 ec 0c             	sub    esp,0xc
c0018f95:	68 fc ec 01 c0       	push   0xc001ecfc
c0018f9a:	eb 08                	jmp    c0018fa4 <IDE::open(int, int, void*)+0x1d8>
c0018f9c:	83 ec 0c             	sub    esp,0xc
c0018f9f:	68 2d ed 01 c0       	push   0xc001ed2d
c0018fa4:	e8 92 71 ff ff       	call   c001013b <KePanic(char const*)>
c0018fa9:	83 c4 10             	add    esp,0x10
c0018fac:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018fb3:	79 1a                	jns    c0018fcf <IDE::open(int, int, void*)+0x203>
c0018fb5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018fbb:	83 e0 fc             	and    eax,0xfffffffc
c0018fbe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018fc5:	83 c0 08             	add    eax,0x8
c0018fc8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018fcf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fd5:	89 c2                	mov    edx,eax
c0018fd7:	83 e2 0f             	and    edx,0xf
c0018fda:	66 83 fa 08          	cmp    dx,0x8
c0018fde:	75 0a                	jne    c0018fea <IDE::open(int, int, void*)+0x21e>
c0018fe0:	83 e8 02             	sub    eax,0x2
c0018fe3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fea:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018ff0:	89 c2                	mov    edx,eax
c0018ff2:	83 e2 0f             	and    edx,0xf
c0018ff5:	66 83 fa 08          	cmp    dx,0x8
c0018ff9:	75 0a                	jne    c0019005 <IDE::open(int, int, void*)+0x239>
c0018ffb:	83 e8 02             	sub    eax,0x2
c0018ffe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019005:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001900c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019013:	89 d0                	mov    eax,edx
c0019015:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019018:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001901c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019020:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019023:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019028:	0f b6 c9             	movzx  ecx,cl
c001902b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019032:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019035:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019039:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001903d:	8d 50 02             	lea    edx,[eax+0x2]
c0019040:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019045:	0f b6 d2             	movzx  edx,dl
c0019048:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001904e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019051:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019055:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019059:	8d 48 03             	lea    ecx,[eax+0x3]
c001905c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019061:	0f b6 c9             	movzx  ecx,cl
c0019064:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001906a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001906d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019071:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019075:	8d 50 04             	lea    edx,[eax+0x4]
c0019078:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001907e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019083:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001908a:	66 85 f6             	test   si,si
c001908d:	74 5b                	je     c00190ea <IDE::open(int, int, void*)+0x31e>
c001908f:	0f b6 d2             	movzx  edx,dl
c0019092:	83 c0 05             	add    eax,0x5
c0019095:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019098:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001909c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00190a0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190a6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190ab:	eb 3d                	jmp    c00190ea <IDE::open(int, int, void*)+0x31e>
c00190ad:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00190b3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00190ba:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00190c1:	66 05 06 02          	add    ax,0x206
c00190c5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00190cc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00190d3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00190da:	66 05 06 02          	add    ax,0x206
c00190de:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00190e5:	e9 e5 fe ff ff       	jmp    c0018fcf <IDE::open(int, int, void*)+0x203>
c00190ea:	50                   	push   eax
c00190eb:	50                   	push   eax
c00190ec:	6a 00                	push   0x0
c00190ee:	53                   	push   ebx
c00190ef:	e8 5e fa ff ff       	call   c0018b52 <IDE::prepareInterrupt(unsigned char)>
c00190f4:	5a                   	pop    edx
c00190f5:	59                   	pop    ecx
c00190f6:	6a 01                	push   0x1
c00190f8:	53                   	push   ebx
c00190f9:	e8 54 fa ff ff       	call   c0018b52 <IDE::prepareInterrupt(unsigned char)>
c00190fe:	83 c4 0c             	add    esp,0xc
c0019101:	6a 00                	push   0x0
c0019103:	6a 00                	push   0x0
c0019105:	53                   	push   ebx
c0019106:	e8 7b fc ff ff       	call   c0018d86 <IDE::enableIRQs(unsigned char, bool)>
c001910b:	83 c4 0c             	add    esp,0xc
c001910e:	6a 00                	push   0x0
c0019110:	6a 01                	push   0x1
c0019112:	53                   	push   ebx
c0019113:	e8 6e fc ff ff       	call   c0018d86 <IDE::enableIRQs(unsigned char, bool)>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019122:	74 34                	je     c0019158 <IDE::open(int, int, void*)+0x38c>
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	53                   	push   ebx
c0019128:	6a 01                	push   0x1
c001912a:	68 4e 8d 01 c0       	push   0xc0018d4e
c001912f:	6a 0e                	push   0xe
c0019131:	53                   	push   ebx
c0019132:	e8 8d 27 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019137:	83 c4 14             	add    esp,0x14
c001913a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019140:	53                   	push   ebx
c0019141:	6a 01                	push   0x1
c0019143:	68 6a 8d 01 c0       	push   0xc0018d6a
c0019148:	6a 0f                	push   0xf
c001914a:	53                   	push   ebx
c001914b:	e8 74 27 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019150:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019156:	eb 38                	jmp    c0019190 <IDE::open(int, int, void*)+0x3c4>
c0019158:	83 ec 0c             	sub    esp,0xc
c001915b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019165:	53                   	push   ebx
c0019166:	6a 00                	push   0x0
c0019168:	68 4e 8d 01 c0       	push   0xc0018d4e
c001916d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019173:	53                   	push   ebx
c0019174:	e8 4b 27 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019179:	83 c4 14             	add    esp,0x14
c001917c:	53                   	push   ebx
c001917d:	6a 00                	push   0x0
c001917f:	68 6a 8d 01 c0       	push   0xc0018d6a
c0019184:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001918a:	53                   	push   ebx
c001918b:	e8 34 27 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019190:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019192:	83 c4 20             	add    esp,0x20
c0019195:	83 ec 0c             	sub    esp,0xc
c0019198:	53                   	push   ebx
c0019199:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001919c:	83 c4 0c             	add    esp,0xc
c001919f:	6a 07                	push   0x7
c00191a1:	6a 00                	push   0x0
c00191a3:	53                   	push   ebx
c00191a4:	e8 8f fa ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c00191a9:	83 c4 0c             	add    esp,0xc
c00191ac:	6a 07                	push   0x7
c00191ae:	6a 01                	push   0x1
c00191b0:	53                   	push   ebx
c00191b1:	e8 82 fa ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c00191b6:	83 c4 0c             	add    esp,0xc
c00191b9:	6a 01                	push   0x1
c00191bb:	6a 00                	push   0x0
c00191bd:	53                   	push   ebx
c00191be:	e8 c3 fb ff ff       	call   c0018d86 <IDE::enableIRQs(unsigned char, bool)>
c00191c3:	83 c4 0c             	add    esp,0xc
c00191c6:	6a 01                	push   0x1
c00191c8:	6a 01                	push   0x1
c00191ca:	53                   	push   ebx
c00191cb:	e8 b6 fb ff ff       	call   c0018d86 <IDE::enableIRQs(unsigned char, bool)>
c00191d0:	83 c4 2c             	add    esp,0x2c
c00191d3:	31 c0                	xor    eax,eax
c00191d5:	5b                   	pop    ebx
c00191d6:	5e                   	pop    esi
c00191d7:	5f                   	pop    edi
c00191d8:	5d                   	pop    ebp
c00191d9:	c3                   	ret    

c00191da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00191da:	55                   	push   ebp
c00191db:	57                   	push   edi
c00191dc:	56                   	push   esi
c00191dd:	53                   	push   ebx
c00191de:	83 ec 1c             	sub    esp,0x1c
c00191e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00191e9:	8d 50 f8             	lea    edx,[eax-0x8]
c00191ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00191f0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00191f4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00191f8:	80 fa 03             	cmp    dl,0x3
c00191fb:	77 5d                	ja     c001925a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00191fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019201:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019205:	0f b6 db             	movzx  ebx,bl
c0019208:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001920b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001920f:	83 ca 80             	or     edx,0xffffff80
c0019212:	0f b6 d2             	movzx  edx,dl
c0019215:	52                   	push   edx
c0019216:	6a 0c                	push   0xc
c0019218:	53                   	push   ebx
c0019219:	56                   	push   esi
c001921a:	e8 59 f9 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001921f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019224:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019228:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001922c:	0f b6 c0             	movzx  eax,al
c001922f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019233:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019235:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001923a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001923e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019242:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019246:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001924e:	83 c4 2c             	add    esp,0x2c
c0019251:	5b                   	pop    ebx
c0019252:	5e                   	pop    esi
c0019253:	5f                   	pop    edi
c0019254:	5d                   	pop    ebp
c0019255:	e9 1e f9 ff ff       	jmp    c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001925a:	3c 07                	cmp    al,0x7
c001925c:	77 10                	ja     c001926e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001925e:	0f b6 db             	movzx  ebx,bl
c0019261:	0f b6 d0             	movzx  edx,al
c0019264:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001926c:	eb 2d                	jmp    c001929b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001926e:	3c 0d                	cmp    al,0xd
c0019270:	77 13                	ja     c0019285 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019272:	0f b6 db             	movzx  ebx,bl
c0019275:	0f b6 c0             	movzx  eax,al
c0019278:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001927f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019283:	eb 16                	jmp    c001929b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019285:	3c 15                	cmp    al,0x15
c0019287:	77 14                	ja     c001929d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019289:	0f b6 db             	movzx  ebx,bl
c001928c:	0f b6 c0             	movzx  eax,al
c001928f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019297:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001929b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001929d:	83 c4 1c             	add    esp,0x1c
c00192a0:	5b                   	pop    ebx
c00192a1:	5e                   	pop    esi
c00192a2:	5f                   	pop    edi
c00192a3:	5d                   	pop    ebp
c00192a4:	c3                   	ret    
c00192a5:	90                   	nop

c00192a6 <IDE::detect()>:
c00192a6:	55                   	push   ebp
c00192a7:	57                   	push   edi
c00192a8:	56                   	push   esi
c00192a9:	53                   	push   ebx
c00192aa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00192b0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00192b7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00192be:	0f 85 97 02 00 00    	jne    c001955b <IDE::detect()+0x2b5>
c00192c4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00192cb:	31 f6                	xor    esi,esi
c00192cd:	31 ed                	xor    ebp,ebp
c00192cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192d7:	89 e8                	mov    eax,ebp
c00192d9:	c1 e0 06             	shl    eax,0x6
c00192dc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00192e4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00192e8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192ec:	c1 e0 04             	shl    eax,0x4
c00192ef:	83 c8 a0             	or     eax,0xffffffa0
c00192f2:	0f b6 c0             	movzx  eax,al
c00192f5:	50                   	push   eax
c00192f6:	6a 06                	push   0x6
c00192f8:	56                   	push   esi
c00192f9:	53                   	push   ebx
c00192fa:	e8 79 f8 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192ff:	83 c4 0c             	add    esp,0xc
c0019302:	6a 0c                	push   0xc
c0019304:	56                   	push   esi
c0019305:	53                   	push   ebx
c0019306:	e8 2d f9 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001930b:	83 c4 0c             	add    esp,0xc
c001930e:	6a 0c                	push   0xc
c0019310:	56                   	push   esi
c0019311:	53                   	push   ebx
c0019312:	e8 21 f9 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019317:	83 c4 0c             	add    esp,0xc
c001931a:	6a 0c                	push   0xc
c001931c:	56                   	push   esi
c001931d:	53                   	push   ebx
c001931e:	e8 15 f9 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019323:	83 c4 0c             	add    esp,0xc
c0019326:	6a 0c                	push   0xc
c0019328:	56                   	push   esi
c0019329:	53                   	push   ebx
c001932a:	e8 09 f9 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001932f:	68 ec 00 00 00       	push   0xec
c0019334:	6a 07                	push   0x7
c0019336:	56                   	push   esi
c0019337:	53                   	push   ebx
c0019338:	e8 3b f8 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001933d:	83 c4 1c             	add    esp,0x1c
c0019340:	6a 0c                	push   0xc
c0019342:	56                   	push   esi
c0019343:	53                   	push   ebx
c0019344:	e8 ef f8 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019349:	83 c4 0c             	add    esp,0xc
c001934c:	6a 0c                	push   0xc
c001934e:	56                   	push   esi
c001934f:	53                   	push   ebx
c0019350:	e8 e3 f8 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019355:	83 c4 0c             	add    esp,0xc
c0019358:	6a 0c                	push   0xc
c001935a:	56                   	push   esi
c001935b:	53                   	push   ebx
c001935c:	e8 d7 f8 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019361:	83 c4 0c             	add    esp,0xc
c0019364:	6a 0c                	push   0xc
c0019366:	56                   	push   esi
c0019367:	53                   	push   ebx
c0019368:	e8 cb f8 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001936d:	83 c4 0c             	add    esp,0xc
c0019370:	6a 0c                	push   0xc
c0019372:	56                   	push   esi
c0019373:	53                   	push   ebx
c0019374:	e8 bf f8 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	84 c0                	test   al,al
c001937e:	0f 84 5f 01 00 00    	je     c00194e3 <IDE::detect()+0x23d>
c0019384:	31 ff                	xor    edi,edi
c0019386:	50                   	push   eax
c0019387:	6a 0c                	push   0xc
c0019389:	56                   	push   esi
c001938a:	53                   	push   ebx
c001938b:	e8 a8 f8 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019390:	83 c4 10             	add    esp,0x10
c0019393:	a8 01                	test   al,0x1
c0019395:	0f 85 69 01 00 00    	jne    c0019504 <IDE::detect()+0x25e>
c001939b:	84 c0                	test   al,al
c001939d:	78 04                	js     c00193a3 <IDE::detect()+0xfd>
c001939f:	a8 08                	test   al,0x8
c00193a1:	75 23                	jne    c00193c6 <IDE::detect()+0x120>
c00193a3:	47                   	inc    edi
c00193a4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00193aa:	7e da                	jle    c0019386 <IDE::detect()+0xe0>
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	6a 32                	push   0x32
c00193b1:	e8 96 a2 ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00193bf:	75 c5                	jne    c0019386 <IDE::detect()+0xe0>
c00193c1:	e9 3e 01 00 00       	jmp    c0019504 <IDE::detect()+0x25e>
c00193c6:	31 c9                	xor    ecx,ecx
c00193c8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00193cc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00193d0:	83 ec 0c             	sub    esp,0xc
c00193d3:	68 80 00 00 00       	push   0x80
c00193d8:	57                   	push   edi
c00193d9:	6a 00                	push   0x0
c00193db:	56                   	push   esi
c00193dc:	53                   	push   ebx
c00193dd:	e8 f8 fd ff ff       	call   c00191da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00193e2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00193e7:	89 e8                	mov    eax,ebp
c00193e9:	89 d1                	mov    ecx,edx
c00193eb:	c1 e0 06             	shl    eax,0x6
c00193ee:	01 d8                	add    eax,ebx
c00193f0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00193f7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00193fe:	89 f2                	mov    edx,esi
c0019400:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019406:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001940a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019410:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019414:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001941b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019423:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001942a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019432:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019438:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001943f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019445:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019449:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001944d:	83 c4 20             	add    esp,0x20
c0019450:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019453:	83 c0 02             	add    eax,0x2
c0019456:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001945c:	83 c7 02             	add    edi,0x2
c001945f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019462:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019468:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001946c:	75 e2                	jne    c0019450 <IDE::detect()+0x1aa>
c001946e:	89 e8                	mov    eax,ebp
c0019470:	c1 e0 06             	shl    eax,0x6
c0019473:	01 d8                	add    eax,ebx
c0019475:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001947b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019482:	66 c1 ea 09          	shr    dx,0x9
c0019486:	83 e2 01             	and    edx,0x1
c0019489:	84 c9                	test   cl,cl
c001948b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019491:	75 22                	jne    c00194b5 <IDE::detect()+0x20f>
c0019493:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001949a:	74 46                	je     c00194e2 <IDE::detect()+0x23c>
c001949c:	83 ec 0c             	sub    esp,0xc
c001949f:	68 7c 01 00 00       	push   0x17c
c00194a4:	e8 10 e3 fe ff       	call   c00077b9 <malloc>
c00194a9:	89 c7                	mov    edi,eax
c00194ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00194ae:	e8 11 05 00 00       	call   c00199c4 <ATA::ATA()>
c00194b3:	eb 17                	jmp    c00194cc <IDE::detect()+0x226>
c00194b5:	83 ec 0c             	sub    esp,0xc
c00194b8:	68 84 01 00 00       	push   0x184
c00194bd:	e8 f7 e2 fe ff       	call   c00077b9 <malloc>
c00194c2:	89 c7                	mov    edi,eax
c00194c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00194c7:	e8 f0 0a 00 00       	call   c0019fbc <ATAPI::ATAPI()>
c00194cc:	5a                   	pop    edx
c00194cd:	59                   	pop    ecx
c00194ce:	57                   	push   edi
c00194cf:	53                   	push   ebx
c00194d0:	e8 43 24 ff ff       	call   c000b918 <Device::addChild(Device*)>
c00194d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00194d7:	53                   	push   ebx
c00194d8:	55                   	push   ebp
c00194d9:	6a 00                	push   0x0
c00194db:	57                   	push   edi
c00194dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00194df:	83 c4 20             	add    esp,0x20
c00194e2:	45                   	inc    ebp
c00194e3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00194e8:	74 0d                	je     c00194f7 <IDE::detect()+0x251>
c00194ea:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00194f2:	e9 e0 fd ff ff       	jmp    c00192d7 <IDE::detect()+0x31>
c00194f7:	4e                   	dec    esi
c00194f8:	74 61                	je     c001955b <IDE::detect()+0x2b5>
c00194fa:	be 01 00 00 00       	mov    esi,0x1
c00194ff:	e9 cb fd ff ff       	jmp    c00192cf <IDE::detect()+0x29>
c0019504:	50                   	push   eax
c0019505:	6a 04                	push   0x4
c0019507:	56                   	push   esi
c0019508:	53                   	push   ebx
c0019509:	e8 2a f7 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001950e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019512:	83 c4 0c             	add    esp,0xc
c0019515:	6a 05                	push   0x5
c0019517:	56                   	push   esi
c0019518:	53                   	push   ebx
c0019519:	e8 1a f7 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001951e:	83 c4 10             	add    esp,0x10
c0019521:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019525:	80 fa 14             	cmp    dl,0x14
c0019528:	75 04                	jne    c001952e <IDE::detect()+0x288>
c001952a:	3c eb                	cmp    al,0xeb
c001952c:	eb 07                	jmp    c0019535 <IDE::detect()+0x28f>
c001952e:	3c 96                	cmp    al,0x96
c0019530:	75 b1                	jne    c00194e3 <IDE::detect()+0x23d>
c0019532:	80 fa 69             	cmp    dl,0x69
c0019535:	75 ac                	jne    c00194e3 <IDE::detect()+0x23d>
c0019537:	68 a1 00 00 00       	push   0xa1
c001953c:	6a 07                	push   0x7
c001953e:	56                   	push   esi
c001953f:	53                   	push   ebx
c0019540:	e8 33 f6 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019545:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001954c:	e8 fb a0 ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c0019551:	83 c4 10             	add    esp,0x10
c0019554:	b1 01                	mov    cl,0x1
c0019556:	e9 6d fe ff ff       	jmp    c00193c8 <IDE::detect()+0x122>
c001955b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019561:	5b                   	pop    ebx
c0019562:	5e                   	pop    esi
c0019563:	5f                   	pop    edi
c0019564:	5d                   	pop    ebp
c0019565:	c3                   	ret    

c0019566 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019566:	55                   	push   ebp
c0019567:	57                   	push   edi
c0019568:	56                   	push   esi
c0019569:	53                   	push   ebx
c001956a:	83 ec 1c             	sub    esp,0x1c
c001956d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019571:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019575:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019579:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001957d:	88 c3                	mov    bl,al
c001957f:	84 c0                	test   al,al
c0019581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019585:	0f 84 81 00 00 00    	je     c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001958b:	83 ec 0c             	sub    esp,0xc
c001958e:	68 57 ed 01 c0       	push   0xc001ed57
c0019593:	e8 40 0f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001959f:	3c 01                	cmp    al,0x1
c00195a1:	74 63                	je     c0019606 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00195a3:	3c 02                	cmp    al,0x2
c00195a5:	75 53                	jne    c00195fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00195a7:	01 f6                	add    esi,esi
c00195a9:	09 ee                	or     esi,ebp
c00195ab:	50                   	push   eax
c00195ac:	89 f0                	mov    eax,esi
c00195ae:	6a 01                	push   0x1
c00195b0:	0f b6 f0             	movzx  esi,al
c00195b3:	c1 e6 06             	shl    esi,0x6
c00195b6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00195be:	50                   	push   eax
c00195bf:	57                   	push   edi
c00195c0:	e8 73 f6 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c00195c5:	83 c4 10             	add    esp,0x10
c00195c8:	a8 01                	test   al,0x1
c00195ca:	74 02                	je     c00195ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00195cc:	b3 07                	mov    bl,0x7
c00195ce:	a8 02                	test   al,0x2
c00195d0:	74 02                	je     c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00195d2:	b3 03                	mov    bl,0x3
c00195d4:	a8 04                	test   al,0x4
c00195d6:	74 02                	je     c00195da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00195d8:	b3 14                	mov    bl,0x14
c00195da:	a8 08                	test   al,0x8
c00195dc:	74 02                	je     c00195e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00195de:	b3 03                	mov    bl,0x3
c00195e0:	a8 10                	test   al,0x10
c00195e2:	74 02                	je     c00195e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00195e4:	b3 15                	mov    bl,0x15
c00195e6:	a8 20                	test   al,0x20
c00195e8:	74 02                	je     c00195ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00195ea:	b3 03                	mov    bl,0x3
c00195ec:	a8 40                	test   al,0x40
c00195ee:	74 02                	je     c00195f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00195f0:	b3 16                	mov    bl,0x16
c00195f2:	84 c0                	test   al,al
c00195f4:	79 16                	jns    c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195f6:	b3 0d                	mov    bl,0xd
c00195f8:	eb 12                	jmp    c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195fa:	3c 03                	cmp    al,0x3
c00195fc:	74 0c                	je     c001960a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00195fe:	3c 04                	cmp    al,0x4
c0019600:	75 0a                	jne    c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019602:	b3 08                	mov    bl,0x8
c0019604:	eb 06                	jmp    c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019606:	b3 13                	mov    bl,0x13
c0019608:	eb 02                	jmp    c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001960a:	b3 17                	mov    bl,0x17
c001960c:	83 c4 1c             	add    esp,0x1c
c001960f:	88 d8                	mov    al,bl
c0019611:	5b                   	pop    ebx
c0019612:	5e                   	pop    esi
c0019613:	5f                   	pop    edi
c0019614:	5d                   	pop    ebp
c0019615:	c3                   	ret    

c0019616 <IDE::polling(unsigned char, unsigned int)>:
c0019616:	55                   	push   ebp
c0019617:	bd 04 00 00 00       	mov    ebp,0x4
c001961c:	57                   	push   edi
c001961d:	56                   	push   esi
c001961e:	53                   	push   ebx
c001961f:	83 ec 0c             	sub    esp,0xc
c0019622:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019626:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001962a:	0f b6 f3             	movzx  esi,bl
c001962d:	52                   	push   edx
c001962e:	6a 0c                	push   0xc
c0019630:	56                   	push   esi
c0019631:	57                   	push   edi
c0019632:	e8 01 f6 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019637:	83 c4 10             	add    esp,0x10
c001963a:	4d                   	dec    ebp
c001963b:	75 ed                	jne    c001962a <IDE::polling(unsigned char, unsigned int)+0x14>
c001963d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019642:	50                   	push   eax
c0019643:	6a 0c                	push   0xc
c0019645:	56                   	push   esi
c0019646:	57                   	push   edi
c0019647:	e8 ec f5 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	a8 01                	test   al,0x1
c0019651:	75 17                	jne    c001966a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019653:	a8 20                	test   al,0x20
c0019655:	75 0f                	jne    c0019666 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019657:	4b                   	dec    ebx
c0019658:	74 10                	je     c001966a <IDE::polling(unsigned char, unsigned int)+0x54>
c001965a:	84 c0                	test   al,al
c001965c:	78 e4                	js     c0019642 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001965e:	a8 08                	test   al,0x8
c0019660:	74 e0                	je     c0019642 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019662:	31 c0                	xor    eax,eax
c0019664:	eb 06                	jmp    c001966c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019666:	b0 01                	mov    al,0x1
c0019668:	eb 02                	jmp    c001966c <IDE::polling(unsigned char, unsigned int)+0x56>
c001966a:	b0 02                	mov    al,0x2
c001966c:	83 c4 0c             	add    esp,0xc
c001966f:	5b                   	pop    ebx
c0019670:	5e                   	pop    esi
c0019671:	5f                   	pop    edi
c0019672:	5d                   	pop    ebp
c0019673:	c3                   	ret    

c0019674 <SATABus::close(int, int, void*)>:
c0019674:	31 c0                	xor    eax,eax
c0019676:	c3                   	ret    
c0019677:	90                   	nop

c0019678 <SATABus::detect()>:
c0019678:	c3                   	ret    
c0019679:	90                   	nop

c001967a <SATABus::SATABus()>:
c001967a:	83 ec 0c             	sub    esp,0xc
c001967d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019681:	83 ec 08             	sub    esp,0x8
c0019684:	68 90 ed 01 c0       	push   0xc001ed90
c0019689:	50                   	push   eax
c001968a:	e8 cd 25 ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c001968f:	83 c4 10             	add    esp,0x10
c0019692:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c0019697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001969b:	89 10                	mov    DWORD PTR [eax],edx
c001969d:	83 ec 0c             	sub    esp,0xc
c00196a0:	6a 50                	push   0x50
c00196a2:	e8 ac e4 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	89 c2                	mov    edx,eax
c00196ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	6a 50                	push   0x50
c00196bb:	e8 c5 fb fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00196c0:	83 c4 10             	add    esp,0x10
c00196c3:	89 c2                	mov    edx,eax
c00196c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196c9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00196cf:	a1 90 05 02 c0       	mov    eax,ds:0xc0020590
c00196d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196d8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00196de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196e2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00196e8:	83 ec 0c             	sub    esp,0xc
c00196eb:	6a 03                	push   0x3
c00196ed:	6a 50                	push   0x50
c00196ef:	51                   	push   ecx
c00196f0:	52                   	push   edx
c00196f1:	50                   	push   eax
c00196f2:	e8 1d 05 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00196f7:	83 c4 20             	add    esp,0x20
c00196fa:	90                   	nop
c00196fb:	83 c4 0c             	add    esp,0xc
c00196fe:	c3                   	ret    
c00196ff:	90                   	nop

c0019700 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019700:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019704:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019707:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001970a:	09 c2                	or     edx,eax
c001970c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019710:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019716:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019718:	31 c0                	xor    eax,eax
c001971a:	c1 e9 08             	shr    ecx,0x8
c001971d:	83 e1 0f             	and    ecx,0xf
c0019720:	39 c8                	cmp    eax,ecx
c0019722:	74 0a                	je     c001972e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019724:	f6 c2 01             	test   dl,0x1
c0019727:	74 08                	je     c0019731 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019729:	d1 ea                	shr    edx,1
c001972b:	40                   	inc    eax
c001972c:	eb f2                	jmp    c0019720 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001972e:	83 c8 ff             	or     eax,0xffffffff
c0019731:	c3                   	ret    

c0019732 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019732:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019736:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019739:	89 c2                	mov    edx,eax
c001973b:	c1 ea 08             	shr    edx,0x8
c001973e:	83 e2 0f             	and    edx,0xf
c0019741:	fe ca                	dec    dl
c0019743:	75 31                	jne    c0019776 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019745:	83 e0 0f             	and    eax,0xf
c0019748:	3c 03                	cmp    al,0x3
c001974a:	75 2a                	jne    c0019776 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001974c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001974f:	b8 02 00 00 00       	mov    eax,0x2
c0019754:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001975a:	74 1c                	je     c0019778 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001975c:	b8 04 00 00 00       	mov    eax,0x4
c0019761:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019767:	74 0f                	je     c0019778 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019769:	31 c0                	xor    eax,eax
c001976b:	83 fa 03             	cmp    edx,0x3
c001976e:	0f 94 c0             	sete   al
c0019771:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019775:	c3                   	ret    
c0019776:	31 c0                	xor    eax,eax
c0019778:	c3                   	ret    
c0019779:	90                   	nop

c001977a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001977a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001977e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019781:	0f ba e2 0f          	bt     edx,0xf
c0019785:	72 f7                	jb     c001977e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019787:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001978a:	83 ca 10             	or     edx,0x10
c001978d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019790:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019793:	83 ca 01             	or     edx,0x1
c0019796:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019799:	c3                   	ret    

c001979a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001979a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001979e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197a1:	83 e2 fe             	and    edx,0xfffffffe
c00197a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197a7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197aa:	83 e2 ef             	and    edx,0xffffffef
c00197ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197b3:	0f ba e2 0e          	bt     edx,0xe
c00197b7:	72 f7                	jb     c00197b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00197b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197bc:	0f ba e2 0f          	bt     edx,0xf
c00197c0:	72 ee                	jb     c00197b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00197c2:	c3                   	ret    
c00197c3:	90                   	nop

c00197c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00197c4:	55                   	push   ebp
c00197c5:	57                   	push   edi
c00197c6:	56                   	push   esi
c00197c7:	53                   	push   ebx
c00197c8:	83 ec 1c             	sub    esp,0x1c
c00197cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00197d3:	53                   	push   ebx
c00197d4:	56                   	push   esi
c00197d5:	e8 c0 ff ff ff       	call   c001979a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00197da:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00197de:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197e4:	83 ec 0c             	sub    esp,0xc
c00197e7:	c1 e5 0a             	shl    ebp,0xa
c00197ea:	01 e8                	add    eax,ebp
c00197ec:	89 03                	mov    DWORD PTR [ebx],eax
c00197ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00197f0:	68 00 04 00 00       	push   0x400
c00197f5:	6a 00                	push   0x0
c00197f7:	50                   	push   eax
c00197f8:	e8 d3 6c fe ff       	call   c00004d0 <memset>
c00197fd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019803:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019807:	01 e8                	add    eax,ebp
c0019809:	83 c4 1c             	add    esp,0x1c
c001980c:	89 03                	mov    DWORD PTR [ebx],eax
c001980e:	c1 e2 08             	shl    edx,0x8
c0019811:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019818:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001981e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019824:	01 f8                	add    eax,edi
c0019826:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019829:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001982c:	68 00 01 00 00       	push   0x100
c0019831:	6a 00                	push   0x0
c0019833:	50                   	push   eax
c0019834:	e8 97 6c fe ff       	call   c00004d0 <memset>
c0019839:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001983f:	01 fa                	add    edx,edi
c0019841:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019845:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019848:	c1 e7 0d             	shl    edi,0xd
c001984b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019852:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019858:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001985e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019862:	31 ff                	xor    edi,edi
c0019864:	83 c4 10             	add    esp,0x10
c0019867:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001986d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019871:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019877:	83 c5 20             	add    ebp,0x20
c001987a:	01 f8                	add    eax,edi
c001987c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001987f:	52                   	push   edx
c0019880:	68 00 01 00 00       	push   0x100
c0019885:	6a 00                	push   0x0
c0019887:	50                   	push   eax
c0019888:	e8 43 6c fe ff       	call   c00004d0 <memset>
c001988d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001989a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00198a1:	01 f8                	add    eax,edi
c00198a3:	81 c7 00 01 00 00    	add    edi,0x100
c00198a9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198ac:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00198b2:	75 b3                	jne    c0019867 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c00198b4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00198bb:	50                   	push   eax
c00198bc:	50                   	push   eax
c00198bd:	53                   	push   ebx
c00198be:	56                   	push   esi
c00198bf:	e8 b6 fe ff ff       	call   c001977a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00198c4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00198cb:	83 c4 2c             	add    esp,0x2c
c00198ce:	5b                   	pop    ebx
c00198cf:	5e                   	pop    esi
c00198d0:	5f                   	pop    edi
c00198d1:	5d                   	pop    ebp
c00198d2:	c3                   	ret    
c00198d3:	90                   	nop

c00198d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00198d4:	55                   	push   ebp
c00198d5:	57                   	push   edi
c00198d6:	56                   	push   esi
c00198d7:	53                   	push   ebx
c00198d8:	31 db                	xor    ebx,ebx
c00198da:	83 ec 0c             	sub    esp,0xc
c00198dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00198e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198e5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00198e8:	f7 c7 01 00 00 00    	test   edi,0x1
c00198ee:	74 7a                	je     c001996a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198f0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00198f4:	89 d8                	mov    eax,ebx
c00198f6:	c1 e0 07             	shl    eax,0x7
c00198f9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019900:	55                   	push   ebp
c0019901:	56                   	push   esi
c0019902:	e8 2b fe ff ff       	call   c0019732 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019907:	5a                   	pop    edx
c0019908:	83 f8 01             	cmp    eax,0x1
c001990b:	59                   	pop    ecx
c001990c:	75 21                	jne    c001992f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001990e:	50                   	push   eax
c001990f:	53                   	push   ebx
c0019910:	55                   	push   ebp
c0019911:	56                   	push   esi
c0019912:	e8 ad fe ff ff       	call   c00197c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019917:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001991e:	e8 96 de fe ff       	call   c00077b9 <malloc>
c0019923:	89 c5                	mov    ebp,eax
c0019925:	89 04 24             	mov    DWORD PTR [esp],eax
c0019928:	e8 43 0d 00 00       	call   c001a670 <SATA::SATA()>
c001992d:	eb 24                	jmp    c0019953 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001992f:	83 f8 04             	cmp    eax,0x4
c0019932:	75 36                	jne    c001996a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019934:	51                   	push   ecx
c0019935:	53                   	push   ebx
c0019936:	55                   	push   ebp
c0019937:	56                   	push   esi
c0019938:	e8 87 fe ff ff       	call   c00197c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001993d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019944:	e8 70 de fe ff       	call   c00077b9 <malloc>
c0019949:	89 c5                	mov    ebp,eax
c001994b:	89 04 24             	mov    DWORD PTR [esp],eax
c001994e:	e8 79 10 00 00       	call   c001a9cc <SATAPI::SATAPI()>
c0019953:	58                   	pop    eax
c0019954:	5a                   	pop    edx
c0019955:	55                   	push   ebp
c0019956:	56                   	push   esi
c0019957:	e8 bc 1f ff ff       	call   c000b918 <Device::addChild(Device*)>
c001995c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001995f:	56                   	push   esi
c0019960:	6a 00                	push   0x0
c0019962:	53                   	push   ebx
c0019963:	55                   	push   ebp
c0019964:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019967:	83 c4 20             	add    esp,0x20
c001996a:	d1 ef                	shr    edi,1
c001996c:	43                   	inc    ebx
c001996d:	83 fb 20             	cmp    ebx,0x20
c0019970:	0f 85 72 ff ff ff    	jne    c00198e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019976:	83 c4 0c             	add    esp,0xc
c0019979:	5b                   	pop    ebx
c001997a:	5e                   	pop    esi
c001997b:	5f                   	pop    edi
c001997c:	5d                   	pop    ebp
c001997d:	c3                   	ret    

c001997e <SATABus::open(int, int, void*)>:
c001997e:	83 ec 14             	sub    esp,0x14
c0019981:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019985:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001998b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019991:	52                   	push   edx
c0019992:	50                   	push   eax
c0019993:	e8 3c ff ff ff       	call   c00198d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019998:	31 c0                	xor    eax,eax
c001999a:	83 c4 1c             	add    esp,0x1c
c001999d:	c3                   	ret    

c001999e <ATA::close(int, int, void*)>:
c001999e:	83 ec 0c             	sub    esp,0xc
c00199a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00199ab:	85 c0                	test   eax,eax
c00199ad:	74 0c                	je     c00199bb <ATA::close(int, int, void*)+0x1d>
c00199af:	83 ec 0c             	sub    esp,0xc
c00199b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00199b4:	50                   	push   eax
c00199b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00199b8:	83 c4 10             	add    esp,0x10
c00199bb:	31 c0                	xor    eax,eax
c00199bd:	83 c4 0c             	add    esp,0xc
c00199c0:	c3                   	ret    
c00199c1:	90                   	nop

c00199c2 <ATA::powerSaving(PowerSavingLevel)>:
c00199c2:	c3                   	ret    
c00199c3:	90                   	nop

c00199c4 <ATA::ATA()>:
c00199c4:	83 ec 0c             	sub    esp,0xc
c00199c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199cb:	83 ec 04             	sub    esp,0x4
c00199ce:	68 00 02 00 00       	push   0x200
c00199d3:	68 89 ee 01 c0       	push   0xc001ee89
c00199d8:	50                   	push   eax
c00199d9:	e8 08 23 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00199de:	83 c4 10             	add    esp,0x10
c00199e1:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c00199e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ea:	89 10                	mov    DWORD PTR [eax],edx
c00199ec:	90                   	nop
c00199ed:	83 c4 0c             	add    esp,0xc
c00199f0:	c3                   	ret    
c00199f1:	90                   	nop

c00199f2 <ATA::flush(bool)>:
c00199f2:	53                   	push   ebx
c00199f3:	83 ec 08             	sub    esp,0x8
c00199f6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00199fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199ff:	19 c0                	sbb    eax,eax
c0019a01:	83 e0 fd             	and    eax,0xfffffffd
c0019a04:	05 ea 00 00 00       	add    eax,0xea
c0019a09:	50                   	push   eax
c0019a0a:	6a 07                	push   0x7
c0019a0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a13:	50                   	push   eax
c0019a14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a1a:	e8 59 f1 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a1f:	83 c4 0c             	add    esp,0xc
c0019a22:	6a 00                	push   0x0
c0019a24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a2b:	50                   	push   eax
c0019a2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a32:	e8 df fb ff ff       	call   c0019616 <IDE::polling(unsigned char, unsigned int)>
c0019a37:	83 c4 18             	add    esp,0x18
c0019a3a:	5b                   	pop    ebx
c0019a3b:	c3                   	ret    

c0019a3c <ATA::readyForCommand()>:
c0019a3c:	56                   	push   esi
c0019a3d:	53                   	push   ebx
c0019a3e:	53                   	push   ebx
c0019a3f:	31 db                	xor    ebx,ebx
c0019a41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a45:	51                   	push   ecx
c0019a46:	6a 0c                	push   0xc
c0019a48:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a4f:	50                   	push   eax
c0019a50:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a56:	e8 dd f1 ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	a8 88                	test   al,0x88
c0019a60:	74 1f                	je     c0019a81 <ATA::readyForCommand()+0x45>
c0019a62:	43                   	inc    ebx
c0019a63:	83 fb 63             	cmp    ebx,0x63
c0019a66:	7e dd                	jle    c0019a45 <ATA::readyForCommand()+0x9>
c0019a68:	83 ec 0c             	sub    esp,0xc
c0019a6b:	6a 0a                	push   0xa
c0019a6d:	e8 da 9b ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c0019a72:	83 c4 10             	add    esp,0x10
c0019a75:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019a7b:	75 c8                	jne    c0019a45 <ATA::readyForCommand()+0x9>
c0019a7d:	31 c0                	xor    eax,eax
c0019a7f:	eb 02                	jmp    c0019a83 <ATA::readyForCommand()+0x47>
c0019a81:	b0 01                	mov    al,0x1
c0019a83:	5a                   	pop    edx
c0019a84:	5b                   	pop    ebx
c0019a85:	5e                   	pop    esi
c0019a86:	c3                   	ret    
c0019a87:	90                   	nop

c0019a88 <ATA::access(unsigned long long, int, void*, bool)>:
c0019a88:	55                   	push   ebp
c0019a89:	57                   	push   edi
c0019a8a:	56                   	push   esi
c0019a8b:	53                   	push   ebx
c0019a8c:	83 ec 2c             	sub    esp,0x2c
c0019a8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019a93:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019a97:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a9f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019aa3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019aa7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019aab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ab1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ab5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019abb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019abf:	c1 e0 06             	shl    eax,0x6
c0019ac2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019aca:	74 5d                	je     c0019b29 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019acc:	89 fa                	mov    edx,edi
c0019ace:	89 f0                	mov    eax,esi
c0019ad0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ad4:	c1 ea 1c             	shr    edx,0x1c
c0019ad7:	89 d1                	mov    ecx,edx
c0019ad9:	09 c1                	or     ecx,eax
c0019adb:	74 25                	je     c0019b02 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019add:	31 ed                	xor    ebp,ebp
c0019adf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019ae6:	89 fa                	mov    edx,edi
c0019ae8:	89 f0                	mov    eax,esi
c0019aea:	0f ad d0             	shrd   eax,edx,cl
c0019aed:	d3 ea                	shr    edx,cl
c0019aef:	f6 c1 20             	test   cl,0x20
c0019af2:	74 02                	je     c0019af6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019af4:	89 d0                	mov    eax,edx
c0019af6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019afa:	45                   	inc    ebp
c0019afb:	83 fd 06             	cmp    ebp,0x6
c0019afe:	75 df                	jne    c0019adf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019b00:	eb 76                	jmp    c0019b78 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019b02:	89 f0                	mov    eax,esi
c0019b04:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019b09:	89 fa                	mov    edx,edi
c0019b0b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b12:	0f ac d0 10          	shrd   eax,edx,0x10
c0019b16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019b1f:	c1 ee 18             	shr    esi,0x18
c0019b22:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019b27:	eb 56                	jmp    c0019b7f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b29:	6a 00                	push   0x0
c0019b2b:	6a 3f                	push   0x3f
c0019b2d:	57                   	push   edi
c0019b2e:	56                   	push   esi
c0019b2f:	e8 1c 22 00 00       	call   c001bd50 <__umoddi3>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	40                   	inc    eax
c0019b38:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019b3c:	6a 00                	push   0x0
c0019b3e:	68 f0 03 00 00       	push   0x3f0
c0019b43:	57                   	push   edi
c0019b44:	56                   	push   esi
c0019b45:	e8 06 21 00 00       	call   c001bc50 <__udivdi3>
c0019b4a:	83 c4 10             	add    esp,0x10
c0019b4d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019b52:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b59:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b5e:	6a 00                	push   0x0
c0019b60:	6a 3f                	push   0x3f
c0019b62:	57                   	push   edi
c0019b63:	56                   	push   esi
c0019b64:	e8 e7 20 00 00       	call   c001bc50 <__udivdi3>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	89 c6                	mov    esi,eax
c0019b6e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019b73:	83 e6 0f             	and    esi,0xf
c0019b76:	eb 07                	jmp    c0019b7f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b78:	31 f6                	xor    esi,esi
c0019b7a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019b7f:	bf 01 00 00 00       	mov    edi,0x1
c0019b84:	50                   	push   eax
c0019b85:	6a 00                	push   0x0
c0019b87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b8e:	50                   	push   eax
c0019b8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b93:	e8 ee f1 ff ff       	call   c0018d86 <IDE::enableIRQs(unsigned char, bool)>
c0019b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b9b:	e8 9c fe ff ff       	call   c0019a3c <ATA::readyForCommand()>
c0019ba0:	83 c4 10             	add    esp,0x10
c0019ba3:	84 c0                	test   al,al
c0019ba5:	0f 84 4e 02 00 00    	je     c0019df9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019bab:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019bb1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019bb7:	c1 e0 04             	shl    eax,0x4
c0019bba:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019bc1:	09 c6                	or     esi,eax
c0019bc3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019bc8:	75 05                	jne    c0019bcf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019bca:	83 ce a0             	or     esi,0xffffffa0
c0019bcd:	eb 03                	jmp    c0019bd2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019bcf:	83 ce e0             	or     esi,0xffffffe0
c0019bd2:	89 f0                	mov    eax,esi
c0019bd4:	0f b6 f0             	movzx  esi,al
c0019bd7:	56                   	push   esi
c0019bd8:	6a 06                	push   0x6
c0019bda:	51                   	push   ecx
c0019bdb:	52                   	push   edx
c0019bdc:	e8 97 ef ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	6a 00                	push   0x0
c0019be6:	6a 01                	push   0x1
c0019be8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bef:	50                   	push   eax
c0019bf0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bf6:	e8 7d ef ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c03:	75 6e                	jne    c0019c73 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019c05:	6a 00                	push   0x0
c0019c07:	6a 08                	push   0x8
c0019c09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c10:	50                   	push   eax
c0019c11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c17:	e8 5c ef ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c1c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019c21:	50                   	push   eax
c0019c22:	6a 09                	push   0x9
c0019c24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c2b:	50                   	push   eax
c0019c2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c32:	e8 41 ef ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c37:	83 c4 20             	add    esp,0x20
c0019c3a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019c3f:	50                   	push   eax
c0019c40:	6a 0a                	push   0xa
c0019c42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c49:	50                   	push   eax
c0019c4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c50:	e8 23 ef ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c55:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019c5a:	50                   	push   eax
c0019c5b:	6a 0b                	push   0xb
c0019c5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c64:	50                   	push   eax
c0019c65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c6b:	e8 08 ef ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c70:	83 c4 20             	add    esp,0x20
c0019c73:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019c78:	50                   	push   eax
c0019c79:	6a 02                	push   0x2
c0019c7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c82:	50                   	push   eax
c0019c83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c89:	e8 ea ee ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c8e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019c93:	50                   	push   eax
c0019c94:	6a 03                	push   0x3
c0019c96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c9d:	50                   	push   eax
c0019c9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca4:	e8 cf ee ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ca9:	83 c4 20             	add    esp,0x20
c0019cac:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019cb1:	50                   	push   eax
c0019cb2:	6a 04                	push   0x4
c0019cb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cbb:	50                   	push   eax
c0019cbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cc2:	e8 b1 ee ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ccc:	50                   	push   eax
c0019ccd:	6a 05                	push   0x5
c0019ccf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cd6:	50                   	push   eax
c0019cd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cdd:	e8 96 ee ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ce2:	83 c4 20             	add    esp,0x20
c0019ce5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019cea:	0f 94 c0             	sete   al
c0019ced:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019cf2:	74 09                	je     c0019cfd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019cf4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019cfb:	eb 07                	jmp    c0019d04 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019cfd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019d04:	0f b6 c0             	movzx  eax,al
c0019d07:	50                   	push   eax
c0019d08:	6a 07                	push   0x7
c0019d0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d11:	50                   	push   eax
c0019d12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d18:	e8 5b ee ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d1d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019d21:	83 c4 10             	add    esp,0x10
c0019d24:	85 f6                	test   esi,esi
c0019d26:	0f 84 ae 00 00 00    	je     c0019dda <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019d2c:	50                   	push   eax
c0019d2d:	6a 01                	push   0x1
c0019d2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d36:	50                   	push   eax
c0019d37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d3d:	e8 d4 f8 ff ff       	call   c0019616 <IDE::polling(unsigned char, unsigned int)>
c0019d42:	83 c4 10             	add    esp,0x10
c0019d45:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019d4b:	84 c0                	test   al,al
c0019d4d:	74 20                	je     c0019d6f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019d4f:	0f b6 f8             	movzx  edi,al
c0019d52:	0f b6 d2             	movzx  edx,dl
c0019d55:	57                   	push   edi
c0019d56:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019d5d:	50                   	push   eax
c0019d5e:	52                   	push   edx
c0019d5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d65:	e8 fc f7 ff ff       	call   c0019566 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019d6a:	e9 87 00 00 00       	jmp    c0019df6 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019d6f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019d74:	74 33                	je     c0019da9 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019d76:	31 ed                	xor    ebp,ebp
c0019d78:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019d7c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019d80:	50                   	push   eax
c0019d81:	50                   	push   eax
c0019d82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d89:	50                   	push   eax
c0019d8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d90:	e8 d1 ed ff ff       	call   c0018b66 <IDE::getBase(unsigned char)>
c0019d95:	89 c2                	mov    edx,eax
c0019d97:	89 f8                	mov    eax,edi
c0019d99:	66 ef                	out    dx,ax
c0019d9b:	45                   	inc    ebp
c0019d9c:	83 c4 10             	add    esp,0x10
c0019d9f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019da5:	75 d1                	jne    c0019d78 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019da7:	eb 23                	jmp    c0019dcc <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019da9:	0f b6 d2             	movzx  edx,dl
c0019dac:	51                   	push   ecx
c0019dad:	51                   	push   ecx
c0019dae:	52                   	push   edx
c0019daf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019db5:	e8 ac ed ff ff       	call   c0018b66 <IDE::getBase(unsigned char)>
c0019dba:	b9 00 01 00 00       	mov    ecx,0x100
c0019dbf:	89 c2                	mov    edx,eax
c0019dc1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019dc5:	fc                   	cld    
c0019dc6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019dc9:	83 c4 10             	add    esp,0x10
c0019dcc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019dd4:	4e                   	dec    esi
c0019dd5:	e9 4a ff ff ff       	jmp    c0019d24 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019dda:	31 ff                	xor    edi,edi
c0019ddc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019de1:	74 16                	je     c0019df9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019de3:	50                   	push   eax
c0019de4:	50                   	push   eax
c0019de5:	31 c0                	xor    eax,eax
c0019de7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019dec:	0f 94 c0             	sete   al
c0019def:	50                   	push   eax
c0019df0:	53                   	push   ebx
c0019df1:	e8 fc fb ff ff       	call   c00199f2 <ATA::flush(bool)>
c0019df6:	83 c4 10             	add    esp,0x10
c0019df9:	83 c4 2c             	add    esp,0x2c
c0019dfc:	89 f8                	mov    eax,edi
c0019dfe:	5b                   	pop    ebx
c0019dff:	5e                   	pop    esi
c0019e00:	5f                   	pop    edi
c0019e01:	5d                   	pop    ebp
c0019e02:	c3                   	ret    
c0019e03:	90                   	nop

c0019e04 <ATA::read(unsigned long long, int, void*)>:
c0019e04:	57                   	push   edi
c0019e05:	b8 04 00 00 00       	mov    eax,0x4
c0019e0a:	56                   	push   esi
c0019e0b:	53                   	push   ebx
c0019e0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e14:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e1f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e25:	77 25                	ja     c0019e4c <ATA::read(unsigned long long, int, void*)+0x48>
c0019e27:	b8 06 00 00 00       	mov    eax,0x6
c0019e2c:	85 f6                	test   esi,esi
c0019e2e:	74 1c                	je     c0019e4c <ATA::read(unsigned long long, int, void*)+0x48>
c0019e30:	50                   	push   eax
c0019e31:	50                   	push   eax
c0019e32:	6a 00                	push   0x0
c0019e34:	56                   	push   esi
c0019e35:	52                   	push   edx
c0019e36:	53                   	push   ebx
c0019e37:	51                   	push   ecx
c0019e38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e3c:	e8 47 fc ff ff       	call   c0019a88 <ATA::access(unsigned long long, int, void*, bool)>
c0019e41:	83 c4 20             	add    esp,0x20
c0019e44:	85 c0                	test   eax,eax
c0019e46:	0f 95 c0             	setne  al
c0019e49:	0f b6 c0             	movzx  eax,al
c0019e4c:	5b                   	pop    ebx
c0019e4d:	5e                   	pop    esi
c0019e4e:	5f                   	pop    edi
c0019e4f:	c3                   	ret    

c0019e50 <ATA::write(unsigned long long, int, void*)>:
c0019e50:	57                   	push   edi
c0019e51:	b8 04 00 00 00       	mov    eax,0x4
c0019e56:	56                   	push   esi
c0019e57:	53                   	push   ebx
c0019e58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e60:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e71:	77 25                	ja     c0019e98 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e73:	b8 06 00 00 00       	mov    eax,0x6
c0019e78:	85 f6                	test   esi,esi
c0019e7a:	74 1c                	je     c0019e98 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e7c:	50                   	push   eax
c0019e7d:	50                   	push   eax
c0019e7e:	6a 01                	push   0x1
c0019e80:	56                   	push   esi
c0019e81:	52                   	push   edx
c0019e82:	53                   	push   ebx
c0019e83:	51                   	push   ecx
c0019e84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e88:	e8 fb fb ff ff       	call   c0019a88 <ATA::access(unsigned long long, int, void*, bool)>
c0019e8d:	83 c4 20             	add    esp,0x20
c0019e90:	85 c0                	test   eax,eax
c0019e92:	0f 95 c0             	setne  al
c0019e95:	0f b6 c0             	movzx  eax,al
c0019e98:	5b                   	pop    ebx
c0019e99:	5e                   	pop    esi
c0019e9a:	5f                   	pop    edi
c0019e9b:	c3                   	ret    

c0019e9c <ATA::detectCHS()>:
c0019e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ea0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019ea6:	c1 e0 06             	shl    eax,0x6
c0019ea9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019eaf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019eb9:	c7 44 24 04 e0 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ede0
c0019ec1:	e9 75 62 ff ff       	jmp    c001013b <KePanic(char const*)>

c0019ec6 <ATA::open(int, int, void*)>:
c0019ec6:	53                   	push   ebx
c0019ec7:	83 ec 08             	sub    esp,0x8
c0019eca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ece:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ed2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ed6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019edc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019ee2:	c1 e0 06             	shl    eax,0x6
c0019ee5:	01 d0                	add    eax,edx
c0019ee7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019eee:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019ef4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019efb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f05:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019f0b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f12:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019f19:	75 0c                	jne    c0019f27 <ATA::open(int, int, void*)+0x61>
c0019f1b:	83 ec 0c             	sub    esp,0xc
c0019f1e:	53                   	push   ebx
c0019f1f:	e8 78 ff ff ff       	call   c0019e9c <ATA::detectCHS()>
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019f2d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f33:	c1 e0 06             	shl    eax,0x6
c0019f36:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019f3d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f47:	d1 e8                	shr    eax,1
c0019f49:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019f4f:	6a 04                	push   0x4
c0019f51:	6a 0c                	push   0xc
c0019f53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f5a:	50                   	push   eax
c0019f5b:	52                   	push   edx
c0019f5c:	e8 17 ec ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f61:	90                   	nop
c0019f62:	90                   	nop
c0019f63:	6a 00                	push   0x0
c0019f65:	6a 0c                	push   0xc
c0019f67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f6e:	50                   	push   eax
c0019f6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f75:	e8 fe eb ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f7a:	83 c4 14             	add    esp,0x14
c0019f7d:	53                   	push   ebx
c0019f7e:	e8 cb 1d ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c0019f83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f86:	e8 3b 2e ff ff       	call   c000cdc6 <createPartitionsForDisk(PhysicalDisk*)>
c0019f8b:	31 c0                	xor    eax,eax
c0019f8d:	83 c4 18             	add    esp,0x18
c0019f90:	5b                   	pop    ebx
c0019f91:	c3                   	ret    

c0019f92 <ATAPI::write(unsigned long long, int, void*)>:
c0019f92:	b8 03 00 00 00       	mov    eax,0x3
c0019f97:	c3                   	ret    

c0019f98 <ATAPI::close(int, int, void*)>:
c0019f98:	83 ec 0c             	sub    esp,0xc
c0019f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019fa5:	85 c0                	test   eax,eax
c0019fa7:	74 0c                	je     c0019fb5 <ATAPI::close(int, int, void*)+0x1d>
c0019fa9:	83 ec 0c             	sub    esp,0xc
c0019fac:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fae:	50                   	push   eax
c0019faf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019fb2:	83 c4 10             	add    esp,0x10
c0019fb5:	31 c0                	xor    eax,eax
c0019fb7:	83 c4 0c             	add    esp,0xc
c0019fba:	c3                   	ret    
c0019fbb:	90                   	nop

c0019fbc <ATAPI::ATAPI()>:
c0019fbc:	83 ec 0c             	sub    esp,0xc
c0019fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fc3:	83 ec 04             	sub    esp,0x4
c0019fc6:	68 00 08 00 00       	push   0x800
c0019fcb:	68 29 ef 01 c0       	push   0xc001ef29
c0019fd0:	50                   	push   eax
c0019fd1:	e8 10 1d ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019fd6:	83 c4 10             	add    esp,0x10
c0019fd9:	ba 44 ee 01 c0       	mov    edx,0xc001ee44
c0019fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe2:	89 10                	mov    DWORD PTR [eax],edx
c0019fe4:	90                   	nop
c0019fe5:	83 c4 0c             	add    esp,0xc
c0019fe8:	c3                   	ret    
c0019fe9:	90                   	nop

c0019fea <ATAPI::readyForCommand()>:
c0019fea:	56                   	push   esi
c0019feb:	53                   	push   ebx
c0019fec:	53                   	push   ebx
c0019fed:	31 db                	xor    ebx,ebx
c0019fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ff3:	51                   	push   ecx
c0019ff4:	6a 0c                	push   0xc
c0019ff6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019ffd:	50                   	push   eax
c0019ffe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a004:	e8 2f ec ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001a009:	83 c4 10             	add    esp,0x10
c001a00c:	a8 88                	test   al,0x88
c001a00e:	74 25                	je     c001a035 <ATAPI::readyForCommand()+0x4b>
c001a010:	43                   	inc    ebx
c001a011:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a017:	7e da                	jle    c0019ff3 <ATAPI::readyForCommand()+0x9>
c001a019:	83 ec 0c             	sub    esp,0xc
c001a01c:	68 5e 01 00 00       	push   0x15e
c001a021:	e8 26 96 ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c001a026:	83 c4 10             	add    esp,0x10
c001a029:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a02f:	75 c2                	jne    c0019ff3 <ATAPI::readyForCommand()+0x9>
c001a031:	31 c0                	xor    eax,eax
c001a033:	eb 02                	jmp    c001a037 <ATAPI::readyForCommand()+0x4d>
c001a035:	b0 01                	mov    al,0x1
c001a037:	5a                   	pop    edx
c001a038:	5b                   	pop    ebx
c001a039:	5e                   	pop    esi
c001a03a:	c3                   	ret    
c001a03b:	90                   	nop

c001a03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a03c:	55                   	push   ebp
c001a03d:	57                   	push   edi
c001a03e:	56                   	push   esi
c001a03f:	53                   	push   ebx
c001a040:	83 ec 20             	sub    esp,0x20
c001a043:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a047:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a04b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a04f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a053:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a057:	6a 01                	push   0x1
c001a059:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a060:	50                   	push   eax
c001a061:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a067:	e8 1a ed ff ff       	call   c0018d86 <IDE::enableIRQs(unsigned char, bool)>
c001a06c:	5e                   	pop    esi
c001a06d:	58                   	pop    eax
c001a06e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a075:	50                   	push   eax
c001a076:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a07c:	e8 d1 ea ff ff       	call   c0018b52 <IDE::prepareInterrupt(unsigned char)>
c001a081:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a084:	e8 61 ff ff ff       	call   c0019fea <ATAPI::readyForCommand()>
c001a089:	83 c4 10             	add    esp,0x10
c001a08c:	84 c0                	test   al,al
c001a08e:	75 0a                	jne    c001a09a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a090:	bb 01 00 00 00       	mov    ebx,0x1
c001a095:	e9 57 02 00 00       	jmp    c001a2f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a09a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a0a0:	c1 e0 04             	shl    eax,0x4
c001a0a3:	0f b6 c0             	movzx  eax,al
c001a0a6:	50                   	push   eax
c001a0a7:	6a 06                	push   0x6
c001a0a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0b0:	50                   	push   eax
c001a0b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0b7:	e8 bc ea ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0bc:	6a 00                	push   0x0
c001a0be:	6a 01                	push   0x1
c001a0c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0c7:	50                   	push   eax
c001a0c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0ce:	e8 a5 ea ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0d3:	83 c4 20             	add    esp,0x20
c001a0d6:	0f b6 c3             	movzx  eax,bl
c001a0d9:	0f b6 df             	movzx  ebx,bh
c001a0dc:	50                   	push   eax
c001a0dd:	6a 04                	push   0x4
c001a0df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0e6:	50                   	push   eax
c001a0e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0ed:	e8 86 ea ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f2:	53                   	push   ebx
c001a0f3:	6a 05                	push   0x5
c001a0f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0fc:	50                   	push   eax
c001a0fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a103:	e8 70 ea ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a108:	83 c4 20             	add    esp,0x20
c001a10b:	68 a0 00 00 00       	push   0xa0
c001a110:	6a 07                	push   0x7
c001a112:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a119:	50                   	push   eax
c001a11a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a120:	e8 53 ea ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a125:	83 c4 0c             	add    esp,0xc
c001a128:	6a 01                	push   0x1
c001a12a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a131:	50                   	push   eax
c001a132:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a138:	e8 d9 f4 ff ff       	call   c0019616 <IDE::polling(unsigned char, unsigned int)>
c001a13d:	83 c4 10             	add    esp,0x10
c001a140:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a146:	84 c0                	test   al,al
c001a148:	74 23                	je     c001a16d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a14a:	0f b6 d8             	movzx  ebx,al
c001a14d:	0f b6 d2             	movzx  edx,dl
c001a150:	53                   	push   ebx
c001a151:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a158:	50                   	push   eax
c001a159:	52                   	push   edx
c001a15a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a160:	e8 01 f4 ff ff       	call   c0019566 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	e9 84 01 00 00       	jmp    c001a2f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a16d:	0f b6 d2             	movzx  edx,dl
c001a170:	53                   	push   ebx
c001a171:	53                   	push   ebx
c001a172:	52                   	push   edx
c001a173:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a179:	e8 e8 e9 ff ff       	call   c0018b66 <IDE::getBase(unsigned char)>
c001a17e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a182:	b9 06 00 00 00       	mov    ecx,0x6
c001a187:	89 c2                	mov    edx,eax
c001a189:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a18c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a190:	83 c4 10             	add    esp,0x10
c001a193:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a199:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1a0:	85 db                	test   ebx,ebx
c001a1a2:	0f 84 ec 00 00 00    	je     c001a294 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a1a8:	51                   	push   ecx
c001a1a9:	51                   	push   ecx
c001a1aa:	52                   	push   edx
c001a1ab:	50                   	push   eax
c001a1ac:	e8 35 eb ff ff       	call   c0018ce6 <IDE::waitInterrupt(unsigned char)>
c001a1b1:	83 c4 10             	add    esp,0x10
c001a1b4:	84 c0                	test   al,al
c001a1b6:	0f 84 d4 fe ff ff    	je     c001a090 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a1bc:	56                   	push   esi
c001a1bd:	56                   	push   esi
c001a1be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1c5:	50                   	push   eax
c001a1c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1cc:	e8 81 e9 ff ff       	call   c0018b52 <IDE::prepareInterrupt(unsigned char)>
c001a1d1:	83 c4 0c             	add    esp,0xc
c001a1d4:	6a 04                	push   0x4
c001a1d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1dd:	50                   	push   eax
c001a1de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1e4:	e8 4f ea ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001a1e9:	83 c4 0c             	add    esp,0xc
c001a1ec:	89 c6                	mov    esi,eax
c001a1ee:	6a 05                	push   0x5
c001a1f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1f7:	50                   	push   eax
c001a1f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1fe:	e8 35 ea ff ff       	call   c0018c38 <IDE::read(unsigned char, unsigned char)>
c001a203:	89 f1                	mov    ecx,esi
c001a205:	0f b6 c0             	movzx  eax,al
c001a208:	0f b6 f1             	movzx  esi,cl
c001a20b:	c1 e0 08             	shl    eax,0x8
c001a20e:	09 c6                	or     esi,eax
c001a210:	d1 fe                	sar    esi,1
c001a212:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a21e:	74 41                	je     c001a261 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a220:	31 c9                	xor    ecx,ecx
c001a222:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a228:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a22f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a233:	75 0a                	jne    c001a23f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a235:	01 c9                	add    ecx,ecx
c001a237:	01 cd                	add    ebp,ecx
c001a239:	4b                   	dec    ebx
c001a23a:	e9 54 ff ff ff       	jmp    c001a193 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a23f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a244:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a248:	51                   	push   ecx
c001a249:	51                   	push   ecx
c001a24a:	52                   	push   edx
c001a24b:	50                   	push   eax
c001a24c:	e8 15 e9 ff ff       	call   c0018b66 <IDE::getBase(unsigned char)>
c001a251:	89 c2                	mov    edx,eax
c001a253:	89 f0                	mov    eax,esi
c001a255:	66 ef                	out    dx,ax
c001a257:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a25b:	83 c4 10             	add    esp,0x10
c001a25e:	41                   	inc    ecx
c001a25f:	eb c1                	jmp    c001a222 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a261:	31 f6                	xor    esi,esi
c001a263:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a269:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a270:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a274:	75 06                	jne    c001a27c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a276:	01 f6                	add    esi,esi
c001a278:	01 f5                	add    ebp,esi
c001a27a:	eb bd                	jmp    c001a239 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a27c:	51                   	push   ecx
c001a27d:	51                   	push   ecx
c001a27e:	52                   	push   edx
c001a27f:	50                   	push   eax
c001a280:	e8 e1 e8 ff ff       	call   c0018b66 <IDE::getBase(unsigned char)>
c001a285:	89 c2                	mov    edx,eax
c001a287:	66 ed                	in     ax,dx
c001a289:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a28e:	83 c4 10             	add    esp,0x10
c001a291:	46                   	inc    esi
c001a292:	eb cf                	jmp    c001a263 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a294:	51                   	push   ecx
c001a295:	51                   	push   ecx
c001a296:	52                   	push   edx
c001a297:	50                   	push   eax
c001a298:	e8 49 ea ff ff       	call   c0018ce6 <IDE::waitInterrupt(unsigned char)>
c001a29d:	83 c4 10             	add    esp,0x10
c001a2a0:	84 c0                	test   al,al
c001a2a2:	0f 84 e8 fd ff ff    	je     c001a090 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a2a8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a2ad:	52                   	push   edx
c001a2ae:	52                   	push   edx
c001a2af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2b6:	50                   	push   eax
c001a2b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2bd:	e8 90 e8 ff ff       	call   c0018b52 <IDE::prepareInterrupt(unsigned char)>
c001a2c2:	83 c4 10             	add    esp,0x10
c001a2c5:	50                   	push   eax
c001a2c6:	50                   	push   eax
c001a2c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2ce:	50                   	push   eax
c001a2cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2d5:	e8 8c e8 ff ff       	call   c0018b66 <IDE::getBase(unsigned char)>
c001a2da:	8d 50 07             	lea    edx,[eax+0x7]
c001a2dd:	ec                   	in     al,dx
c001a2de:	83 c4 10             	add    esp,0x10
c001a2e1:	a8 88                	test   al,0x88
c001a2e3:	74 0a                	je     c001a2ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a2e5:	4b                   	dec    ebx
c001a2e6:	75 dd                	jne    c001a2c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a2e8:	bb 02 00 00 00       	mov    ebx,0x2
c001a2ed:	eb 02                	jmp    c001a2f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a2ef:	31 db                	xor    ebx,ebx
c001a2f1:	83 c4 1c             	add    esp,0x1c
c001a2f4:	89 d8                	mov    eax,ebx
c001a2f6:	5b                   	pop    ebx
c001a2f7:	5e                   	pop    esi
c001a2f8:	5f                   	pop    edi
c001a2f9:	5d                   	pop    ebp
c001a2fa:	c3                   	ret    
c001a2fb:	90                   	nop

c001a2fc <ATAPI::diskRemoved()>:
c001a2fc:	53                   	push   ebx
c001a2fd:	83 ec 14             	sub    esp,0x14
c001a300:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a304:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a30b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a311:	e8 30 28 ff ff       	call   c000cb46 <LogicalDisk::unmount()>
c001a316:	58                   	pop    eax
c001a317:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a31d:	e8 6a 31 ff ff       	call   c000d48c <VCache::writeWriteBuffer()>
c001a322:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a328:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a32c:	83 c4 18             	add    esp,0x18
c001a32f:	5b                   	pop    ebx
c001a330:	e9 47 31 ff ff       	jmp    c000d47c <VCache::invalidateReadBuffer()>
c001a335:	90                   	nop

c001a336 <ATAPI::eject()>:
c001a336:	57                   	push   edi
c001a337:	b9 03 00 00 00       	mov    ecx,0x3
c001a33c:	53                   	push   ebx
c001a33d:	83 ec 14             	sub    esp,0x14
c001a340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a344:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a348:	fc                   	cld    
c001a349:	31 c0                	xor    eax,eax
c001a34b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a34d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a352:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a357:	50                   	push   eax
c001a358:	50                   	push   eax
c001a359:	6a 00                	push   0x0
c001a35b:	6a 00                	push   0x0
c001a35d:	6a 00                	push   0x0
c001a35f:	6a 02                	push   0x2
c001a361:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a365:	50                   	push   eax
c001a366:	53                   	push   ebx
c001a367:	e8 d0 fc ff ff       	call   c001a03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a36c:	83 c4 14             	add    esp,0x14
c001a36f:	53                   	push   ebx
c001a370:	e8 87 ff ff ff       	call   c001a2fc <ATAPI::diskRemoved()>
c001a375:	83 c4 24             	add    esp,0x24
c001a378:	31 c0                	xor    eax,eax
c001a37a:	5b                   	pop    ebx
c001a37b:	5f                   	pop    edi
c001a37c:	c3                   	ret    
c001a37d:	90                   	nop

c001a37e <ATAPI::diskInserted()>:
c001a37e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a382:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a389:	c3                   	ret    

c001a38a <ATAPI::detectMedia()>:
c001a38a:	56                   	push   esi
c001a38b:	53                   	push   ebx
c001a38c:	83 ec 28             	sub    esp,0x28
c001a38f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a393:	6a 0c                	push   0xc
c001a395:	6a 00                	push   0x0
c001a397:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a39b:	56                   	push   esi
c001a39c:	e8 2f 61 fe ff       	call   c00004d0 <memset>
c001a3a1:	58                   	pop    eax
c001a3a2:	5a                   	pop    edx
c001a3a3:	6a 00                	push   0x0
c001a3a5:	6a 00                	push   0x0
c001a3a7:	6a 00                	push   0x0
c001a3a9:	6a 00                	push   0x0
c001a3ab:	56                   	push   esi
c001a3ac:	53                   	push   ebx
c001a3ad:	e8 8a fc ff ff       	call   c001a03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3b2:	83 c4 1c             	add    esp,0x1c
c001a3b5:	6a 0c                	push   0xc
c001a3b7:	6a 00                	push   0x0
c001a3b9:	56                   	push   esi
c001a3ba:	e8 11 61 fe ff       	call   c00004d0 <memset>
c001a3bf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a3c4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a3c9:	59                   	pop    ecx
c001a3ca:	58                   	pop    eax
c001a3cb:	6a 01                	push   0x1
c001a3cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a3d1:	50                   	push   eax
c001a3d2:	6a 00                	push   0x0
c001a3d4:	6a 12                	push   0x12
c001a3d6:	56                   	push   esi
c001a3d7:	53                   	push   ebx
c001a3d8:	e8 5f fc ff ff       	call   c001a03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3dd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a3e1:	83 c4 20             	add    esp,0x20
c001a3e4:	83 e0 7f             	and    eax,0x7f
c001a3e7:	3c 70                	cmp    al,0x70
c001a3e9:	74 15                	je     c001a400 <ATAPI::detectMedia()+0x76>
c001a3eb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3f2:	75 0c                	jne    c001a400 <ATAPI::detectMedia()+0x76>
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	53                   	push   ebx
c001a3f8:	e8 81 ff ff ff       	call   c001a37e <ATAPI::diskInserted()>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a404:	83 e0 0f             	and    eax,0xf
c001a407:	3c 02                	cmp    al,0x2
c001a409:	75 1b                	jne    c001a426 <ATAPI::detectMedia()+0x9c>
c001a40b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a410:	75 2d                	jne    c001a43f <ATAPI::detectMedia()+0xb5>
c001a412:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a419:	74 24                	je     c001a43f <ATAPI::detectMedia()+0xb5>
c001a41b:	83 ec 0c             	sub    esp,0xc
c001a41e:	53                   	push   ebx
c001a41f:	e8 d8 fe ff ff       	call   c001a2fc <ATAPI::diskRemoved()>
c001a424:	eb 16                	jmp    c001a43c <ATAPI::detectMedia()+0xb2>
c001a426:	84 c0                	test   al,al
c001a428:	75 15                	jne    c001a43f <ATAPI::detectMedia()+0xb5>
c001a42a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a431:	75 0c                	jne    c001a43f <ATAPI::detectMedia()+0xb5>
c001a433:	83 ec 0c             	sub    esp,0xc
c001a436:	53                   	push   ebx
c001a437:	e8 42 ff ff ff       	call   c001a37e <ATAPI::diskInserted()>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	83 c4 24             	add    esp,0x24
c001a442:	5b                   	pop    ebx
c001a443:	5e                   	pop    esi
c001a444:	c3                   	ret    
c001a445:	90                   	nop

c001a446 <ATAPI::open(int, int, void*)>:
c001a446:	56                   	push   esi
c001a447:	53                   	push   ebx
c001a448:	50                   	push   eax
c001a449:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a44d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a455:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a45b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a461:	c1 e0 06             	shl    eax,0x6
c001a464:	01 d0                	add    eax,edx
c001a466:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a46d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a473:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a47a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a484:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a48a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a491:	6a 04                	push   0x4
c001a493:	6a 0c                	push   0xc
c001a495:	51                   	push   ecx
c001a496:	52                   	push   edx
c001a497:	e8 dc e6 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a49c:	90                   	nop
c001a49d:	90                   	nop
c001a49e:	6a 00                	push   0x0
c001a4a0:	6a 0c                	push   0xc
c001a4a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4a9:	50                   	push   eax
c001a4aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4b0:	e8 c3 e6 ff ff       	call   c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4b5:	83 c4 14             	add    esp,0x14
c001a4b8:	68 74 01 00 00       	push   0x174
c001a4bd:	e8 f7 d2 fe ff       	call   c00077b9 <malloc>
c001a4c2:	83 c4 0c             	add    esp,0xc
c001a4c5:	89 c6                	mov    esi,eax
c001a4c7:	6a 00                	push   0x0
c001a4c9:	68 ff ff ff 7f       	push   0x7fffffff
c001a4ce:	6a 00                	push   0x0
c001a4d0:	6a 00                	push   0x0
c001a4d2:	53                   	push   ebx
c001a4d3:	68 e0 ef 01 c0       	push   0xc001efe0
c001a4d8:	50                   	push   eax
c001a4d9:	e8 b4 24 ff ff       	call   c000c992 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a4de:	83 c4 14             	add    esp,0x14
c001a4e1:	56                   	push   esi
c001a4e2:	e8 61 25 ff ff       	call   c000ca48 <LogicalDisk::assignDriveLetter()>
c001a4e7:	5a                   	pop    edx
c001a4e8:	0f be c0             	movsx  eax,al
c001a4eb:	59                   	pop    ecx
c001a4ec:	50                   	push   eax
c001a4ed:	68 2c ee 01 c0       	push   0xc001ee2c
c001a4f2:	e8 e1 ff fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001a4f7:	58                   	pop    eax
c001a4f8:	5a                   	pop    edx
c001a4f9:	56                   	push   esi
c001a4fa:	53                   	push   ebx
c001a4fb:	e8 18 14 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001a500:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a509:	e8 40 18 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a50e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a518:	e8 6d fe ff ff       	call   c001a38a <ATAPI::detectMedia()>
c001a51d:	83 c4 14             	add    esp,0x14
c001a520:	31 c0                	xor    eax,eax
c001a522:	5b                   	pop    ebx
c001a523:	5e                   	pop    esi
c001a524:	c3                   	ret    
c001a525:	90                   	nop

c001a526 <ATAPI::read(unsigned long long, int, void*)>:
c001a526:	55                   	push   ebp
c001a527:	57                   	push   edi
c001a528:	56                   	push   esi
c001a529:	53                   	push   ebx
c001a52a:	83 ec 1c             	sub    esp,0x1c
c001a52d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a531:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a535:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a539:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a540:	74 3c                	je     c001a57e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a542:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a546:	b9 03 00 00 00       	mov    ecx,0x3
c001a54b:	fc                   	cld    
c001a54c:	31 c0                	xor    eax,eax
c001a54e:	0f ce                	bswap  esi
c001a550:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a552:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a557:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a55b:	89 e8                	mov    eax,ebp
c001a55d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a561:	50                   	push   eax
c001a562:	50                   	push   eax
c001a563:	55                   	push   ebp
c001a564:	c1 e5 0b             	shl    ebp,0xb
c001a567:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a56b:	6a 00                	push   0x0
c001a56d:	55                   	push   ebp
c001a56e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a572:	50                   	push   eax
c001a573:	53                   	push   ebx
c001a574:	e8 c3 fa ff ff       	call   c001a03c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a579:	83 c4 20             	add    esp,0x20
c001a57c:	eb 1a                	jmp    c001a598 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a57e:	83 ec 0c             	sub    esp,0xc
c001a581:	53                   	push   ebx
c001a582:	e8 03 fe ff ff       	call   c001a38a <ATAPI::detectMedia()>
c001a587:	83 c4 10             	add    esp,0x10
c001a58a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a591:	75 af                	jne    c001a542 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a593:	b8 02 00 00 00       	mov    eax,0x2
c001a598:	83 c4 1c             	add    esp,0x1c
c001a59b:	5b                   	pop    ebx
c001a59c:	5e                   	pop    esi
c001a59d:	5f                   	pop    edi
c001a59e:	5d                   	pop    ebp
c001a59f:	c3                   	ret    

c001a5a0 <SATA::close(int, int, void*)>:
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a5ad:	85 c0                	test   eax,eax
c001a5af:	74 0c                	je     c001a5bd <SATA::close(int, int, void*)+0x1d>
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	8b 10                	mov    edx,DWORD PTR [eax]
c001a5b6:	50                   	push   eax
c001a5b7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a5ba:	83 c4 10             	add    esp,0x10
c001a5bd:	31 c0                	xor    eax,eax
c001a5bf:	83 c4 0c             	add    esp,0xc
c001a5c2:	c3                   	ret    
c001a5c3:	90                   	nop

c001a5c4 <SATA::powerSaving(PowerSavingLevel)>:
c001a5c4:	c3                   	ret    
c001a5c5:	90                   	nop

c001a5c6 <SATA::open(int, int, void*)>:
c001a5c6:	56                   	push   esi
c001a5c7:	53                   	push   ebx
c001a5c8:	50                   	push   eax
c001a5c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a5cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5d1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a5db:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a5e1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a5eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a5f9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a5ff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a606:	e8 8a d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a60b:	89 c6                	mov    esi,eax
c001a60d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a613:	81 c6 00 10 00 00    	add    esi,0x1000
c001a619:	e8 77 d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a61e:	39 c6                	cmp    esi,eax
c001a620:	74 10                	je     c001a632 <SATA::open(int, int, void*)+0x6c>
c001a622:	83 ec 0c             	sub    esp,0xc
c001a625:	68 74 ee 01 c0       	push   0xc001ee74
c001a62a:	e8 0c 5b ff ff       	call   c001013b <KePanic(char const*)>
c001a62f:	83 c4 10             	add    esp,0x10
c001a632:	83 ec 0c             	sub    esp,0xc
c001a635:	6a 02                	push   0x2
c001a637:	e8 49 ec fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001a63c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a642:	6a 03                	push   0x3
c001a644:	50                   	push   eax
c001a645:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a64b:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c001a651:	e8 c4 f2 fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001a656:	83 c4 14             	add    esp,0x14
c001a659:	53                   	push   ebx
c001a65a:	e8 ef 16 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a65f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a662:	e8 5f 27 ff ff       	call   c000cdc6 <createPartitionsForDisk(PhysicalDisk*)>
c001a667:	83 c4 14             	add    esp,0x14
c001a66a:	31 c0                	xor    eax,eax
c001a66c:	5b                   	pop    ebx
c001a66d:	5e                   	pop    esi
c001a66e:	c3                   	ret    
c001a66f:	90                   	nop

c001a670 <SATA::SATA()>:
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a677:	83 ec 04             	sub    esp,0x4
c001a67a:	68 00 02 00 00       	push   0x200
c001a67f:	68 88 ee 01 c0       	push   0xc001ee88
c001a684:	50                   	push   eax
c001a685:	e8 5c 16 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	ba f8 ee 01 c0       	mov    edx,0xc001eef8
c001a692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a696:	89 10                	mov    DWORD PTR [eax],edx
c001a698:	90                   	nop
c001a699:	83 c4 0c             	add    esp,0xc
c001a69c:	c3                   	ret    
c001a69d:	90                   	nop

c001a69e <SATA::access(unsigned long long, int, void*, bool)>:
c001a69e:	55                   	push   ebp
c001a69f:	57                   	push   edi
c001a6a0:	56                   	push   esi
c001a6a1:	53                   	push   ebx
c001a6a2:	83 ec 2c             	sub    esp,0x2c
c001a6a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a6a9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a6ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6b1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a6b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a6b9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a6be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6c2:	7e 10                	jle    c001a6d4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a6c4:	83 ec 0c             	sub    esp,0xc
c001a6c7:	68 98 ee 01 c0       	push   0xc001ee98
c001a6cc:	e8 6a 5a ff ff       	call   c001013b <KePanic(char const*)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a6da:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a6e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a6e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6ea:	89 d0                	mov    eax,edx
c001a6ec:	c1 e0 07             	shl    eax,0x7
c001a6ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6f3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a6fd:	51                   	push   ecx
c001a6fe:	8d 42 02             	lea    eax,[edx+0x2]
c001a701:	51                   	push   ecx
c001a702:	c1 e0 07             	shl    eax,0x7
c001a705:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a709:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a70d:	50                   	push   eax
c001a70e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a714:	e8 e7 ef ff ff       	call   c0019700 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a719:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a725:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a729:	0f 84 4f 01 00 00    	je     c001a87e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a72f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a733:	c1 e0 09             	shl    eax,0x9
c001a736:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a73b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a73f:	74 0e                	je     c001a74f <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a741:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a747:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a74b:	89 c1                	mov    ecx,eax
c001a74d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a74f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a753:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a759:	8d 42 02             	lea    eax,[edx+0x2]
c001a75c:	c1 e0 07             	shl    eax,0x7
c001a75f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a763:	8b 00                	mov    eax,DWORD PTR [eax]
c001a765:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a76b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a771:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a775:	c1 e1 05             	shl    ecx,0x5
c001a778:	01 c8                	add    eax,ecx
c001a77a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a77e:	83 e1 01             	and    ecx,0x1
c001a781:	89 ce                	mov    esi,ecx
c001a783:	8a 08                	mov    cl,BYTE PTR [eax]
c001a785:	c1 e6 06             	shl    esi,0x6
c001a788:	83 e1 bf             	and    ecx,0xffffffbf
c001a78b:	09 f1                	or     ecx,esi
c001a78d:	88 08                	mov    BYTE PTR [eax],cl
c001a78f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a791:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a797:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a79d:	89 08                	mov    DWORD PTR [eax],ecx
c001a79f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a7a5:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a7ab:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a7b1:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a7b4:	50                   	push   eax
c001a7b5:	68 90 00 00 00       	push   0x90
c001a7ba:	6a 00                	push   0x0
c001a7bc:	56                   	push   esi
c001a7bd:	e8 0e 5d fe ff       	call   c00004d0 <memset>
c001a7c2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a7c8:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a7cc:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a7d2:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a7d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7da:	83 c4 10             	add    esp,0x10
c001a7dd:	48                   	dec    eax
c001a7de:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a7e3:	89 c1                	mov    ecx,eax
c001a7e5:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a7eb:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a7f0:	09 c8                	or     eax,ecx
c001a7f2:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a7f8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a7fb:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a802:	66 25 00 7f          	and    ax,0x7f00
c001a806:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a80a:	66 0d 27 80          	or     ax,0x8027
c001a80e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a813:	66 89 06             	mov    WORD PTR [esi],ax
c001a816:	19 c0                	sbb    eax,eax
c001a818:	83 e0 f0             	and    eax,0xfffffff0
c001a81b:	83 c0 35             	add    eax,0x35
c001a81e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a821:	89 e8                	mov    eax,ebp
c001a823:	c1 e8 10             	shr    eax,0x10
c001a826:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a829:	89 e8                	mov    eax,ebp
c001a82b:	c1 e8 18             	shr    eax,0x18
c001a82e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a831:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a835:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a83c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a83f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a843:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a847:	89 d6                	mov    esi,edx
c001a849:	31 c0                	xor    eax,eax
c001a84b:	c1 e6 07             	shl    esi,0x7
c001a84e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a852:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a858:	80 e1 88             	and    cl,0x88
c001a85b:	74 0a                	je     c001a867 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a85d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a862:	74 0a                	je     c001a86e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a864:	40                   	inc    eax
c001a865:	eb eb                	jmp    c001a852 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a867:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a86c:	75 17                	jne    c001a885 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a86e:	83 ec 0c             	sub    esp,0xc
c001a871:	68 d1 ee 01 c0       	push   0xc001eed1
c001a876:	e8 5d fc fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001a87b:	83 c4 10             	add    esp,0x10
c001a87e:	b8 01 00 00 00       	mov    eax,0x1
c001a883:	eb 5d                	jmp    c001a8e2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a885:	b8 01 00 00 00       	mov    eax,0x1
c001a88a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a88e:	c1 e2 07             	shl    edx,0x7
c001a891:	d3 e0                	shl    eax,cl
c001a893:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a897:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a89d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a8a3:	85 c8                	test   eax,ecx
c001a8a5:	74 16                	je     c001a8bd <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a8a7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a8ad:	0f ba e1 1e          	bt     ecx,0x1e
c001a8b1:	73 ea                	jae    c001a89d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a8b3:	83 ec 0c             	sub    esp,0xc
c001a8b6:	68 df ee 01 c0       	push   0xc001eedf
c001a8bb:	eb b9                	jmp    c001a876 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a8bd:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a8c3:	0f ba e0 1e          	bt     eax,0x1e
c001a8c7:	72 b5                	jb     c001a87e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a8c9:	31 c0                	xor    eax,eax
c001a8cb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a8d0:	75 10                	jne    c001a8e2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a8d2:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a8d8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a8dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8e2:	83 c4 2c             	add    esp,0x2c
c001a8e5:	5b                   	pop    ebx
c001a8e6:	5e                   	pop    esi
c001a8e7:	5f                   	pop    edi
c001a8e8:	5d                   	pop    ebp
c001a8e9:	c3                   	ret    

c001a8ea <SATA::read(unsigned long long, int, void*)>:
c001a8ea:	57                   	push   edi
c001a8eb:	b8 04 00 00 00       	mov    eax,0x4
c001a8f0:	56                   	push   esi
c001a8f1:	53                   	push   ebx
c001a8f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8fa:	8d 7a ff             	lea    edi,[edx-0x1]
c001a8fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a901:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a905:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a90b:	77 25                	ja     c001a932 <SATA::read(unsigned long long, int, void*)+0x48>
c001a90d:	b8 06 00 00 00       	mov    eax,0x6
c001a912:	85 f6                	test   esi,esi
c001a914:	74 1c                	je     c001a932 <SATA::read(unsigned long long, int, void*)+0x48>
c001a916:	50                   	push   eax
c001a917:	50                   	push   eax
c001a918:	6a 00                	push   0x0
c001a91a:	56                   	push   esi
c001a91b:	52                   	push   edx
c001a91c:	53                   	push   ebx
c001a91d:	51                   	push   ecx
c001a91e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a922:	e8 77 fd ff ff       	call   c001a69e <SATA::access(unsigned long long, int, void*, bool)>
c001a927:	83 c4 20             	add    esp,0x20
c001a92a:	85 c0                	test   eax,eax
c001a92c:	0f 95 c0             	setne  al
c001a92f:	0f b6 c0             	movzx  eax,al
c001a932:	5b                   	pop    ebx
c001a933:	5e                   	pop    esi
c001a934:	5f                   	pop    edi
c001a935:	c3                   	ret    

c001a936 <SATA::write(unsigned long long, int, void*)>:
c001a936:	55                   	push   ebp
c001a937:	b8 04 00 00 00       	mov    eax,0x4
c001a93c:	57                   	push   edi
c001a93d:	56                   	push   esi
c001a93e:	53                   	push   ebx
c001a93f:	83 ec 0c             	sub    esp,0xc
c001a942:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a946:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a94a:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a94d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a951:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a955:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a95b:	77 3d                	ja     c001a99a <SATA::write(unsigned long long, int, void*)+0x64>
c001a95d:	b8 06 00 00 00       	mov    eax,0x6
c001a962:	85 ed                	test   ebp,ebp
c001a964:	74 34                	je     c001a99a <SATA::write(unsigned long long, int, void*)+0x64>
c001a966:	c1 e3 09             	shl    ebx,0x9
c001a969:	01 eb                	add    ebx,ebp
c001a96b:	89 d6                	mov    esi,edx
c001a96d:	89 cf                	mov    edi,ecx
c001a96f:	83 c6 01             	add    esi,0x1
c001a972:	83 d7 00             	adc    edi,0x0
c001a975:	50                   	push   eax
c001a976:	50                   	push   eax
c001a977:	6a 01                	push   0x1
c001a979:	55                   	push   ebp
c001a97a:	81 c5 00 02 00 00    	add    ebp,0x200
c001a980:	6a 01                	push   0x1
c001a982:	51                   	push   ecx
c001a983:	52                   	push   edx
c001a984:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a988:	e8 11 fd ff ff       	call   c001a69e <SATA::access(unsigned long long, int, void*, bool)>
c001a98d:	83 c4 20             	add    esp,0x20
c001a990:	89 f2                	mov    edx,esi
c001a992:	89 f9                	mov    ecx,edi
c001a994:	39 dd                	cmp    ebp,ebx
c001a996:	75 d3                	jne    c001a96b <SATA::write(unsigned long long, int, void*)+0x35>
c001a998:	31 c0                	xor    eax,eax
c001a99a:	83 c4 0c             	add    esp,0xc
c001a99d:	5b                   	pop    ebx
c001a99e:	5e                   	pop    esi
c001a99f:	5f                   	pop    edi
c001a9a0:	5d                   	pop    ebp
c001a9a1:	c3                   	ret    

c001a9a2 <SATAPI::write(unsigned long long, int, void*)>:
c001a9a2:	b8 03 00 00 00       	mov    eax,0x3
c001a9a7:	c3                   	ret    

c001a9a8 <SATAPI::close(int, int, void*)>:
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9b5:	85 c0                	test   eax,eax
c001a9b7:	74 0c                	je     c001a9c5 <SATAPI::close(int, int, void*)+0x1d>
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9be:	50                   	push   eax
c001a9bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	31 c0                	xor    eax,eax
c001a9c7:	83 c4 0c             	add    esp,0xc
c001a9ca:	c3                   	ret    
c001a9cb:	90                   	nop

c001a9cc <SATAPI::SATAPI()>:
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d3:	83 ec 04             	sub    esp,0x4
c001a9d6:	68 00 08 00 00       	push   0x800
c001a9db:	68 28 ef 01 c0       	push   0xc001ef28
c001a9e0:	50                   	push   eax
c001a9e1:	e8 00 13 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a9e6:	83 c4 10             	add    esp,0x10
c001a9e9:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001a9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f2:	89 10                	mov    DWORD PTR [eax],edx
c001a9f4:	90                   	nop
c001a9f5:	83 c4 0c             	add    esp,0xc
c001a9f8:	c3                   	ret    
c001a9f9:	90                   	nop

c001a9fa <SATAPI::diskRemoved()>:
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <SATAPI::diskInserted()>:
c001a9fc:	83 ec 18             	sub    esp,0x18
c001a9ff:	68 34 ef 01 c0       	push   0xc001ef34
c001aa04:	e8 cf fa fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001aa09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa0d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aa14:	83 c4 1c             	add    esp,0x1c
c001aa17:	c3                   	ret    

c001aa18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aa18:	55                   	push   ebp
c001aa19:	57                   	push   edi
c001aa1a:	56                   	push   esi
c001aa1b:	53                   	push   ebx
c001aa1c:	83 ec 38             	sub    esp,0x38
c001aa1f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aa23:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aa2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa2f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa33:	68 4c ef 01 c0       	push   0xc001ef4c
c001aa38:	e8 9b fa fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001aa3d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aa43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa4d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa57:	83 c0 02             	add    eax,0x2
c001aa5a:	c1 e0 07             	shl    eax,0x7
c001aa5d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa69:	c1 e0 07             	shl    eax,0x7
c001aa6c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa74:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aa7e:	58                   	pop    eax
c001aa7f:	5a                   	pop    edx
c001aa80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aa84:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aa8a:	e8 71 ec ff ff       	call   c0019700 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aa8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa93:	83 c4 10             	add    esp,0x10
c001aa96:	b8 01 00 00 00       	mov    eax,0x1
c001aa9b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aaa0:	0f 84 49 02 00 00    	je     c001acef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aaa6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aaac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001aab2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aab8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aabe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aac2:	c1 e1 05             	shl    ecx,0x5
c001aac5:	01 c8                	add    eax,ecx
c001aac7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aac9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001aacf:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aad5:	89 08                	mov    DWORD PTR [eax],ecx
c001aad7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aadd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001aae3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001aae9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aaec:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aaef:	50                   	push   eax
c001aaf0:	68 90 00 00 00       	push   0x90
c001aaf5:	6a 00                	push   0x0
c001aaf7:	53                   	push   ebx
c001aaf8:	e8 d3 59 fe ff       	call   c00004d0 <memset>
c001aafd:	b9 0c 00 00 00       	mov    ecx,0xc
c001ab02:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ab06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab08:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ab0e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ab12:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ab18:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ab1c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ab20:	48                   	dec    eax
c001ab21:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ab26:	89 c1                	mov    ecx,eax
c001ab28:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ab2e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ab33:	09 c8                	or     eax,ecx
c001ab35:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab3b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab3e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ab45:	66 25 00 7f          	and    ax,0x7f00
c001ab49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab4d:	66 0d 27 80          	or     ax,0x8027
c001ab51:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab55:	66 89 03             	mov    WORD PTR [ebx],ax
c001ab58:	89 d0                	mov    eax,edx
c001ab5a:	c1 ea 18             	shr    edx,0x18
c001ab5d:	c1 e8 10             	shr    eax,0x10
c001ab60:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ab63:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ab66:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ab6a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ab6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab71:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ab74:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab78:	83 c4 10             	add    esp,0x10
c001ab7b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ab7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab83:	31 c0                	xor    eax,eax
c001ab85:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ab8b:	80 e1 88             	and    cl,0x88
c001ab8e:	74 0a                	je     c001ab9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001ab90:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab95:	74 0a                	je     c001aba1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001ab97:	40                   	inc    eax
c001ab98:	eb eb                	jmp    c001ab85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001ab9a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab9f:	75 43                	jne    c001abe4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	68 66 ef 01 c0       	push   0xc001ef66
c001aba9:	e8 2a f9 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001abae:	58                   	pop    eax
c001abaf:	5a                   	pop    edx
c001abb0:	68 7b ef 01 c0       	push   0xc001ef7b
c001abb5:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001abbb:	e8 76 db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001abc0:	59                   	pop    ecx
c001abc1:	5b                   	pop    ebx
c001abc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001abc6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001abcc:	e8 c9 eb ff ff       	call   c001979a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001abd1:	5e                   	pop    esi
c001abd2:	5f                   	pop    edi
c001abd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001abd7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001abdd:	e8 98 eb ff ff       	call   c001977a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001abe2:	eb 48                	jmp    c001ac2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001abe4:	be 01 00 00 00       	mov    esi,0x1
c001abe9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001abed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001abf1:	d3 e6                	shl    esi,cl
c001abf3:	c1 e7 07             	shl    edi,0x7
c001abf6:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001abfc:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ac01:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ac05:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ac0b:	85 c6                	test   esi,eax
c001ac0d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ac13:	0f 84 a3 00 00 00    	je     c001acbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001ac19:	0f ba e0 1e          	bt     eax,0x1e
c001ac1d:	73 1a                	jae    c001ac39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001ac1f:	83 ec 0c             	sub    esp,0xc
c001ac22:	68 8d ef 01 c0       	push   0xc001ef8d
c001ac27:	e8 ac f8 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ac2c:	83 c4 10             	add    esp,0x10
c001ac2f:	b8 01 00 00 00       	mov    eax,0x1
c001ac34:	e9 b6 00 00 00       	jmp    c001acef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ac39:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac3f:	83 f8 0d             	cmp    eax,0xd
c001ac42:	77 0a                	ja     c001ac4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001ac44:	83 ec 0c             	sub    esp,0xc
c001ac47:	68 c8 00 00 00       	push   0xc8
c001ac4c:	eb 28                	jmp    c001ac76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac4e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ac54:	83 f8 0d             	cmp    eax,0xd
c001ac57:	77 0a                	ja     c001ac63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001ac59:	83 ec 0c             	sub    esp,0xc
c001ac5c:	68 58 02 00 00       	push   0x258
c001ac61:	eb 13                	jmp    c001ac76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac63:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ac69:	83 f8 06             	cmp    eax,0x6
c001ac6c:	77 10                	ja     c001ac7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001ac6e:	83 ec 0c             	sub    esp,0xc
c001ac71:	68 dc 05 00 00       	push   0x5dc
c001ac76:	e8 d1 89 ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ac82:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac85:	75 06                	jne    c001ac8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001ac87:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ac8b:	74 15                	je     c001aca2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac8d:	83 fb 06             	cmp    ebx,0x6
c001ac90:	77 10                	ja     c001aca2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	68 c4 09 00 00       	push   0x9c4
c001ac9a:	e8 ad 89 ff ff       	call   c001364c <milliTenthSleep(unsigned int)>
c001ac9f:	83 c4 10             	add    esp,0x10
c001aca2:	43                   	inc    ebx
c001aca3:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001aca9:	0f 85 56 ff ff ff    	jne    c001ac05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001acaf:	83 ec 0c             	sub    esp,0xc
c001acb2:	68 a0 ef 01 c0       	push   0xc001efa0
c001acb7:	e9 6b ff ff ff       	jmp    c001ac27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001acbc:	0f ba e0 1e          	bt     eax,0x1e
c001acc0:	73 0d                	jae    c001accf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001acc2:	83 ec 0c             	sub    esp,0xc
c001acc5:	68 b4 ef 01 c0       	push   0xc001efb4
c001acca:	e9 58 ff ff ff       	jmp    c001ac27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001accf:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001acd4:	74 17                	je     c001aced <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001acd6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001acdb:	74 10                	je     c001aced <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001acdd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ace3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ace7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aceb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aced:	31 c0                	xor    eax,eax
c001acef:	83 c4 2c             	add    esp,0x2c
c001acf2:	5b                   	pop    ebx
c001acf3:	5e                   	pop    esi
c001acf4:	5f                   	pop    edi
c001acf5:	5d                   	pop    ebp
c001acf6:	c3                   	ret    
c001acf7:	90                   	nop

c001acf8 <SATAPI::eject()>:
c001acf8:	57                   	push   edi
c001acf9:	b9 03 00 00 00       	mov    ecx,0x3
c001acfe:	83 ec 18             	sub    esp,0x18
c001ad01:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad05:	fc                   	cld    
c001ad06:	31 c0                	xor    eax,eax
c001ad08:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad0a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ad0f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ad14:	50                   	push   eax
c001ad15:	6a 00                	push   0x0
c001ad17:	6a 00                	push   0x0
c001ad19:	6a 00                	push   0x0
c001ad1b:	6a 00                	push   0x0
c001ad1d:	6a 02                	push   0x2
c001ad1f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad23:	50                   	push   eax
c001ad24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad28:	e8 eb fc ff ff       	call   c001aa18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ad2d:	31 c0                	xor    eax,eax
c001ad2f:	83 c4 38             	add    esp,0x38
c001ad32:	5f                   	pop    edi
c001ad33:	c3                   	ret    

c001ad34 <SATAPI::detectMedia()>:
c001ad34:	53                   	push   ebx
c001ad35:	83 ec 14             	sub    esp,0x14
c001ad38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ad3c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad42:	e8 45 27 ff ff       	call   c000d48c <VCache::writeWriteBuffer()>
c001ad47:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad51:	83 c4 18             	add    esp,0x18
c001ad54:	5b                   	pop    ebx
c001ad55:	e9 22 27 ff ff       	jmp    c000d47c <VCache::invalidateReadBuffer()>

c001ad5a <SATAPI::open(int, int, void*)>:
c001ad5a:	56                   	push   esi
c001ad5b:	53                   	push   ebx
c001ad5c:	51                   	push   ecx
c001ad5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad65:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ad6f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad75:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad83:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad8d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad93:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad9a:	e8 f6 cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad9f:	89 c6                	mov    esi,eax
c001ada1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ada7:	81 c6 00 10 00 00    	add    esi,0x1000
c001adad:	e8 e3 cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001adb2:	39 c6                	cmp    esi,eax
c001adb4:	74 10                	je     c001adc6 <SATAPI::open(int, int, void*)+0x6c>
c001adb6:	83 ec 0c             	sub    esp,0xc
c001adb9:	68 c9 ef 01 c0       	push   0xc001efc9
c001adbe:	e8 78 53 ff ff       	call   c001013b <KePanic(char const*)>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	6a 02                	push   0x2
c001adcb:	e8 b5 e4 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001add0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001add6:	6a 03                	push   0x3
c001add8:	50                   	push   eax
c001add9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001addf:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c001ade5:	e8 30 eb fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001adea:	83 c4 14             	add    esp,0x14
c001aded:	68 74 01 00 00       	push   0x174
c001adf2:	e8 c2 c9 fe ff       	call   c00077b9 <malloc>
c001adf7:	83 c4 0c             	add    esp,0xc
c001adfa:	89 c6                	mov    esi,eax
c001adfc:	6a 00                	push   0x0
c001adfe:	68 ff ff ff 7f       	push   0x7fffffff
c001ae03:	6a 00                	push   0x0
c001ae05:	6a 00                	push   0x0
c001ae07:	53                   	push   ebx
c001ae08:	68 df ef 01 c0       	push   0xc001efdf
c001ae0d:	50                   	push   eax
c001ae0e:	e8 7f 1b ff ff       	call   c000c992 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae13:	83 c4 14             	add    esp,0x14
c001ae16:	56                   	push   esi
c001ae17:	e8 2c 1c ff ff       	call   c000ca48 <LogicalDisk::assignDriveLetter()>
c001ae1c:	5a                   	pop    edx
c001ae1d:	0f be c0             	movsx  eax,al
c001ae20:	59                   	pop    ecx
c001ae21:	50                   	push   eax
c001ae22:	68 2c ee 01 c0       	push   0xc001ee2c
c001ae27:	e8 ac f6 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ae2c:	58                   	pop    eax
c001ae2d:	5a                   	pop    edx
c001ae2e:	56                   	push   esi
c001ae2f:	53                   	push   ebx
c001ae30:	e8 e3 0a ff ff       	call   c000b918 <Device::addChild(Device*)>
c001ae35:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae3e:	e8 0b 0f ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001ae43:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ae4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae4d:	e8 e2 fe ff ff       	call   c001ad34 <SATAPI::detectMedia()>
c001ae52:	83 c4 14             	add    esp,0x14
c001ae55:	31 c0                	xor    eax,eax
c001ae57:	5b                   	pop    ebx
c001ae58:	5e                   	pop    esi
c001ae59:	c3                   	ret    

c001ae5a <SATAPI::read(unsigned long long, int, void*)>:
c001ae5a:	57                   	push   edi
c001ae5b:	56                   	push   esi
c001ae5c:	53                   	push   ebx
c001ae5d:	83 ec 3c             	sub    esp,0x3c
c001ae60:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae64:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ae68:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ae6c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ae70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae74:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae78:	68 ed ef 01 c0       	push   0xc001efed
c001ae7d:	e8 56 f6 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ae82:	83 c4 10             	add    esp,0x10
c001ae85:	83 fe 04             	cmp    esi,0x4
c001ae88:	7e 10                	jle    c001ae9a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ae8a:	83 ec 0c             	sub    esp,0xc
c001ae8d:	68 fe ef 01 c0       	push   0xc001effe
c001ae92:	e8 a4 52 ff ff       	call   c001013b <KePanic(char const*)>
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001aea0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001aea6:	51                   	push   ecx
c001aea7:	50                   	push   eax
c001aea8:	83 c0 02             	add    eax,0x2
c001aeab:	c1 e0 07             	shl    eax,0x7
c001aeae:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001aeb4:	50                   	push   eax
c001aeb5:	52                   	push   edx
c001aeb6:	e8 09 e9 ff ff       	call   c00197c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001aebb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001aebf:	b9 03 00 00 00       	mov    ecx,0x3
c001aec4:	fc                   	cld    
c001aec5:	31 c0                	xor    eax,eax
c001aec7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aec9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001aece:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001aed3:	83 c4 0c             	add    esp,0xc
c001aed6:	6a 00                	push   0x0
c001aed8:	6a 00                	push   0x0
c001aeda:	6a 00                	push   0x0
c001aedc:	6a 00                	push   0x0
c001aede:	6a 02                	push   0x2
c001aee0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aee4:	50                   	push   eax
c001aee5:	53                   	push   ebx
c001aee6:	e8 2d fb ff ff       	call   c001aa18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aeeb:	83 c4 20             	add    esp,0x20
c001aeee:	85 c0                	test   eax,eax
c001aef0:	75 44                	jne    c001af36 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001aef2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001aef6:	b9 03 00 00 00       	mov    ecx,0x3
c001aefb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aefd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af01:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001af06:	0f c8                	bswap  eax
c001af08:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001af0c:	89 f0                	mov    eax,esi
c001af0e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001af12:	50                   	push   eax
c001af13:	56                   	push   esi
c001af14:	c1 e6 0b             	shl    esi,0xb
c001af17:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001af1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af23:	56                   	push   esi
c001af24:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001af28:	50                   	push   eax
c001af29:	53                   	push   ebx
c001af2a:	e8 e9 fa ff ff       	call   c001aa18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af2f:	83 c4 20             	add    esp,0x20
c001af32:	85 c0                	test   eax,eax
c001af34:	74 14                	je     c001af4a <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001af36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af3a:	83 ec 0c             	sub    esp,0xc
c001af3d:	53                   	push   ebx
c001af3e:	e8 f1 fd ff ff       	call   c001ad34 <SATAPI::detectMedia()>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af4a:	83 c4 30             	add    esp,0x30
c001af4d:	5b                   	pop    ebx
c001af4e:	5e                   	pop    esi
c001af4f:	5f                   	pop    edi
c001af50:	c3                   	ret    
c001af51:	90                   	nop

c001af52 <IOAPIC::close(int, int, void*)>:
c001af52:	b8 00 00 00 00       	mov    eax,0x0
c001af57:	c3                   	ret    

c001af58 <apicGetBase()>:
c001af58:	55                   	push   ebp
c001af59:	89 e5                	mov    ebp,esp
c001af5b:	83 ec 18             	sub    esp,0x18
c001af5e:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001af63:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001af69:	83 e0 08             	and    eax,0x8
c001af6c:	84 c0                	test   al,al
c001af6e:	75 07                	jne    c001af77 <apicGetBase()+0x1f>
c001af70:	b8 00 00 00 00       	mov    eax,0x0
c001af75:	eb 21                	jmp    c001af98 <apicGetBase()+0x40>
c001af77:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001af7c:	83 ec 08             	sub    esp,0x8
c001af7f:	6a 1b                	push   0x1b
c001af81:	50                   	push   eax
c001af82:	e8 6b be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001af8d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001af90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af93:	25 00 00 ff ff       	and    eax,0xffff0000
c001af98:	c9                   	leave  
c001af99:	c3                   	ret    

c001af9a <IOAPIC::IOAPIC()>:
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa1:	83 ec 08             	sub    esp,0x8
c001afa4:	68 60 f0 01 c0       	push   0xc001f060
c001afa9:	50                   	push   eax
c001afaa:	e8 01 0b ff ff       	call   c000bab0 <Device::Device(char const*)>
c001afaf:	83 c4 10             	add    esp,0x10
c001afb2:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001afb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbb:	89 10                	mov    DWORD PTR [eax],edx
c001afbd:	90                   	nop
c001afbe:	83 c4 0c             	add    esp,0xc
c001afc1:	c3                   	ret    

c001afc2 <apicOpen()>:
c001afc2:	55                   	push   ebp
c001afc3:	89 e5                	mov    ebp,esp
c001afc5:	53                   	push   ebx
c001afc6:	83 ec 34             	sub    esp,0x34
c001afc9:	a0 80 41 02 c0       	mov    al,ds:0xc0024180
c001afce:	83 f0 01             	xor    eax,0x1
c001afd1:	84 c0                	test   al,al
c001afd3:	0f 84 9d 00 00 00    	je     c001b076 <apicOpen()+0xb4>
c001afd9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001afdd:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c001afe2:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001afe5:	0f 83 84 00 00 00    	jae    c001b06f <apicOpen()+0xad>
c001afeb:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001aff2:	83 ec 0c             	sub    esp,0xc
c001aff5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001aff8:	e8 bc c7 fe ff       	call   c00077b9 <malloc>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	89 c3                	mov    ebx,eax
c001b002:	83 ec 0c             	sub    esp,0xc
c001b005:	53                   	push   ebx
c001b006:	e8 8f ff ff ff       	call   c001af9a <IOAPIC::IOAPIC()>
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b011:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b014:	25 ff 00 00 00       	and    eax,0xff
c001b019:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b01c:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c001b023:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c001b028:	40                   	inc    eax
c001b029:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c001b02e:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001b033:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b039:	83 ec 08             	sub    esp,0x8
c001b03c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b03f:	50                   	push   eax
c001b040:	e8 d3 08 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b04b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b04d:	83 c0 08             	add    eax,0x8
c001b050:	8b 10                	mov    edx,DWORD PTR [eax]
c001b052:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b055:	25 ff 00 00 00       	and    eax,0xff
c001b05a:	6a 00                	push   0x0
c001b05c:	6a 00                	push   0x0
c001b05e:	50                   	push   eax
c001b05f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b062:	ff d2                	call   edx
c001b064:	83 c4 10             	add    esp,0x10
c001b067:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b06a:	e9 6e ff ff ff       	jmp    c001afdd <apicOpen()+0x1b>
c001b06f:	c6 05 80 41 02 c0 01 	mov    BYTE PTR ds:0xc0024180,0x1
c001b076:	e8 dd fe ff ff       	call   c001af58 <apicGetBase()>
c001b07b:	05 f0 00 00 00       	add    eax,0xf0
c001b080:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b083:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b086:	8b 00                	mov    eax,DWORD PTR [eax]
c001b088:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b08b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b092:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b099:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b09c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b09f:	89 10                	mov    DWORD PTR [eax],edx
c001b0a1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b0a8:	a1 b0 2c 02 c0       	mov    eax,ds:0xc0022cb0
c001b0ad:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b0b0:	7d 70                	jge    c001b122 <apicOpen()+0x160>
c001b0b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0b5:	8b 04 85 c0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd340]
c001b0bc:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b0bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0c2:	8b 04 85 c0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd340]
c001b0c9:	c1 e8 08             	shr    eax,0x8
c001b0cc:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b0d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0d3:	8b 04 85 c0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd340]
c001b0da:	c1 e8 18             	shr    eax,0x18
c001b0dd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b0e0:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b0e4:	75 37                	jne    c001b11d <apicOpen()+0x15b>
c001b0e6:	e8 6d fe ff ff       	call   c001af58 <apicGetBase()>
c001b0eb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b0ef:	75 07                	jne    c001b0f8 <apicOpen()+0x136>
c001b0f1:	ba 60 03 00 00       	mov    edx,0x360
c001b0f6:	eb 05                	jmp    c001b0fd <apicOpen()+0x13b>
c001b0f8:	ba 50 03 00 00       	mov    edx,0x350
c001b0fd:	01 d0                	add    eax,edx
c001b0ff:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b102:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b105:	8b 00                	mov    eax,DWORD PTR [eax]
c001b107:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b10a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b111:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b115:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b118:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b11b:	89 10                	mov    DWORD PTR [eax],edx
c001b11d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b120:	eb 86                	jmp    c001b0a8 <apicOpen()+0xe6>
c001b122:	90                   	nop
c001b123:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b126:	c9                   	leave  
c001b127:	c3                   	ret    

c001b128 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b128:	55                   	push   ebp
c001b129:	89 e5                	mov    ebp,esp
c001b12b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b12e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b134:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b137:	72 1d                	jb     c001b156 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b13c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b145:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b14b:	01 d0                	add    eax,edx
c001b14d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b150:	73 04                	jae    c001b156 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b152:	b0 01                	mov    al,0x1
c001b154:	eb 02                	jmp    c001b158 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b156:	b0 00                	mov    al,0x0
c001b158:	5d                   	pop    ebp
c001b159:	c3                   	ret    

c001b15a <IOAPIC::read(int)>:
c001b15a:	55                   	push   ebp
c001b15b:	89 e5                	mov    ebp,esp
c001b15d:	83 ec 10             	sub    esp,0x10
c001b160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b163:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b169:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b16c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b16f:	31 d2                	xor    edx,edx
c001b171:	88 c2                	mov    dl,al
c001b173:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b176:	89 10                	mov    DWORD PTR [eax],edx
c001b178:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b17b:	83 c0 10             	add    eax,0x10
c001b17e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b180:	c9                   	leave  
c001b181:	c3                   	ret    

c001b182 <IOAPIC::open(int, int, void*)>:
c001b182:	55                   	push   ebp
c001b183:	89 e5                	mov    ebp,esp
c001b185:	57                   	push   edi
c001b186:	56                   	push   esi
c001b187:	53                   	push   ebx
c001b188:	83 ec 04             	sub    esp,0x4
c001b18b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b18e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b191:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b19a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1a0:	8b 14 85 a0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd260]
c001b1a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b1b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1b9:	8b 14 85 20 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1e0]
c001b1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1c3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b1c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1cc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b1d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1d5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b1db:	89 c6                	mov    esi,eax
c001b1dd:	81 e6 ff 00 00 00    	and    esi,0xff
c001b1e3:	89 d0                	mov    eax,edx
c001b1e5:	ba 00 00 00 00       	mov    edx,0x0
c001b1ea:	89 c7                	mov    edi,eax
c001b1ec:	83 e7 ff             	and    edi,0xffffffff
c001b1ef:	89 f9                	mov    ecx,edi
c001b1f1:	89 d0                	mov    eax,edx
c001b1f3:	25 ff 00 00 00       	and    eax,0xff
c001b1f8:	89 c3                	mov    ebx,eax
c001b1fa:	89 c8                	mov    eax,ecx
c001b1fc:	89 da                	mov    edx,ebx
c001b1fe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b201:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b204:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b208:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b20c:	83 e0 00             	and    eax,0x0
c001b20f:	09 d0                	or     eax,edx
c001b211:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b218:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b21e:	8d 50 01             	lea    edx,[eax+0x1]
c001b221:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b224:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b22a:	31 d2                	xor    edx,edx
c001b22c:	88 c2                	mov    dl,al
c001b22e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b231:	83 c2 08             	add    edx,0x8
c001b234:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b238:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b23e:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b244:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b248:	6a 01                	push   0x1
c001b24a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b24d:	e8 08 ff ff ff       	call   c001b15a <IOAPIC::read(int)>
c001b252:	83 c4 08             	add    esp,0x8
c001b255:	c1 f8 10             	sar    eax,0x10
c001b258:	25 ff 00 00 00       	and    eax,0xff
c001b25d:	8d 50 01             	lea    edx,[eax+0x1]
c001b260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b263:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b269:	b8 00 00 00 00       	mov    eax,0x0
c001b26e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b271:	5b                   	pop    ebx
c001b272:	5e                   	pop    esi
c001b273:	5f                   	pop    edi
c001b274:	5d                   	pop    ebp
c001b275:	c3                   	ret    

c001b276 <IOAPIC::write(int, int)>:
c001b276:	55                   	push   ebp
c001b277:	89 e5                	mov    ebp,esp
c001b279:	83 ec 10             	sub    esp,0x10
c001b27c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b27f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b285:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b288:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b28b:	31 d2                	xor    edx,edx
c001b28d:	88 c2                	mov    dl,al
c001b28f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b292:	89 10                	mov    DWORD PTR [eax],edx
c001b294:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b297:	8d 50 10             	lea    edx,[eax+0x10]
c001b29a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b29d:	89 02                	mov    DWORD PTR [edx],eax
c001b29f:	90                   	nop
c001b2a0:	c9                   	leave  
c001b2a1:	c3                   	ret    

c001b2a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b2a2:	55                   	push   ebp
c001b2a3:	89 e5                	mov    ebp,esp
c001b2a5:	53                   	push   ebx
c001b2a6:	83 ec 2c             	sub    esp,0x2c
c001b2a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2ac:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b2af:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b2b2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b2b5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b2b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2bb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b2be:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b2c1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b2c4:	88 d8                	mov    al,bl
c001b2c6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b2c9:	88 c8                	mov    al,cl
c001b2cb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b2ce:	88 d0                	mov    al,dl
c001b2d0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b2d3:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2d6:	25 ff 00 00 00       	and    eax,0xff
c001b2db:	83 c0 08             	add    eax,0x8
c001b2de:	01 c0                	add    eax,eax
c001b2e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b2e3:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2e6:	25 ff 00 00 00       	and    eax,0xff
c001b2eb:	83 c0 08             	add    eax,0x8
c001b2ee:	01 c0                	add    eax,eax
c001b2f0:	40                   	inc    eax
c001b2f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b2f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b2f7:	50                   	push   eax
c001b2f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2fb:	e8 5a fe ff ff       	call   c001b15a <IOAPIC::read(int)>
c001b300:	83 c4 08             	add    esp,0x8
c001b303:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b306:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b30d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b310:	c1 e0 18             	shl    eax,0x18
c001b313:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b316:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b319:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b31c:	52                   	push   edx
c001b31d:	50                   	push   eax
c001b31e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b321:	e8 50 ff ff ff       	call   c001b276 <IOAPIC::write(int, int)>
c001b326:	83 c4 0c             	add    esp,0xc
c001b329:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b32c:	50                   	push   eax
c001b32d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b330:	e8 25 fe ff ff       	call   c001b15a <IOAPIC::read(int)>
c001b335:	83 c4 08             	add    esp,0x8
c001b338:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b33b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b342:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b349:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b350:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b354:	74 09                	je     c001b35f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b356:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b35d:	eb 07                	jmp    c001b366 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b35f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b366:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b36a:	74 09                	je     c001b375 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b36c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b373:	eb 07                	jmp    c001b37c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b375:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b37c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b383:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b386:	25 ff 00 00 00       	and    eax,0xff
c001b38b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b38e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b391:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b394:	52                   	push   edx
c001b395:	50                   	push   eax
c001b396:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b399:	e8 d8 fe ff ff       	call   c001b276 <IOAPIC::write(int, int)>
c001b39e:	83 c4 0c             	add    esp,0xc
c001b3a1:	90                   	nop
c001b3a2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b3a5:	c9                   	leave  
c001b3a6:	c3                   	ret    
c001b3a7:	90                   	nop

c001b3a8 <APICTimer::close(int, int, void*)>:
c001b3a8:	b8 00 00 00 00       	mov    eax,0x0
c001b3ad:	c3                   	ret    
c001b3ae:	66 90                	xchg   ax,ax

c001b3b0 <apicTimerHandler(regs*, void*)>:
c001b3b0:	83 ec 0c             	sub    esp,0xc
c001b3b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b3b9:	b8 10 27 00 00       	mov    eax,0x2710
c001b3be:	ba 00 00 00 00       	mov    edx,0x0
c001b3c3:	f7 f1                	div    ecx
c001b3c5:	83 ec 0c             	sub    esp,0xc
c001b3c8:	50                   	push   eax
c001b3c9:	e8 de 1d ff ff       	call   c000d1ac <timerHandler(unsigned int)>
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	90                   	nop
c001b3d2:	83 c4 0c             	add    esp,0xc
c001b3d5:	c3                   	ret    
c001b3d6:	66 90                	xchg   ax,ax

c001b3d8 <APICTimer::open(int, int, void*)>:
c001b3d8:	83 ec 0c             	sub    esp,0xc
c001b3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3df:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3e1:	83 c0 24             	add    eax,0x24
c001b3e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3e6:	83 ec 08             	sub    esp,0x8
c001b3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3f1:	ff d0                	call   eax
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b40c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b416:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b41c:	83 ec 0c             	sub    esp,0xc
c001b41f:	51                   	push   ecx
c001b420:	6a 01                	push   0x1
c001b422:	68 b0 b3 01 c0       	push   0xc001b3b0
c001b427:	52                   	push   edx
c001b428:	50                   	push   eax
c001b429:	e8 96 04 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b42e:	83 c4 20             	add    esp,0x20
c001b431:	89 c2                	mov    edx,eax
c001b433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b437:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b43d:	b8 00 00 00 00       	mov    eax,0x0
c001b442:	83 c4 0c             	add    esp,0xc
c001b445:	c3                   	ret    
c001b446:	66 90                	xchg   ax,ax

c001b448 <APICTimer::write(int)>:
c001b448:	83 ec 0c             	sub    esp,0xc
c001b44b:	83 ec 0c             	sub    esp,0xc
c001b44e:	68 94 f0 01 c0       	push   0xc001f094
c001b453:	e8 e3 4c ff ff       	call   c001013b <KePanic(char const*)>
c001b458:	83 c4 10             	add    esp,0x10
c001b45b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b45f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b463:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b469:	90                   	nop
c001b46a:	83 c4 0c             	add    esp,0xc
c001b46d:	c3                   	ret    
c001b46e:	66 90                	xchg   ax,ax

c001b470 <APICTimer::APICTimer()>:
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b477:	83 ec 08             	sub    esp,0x8
c001b47a:	68 a4 f0 01 c0       	push   0xc001f0a4
c001b47f:	50                   	push   eax
c001b480:	e8 5b 1c ff ff       	call   c000d0e0 <Timer::Timer(char const*)>
c001b485:	83 c4 10             	add    esp,0x10
c001b488:	ba b8 f0 01 c0       	mov    edx,0xc001f0b8
c001b48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b491:	89 10                	mov    DWORD PTR [eax],edx
c001b493:	90                   	nop
c001b494:	83 c4 0c             	add    esp,0xc
c001b497:	c3                   	ret    

c001b498 <PIT::write(int)>:
c001b498:	83 ec 10             	sub    esp,0x10
c001b49b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b49f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4ad:	a3 84 41 02 c0       	mov    ds:0xc0024184,eax
c001b4b2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b4b7:	99                   	cdq    
c001b4b8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b4bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4c0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b4c7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b4cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b4d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b4d5:	ee                   	out    dx,al
c001b4d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4da:	25 ff 00 00 00       	and    eax,0xff
c001b4df:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b4e6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b4ea:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b4ee:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b4f3:	ee                   	out    dx,al
c001b4f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4f8:	c1 f8 08             	sar    eax,0x8
c001b4fb:	25 ff 00 00 00       	and    eax,0xff
c001b500:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b507:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b50b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b50f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b514:	ee                   	out    dx,al
c001b515:	90                   	nop
c001b516:	83 c4 10             	add    esp,0x10
c001b519:	c3                   	ret    
c001b51a:	66 90                	xchg   ax,ax

c001b51c <pitHandler(regs*, void*)>:
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	8b 0d 84 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024184
c001b525:	b8 10 27 00 00       	mov    eax,0x2710
c001b52a:	99                   	cdq    
c001b52b:	f7 f9                	idiv   ecx
c001b52d:	83 ec 0c             	sub    esp,0xc
c001b530:	50                   	push   eax
c001b531:	e8 76 1c ff ff       	call   c000d1ac <timerHandler(unsigned int)>
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	90                   	nop
c001b53a:	83 c4 0c             	add    esp,0xc
c001b53d:	c3                   	ret    
c001b53e:	66 90                	xchg   ax,ax

c001b540 <PIT::open(int, int, void*)>:
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b547:	8b 00                	mov    eax,DWORD PTR [eax]
c001b549:	83 c0 24             	add    eax,0x24
c001b54c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b54e:	83 ec 08             	sub    esp,0x8
c001b551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b559:	ff d0                	call   eax
c001b55b:	83 c4 10             	add    esp,0x10
c001b55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b562:	83 ec 0c             	sub    esp,0xc
c001b565:	6a 00                	push   0x0
c001b567:	6a 01                	push   0x1
c001b569:	68 1c b5 01 c0       	push   0xc001b51c
c001b56e:	6a 00                	push   0x0
c001b570:	50                   	push   eax
c001b571:	e8 4e 03 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b576:	83 c4 20             	add    esp,0x20
c001b579:	89 c2                	mov    edx,eax
c001b57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b585:	b8 00 00 00 00       	mov    eax,0x0
c001b58a:	83 c4 0c             	add    esp,0xc
c001b58d:	c3                   	ret    
c001b58e:	66 90                	xchg   ax,ax

c001b590 <PIT::close(int, int, void*)>:
c001b590:	83 ec 0c             	sub    esp,0xc
c001b593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b597:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a5:	6a 01                	push   0x1
c001b5a7:	68 1c b5 01 c0       	push   0xc001b51c
c001b5ac:	6a 00                	push   0x0
c001b5ae:	50                   	push   eax
c001b5af:	e8 46 03 ff ff       	call   c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b5b4:	83 c4 10             	add    esp,0x10
c001b5b7:	b8 00 00 00 00       	mov    eax,0x0
c001b5bc:	83 c4 0c             	add    esp,0xc
c001b5bf:	c3                   	ret    

c001b5c0 <PIT::PIT()>:
c001b5c0:	83 ec 0c             	sub    esp,0xc
c001b5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c7:	83 ec 08             	sub    esp,0x8
c001b5ca:	68 e0 f0 01 c0       	push   0xc001f0e0
c001b5cf:	50                   	push   eax
c001b5d0:	e8 0b 1b ff ff       	call   c000d0e0 <Timer::Timer(char const*)>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	ba 08 f1 01 c0       	mov    edx,0xc001f108
c001b5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e1:	89 10                	mov    DWORD PTR [eax],edx
c001b5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5ed:	31 d2                	xor    edx,edx
c001b5ef:	88 c2                	mov    dl,al
c001b5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b600:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b606:	31 d2                	xor    edx,edx
c001b608:	88 c2                	mov    dl,al
c001b60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b60e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b617:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b61d:	8d 50 01             	lea    edx,[eax+0x1]
c001b620:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b624:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b62a:	31 d2                	xor    edx,edx
c001b62c:	88 c2                	mov    dl,al
c001b62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b632:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b636:	83 e1 3f             	and    ecx,0x3f
c001b639:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b63d:	90                   	nop
c001b63e:	83 c4 0c             	add    esp,0xc
c001b641:	c3                   	ret    
c001b642:	66 90                	xchg   ax,ax
c001b644:	66 90                	xchg   ax,ax
c001b646:	66 90                	xchg   ax,ax
c001b648:	66 90                	xchg   ax,ax
c001b64a:	66 90                	xchg   ax,ax
c001b64c:	66 90                	xchg   ax,ax
c001b64e:	66 90                	xchg   ax,ax

c001b650 <avxDetect>:
c001b650:	b8 01 00 00 00       	mov    eax,0x1
c001b655:	0f a2                	cpuid  
c001b657:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b65d:	74 15                	je     c001b674 <avxDetect.noAVX>
c001b65f:	b8 01 00 00 00       	mov    eax,0x1
c001b664:	0f a2                	cpuid  
c001b666:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b66c:	74 06                	je     c001b674 <avxDetect.noAVX>
c001b66e:	b8 01 00 00 00       	mov    eax,0x1
c001b673:	c3                   	ret    

c001b674 <avxDetect.noAVX>:
c001b674:	b8 00 00 00 00       	mov    eax,0x0
c001b679:	c3                   	ret    

c001b67a <avxSave>:
c001b67a:	53                   	push   ebx
c001b67b:	52                   	push   edx
c001b67c:	31 c0                	xor    eax,eax
c001b67e:	48                   	dec    eax
c001b67f:	89 c2                	mov    edx,eax
c001b681:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b685:	0f ae 23             	xsave  [ebx]
c001b688:	5a                   	pop    edx
c001b689:	5b                   	pop    ebx
c001b68a:	c3                   	ret    

c001b68b <avxLoad>:
c001b68b:	53                   	push   ebx
c001b68c:	52                   	push   edx
c001b68d:	31 c0                	xor    eax,eax
c001b68f:	48                   	dec    eax
c001b690:	89 c2                	mov    edx,eax
c001b692:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b696:	0f ae 2b             	xrstor [ebx]
c001b699:	5a                   	pop    edx
c001b69a:	5b                   	pop    ebx
c001b69b:	c3                   	ret    

c001b69c <avxInit>:
c001b69c:	e8 57 02 00 00       	call   c001b8f8 <sseInit>
c001b6a1:	50                   	push   eax
c001b6a2:	51                   	push   ecx
c001b6a3:	0f 20 e0             	mov    eax,cr4
c001b6a6:	0d 00 00 04 00       	or     eax,0x40000
c001b6ab:	0f 22 e0             	mov    cr4,eax
c001b6ae:	31 c9                	xor    ecx,ecx
c001b6b0:	0f 01 d0             	xgetbv 
c001b6b3:	0d 07 00 00 00       	or     eax,0x7
c001b6b8:	0f 01 d1             	xsetbv 
c001b6bb:	59                   	pop    ecx
c001b6bc:	58                   	pop    eax
c001b6bd:	c3                   	ret    

c001b6be <avxClose>:
c001b6be:	c3                   	ret    

c001b6bf <wouldSheSayYes>:
c001b6bf:	c3                   	ret    
c001b6c0:	49                   	dec    ecx
c001b6c1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b6c5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b6c9:	75 20                	jne    c001b6eb <isr0+0xb>
c001b6cb:	4e                   	dec    esi
c001b6cc:	79 61                	jns    c001b72f <isr7+0x3>
c001b6ce:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b6d3:	66 90                	xchg   ax,ax
c001b6d5:	66 90                	xchg   ax,ax
c001b6d7:	66 90                	xchg   ax,ax
c001b6d9:	66 90                	xchg   ax,ax
c001b6db:	66 90                	xchg   ax,ax
c001b6dd:	66 90                	xchg   ax,ax
c001b6df:	90                   	nop

c001b6e0 <isr0>:
c001b6e0:	fa                   	cli    
c001b6e1:	68 00 00 00 00       	push   0x0
c001b6e6:	68 00 00 00 00       	push   0x0
c001b6eb:	e9 44 01 00 00       	jmp    c001b834 <int_common_stub>

c001b6f0 <isr1>:
c001b6f0:	fa                   	cli    
c001b6f1:	6a 00                	push   0x0
c001b6f3:	6a 01                	push   0x1
c001b6f5:	e9 3a 01 00 00       	jmp    c001b834 <int_common_stub>

c001b6fa <isr2>:
c001b6fa:	fa                   	cli    
c001b6fb:	6a 00                	push   0x0
c001b6fd:	6a 02                	push   0x2
c001b6ff:	e9 30 01 00 00       	jmp    c001b834 <int_common_stub>

c001b704 <isr3>:
c001b704:	fa                   	cli    
c001b705:	6a 00                	push   0x0
c001b707:	6a 03                	push   0x3
c001b709:	e9 26 01 00 00       	jmp    c001b834 <int_common_stub>

c001b70e <isr4>:
c001b70e:	fa                   	cli    
c001b70f:	6a 00                	push   0x0
c001b711:	6a 04                	push   0x4
c001b713:	e9 1c 01 00 00       	jmp    c001b834 <int_common_stub>

c001b718 <isr5>:
c001b718:	fa                   	cli    
c001b719:	6a 00                	push   0x0
c001b71b:	6a 05                	push   0x5
c001b71d:	e9 12 01 00 00       	jmp    c001b834 <int_common_stub>

c001b722 <isr6>:
c001b722:	fa                   	cli    
c001b723:	6a 00                	push   0x0
c001b725:	6a 06                	push   0x6
c001b727:	e9 08 01 00 00       	jmp    c001b834 <int_common_stub>

c001b72c <isr7>:
c001b72c:	fa                   	cli    
c001b72d:	6a 00                	push   0x0
c001b72f:	6a 07                	push   0x7
c001b731:	e9 fe 00 00 00       	jmp    c001b834 <int_common_stub>

c001b736 <isr8>:
c001b736:	fa                   	cli    
c001b737:	6a 08                	push   0x8
c001b739:	e9 f6 00 00 00       	jmp    c001b834 <int_common_stub>

c001b73e <isr9>:
c001b73e:	fa                   	cli    
c001b73f:	6a 00                	push   0x0
c001b741:	6a 09                	push   0x9
c001b743:	e9 ec 00 00 00       	jmp    c001b834 <int_common_stub>

c001b748 <isr10>:
c001b748:	fa                   	cli    
c001b749:	6a 0a                	push   0xa
c001b74b:	e9 e4 00 00 00       	jmp    c001b834 <int_common_stub>

c001b750 <isr11>:
c001b750:	fa                   	cli    
c001b751:	6a 0b                	push   0xb
c001b753:	e9 dc 00 00 00       	jmp    c001b834 <int_common_stub>

c001b758 <isr12>:
c001b758:	fa                   	cli    
c001b759:	6a 0c                	push   0xc
c001b75b:	e9 d4 00 00 00       	jmp    c001b834 <int_common_stub>

c001b760 <isr13>:
c001b760:	fa                   	cli    
c001b761:	6a 0d                	push   0xd
c001b763:	e9 cc 00 00 00       	jmp    c001b834 <int_common_stub>

c001b768 <isr14>:
c001b768:	fa                   	cli    
c001b769:	6a 0e                	push   0xe
c001b76b:	e9 c4 00 00 00       	jmp    c001b834 <int_common_stub>

c001b770 <isr15>:
c001b770:	fa                   	cli    
c001b771:	6a 00                	push   0x0
c001b773:	6a 0f                	push   0xf
c001b775:	e9 ba 00 00 00       	jmp    c001b834 <int_common_stub>

c001b77a <isr16>:
c001b77a:	fa                   	cli    
c001b77b:	6a 00                	push   0x0
c001b77d:	6a 10                	push   0x10
c001b77f:	e9 b0 00 00 00       	jmp    c001b834 <int_common_stub>

c001b784 <isr17>:
c001b784:	fa                   	cli    
c001b785:	6a 00                	push   0x0
c001b787:	6a 11                	push   0x11
c001b789:	e9 a6 00 00 00       	jmp    c001b834 <int_common_stub>

c001b78e <isr18>:
c001b78e:	fa                   	cli    
c001b78f:	6a 00                	push   0x0
c001b791:	6a 12                	push   0x12
c001b793:	e9 9c 00 00 00       	jmp    c001b834 <int_common_stub>

c001b798 <irq3>:
c001b798:	fa                   	cli    
c001b799:	6a 00                	push   0x0
c001b79b:	6a 23                	push   0x23
c001b79d:	e9 92 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7a2 <irq4>:
c001b7a2:	fa                   	cli    
c001b7a3:	6a 00                	push   0x0
c001b7a5:	6a 24                	push   0x24
c001b7a7:	e9 88 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7ac <irq5>:
c001b7ac:	fa                   	cli    
c001b7ad:	6a 00                	push   0x0
c001b7af:	6a 25                	push   0x25
c001b7b1:	e9 7e 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7b6 <irq6>:
c001b7b6:	fa                   	cli    
c001b7b7:	6a 00                	push   0x0
c001b7b9:	6a 26                	push   0x26
c001b7bb:	e9 74 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7c0 <irq7>:
c001b7c0:	fa                   	cli    
c001b7c1:	6a 00                	push   0x0
c001b7c3:	6a 27                	push   0x27
c001b7c5:	e9 6a 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7ca <irq8>:
c001b7ca:	fa                   	cli    
c001b7cb:	6a 00                	push   0x0
c001b7cd:	6a 28                	push   0x28
c001b7cf:	e9 60 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7d4 <irq9>:
c001b7d4:	fa                   	cli    
c001b7d5:	6a 00                	push   0x0
c001b7d7:	6a 29                	push   0x29
c001b7d9:	e9 56 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7de <irq10>:
c001b7de:	fa                   	cli    
c001b7df:	6a 00                	push   0x0
c001b7e1:	6a 2a                	push   0x2a
c001b7e3:	e9 4c 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7e8 <irq11>:
c001b7e8:	fa                   	cli    
c001b7e9:	6a 00                	push   0x0
c001b7eb:	6a 2b                	push   0x2b
c001b7ed:	e9 42 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7f2 <irq12>:
c001b7f2:	fa                   	cli    
c001b7f3:	6a 00                	push   0x0
c001b7f5:	6a 2c                	push   0x2c
c001b7f7:	e9 38 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7fc <irq13>:
c001b7fc:	fa                   	cli    
c001b7fd:	6a 00                	push   0x0
c001b7ff:	6a 2d                	push   0x2d
c001b801:	e9 2e 00 00 00       	jmp    c001b834 <int_common_stub>

c001b806 <irq14>:
c001b806:	fa                   	cli    
c001b807:	6a 00                	push   0x0
c001b809:	6a 2e                	push   0x2e
c001b80b:	e9 24 00 00 00       	jmp    c001b834 <int_common_stub>

c001b810 <irq15>:
c001b810:	fa                   	cli    
c001b811:	6a 00                	push   0x0
c001b813:	6a 2f                	push   0x2f
c001b815:	e9 1a 00 00 00       	jmp    c001b834 <int_common_stub>

c001b81a <irq1>:
c001b81a:	fa                   	cli    
c001b81b:	6a 00                	push   0x0
c001b81d:	6a 21                	push   0x21
c001b81f:	eb 13                	jmp    c001b834 <int_common_stub>

c001b821 <irq2>:
c001b821:	fa                   	cli    
c001b822:	6a 00                	push   0x0
c001b824:	6a 22                	push   0x22
c001b826:	eb 0c                	jmp    c001b834 <int_common_stub>

c001b828 <isr96>:
c001b828:	6a 00                	push   0x0
c001b82a:	6a 60                	push   0x60
c001b82c:	fb                   	sti    
c001b82d:	eb 05                	jmp    c001b834 <int_common_stub>

c001b82f <irq0>:
c001b82f:	fa                   	cli    
c001b830:	6a 00                	push   0x0
c001b832:	6a 20                	push   0x20

c001b834 <int_common_stub>:
c001b834:	60                   	pusha  
c001b835:	1e                   	push   ds
c001b836:	06                   	push   es
c001b837:	0f a0                	push   fs
c001b839:	0f a8                	push   gs
c001b83b:	66 b8 10 00          	mov    ax,0x10
c001b83f:	66 8e d8             	mov    ds,ax
c001b842:	66 8e c0             	mov    es,ax
c001b845:	66 8e e0             	mov    fs,ax
c001b848:	66 8e e8             	mov    gs,ax
c001b84b:	54                   	push   esp
c001b84c:	fc                   	cld    
c001b84d:	e8 72 05 ff ff       	call   c000bdc4 <int_handler>
c001b852:	81 c4 04 00 00 00    	add    esp,0x4
c001b858:	0f a9                	pop    gs
c001b85a:	0f a1                	pop    fs
c001b85c:	07                   	pop    es
c001b85d:	1f                   	pop    ds
c001b85e:	61                   	popa   
c001b85f:	81 c4 08 00 00 00    	add    esp,0x8
c001b865:	cf                   	iret   

c001b866 <irq16>:
c001b866:	fa                   	cli    
c001b867:	6a 00                	push   0x0
c001b869:	6a 30                	push   0x30
c001b86b:	e9 c4 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b870 <irq17>:
c001b870:	fa                   	cli    
c001b871:	6a 00                	push   0x0
c001b873:	6a 31                	push   0x31
c001b875:	e9 ba ff ff ff       	jmp    c001b834 <int_common_stub>

c001b87a <irq18>:
c001b87a:	fa                   	cli    
c001b87b:	6a 00                	push   0x0
c001b87d:	6a 32                	push   0x32
c001b87f:	e9 b0 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b884 <irq19>:
c001b884:	fa                   	cli    
c001b885:	6a 00                	push   0x0
c001b887:	6a 33                	push   0x33
c001b889:	e9 a6 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b88e <irq20>:
c001b88e:	fa                   	cli    
c001b88f:	6a 00                	push   0x0
c001b891:	6a 34                	push   0x34
c001b893:	e9 9c ff ff ff       	jmp    c001b834 <int_common_stub>

c001b898 <irq21>:
c001b898:	fa                   	cli    
c001b899:	6a 00                	push   0x0
c001b89b:	6a 35                	push   0x35
c001b89d:	e9 92 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b8a2 <irq22>:
c001b8a2:	fa                   	cli    
c001b8a3:	6a 00                	push   0x0
c001b8a5:	6a 36                	push   0x36
c001b8a7:	e9 88 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b8ac <irq23>:
c001b8ac:	fa                   	cli    
c001b8ad:	6a 00                	push   0x0
c001b8af:	6a 37                	push   0x37
c001b8b1:	e9 7e ff ff ff       	jmp    c001b834 <int_common_stub>
c001b8b6:	66 90                	xchg   ax,ax
c001b8b8:	66 90                	xchg   ax,ax
c001b8ba:	66 90                	xchg   ax,ax
c001b8bc:	66 90                	xchg   ax,ax
c001b8be:	66 90                	xchg   ax,ax

c001b8c0 <i386GetRDRAND>:
c001b8c0:	b9 64 00 00 00       	mov    ecx,0x64

c001b8c5 <retry>:
c001b8c5:	0f c7 f0             	rdrand eax
c001b8c8:	72 05                	jb     c001b8cf <retry.done>
c001b8ca:	e2 f9                	loop   c001b8c5 <retry>

c001b8cc <retry.fail>:
c001b8cc:	31 c0                	xor    eax,eax
c001b8ce:	c3                   	ret    

c001b8cf <retry.done>:
c001b8cf:	c3                   	ret    

c001b8d0 <absolutelyNoChanceInHell>:
c001b8d0:	b8 01 00 00 00       	mov    eax,0x1
c001b8d5:	0f a2                	cpuid  
c001b8d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b8dd:	74 06                	je     c001b8e5 <sseDetect.noSSE>
c001b8df:	b8 01 00 00 00       	mov    eax,0x1
c001b8e4:	c3                   	ret    

c001b8e5 <sseDetect.noSSE>:
c001b8e5:	31 c0                	xor    eax,eax
c001b8e7:	c3                   	ret    

c001b8e8 <sseSave>:
c001b8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ec:	0f ae 00             	fxsave [eax]
c001b8ef:	c3                   	ret    

c001b8f0 <sseLoad>:
c001b8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8f4:	0f ae 08             	fxrstor [eax]
c001b8f7:	c3                   	ret    

c001b8f8 <sseInit>:
c001b8f8:	e8 42 00 00 00       	call   c001b93f <x87Init>
c001b8fd:	0f 20 e0             	mov    eax,cr4
c001b900:	66 0d 00 06          	or     ax,0x600
c001b904:	0f 22 e0             	mov    cr4,eax
c001b907:	c3                   	ret    

c001b908 <sseClose>:
c001b908:	c3                   	ret    
c001b909:	66 90                	xchg   ax,ax
c001b90b:	66 90                	xchg   ax,ax
c001b90d:	66 90                	xchg   ax,ax
c001b90f:	90                   	nop

c001b910 <value_37F>:
c001b910:	7f 03                	jg     c001b915 <value_37A+0x1>

c001b912 <value_37E>:
c001b912:	7e 03                	jle    c001b917 <x87Detect+0x1>

c001b914 <value_37A>:
c001b914:	7a 03                	jp     c001b919 <x87Detect+0x3>

c001b916 <x87Detect>:
c001b916:	b8 01 00 00 00       	mov    eax,0x1
c001b91b:	0f a2                	cpuid  
c001b91d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b923:	74 06                	je     c001b92b <x87Detect.nox87>
c001b925:	b8 01 00 00 00       	mov    eax,0x1
c001b92a:	c3                   	ret    

c001b92b <x87Detect.nox87>:
c001b92b:	b8 00 00 00 00       	mov    eax,0x0
c001b930:	c3                   	ret    

c001b931 <x87Save>:
c001b931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b935:	dd 30                	fnsave [eax]
c001b937:	c3                   	ret    

c001b938 <x87Load>:
c001b938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b93c:	dd 20                	frstor [eax]
c001b93e:	c3                   	ret    

c001b93f <x87Init>:
c001b93f:	0f 20 c0             	mov    eax,cr0
c001b942:	66 25 fb ff          	and    ax,0xfffb
c001b946:	66 0d 22 00          	or     ax,0x22
c001b94a:	0f 22 c0             	mov    cr0,eax
c001b94d:	db e3                	fninit 
c001b94f:	0f 06                	clts   
c001b951:	d9 2d 14 b9 01 c0    	fldcw  WORD PTR ds:0xc001b914
c001b957:	c3                   	ret    

c001b958 <x87Close>:
c001b958:	c3                   	ret    
c001b959:	66 90                	xchg   ax,ax
c001b95b:	90                   	nop

c001b95c <__do_global_ctors_aux>:
c001b95c:	a1 0c c9 01 c0       	mov    eax,ds:0xc001c90c
c001b961:	83 f8 ff             	cmp    eax,0xffffffff
c001b964:	74 1a                	je     c001b980 <__do_global_ctors_aux+0x24>
c001b966:	55                   	push   ebp
c001b967:	89 e5                	mov    ebp,esp
c001b969:	53                   	push   ebx
c001b96a:	52                   	push   edx
c001b96b:	bb 0c c9 01 c0       	mov    ebx,0xc001c90c
c001b970:	ff d0                	call   eax
c001b972:	83 eb 04             	sub    ebx,0x4
c001b975:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b977:	83 f8 ff             	cmp    eax,0xffffffff
c001b97a:	75 f4                	jne    c001b970 <__do_global_ctors_aux+0x14>
c001b97c:	58                   	pop    eax
c001b97d:	5b                   	pop    ebx
c001b97e:	5d                   	pop    ebp
c001b97f:	c3                   	ret    
c001b980:	c3                   	ret    
c001b981:	66 90                	xchg   ax,ax
c001b983:	90                   	nop

c001b984 <__divdi3>:
c001b984:	55                   	push   ebp
c001b985:	57                   	push   edi
c001b986:	56                   	push   esi
c001b987:	53                   	push   ebx
c001b988:	83 ec 1c             	sub    esp,0x1c
c001b98b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b98f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b993:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b996:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b99a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b99e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b9a2:	85 db                	test   ebx,ebx
c001b9a4:	0f 88 8e 00 00 00    	js     c001ba38 <__divdi3+0xb4>
c001b9aa:	89 dd                	mov    ebp,ebx
c001b9ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9b4:	89 d3                	mov    ebx,edx
c001b9b6:	85 d2                	test   edx,edx
c001b9b8:	79 0d                	jns    c001b9c7 <__divdi3+0x43>
c001b9ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b9be:	f7 d8                	neg    eax
c001b9c0:	83 d2 00             	adc    edx,0x0
c001b9c3:	f7 da                	neg    edx
c001b9c5:	89 d3                	mov    ebx,edx
c001b9c7:	89 c7                	mov    edi,eax
c001b9c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9cc:	85 db                	test   ebx,ebx
c001b9ce:	75 48                	jne    c001ba18 <__divdi3+0x94>
c001b9d0:	39 ef                	cmp    edi,ebp
c001b9d2:	76 24                	jbe    c001b9f8 <__divdi3+0x74>
c001b9d4:	89 ea                	mov    edx,ebp
c001b9d6:	f7 f7                	div    edi
c001b9d8:	89 c1                	mov    ecx,eax
c001b9da:	31 f6                	xor    esi,esi
c001b9dc:	89 c8                	mov    eax,ecx
c001b9de:	89 f2                	mov    edx,esi
c001b9e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9e4:	85 c9                	test   ecx,ecx
c001b9e6:	74 07                	je     c001b9ef <__divdi3+0x6b>
c001b9e8:	f7 d8                	neg    eax
c001b9ea:	83 d2 00             	adc    edx,0x0
c001b9ed:	f7 da                	neg    edx
c001b9ef:	83 c4 1c             	add    esp,0x1c
c001b9f2:	5b                   	pop    ebx
c001b9f3:	5e                   	pop    esi
c001b9f4:	5f                   	pop    edi
c001b9f5:	5d                   	pop    ebp
c001b9f6:	c3                   	ret    
c001b9f7:	90                   	nop
c001b9f8:	85 ff                	test   edi,edi
c001b9fa:	75 0b                	jne    c001ba07 <__divdi3+0x83>
c001b9fc:	b8 01 00 00 00       	mov    eax,0x1
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	f7 f3                	div    ebx
c001ba05:	89 c7                	mov    edi,eax
c001ba07:	31 d2                	xor    edx,edx
c001ba09:	89 e8                	mov    eax,ebp
c001ba0b:	f7 f7                	div    edi
c001ba0d:	89 c6                	mov    esi,eax
c001ba0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba12:	f7 f7                	div    edi
c001ba14:	89 c1                	mov    ecx,eax
c001ba16:	eb c4                	jmp    c001b9dc <__divdi3+0x58>
c001ba18:	39 eb                	cmp    ebx,ebp
c001ba1a:	77 3c                	ja     c001ba58 <__divdi3+0xd4>
c001ba1c:	0f bd f3             	bsr    esi,ebx
c001ba1f:	83 f6 1f             	xor    esi,0x1f
c001ba22:	75 40                	jne    c001ba64 <__divdi3+0xe0>
c001ba24:	39 eb                	cmp    ebx,ebp
c001ba26:	72 09                	jb     c001ba31 <__divdi3+0xad>
c001ba28:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ba2b:	0f 87 97 00 00 00    	ja     c001bac8 <__divdi3+0x144>
c001ba31:	b9 01 00 00 00       	mov    ecx,0x1
c001ba36:	eb a4                	jmp    c001b9dc <__divdi3+0x58>
c001ba38:	f7 d9                	neg    ecx
c001ba3a:	83 d3 00             	adc    ebx,0x0
c001ba3d:	f7 db                	neg    ebx
c001ba3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba42:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ba46:	89 dd                	mov    ebp,ebx
c001ba48:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ba50:	e9 5f ff ff ff       	jmp    c001b9b4 <__divdi3+0x30>
c001ba55:	8d 76 00             	lea    esi,[esi+0x0]
c001ba58:	31 f6                	xor    esi,esi
c001ba5a:	31 c9                	xor    ecx,ecx
c001ba5c:	e9 7b ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001ba61:	8d 76 00             	lea    esi,[esi+0x0]
c001ba64:	b8 20 00 00 00       	mov    eax,0x20
c001ba69:	29 f0                	sub    eax,esi
c001ba6b:	89 f1                	mov    ecx,esi
c001ba6d:	d3 e3                	shl    ebx,cl
c001ba6f:	89 fa                	mov    edx,edi
c001ba71:	88 c1                	mov    cl,al
c001ba73:	d3 ea                	shr    edx,cl
c001ba75:	09 da                	or     edx,ebx
c001ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba7b:	89 f1                	mov    ecx,esi
c001ba7d:	d3 e7                	shl    edi,cl
c001ba7f:	89 eb                	mov    ebx,ebp
c001ba81:	88 c1                	mov    cl,al
c001ba83:	d3 eb                	shr    ebx,cl
c001ba85:	89 f1                	mov    ecx,esi
c001ba87:	d3 e5                	shl    ebp,cl
c001ba89:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ba8c:	88 c1                	mov    cl,al
c001ba8e:	d3 ea                	shr    edx,cl
c001ba90:	09 d5                	or     ebp,edx
c001ba92:	89 e8                	mov    eax,ebp
c001ba94:	89 da                	mov    edx,ebx
c001ba96:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ba9a:	89 d3                	mov    ebx,edx
c001ba9c:	89 c5                	mov    ebp,eax
c001ba9e:	f7 e7                	mul    edi
c001baa0:	39 d3                	cmp    ebx,edx
c001baa2:	72 18                	jb     c001babc <__divdi3+0x138>
c001baa4:	74 0a                	je     c001bab0 <__divdi3+0x12c>
c001baa6:	89 e9                	mov    ecx,ebp
c001baa8:	31 f6                	xor    esi,esi
c001baaa:	e9 2d ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001baaf:	90                   	nop
c001bab0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bab3:	89 f1                	mov    ecx,esi
c001bab5:	d3 e7                	shl    edi,cl
c001bab7:	39 c7                	cmp    edi,eax
c001bab9:	73 eb                	jae    c001baa6 <__divdi3+0x122>
c001babb:	90                   	nop
c001babc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001babf:	31 f6                	xor    esi,esi
c001bac1:	e9 16 ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001bac6:	66 90                	xchg   ax,ax
c001bac8:	31 c9                	xor    ecx,ecx
c001baca:	e9 0d ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001bacf:	90                   	nop

c001bad0 <__moddi3>:
c001bad0:	55                   	push   ebp
c001bad1:	57                   	push   edi
c001bad2:	56                   	push   esi
c001bad3:	53                   	push   ebx
c001bad4:	83 ec 2c             	sub    esp,0x2c
c001bad7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001badb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001badf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bae3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bae7:	85 db                	test   ebx,ebx
c001bae9:	0f 88 85 00 00 00    	js     c001bb74 <__moddi3+0xa4>
c001baef:	89 de                	mov    esi,ebx
c001baf1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001baf9:	89 d7                	mov    edi,edx
c001bafb:	85 d2                	test   edx,edx
c001bafd:	79 09                	jns    c001bb08 <__moddi3+0x38>
c001baff:	f7 d8                	neg    eax
c001bb01:	83 d2 00             	adc    edx,0x0
c001bb04:	f7 da                	neg    edx
c001bb06:	89 d7                	mov    edi,edx
c001bb08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb0c:	89 cd                	mov    ebp,ecx
c001bb0e:	85 ff                	test   edi,edi
c001bb10:	75 52                	jne    c001bb64 <__moddi3+0x94>
c001bb12:	89 c3                	mov    ebx,eax
c001bb14:	39 f0                	cmp    eax,esi
c001bb16:	76 24                	jbe    c001bb3c <__moddi3+0x6c>
c001bb18:	89 c8                	mov    eax,ecx
c001bb1a:	89 f2                	mov    edx,esi
c001bb1c:	f7 f3                	div    ebx
c001bb1e:	89 d6                	mov    esi,edx
c001bb20:	89 f0                	mov    eax,esi
c001bb22:	31 d2                	xor    edx,edx
c001bb24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb28:	85 c9                	test   ecx,ecx
c001bb2a:	74 07                	je     c001bb33 <__moddi3+0x63>
c001bb2c:	f7 d8                	neg    eax
c001bb2e:	83 d2 00             	adc    edx,0x0
c001bb31:	f7 da                	neg    edx
c001bb33:	83 c4 2c             	add    esp,0x2c
c001bb36:	5b                   	pop    ebx
c001bb37:	5e                   	pop    esi
c001bb38:	5f                   	pop    edi
c001bb39:	5d                   	pop    ebp
c001bb3a:	c3                   	ret    
c001bb3b:	90                   	nop
c001bb3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb40:	85 db                	test   ebx,ebx
c001bb42:	75 0d                	jne    c001bb51 <__moddi3+0x81>
c001bb44:	b8 01 00 00 00       	mov    eax,0x1
c001bb49:	31 d2                	xor    edx,edx
c001bb4b:	f7 f7                	div    edi
c001bb4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb51:	89 f0                	mov    eax,esi
c001bb53:	31 d2                	xor    edx,edx
c001bb55:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb59:	f7 f7                	div    edi
c001bb5b:	89 e8                	mov    eax,ebp
c001bb5d:	f7 f7                	div    edi
c001bb5f:	89 d6                	mov    esi,edx
c001bb61:	eb bd                	jmp    c001bb20 <__moddi3+0x50>
c001bb63:	90                   	nop
c001bb64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb68:	39 f7                	cmp    edi,esi
c001bb6a:	76 20                	jbe    c001bb8c <__moddi3+0xbc>
c001bb6c:	89 c8                	mov    eax,ecx
c001bb6e:	89 f2                	mov    edx,esi
c001bb70:	eb b2                	jmp    c001bb24 <__moddi3+0x54>
c001bb72:	66 90                	xchg   ax,ax
c001bb74:	f7 d9                	neg    ecx
c001bb76:	83 d3 00             	adc    ebx,0x0
c001bb79:	f7 db                	neg    ebx
c001bb7b:	89 de                	mov    esi,ebx
c001bb7d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bb85:	e9 6f ff ff ff       	jmp    c001baf9 <__moddi3+0x29>
c001bb8a:	66 90                	xchg   ax,ax
c001bb8c:	0f bd c7             	bsr    eax,edi
c001bb8f:	83 f0 1f             	xor    eax,0x1f
c001bb92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb96:	75 24                	jne    c001bbbc <__moddi3+0xec>
c001bb98:	39 f7                	cmp    edi,esi
c001bb9a:	72 06                	jb     c001bba2 <__moddi3+0xd2>
c001bb9c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bba0:	77 0c                	ja     c001bbae <__moddi3+0xde>
c001bba2:	89 e9                	mov    ecx,ebp
c001bba4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bba8:	19 fe                	sbb    esi,edi
c001bbaa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bbae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbb2:	89 f2                	mov    edx,esi
c001bbb4:	e9 6b ff ff ff       	jmp    c001bb24 <__moddi3+0x54>
c001bbb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbbc:	b8 20 00 00 00       	mov    eax,0x20
c001bbc1:	89 c2                	mov    edx,eax
c001bbc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bbc7:	29 da                	sub    edx,ebx
c001bbc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bbcd:	88 d9                	mov    cl,bl
c001bbcf:	d3 e7                	shl    edi,cl
c001bbd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbd5:	88 d1                	mov    cl,dl
c001bbd7:	d3 e8                	shr    eax,cl
c001bbd9:	09 c7                	or     edi,eax
c001bbdb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bbdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bbe3:	89 d8                	mov    eax,ebx
c001bbe5:	88 d9                	mov    cl,bl
c001bbe7:	d3 e7                	shl    edi,cl
c001bbe9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bbed:	89 f3                	mov    ebx,esi
c001bbef:	88 d1                	mov    cl,dl
c001bbf1:	d3 eb                	shr    ebx,cl
c001bbf3:	89 c7                	mov    edi,eax
c001bbf5:	88 c1                	mov    cl,al
c001bbf7:	d3 e6                	shl    esi,cl
c001bbf9:	89 e8                	mov    eax,ebp
c001bbfb:	88 d1                	mov    cl,dl
c001bbfd:	d3 e8                	shr    eax,cl
c001bbff:	09 f0                	or     eax,esi
c001bc01:	89 f9                	mov    ecx,edi
c001bc03:	d3 e5                	shl    ebp,cl
c001bc05:	89 da                	mov    edx,ebx
c001bc07:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bc0b:	89 d3                	mov    ebx,edx
c001bc0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc11:	89 c6                	mov    esi,eax
c001bc13:	89 d1                	mov    ecx,edx
c001bc15:	39 d3                	cmp    ebx,edx
c001bc17:	72 27                	jb     c001bc40 <__moddi3+0x170>
c001bc19:	74 21                	je     c001bc3c <__moddi3+0x16c>
c001bc1b:	29 f5                	sub    ebp,esi
c001bc1d:	19 cb                	sbb    ebx,ecx
c001bc1f:	89 de                	mov    esi,ebx
c001bc21:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bc25:	d3 e6                	shl    esi,cl
c001bc27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bc2b:	89 f9                	mov    ecx,edi
c001bc2d:	d3 ed                	shr    ebp,cl
c001bc2f:	09 ee                	or     esi,ebp
c001bc31:	89 f0                	mov    eax,esi
c001bc33:	d3 eb                	shr    ebx,cl
c001bc35:	89 da                	mov    edx,ebx
c001bc37:	e9 e8 fe ff ff       	jmp    c001bb24 <__moddi3+0x54>
c001bc3c:	39 c5                	cmp    ebp,eax
c001bc3e:	73 db                	jae    c001bc1b <__moddi3+0x14b>
c001bc40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bc44:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bc48:	89 d1                	mov    ecx,edx
c001bc4a:	89 c6                	mov    esi,eax
c001bc4c:	eb cd                	jmp    c001bc1b <__moddi3+0x14b>
c001bc4e:	66 90                	xchg   ax,ax

c001bc50 <__udivdi3>:
c001bc50:	55                   	push   ebp
c001bc51:	57                   	push   edi
c001bc52:	56                   	push   esi
c001bc53:	53                   	push   ebx
c001bc54:	83 ec 1c             	sub    esp,0x1c
c001bc57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bc5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bc5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bc63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc67:	85 d2                	test   edx,edx
c001bc69:	75 41                	jne    c001bcac <__udivdi3+0x5c>
c001bc6b:	39 f7                	cmp    edi,esi
c001bc6d:	76 15                	jbe    c001bc84 <__udivdi3+0x34>
c001bc6f:	89 e8                	mov    eax,ebp
c001bc71:	89 f2                	mov    edx,esi
c001bc73:	f7 f7                	div    edi
c001bc75:	31 db                	xor    ebx,ebx
c001bc77:	89 da                	mov    edx,ebx
c001bc79:	83 c4 1c             	add    esp,0x1c
c001bc7c:	5b                   	pop    ebx
c001bc7d:	5e                   	pop    esi
c001bc7e:	5f                   	pop    edi
c001bc7f:	5d                   	pop    ebp
c001bc80:	c3                   	ret    
c001bc81:	8d 76 00             	lea    esi,[esi+0x0]
c001bc84:	89 f9                	mov    ecx,edi
c001bc86:	85 ff                	test   edi,edi
c001bc88:	75 0b                	jne    c001bc95 <__udivdi3+0x45>
c001bc8a:	b8 01 00 00 00       	mov    eax,0x1
c001bc8f:	31 d2                	xor    edx,edx
c001bc91:	f7 f7                	div    edi
c001bc93:	89 c1                	mov    ecx,eax
c001bc95:	31 d2                	xor    edx,edx
c001bc97:	89 f0                	mov    eax,esi
c001bc99:	f7 f1                	div    ecx
c001bc9b:	89 c3                	mov    ebx,eax
c001bc9d:	89 e8                	mov    eax,ebp
c001bc9f:	f7 f1                	div    ecx
c001bca1:	89 da                	mov    edx,ebx
c001bca3:	83 c4 1c             	add    esp,0x1c
c001bca6:	5b                   	pop    ebx
c001bca7:	5e                   	pop    esi
c001bca8:	5f                   	pop    edi
c001bca9:	5d                   	pop    ebp
c001bcaa:	c3                   	ret    
c001bcab:	90                   	nop
c001bcac:	39 f2                	cmp    edx,esi
c001bcae:	77 1c                	ja     c001bccc <__udivdi3+0x7c>
c001bcb0:	0f bd da             	bsr    ebx,edx
c001bcb3:	83 f3 1f             	xor    ebx,0x1f
c001bcb6:	75 24                	jne    c001bcdc <__udivdi3+0x8c>
c001bcb8:	39 f2                	cmp    edx,esi
c001bcba:	72 08                	jb     c001bcc4 <__udivdi3+0x74>
c001bcbc:	39 ef                	cmp    edi,ebp
c001bcbe:	0f 87 84 00 00 00    	ja     c001bd48 <__udivdi3+0xf8>
c001bcc4:	b8 01 00 00 00       	mov    eax,0x1
c001bcc9:	eb ac                	jmp    c001bc77 <__udivdi3+0x27>
c001bccb:	90                   	nop
c001bccc:	31 db                	xor    ebx,ebx
c001bcce:	31 c0                	xor    eax,eax
c001bcd0:	89 da                	mov    edx,ebx
c001bcd2:	83 c4 1c             	add    esp,0x1c
c001bcd5:	5b                   	pop    ebx
c001bcd6:	5e                   	pop    esi
c001bcd7:	5f                   	pop    edi
c001bcd8:	5d                   	pop    ebp
c001bcd9:	c3                   	ret    
c001bcda:	66 90                	xchg   ax,ax
c001bcdc:	b8 20 00 00 00       	mov    eax,0x20
c001bce1:	29 d8                	sub    eax,ebx
c001bce3:	88 d9                	mov    cl,bl
c001bce5:	d3 e2                	shl    edx,cl
c001bce7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bceb:	89 fa                	mov    edx,edi
c001bced:	88 c1                	mov    cl,al
c001bcef:	d3 ea                	shr    edx,cl
c001bcf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bcf5:	09 d1                	or     ecx,edx
c001bcf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bcfb:	88 d9                	mov    cl,bl
c001bcfd:	d3 e7                	shl    edi,cl
c001bcff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd03:	89 f7                	mov    edi,esi
c001bd05:	88 c1                	mov    cl,al
c001bd07:	d3 ef                	shr    edi,cl
c001bd09:	88 d9                	mov    cl,bl
c001bd0b:	d3 e6                	shl    esi,cl
c001bd0d:	89 ea                	mov    edx,ebp
c001bd0f:	88 c1                	mov    cl,al
c001bd11:	d3 ea                	shr    edx,cl
c001bd13:	09 d6                	or     esi,edx
c001bd15:	89 f0                	mov    eax,esi
c001bd17:	89 fa                	mov    edx,edi
c001bd19:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd1d:	89 d7                	mov    edi,edx
c001bd1f:	89 c6                	mov    esi,eax
c001bd21:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd25:	39 d7                	cmp    edi,edx
c001bd27:	72 13                	jb     c001bd3c <__udivdi3+0xec>
c001bd29:	74 09                	je     c001bd34 <__udivdi3+0xe4>
c001bd2b:	89 f0                	mov    eax,esi
c001bd2d:	31 db                	xor    ebx,ebx
c001bd2f:	e9 43 ff ff ff       	jmp    c001bc77 <__udivdi3+0x27>
c001bd34:	88 d9                	mov    cl,bl
c001bd36:	d3 e5                	shl    ebp,cl
c001bd38:	39 c5                	cmp    ebp,eax
c001bd3a:	73 ef                	jae    c001bd2b <__udivdi3+0xdb>
c001bd3c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bd3f:	31 db                	xor    ebx,ebx
c001bd41:	e9 31 ff ff ff       	jmp    c001bc77 <__udivdi3+0x27>
c001bd46:	66 90                	xchg   ax,ax
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	e9 28 ff ff ff       	jmp    c001bc77 <__udivdi3+0x27>
c001bd4f:	90                   	nop

c001bd50 <__umoddi3>:
c001bd50:	55                   	push   ebp
c001bd51:	57                   	push   edi
c001bd52:	56                   	push   esi
c001bd53:	53                   	push   ebx
c001bd54:	83 ec 1c             	sub    esp,0x1c
c001bd57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bd63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd67:	89 da                	mov    edx,ebx
c001bd69:	85 c0                	test   eax,eax
c001bd6b:	75 37                	jne    c001bda4 <__umoddi3+0x54>
c001bd6d:	39 df                	cmp    edi,ebx
c001bd6f:	76 13                	jbe    c001bd84 <__umoddi3+0x34>
c001bd71:	89 f0                	mov    eax,esi
c001bd73:	f7 f7                	div    edi
c001bd75:	89 d0                	mov    eax,edx
c001bd77:	31 d2                	xor    edx,edx
c001bd79:	83 c4 1c             	add    esp,0x1c
c001bd7c:	5b                   	pop    ebx
c001bd7d:	5e                   	pop    esi
c001bd7e:	5f                   	pop    edi
c001bd7f:	5d                   	pop    ebp
c001bd80:	c3                   	ret    
c001bd81:	8d 76 00             	lea    esi,[esi+0x0]
c001bd84:	89 fd                	mov    ebp,edi
c001bd86:	85 ff                	test   edi,edi
c001bd88:	75 0b                	jne    c001bd95 <__umoddi3+0x45>
c001bd8a:	b8 01 00 00 00       	mov    eax,0x1
c001bd8f:	31 d2                	xor    edx,edx
c001bd91:	f7 f7                	div    edi
c001bd93:	89 c5                	mov    ebp,eax
c001bd95:	89 d8                	mov    eax,ebx
c001bd97:	31 d2                	xor    edx,edx
c001bd99:	f7 f5                	div    ebp
c001bd9b:	89 f0                	mov    eax,esi
c001bd9d:	f7 f5                	div    ebp
c001bd9f:	89 d0                	mov    eax,edx
c001bda1:	eb d4                	jmp    c001bd77 <__umoddi3+0x27>
c001bda3:	90                   	nop
c001bda4:	89 f1                	mov    ecx,esi
c001bda6:	39 d8                	cmp    eax,ebx
c001bda8:	76 0a                	jbe    c001bdb4 <__umoddi3+0x64>
c001bdaa:	89 f0                	mov    eax,esi
c001bdac:	83 c4 1c             	add    esp,0x1c
c001bdaf:	5b                   	pop    ebx
c001bdb0:	5e                   	pop    esi
c001bdb1:	5f                   	pop    edi
c001bdb2:	5d                   	pop    ebp
c001bdb3:	c3                   	ret    
c001bdb4:	0f bd e8             	bsr    ebp,eax
c001bdb7:	83 f5 1f             	xor    ebp,0x1f
c001bdba:	75 1c                	jne    c001bdd8 <__umoddi3+0x88>
c001bdbc:	39 d8                	cmp    eax,ebx
c001bdbe:	72 04                	jb     c001bdc4 <__umoddi3+0x74>
c001bdc0:	39 f7                	cmp    edi,esi
c001bdc2:	77 08                	ja     c001bdcc <__umoddi3+0x7c>
c001bdc4:	89 da                	mov    edx,ebx
c001bdc6:	29 fe                	sub    esi,edi
c001bdc8:	19 c2                	sbb    edx,eax
c001bdca:	89 f1                	mov    ecx,esi
c001bdcc:	89 c8                	mov    eax,ecx
c001bdce:	83 c4 1c             	add    esp,0x1c
c001bdd1:	5b                   	pop    ebx
c001bdd2:	5e                   	pop    esi
c001bdd3:	5f                   	pop    edi
c001bdd4:	5d                   	pop    ebp
c001bdd5:	c3                   	ret    
c001bdd6:	66 90                	xchg   ax,ax
c001bdd8:	ba 20 00 00 00       	mov    edx,0x20
c001bddd:	29 ea                	sub    edx,ebp
c001bddf:	89 e9                	mov    ecx,ebp
c001bde1:	d3 e0                	shl    eax,cl
c001bde3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bde7:	89 f8                	mov    eax,edi
c001bde9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bded:	88 d1                	mov    cl,dl
c001bdef:	d3 e8                	shr    eax,cl
c001bdf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bdf5:	09 c1                	or     ecx,eax
c001bdf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bdfb:	89 e9                	mov    ecx,ebp
c001bdfd:	d3 e7                	shl    edi,cl
c001bdff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001be03:	89 d8                	mov    eax,ebx
c001be05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be09:	88 d1                	mov    cl,dl
c001be0b:	d3 e8                	shr    eax,cl
c001be0d:	89 c7                	mov    edi,eax
c001be0f:	89 e9                	mov    ecx,ebp
c001be11:	d3 e3                	shl    ebx,cl
c001be13:	89 f0                	mov    eax,esi
c001be15:	88 d1                	mov    cl,dl
c001be17:	d3 e8                	shr    eax,cl
c001be19:	09 d8                	or     eax,ebx
c001be1b:	89 e9                	mov    ecx,ebp
c001be1d:	d3 e6                	shl    esi,cl
c001be1f:	89 f3                	mov    ebx,esi
c001be21:	89 fa                	mov    edx,edi
c001be23:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001be27:	89 d1                	mov    ecx,edx
c001be29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be2d:	89 c6                	mov    esi,eax
c001be2f:	89 d7                	mov    edi,edx
c001be31:	39 d1                	cmp    ecx,edx
c001be33:	72 27                	jb     c001be5c <__umoddi3+0x10c>
c001be35:	74 21                	je     c001be58 <__umoddi3+0x108>
c001be37:	89 ca                	mov    edx,ecx
c001be39:	29 f3                	sub    ebx,esi
c001be3b:	19 fa                	sbb    edx,edi
c001be3d:	89 d0                	mov    eax,edx
c001be3f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001be43:	d3 e0                	shl    eax,cl
c001be45:	89 e9                	mov    ecx,ebp
c001be47:	d3 eb                	shr    ebx,cl
c001be49:	09 d8                	or     eax,ebx
c001be4b:	d3 ea                	shr    edx,cl
c001be4d:	83 c4 1c             	add    esp,0x1c
c001be50:	5b                   	pop    ebx
c001be51:	5e                   	pop    esi
c001be52:	5f                   	pop    edi
c001be53:	5d                   	pop    ebp
c001be54:	c3                   	ret    
c001be55:	8d 76 00             	lea    esi,[esi+0x0]
c001be58:	39 c3                	cmp    ebx,eax
c001be5a:	73 db                	jae    c001be37 <__umoddi3+0xe7>
c001be5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001be60:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001be64:	89 d7                	mov    edi,edx
c001be66:	89 c6                	mov    esi,eax
c001be68:	eb cd                	jmp    c001be37 <__umoddi3+0xe7>

Disassembly of section .init:

c001be6a <_init>:
c001be6a:	55                   	push   ebp
c001be6b:	89 e5                	mov    ebp,esp
c001be6d:	e8 82 42 fe ff       	call   c00000f4 <frame_dummy>
c001be72:	e8 e5 fa ff ff       	call   c001b95c <__do_global_ctors_aux>
c001be77:	5d                   	pop    ebp
c001be78:	c3                   	ret    

Disassembly of section .fini:

c001be79 <_fini>:
c001be79:	55                   	push   ebp
c001be7a:	89 e5                	mov    ebp,esp
c001be7c:	e8 03 42 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001be81:	5d                   	pop    ebp
c001be82:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001be84 <Computer::~Computer()>:
c001be84:	83 ec 0c             	sub    esp,0xc
c001be87:	ba 38 d1 01 c0       	mov    edx,0xc001d138
c001be8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be90:	89 10                	mov    DWORD PTR [eax],edx
c001be92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be96:	83 ec 0c             	sub    esp,0xc
c001be99:	50                   	push   eax
c001be9a:	e8 7b f9 fe ff       	call   c000b81a <Device::~Device()>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	90                   	nop
c001bea3:	83 c4 0c             	add    esp,0xc
c001bea6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001bea8 <Computer::~Computer()>:
c001bea8:	83 ec 0c             	sub    esp,0xc
c001beab:	83 ec 0c             	sub    esp,0xc
c001beae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001beb2:	e8 cd ff ff ff       	call   c001be84 <Computer::~Computer()>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	83 ec 08             	sub    esp,0x8
c001bebd:	68 70 01 00 00       	push   0x170
c001bec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bec6:	e8 17 e5 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	83 c4 0c             	add    esp,0xc
c001bed1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001bed2 <idleCommon()>:
c001bed2:	83 ec 0c             	sub    esp,0xc
c001bed5:	fa                   	cli    
c001bed6:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001bedc:	e8 6b 74 ff ff       	call   c001334c <schedule()>
c001bee1:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001bee6:	48                   	dec    eax
c001bee7:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001beec:	75 01                	jne    c001beef <idleCommon()+0x1d>
c001beee:	fb                   	sti    
c001beef:	83 c4 0c             	add    esp,0xc
c001bef2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001bef4 <LinkedList<UnixFile>::~LinkedList()>:
c001bef4:	90                   	nop
c001bef5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001bef6 <LinkedList<UnixFile>::LinkedList()>:
c001bef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf36:	90                   	nop
c001bf37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bf38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bf38:	83 ec 0c             	sub    esp,0xc
c001bf3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf40:	75 10                	jne    c001bf52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bf42:	83 ec 0c             	sub    esp,0xc
c001bf45:	68 98 d3 01 c0       	push   0xc001d398
c001bf4a:	e8 ec 41 ff ff       	call   c001013b <KePanic(char const*)>
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf56:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf58:	85 c0                	test   eax,eax
c001bf5a:	74 34                	je     c001bf90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf63:	85 c0                	test   eax,eax
c001bf65:	74 29                	je     c001bf90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf8e:	eb 65                	jmp    c001bff5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf94:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf96:	85 c0                	test   eax,eax
c001bf98:	75 4b                	jne    c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfa1:	85 c0                	test   eax,eax
c001bfa3:	75 40                	jne    c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfad:	89 10                	mov    DWORD PTR [eax],edx
c001bfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfcf:	85 c0                	test   eax,eax
c001bfd1:	74 22                	je     c001bff5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	68 ba d3 01 c0       	push   0xc001d3ba
c001bfdb:	e8 5b 41 ff ff       	call   c001013b <KePanic(char const*)>
c001bfe0:	83 c4 10             	add    esp,0x10
c001bfe3:	eb 10                	jmp    c001bff5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfe5:	83 ec 0c             	sub    esp,0xc
c001bfe8:	68 c4 d3 01 c0       	push   0xc001d3c4
c001bfed:	e8 49 41 ff ff       	call   c001013b <KePanic(char const*)>
c001bff2:	83 c4 10             	add    esp,0x10
c001bff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bffc:	8d 50 01             	lea    edx,[eax+0x1]
c001bfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c003:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c006:	90                   	nop
c001c007:	83 c4 0c             	add    esp,0xc
c001c00a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c00c <LinkedList<UnixFile>::getFirstElement()>:
c001c00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c010:	8b 00                	mov    eax,DWORD PTR [eax]
c001c012:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c014 <LinkedList<UnixFile>::removeFirst()>:
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c01b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c01d:	85 c0                	test   eax,eax
c001c01f:	75 12                	jne    c001c033 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c021:	83 ec 0c             	sub    esp,0xc
c001c024:	68 d0 d3 01 c0       	push   0xc001d3d0
c001c029:	e8 0d 41 ff ff       	call   c001013b <KePanic(char const*)>
c001c02e:	83 c4 10             	add    esp,0x10
c001c031:	eb 7e                	jmp    c001c0b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c03a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c03d:	85 c0                	test   eax,eax
c001c03f:	74 10                	je     c001c051 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c041:	83 ec 0c             	sub    esp,0xc
c001c044:	68 1b d4 01 c0       	push   0xc001d41b
c001c049:	e8 ed 40 ff ff       	call   c001013b <KePanic(char const*)>
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c055:	8b 00                	mov    eax,DWORD PTR [eax]
c001c057:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c05a:	85 c0                	test   eax,eax
c001c05c:	75 33                	jne    c001c091 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c077:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c07a:	83 f8 01             	cmp    eax,0x1
c001c07d:	74 21                	je     c001c0a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c07f:	83 ec 0c             	sub    esp,0xc
c001c082:	68 f4 d3 01 c0       	push   0xc001d3f4
c001c087:	e8 af 40 ff ff       	call   c001013b <KePanic(char const*)>
c001c08c:	83 c4 10             	add    esp,0x10
c001c08f:	eb 0f                	jmp    c001c0a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c095:	8b 00                	mov    eax,DWORD PTR [eax]
c001c097:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c09e:	89 10                	mov    DWORD PTR [eax],edx
c001c0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c0b1:	83 c4 0c             	add    esp,0xc
c001c0b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c0b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c0b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c0be <DriverlessDevice::~DriverlessDevice()>:
c001c0be:	ba 5c da 01 c0       	mov    edx,0xc001da5c
c001c0c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0c7:	89 10                	mov    DWORD PTR [eax],edx
c001c0c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0cd:	50                   	push   eax
c001c0ce:	e8 47 f7 fe ff       	call   c000b81a <Device::~Device()>
c001c0d3:	83 c4 04             	add    esp,0x4
c001c0d6:	90                   	nop
c001c0d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c0d8 <DriverlessDevice::~DriverlessDevice()>:
c001c0d8:	83 ec 0c             	sub    esp,0xc
c001c0db:	83 ec 0c             	sub    esp,0xc
c001c0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e2:	e8 d7 ff ff ff       	call   c001c0be <DriverlessDevice::~DriverlessDevice()>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	83 ec 08             	sub    esp,0x8
c001c0ed:	68 58 01 00 00       	push   0x158
c001c0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0f6:	e8 e7 e2 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c0fb:	83 c4 10             	add    esp,0x10
c001c0fe:	83 c4 0c             	add    esp,0xc
c001c101:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c102 <LinkedList<Device>::addElement(Device*)>:
c001c102:	83 ec 0c             	sub    esp,0xc
c001c105:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c10a:	75 10                	jne    c001c11c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c10c:	83 ec 0c             	sub    esp,0xc
c001c10f:	68 98 d3 01 c0       	push   0xc001d398
c001c114:	e8 22 40 ff ff       	call   c001013b <KePanic(char const*)>
c001c119:	83 c4 10             	add    esp,0x10
c001c11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c120:	8b 00                	mov    eax,DWORD PTR [eax]
c001c122:	85 c0                	test   eax,eax
c001c124:	74 3a                	je     c001c160 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c12d:	85 c0                	test   eax,eax
c001c12f:	74 2f                	je     c001c160 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c135:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c138:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c13c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c146:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c14a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c151:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c154:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c15e:	eb 68                	jmp    c001c1c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c164:	8b 00                	mov    eax,DWORD PTR [eax]
c001c166:	85 c0                	test   eax,eax
c001c168:	75 4e                	jne    c001c1b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c16e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c171:	85 c0                	test   eax,eax
c001c173:	75 43                	jne    c001c1b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c179:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c17d:	89 10                	mov    DWORD PTR [eax],edx
c001c17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c183:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c187:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c191:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1a2:	85 c0                	test   eax,eax
c001c1a4:	74 22                	je     c001c1c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	68 ba d3 01 c0       	push   0xc001d3ba
c001c1ae:	e8 88 3f ff ff       	call   c001013b <KePanic(char const*)>
c001c1b3:	83 c4 10             	add    esp,0x10
c001c1b6:	eb 10                	jmp    c001c1c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1b8:	83 ec 0c             	sub    esp,0xc
c001c1bb:	68 c4 d3 01 c0       	push   0xc001d3c4
c001c1c0:	e8 76 3f ff ff       	call   c001013b <KePanic(char const*)>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1cf:	8d 50 01             	lea    edx,[eax+0x1]
c001c1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c1d9:	90                   	nop
c001c1da:	83 c4 0c             	add    esp,0xc
c001c1dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c1de <LinkedList<Device>::LinkedList()>:
c001c1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c202:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c20c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c213:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c217:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c21e:	90                   	nop
c001c21f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c224:	8b 00                	mov    eax,DWORD PTR [eax]
c001c226:	85 c0                	test   eax,eax
c001c228:	75 0e                	jne    c001c238 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c22e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c231:	85 c0                	test   eax,eax
c001c233:	75 03                	jne    c001c238 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c235:	b0 01                	mov    al,0x1
c001c237:	c3                   	ret    
c001c238:	b0 00                	mov    al,0x0
c001c23a:	90                   	nop
c001c23b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c240:	8b 00                	mov    eax,DWORD PTR [eax]
c001c242:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c24d:	85 c0                	test   eax,eax
c001c24f:	75 17                	jne    c001c268 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c251:	83 ec 0c             	sub    esp,0xc
c001c254:	68 d0 d3 01 c0       	push   0xc001d3d0
c001c259:	e8 dd 3e ff ff       	call   c001013b <KePanic(char const*)>
c001c25e:	83 c4 10             	add    esp,0x10
c001c261:	e9 92 00 00 00       	jmp    c001c2f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c266:	66 90                	xchg   ax,ax
c001c268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c26f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c272:	85 c0                	test   eax,eax
c001c274:	0f 95 c0             	setne  al
c001c277:	84 c0                	test   al,al
c001c279:	74 11                	je     c001c28c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c27b:	83 ec 0c             	sub    esp,0xc
c001c27e:	68 1b d4 01 c0       	push   0xc001d41b
c001c283:	e8 b3 3e ff ff       	call   c001013b <KePanic(char const*)>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	90                   	nop
c001c28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c290:	8b 00                	mov    eax,DWORD PTR [eax]
c001c292:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c295:	85 c0                	test   eax,eax
c001c297:	0f 94 c0             	sete   al
c001c29a:	84 c0                	test   al,al
c001c29c:	74 36                	je     c001c2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2ba:	83 f8 01             	cmp    eax,0x1
c001c2bd:	74 25                	je     c001c2e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2bf:	83 ec 0c             	sub    esp,0xc
c001c2c2:	68 f4 d3 01 c0       	push   0xc001d3f4
c001c2c7:	e8 6f 3e ff ff       	call   c001013b <KePanic(char const*)>
c001c2cc:	83 c4 10             	add    esp,0x10
c001c2cf:	eb 13                	jmp    c001c2e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e1:	89 10                	mov    DWORD PTR [eax],edx
c001c2e3:	90                   	nop
c001c2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2f8:	83 c4 0c             	add    esp,0xc
c001c2fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c304:	75 12                	jne    c001c318 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c306:	83 ec 0c             	sub    esp,0xc
c001c309:	68 98 d3 01 c0       	push   0xc001d398
c001c30e:	e8 28 3e ff ff       	call   c001013b <KePanic(char const*)>
c001c313:	83 c4 10             	add    esp,0x10
c001c316:	66 90                	xchg   ax,ax
c001c318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c31e:	85 c0                	test   eax,eax
c001c320:	74 36                	je     c001c358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c329:	85 c0                	test   eax,eax
c001c32b:	74 2b                	je     c001c358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c331:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c334:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c338:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c343:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c34d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c354:	eb 6a                	jmp    c001c3c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c356:	66 90                	xchg   ax,ax
c001c358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c35e:	85 c0                	test   eax,eax
c001c360:	75 4e                	jne    c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c369:	85 c0                	test   eax,eax
c001c36b:	75 43                	jne    c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c371:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c375:	89 10                	mov    DWORD PTR [eax],edx
c001c377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c37f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c386:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c389:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c394:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c397:	85 c0                	test   eax,eax
c001c399:	74 25                	je     c001c3c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c39b:	83 ec 0c             	sub    esp,0xc
c001c39e:	68 ba d3 01 c0       	push   0xc001d3ba
c001c3a3:	e8 93 3d ff ff       	call   c001013b <KePanic(char const*)>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	eb 13                	jmp    c001c3c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c3b0:	83 ec 0c             	sub    esp,0xc
c001c3b3:	68 c4 d3 01 c0       	push   0xc001d3c4
c001c3b8:	e8 7e 3d ff ff       	call   c001013b <KePanic(char const*)>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3c7:	8d 50 01             	lea    edx,[eax+0x1]
c001c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3d1:	90                   	nop
c001c3d2:	83 c4 0c             	add    esp,0xc
c001c3d5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c3d8 <ACPI::~ACPI()>:
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	ba c4 df 01 c0       	mov    edx,0xc001dfc4
c001c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e4:	89 10                	mov    DWORD PTR [eax],edx
c001c3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ea:	83 ec 0c             	sub    esp,0xc
c001c3ed:	50                   	push   eax
c001c3ee:	e8 27 f4 fe ff       	call   c000b81a <Device::~Device()>
c001c3f3:	83 c4 10             	add    esp,0x10
c001c3f6:	90                   	nop
c001c3f7:	83 c4 0c             	add    esp,0xc
c001c3fa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c3fc <ACPI::~ACPI()>:
c001c3fc:	83 ec 0c             	sub    esp,0xc
c001c3ff:	83 ec 0c             	sub    esp,0xc
c001c402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c406:	e8 cd ff ff ff       	call   c001c3d8 <ACPI::~ACPI()>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	83 ec 08             	sub    esp,0x8
c001c411:	68 64 12 00 00       	push   0x1264
c001c416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c41a:	e8 c3 df fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	83 c4 0c             	add    esp,0xc
c001c425:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c428 <LinkedList<Device>::~LinkedList()>:
c001c428:	90                   	nop
c001c429:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c42c <LinkedList<Device>::isEmpty()>:
c001c42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c430:	8b 00                	mov    eax,DWORD PTR [eax]
c001c432:	85 c0                	test   eax,eax
c001c434:	75 0e                	jne    c001c444 <LinkedList<Device>::isEmpty()+0x18>
c001c436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c43a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c43d:	85 c0                	test   eax,eax
c001c43f:	75 03                	jne    c001c444 <LinkedList<Device>::isEmpty()+0x18>
c001c441:	b0 01                	mov    al,0x1
c001c443:	c3                   	ret    
c001c444:	b0 00                	mov    al,0x0
c001c446:	90                   	nop
c001c447:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c448 <LinkedList<Device>::getFirstElement()>:
c001c448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c44c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c44e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c450 <LinkedList<Device>::removeFirst()>:
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c457:	8b 00                	mov    eax,DWORD PTR [eax]
c001c459:	85 c0                	test   eax,eax
c001c45b:	75 17                	jne    c001c474 <LinkedList<Device>::removeFirst()+0x24>
c001c45d:	83 ec 0c             	sub    esp,0xc
c001c460:	68 d0 d3 01 c0       	push   0xc001d3d0
c001c465:	e8 d1 3c ff ff       	call   c001013b <KePanic(char const*)>
c001c46a:	83 c4 10             	add    esp,0x10
c001c46d:	e9 92 00 00 00       	jmp    c001c504 <LinkedList<Device>::removeFirst()+0xb4>
c001c472:	66 90                	xchg   ax,ax
c001c474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c47b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c481:	85 c0                	test   eax,eax
c001c483:	74 13                	je     c001c498 <LinkedList<Device>::removeFirst()+0x48>
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	68 1b d4 01 c0       	push   0xc001d41b
c001c48d:	e8 a9 3c ff ff       	call   c001013b <KePanic(char const*)>
c001c492:	83 c4 10             	add    esp,0x10
c001c495:	8d 76 00             	lea    esi,[esi+0x0]
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c49e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4a4:	85 c0                	test   eax,eax
c001c4a6:	75 34                	jne    c001c4dc <LinkedList<Device>::removeFirst()+0x8c>
c001c4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4c4:	83 f8 01             	cmp    eax,0x1
c001c4c7:	74 27                	je     c001c4f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c4c9:	83 ec 0c             	sub    esp,0xc
c001c4cc:	68 f4 d3 01 c0       	push   0xc001d3f4
c001c4d1:	e8 65 3c ff ff       	call   c001013b <KePanic(char const*)>
c001c4d6:	83 c4 10             	add    esp,0x10
c001c4d9:	eb 15                	jmp    c001c4f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c4db:	90                   	nop
c001c4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4e2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ec:	89 10                	mov    DWORD PTR [eax],edx
c001c4ee:	66 90                	xchg   ax,ax
c001c4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c501:	8d 76 00             	lea    esi,[esi+0x0]
c001c504:	83 c4 0c             	add    esp,0xc
c001c507:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c508 <CPU::~CPU()>:
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	ba 60 e1 01 c0       	mov    edx,0xc001e160
c001c510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c514:	89 10                	mov    DWORD PTR [eax],edx
c001c516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51a:	83 ec 0c             	sub    esp,0xc
c001c51d:	50                   	push   eax
c001c51e:	e8 f7 f2 fe ff       	call   c000b81a <Device::~Device()>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	90                   	nop
c001c527:	83 c4 0c             	add    esp,0xc
c001c52a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c52c <CPU::~CPU()>:
c001c52c:	83 ec 0c             	sub    esp,0xc
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c536:	e8 cd ff ff ff       	call   c001c508 <CPU::~CPU()>
c001c53b:	83 c4 10             	add    esp,0x10
c001c53e:	83 ec 08             	sub    esp,0x8
c001c541:	68 94 11 00 00       	push   0x1194
c001c546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c54a:	e8 93 de fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	83 c4 0c             	add    esp,0xc
c001c555:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c558 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c558:	90                   	nop
c001c559:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c55c <ThreadControlBlock::ThreadControlBlock()>:
c001c55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c560:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c56b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c576:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c57d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c581:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c597:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c59b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c5a3:	90                   	nop
c001c5a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5e8:	90                   	nop
c001c5e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c5ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c5f3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c5f4 <PCI::~PCI()>:
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	ba b8 ec 01 c0       	mov    edx,0xc001ecb8
c001c5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c600:	89 10                	mov    DWORD PTR [eax],edx
c001c602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c606:	83 ec 0c             	sub    esp,0xc
c001c609:	50                   	push   eax
c001c60a:	e8 95 ec fe ff       	call   c000b2a4 <Bus::~Bus()>
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	90                   	nop
c001c613:	83 c4 0c             	add    esp,0xc
c001c616:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c618 <PCI::~PCI()>:
c001c618:	83 ec 0c             	sub    esp,0xc
c001c61b:	83 ec 0c             	sub    esp,0xc
c001c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c622:	e8 cd ff ff ff       	call   c001c5f4 <PCI::~PCI()>
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	83 ec 08             	sub    esp,0x8
c001c62d:	68 5c 01 00 00       	push   0x15c
c001c632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c636:	e8 a7 dd fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	83 c4 0c             	add    esp,0xc
c001c641:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c642 <IDE::~IDE()>:
c001c642:	83 ec 0c             	sub    esp,0xc
c001c645:	ba 6c ed 01 c0       	mov    edx,0xc001ed6c
c001c64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64e:	89 10                	mov    DWORD PTR [eax],edx
c001c650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c654:	83 ec 0c             	sub    esp,0xc
c001c657:	50                   	push   eax
c001c658:	e8 37 f6 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001c65d:	83 c4 10             	add    esp,0x10
c001c660:	90                   	nop
c001c661:	83 c4 0c             	add    esp,0xc
c001c664:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c666 <IDE::~IDE()>:
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	83 ec 0c             	sub    esp,0xc
c001c66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c670:	e8 cd ff ff ff       	call   c001c642 <IDE::~IDE()>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	83 ec 08             	sub    esp,0x8
c001c67b:	68 70 02 00 00       	push   0x270
c001c680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c684:	e8 59 dd fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	83 c4 0c             	add    esp,0xc
c001c68f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c690 <SATABus::~SATABus()>:
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	89 10                	mov    DWORD PTR [eax],edx
c001c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a2:	83 ec 0c             	sub    esp,0xc
c001c6a5:	50                   	push   eax
c001c6a6:	e8 e9 f5 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	90                   	nop
c001c6af:	83 c4 0c             	add    esp,0xc
c001c6b2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c6b4 <SATABus::~SATABus()>:
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	83 ec 0c             	sub    esp,0xc
c001c6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6be:	e8 cd ff ff ff       	call   c001c690 <SATABus::~SATABus()>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	83 ec 08             	sub    esp,0x8
c001c6c9:	68 64 01 00 00       	push   0x164
c001c6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d2:	e8 0b dd fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c6d7:	83 c4 10             	add    esp,0x10
c001c6da:	83 c4 0c             	add    esp,0xc
c001c6dd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c6de <ATA::~ATA()>:
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c001c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ea:	89 10                	mov    DWORD PTR [eax],edx
c001c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f0:	83 ec 0c             	sub    esp,0xc
c001c6f3:	50                   	push   eax
c001c6f4:	e8 7d f6 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001c6f9:	83 c4 10             	add    esp,0x10
c001c6fc:	90                   	nop
c001c6fd:	83 c4 0c             	add    esp,0xc
c001c700:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c702 <ATA::~ATA()>:
c001c702:	83 ec 0c             	sub    esp,0xc
c001c705:	83 ec 0c             	sub    esp,0xc
c001c708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c70c:	e8 cd ff ff ff       	call   c001c6de <ATA::~ATA()>
c001c711:	83 c4 10             	add    esp,0x10
c001c714:	83 ec 08             	sub    esp,0x8
c001c717:	68 7c 01 00 00       	push   0x17c
c001c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c720:	e8 bd dc fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	83 c4 0c             	add    esp,0xc
c001c72b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c72c <ATAPI::~ATAPI()>:
c001c72c:	83 ec 0c             	sub    esp,0xc
c001c72f:	ba 44 ee 01 c0       	mov    edx,0xc001ee44
c001c734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c738:	89 10                	mov    DWORD PTR [eax],edx
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	83 ec 0c             	sub    esp,0xc
c001c741:	50                   	push   eax
c001c742:	e8 2f f6 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	90                   	nop
c001c74b:	83 c4 0c             	add    esp,0xc
c001c74e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c750 <ATAPI::~ATAPI()>:
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	83 ec 0c             	sub    esp,0xc
c001c756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75a:	e8 cd ff ff ff       	call   c001c72c <ATAPI::~ATAPI()>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	83 ec 08             	sub    esp,0x8
c001c765:	68 84 01 00 00       	push   0x184
c001c76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c76e:	e8 6f dc fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	83 c4 0c             	add    esp,0xc
c001c779:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c77a <SATA::~SATA()>:
c001c77a:	83 ec 0c             	sub    esp,0xc
c001c77d:	ba f8 ee 01 c0       	mov    edx,0xc001eef8
c001c782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c786:	89 10                	mov    DWORD PTR [eax],edx
c001c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	50                   	push   eax
c001c790:	e8 e1 f5 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	90                   	nop
c001c799:	83 c4 0c             	add    esp,0xc
c001c79c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c79e <SATA::~SATA()>:
c001c79e:	83 ec 0c             	sub    esp,0xc
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7a8:	e8 cd ff ff ff       	call   c001c77a <SATA::~SATA()>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	83 ec 08             	sub    esp,0x8
c001c7b3:	68 7c 01 00 00       	push   0x17c
c001c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7bc:	e8 21 dc fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c7c1:	83 c4 10             	add    esp,0x10
c001c7c4:	83 c4 0c             	add    esp,0xc
c001c7c7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c7c8 <SATAPI::~SATAPI()>:
c001c7c8:	83 ec 0c             	sub    esp,0xc
c001c7cb:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001c7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d4:	89 10                	mov    DWORD PTR [eax],edx
c001c7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7da:	83 ec 0c             	sub    esp,0xc
c001c7dd:	50                   	push   eax
c001c7de:	e8 93 f5 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	90                   	nop
c001c7e7:	83 c4 0c             	add    esp,0xc
c001c7ea:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c7ec <SATAPI::~SATAPI()>:
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	83 ec 0c             	sub    esp,0xc
c001c7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f6:	e8 cd ff ff ff       	call   c001c7c8 <SATAPI::~SATAPI()>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	83 ec 08             	sub    esp,0x8
c001c801:	68 84 01 00 00       	push   0x184
c001c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c80a:	e8 d3 db fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	83 c4 0c             	add    esp,0xc
c001c815:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c816 <IOAPIC::~IOAPIC()>:
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001c81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c822:	89 10                	mov    DWORD PTR [eax],edx
c001c824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	50                   	push   eax
c001c82c:	e8 e9 ef fe ff       	call   c000b81a <Device::~Device()>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	90                   	nop
c001c835:	83 c4 0c             	add    esp,0xc
c001c838:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c83a <IOAPIC::~IOAPIC()>:
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	83 ec 0c             	sub    esp,0xc
c001c840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c844:	e8 cd ff ff ff       	call   c001c816 <IOAPIC::~IOAPIC()>
c001c849:	83 c4 10             	add    esp,0x10
c001c84c:	83 ec 08             	sub    esp,0x8
c001c84f:	68 68 01 00 00       	push   0x168
c001c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c858:	e8 85 db fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c85d:	83 c4 10             	add    esp,0x10
c001c860:	83 c4 0c             	add    esp,0xc
c001c863:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c864 <APICTimer::~APICTimer()>:
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	ba b8 f0 01 c0       	mov    edx,0xc001f0b8
c001c86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c870:	89 10                	mov    DWORD PTR [eax],edx
c001c872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	50                   	push   eax
c001c87a:	e8 99 08 ff ff       	call   c000d118 <Timer::~Timer()>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	90                   	nop
c001c883:	83 c4 0c             	add    esp,0xc
c001c886:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c888 <APICTimer::~APICTimer()>:
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c892:	e8 cd ff ff ff       	call   c001c864 <APICTimer::~APICTimer()>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	83 ec 08             	sub    esp,0x8
c001c89d:	68 60 01 00 00       	push   0x160
c001c8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a6:	e8 37 db fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	83 c4 0c             	add    esp,0xc
c001c8b1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c8b4 <PIT::~PIT()>:
c001c8b4:	83 ec 0c             	sub    esp,0xc
c001c8b7:	ba 08 f1 01 c0       	mov    edx,0xc001f108
c001c8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c0:	89 10                	mov    DWORD PTR [eax],edx
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	50                   	push   eax
c001c8ca:	e8 49 08 ff ff       	call   c000d118 <Timer::~Timer()>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	90                   	nop
c001c8d3:	83 c4 0c             	add    esp,0xc
c001c8d6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c8d8 <PIT::~PIT()>:
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8e2:	e8 cd ff ff ff       	call   c001c8b4 <PIT::~PIT()>
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	83 ec 08             	sub    esp,0x8
c001c8ed:	68 5c 01 00 00       	push   0x15c
c001c8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8f6:	e8 e7 da fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	83 c4 0c             	add    esp,0xc
c001c901:	c3                   	ret    
