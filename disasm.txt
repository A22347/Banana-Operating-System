
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f1 fb 00 00       	call   c000fc11 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 94 02 00       	call   c00294e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 7e a1 02 c0       	mov    ebx,0xc002a17e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 8c a1 02 c0    	cmp    ebx,0xc002a18c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0000049:	3d f8 ea 02 c0       	cmp    eax,0xc002eaf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 ea 02 c0       	push   0xc002eaf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0000075:	2d f8 ea 02 c0       	sub    eax,0xc002eaf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 ea 02 c0       	push   0xc002eaf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f128,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 94 a1 02 c0       	mov    ebx,0xc002a194
c00000bb:	81 eb 90 a1 02 c0    	sub    ebx,0xc002a190
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 90 a1 02 c0       	mov    esi,0xc002a190
c00000ca:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c f1 02 c0       	mov    ds:0xc002f12c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 ea 02 c0       	push   0xc002eaf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f128,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 f1 02 c0       	push   0xc002f130
c000012c:	68 f8 ea 02 c0       	push   0xc002eaf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 55 dc 01 00       	call   c001dff8 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 74 28 01 00       	call   c0012c2f <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 33 dc 01 00       	call   c001dff8 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 db e0 01 00       	call   c001e4bf <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 39 e7 01 00       	call   c001eb26 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 f5 02 c0 	lgdtd  ds:0xc002f570
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 85 45 01 00       	call   c0014b67 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 f1 02 c0       	mov    ds:0xc002f148,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 f1 02 c0    	mov    DWORD PTR ds:0xc002f148,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f148
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 a0 a1 02 c0 02 	test   BYTE PTR [edx-0x3ffd5e60],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 a1 02 c0 01 	test   BYTE PTR [edx-0x3ffd5e60],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 a0 a1 02 c0 08 	test   BYTE PTR [edx-0x3ffd5e60],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 a0 a1 02 c0 04 	test   BYTE PTR [ebx-0x3ffd5e60],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 a0 a1 02 c0 01 	test   BYTE PTR [edx-0x3ffd5e60],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f160
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 f1 02 c0    	mov    DWORD PTR ds:0xc002f160,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 f1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0e9c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e9c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 f1 02 c0    	mov    DWORD PTR ds:0xc002f160,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c f1 02 c0    	cmp    DWORD PTR ds:0xc002f18c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f19c
c0000e38:	c7 42 0c 94 f1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002f194
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c f1 02 c0    	mov    DWORD PTR ds:0xc002f19c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c f1 02 c0    	mov    DWORD PTR ds:0xc002f18c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 f1 02 c0 02 	test   BYTE PTR ds:0xc002f160,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 f1 02 c0    	mov    edi,DWORD PTR ds:0xc002f160
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0e9c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0e9c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 f1 02 c0 	lea    edx,[eax*8-0x3ffd0e6c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a0
c00011ba:	81 fb 94 f1 02 c0    	cmp    ebx,0xc002f194
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 f1 02 c0       	cmp    eax,0xc002f194
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 f1 02 c0    	cmp    DWORD PTR ds:0xc002f190,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c f1 02 c0       	mov    ds:0xc002f19c,eax
c00011f6:	a3 a0 f1 02 c0       	mov    ds:0xc002f1a0,eax
c00011fb:	a3 90 f1 02 c0       	mov    ds:0xc002f190,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f194
c0001209:	c7 40 0c 94 f1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002f194
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 f1 02 c0       	mov    ds:0xc002f1a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f194
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 f1 02 c0 	lea    ebp,[edx*4-0x3ffd0ea8]
c000125a:	8b 14 95 60 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ea0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 f1 02 c0 	lea    ecx,[edx*4-0x3ffd0ea0]
c0001275:	8b 14 95 60 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ea0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 f4 02 c0 	or     DWORD PTR [edi*4-0x3ffd0b6c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 f1 02 c0 	lea    eax,[eax*8-0x3ffd0e6c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c f1 02 c0    	mov    DWORD PTR ds:0xc002f19c,ecx
c000132f:	89 0d a0 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a0,ecx
c0001335:	c7 41 08 94 f1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002f194
c000133c:	c7 41 0c 94 f1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002f194
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c f1 02 c0 	lea    edx,[ecx*8-0x3ffd0e74]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0b6c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0b6c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c f1 02 c0 	lea    edx,[eax*4-0x3ffd0e74]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 f4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0b6c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c f1 02 c0    	mov    DWORD PTR ds:0xc002f19c,edi
c0001402:	89 3d a0 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a0,edi
c0001408:	c7 47 08 94 f1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002f194
c000140f:	c7 47 0c 94 f1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002f194
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 f1 02 c0    	mov    DWORD PTR ds:0xc002f190,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c f1 02 c0       	mov    eax,ds:0xc002f18c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c f1 02 c0    	mov    DWORD PTR ds:0xc002f18c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 f1 02 c0       	mov    edx,0xc002f160
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f160,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f4b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 f4 02 c0    	mov    DWORD PTR ds:0xc002f4b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c f1 02 c0    	cmp    DWORD PTR ds:0xc002f18c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c f1 02 c0    	mov    DWORD PTR ds:0xc002f18c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f160,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc f4 02 c0    	push   DWORD PTR ds:0xc002f4bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f160,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc f4 02 c0       	mov    eax,ds:0xc002f4bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f18c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c f1 02 c0       	mov    eax,ds:0xc002f18c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0e9c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 f1 02 c0       	mov    eax,0xc002f194
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c f4 02 c0       	cmp    eax,0xc002f48c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 f4 02 c0       	mov    eax,ds:0xc002f4c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 f1 02 c0       	mov    eax,0xc002f160
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 a4 a2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5d5c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 f1 02 c0       	mov    eax,ds:0xc002f160
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 f1 02 c0       	mov    ds:0xc002f160,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 f4 02 c0    	mov    DWORD PTR ds:0xc002f4a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 f4 02 c0    	mov    DWORD PTR ds:0xc002f4a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac f4 02 c0    	mov    DWORD PTR ds:0xc002f4ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 40 2c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd3c0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 fe fb 01 00       	jmp    c00217f0 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 40 2c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd3c0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 2f fc 01 00       	jmp    c0021837 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 40 2c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd3c0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 57 fc 01 00       	jmp    c002187e <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 3a 59 02 00       	call   c0027844 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 c0 a3 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd5c40]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 c0 a3 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd5c40]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba e0 a3 02 c0       	mov    edx,0xc002a3e0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 08 d9 02 c0       	mov    edx,0xc002d908
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ec a3 02 c0       	mov    edx,0xc002a3ec
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba d0 a3 02 c0       	mov    edx,0xc002a3d0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 f5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0b00]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 f4 02 c0    	mov    ax,ds:0xc002f4e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 f4 02 c0    	mov    ds:0xc002f4e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 37 47 02 00       	call   c0027844 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 f2 a3 02 c0       	mov    eax,0xc002a3f2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 40 a3 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd5cc0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 fb a3 02 c0       	mov    eax,0xc002a3fb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 c0 a3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5c40]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 02 31 02 00       	call   c0027844 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba d0 a3 02 c0       	mov    edx,0xc002a3d0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba d0 a2 02 c0       	mov    edx,0xc002a2d0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b00]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 f5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0b00],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 c9 1a 02 00       	call   c0027844 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 af 1a 02 00       	call   c0027844 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 17 a3 02 c0       	mov    eax,0xc002a317
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 10 a3 02 c0       	mov    eax,0xc002a310
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 00 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b00]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 00 a3 02 c0       	mov    esi,0xc002a300
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 f2 01 02 00       	call   c0027844 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba e0 a3 02 c0       	mov    edx,0xc002a3e0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba e0 a2 02 c0       	mov    edx,0xc002a2e0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba f0 a2 02 c0       	mov    edx,0xc002a2f0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 02 a4 02 c0       	mov    edx,0xc002a402
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 0e a4 02 c0       	mov    edx,0xc002a40e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 22 a4 02 c0       	mov    edx,0xc002a422
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 40 a7 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a740
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 40 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a740
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 40 a5 02 c0       	mov    eax,0xc002a540
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 40 a4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5bc0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 46 0b 02 00       	call   c0029317 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 09 0b 02 00       	call   c00292f9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 dd 0a 02 00       	call   c0029317 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 90 01 02 00       	call   c0028a1c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 12 0c 02 00       	call   c00294b0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 57 0a 02 00       	call   c0029317 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 99 09 02 00       	call   c0029317 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 66 09 02 00       	call   c00292f9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 53 08 02 00       	call   c0029317 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 1b 08 02 00       	call   c00292f9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 40 a8 02 c0       	mov    eax,0xc002a840
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 27 06 02 00       	call   c0029317 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ec 05 02 00       	call   c00292f9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 a0 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5360]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 fc 02 02 00       	call   c00290ab <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 7a fc 01 00       	call   c0028a48 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 36 05 02 00       	call   c002931b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 24 06 02 00       	call   c002943f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 0e fc 01 00       	call   c0028a48 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 b9 04 02 00       	call   c0029315 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 9a 04 02 00       	call   c0029319 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 30 06 02 00       	call   c00294d0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 da 01 02 00       	call   c00290ab <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 58 fb 01 00       	call   c0028a48 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 14 04 02 00       	call   c002931b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 02 05 02 00       	call   c002943f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ec fa 01 00       	call   c0028a48 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 97 03 02 00       	call   c0029315 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 77 03 02 00       	call   c0029319 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 0c 05 02 00       	call   c00294d0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 b2 02 02 00       	call   c0029317 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 70 02 02 00       	call   c00292f9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 58 02 02 00       	call   c0029317 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ca ff 01 00       	call   c00290ab <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 cc f2 01 00       	call   c00283cb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 2f f9 01 00       	call   c0028a48 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 81 ff 01 00       	call   c00290ab <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 87 f2 01 00       	call   c00283cb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 56 ff 01 00       	call   c00290ab <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 a6 01 02 00       	call   c0029315 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 83 f8 01 00       	call   c0028a1c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 05 03 02 00       	call   c00294b0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 2c 01 02 00       	call   c00292f9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 27 f8 01 00       	call   c0028a1c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 a5 fe 01 00       	call   c00290ab <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 28 f8 01 00       	call   c0028a48 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 7a fe 01 00       	call   c00290ab <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 e1 fa 01 00       	call   c0028d2c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 60 f1 01 00       	call   c00283cb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 c0 ea 01 00       	call   c0027d60 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 97 01 02 00       	call   c002943f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 80 f7 01 00       	call   c0028a48 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 67 01 02 00       	call   c002943f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 d9 f0 01 00       	call   c00283cb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 12 00 02 00       	call   c002931b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 fa f9 01 00       	call   c0028d2c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 80 f0 01 00       	call   c00283cb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 6e 01 02 00       	call   c00294d0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 40 fd 01 00       	call   c00290ab <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 97 f6 01 00       	call   c0028a1c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 76 ff 01 00       	call   c0029317 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 0f f0 01 00       	call   c00283cb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 3b f6 01 00       	call   c0028a1c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 dd 00 02 00       	call   c00294d0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 8e fc 01 00       	call   c00290ab <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 0b f6 01 00       	call   c0028a48 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 5e fc 01 00       	call   c00290ab <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 64 ef 01 00       	call   c00283cb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 34 fc 01 00       	call   c00290ab <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 86 fe 01 00       	call   c0029317 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 5d f5 01 00       	call   c0028a1c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 df ff 01 00       	call   c00294b0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 06 fe 01 00       	call   c00292f9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 00 f5 01 00       	call   c0028a1c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 7e fb 01 00       	call   c00290ab <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 01 f5 01 00       	call   c0028a48 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 53 fb 01 00       	call   c00290ab <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ba f7 01 00       	call   c0028d2c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 39 ee 01 00       	call   c00283cb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 89 e7 01 00       	call   c0027d60 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 60 fe 01 00       	call   c002943f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 49 f4 01 00       	call   c0028a48 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 30 fe 01 00       	call   c002943f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 a2 ed 01 00       	call   c00283cb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 db fc 01 00       	call   c002931b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 c2 f6 01 00       	call   c0028d2c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 41 ed 01 00       	call   c00283cb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 2f fe 01 00       	call   c00294d0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 01 fa 01 00       	call   c00290ab <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 58 f3 01 00       	call   c0028a1c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 37 fc 01 00       	call   c0029317 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 d0 ec 01 00       	call   c00283cb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 fc f2 01 00       	call   c0028a1c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 71 f9 01 00       	call   c00290ab <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 77 ec 01 00       	call   c00283cb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 00 ad 02 c0       	mov    eax,0xc002ad00
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 14 ad 02 c0       	mov    eax,0xc002ad14
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ec f7 01 00       	call   c00290ab <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 6a f1 01 00       	call   c0028a48 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 fc e3 01 00       	call   c0027d60 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 d3 fa 01 00       	call   c002943f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 bc f0 01 00       	call   c0028a48 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 9f fa 01 00       	call   c002943f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 11 ea 01 00       	call   c00283cb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 71 fa 01 00       	call   c002943f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 60 f0 01 00       	call   c0028a48 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 c9 e9 01 00       	call   c00283cb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ea e2 01 00       	call   c0027d60 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 c1 f9 01 00       	call   c002943f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 aa ef 01 00       	call   c0028a48 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 8d f9 01 00       	call   c002943f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ff e8 01 00       	call   c00283cb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 5f f9 01 00       	call   c002943f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 4e ef 01 00       	call   c0028a48 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 b7 e8 01 00       	call   c00283cb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 95 e8 01 00       	call   c00283cb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 71 e1 01 00       	call   c0027d60 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 48 f8 01 00       	call   c002943f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 31 ee 01 00       	call   c0028a48 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 14 f8 01 00       	call   c002943f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 86 e7 01 00       	call   c00283cb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 e6 f7 01 00       	call   c002943f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 cf ed 01 00       	call   c0028a48 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 38 e7 01 00       	call   c00283cb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 98 f7 01 00       	call   c002943f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 81 ed 01 00       	call   c0028a48 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ea e6 01 00       	call   c00283cb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ff df 01 00       	call   c0027d60 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 d6 f6 01 00       	call   c002943f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 bf ec 01 00       	call   c0028a48 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 a6 f6 01 00       	call   c002943f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 18 e6 01 00       	call   c00283cb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 78 f6 01 00       	call   c002943f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 61 ec 01 00       	call   c0028a48 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ca e5 01 00       	call   c00283cb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 2a f6 01 00       	call   c002943f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 13 ec 01 00       	call   c0028a48 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 7c e5 01 00       	call   c00283cb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 50 e5 01 00       	call   c00283cb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 ad eb 01 00       	call   c0028a48 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 69 f4 01 00       	call   c002931b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 f8 e4 01 00       	call   c00283cb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 55 eb 01 00       	call   c0028a48 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 11 f4 01 00       	call   c002931b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 8b dd 01 00       	call   c0027d60 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 62 f4 01 00       	call   c002943f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 4b ea 01 00       	call   c0028a48 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 2e f4 01 00       	call   c002943f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 a0 e3 01 00       	call   c00283cb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 00 f4 01 00       	call   c002943f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 e9 e9 01 00       	call   c0028a48 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 52 e3 01 00       	call   c00283cb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 b2 f3 01 00       	call   c002943f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 9b e9 01 00       	call   c0028a48 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 04 e3 01 00       	call   c00283cb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 64 f3 01 00       	call   c002943f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 4d e9 01 00       	call   c0028a48 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 b6 e2 01 00       	call   c00283cb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 16 f3 01 00       	call   c002943f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ff e8 01 00       	call   c0028a48 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 68 e2 01 00       	call   c00283cb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 6a db 01 00       	call   c0027d60 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 41 f2 01 00       	call   c002943f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 2a e8 01 00       	call   c0028a48 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 11 f2 01 00       	call   c002943f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 83 e1 01 00       	call   c00283cb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 e3 f1 01 00       	call   c002943f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 cc e7 01 00       	call   c0028a48 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 35 e1 01 00       	call   c00283cb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 95 f1 01 00       	call   c002943f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 7e e7 01 00       	call   c0028a48 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 e7 e0 01 00       	call   c00283cb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 47 f1 01 00       	call   c002943f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 30 e7 01 00       	call   c0028a48 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 99 e0 01 00       	call   c00283cb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 f9 f0 01 00       	call   c002943f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 e2 e6 01 00       	call   c0028a48 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 4b e0 01 00       	call   c00283cb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 1f e0 01 00       	call   c00283cb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 7c e6 01 00       	call   c0028a48 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 38 ef 01 00       	call   c002931b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 c7 df 01 00       	call   c00283cb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 24 e6 01 00       	call   c0028a48 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 e0 ee 01 00       	call   c002931b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 6e df 01 00       	call   c00283cb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 cb e5 01 00       	call   c0028a48 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 87 ee 01 00       	call   c002931b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 15 df 01 00       	call   c00283cb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 72 e5 01 00       	call   c0028a48 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 2e ee 01 00       	call   c002931b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 8c d7 01 00       	call   c0027d60 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 63 ee 01 00       	call   c002943f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 4c e4 01 00       	call   c0028a48 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 2f ee 01 00       	call   c002943f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 a1 dd 01 00       	call   c00283cb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 01 ee 01 00       	call   c002943f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ea e3 01 00       	call   c0028a48 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 53 dd 01 00       	call   c00283cb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 b3 ed 01 00       	call   c002943f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 9c e3 01 00       	call   c0028a48 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 05 dd 01 00       	call   c00283cb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 65 ed 01 00       	call   c002943f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 4e e3 01 00       	call   c0028a48 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 b7 dc 01 00       	call   c00283cb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 17 ed 01 00       	call   c002943f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 00 e3 01 00       	call   c0028a48 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 69 dc 01 00       	call   c00283cb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 c9 ec 01 00       	call   c002943f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 b2 e2 01 00       	call   c0028a48 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 18 dc 01 00       	call   c00283cb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 78 ec 01 00       	call   c002943f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 61 e2 01 00       	call   c0028a48 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ca db 01 00       	call   c00283cb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 c4 d4 01 00       	call   c0027d60 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 9b eb 01 00       	call   c002943f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 84 e1 01 00       	call   c0028a48 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 64 eb 01 00       	call   c002943f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 d6 da 01 00       	call   c00283cb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 36 eb 01 00       	call   c002943f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 1f e1 01 00       	call   c0028a48 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 88 da 01 00       	call   c00283cb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 e8 ea 01 00       	call   c002943f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 d1 e0 01 00       	call   c0028a48 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 3a da 01 00       	call   c00283cb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 9a ea 01 00       	call   c002943f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 83 e0 01 00       	call   c0028a48 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ec d9 01 00       	call   c00283cb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 4c ea 01 00       	call   c002943f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 35 e0 01 00       	call   c0028a48 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 9e d9 01 00       	call   c00283cb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 fe e9 01 00       	call   c002943f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 e7 df 01 00       	call   c0028a48 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 4d d9 01 00       	call   c00283cb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 ad e9 01 00       	call   c002943f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 96 df 01 00       	call   c0028a48 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 05 d9 01 00       	call   c00283cb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 de d8 01 00       	call   c00283cb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 3c df 01 00       	call   c0028a48 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 f8 e7 01 00       	call   c002931b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 87 d8 01 00       	call   c00283cb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 e5 de 01 00       	call   c0028a48 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 a1 e7 01 00       	call   c002931b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 2f d8 01 00       	call   c00283cb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 8d de 01 00       	call   c0028a48 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 49 e7 01 00       	call   c002931b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 d7 d7 01 00       	call   c00283cb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 35 de 01 00       	call   c0028a48 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 f1 e6 01 00       	call   c002931b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 7f d7 01 00       	call   c00283cb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 dd dd 01 00       	call   c0028a48 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 99 e6 01 00       	call   c002931b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 2d d7 01 00       	call   c00283cb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 8b dd 01 00       	call   c0028a48 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 47 e6 01 00       	call   c002931b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 5b cf 01 00       	call   c0027d60 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 32 e6 01 00       	call   c002943f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 1b dc 01 00       	call   c0028a48 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 02 e6 01 00       	call   c002943f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 74 d5 01 00       	call   c00283cb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 44 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd52bc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 a8 e5 01 00       	call   c002943f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 91 db 01 00       	call   c0028a48 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 fc d4 01 00       	call   c00283cb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 49 e5 01 00       	call   c002943f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 32 db 01 00       	call   c0028a48 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 9d d4 01 00       	call   c00283cb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ea e4 01 00       	call   c002943f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 d3 da 01 00       	call   c0028a48 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 3e d4 01 00       	call   c00283cb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 8b e4 01 00       	call   c002943f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 74 da 01 00       	call   c0028a48 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 df d3 01 00       	call   c00283cb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 2c e4 01 00       	call   c002943f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 15 da 01 00       	call   c0028a48 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 80 d3 01 00       	call   c00283cb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 cd e3 01 00       	call   c002943f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 b6 d9 01 00       	call   c0028a48 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 21 d3 01 00       	call   c00283cb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 6e e3 01 00       	call   c002943f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 57 d9 01 00       	call   c0028a48 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 c2 d2 01 00       	call   c00283cb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 0f e3 01 00       	call   c002943f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 f8 d8 01 00       	call   c0028a48 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 63 d2 01 00       	call   c00283cb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 6d cb 01 00       	call   c0027d60 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 44 e2 01 00       	call   c002943f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 2d d8 01 00       	call   c0028a48 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 14 e2 01 00       	call   c002943f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 86 d1 01 00       	call   c00283cb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 60 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd52a0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 b9 e1 01 00       	call   c002943f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 a2 d7 01 00       	call   c0028a48 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 0d d1 01 00       	call   c00283cb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 59 e1 01 00       	call   c002943f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 42 d7 01 00       	call   c0028a48 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 ad d0 01 00       	call   c00283cb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 f9 e0 01 00       	call   c002943f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 e2 d6 01 00       	call   c0028a48 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 4d d0 01 00       	call   c00283cb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 99 e0 01 00       	call   c002943f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 82 d6 01 00       	call   c0028a48 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ed cf 01 00       	call   c00283cb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 39 e0 01 00       	call   c002943f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 22 d6 01 00       	call   c0028a48 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 8d cf 01 00       	call   c00283cb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 d9 df 01 00       	call   c002943f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 c2 d5 01 00       	call   c0028a48 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 2d cf 01 00       	call   c00283cb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 79 df 01 00       	call   c002943f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 62 d5 01 00       	call   c0028a48 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 cd ce 01 00       	call   c00283cb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 19 df 01 00       	call   c002943f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 02 d5 01 00       	call   c0028a48 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 6d ce 01 00       	call   c00283cb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 7c ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5284]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 12 ce 01 00       	call   c00283cb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 6f d4 01 00       	call   c0028a48 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 2b dd 01 00       	call   c002931b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 b5 cd 01 00       	call   c00283cb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 12 d4 01 00       	call   c0028a48 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ce dc 01 00       	call   c002931b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 58 cd 01 00       	call   c00283cb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 b5 d3 01 00       	call   c0028a48 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 71 dc 01 00       	call   c002931b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 fb cc 01 00       	call   c00283cb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 58 d3 01 00       	call   c0028a48 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 14 dc 01 00       	call   c002931b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 9e cc 01 00       	call   c00283cb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 fb d2 01 00       	call   c0028a48 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 b7 db 01 00       	call   c002931b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 41 cc 01 00       	call   c00283cb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 9e d2 01 00       	call   c0028a48 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 5a db 01 00       	call   c002931b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 e4 cb 01 00       	call   c00283cb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 41 d2 01 00       	call   c0028a48 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 fd da 01 00       	call   c002931b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 87 cb 01 00       	call   c00283cb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 e4 d1 01 00       	call   c0028a48 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 a0 da 01 00       	call   c002931b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 9c d1 01 00       	call   c0028a48 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 14 dc 01 00       	jmp    c00294d0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 7e d8 01 00       	call   c0029317 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 3c d8 01 00       	call   c00292f9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 d3 d5 01 00       	call   c00290ab <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 d4 c8 01 00       	call   c00283cb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 a3 d5 01 00       	call   c00290ab <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 0a d2 01 00       	call   c0028d2c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 a9 d7 01 00       	call   c00292f9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 ac d7 01 00       	call   c0029317 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 7f d7 01 00       	call   c0029317 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 78 d1 01 00       	call   c0028d2c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 02 d9 01 00       	call   c00294d0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 dd d8 01 00       	call   c00294d0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 af d4 01 00       	call   c00290ab <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 06 ce 01 00       	call   c0028a1c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 e5 d6 01 00       	call   c0029317 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 7e c7 01 00       	call   c00283cb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 a2 cd 01 00       	call   c0028a1c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 44 d8 01 00       	call   c00294d0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 7c d0 01 00       	call   c0028d2c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 f9 c6 01 00       	call   c00283cb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 25 d3 01 00       	call   c00290ab <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 25 c6 01 00       	call   c00283cb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 05 c6 01 00       	call   c00283cb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 d5 d2 01 00       	call   c00290ab <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 25 d5 01 00       	call   c0029315 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 04 cc 01 00       	call   c0028a1c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 86 d6 01 00       	call   c00294b0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 ad d4 01 00       	call   c00292f9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 ab cb 01 00       	call   c0028a1c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 29 d2 01 00       	call   c00290ab <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 ac cb 01 00       	call   c0028a48 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 fe d1 01 00       	call   c00290ab <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 65 ce 01 00       	call   c0028d2c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 e4 c4 01 00       	call   c00283cb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ae d1 01 00       	call   c00290ab <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 fa d3 01 00       	call   c0029317 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 ef ca 01 00       	call   c0028a48 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 c1 ca 01 00       	call   c0028a48 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 fa d0 01 00       	call   c00290ab <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 5e cd 01 00       	call   c0028d2c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 26 cd 01 00       	call   c0028d2c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 a5 c3 01 00       	call   c00283cb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 92 d4 01 00       	call   c00294d0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 64 d0 01 00       	call   c00290ab <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 bb c9 01 00       	call   c0028a1c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 9a d2 01 00       	call   c0029317 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 32 c3 01 00       	call   c00283cb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 56 c9 01 00       	call   c0028a1c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 f8 d3 01 00       	call   c00294d0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 b9 d1 01 00       	call   c0029317 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 77 d1 01 00       	call   c00292f9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 0e cf 01 00       	call   c00290ab <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 0f c2 01 00       	call   c00283cb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 de ce 01 00       	call   c00290ab <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 45 cb 01 00       	call   c0028d2c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 e4 d0 01 00       	call   c00292f9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 e7 d0 01 00       	call   c0029317 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ba d0 01 00       	call   c0029317 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 b3 ca 01 00       	call   c0028d2c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 3d d2 01 00       	call   c00294d0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 18 d2 01 00       	call   c00294d0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ea cd 01 00       	call   c00290ab <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 41 c7 01 00       	call   c0028a1c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 20 d0 01 00       	call   c0029317 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 b9 c0 01 00       	call   c00283cb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 dd c6 01 00       	call   c0028a1c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 7f d1 01 00       	call   c00294d0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 b7 c9 01 00       	call   c0028d2c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 34 c0 01 00       	call   c00283cb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 5f cc 01 00       	call   c00290ab <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 5f bf 01 00       	call   c00283cb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 3f bf 01 00       	call   c00283cb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 0f cc 01 00       	call   c00290ab <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 5f ce 01 00       	call   c0029315 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 3d c5 01 00       	call   c0028a1c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 bf cf 01 00       	call   c00294b0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 e6 cd 01 00       	call   c00292f9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 e3 c4 01 00       	call   c0028a1c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 61 cb 01 00       	call   c00290ab <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 e4 c4 01 00       	call   c0028a48 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 36 cb 01 00       	call   c00290ab <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 9d c7 01 00       	call   c0028d2c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 1c be 01 00       	call   c00283cb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 e6 ca 01 00       	call   c00290ab <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 32 cd 01 00       	call   c0029317 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 27 c4 01 00       	call   c0028a48 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 f9 c3 01 00       	call   c0028a48 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 30 ca 01 00       	call   c00290ab <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 94 c6 01 00       	call   c0028d2c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 61 c6 01 00       	call   c0028d2c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 e0 bc 01 00       	call   c00283cb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 cd cd 01 00       	call   c00294d0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 9f c9 01 00       	call   c00290ab <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 f6 c2 01 00       	call   c0028a1c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 d5 cb 01 00       	call   c0029317 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 6d bc 01 00       	call   c00283cb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 91 c2 01 00       	call   c0028a1c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 33 cd 01 00       	call   c00294d0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 f4 ca 01 00       	call   c0029317 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 b2 ca 01 00       	call   c00292f9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 49 c8 01 00       	call   c00290ab <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 4a bb 01 00       	call   c00283cb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 19 c8 01 00       	call   c00290ab <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 80 c4 01 00       	call   c0028d2c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 1f ca 01 00       	call   c00292f9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 22 ca 01 00       	call   c0029317 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 f5 c9 01 00       	call   c0029317 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ee c3 01 00       	call   c0028d2c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 78 cb 01 00       	call   c00294d0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 53 cb 01 00       	call   c00294d0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 25 c7 01 00       	call   c00290ab <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 7c c0 01 00       	call   c0028a1c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 5b c9 01 00       	call   c0029317 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 f4 b9 01 00       	call   c00283cb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 18 c0 01 00       	call   c0028a1c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ba ca 01 00       	call   c00294d0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 f2 c2 01 00       	call   c0028d2c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 6f b9 01 00       	call   c00283cb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 9a c5 01 00       	call   c00290ab <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 9a b8 01 00       	call   c00283cb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 7a b8 01 00       	call   c00283cb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 4a c5 01 00       	call   c00290ab <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 9a c7 01 00       	call   c0029315 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 78 be 01 00       	call   c0028a1c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 fa c8 01 00       	call   c00294b0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 21 c7 01 00       	call   c00292f9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 1e be 01 00       	call   c0028a1c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 9c c4 01 00       	call   c00290ab <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 1f be 01 00       	call   c0028a48 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 71 c4 01 00       	call   c00290ab <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 d8 c0 01 00       	call   c0028d2c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 57 b7 01 00       	call   c00283cb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 21 c4 01 00       	call   c00290ab <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 6d c6 01 00       	call   c0029317 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 62 bd 01 00       	call   c0028a48 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 34 bd 01 00       	call   c0028a48 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 6b c3 01 00       	call   c00290ab <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 cf bf 01 00       	call   c0028d2c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 9c bf 01 00       	call   c0028d2c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 1b b6 01 00       	call   c00283cb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 08 c7 01 00       	call   c00294d0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 da c2 01 00       	call   c00290ab <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 31 bc 01 00       	call   c0028a1c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 10 c5 01 00       	call   c0029317 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 a8 b5 01 00       	call   c00283cb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 cc bb 01 00       	call   c0028a1c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 6e c6 01 00       	call   c00294d0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 2f c4 01 00       	call   c0029317 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ed c3 01 00       	call   c00292f9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 84 c1 01 00       	call   c00290ab <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 85 b4 01 00       	call   c00283cb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 54 c1 01 00       	call   c00290ab <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 bb bd 01 00       	call   c0028d2c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 5a c3 01 00       	call   c00292f9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 5d c3 01 00       	call   c0029317 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 30 c3 01 00       	call   c0029317 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 29 bd 01 00       	call   c0028d2c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 b3 c4 01 00       	call   c00294d0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 8e c4 01 00       	call   c00294d0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 60 c0 01 00       	call   c00290ab <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 b7 b9 01 00       	call   c0028a1c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 96 c2 01 00       	call   c0029317 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 2f b3 01 00       	call   c00283cb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 53 b9 01 00       	call   c0028a1c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 f5 c3 01 00       	call   c00294d0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 2d bc 01 00       	call   c0028d2c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 aa b2 01 00       	call   c00283cb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 d5 be 01 00       	call   c00290ab <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 d5 b1 01 00       	call   c00283cb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 b5 b1 01 00       	call   c00283cb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 85 be 01 00       	call   c00290ab <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 d5 c0 01 00       	call   c0029315 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 b3 b7 01 00       	call   c0028a1c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 35 c2 01 00       	call   c00294b0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 5c c0 01 00       	call   c00292f9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 59 b7 01 00       	call   c0028a1c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 d7 bd 01 00       	call   c00290ab <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 5a b7 01 00       	call   c0028a48 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 ac bd 01 00       	call   c00290ab <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 13 ba 01 00       	call   c0028d2c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 92 b0 01 00       	call   c00283cb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 5c bd 01 00       	call   c00290ab <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 a8 bf 01 00       	call   c0029317 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 9d b6 01 00       	call   c0028a48 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 6f b6 01 00       	call   c0028a48 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 a6 bc 01 00       	call   c00290ab <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 0a b9 01 00       	call   c0028d2c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 d7 b8 01 00       	call   c0028d2c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 56 af 01 00       	call   c00283cb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 43 c0 01 00       	call   c00294d0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 15 bc 01 00       	call   c00290ab <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 6c b5 01 00       	call   c0028a1c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 4b be 01 00       	call   c0029317 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 e3 ae 01 00       	call   c00283cb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 07 b5 01 00       	call   c0028a1c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 a9 bf 01 00       	call   c00294d0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 67 bd 01 00       	call   c0029317 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 25 bd 01 00       	call   c00292f9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 bc ba 01 00       	call   c00290ab <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 bd ad 01 00       	call   c00283cb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 8c ba 01 00       	call   c00290ab <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 f3 b6 01 00       	call   c0028d2c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 92 bc 01 00       	call   c00292f9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 95 bc 01 00       	call   c0029317 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 68 bc 01 00       	call   c0029317 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 61 b6 01 00       	call   c0028d2c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 eb bd 01 00       	call   c00294d0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 c2 bd 01 00       	call   c00294d0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 94 b9 01 00       	call   c00290ab <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 eb b2 01 00       	call   c0028a1c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ca bb 01 00       	call   c0029317 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 63 ac 01 00       	call   c00283cb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 8b b2 01 00       	call   c0028a1c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 2d bd 01 00       	call   c00294d0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 66 b5 01 00       	call   c0028d2c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 e3 ab 01 00       	call   c00283cb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 0f b8 01 00       	call   c00290ab <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 0f ab 01 00       	call   c00283cb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 ef aa 01 00       	call   c00283cb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 bf b7 01 00       	call   c00290ab <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 f3 b9 01 00       	call   c00292f9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ea b0 01 00       	call   c0028a1c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 6c bb 01 00       	call   c00294b0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 93 b9 01 00       	call   c00292f9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 8d b0 01 00       	call   c0028a1c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 0b b7 01 00       	call   c00290ab <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 8e b0 01 00       	call   c0028a48 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 e0 b6 01 00       	call   c00290ab <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 47 b3 01 00       	call   c0028d2c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 c6 a9 01 00       	call   c00283cb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 90 b6 01 00       	call   c00290ab <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 dc b8 01 00       	call   c0029317 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 d1 af 01 00       	call   c0028a48 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 a3 af 01 00       	call   c0028a48 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 e7 b5 01 00       	call   c00290ab <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 4e b2 01 00       	call   c0028d2c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 37 af 01 00       	call   c0028a48 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 f3 b7 01 00       	call   c002931b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 e6 b1 01 00       	call   c0028d2c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 65 a8 01 00       	call   c00283cb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 52 b9 01 00       	call   c00294d0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 24 b5 01 00       	call   c00290ab <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 7b ae 01 00       	call   c0028a1c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 5a b7 01 00       	call   c0029317 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 f2 a7 01 00       	call   c00283cb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 1a ae 01 00       	call   c0028a1c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 bc b8 01 00       	call   c00294d0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 a4 ad 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd525c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 98 ad 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5268]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 6f b5 01 00       	call   c0029317 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 2d b5 01 00       	call   c00292f9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 19 b5 01 00       	call   c0029317 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 8b b2 01 00       	call   c00290ab <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 09 ac 01 00       	call   c0028a48 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 5b b2 01 00       	call   c00290ab <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 61 a5 01 00       	call   c00283cb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 30 b2 01 00       	call   c00290ab <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 80 b4 01 00       	call   c0029315 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 61 ab 01 00       	call   c0028a1c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 e3 b5 01 00       	call   c00294b0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 0a b4 01 00       	call   c00292f9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 09 ab 01 00       	call   c0028a1c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 87 b1 01 00       	call   c00290ab <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 0a ab 01 00       	call   c0028a48 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 5c b1 01 00       	call   c00290ab <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 c3 ad 01 00       	call   c0028d2c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 42 a4 01 00       	call   c00283cb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 6a ad 01 00       	call   c0028d2c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 f0 a3 01 00       	call   c00283cb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 de b4 01 00       	call   c00294d0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 b0 b0 01 00       	call   c00290ab <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 07 aa 01 00       	call   c0028a1c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 e6 b2 01 00       	call   c0029317 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 7f a3 01 00       	call   c00283cb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 ab a9 01 00       	call   c0028a1c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 4d b4 01 00       	call   c00294d0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 fa af 01 00       	call   c00290ab <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 77 a9 01 00       	call   c0028a48 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 c8 af 01 00       	call   c00290ab <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ce a2 01 00       	call   c00283cb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 9e af 01 00       	call   c00290ab <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 f2 b1 01 00       	call   c0029319 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 cb a8 01 00       	call   c0028a1c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 4d b3 01 00       	call   c00294b0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 74 b1 01 00       	call   c00292f9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 72 a8 01 00       	call   c0028a1c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 f0 ae 01 00       	call   c00290ab <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 73 a8 01 00       	call   c0028a48 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 c5 ae 01 00       	call   c00290ab <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 2c ab 01 00       	call   c0028d2c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 ab a1 01 00       	call   c00283cb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 c7 aa 01 00       	call   c0028d2c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 46 a1 01 00       	call   c00283cb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 34 b2 01 00       	call   c00294d0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 06 ae 01 00       	call   c00290ab <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 5d a7 01 00       	call   c0028a1c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 3c b0 01 00       	call   c0029317 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 d5 a0 01 00       	call   c00283cb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 01 a7 01 00       	call   c0028a1c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 72 ad 01 00       	call   c00290ab <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 78 a0 01 00       	call   c00283cb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 be ae 02 c0       	mov    eax,0xc002aebe
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 cf ae 02 c0       	mov    eax,0xc002aecf
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c000e4e3:	ff 05 a4 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d a0 2a 03 c0 00 	cmp    DWORD PTR ds:0xc0032aa0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c000e50d:	e8 3a 02 01 00       	call   c001e74c <schedule()>
c000e512:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c000e517:	48                   	dec    eax
c000e518:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 f0 f6 02 c0       	mov    eax,ds:0xc002f6f0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 06 af 02 c0       	push   0xc002af06
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 68 f5 02 c0       	mov    eax,0xc002f568
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 0f af 02 c0       	push   0xc002af0f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 44 78 02 c0       	mov    eax,0xc0027844
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 19 af 02 c0       	push   0xc002af19
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 78 75 02 c0       	mov    eax,0xc0027578
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 22 af 02 c0       	push   0xc002af22
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 44 79 02 c0       	mov    eax,0xc0027944
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 2c af 02 c0       	push   0xc002af2c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 c4 76 02 c0       	mov    eax,0xc00276c4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 35 af 02 c0       	push   0xc002af35
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 6c f5 02 c0       	mov    eax,0xc002f56c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 42 af 02 c0       	push   0xc002af42
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 6d f5 02 c0       	mov    eax,0xc002f56d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 a7 5d 00 00       	call   c0014414 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c000e6b2:	68 4f af 02 c0       	push   0xc002af4f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 51 fc 00 00       	call   c001e310 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 34 fe 00 00       	call   c001e508 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 86 ef 01 c0       	push   0xc001ef86
c000e6dd:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c000e6e3:	e8 20 fe 00 00       	call   c001e508 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 88 2a 03 c0       	mov    ds:0xc0032a88,eax
c000e6f0:	c6 05 6d f5 02 c0 01 	mov    BYTE PTR ds:0xc002f56d,0x1
c000e6f7:	e8 de 0c 01 00       	call   c001f3da <Vm::initialise8086()>
c000e6fc:	e8 db 4a 00 00       	call   c00131dc <Fs::initVFS()>
c000e701:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 80 e4 00 00       	call   c001cb9d <Sys::loadSyscalls()>
c000e71d:	e8 3e c1 00 00       	call   c001a860 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 5c af 02 c0       	push   0xc002af5c
c000e72c:	68 65 af 02 c0       	push   0xc002af65
c000e731:	e8 19 d0 00 00       	call   c001b74f <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 8e 55 00 00       	call   c0013ccc <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 85 5c 00 00       	call   c00143d4 <Device::loadDriversForAll()>
c000e74f:	e8 58 bc 00 00       	call   c001a3ac <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 6d af 02 c0       	push   0xc002af6d
c000e763:	e8 05 f6 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 27 f8 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 cd 01 01 00       	call   c001e94b <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 89 af 02 c0       	push   0xc002af89
c000e793:	50                   	push   eax
c000e794:	e8 f5 5c 00 00       	call   c001448e <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 81 f5 02 c0 04 	test   BYTE PTR ds:0xc002f581,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 d9 8b 01 00       	call   c0027506 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 54 a7 00 00       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 2d a7 00 00       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 0b a7 00 00       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 e9 a6 00 00       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 80 f5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f580,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 f7 a5 00 00       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 d2 a5 00 00       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 43 8a 01 00       	call   c00274c0 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 00 8a 01 00       	call   c00274a0 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 ee a5 00 00       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 99 af 02 c0       	push   0xc002af99
c000eaf9:	e8 53 43 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 ac af 02 c0       	push   0xc002afac
c000eb1c:	e8 30 43 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 bd af 02 c0       	push   0xc002afbd
c000eb3f:	e8 0d 43 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 ce af 02 c0       	push   0xc002afce
c000eb62:	e8 ea 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 df af 02 c0       	push   0xc002afdf
c000eb85:	e8 c7 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 f0 af 02 c0       	push   0xc002aff0
c000eba8:	e8 a4 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 01 b0 02 c0       	push   0xc002b001
c000ebcb:	e8 81 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 12 b0 02 c0       	push   0xc002b012
c000ebee:	e8 5e 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 23 b0 02 c0       	push   0xc002b023
c000ec11:	e8 3b 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 34 b0 02 c0       	push   0xc002b034
c000ec34:	e8 18 42 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 45 b0 02 c0       	push   0xc002b045
c000ec57:	e8 f5 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 56 b0 02 c0       	push   0xc002b056
c000ec7a:	e8 d2 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 67 b0 02 c0       	push   0xc002b067
c000ec9d:	e8 af 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 78 b0 02 c0       	push   0xc002b078
c000ecc0:	e8 8c 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 89 b0 02 c0       	push   0xc002b089
c000ece3:	e8 69 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 9a b0 02 c0       	push   0xc002b09a
c000ed06:	e8 46 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 ab b0 02 c0       	push   0xc002b0ab
c000ed29:	e8 23 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 bc b0 02 c0       	push   0xc002b0bc
c000ed4c:	e8 00 41 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 96 af 02 c0       	mov    eax,0xc002af96
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 cd b0 02 c0       	push   0xc002b0cd
c000ed6b:	e8 e1 40 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 8c cb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002cb8c
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 d0 40 00 00       	jmp    c0012e51 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 92 af 02 c0       	mov    eax,0xc002af92
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 de b0 02 c0       	push   0xc002b0de
c000ee54:	e8 40 bb 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 e4 b0 02 c0       	push   0xc002b0e4
c000ee8c:	e8 08 bb 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 80 f5 02 c0 04 	test   BYTE PTR ds:0xc002f580,0x4
c000eee4:	68 68 12 00 00       	push   0x1268
c000eee9:	0f 94 05 a4 e4 02 c0 	sete   BYTE PTR ds:0xc002e4a4
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 e7 93 00 00       	call   c00182e6 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 7c 53 00 00       	call   c001428a <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 36 a2 00 00       	call   c0019174 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 3d 53 00 00       	call   c001428a <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 c9 58 00 00       	call   c0014832 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 0d 53 00 00       	call   c001428a <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 8b f6 00 00       	call   c001e62a <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 ea b0 02 c0       	push   0xc002b0ea
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 64 3e 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 fb b0 02 c0       	push   0xc002b0fb
c000f00a:	e8 8a b9 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 08 b1 02 c0       	push   0xc002b108
c000f01f:	e8 75 b9 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 12 b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b112
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 5e b9 00 00       	jmp    c001a999 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 4c b1 02 c0       	push   0xc002b14c
c000f0d0:	e8 7c 3d 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 72 f5 02 c0       	mov    ds:0xc002f572,eax
c000f111:	66 89 15 70 f5 02 c0 	mov    WORD PTR ds:0xc002f570,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c000f228:	48                   	dec    eax
c000f229:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 d1 a2 01 00       	call   c0029550 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 c8 a2 01 00       	call   c0029550 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 78 f5 02 c0 ff 07 	mov    WORD PTR ds:0xc002f578,0x7ff
c000f375:	a3 7a f5 02 c0       	mov    ds:0xc002f57a,eax
c000f37a:	0f 01 1d 78 f5 02 c0 	lidtd  ds:0xc002f578
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c000f66c:	e8 f9 2c 00 00       	call   c001236a <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 d3 1c 00 00       	call   c0011362 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 04 1d 00 00       	call   c00113a2 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 68 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f568
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d 90 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e490
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 90 e4 02 c0       	mov    eax,ds:0xc002e490
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 68 b1 02 c0       	push   0xc002b168
c000f745:	e8 07 37 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 90 e4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e490,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c000f771:	8b 2d 90 e4 02 c0    	mov    ebp,DWORD PTR ds:0xc002e490
c000f777:	e8 7c 07 00 00       	call   c000fef8 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 df 2a 00 00       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d 90 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e490
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 98 b1 02 c0       	push   0xc002b198
c000f7fd:	e8 97 b1 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 9d b1 02 c0       	push   0xc002b19d
c000f813:	e8 81 b1 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c000f833:	48                   	dec    eax
c000f834:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c000f854:	e8 11 2b 00 00       	call   c001236a <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c000f86a:	e8 a5 27 00 00       	call   c0012014 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <hwTextMode_loadInData(VgaText*)>:
c000f8e6:	55                   	push   ebp
c000f8e7:	a1 a0 e4 02 c0       	mov    eax,ds:0xc002e4a0
c000f8ec:	57                   	push   edi
c000f8ed:	56                   	push   esi
c000f8ee:	53                   	push   ebx
c000f8ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8f3:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8f6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8f9:	85 d2                	test   edx,edx
c000f8fb:	7e 29                	jle    c000f926 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8fd:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f903:	31 f6                	xor    esi,esi
c000f905:	29 cd                	sub    ebp,ecx
c000f907:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f90a:	31 c0                	xor    eax,eax
c000f90c:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f910:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f914:	40                   	inc    eax
c000f915:	83 f8 50             	cmp    eax,0x50
c000f918:	75 f2                	jne    c000f90c <hwTextMode_loadInData(VgaText*)+0x26>
c000f91a:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f920:	46                   	inc    esi
c000f921:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f924:	7f e1                	jg     c000f907 <hwTextMode_loadInData(VgaText*)+0x21>
c000f926:	5b                   	pop    ebx
c000f927:	5e                   	pop    esi
c000f928:	5f                   	pop    edi
c000f929:	5d                   	pop    ebp
c000f92a:	c3                   	ret    

c000f92b <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f92b:	55                   	push   ebp
c000f92c:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	53                   	push   ebx
c000f936:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93a:	75 44                	jne    c000f980 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f93c:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f93f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f942:	8b 15 a0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a0
c000f948:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f94c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f952:	eb 08                	jmp    c000f95c <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f954:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f957:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95a:	89 da                	mov    edx,ebx
c000f95c:	83 e5 0f             	and    ebp,0xf
c000f95f:	c1 e0 04             	shl    eax,0x4
c000f962:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f965:	0f b6 c0             	movzx  eax,al
c000f968:	41                   	inc    ecx
c000f969:	09 e8                	or     eax,ebp
c000f96b:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f96f:	c1 e0 08             	shl    eax,0x8
c000f972:	09 e8                	or     eax,ebp
c000f974:	39 fb                	cmp    ebx,edi
c000f976:	66 89 02             	mov    WORD PTR [edx],ax
c000f979:	75 d9                	jne    c000f954 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f97b:	5b                   	pop    ebx
c000f97c:	5e                   	pop    esi
c000f97d:	5f                   	pop    edi
c000f97e:	5d                   	pop    ebp
c000f97f:	c3                   	ret    
c000f980:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f987:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f98e:	31 c0                	xor    eax,eax
c000f990:	bd 02 00 00 00       	mov    ebp,0x2
c000f995:	eb ab                	jmp    c000f942 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f997 <hwTextMode_showCursor(VgaText*, bool)>:
c000f997:	56                   	push   esi
c000f998:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000f99f:	53                   	push   ebx
c000f9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a4:	75 36                	jne    c000f9dc <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9a6:	84 c0                	test   al,al
c000f9a8:	74 35                	je     c000f9df <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9aa:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9af:	b0 0a                	mov    al,0xa
c000f9b1:	89 da                	mov    edx,ebx
c000f9b3:	ee                   	out    dx,al
c000f9b4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9b9:	89 ca                	mov    edx,ecx
c000f9bb:	ec                   	in     al,dx
c000f9bc:	b2 0f                	mov    dl,0xf
c000f9be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9c2:	83 e0 c0             	and    eax,0xffffffc0
c000f9c5:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9c8:	09 d0                	or     eax,edx
c000f9ca:	89 ca                	mov    edx,ecx
c000f9cc:	ee                   	out    dx,al
c000f9cd:	b0 0b                	mov    al,0xb
c000f9cf:	89 da                	mov    edx,ebx
c000f9d1:	ee                   	out    dx,al
c000f9d2:	89 ca                	mov    edx,ecx
c000f9d4:	ec                   	in     al,dx
c000f9d5:	83 e0 e0             	and    eax,0xffffffe0
c000f9d8:	83 c8 0f             	or     eax,0xf
c000f9db:	ee                   	out    dx,al
c000f9dc:	5b                   	pop    ebx
c000f9dd:	5e                   	pop    esi
c000f9de:	c3                   	ret    
c000f9df:	b0 0a                	mov    al,0xa
c000f9e1:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9e6:	ee                   	out    dx,al
c000f9e7:	b0 20                	mov    al,0x20
c000f9e9:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ee:	ee                   	out    dx,al
c000f9ef:	5b                   	pop    ebx
c000f9f0:	5e                   	pop    esi
c000f9f1:	c3                   	ret    

c000f9f2 <hwTextMode_update(VgaText*)>:
c000f9f2:	c3                   	ret    

c000f9f3 <hwTextMode_updateCursor(VgaText*)>:
c000f9f3:	56                   	push   esi
c000f9f4:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000f9fb:	53                   	push   ebx
c000f9fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa00:	75 36                	jne    c000fa38 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa02:	be d4 03 00 00       	mov    esi,0x3d4
c000fa07:	b9 19 00 00 00       	mov    ecx,0x19
c000fa0c:	89 f2                	mov    edx,esi
c000fa0e:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa11:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa14:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa17:	c1 e1 04             	shl    ecx,0x4
c000fa1a:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa1d:	b0 0f                	mov    al,0xf
c000fa1f:	ee                   	out    dx,al
c000fa20:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa25:	88 c8                	mov    al,cl
c000fa27:	89 da                	mov    edx,ebx
c000fa29:	ee                   	out    dx,al
c000fa2a:	b0 0e                	mov    al,0xe
c000fa2c:	89 f2                	mov    edx,esi
c000fa2e:	ee                   	out    dx,al
c000fa2f:	89 c8                	mov    eax,ecx
c000fa31:	89 da                	mov    edx,ebx
c000fa33:	66 c1 e8 08          	shr    ax,0x8
c000fa37:	ee                   	out    dx,al
c000fa38:	5b                   	pop    ebx
c000fa39:	5e                   	pop    esi
c000fa3a:	c3                   	ret    

c000fa3b <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa3f:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000fa46:	75 38                	jne    c000fa80 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa48:	ba da 03 00 00       	mov    edx,0x3da
c000fa4d:	84 c0                	test   al,al
c000fa4f:	75 18                	jne    c000fa69 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa51:	ec                   	in     al,dx
c000fa52:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa57:	b0 30                	mov    al,0x30
c000fa59:	89 ca                	mov    edx,ecx
c000fa5b:	ee                   	out    dx,al
c000fa5c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa61:	ec                   	in     al,dx
c000fa62:	83 c8 08             	or     eax,0x8
c000fa65:	89 ca                	mov    edx,ecx
c000fa67:	ee                   	out    dx,al
c000fa68:	c3                   	ret    
c000fa69:	ec                   	in     al,dx
c000fa6a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa6f:	b0 30                	mov    al,0x30
c000fa71:	89 ca                	mov    edx,ecx
c000fa73:	ee                   	out    dx,al
c000fa74:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa79:	ec                   	in     al,dx
c000fa7a:	83 e0 f7             	and    eax,0xfffffff7
c000fa7d:	89 ca                	mov    edx,ecx
c000fa7f:	ee                   	out    dx,al
c000fa80:	c3                   	ret    

c000fa81 <hwTextMode_scrollScreen(VgaText*)>:
c000fa81:	55                   	push   ebp
c000fa82:	57                   	push   edi
c000fa83:	56                   	push   esi
c000fa84:	53                   	push   ebx
c000fa85:	83 ec 1c             	sub    esp,0x1c
c000fa88:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa8c:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000fa93:	74 0e                	je     c000faa3 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa95:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa9c:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000faa3:	a1 a0 e4 02 c0       	mov    eax,ds:0xc002e4a0
c000faa8:	bd 02 00 00 00       	mov    ebp,0x2
c000faad:	05 a0 00 00 00       	add    eax,0xa0
c000fab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fab6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faba:	31 c0                	xor    eax,eax
c000fabc:	eb 0b                	jmp    c000fac9 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fabe:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fac4:	74 51                	je     c000fb17 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fac6:	43                   	inc    ebx
c000fac7:	89 f0                	mov    eax,esi
c000fac9:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000facf:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fad5:	88 13                	mov    BYTE PTR [ebx],dl
c000fad7:	8d 70 01             	lea    esi,[eax+0x1]
c000fada:	83 fd 18             	cmp    ebp,0x18
c000fadd:	75 df                	jne    c000fabe <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fadf:	a8 01                	test   al,0x1
c000fae1:	75 13                	jne    c000faf6 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fae3:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fae6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faec:	75 d8                	jne    c000fac6 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faee:	83 c4 1c             	add    esp,0x1c
c000faf1:	5b                   	pop    ebx
c000faf2:	5e                   	pop    esi
c000faf3:	5f                   	pop    edi
c000faf4:	5d                   	pop    ebp
c000faf5:	c3                   	ret    
c000faf6:	83 ec 08             	sub    esp,0x8
c000faf9:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fafd:	50                   	push   eax
c000fafe:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb02:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb06:	50                   	push   eax
c000fb07:	e8 0c 0c 00 00       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb0c:	83 c4 10             	add    esp,0x10
c000fb0f:	88 07                	mov    BYTE PTR [edi],al
c000fb11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb15:	eb cf                	jmp    c000fae6 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb17:	45                   	inc    ebp
c000fb18:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb20:	eb 94                	jmp    c000fab6 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb22 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb22:	57                   	push   edi
c000fb23:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000fb2a:	56                   	push   esi
c000fb2b:	53                   	push   ebx
c000fb2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb30:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb34:	75 62                	jne    c000fb98 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb36:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb3b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb40:	83 ec 08             	sub    esp,0x8
c000fb43:	52                   	push   edx
c000fb44:	50                   	push   eax
c000fb45:	e8 ce 0b 00 00       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb4a:	5a                   	pop    edx
c000fb4b:	0f b6 c0             	movzx  eax,al
c000fb4e:	59                   	pop    ecx
c000fb4f:	50                   	push   eax
c000fb50:	0f be c3             	movsx  eax,bl
c000fb53:	50                   	push   eax
c000fb54:	e8 65 0c 00 00       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	8b 35 a0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4a0
c000fb62:	80 3d 00 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f600,0x0
c000fb69:	74 07                	je     c000fb72 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb6b:	66 0f be c3          	movsx  ax,bl
c000fb6f:	80 cc 02             	or     ah,0x2
c000fb72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb76:	ba 19 00 00 00       	mov    edx,0x19
c000fb7b:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb7e:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb81:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb84:	c1 e1 04             	shl    ecx,0x4
c000fb87:	c1 e2 04             	shl    edx,0x4
c000fb8a:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb8e:	01 ca                	add    edx,ecx
c000fb90:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb94:	5b                   	pop    ebx
c000fb95:	5e                   	pop    esi
c000fb96:	5f                   	pop    edi
c000fb97:	c3                   	ret    
c000fb98:	b8 02 00 00 00       	mov    eax,0x2
c000fb9d:	31 d2                	xor    edx,edx
c000fb9f:	eb 9f                	jmp    c000fb40 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fba1 <setupTextMode()>:
c000fba1:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fba6:	83 e0 30             	and    eax,0x30
c000fba9:	66 83 f8 30          	cmp    ax,0x30
c000fbad:	75 11                	jne    c000fbc0 <setupTextMode()+0x1f>
c000fbaf:	81 2d a0 e4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e4a0,0x8000
c000fbb9:	c6 05 00 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f600,0x1
c000fbc0:	c7 05 38 f6 02 c0 3b fa 00 c0 	mov    DWORD PTR ds:0xc002f638,0xc000fa3b
c000fbca:	c7 05 24 f6 02 c0 e6 f8 00 c0 	mov    DWORD PTR ds:0xc002f624,0xc000f8e6
c000fbd4:	c7 05 20 f6 02 c0 2b f9 00 c0 	mov    DWORD PTR ds:0xc002f620,0xc000f92b
c000fbde:	c7 05 2c f6 02 c0 81 fa 00 c0 	mov    DWORD PTR ds:0xc002f62c,0xc000fa81
c000fbe8:	c7 05 34 f6 02 c0 97 f9 00 c0 	mov    DWORD PTR ds:0xc002f634,0xc000f997
c000fbf2:	c7 05 28 f6 02 c0 f2 f9 00 c0 	mov    DWORD PTR ds:0xc002f628,0xc000f9f2
c000fbfc:	c7 05 30 f6 02 c0 f3 f9 00 c0 	mov    DWORD PTR ds:0xc002f630,0xc000f9f3
c000fc06:	c7 05 3c f6 02 c0 22 fb 00 c0 	mov    DWORD PTR ds:0xc002f63c,0xc000fb22
c000fc10:	c3                   	ret    

c000fc11 <kernel_main>:
c000fc11:	57                   	push   edi
c000fc12:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc17:	56                   	push   esi
c000fc18:	89 fa                	mov    edx,edi
c000fc1a:	53                   	push   ebx
c000fc1b:	31 f6                	xor    esi,esi
c000fc1d:	83 ec 2c             	sub    esp,0x2c
c000fc20:	89 f0                	mov    eax,esi
c000fc22:	ee                   	out    dx,al
c000fc23:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc28:	b0 80                	mov    al,0x80
c000fc2a:	89 da                	mov    edx,ebx
c000fc2c:	ee                   	out    dx,al
c000fc2d:	b1 03                	mov    cl,0x3
c000fc2f:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc34:	88 c8                	mov    al,cl
c000fc36:	ee                   	out    dx,al
c000fc37:	89 f0                	mov    eax,esi
c000fc39:	89 fa                	mov    edx,edi
c000fc3b:	ee                   	out    dx,al
c000fc3c:	88 c8                	mov    al,cl
c000fc3e:	89 da                	mov    edx,ebx
c000fc40:	ee                   	out    dx,al
c000fc41:	b0 c7                	mov    al,0xc7
c000fc43:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc48:	ee                   	out    dx,al
c000fc49:	b0 0b                	mov    al,0xb
c000fc4b:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc50:	ee                   	out    dx,al
c000fc51:	68 a4 b1 02 c0       	push   0xc002b1a4
c000fc56:	e8 f6 31 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000fc5b:	e8 4a 09 00 00       	call   c00105aa <installVgaTextImplementation()>
c000fc60:	e8 3c ff ff ff       	call   c000fba1 <setupTextMode()>
c000fc65:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc6a:	05 ff 0f 00 00       	add    eax,0xfff
c000fc6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc74:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc77:	e8 f5 03 00 00       	call   c0010071 <Phys::physicalMemorySetup(unsigned int)>
c000fc7c:	e8 6f 1f 00 00       	call   c0011bf0 <Virt::virtualMemorySetup()>
c000fc81:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc90:	75 0e                	jne    c000fca0 <kernel_main+0x8f>
c000fc92:	89 d8                	mov    eax,ebx
c000fc94:	25 48 03 00 00       	and    eax,0x348
c000fc99:	3d 00 03 00 00       	cmp    eax,0x300
c000fc9e:	74 10                	je     c000fcb0 <kernel_main+0x9f>
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	68 8d cb 02 c0       	push   0xc002cb8d
c000fca8:	e8 ec ac 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	83 ec 0c             	sub    esp,0xc
c000fcb3:	89 1d 80 f5 02 c0    	mov    DWORD PTR ds:0xc002f580,ebx
c000fcb9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcbd:	53                   	push   ebx
c000fcbe:	e8 79 21 00 00       	call   c0011e3c <VAS::VAS()>
c000fcc3:	89 1d f0 f6 02 c0    	mov    DWORD PTR ds:0xc002f6f0,ebx
c000fcc9:	e8 52 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcce:	c7 04 24 bb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1bb
c000fcd5:	e8 77 31 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000fcda:	e8 90 1f 00 00       	call   c0011c6f <Virt::swappingSetup()>
c000fcdf:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fce6:	e8 a1 fb ff ff       	call   c000f88c <malloc>
c000fceb:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcee:	89 c6                	mov    esi,eax
c000fcf0:	e8 8f ea ff ff       	call   c000e784 <Computer::Computer()>
c000fcf5:	58                   	pop    eax
c000fcf6:	89 35 68 f5 02 c0    	mov    DWORD PTR ds:0xc002f568,esi
c000fcfc:	5a                   	pop    edx
c000fcfd:	56                   	push   esi
c000fcfe:	68 d8 b1 02 c0       	push   0xc002b1d8
c000fd03:	e8 49 31 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000fd08:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c000fd0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd0f:	6a 00                	push   0x0
c000fd11:	6a 00                	push   0x0
c000fd13:	6a 00                	push   0x0
c000fd15:	50                   	push   eax
c000fd16:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd19:	83 c4 14             	add    esp,0x14
c000fd1c:	53                   	push   ebx
c000fd1d:	e8 ca 23 00 00       	call   c00120ec <VAS::~VAS()>
c000fd22:	c7 04 24 eb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1eb
c000fd29:	e8 6b ac 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000fd2e:	83 c4 30             	add    esp,0x30
c000fd31:	5b                   	pop    ebx
c000fd32:	5e                   	pop    esi
c000fd33:	5f                   	pop    edi
c000fd34:	c3                   	ret    

c000fd35 <Phys::allocateDMA(unsigned long)>:
c000fd35:	55                   	push   ebp
c000fd36:	31 d2                	xor    edx,edx
c000fd38:	57                   	push   edi
c000fd39:	31 ed                	xor    ebp,ebp
c000fd3b:	56                   	push   esi
c000fd3c:	31 c9                	xor    ecx,ecx
c000fd3e:	53                   	push   ebx
c000fd3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd43:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd49:	31 c0                	xor    eax,eax
c000fd4b:	c1 ee 0c             	shr    esi,0xc
c000fd4e:	eb 17                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x32>
c000fd50:	85 c9                	test   ecx,ecx
c000fd52:	75 04                	jne    c000fd58 <Phys::allocateDMA(unsigned long)+0x23>
c000fd54:	89 d5                	mov    ebp,edx
c000fd56:	89 d0                	mov    eax,edx
c000fd58:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd5b:	39 de                	cmp    esi,ebx
c000fd5d:	74 20                	je     c000fd7f <Phys::allocateDMA(unsigned long)+0x4a>
c000fd5f:	42                   	inc    edx
c000fd60:	89 d9                	mov    ecx,ebx
c000fd62:	83 fa 2f             	cmp    edx,0x2f
c000fd65:	7f 11                	jg     c000fd78 <Phys::allocateDMA(unsigned long)+0x43>
c000fd67:	80 ba c0 f5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0a40],0x0
c000fd6e:	74 e0                	je     c000fd50 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd70:	31 c9                	xor    ecx,ecx
c000fd72:	42                   	inc    edx
c000fd73:	83 fa 2f             	cmp    edx,0x2f
c000fd76:	7e ef                	jle    c000fd67 <Phys::allocateDMA(unsigned long)+0x32>
c000fd78:	5b                   	pop    ebx
c000fd79:	31 c0                	xor    eax,eax
c000fd7b:	5e                   	pop    esi
c000fd7c:	5f                   	pop    edi
c000fd7d:	5d                   	pop    ebp
c000fd7e:	c3                   	ret    
c000fd7f:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd82:	89 d7                	mov    edi,edx
c000fd84:	4f                   	dec    edi
c000fd85:	79 03                	jns    c000fd8a <Phys::allocateDMA(unsigned long)+0x55>
c000fd87:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd8a:	c1 ff 04             	sar    edi,0x4
c000fd8d:	89 c2                	mov    edx,eax
c000fd8f:	c1 fa 04             	sar    edx,0x4
c000fd92:	39 fa                	cmp    edx,edi
c000fd94:	75 2f                	jne    c000fdc5 <Phys::allocateDMA(unsigned long)+0x90>
c000fd96:	85 db                	test   ebx,ebx
c000fd98:	74 1a                	je     c000fdb4 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd9a:	be c0 f5 02 c0       	mov    esi,0xc002f5c0
c000fd9f:	8d 90 c0 f5 02 c0    	lea    edx,[eax-0x3ffd0a40]
c000fda5:	f7 d6                	not    esi
c000fda7:	29 c6                	sub    esi,eax
c000fda9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdac:	42                   	inc    edx
c000fdad:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdb0:	39 d9                	cmp    ecx,ebx
c000fdb2:	7f f5                	jg     c000fda9 <Phys::allocateDMA(unsigned long)+0x74>
c000fdb4:	85 ff                	test   edi,edi
c000fdb6:	74 13                	je     c000fdcb <Phys::allocateDMA(unsigned long)+0x96>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	05 50 20 0c 00       	add    eax,0xc2050
c000fdbe:	5e                   	pop    esi
c000fdbf:	c1 e0 0c             	shl    eax,0xc
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    
c000fdc5:	89 ea                	mov    edx,ebp
c000fdc7:	31 c9                	xor    ecx,ecx
c000fdc9:	eb a7                	jmp    c000fd72 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdcb:	5b                   	pop    ebx
c000fdcc:	c1 e0 0c             	shl    eax,0xc
c000fdcf:	5e                   	pop    esi
c000fdd0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdd5:	5f                   	pop    edi
c000fdd6:	5d                   	pop    ebp
c000fdd7:	c3                   	ret    

c000fdd8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fddc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fde0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fde6:	c1 e9 0c             	shr    ecx,0xc
c000fde9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdee:	76 25                	jbe    c000fe15 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdf0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdf5:	c1 e8 0c             	shr    eax,0xc
c000fdf8:	8d 50 10             	lea    edx,[eax+0x10]
c000fdfb:	85 c9                	test   ecx,ecx
c000fdfd:	74 15                	je     c000fe14 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdff:	8d 82 c0 f5 02 c0    	lea    eax,[edx-0x3ffd0a40]
c000fe05:	8d 94 11 c0 f5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0a40]
c000fe0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe0f:	40                   	inc    eax
c000fe10:	39 d0                	cmp    eax,edx
c000fe12:	75 f8                	jne    c000fe0c <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe14:	c3                   	ret    
c000fe15:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe1b:	c1 ea 0c             	shr    edx,0xc
c000fe1e:	eb db                	jmp    c000fdfb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe20 <Phys::setPageState(unsigned long, bool)>:
c000fe20:	56                   	push   esi
c000fe21:	ba 01 00 00 00       	mov    edx,0x1
c000fe26:	53                   	push   ebx
c000fe27:	8b 35 94 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e494
c000fe2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe35:	89 c8                	mov    eax,ecx
c000fe37:	83 e1 07             	and    ecx,0x7
c000fe3a:	c1 e8 03             	shr    eax,0x3
c000fe3d:	d3 e3                	shl    ebx,cl
c000fe3f:	01 c6                	add    esi,eax
c000fe41:	d3 e2                	shl    edx,cl
c000fe43:	f7 d2                	not    edx
c000fe45:	20 16                	and    BYTE PTR [esi],dl
c000fe47:	03 05 94 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e494
c000fe4d:	08 18                	or     BYTE PTR [eax],bl
c000fe4f:	5b                   	pop    ebx
c000fe50:	5e                   	pop    esi
c000fe51:	c3                   	ret    

c000fe52 <Phys::getPageState(unsigned long)>:
c000fe52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe56:	8b 15 94 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e494
c000fe5c:	89 c8                	mov    eax,ecx
c000fe5e:	83 e1 07             	and    ecx,0x7
c000fe61:	c1 e8 03             	shr    eax,0x3
c000fe64:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe68:	d3 f8                	sar    eax,cl
c000fe6a:	83 e0 01             	and    eax,0x1
c000fe6d:	c3                   	ret    

c000fe6e <Phys::freePage(unsigned long)>:
c000fe6e:	53                   	push   ebx
c000fe6f:	83 ec 08             	sub    esp,0x8
c000fe72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe76:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe7c:	76 57                	jbe    c000fed5 <Phys::freePage(unsigned long)+0x67>
c000fe7e:	c1 eb 0c             	shr    ebx,0xc
c000fe81:	53                   	push   ebx
c000fe82:	e8 cb ff ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000fe87:	5a                   	pop    edx
c000fe88:	84 c0                	test   al,al
c000fe8a:	74 5b                	je     c000fee7 <Phys::freePage(unsigned long)+0x79>
c000fe8c:	a1 b0 f5 02 c0       	mov    eax,ds:0xc002f5b0
c000fe91:	48                   	dec    eax
c000fe92:	a3 b0 f5 02 c0       	mov    ds:0xc002f5b0,eax
c000fe97:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe9a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe9d:	c1 e0 02             	shl    eax,0x2
c000fea0:	99                   	cdq    
c000fea1:	f7 3d b4 f5 02 c0    	idiv   DWORD PTR ds:0xc002f5b4
c000fea7:	39 05 ac f5 02 c0    	cmp    DWORD PTR ds:0xc002f5ac,eax
c000fead:	75 13                	jne    c000fec2 <Phys::freePage(unsigned long)+0x54>
c000feaf:	83 ec 08             	sub    esp,0x8
c000feb2:	6a 00                	push   0x0
c000feb4:	53                   	push   ebx
c000feb5:	e8 66 ff ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	83 c4 08             	add    esp,0x8
c000fec0:	5b                   	pop    ebx
c000fec1:	c3                   	ret    
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	a3 ac f5 02 c0       	mov    ds:0xc002f5ac,eax
c000feca:	50                   	push   eax
c000fecb:	e8 08 0a 00 00       	call   c00108d8 <VgaText::updateRAMUsageDisplay(int)>
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	eb da                	jmp    c000feaf <Phys::freePage(unsigned long)+0x41>
c000fed5:	68 00 10 00 00       	push   0x1000
c000feda:	53                   	push   ebx
c000fedb:	e8 f8 fe ff ff       	call   c000fdd8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee0:	59                   	pop    ecx
c000fee1:	5b                   	pop    ebx
c000fee2:	83 c4 08             	add    esp,0x8
c000fee5:	5b                   	pop    ebx
c000fee6:	c3                   	ret    
c000fee7:	c7 44 24 10 06 b2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b206
c000feef:	83 c4 08             	add    esp,0x8
c000fef2:	5b                   	pop    ebx
c000fef3:	e9 a1 aa 00 00       	jmp    c001a999 <Krnl::panic(char const*)>

c000fef8 <Phys::allocatePage()>:
c000fef8:	56                   	push   esi
c000fef9:	53                   	push   ebx
c000fefa:	51                   	push   ecx
c000fefb:	8b 35 a4 f5 02 c0    	mov    esi,DWORD PTR ds:0xc002f5a4
c000ff01:	89 f3                	mov    ebx,esi
c000ff03:	eb 0a                	jmp    c000ff0f <Phys::allocatePage()+0x17>
c000ff05:	89 1d a4 f5 02 c0    	mov    DWORD PTR ds:0xc002f5a4,ebx
c000ff0b:	39 de                	cmp    esi,ebx
c000ff0d:	74 24                	je     c000ff33 <Phys::allocatePage()+0x3b>
c000ff0f:	53                   	push   ebx
c000ff10:	e8 3d ff ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000ff15:	5a                   	pop    edx
c000ff16:	84 c0                	test   al,al
c000ff18:	74 77                	je     c000ff91 <Phys::allocatePage()+0x99>
c000ff1a:	43                   	inc    ebx
c000ff1b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff21:	75 e2                	jne    c000ff05 <Phys::allocatePage()+0xd>
c000ff23:	31 db                	xor    ebx,ebx
c000ff25:	c7 05 a4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5a4,0x0
c000ff2f:	39 de                	cmp    esi,ebx
c000ff31:	75 dc                	jne    c000ff0f <Phys::allocatePage()+0x17>
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff3e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff44:	e8 35 2c 00 00       	call   c0012b7e <VAS::scanForEviction()>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	85 c0                	test   eax,eax
c000ff4e:	75 76                	jne    c000ffc6 <Phys::allocatePage()+0xce>
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	68 1c b2 02 c0       	push   0xc002b21c
c000ff58:	e8 f4 2e 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c000ff5d:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff64:	e8 cc fd ff ff       	call   c000fd35 <Phys::allocateDMA(unsigned long)>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	85 c0                	test   eax,eax
c000ff6e:	75 56                	jne    c000ffc6 <Phys::allocatePage()+0xce>
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	68 2d b2 02 c0       	push   0xc002b22d
c000ff78:	e8 1c aa 00 00       	call   c001a999 <Krnl::panic(char const*)>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	8b 1d a4 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f5a4
c000ff86:	53                   	push   ebx
c000ff87:	e8 c6 fe ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000ff8c:	5a                   	pop    edx
c000ff8d:	84 c0                	test   al,al
c000ff8f:	75 89                	jne    c000ff1a <Phys::allocatePage()+0x22>
c000ff91:	6a 01                	push   0x1
c000ff93:	53                   	push   ebx
c000ff94:	e8 87 fe ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c000ff99:	a1 b0 f5 02 c0       	mov    eax,ds:0xc002f5b0
c000ff9e:	59                   	pop    ecx
c000ff9f:	40                   	inc    eax
c000ffa0:	5b                   	pop    ebx
c000ffa1:	a3 b0 f5 02 c0       	mov    ds:0xc002f5b0,eax
c000ffa6:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa9:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffac:	c1 e0 02             	shl    eax,0x2
c000ffaf:	99                   	cdq    
c000ffb0:	f7 3d b4 f5 02 c0    	idiv   DWORD PTR ds:0xc002f5b4
c000ffb6:	39 05 ac f5 02 c0    	cmp    DWORD PTR ds:0xc002f5ac,eax
c000ffbc:	75 0c                	jne    c000ffca <Phys::allocatePage()+0xd2>
c000ffbe:	a1 a4 f5 02 c0       	mov    eax,ds:0xc002f5a4
c000ffc3:	c1 e0 0c             	shl    eax,0xc
c000ffc6:	5a                   	pop    edx
c000ffc7:	5b                   	pop    ebx
c000ffc8:	5e                   	pop    esi
c000ffc9:	c3                   	ret    
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	a3 ac f5 02 c0       	mov    ds:0xc002f5ac,eax
c000ffd2:	50                   	push   eax
c000ffd3:	e8 00 09 00 00       	call   c00108d8 <VgaText::updateRAMUsageDisplay(int)>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	eb e1                	jmp    c000ffbe <Phys::allocatePage()+0xc6>

c000ffdd <Phys::allocateContiguousPages(int)>:
c000ffdd:	57                   	push   edi
c000ffde:	56                   	push   esi
c000ffdf:	53                   	push   ebx
c000ffe0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffe4:	fa                   	cli    
c000ffe5:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c000ffeb:	31 db                	xor    ebx,ebx
c000ffed:	85 db                	test   ebx,ebx
c000ffef:	75 11                	jne    c0010002 <Phys::allocateContiguousPages(int)+0x25>
c000fff1:	e8 02 ff ff ff       	call   c000fef8 <Phys::allocatePage()>
c000fff6:	83 fe 01             	cmp    esi,0x1
c000fff9:	89 c7                	mov    edi,eax
c000fffb:	74 21                	je     c001001e <Phys::allocateContiguousPages(int)+0x41>
c000fffd:	bb 01 00 00 00       	mov    ebx,0x1
c0010002:	e8 f1 fe ff ff       	call   c000fef8 <Phys::allocatePage()>
c0010007:	89 da                	mov    edx,ebx
c0010009:	c1 e2 0c             	shl    edx,0xc
c001000c:	01 fa                	add    edx,edi
c001000e:	39 c2                	cmp    edx,eax
c0010010:	74 20                	je     c0010032 <Phys::allocateContiguousPages(int)+0x55>
c0010012:	bb 01 00 00 00       	mov    ebx,0x1
c0010017:	89 c7                	mov    edi,eax
c0010019:	83 fe 01             	cmp    esi,0x1
c001001c:	75 e4                	jne    c0010002 <Phys::allocateContiguousPages(int)+0x25>
c001001e:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0010023:	48                   	dec    eax
c0010024:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0010029:	75 01                	jne    c001002c <Phys::allocateContiguousPages(int)+0x4f>
c001002b:	fb                   	sti    
c001002c:	89 f8                	mov    eax,edi
c001002e:	5b                   	pop    ebx
c001002f:	5e                   	pop    esi
c0010030:	5f                   	pop    edi
c0010031:	c3                   	ret    
c0010032:	43                   	inc    ebx
c0010033:	39 f3                	cmp    ebx,esi
c0010035:	75 b6                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x10>
c0010037:	eb e5                	jmp    c001001e <Phys::allocateContiguousPages(int)+0x41>

c0010039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010039:	56                   	push   esi
c001003a:	53                   	push   ebx
c001003b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001003f:	39 1d a8 f5 02 c0    	cmp    DWORD PTR ds:0xc002f5a8,ebx
c0010045:	73 06                	jae    c001004d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010047:	89 1d a8 f5 02 c0    	mov    DWORD PTR ds:0xc002f5a8,ebx
c001004d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010051:	c1 eb 0c             	shr    ebx,0xc
c0010054:	c1 e8 0c             	shr    eax,0xc
c0010057:	39 d8                	cmp    eax,ebx
c0010059:	73 13                	jae    c001006e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001005b:	6a 00                	push   0x0
c001005d:	8d 70 01             	lea    esi,[eax+0x1]
c0010060:	50                   	push   eax
c0010061:	e8 ba fd ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c0010066:	5a                   	pop    edx
c0010067:	89 f0                	mov    eax,esi
c0010069:	59                   	pop    ecx
c001006a:	39 f3                	cmp    ebx,esi
c001006c:	75 ed                	jne    c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001006e:	5b                   	pop    ebx
c001006f:	5e                   	pop    esi
c0010070:	c3                   	ret    

c0010071 <Phys::physicalMemorySetup(unsigned int)>:
c0010071:	55                   	push   ebp
c0010072:	57                   	push   edi
c0010073:	56                   	push   esi
c0010074:	53                   	push   ebx
c0010075:	31 db                	xor    ebx,ebx
c0010077:	83 ec 40             	sub    esp,0x40
c001007a:	6a 30                	push   0x30
c001007c:	6a 00                	push   0x0
c001007e:	68 c0 f5 02 c0       	push   0xc002f5c0
c0010083:	e8 c8 06 ff ff       	call   c0000750 <memset>
c0010088:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001008c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010091:	05 00 10 00 00       	add    eax,0x1000
c0010096:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001009a:	83 c4 10             	add    esp,0x10
c001009d:	83 ec 08             	sub    esp,0x8
c00100a0:	6a 01                	push   0x1
c00100a2:	53                   	push   ebx
c00100a3:	43                   	inc    ebx
c00100a4:	e8 77 fd ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100b2:	75 e9                	jne    c001009d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100b4:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100bb:	66 85 c0             	test   ax,ax
c00100be:	0f 84 8e 01 00 00    	je     c0010252 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100d4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100dd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100e5:	eb 15                	jmp    c00100fc <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100e7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100eb:	83 c3 18             	add    ebx,0x18
c00100ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100f6:	0f 84 66 01 00 00    	je     c0010262 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100ff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010102:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010105:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010109:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001010d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001010f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010112:	01 f0                	add    eax,esi
c0010114:	55                   	push   ebp
c0010115:	11 fa                	adc    edx,edi
c0010117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001011b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001011f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010123:	56                   	push   esi
c0010124:	68 68 b2 02 c0       	push   0xc002b268
c0010129:	e8 23 2d 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001012e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	09 f8                	or     eax,edi
c0010137:	0f 85 25 01 00 00    	jne    c0010262 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001013d:	4d                   	dec    ebp
c001013e:	75 a7                	jne    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010140:	ba 00 00 08 00       	mov    edx,0x80000
c0010145:	89 c1                	mov    ecx,eax
c0010147:	39 f2                	cmp    edx,esi
c0010149:	19 f9                	sbb    ecx,edi
c001014b:	0f 82 a7 00 00 00    	jb     c00101f8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010151:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010155:	89 c1                	mov    ecx,eax
c0010157:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001015b:	0f 83 97 00 00 00    	jae    c00101f8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010161:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010166:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001016e:	39 fa                	cmp    edx,edi
c0010170:	19 e8                	sbb    eax,ebp
c0010172:	0f 82 14 01 00 00    	jb     c001028c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010178:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001017c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010180:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010186:	ba ff 1f 00 00       	mov    edx,0x1fff
c001018b:	83 d5 ff             	adc    ebp,0xffffffff
c001018e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010192:	31 c0                	xor    eax,eax
c0010194:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010198:	39 fa                	cmp    edx,edi
c001019a:	89 c1                	mov    ecx,eax
c001019c:	19 e9                	sbb    ecx,ebp
c001019e:	0f 83 43 ff ff ff    	jae    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101a4:	be 00 00 08 00       	mov    esi,0x80000
c00101a9:	50                   	push   eax
c00101aa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ae:	57                   	push   edi
c00101af:	56                   	push   esi
c00101b0:	68 8c b2 02 c0       	push   0xc002b28c
c00101b5:	e8 97 2c 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00101ba:	5a                   	pop    edx
c00101bb:	59                   	pop    ecx
c00101bc:	57                   	push   edi
c00101bd:	56                   	push   esi
c00101be:	e8 76 fe ff ff       	call   c0010039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101cb:	83 c4 0c             	add    esp,0xc
c00101ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101d2:	03 05 b4 f5 02 c0    	add    eax,DWORD PTR ds:0xc002f5b4
c00101d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101df:	a3 b4 f5 02 c0       	mov    ds:0xc002f5b4,eax
c00101e4:	52                   	push   edx
c00101e5:	50                   	push   eax
c00101e6:	68 49 b2 02 c0       	push   0xc002b249
c00101eb:	e8 61 2c 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	e9 ef fe ff ff       	jmp    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010204:	39 ea                	cmp    edx,ebp
c0010206:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001020a:	0f 82 d7 fe ff ff    	jb     c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010210:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010215:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010219:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001021d:	0f 83 c4 fe ff ff    	jae    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010223:	39 ee                	cmp    esi,ebp
c0010225:	89 f8                	mov    eax,edi
c0010227:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001022b:	0f 83 78 ff ff ff    	jae    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010239:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001023d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010241:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001024d:	e9 57 ff ff ff       	jmp    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	68 3b b2 02 c0       	push   0xc002b23b
c001025a:	e8 3a a7 00 00       	call   c001a999 <Krnl::panic(char const*)>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	bb 40 01 00 00       	mov    ebx,0x140
c0010267:	83 ec 08             	sub    esp,0x8
c001026a:	6a 00                	push   0x0
c001026c:	53                   	push   ebx
c001026d:	43                   	inc    ebx
c001026e:	e8 ad fb ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c0010273:	ff 05 b4 f5 02 c0    	inc    DWORD PTR ds:0xc002f5b4
c0010279:	83 c4 10             	add    esp,0x10
c001027c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010282:	75 e3                	jne    c0010267 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010284:	83 c4 3c             	add    esp,0x3c
c0010287:	5b                   	pop    ebx
c0010288:	5e                   	pop    esi
c0010289:	5f                   	pop    edi
c001028a:	5d                   	pop    ebp
c001028b:	c3                   	ret    
c001028c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010294:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001029c:	e9 d7 fe ff ff       	jmp    c0010178 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102a1:	90                   	nop

c00102a2 <Pipe::isAtty()>:
c00102a2:	31 c0                	xor    eax,eax
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <Pipe::~Pipe()>:
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ba f8 b2 02 c0       	mov    edx,0xc002b2f8
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	89 10                	mov    DWORD PTR [eax],edx
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	50                   	push   eax
c00102bc:	e8 0f 15 00 00       	call   c00117d0 <UnixFile::~UnixFile()>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	90                   	nop
c00102c5:	83 c4 0c             	add    esp,0xc
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <Pipe::~Pipe()>:
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 cd ff ff ff       	call   c00102a6 <Pipe::~Pipe()>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	6a 20                	push   0x20
c00102e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e5:	e8 87 2a 00 00       	call   c0012d71 <operator delete(void*, unsigned long)>
c00102ea:	83 c4 10             	add    esp,0x10
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::read(unsigned long long, void*, int*)>:
c00102f2:	55                   	push   ebp
c00102f3:	57                   	push   edi
c00102f4:	56                   	push   esi
c00102f5:	53                   	push   ebx
c00102f6:	83 ec 1c             	sub    esp,0x1c
c00102f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010301:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010305:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010308:	89 c8                	mov    eax,ecx
c001030a:	99                   	cdq    
c001030b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001030f:	74 24                	je     c0010335 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010311:	39 f9                	cmp    ecx,edi
c0010313:	89 d1                	mov    ecx,edx
c0010315:	19 f1                	sbb    ecx,esi
c0010317:	73 1c                	jae    c0010335 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010319:	fa                   	cli    
c001031a:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c0010320:	e8 27 e4 00 00       	call   c001e74c <schedule()>
c0010325:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001032a:	48                   	dec    eax
c001032b:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0010330:	75 d3                	jne    c0010305 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010332:	fb                   	sti    
c0010333:	eb d0                	jmp    c0010305 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010335:	39 f8                	cmp    eax,edi
c0010337:	89 d1                	mov    ecx,edx
c0010339:	89 3c 24             	mov    DWORD PTR [esp],edi
c001033c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010340:	19 f1                	sbb    ecx,esi
c0010342:	73 07                	jae    c001034b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010344:	89 04 24             	mov    DWORD PTR [esp],eax
c0010347:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001034b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001034e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010351:	29 f7                	sub    edi,esi
c0010353:	89 f8                	mov    eax,edi
c0010355:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010359:	99                   	cdq    
c001035a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001035d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010361:	19 d0                	sbb    eax,edx
c0010363:	73 07                	jae    c001036c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010365:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001036c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001036f:	89 ea                	mov    edx,ebp
c0010371:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010375:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001037a:	74 0d                	je     c0010389 <Pipe::read(unsigned long long, void*, int*)+0x97>
c001037c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001037f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010389:	85 d2                	test   edx,edx
c001038b:	74 11                	je     c001039e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001038d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010391:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010394:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010398:	89 d1                	mov    ecx,edx
c001039a:	89 c7                	mov    edi,eax
c001039c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103a1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103a4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103a7:	99                   	cdq    
c00103a8:	89 f7                	mov    edi,esi
c00103aa:	03 04 24             	add    eax,DWORD PTR [esp]
c00103ad:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103b1:	c1 ff 1f             	sar    edi,0x1f
c00103b4:	57                   	push   edi
c00103b5:	56                   	push   esi
c00103b6:	52                   	push   edx
c00103b7:	50                   	push   eax
c00103b8:	e8 87 75 01 00       	call   c0027944 <__umoddi3>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103c3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103c8:	75 10                	jne    c00103da <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00103ca:	83 ec 0c             	sub    esp,0xc
c00103cd:	68 b5 b2 02 c0       	push   0xc002b2b5
c00103d2:	e8 c2 a5 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103de:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00103e1:	89 10                	mov    DWORD PTR [eax],edx
c00103e3:	83 c4 1c             	add    esp,0x1c
c00103e6:	31 c0                	xor    eax,eax
c00103e8:	5b                   	pop    ebx
c00103e9:	5e                   	pop    esi
c00103ea:	5f                   	pop    edi
c00103eb:	5d                   	pop    ebp
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <Pipe::write(unsigned long long, void*, int*)>:
c00103ee:	55                   	push   ebp
c00103ef:	57                   	push   edi
c00103f0:	56                   	push   esi
c00103f1:	53                   	push   ebx
c00103f2:	83 ec 1c             	sub    esp,0x1c
c00103f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103fd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010400:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010404:	89 04 24             	mov    DWORD PTR [esp],eax
c0010407:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001040b:	89 d8                	mov    eax,ebx
c001040d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010410:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010414:	89 d6                	mov    esi,edx
c0010416:	89 d7                	mov    edi,edx
c0010418:	c1 ff 1f             	sar    edi,0x1f
c001041b:	03 34 24             	add    esi,DWORD PTR [esp]
c001041e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010422:	c1 f8 1f             	sar    eax,0x1f
c0010425:	39 f3                	cmp    ebx,esi
c0010427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001042b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001042f:	19 f8                	sbb    eax,edi
c0010431:	b8 01 00 00 00       	mov    eax,0x1
c0010436:	72 6e                	jb     c00104a6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010438:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001043b:	01 d0                	add    eax,edx
c001043d:	99                   	cdq    
c001043e:	f7 fb                	idiv   ebx
c0010440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010444:	29 d3                	sub    ebx,edx
c0010446:	89 d7                	mov    edi,edx
c0010448:	89 de                	mov    esi,ebx
c001044a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001044d:	c1 fb 1f             	sar    ebx,0x1f
c0010450:	39 f2                	cmp    edx,esi
c0010452:	19 d8                	sbb    eax,ebx
c0010454:	b8 00 00 00 00       	mov    eax,0x0
c0010459:	72 04                	jb     c001045f <Pipe::write(unsigned long long, void*, int*)+0x71>
c001045b:	89 d0                	mov    eax,edx
c001045d:	29 f0                	sub    eax,esi
c001045f:	89 d3                	mov    ebx,edx
c0010461:	29 c3                	sub    ebx,eax
c0010463:	74 0b                	je     c0010470 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010465:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010468:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001046c:	89 d9                	mov    ecx,ebx
c001046e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010470:	85 c0                	test   eax,eax
c0010472:	74 0d                	je     c0010481 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010474:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010478:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001047b:	89 de                	mov    esi,ebx
c001047d:	89 c1                	mov    ecx,eax
c001047f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010481:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010484:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010489:	75 10                	jne    c001049b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001048b:	83 ec 0c             	sub    esp,0xc
c001048e:	68 d1 b2 02 c0       	push   0xc002b2d1
c0010493:	e8 01 a5 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0010498:	83 c4 10             	add    esp,0x10
c001049b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001049f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00104a2:	89 08                	mov    DWORD PTR [eax],ecx
c00104a4:	31 c0                	xor    eax,eax
c00104a6:	83 c4 1c             	add    esp,0x1c
c00104a9:	5b                   	pop    ebx
c00104aa:	5e                   	pop    esi
c00104ab:	5f                   	pop    edi
c00104ac:	5d                   	pop    ebp
c00104ad:	c3                   	ret    

c00104ae <Pipe::Pipe(int)>:
c00104ae:	83 ec 0c             	sub    esp,0xc
c00104b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b5:	83 ec 08             	sub    esp,0x8
c00104b8:	6a 00                	push   0x0
c00104ba:	50                   	push   eax
c00104bb:	e8 2e 11 00 00       	call   c00115ee <UnixFile::UnixFile(int)>
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	ba f8 b2 02 c0       	mov    edx,0xc002b2f8
c00104c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cc:	89 10                	mov    DWORD PTR [eax],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104f3:	83 ec 0c             	sub    esp,0xc
c00104f6:	50                   	push   eax
c00104f7:	e8 90 f3 ff ff       	call   c000f88c <malloc>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	89 c2                	mov    edx,eax
c0010501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010505:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010510:	90                   	nop
c0010511:	83 c4 0c             	add    esp,0xc
c0010514:	c3                   	ret    
c0010515:	90                   	nop

c0010516 <VgaText::isAtty()>:
c0010516:	b0 01                	mov    al,0x1
c0010518:	c3                   	ret    
c0010519:	90                   	nop

c001051a <VgaText::~VgaText()>:
c001051a:	83 ec 0c             	sub    esp,0xc
c001051d:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c0010522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010526:	89 10                	mov    DWORD PTR [eax],edx
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	83 ec 0c             	sub    esp,0xc
c001052f:	50                   	push   eax
c0010530:	e8 9b 12 00 00       	call   c00117d0 <UnixFile::~UnixFile()>
c0010535:	83 c4 10             	add    esp,0x10
c0010538:	90                   	nop
c0010539:	83 c4 0c             	add    esp,0xc
c001053c:	c3                   	ret    
c001053d:	90                   	nop

c001053e <VgaText::~VgaText()>:
c001053e:	83 ec 0c             	sub    esp,0xc
c0010541:	83 ec 0c             	sub    esp,0xc
c0010544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010548:	e8 cd ff ff ff       	call   c001051a <VgaText::~VgaText()>
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	83 ec 08             	sub    esp,0x8
c0010553:	68 c4 02 00 00       	push   0x2c4
c0010558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055c:	e8 10 28 00 00       	call   c0012d71 <operator delete(void*, unsigned long)>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	83 c4 0c             	add    esp,0xc
c0010567:	c3                   	ret    

c0010568 <VgaText::read(unsigned long long, void*, int*)>:
c0010568:	83 ec 10             	sub    esp,0x10
c001056b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001056f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010577:	e8 8a 5d 00 00       	call   c0016306 <readKeyboard(VgaText*, char*, unsigned long)>
c001057c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010580:	89 02                	mov    DWORD PTR [edx],eax
c0010582:	31 c0                	xor    eax,eax
c0010584:	83 c4 1c             	add    esp,0x1c
c0010587:	c3                   	ret    

c0010588 <setTerminalScrollLock(bool)>:
c0010588:	c3                   	ret    

c0010589 <addToTerminalCycle(VgaText*)>:
c0010589:	8b 15 40 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f640
c001058f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010593:	85 d2                	test   edx,edx
c0010595:	75 09                	jne    c00105a0 <addToTerminalCycle(VgaText*)+0x17>
c0010597:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001059a:	a3 40 f6 02 c0       	mov    ds:0xc002f640,eax
c001059f:	c3                   	ret    
c00105a0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105a3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105a6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105a9:	c3                   	ret    

c00105aa <installVgaTextImplementation()>:
c00105aa:	83 ec 10             	sub    esp,0x10
c00105ad:	6a 20                	push   0x20
c00105af:	6a 00                	push   0x0
c00105b1:	68 20 f6 02 c0       	push   0xc002f620
c00105b6:	e8 95 01 ff ff       	call   c0000750 <memset>
c00105bb:	83 c4 1c             	add    esp,0x1c
c00105be:	c3                   	ret    

c00105bf <scrollTerminalScrollLock(int)>:
c00105bf:	c3                   	ret    

c00105c0 <VgaText::load()>:
c00105c0:	53                   	push   ebx
c00105c1:	31 c0                	xor    eax,eax
c00105c3:	83 ec 58             	sub    esp,0x58
c00105c6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105ca:	89 e2                	mov    edx,esp
c00105cc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105d0:	40                   	inc    eax
c00105d1:	83 f8 50             	cmp    eax,0x50
c00105d4:	75 f6                	jne    c00105cc <VgaText::load()+0xc>
c00105d6:	31 c0                	xor    eax,eax
c00105d8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105df:	84 c9                	test   cl,cl
c00105e1:	74 06                	je     c00105e9 <VgaText::load()+0x29>
c00105e3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e6:	40                   	inc    eax
c00105e7:	eb ef                	jmp    c00105d8 <VgaText::load()+0x18>
c00105e9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 09                	je     c00105f9 <VgaText::load()+0x39>
c00105f0:	51                   	push   ecx
c00105f1:	51                   	push   ecx
c00105f2:	52                   	push   edx
c00105f3:	53                   	push   ebx
c00105f4:	ff d0                	call   eax
c00105f6:	83 c4 10             	add    esp,0x10
c00105f9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105fc:	85 c0                	test   eax,eax
c00105fe:	74 09                	je     c0010609 <VgaText::load()+0x49>
c0010600:	83 ec 0c             	sub    esp,0xc
c0010603:	53                   	push   ebx
c0010604:	ff d0                	call   eax
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	83 c4 58             	add    esp,0x58
c001060c:	5b                   	pop    ebx
c001060d:	c3                   	ret    

c001060e <VgaText::updateCursor()>:
c001060e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010612:	39 05 44 f6 02 c0    	cmp    DWORD PTR ds:0xc002f644,eax
c0010618:	75 09                	jne    c0010623 <VgaText::updateCursor()+0x15>
c001061a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001061d:	85 c0                	test   eax,eax
c001061f:	74 02                	je     c0010623 <VgaText::updateCursor()+0x15>
c0010621:	ff e0                	jmp    eax
c0010623:	c3                   	ret    

c0010624 <VgaText::showCursor(bool)>:
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001062c:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001062f:	c3                   	ret    

c0010630 <VgaText::disableBlink(bool)>:
c0010630:	56                   	push   esi
c0010631:	53                   	push   ebx
c0010632:	51                   	push   ecx
c0010633:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010637:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063b:	39 1d 44 f6 02 c0    	cmp    DWORD PTR ds:0xc002f644,ebx
c0010641:	75 15                	jne    c0010658 <VgaText::disableBlink(bool)+0x28>
c0010643:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010646:	85 c0                	test   eax,eax
c0010648:	74 0e                	je     c0010658 <VgaText::disableBlink(bool)+0x28>
c001064a:	89 f1                	mov    ecx,esi
c001064c:	52                   	push   edx
c001064d:	52                   	push   edx
c001064e:	0f b6 d1             	movzx  edx,cl
c0010651:	52                   	push   edx
c0010652:	53                   	push   ebx
c0010653:	ff d0                	call   eax
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	89 f0                	mov    eax,esi
c001065a:	83 f0 01             	xor    eax,0x1
c001065d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010660:	58                   	pop    eax
c0010661:	5b                   	pop    ebx
c0010662:	5e                   	pop    esi
c0010663:	c3                   	ret    

c0010664 <VgaText::doANSI_SGR(int)>:
c0010664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066c:	85 d2                	test   edx,edx
c001066e:	75 0b                	jne    c001067b <VgaText::doANSI_SGR(int)+0x17>
c0010670:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010673:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010676:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010679:	eb 59                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c001067b:	83 fa 07             	cmp    edx,0x7
c001067e:	75 0b                	jne    c001068b <VgaText::doANSI_SGR(int)+0x27>
c0010680:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010683:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010686:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010689:	eb 49                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c001068b:	83 fa 1b             	cmp    edx,0x1b
c001068e:	74 e0                	je     c0010670 <VgaText::doANSI_SGR(int)+0xc>
c0010690:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010693:	83 f9 07             	cmp    ecx,0x7
c0010696:	77 09                	ja     c00106a1 <VgaText::doANSI_SGR(int)+0x3d>
c0010698:	8b 14 8d c0 e4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1b40]
c001069f:	eb 20                	jmp    c00106c1 <VgaText::doANSI_SGR(int)+0x5d>
c00106a1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106a4:	83 f9 07             	cmp    ecx,0x7
c00106a7:	77 09                	ja     c00106b2 <VgaText::doANSI_SGR(int)+0x4e>
c00106a9:	8b 14 8d c0 e4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1b40]
c00106b0:	eb 22                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c00106b2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106b5:	83 f9 07             	cmp    ecx,0x7
c00106b8:	77 0b                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x61>
c00106ba:	8b 14 95 78 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c88]
c00106c1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106c4:	c3                   	ret    
c00106c5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 0a                	ja     c00106d7 <VgaText::doANSI_SGR(int)+0x73>
c00106cd:	8b 14 95 50 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1cb0]
c00106d4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106d7:	c3                   	ret    

c00106d8 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106e3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106e6:	c3                   	ret    
c00106e7:	90                   	nop

c00106e8 <VgaText::setDefaultFgColour(VgaColour)>:
c00106e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106f3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106f8:	53                   	push   ebx
c00106f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010701:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010705:	51                   	push   ecx
c0010706:	e8 cd ff ff ff       	call   c00106d8 <VgaText::setDefaultBgColour(VgaColour)>
c001070b:	58                   	pop    eax
c001070c:	5a                   	pop    edx
c001070d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010711:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010715:	5b                   	pop    ebx
c0010716:	eb d0                	jmp    c00106e8 <VgaText::setDefaultFgColour(VgaColour)>

c0010718 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010718:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001071c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010721:	83 e0 0f             	and    eax,0xf
c0010724:	c1 e2 04             	shl    edx,0x4
c0010727:	09 d0                	or     eax,edx
c0010729:	c3                   	ret    

c001072a <VgaText::scrollScreen()>:
c001072a:	55                   	push   ebp
c001072b:	b9 01 00 00 00       	mov    ecx,0x1
c0010730:	57                   	push   edi
c0010731:	56                   	push   esi
c0010732:	53                   	push   ebx
c0010733:	83 ec 0c             	sub    esp,0xc
c0010736:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010740:	31 ff                	xor    edi,edi
c0010742:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010745:	83 f9 17             	cmp    ecx,0x17
c0010748:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001074b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010752:	75 27                	jne    c001077b <VgaText::scrollScreen()+0x51>
c0010754:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010757:	01 f5                	add    ebp,esi
c0010759:	f7 c7 01 00 00 00    	test   edi,0x1
c001075f:	74 16                	je     c0010777 <VgaText::scrollScreen()+0x4d>
c0010761:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010765:	50                   	push   eax
c0010766:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001076a:	50                   	push   eax
c001076b:	e8 a8 ff ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5a                   	pop    edx
c0010771:	5a                   	pop    edx
c0010772:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010775:	eb 04                	jmp    c001077b <VgaText::scrollScreen()+0x51>
c0010777:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001077b:	47                   	inc    edi
c001077c:	46                   	inc    esi
c001077d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010783:	75 bd                	jne    c0010742 <VgaText::scrollScreen()+0x18>
c0010785:	41                   	inc    ecx
c0010786:	83 f9 18             	cmp    ecx,0x18
c0010789:	75 af                	jne    c001073a <VgaText::scrollScreen()+0x10>
c001078b:	39 1d 44 f6 02 c0    	cmp    DWORD PTR ds:0xc002f644,ebx
c0010791:	75 1b                	jne    c00107ae <VgaText::scrollScreen()+0x84>
c0010793:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010797:	74 05                	je     c001079e <VgaText::scrollScreen()+0x74>
c0010799:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001079c:	eb 10                	jmp    c00107ae <VgaText::scrollScreen()+0x84>
c001079e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107a1:	85 c0                	test   eax,eax
c00107a3:	74 09                	je     c00107ae <VgaText::scrollScreen()+0x84>
c00107a5:	83 ec 0c             	sub    esp,0xc
c00107a8:	53                   	push   ebx
c00107a9:	ff d0                	call   eax
c00107ab:	83 c4 10             	add    esp,0x10
c00107ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107b2:	83 c4 0c             	add    esp,0xc
c00107b5:	5b                   	pop    ebx
c00107b6:	5e                   	pop    esi
c00107b7:	5f                   	pop    edi
c00107b8:	5d                   	pop    ebp
c00107b9:	e9 50 fe ff ff       	jmp    c001060e <VgaText::updateCursor()>

c00107be <VgaText::combineCharAndColour(char, unsigned char)>:
c00107be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107c3:	c1 e0 08             	shl    eax,0x8
c00107c6:	89 c2                	mov    edx,eax
c00107c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107cd:	09 d0                	or     eax,edx
c00107cf:	c3                   	ret    

c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107d0:	56                   	push   esi
c00107d1:	53                   	push   ebx
c00107d2:	51                   	push   ecx
c00107d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107dc:	50                   	push   eax
c00107dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e2:	50                   	push   eax
c00107e3:	e8 30 ff ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c00107e8:	5b                   	pop    ebx
c00107e9:	0f b6 c0             	movzx  eax,al
c00107ec:	5e                   	pop    esi
c00107ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107f2:	50                   	push   eax
c00107f3:	53                   	push   ebx
c00107f4:	e8 c5 ff ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00107f9:	5a                   	pop    edx
c00107fa:	5e                   	pop    esi
c00107fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010804:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010808:	0f b7 d2             	movzx  edx,dx
c001080b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001080f:	39 0d 44 f6 02 c0    	cmp    DWORD PTR ds:0xc002f644,ecx
c0010815:	75 10                	jne    c0010827 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010817:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001081a:	85 c0                	test   eax,eax
c001081c:	74 09                	je     c0010827 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001081e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010822:	5a                   	pop    edx
c0010823:	5b                   	pop    ebx
c0010824:	5e                   	pop    esi
c0010825:	ff e0                	jmp    eax
c0010827:	58                   	pop    eax
c0010828:	5b                   	pop    ebx
c0010829:	5e                   	pop    esi
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <VgaText::getCursorX()>:
c001082c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010830:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010833:	c3                   	ret    

c0010834 <VgaText::getCursorY()>:
c0010834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010838:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001083b:	c3                   	ret    

c001083c <VgaText::setCursor(int, int)>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010844:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010847:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001084b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001084e:	e9 bb fd ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010853:	90                   	nop

c0010854 <VgaText::setCursorX(int)>:
c0010854:	83 ec 10             	sub    esp,0x10
c0010857:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001085b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001085e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010862:	50                   	push   eax
c0010863:	e8 d4 ff ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010868:	83 c4 1c             	add    esp,0x1c
c001086b:	c3                   	ret    

c001086c <VgaText::setCursorY(int)>:
c001086c:	83 ec 10             	sub    esp,0x10
c001086f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010877:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001087a:	50                   	push   eax
c001087b:	e8 bc ff ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010880:	83 c4 1c             	add    esp,0x1c
c0010883:	c3                   	ret    

c0010884 <VgaText::incrementCursor(bool)>:
c0010884:	56                   	push   esi
c0010885:	53                   	push   ebx
c0010886:	51                   	push   ecx
c0010887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001088b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001088f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010892:	40                   	inc    eax
c0010893:	83 f8 50             	cmp    eax,0x50
c0010896:	74 05                	je     c001089d <VgaText::incrementCursor(bool)+0x19>
c0010898:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001089b:	eb 24                	jmp    c00108c1 <VgaText::incrementCursor(bool)+0x3d>
c001089d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108a7:	8d 50 01             	lea    edx,[eax+0x1]
c00108aa:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108ad:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108b0:	75 0f                	jne    c00108c1 <VgaText::incrementCursor(bool)+0x3d>
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108b8:	53                   	push   ebx
c00108b9:	e8 6c fe ff ff       	call   c001072a <VgaText::scrollScreen()>
c00108be:	83 c4 10             	add    esp,0x10
c00108c1:	89 f0                	mov    eax,esi
c00108c3:	84 c0                	test   al,al
c00108c5:	74 0c                	je     c00108d3 <VgaText::incrementCursor(bool)+0x4f>
c00108c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108cb:	5a                   	pop    edx
c00108cc:	5b                   	pop    ebx
c00108cd:	5e                   	pop    esi
c00108ce:	e9 3b fd ff ff       	jmp    c001060e <VgaText::updateCursor()>
c00108d3:	58                   	pop    eax
c00108d4:	5b                   	pop    ebx
c00108d5:	5e                   	pop    esi
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::updateRAMUsageDisplay(int)>:
c00108d8:	56                   	push   esi
c00108d9:	8b 35 a0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4a0
c00108df:	53                   	push   ebx
c00108e0:	bb 0a 00 00 00       	mov    ebx,0xa
c00108e5:	6a 0f                	push   0xf
c00108e7:	6a 00                	push   0x0
c00108e9:	e8 2a fe ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c00108ee:	5a                   	pop    edx
c00108ef:	59                   	pop    ecx
c00108f0:	0f b6 c8             	movzx  ecx,al
c00108f3:	51                   	push   ecx
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	99                   	cdq    
c00108f9:	f7 fb                	idiv   ebx
c00108fb:	89 d3                	mov    ebx,edx
c00108fd:	83 c0 30             	add    eax,0x30
c0010900:	83 c3 30             	add    ebx,0x30
c0010903:	0f be c0             	movsx  eax,al
c0010906:	0f b6 db             	movzx  ebx,bl
c0010909:	50                   	push   eax
c001090a:	e8 af fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c001090f:	5a                   	pop    edx
c0010910:	5a                   	pop    edx
c0010911:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010918:	51                   	push   ecx
c0010919:	53                   	push   ebx
c001091a:	e8 9f fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c001091f:	5b                   	pop    ebx
c0010920:	5a                   	pop    edx
c0010921:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010928:	51                   	push   ecx
c0010929:	6a 25                	push   0x25
c001092b:	e8 8e fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010930:	59                   	pop    ecx
c0010931:	5b                   	pop    ebx
c0010932:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateDiskUsage()>:
c001093c:	55                   	push   ebp
c001093d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010942:	57                   	push   edi
c0010943:	8b 3d a0 e4 02 c0    	mov    edi,DWORD PTR ds:0xc002e4a0
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	6a 0f                	push   0xf
c001094d:	6a 00                	push   0x0
c001094f:	e8 c4 fd ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010954:	5a                   	pop    edx
c0010955:	0f b6 d8             	movzx  ebx,al
c0010958:	59                   	pop    ecx
c0010959:	8b 35 d8 38 03 c0    	mov    esi,DWORD PTR ds:0xc00338d8
c001095f:	53                   	push   ebx
c0010960:	b9 0a 00 00 00       	mov    ecx,0xa
c0010965:	89 f0                	mov    eax,esi
c0010967:	99                   	cdq    
c0010968:	f7 fd                	idiv   ebp
c001096a:	99                   	cdq    
c001096b:	f7 f9                	idiv   ecx
c001096d:	8d 42 30             	lea    eax,[edx+0x30]
c0010970:	0f b6 c0             	movzx  eax,al
c0010973:	50                   	push   eax
c0010974:	e8 45 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010979:	5d                   	pop    ebp
c001097a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001097f:	5a                   	pop    edx
c0010980:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010984:	53                   	push   ebx
c0010985:	89 f0                	mov    eax,esi
c0010987:	99                   	cdq    
c0010988:	f7 fd                	idiv   ebp
c001098a:	99                   	cdq    
c001098b:	f7 f9                	idiv   ecx
c001098d:	8d 42 30             	lea    eax,[edx+0x30]
c0010990:	0f b6 c0             	movzx  eax,al
c0010993:	50                   	push   eax
c0010994:	e8 25 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010999:	5d                   	pop    ebp
c001099a:	bd 64 00 00 00       	mov    ebp,0x64
c001099f:	5a                   	pop    edx
c00109a0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109a7:	53                   	push   ebx
c00109a8:	89 f0                	mov    eax,esi
c00109aa:	99                   	cdq    
c00109ab:	f7 fd                	idiv   ebp
c00109ad:	99                   	cdq    
c00109ae:	f7 f9                	idiv   ecx
c00109b0:	8d 42 30             	lea    eax,[edx+0x30]
c00109b3:	0f b6 c0             	movzx  eax,al
c00109b6:	50                   	push   eax
c00109b7:	e8 02 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109bc:	5d                   	pop    ebp
c00109bd:	5a                   	pop    edx
c00109be:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109c5:	53                   	push   ebx
c00109c6:	89 f0                	mov    eax,esi
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	89 d6                	mov    esi,edx
c00109cd:	99                   	cdq    
c00109ce:	f7 f9                	idiv   ecx
c00109d0:	8d 42 30             	lea    eax,[edx+0x30]
c00109d3:	0f b6 c0             	movzx  eax,al
c00109d6:	50                   	push   eax
c00109d7:	e8 e2 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109dc:	5d                   	pop    ebp
c00109dd:	5a                   	pop    edx
c00109de:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109e5:	53                   	push   ebx
c00109e6:	8d 46 30             	lea    eax,[esi+0x30]
c00109e9:	0f b6 f0             	movzx  esi,al
c00109ec:	56                   	push   esi
c00109ed:	e8 cc fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109f2:	5e                   	pop    esi
c00109f3:	8b 35 d4 38 03 c0    	mov    esi,DWORD PTR ds:0xc00338d4
c00109f9:	5d                   	pop    ebp
c00109fa:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a01:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a06:	53                   	push   ebx
c0010a07:	89 f0                	mov    eax,esi
c0010a09:	99                   	cdq    
c0010a0a:	f7 fd                	idiv   ebp
c0010a0c:	99                   	cdq    
c0010a0d:	f7 f9                	idiv   ecx
c0010a0f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a12:	0f b6 c0             	movzx  eax,al
c0010a15:	50                   	push   eax
c0010a16:	e8 a3 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1b:	5a                   	pop    edx
c0010a1c:	5d                   	pop    ebp
c0010a1d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a24:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 fd                	idiv   ebp
c0010a2f:	99                   	cdq    
c0010a30:	f7 f9                	idiv   ecx
c0010a32:	8d 42 30             	lea    eax,[edx+0x30]
c0010a35:	0f b6 c0             	movzx  eax,al
c0010a38:	50                   	push   eax
c0010a39:	e8 80 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3e:	5a                   	pop    edx
c0010a3f:	5d                   	pop    ebp
c0010a40:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a47:	bd 64 00 00 00       	mov    ebp,0x64
c0010a4c:	53                   	push   ebx
c0010a4d:	89 f0                	mov    eax,esi
c0010a4f:	99                   	cdq    
c0010a50:	f7 fd                	idiv   ebp
c0010a52:	99                   	cdq    
c0010a53:	f7 f9                	idiv   ecx
c0010a55:	83 c2 30             	add    edx,0x30
c0010a58:	0f b6 d2             	movzx  edx,dl
c0010a5b:	52                   	push   edx
c0010a5c:	e8 5d fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a61:	5a                   	pop    edx
c0010a62:	5d                   	pop    ebp
c0010a63:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 f9                	idiv   ecx
c0010a70:	89 d6                	mov    esi,edx
c0010a72:	99                   	cdq    
c0010a73:	f7 f9                	idiv   ecx
c0010a75:	8d 42 30             	lea    eax,[edx+0x30]
c0010a78:	0f b6 c0             	movzx  eax,al
c0010a7b:	50                   	push   eax
c0010a7c:	e8 3d fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a81:	5a                   	pop    edx
c0010a82:	59                   	pop    ecx
c0010a83:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a8a:	53                   	push   ebx
c0010a8b:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8e:	0f b6 f0             	movzx  esi,al
c0010a91:	56                   	push   esi
c0010a92:	e8 27 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aa0:	5b                   	pop    ebx
c0010aa1:	5e                   	pop    esi
c0010aa2:	5f                   	pop    edi
c0010aa3:	5d                   	pop    ebp
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::updateTitle()>:
c0010aa6:	53                   	push   ebx
c0010aa7:	31 c0                	xor    eax,eax
c0010aa9:	83 ec 58             	sub    esp,0x58
c0010aac:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ab0:	89 e1                	mov    ecx,esp
c0010ab2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ab6:	40                   	inc    eax
c0010ab7:	83 f8 50             	cmp    eax,0x50
c0010aba:	75 f6                	jne    c0010ab2 <VgaText::updateTitle()+0xc>
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010ac5:	84 db                	test   bl,bl
c0010ac7:	74 06                	je     c0010acf <VgaText::updateTitle()+0x29>
c0010ac9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010acc:	40                   	inc    eax
c0010acd:	eb ef                	jmp    c0010abe <VgaText::updateTitle()+0x18>
c0010acf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010ad2:	85 c0                	test   eax,eax
c0010ad4:	74 09                	je     c0010adf <VgaText::updateTitle()+0x39>
c0010ad6:	53                   	push   ebx
c0010ad7:	53                   	push   ebx
c0010ad8:	51                   	push   ecx
c0010ad9:	52                   	push   edx
c0010ada:	ff d0                	call   eax
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	e8 58 fe ff ff       	call   c001093c <VgaText::updateDiskUsage()>
c0010ae4:	83 c4 58             	add    esp,0x58
c0010ae7:	5b                   	pop    ebx
c0010ae8:	c3                   	ret    
c0010ae9:	90                   	nop

c0010aea <VgaText::setTitleTextColour(VgaColour)>:
c0010aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010af2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010af5:	eb af                	jmp    c0010aa6 <VgaText::updateTitle()>
c0010af7:	90                   	nop

c0010af8 <VgaText::setTitleColour(VgaColour)>:
c0010af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b03:	eb a1                	jmp    c0010aa6 <VgaText::updateTitle()>
c0010b05:	90                   	nop

c0010b06 <VgaText::setTitle(char*)>:
c0010b06:	53                   	push   ebx
c0010b07:	83 ec 10             	sub    esp,0x10
c0010b0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b12:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b18:	50                   	push   eax
c0010b19:	e8 ee fc fe ff       	call   c000080c <strcpy>
c0010b1e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b22:	83 c4 18             	add    esp,0x18
c0010b25:	5b                   	pop    ebx
c0010b26:	e9 7b ff ff ff       	jmp    c0010aa6 <VgaText::updateTitle()>
c0010b2b:	90                   	nop

c0010b2c <VgaText::decrementCursor(bool)>:
c0010b2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b34:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b37:	85 c0                	test   eax,eax
c0010b39:	74 04                	je     c0010b3f <VgaText::decrementCursor(bool)+0x13>
c0010b3b:	48                   	dec    eax
c0010b3c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b3f:	84 c9                	test   cl,cl
c0010b41:	74 09                	je     c0010b4c <VgaText::decrementCursor(bool)+0x20>
c0010b43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b47:	e9 c2 fa ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010b4c:	c3                   	ret    
c0010b4d:	90                   	nop

c0010b4e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b4e:	53                   	push   ebx
c0010b4f:	83 ec 08             	sub    esp,0x8
c0010b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b5e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b62:	3c 07                	cmp    al,0x7
c0010b64:	75 2a                	jne    c0010b90 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b66:	a1 f8 f6 02 c0       	mov    eax,ds:0xc002f6f8
c0010b6b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b73:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b7b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b87:	83 c4 08             	add    esp,0x8
c0010b8a:	5b                   	pop    ebx
c0010b8b:	e9 ce 30 00 00       	jmp    c0013c5e <Buzzer::beep(int, int, bool)>
c0010b90:	3c 0d                	cmp    al,0xd
c0010b92:	75 09                	jne    c0010b9d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b94:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b9b:	eb 2c                	jmp    c0010bc9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b9d:	3c 0a                	cmp    al,0xa
c0010b9f:	75 31                	jne    c0010bd2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010ba1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010ba4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bab:	8d 50 01             	lea    edx,[eax+0x1]
c0010bae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bb1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bb4:	75 0f                	jne    c0010bc5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bbc:	53                   	push   ebx
c0010bbd:	e8 68 fb ff ff       	call   c001072a <VgaText::scrollScreen()>
c0010bc2:	83 c4 10             	add    esp,0x10
c0010bc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bc9:	83 c4 08             	add    esp,0x8
c0010bcc:	5b                   	pop    ebx
c0010bcd:	e9 3c fa ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010bd2:	3c 08                	cmp    al,0x8
c0010bd4:	75 25                	jne    c0010bfb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010bd6:	50                   	push   eax
c0010bd7:	50                   	push   eax
c0010bd8:	6a 01                	push   0x1
c0010bda:	53                   	push   ebx
c0010bdb:	e8 4c ff ff ff       	call   c0010b2c <VgaText::decrementCursor(bool)>
c0010be0:	5a                   	pop    edx
c0010be1:	59                   	pop    ecx
c0010be2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010be5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010be8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010beb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bee:	6a 20                	push   0x20
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 da fb ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bf6:	83 c4 28             	add    esp,0x28
c0010bf9:	5b                   	pop    ebx
c0010bfa:	c3                   	ret    
c0010bfb:	83 ec 08             	sub    esp,0x8
c0010bfe:	0f be c0             	movsx  eax,al
c0010c01:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c04:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c07:	51                   	push   ecx
c0010c08:	52                   	push   edx
c0010c09:	50                   	push   eax
c0010c0a:	53                   	push   ebx
c0010c0b:	e8 c0 fb ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c10:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c14:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c1c:	83 c4 28             	add    esp,0x28
c0010c1f:	5b                   	pop    ebx
c0010c20:	e9 5f fc ff ff       	jmp    c0010884 <VgaText::incrementCursor(bool)>
c0010c25:	90                   	nop

c0010c26 <VgaText::isShowingCursor()>:
c0010c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c2a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c2d:	c3                   	ret    

c0010c2e <VgaText::isBlinkDisabled()>:
c0010c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c32:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c35:	83 f0 01             	xor    eax,0x1
c0010c38:	c3                   	ret    
c0010c39:	90                   	nop

c0010c3a <VgaText::setCursorHeight(int)>:
c0010c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c42:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c45:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c4d:	e9 d2 f9 ff ff       	jmp    c0010624 <VgaText::showCursor(bool)>

c0010c52 <VgaText::getCursorHeight()>:
c0010c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c56:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c59:	c3                   	ret    

c0010c5a <setActiveTerminal(VgaText*)>:
c0010c5a:	53                   	push   ebx
c0010c5b:	83 ec 08             	sub    esp,0x8
c0010c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c62:	85 db                	test   ebx,ebx
c0010c64:	75 11                	jne    c0010c77 <setActiveTerminal(VgaText*)+0x1d>
c0010c66:	c7 44 24 10 0c b3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b30c
c0010c6e:	83 c4 08             	add    esp,0x8
c0010c71:	5b                   	pop    ebx
c0010c72:	e9 22 9d 00 00       	jmp    c001a999 <Krnl::panic(char const*)>
c0010c77:	50                   	push   eax
c0010c78:	50                   	push   eax
c0010c79:	53                   	push   ebx
c0010c7a:	68 1a b3 02 c0       	push   0xc002b31a
c0010c7f:	e8 cd 21 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0010c84:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	85 c0                	test   eax,eax
c0010c8e:	74 0c                	je     c0010c9c <setActiveTerminal(VgaText*)+0x42>
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	50                   	push   eax
c0010c94:	e8 75 f9 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	89 1d 44 f6 02 c0    	mov    DWORD PTR ds:0xc002f644,ebx
c0010ca2:	51                   	push   ecx
c0010ca3:	51                   	push   ecx
c0010ca4:	53                   	push   ebx
c0010ca5:	68 32 b3 02 c0       	push   0xc002b332
c0010caa:	e8 a2 21 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0010caf:	83 c4 0c             	add    esp,0xc
c0010cb2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cb5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cb8:	53                   	push   ebx
c0010cb9:	e8 7e fb ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010cbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc1:	e8 68 ff ff ff       	call   c0010c2e <VgaText::isBlinkDisabled()>
c0010cc6:	5a                   	pop    edx
c0010cc7:	0f b6 c0             	movzx  eax,al
c0010cca:	59                   	pop    ecx
c0010ccb:	50                   	push   eax
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 5e f9 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c0010cd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd5:	e8 78 ff ff ff       	call   c0010c52 <VgaText::getCursorHeight()>
c0010cda:	5a                   	pop    edx
c0010cdb:	59                   	pop    ecx
c0010cdc:	50                   	push   eax
c0010cdd:	53                   	push   ebx
c0010cde:	e8 57 ff ff ff       	call   c0010c3a <VgaText::setCursorHeight(int)>
c0010ce3:	83 c4 10             	add    esp,0x10
c0010ce6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cea:	75 07                	jne    c0010cf3 <setActiveTerminal(VgaText*)+0x99>
c0010cec:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cf7:	83 c4 08             	add    esp,0x8
c0010cfa:	5b                   	pop    ebx
c0010cfb:	e9 c0 f8 ff ff       	jmp    c00105c0 <VgaText::load()>

c0010d00 <doTerminalCycle()>:
c0010d00:	83 ec 18             	sub    esp,0x18
c0010d03:	a1 40 f6 02 c0       	mov    eax,ds:0xc002f640
c0010d08:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d0b:	50                   	push   eax
c0010d0c:	a3 40 f6 02 c0       	mov    ds:0xc002f640,eax
c0010d11:	e8 44 ff ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c0010d16:	83 c4 1c             	add    esp,0x1c
c0010d19:	c3                   	ret    

c0010d1a <VgaText::doUpdate()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d21:	85 c0                	test   eax,eax
c0010d23:	74 02                	je     c0010d27 <VgaText::doUpdate()+0xd>
c0010d25:	ff e0                	jmp    eax
c0010d27:	c3                   	ret    

c0010d28 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d28:	55                   	push   ebp
c0010d29:	31 ed                	xor    ebp,ebp
c0010d2b:	57                   	push   edi
c0010d2c:	56                   	push   esi
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 1c             	sub    esp,0x1c
c0010d31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d35:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d3a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d41:	50                   	push   eax
c0010d42:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d47:	50                   	push   eax
c0010d48:	e8 cb f9 ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d4d:	59                   	pop    ecx
c0010d4e:	0f b6 c0             	movzx  eax,al
c0010d51:	5e                   	pop    esi
c0010d52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d5b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d62:	0f b7 f6             	movzx  esi,si
c0010d65:	01 f6                	add    esi,esi
c0010d67:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d6a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d6d:	84 c0                	test   al,al
c0010d6f:	0f 84 fd 00 00 00    	je     c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d75:	3c 0d                	cmp    al,0xd
c0010d77:	75 0c                	jne    c0010d85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d79:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d80:	e9 e7 00 00 00       	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d85:	3c 0a                	cmp    al,0xa
c0010d87:	75 47                	jne    c0010dd0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d89:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d93:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d96:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d99:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d9c:	75 0f                	jne    c0010dad <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d9e:	83 ec 0c             	sub    esp,0xc
c0010da1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010da4:	53                   	push   ebx
c0010da5:	e8 80 f9 ff ff       	call   c001072a <VgaText::scrollScreen()>
c0010daa:	83 c4 10             	add    esp,0x10
c0010dad:	83 ec 0c             	sub    esp,0xc
c0010db0:	31 ed                	xor    ebp,ebp
c0010db2:	53                   	push   ebx
c0010db3:	e8 56 f8 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010db8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dc3:	0f b7 f6             	movzx  esi,si
c0010dc6:	01 f6                	add    esi,esi
c0010dc8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dcb:	e9 9c 00 00 00       	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dd0:	3c 08                	cmp    al,0x8
c0010dd2:	75 35                	jne    c0010e09 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010dd4:	56                   	push   esi
c0010dd5:	56                   	push   esi
c0010dd6:	6a 01                	push   0x1
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 4e fd ff ff       	call   c0010b2c <VgaText::decrementCursor(bool)>
c0010dde:	58                   	pop    eax
c0010ddf:	5a                   	pop    edx
c0010de0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010de3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010de6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010de9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010dec:	6a 20                	push   0x20
c0010dee:	53                   	push   ebx
c0010def:	e8 dc f9 ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010df4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010df9:	83 c4 20             	add    esp,0x20
c0010dfc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dff:	0f b7 f6             	movzx  esi,si
c0010e02:	01 f6                	add    esi,esi
c0010e04:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e07:	eb 63                	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e09:	51                   	push   ecx
c0010e0a:	51                   	push   ecx
c0010e0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e0f:	50                   	push   eax
c0010e10:	e8 a9 f9 ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	66 89 06             	mov    WORD PTR [esi],ax
c0010e1b:	39 1d 44 f6 02 c0    	cmp    DWORD PTR ds:0xc002f644,ebx
c0010e21:	75 21                	jne    c0010e44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e23:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e26:	85 c0                	test   eax,eax
c0010e28:	74 1a                	je     c0010e44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e2a:	52                   	push   edx
c0010e2b:	52                   	push   edx
c0010e2c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e3a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e3d:	51                   	push   ecx
c0010e3e:	53                   	push   ebx
c0010e3f:	ff d0                	call   eax
c0010e41:	83 c4 20             	add    esp,0x20
c0010e44:	83 c6 02             	add    esi,0x2
c0010e47:	50                   	push   eax
c0010e48:	50                   	push   eax
c0010e49:	6a 00                	push   0x0
c0010e4b:	53                   	push   ebx
c0010e4c:	e8 33 fa ff ff       	call   c0010884 <VgaText::incrementCursor(bool)>
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e58:	75 0d                	jne    c0010e67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e5a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e5f:	0f b7 f6             	movzx  esi,si
c0010e62:	01 f6                	add    esi,esi
c0010e64:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e67:	bd 01 00 00 00       	mov    ebp,0x1
c0010e6c:	47                   	inc    edi
c0010e6d:	e9 f8 fe ff ff       	jmp    c0010d6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e72:	83 ec 0c             	sub    esp,0xc
c0010e75:	53                   	push   ebx
c0010e76:	e8 93 f7 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 e8                	mov    eax,ebp
c0010e80:	84 c0                	test   al,al
c0010e82:	74 0c                	je     c0010e90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	53                   	push   ebx
c0010e88:	e8 8d fe ff ff       	call   c0010d1a <VgaText::doUpdate()>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e97:	83 c4 1c             	add    esp,0x1c
c0010e9a:	5b                   	pop    ebx
c0010e9b:	5e                   	pop    esi
c0010e9c:	5f                   	pop    edi
c0010e9d:	5d                   	pop    ebp
c0010e9e:	c3                   	ret    
c0010e9f:	90                   	nop

c0010ea0 <VgaText::clearScreen()>:
c0010ea0:	57                   	push   edi
c0010ea1:	56                   	push   esi
c0010ea2:	31 f6                	xor    esi,esi
c0010ea4:	53                   	push   ebx
c0010ea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ea9:	52                   	push   edx
c0010eaa:	6a 00                	push   0x0
c0010eac:	6a 00                	push   0x0
c0010eae:	53                   	push   ebx
c0010eaf:	e8 88 f9 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010eb4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ec1:	7e 20                	jle    c0010ee3 <VgaText::clearScreen()+0x43>
c0010ec3:	31 ff                	xor    edi,edi
c0010ec5:	50                   	push   eax
c0010ec6:	50                   	push   eax
c0010ec7:	56                   	push   esi
c0010ec8:	57                   	push   edi
c0010ec9:	47                   	inc    edi
c0010eca:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ecd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ed0:	6a 20                	push   0x20
c0010ed2:	53                   	push   ebx
c0010ed3:	e8 f8 f8 ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed8:	83 c4 20             	add    esp,0x20
c0010edb:	83 ff 50             	cmp    edi,0x50
c0010ede:	75 e5                	jne    c0010ec5 <VgaText::clearScreen()+0x25>
c0010ee0:	46                   	inc    esi
c0010ee1:	eb db                	jmp    c0010ebe <VgaText::clearScreen()+0x1e>
c0010ee3:	83 ec 0c             	sub    esp,0xc
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 2e fe ff ff       	call   c0010d1a <VgaText::doUpdate()>
c0010eec:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	5b                   	pop    ebx
c0010ef7:	5e                   	pop    esi
c0010ef8:	5f                   	pop    edi
c0010ef9:	c3                   	ret    

c0010efa <VgaText::putchar(char)>:
c0010efa:	56                   	push   esi
c0010efb:	53                   	push   ebx
c0010efc:	83 ec 14             	sub    esp,0x14
c0010eff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f07:	3c 5b                	cmp    al,0x5b
c0010f09:	75 18                	jne    c0010f23 <VgaText::putchar(char)+0x29>
c0010f0b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f0f:	74 1f                	je     c0010f30 <VgaText::putchar(char)+0x36>
c0010f11:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f17:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f1e:	e9 bd 00 00 00       	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010f23:	3c 1b                	cmp    al,0x1b
c0010f25:	75 09                	jne    c0010f30 <VgaText::putchar(char)+0x36>
c0010f27:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f2b:	e9 b0 00 00 00       	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010f30:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f33:	84 c9                	test   cl,cl
c0010f35:	0f 84 92 00 00 00    	je     c0010fcd <VgaText::putchar(char)+0xd3>
c0010f3b:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f3e:	80 fa 3e             	cmp    dl,0x3e
c0010f41:	77 76                	ja     c0010fb9 <VgaText::putchar(char)+0xbf>
c0010f43:	3c 6d                	cmp    al,0x6d
c0010f45:	75 47                	jne    c0010f8e <VgaText::putchar(char)+0x94>
c0010f47:	31 f6                	xor    esi,esi
c0010f49:	31 d2                	xor    edx,edx
c0010f4b:	31 c0                	xor    eax,eax
c0010f4d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f50:	7e 2d                	jle    c0010f7f <VgaText::putchar(char)+0x85>
c0010f52:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f57:	80 fa 3b             	cmp    dl,0x3b
c0010f5a:	75 17                	jne    c0010f73 <VgaText::putchar(char)+0x79>
c0010f5c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f60:	50                   	push   eax
c0010f61:	53                   	push   ebx
c0010f62:	e8 fd f6 ff ff       	call   c0010664 <VgaText::doANSI_SGR(int)>
c0010f67:	59                   	pop    ecx
c0010f68:	31 d2                	xor    edx,edx
c0010f6a:	58                   	pop    eax
c0010f6b:	31 c0                	xor    eax,eax
c0010f6d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f71:	eb 09                	jmp    c0010f7c <VgaText::putchar(char)+0x82>
c0010f73:	6b c0 0a             	imul   eax,eax,0xa
c0010f76:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f7a:	88 ca                	mov    dl,cl
c0010f7c:	46                   	inc    esi
c0010f7d:	eb ce                	jmp    c0010f4d <VgaText::putchar(char)+0x53>
c0010f7f:	84 d2                	test   dl,dl
c0010f81:	74 2e                	je     c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f83:	50                   	push   eax
c0010f84:	53                   	push   ebx
c0010f85:	e8 da f6 ff ff       	call   c0010664 <VgaText::doANSI_SGR(int)>
c0010f8a:	58                   	pop    eax
c0010f8b:	5a                   	pop    edx
c0010f8c:	eb 23                	jmp    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f8e:	3c 4a                	cmp    al,0x4a
c0010f90:	75 1f                	jne    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f92:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f96:	75 19                	jne    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f98:	83 ec 0c             	sub    esp,0xc
c0010f9b:	53                   	push   ebx
c0010f9c:	e8 ff fe ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c0010fa1:	83 c4 0c             	add    esp,0xc
c0010fa4:	6a 00                	push   0x0
c0010fa6:	6a 00                	push   0x0
c0010fa8:	53                   	push   ebx
c0010fa9:	e8 8e f8 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fb7:	eb 27                	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fb9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fbc:	83 fa 0e             	cmp    edx,0xe
c0010fbf:	7f 1f                	jg     c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fc1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fc4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fc7:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fcb:	eb 13                	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fcd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fd0:	0f be c0             	movsx  eax,al
c0010fd3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fd6:	50                   	push   eax
c0010fd7:	53                   	push   ebx
c0010fd8:	e8 71 fb ff ff       	call   c0010b4e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	83 c4 14             	add    esp,0x14
c0010fe3:	5b                   	pop    ebx
c0010fe4:	5e                   	pop    esi
c0010fe5:	c3                   	ret    

c0010fe6 <VgaText::puts(char const*)>:
c0010fe6:	53                   	push   ebx
c0010fe7:	83 ec 08             	sub    esp,0x8
c0010fea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ff1:	84 c0                	test   al,al
c0010ff3:	74 12                	je     c0011007 <VgaText::puts(char const*)+0x21>
c0010ff5:	43                   	inc    ebx
c0010ff6:	51                   	push   ecx
c0010ff7:	51                   	push   ecx
c0010ff8:	50                   	push   eax
c0010ff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffd:	e8 f8 fe ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	eb e7                	jmp    c0010fee <VgaText::puts(char const*)+0x8>
c0011007:	83 c4 08             	add    esp,0x8
c001100a:	5b                   	pop    ebx
c001100b:	c3                   	ret    

c001100c <VgaText::putx(unsigned int)>:
c001100c:	57                   	push   edi
c001100d:	b9 11 00 00 00       	mov    ecx,0x11
c0011012:	56                   	push   esi
c0011013:	be 4e b3 02 c0       	mov    esi,0xc002b34e
c0011018:	53                   	push   ebx
c0011019:	83 ec 20             	sub    esp,0x20
c001101c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011020:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011024:	fc                   	cld    
c0011025:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011027:	be 08 00 00 00       	mov    esi,0x8
c001102c:	50                   	push   eax
c001102d:	50                   	push   eax
c001102e:	89 d8                	mov    eax,ebx
c0011030:	c1 e3 04             	shl    ebx,0x4
c0011033:	c1 e8 1c             	shr    eax,0x1c
c0011036:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001103b:	50                   	push   eax
c001103c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011040:	e8 b5 fe ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	4e                   	dec    esi
c0011049:	75 e1                	jne    c001102c <VgaText::putx(unsigned int)+0x20>
c001104b:	83 c4 20             	add    esp,0x20
c001104e:	5b                   	pop    ebx
c001104f:	5e                   	pop    esi
c0011050:	5f                   	pop    edi
c0011051:	c3                   	ret    

c0011052 <VgaText::VgaText(char const*)>:
c0011052:	57                   	push   edi
c0011053:	56                   	push   esi
c0011054:	53                   	push   ebx
c0011055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011059:	83 ec 08             	sub    esp,0x8
c001105c:	6a 00                	push   0x0
c001105e:	50                   	push   eax
c001105f:	e8 8a 05 00 00       	call   c00115ee <UnixFile::UnixFile(int)>
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	89 10                	mov    DWORD PTR [eax],edx
c0011072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011076:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001107d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011081:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011094:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	8d 50 60             	lea    edx,[eax+0x60]
c00110cb:	bb 20 f6 02 c0       	mov    ebx,0xc002f620
c00110d0:	b8 08 00 00 00       	mov    eax,0x8
c00110d5:	fc                   	cld    
c00110d6:	89 d7                	mov    edi,edx
c00110d8:	89 de                	mov    esi,ebx
c00110da:	89 c1                	mov    ecx,eax
c00110dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e2:	05 82 00 00 00       	add    eax,0x82
c00110e7:	83 ec 08             	sub    esp,0x8
c00110ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ee:	50                   	push   eax
c00110ef:	e8 18 f7 fe ff       	call   c000080c <strcpy>
c00110f4:	83 c4 10             	add    esp,0x10
c00110f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fb:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	6a 01                	push   0x1
c0011107:	e8 25 09 00 00       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	89 c2                	mov    edx,eax
c0011111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011118:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011125:	89 c6                	mov    esi,eax
c0011127:	e8 cc ed ff ff       	call   c000fef8 <Phys::allocatePage()>
c001112c:	6a 05                	push   0x5
c001112e:	56                   	push   esi
c001112f:	50                   	push   eax
c0011130:	53                   	push   ebx
c0011131:	e8 32 11 00 00       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011140:	83 ec 04             	sub    esp,0x4
c0011143:	68 00 0f 00 00       	push   0xf00
c0011148:	6a 00                	push   0x0
c001114a:	50                   	push   eax
c001114b:	e8 00 f6 fe ff       	call   c0000750 <memset>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	83 ec 04             	sub    esp,0x4
c0011156:	6a 00                	push   0x0
c0011158:	6a 07                	push   0x7
c001115a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001115e:	e8 95 f5 ff ff       	call   c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	83 ec 08             	sub    esp,0x8
c0011169:	6a 02                	push   0x2
c001116b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001116f:	e8 c6 fa ff ff       	call   c0010c3a <VgaText::setCursorHeight(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	83 ec 04             	sub    esp,0x4
c001117a:	6a 00                	push   0x0
c001117c:	6a 00                	push   0x0
c001117e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011182:	e8 b5 f6 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	83 ec 08             	sub    esp,0x8
c001118d:	6a 01                	push   0x1
c001118f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011193:	e8 8c f4 ff ff       	call   c0010624 <VgaText::showCursor(bool)>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	83 ec 08             	sub    esp,0x8
c001119e:	6a 01                	push   0x1
c00111a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a4:	e8 87 f4 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c00111a9:	83 c4 10             	add    esp,0x10
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b3:	e8 e8 fc ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c00111b8:	83 c4 10             	add    esp,0x10
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c7:	05 02 01 00 00       	add    eax,0x102
c00111cc:	83 ec 04             	sub    esp,0x4
c00111cf:	68 96 00 00 00       	push   0x96
c00111d4:	6a 00                	push   0x0
c00111d6:	50                   	push   eax
c00111d7:	e8 74 f5 fe ff       	call   c0000750 <memset>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	05 98 01 00 00       	add    eax,0x198
c00111e8:	83 ec 04             	sub    esp,0x4
c00111eb:	68 2c 01 00 00       	push   0x12c
c00111f0:	6a 00                	push   0x0
c00111f2:	50                   	push   eax
c00111f3:	e8 58 f5 fe ff       	call   c0000750 <memset>
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	90                   	nop
c00111fc:	5b                   	pop    ebx
c00111fd:	5e                   	pop    esi
c00111fe:	5f                   	pop    edi
c00111ff:	c3                   	ret    

c0011200 <VgaText::receiveKey(unsigned char)>:
c0011200:	55                   	push   ebp
c0011201:	57                   	push   edi
c0011202:	56                   	push   esi
c0011203:	53                   	push   ebx
c0011204:	83 ec 1c             	sub    esp,0x1c
c0011207:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001120b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001120f:	84 db                	test   bl,bl
c0011211:	0f 84 c9 00 00 00    	je     c00112e0 <VgaText::receiveKey(unsigned char)+0xe0>
c0011217:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001121d:	80 fb 08             	cmp    bl,0x8
c0011220:	75 2c                	jne    c001124e <VgaText::receiveKey(unsigned char)+0x4e>
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	57                   	push   edi
c0011226:	e8 41 f5 fe ff       	call   c000076c <strlen>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	85 c0                	test   eax,eax
c0011230:	74 41                	je     c0011273 <VgaText::receiveKey(unsigned char)+0x73>
c0011232:	50                   	push   eax
c0011233:	50                   	push   eax
c0011234:	6a 08                	push   0x8
c0011236:	56                   	push   esi
c0011237:	e8 be fc ff ff       	call   c0010efa <VgaText::putchar(char)>
c001123c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001123f:	e8 28 f5 fe ff       	call   c000076c <strlen>
c0011244:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001124c:	eb 22                	jmp    c0011270 <VgaText::receiveKey(unsigned char)+0x70>
c001124e:	0f be c3             	movsx  eax,bl
c0011251:	52                   	push   edx
c0011252:	52                   	push   edx
c0011253:	50                   	push   eax
c0011254:	56                   	push   esi
c0011255:	e8 a0 fc ff ff       	call   c0010efa <VgaText::putchar(char)>
c001125a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001125e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011263:	59                   	pop    ecx
c0011264:	5d                   	pop    ebp
c0011265:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011269:	50                   	push   eax
c001126a:	57                   	push   edi
c001126b:	e8 dc f6 fe ff       	call   c000094c <strcat>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001127a:	75 05                	jne    c0011281 <VgaText::receiveKey(unsigned char)+0x81>
c001127c:	80 fb 0a             	cmp    bl,0xa
c001127f:	75 53                	jne    c00112d4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011281:	83 ec 0c             	sub    esp,0xc
c0011284:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001128a:	53                   	push   ebx
c001128b:	e8 dc f4 fe ff       	call   c000076c <strlen>
c0011290:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011293:	89 c5                	mov    ebp,eax
c0011295:	e8 d2 f4 fe ff       	call   c000076c <strlen>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112a1:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112a6:	76 10                	jbe    c00112b8 <VgaText::receiveKey(unsigned char)+0xb8>
c00112a8:	83 ec 0c             	sub    esp,0xc
c00112ab:	68 5f b3 02 c0       	push   0xc002b35f
c00112b0:	e8 e4 96 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00112b5:	83 c4 10             	add    esp,0x10
c00112b8:	50                   	push   eax
c00112b9:	50                   	push   eax
c00112ba:	57                   	push   edi
c00112bb:	53                   	push   ebx
c00112bc:	e8 8b f6 fe ff       	call   c000094c <strcat>
c00112c1:	83 c4 0c             	add    esp,0xc
c00112c4:	68 96 00 00 00       	push   0x96
c00112c9:	6a 00                	push   0x0
c00112cb:	57                   	push   edi
c00112cc:	e8 7f f4 fe ff       	call   c0000750 <memset>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	56                   	push   esi
c00112d8:	e8 3d fa ff ff       	call   c0010d1a <VgaText::doUpdate()>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	83 c4 1c             	add    esp,0x1c
c00112e3:	5b                   	pop    ebx
c00112e4:	5e                   	pop    esi
c00112e5:	5f                   	pop    edi
c00112e6:	5d                   	pop    ebp
c00112e7:	c3                   	ret    

c00112e8 <VgaText::write(unsigned long long, void*, int*)>:
c00112e8:	55                   	push   ebp
c00112e9:	57                   	push   edi
c00112ea:	56                   	push   esi
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112fb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011302:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011305:	39 eb                	cmp    ebx,ebp
c0011307:	74 13                	je     c001131c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011309:	43                   	inc    ebx
c001130a:	50                   	push   eax
c001130b:	50                   	push   eax
c001130c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011310:	50                   	push   eax
c0011311:	56                   	push   esi
c0011312:	e8 e3 fb ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	eb e9                	jmp    c0011305 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001131c:	83 ec 0c             	sub    esp,0xc
c001131f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011326:	56                   	push   esi
c0011327:	e8 ee f9 ff ff       	call   c0010d1a <VgaText::doUpdate()>
c001132c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011330:	89 38                	mov    DWORD PTR [eax],edi
c0011332:	83 c4 1c             	add    esp,0x1c
c0011335:	31 c0                	xor    eax,eax
c0011337:	5b                   	pop    ebx
c0011338:	5e                   	pop    esi
c0011339:	5f                   	pop    edi
c001133a:	5d                   	pop    ebp
c001133b:	c3                   	ret    

c001133c <newTerminal(char*)>:
c001133c:	83 ec 28             	sub    esp,0x28
c001133f:	68 c4 02 00 00       	push   0x2c4
c0011344:	e8 43 e5 ff ff       	call   c000f88c <malloc>
c0011349:	5a                   	pop    edx
c001134a:	59                   	pop    ecx
c001134b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001134f:	50                   	push   eax
c0011350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011354:	e8 f9 fc ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c0011359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001135d:	83 c4 2c             	add    esp,0x2c
c0011360:	c3                   	ret    
c0011361:	90                   	nop

c0011362 <TSS::TSS()>:
c0011362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011366:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001136d:	90                   	nop
c001136e:	c3                   	ret    
c001136f:	90                   	nop

c0011370 <TSS::setESP(unsigned long)>:
c0011370:	55                   	push   ebp
c0011371:	89 e5                	mov    ebp,esp
c0011373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011379:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001137c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137f:	90                   	nop
c0011380:	5d                   	pop    ebp
c0011381:	c3                   	ret    

c0011382 <TSS::flush()>:
c0011382:	55                   	push   ebp
c0011383:	89 e5                	mov    ebp,esp
c0011385:	83 ec 10             	sub    esp,0x10
c0011388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001138b:	8b 00                	mov    eax,DWORD PTR [eax]
c001138d:	83 c8 03             	or     eax,0x3
c0011390:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011394:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011398:	66 89 d0             	mov    ax,dx
c001139b:	0f 00 d8             	ltr    ax
c001139e:	90                   	nop
c001139f:	c9                   	leave  
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <TSS::setup(unsigned long, unsigned long)>:
c00113a2:	55                   	push   ebp
c00113a3:	89 e5                	mov    ebp,esp
c00113a5:	83 ec 18             	sub    esp,0x18
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	6a 68                	push   0x68
c00113ad:	e8 da e4 ff ff       	call   c000f88c <malloc>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	89 c2                	mov    edx,eax
c00113b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c3:	83 ec 04             	sub    esp,0x4
c00113c6:	6a 68                	push   0x68
c00113c8:	6a 00                	push   0x0
c00113ca:	50                   	push   eax
c00113cb:	e8 80 f3 fe ff       	call   c0000750 <memset>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113fd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011409:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001140f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011415:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001141b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011421:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011439:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011445:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011448:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001144b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011451:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011454:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011467:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146a:	0f 20 da             	mov    edx,cr3
c001146d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011470:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011473:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147c:	83 ec 08             	sub    esp,0x8
c001147f:	50                   	push   eax
c0011480:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011483:	50                   	push   eax
c0011484:	e8 df db ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	83 ec 08             	sub    esp,0x8
c001148f:	6a 68                	push   0x68
c0011491:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011494:	50                   	push   eax
c0011495:	e8 ea db ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114a1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114a4:	83 e0 0f             	and    eax,0xf
c00114a7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114aa:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114ad:	83 c8 40             	or     eax,0x40
c00114b0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114b3:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00114b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114be:	05 78 01 00 00       	add    eax,0x178
c00114c3:	83 ec 04             	sub    esp,0x4
c00114c6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114c9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114cc:	50                   	push   eax
c00114cd:	e8 e6 db ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	89 c2                	mov    edx,eax
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	89 10                	mov    DWORD PTR [eax],edx
c00114dc:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00114e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114e7:	05 78 01 00 00       	add    eax,0x178
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	50                   	push   eax
c00114f0:	e8 07 dc ff ff       	call   c000f0fc <GDT::flush()>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fd:	83 ec 08             	sub    esp,0x8
c0011500:	50                   	push   eax
c0011501:	68 c8 b3 02 c0       	push   0xc002b3c8
c0011506:	e8 46 19 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001150b:	83 c4 10             	add    esp,0x10
c001150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011511:	8b 00                	mov    eax,DWORD PTR [eax]
c0011513:	c9                   	leave  
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001151a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001151e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011521:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011526:	75 08                	jne    c0011530 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011528:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001152e:	eb 38                	jmp    c0011568 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011530:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011535:	75 17                	jne    c001154e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001153c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001153f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011545:	8b 10                	mov    edx,DWORD PTR [eax]
c0011547:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001154b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001154e:	89 c1                	mov    ecx,eax
c0011550:	83 e1 fd             	and    ecx,0xfffffffd
c0011553:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011559:	74 cd                	je     c0011528 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001155b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011560:	83 e0 ef             	and    eax,0xffffffef
c0011563:	83 f8 08             	cmp    eax,0x8
c0011566:	76 c0                	jbe    c0011528 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011568:	31 c0                	xor    eax,eax
c001156a:	c3                   	ret    
c001156b:	90                   	nop

c001156c <ReservedFilename::isAtty()>:
c001156c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011570:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011573:	31 c0                	xor    eax,eax
c0011575:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001157b:	74 09                	je     c0011586 <ReservedFilename::isAtty()+0x1a>
c001157d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011583:	0f 94 c0             	sete   al
c0011586:	c3                   	ret    
c0011587:	90                   	nop

c0011588 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011597:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001159c:	75 08                	jne    c00115a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001159e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115a4:	eb 3d                	jmp    c00115e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115ab:	75 17                	jne    c00115c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115c1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115c9:	75 04                	jne    c00115cf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115cb:	89 0a                	mov    DWORD PTR [edx],ecx
c00115cd:	eb 14                	jmp    c00115e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115cf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115d4:	74 c8                	je     c001159e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115d6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115db:	83 e0 ef             	and    eax,0xffffffef
c00115de:	83 f8 08             	cmp    eax,0x8
c00115e1:	76 bb                	jbe    c001159e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115e3:	31 c0                	xor    eax,eax
c00115e5:	c3                   	ret    

c00115e6 <UnixFile::getFileDescriptor()>:
c00115e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ed:	c3                   	ret    

c00115ee <UnixFile::UnixFile(int)>:
c00115ee:	53                   	push   ebx
c00115ef:	83 ec 28             	sub    esp,0x28
c00115f2:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c00115f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115fb:	89 10                	mov    DWORD PTR [eax],edx
c00115fd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011605:	0f 8f 8c 01 00 00    	jg     c0011797 <UnixFile::UnixFile(int)+0x1a9>
c001160b:	a1 00 e5 02 c0       	mov    eax,ds:0xc002e500
c0011610:	8d 50 01             	lea    edx,[eax+0x1]
c0011613:	89 15 00 e5 02 c0    	mov    DWORD PTR ds:0xc002e500,edx
c0011619:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001161d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011620:	83 ec 08             	sub    esp,0x8
c0011623:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011627:	68 d8 f6 02 c0       	push   0xc002f6d8
c001162c:	e8 9b 7f 01 00       	call   c00295cc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	a0 d4 f6 02 c0       	mov    al,ds:0xc002f6d4
c0011639:	83 f0 01             	xor    eax,0x1
c001163c:	84 c0                	test   al,al
c001163e:	0f 84 54 01 00 00    	je     c0011798 <UnixFile::UnixFile(int)+0x1aa>
c0011644:	c6 05 d4 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f6d4,0x1
c001164b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011653:	83 ec 0c             	sub    esp,0xc
c0011656:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001165a:	e8 2d e2 ff ff       	call   c000f88c <malloc>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	89 c3                	mov    ebx,eax
c0011664:	83 ec 08             	sub    esp,0x8
c0011667:	68 03 ff ff 0f       	push   0xfffff03
c001166c:	53                   	push   ebx
c001166d:	e8 2c 01 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	89 1d cc f6 02 c0    	mov    DWORD PTR ds:0xc002f6cc,ebx
c001167b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001168a:	e8 fd e1 ff ff       	call   c000f88c <malloc>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	89 c3                	mov    ebx,eax
c0011694:	83 ec 08             	sub    esp,0x8
c0011697:	68 01 ff ff 0f       	push   0xfffff01
c001169c:	53                   	push   ebx
c001169d:	e8 fc 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	89 1d d0 f6 02 c0    	mov    DWORD PTR ds:0xc002f6d0,ebx
c00116ab:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116ba:	e8 cd e1 ff ff       	call   c000f88c <malloc>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	89 c3                	mov    ebx,eax
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	68 00 ff ff 0f       	push   0xfffff00
c00116cc:	53                   	push   ebx
c00116cd:	e8 cc 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	89 1d c4 f6 02 c0    	mov    DWORD PTR ds:0xc002f6c4,ebx
c00116db:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116ea:	e8 9d e1 ff ff       	call   c000f88c <malloc>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	89 c3                	mov    ebx,eax
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	68 02 ff ff 0f       	push   0xfffff02
c00116fc:	53                   	push   ebx
c00116fd:	e8 9c 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	89 1d c8 f6 02 c0    	mov    DWORD PTR ds:0xc002f6c8,ebx
c001170b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011713:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011718:	7f 7e                	jg     c0011798 <UnixFile::UnixFile(int)+0x1aa>
c001171a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011729:	e8 5e e1 ff ff       	call   c000f88c <malloc>
c001172e:	83 c4 10             	add    esp,0x10
c0011731:	89 c3                	mov    ebx,eax
c0011733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011737:	05 10 ff ff 0f       	add    eax,0xfffff10
c001173c:	83 ec 08             	sub    esp,0x8
c001173f:	50                   	push   eax
c0011740:	53                   	push   ebx
c0011741:	e8 58 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011746:	83 c4 10             	add    esp,0x10
c0011749:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001174d:	89 1c 85 a0 f6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0960],ebx
c0011754:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011763:	e8 24 e1 ff ff       	call   c000f88c <malloc>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	89 c3                	mov    ebx,eax
c001176d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011771:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	50                   	push   eax
c001177a:	53                   	push   ebx
c001177b:	e8 1e 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011787:	89 1c 85 60 f6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd09a0],ebx
c001178e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011792:	e9 7c ff ff ff       	jmp    c0011713 <UnixFile::UnixFile(int)+0x125>
c0011797:	90                   	nop
c0011798:	83 c4 28             	add    esp,0x28
c001179b:	5b                   	pop    ebx
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <ReservedFilename::ReservedFilename(int)>:
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a5:	83 ec 08             	sub    esp,0x8
c00117a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ac:	50                   	push   eax
c00117ad:	e8 3c fe ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c00117ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117be:	89 10                	mov    DWORD PTR [eax],edx
c00117c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117cb:	90                   	nop
c00117cc:	83 c4 0c             	add    esp,0xc
c00117cf:	c3                   	ret    

c00117d0 <UnixFile::~UnixFile()>:
c00117d0:	83 ec 1c             	sub    esp,0x1c
c00117d3:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c00117d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117dc:	89 10                	mov    DWORD PTR [eax],edx
c00117de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117e5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117ea:	7f 73                	jg     c001185f <UnixFile::~UnixFile()+0x8f>
c00117ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	68 d8 f6 02 c0       	push   0xc002f6d8
c00117fc:	e8 9f 7e 01 00       	call   c00296a0 <LinkedList<UnixFile>::getFirstElement()>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	68 d8 f6 02 c0       	push   0xc002f6d8
c0011810:	e8 93 7e 01 00       	call   c00296a8 <LinkedList<UnixFile>::removeFirst()>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001181c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011820:	74 40                	je     c0011862 <UnixFile::~UnixFile()+0x92>
c0011822:	83 ec 08             	sub    esp,0x8
c0011825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011829:	68 d8 f6 02 c0       	push   0xc002f6d8
c001182e:	e8 99 7d 01 00       	call   c00295cc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183a:	8d 50 01             	lea    edx,[eax+0x1]
c001183d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011841:	3d 88 13 00 00       	cmp    eax,0x1388
c0011846:	0f 94 c0             	sete   al
c0011849:	84 c0                	test   al,al
c001184b:	74 a7                	je     c00117f4 <UnixFile::~UnixFile()+0x24>
c001184d:	83 ec 0c             	sub    esp,0xc
c0011850:	68 8c b4 02 c0       	push   0xc002b48c
c0011855:	e8 3f 91 00 00       	call   c001a999 <Krnl::panic(char const*)>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	eb 95                	jmp    c00117f4 <UnixFile::~UnixFile()+0x24>
c001185f:	90                   	nop
c0011860:	eb 01                	jmp    c0011863 <UnixFile::~UnixFile()+0x93>
c0011862:	90                   	nop
c0011863:	90                   	nop
c0011864:	83 c4 1c             	add    esp,0x1c
c0011867:	c3                   	ret    

c0011868 <UnixFile::~UnixFile()>:
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011872:	e8 59 ff ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	83 ec 08             	sub    esp,0x8
c001187d:	6a 0c                	push   0xc
c001187f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011883:	e8 e9 14 00 00       	call   c0012d71 <operator delete(void*, unsigned long)>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	83 c4 0c             	add    esp,0xc
c001188e:	c3                   	ret    
c001188f:	90                   	nop

c0011890 <ReservedFilename::~ReservedFilename()>:
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c0011898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189c:	89 10                	mov    DWORD PTR [eax],edx
c001189e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	50                   	push   eax
c00118a6:	e8 25 ff ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	90                   	nop
c00118af:	83 c4 0c             	add    esp,0xc
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <ReservedFilename::~ReservedFilename()>:
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118be:	e8 cd ff ff ff       	call   c0011890 <ReservedFilename::~ReservedFilename()>
c00118c3:	83 c4 10             	add    esp,0x10
c00118c6:	83 ec 08             	sub    esp,0x8
c00118c9:	6a 0c                	push   0xc
c00118cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cf:	e8 9d 14 00 00       	call   c0012d71 <operator delete(void*, unsigned long)>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	83 c4 0c             	add    esp,0xc
c00118da:	c3                   	ret    

c00118db <getFromFileDescriptor(int)>:
c00118db:	53                   	push   ebx
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118e3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118e9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ef:	7f 2c                	jg     c001191d <getFromFileDescriptor(int)+0x42>
c00118f1:	83 ec 0c             	sub    esp,0xc
c00118f4:	68 d8 f6 02 c0       	push   0xc002f6d8
c00118f9:	e8 a2 7d 01 00       	call   c00296a0 <LinkedList<UnixFile>::getFirstElement()>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	85 c0                	test   eax,eax
c0011903:	75 04                	jne    c0011909 <getFromFileDescriptor(int)+0x2e>
c0011905:	31 c0                	xor    eax,eax
c0011907:	eb 6e                	jmp    c0011977 <getFromFileDescriptor(int)+0x9c>
c0011909:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001190c:	74 69                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c001190e:	52                   	push   edx
c001190f:	52                   	push   edx
c0011910:	50                   	push   eax
c0011911:	68 d8 f6 02 c0       	push   0xc002f6d8
c0011916:	e8 2f 7e 01 00       	call   c002974a <LinkedList<UnixFile>::getNext(UnixFile*)>
c001191b:	eb e1                	jmp    c00118fe <getFromFileDescriptor(int)+0x23>
c001191d:	a1 cc f6 02 c0       	mov    eax,ds:0xc002f6cc
c0011922:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011928:	74 4d                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c001192a:	a1 d0 f6 02 c0       	mov    eax,ds:0xc002f6d0
c001192f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011935:	74 40                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011937:	a1 c8 f6 02 c0       	mov    eax,ds:0xc002f6c8
c001193c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011942:	74 33                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011944:	a1 c4 f6 02 c0       	mov    eax,ds:0xc002f6c4
c0011949:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001194f:	74 26                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011951:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011957:	83 f8 08             	cmp    eax,0x8
c001195a:	77 09                	ja     c0011965 <getFromFileDescriptor(int)+0x8a>
c001195c:	8b 04 85 a0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0960]
c0011963:	eb 12                	jmp    c0011977 <getFromFileDescriptor(int)+0x9c>
c0011965:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001196b:	83 fb 08             	cmp    ebx,0x8
c001196e:	77 95                	ja     c0011905 <getFromFileDescriptor(int)+0x2a>
c0011970:	8b 04 9d 60 f6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd09a0]
c0011977:	83 c4 08             	add    esp,0x8
c001197a:	5b                   	pop    ebx
c001197b:	c3                   	ret    

c001197c <__static_initialization_and_destruction_0(int, int)>:
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011984:	75 34                	jne    c00119ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011986:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001198e:	75 2a                	jne    c00119ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	68 d8 f6 02 c0       	push   0xc002f6d8
c0011998:	e8 d7 7b 01 00       	call   c0029574 <LinkedList<UnixFile>::LinkedList()>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	83 ec 04             	sub    esp,0x4
c00119a3:	68 8c e4 02 c0       	push   0xc002e48c
c00119a8:	68 d8 f6 02 c0       	push   0xc002f6d8
c00119ad:	68 72 95 02 c0       	push   0xc0029572
c00119b2:	e8 34 13 00 00       	call   c0012ceb <__cxa_atexit>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	90                   	nop
c00119bb:	83 c4 0c             	add    esp,0xc
c00119be:	c3                   	ret    

c00119bf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	83 ec 08             	sub    esp,0x8
c00119c5:	68 ff ff 00 00       	push   0xffff
c00119ca:	6a 01                	push   0x1
c00119cc:	e8 ab ff ff ff       	call   c001197c <__static_initialization_and_destruction_0(int, int)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 c4 0c             	add    esp,0xc
c00119d7:	c3                   	ret    

c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119d8:	53                   	push   ebx
c00119d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119e1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119e7:	89 c8                	mov    eax,ecx
c00119e9:	d1 e8                	shr    eax,1
c00119eb:	03 05 08 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e508
c00119f1:	83 e1 01             	and    ecx,0x1
c00119f4:	8a 10                	mov    dl,BYTE PTR [eax]
c00119f6:	75 09                	jne    c0011a01 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119f8:	83 e2 f0             	and    edx,0xfffffff0
c00119fb:	09 da                	or     edx,ebx
c00119fd:	88 10                	mov    BYTE PTR [eax],dl
c00119ff:	5b                   	pop    ebx
c0011a00:	c3                   	ret    
c0011a01:	c1 e3 04             	shl    ebx,0x4
c0011a04:	83 e2 0f             	and    edx,0xf
c0011a07:	09 da                	or     edx,ebx
c0011a09:	88 10                	mov    BYTE PTR [eax],dl
c0011a0b:	5b                   	pop    ebx
c0011a0c:	c3                   	ret    

c0011a0d <Virt::getPageState(unsigned long)>:
c0011a0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a11:	8b 0d 08 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e508
c0011a17:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a1d:	89 d0                	mov    eax,edx
c0011a1f:	d1 e8                	shr    eax,1
c0011a21:	83 e2 01             	and    edx,0x1
c0011a24:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a27:	75 04                	jne    c0011a2d <Virt::getPageState(unsigned long)+0x20>
c0011a29:	83 e0 0f             	and    eax,0xf
c0011a2c:	c3                   	ret    
c0011a2d:	c0 e8 04             	shr    al,0x4
c0011a30:	c3                   	ret    

c0011a31 <Virt::allocateKernelVirtualPages(int)>:
c0011a31:	55                   	push   ebp
c0011a32:	31 ed                	xor    ebp,ebp
c0011a34:	57                   	push   edi
c0011a35:	56                   	push   esi
c0011a36:	53                   	push   ebx
c0011a37:	31 db                	xor    ebx,ebx
c0011a39:	83 ec 1c             	sub    esp,0x1c
c0011a3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a40:	8b 3d 04 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e504
c0011a46:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a4b:	57                   	push   edi
c0011a4c:	e8 bc ff ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011a51:	5a                   	pop    edx
c0011a52:	84 c0                	test   al,al
c0011a54:	75 3a                	jne    c0011a90 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a56:	85 db                	test   ebx,ebx
c0011a58:	75 02                	jne    c0011a5c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a5a:	89 fd                	mov    ebp,edi
c0011a5c:	43                   	inc    ebx
c0011a5d:	39 f3                	cmp    ebx,esi
c0011a5f:	74 5a                	je     c0011abb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a61:	47                   	inc    edi
c0011a62:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a68:	76 31                	jbe    c0011a9b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a6a:	c7 05 04 e5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e504,0xc8000
c0011a74:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a79:	75 28                	jne    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a7b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a80:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a85:	57                   	push   edi
c0011a86:	e8 82 ff ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011a8b:	5a                   	pop    edx
c0011a8c:	84 c0                	test   al,al
c0011a8e:	74 c6                	je     c0011a56 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a90:	31 db                	xor    ebx,ebx
c0011a92:	47                   	inc    edi
c0011a93:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a99:	77 cf                	ja     c0011a6a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a9b:	89 3d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,edi
c0011aa1:	eb a8                	jmp    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	68 e4 b4 02 c0       	push   0xc002b4e4
c0011aab:	e8 e9 8e 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011ab0:	8b 3d 04 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e504
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	eb 90                	jmp    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011abb:	89 2d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebp
c0011ac1:	4b                   	dec    ebx
c0011ac2:	74 5f                	je     c0011b23 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ac4:	85 f6                	test   esi,esi
c0011ac6:	74 3d                	je     c0011b05 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ac8:	89 e8                	mov    eax,ebp
c0011aca:	31 db                	xor    ebx,ebx
c0011acc:	8d 7e ff             	lea    edi,[esi-0x1]
c0011acf:	eb 14                	jmp    c0011ae5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ad1:	6a 01                	push   0x1
c0011ad3:	43                   	inc    ebx
c0011ad4:	50                   	push   eax
c0011ad5:	e8 fe fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ada:	58                   	pop    eax
c0011adb:	39 f3                	cmp    ebx,esi
c0011add:	5a                   	pop    edx
c0011ade:	74 25                	je     c0011b05 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ae0:	a1 04 e5 02 c0       	mov    eax,ds:0xc002e504
c0011ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae8:	85 db                	test   ebx,ebx
c0011aea:	89 15 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,edx
c0011af0:	74 20                	je     c0011b12 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011af2:	39 df                	cmp    edi,ebx
c0011af4:	75 db                	jne    c0011ad1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011af6:	6a 03                	push   0x3
c0011af8:	43                   	inc    ebx
c0011af9:	50                   	push   eax
c0011afa:	e8 d9 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aff:	59                   	pop    ecx
c0011b00:	39 f3                	cmp    ebx,esi
c0011b02:	58                   	pop    eax
c0011b03:	75 db                	jne    c0011ae0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b05:	83 c4 1c             	add    esp,0x1c
c0011b08:	89 e8                	mov    eax,ebp
c0011b0a:	5b                   	pop    ebx
c0011b0b:	c1 e0 0c             	shl    eax,0xc
c0011b0e:	5e                   	pop    esi
c0011b0f:	5f                   	pop    edi
c0011b10:	5d                   	pop    ebp
c0011b11:	c3                   	ret    
c0011b12:	6a 02                	push   0x2
c0011b14:	bb 01 00 00 00       	mov    ebx,0x1
c0011b19:	50                   	push   eax
c0011b1a:	e8 b9 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b1f:	58                   	pop    eax
c0011b20:	5a                   	pop    edx
c0011b21:	eb bd                	jmp    c0011ae0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b23:	6a 04                	push   0x4
c0011b25:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b28:	55                   	push   ebp
c0011b29:	a3 04 e5 02 c0       	mov    ds:0xc002e504,eax
c0011b2e:	e8 a5 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b33:	59                   	pop    ecx
c0011b34:	89 e8                	mov    eax,ebp
c0011b36:	5b                   	pop    ebx
c0011b37:	c1 e0 0c             	shl    eax,0xc
c0011b3a:	83 c4 1c             	add    esp,0x1c
c0011b3d:	5b                   	pop    ebx
c0011b3e:	5e                   	pop    esi
c0011b3f:	5f                   	pop    edi
c0011b40:	5d                   	pop    ebp
c0011b41:	c3                   	ret    

c0011b42 <Virt::freeSwapfilePage(unsigned long)>:
c0011b42:	53                   	push   ebx
c0011b43:	8b 15 ec f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6ec
c0011b49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b4d:	b8 01 00 00 00       	mov    eax,0x1
c0011b52:	89 cb                	mov    ebx,ecx
c0011b54:	d3 e0                	shl    eax,cl
c0011b56:	c1 eb 05             	shr    ebx,0x5
c0011b59:	f7 d0                	not    eax
c0011b5b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b5e:	5b                   	pop    ebx
c0011b5f:	c3                   	ret    

c0011b60 <Virt::swapIDToSector(unsigned long)>:
c0011b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b64:	0f af 05 0c e5 02 c0 	imul   eax,DWORD PTR ds:0xc002e50c
c0011b6b:	03 05 14 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e514
c0011b71:	c3                   	ret    

c0011b72 <Virt::allocateSwapfilePage()>:
c0011b72:	55                   	push   ebp
c0011b73:	31 d2                	xor    edx,edx
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	8b 0d 0c e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e50c
c0011b81:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c0011b86:	f7 f1                	div    ecx
c0011b88:	39 0d 10 e5 02 c0    	cmp    DWORD PTR ds:0xc002e510,ecx
c0011b8e:	72 2d                	jb     c0011bbd <Virt::allocateSwapfilePage()+0x4b>
c0011b90:	8b 35 ec f6 02 c0    	mov    esi,DWORD PTR ds:0xc002f6ec
c0011b96:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b98:	f6 c2 01             	test   dl,0x1
c0011b9b:	74 3c                	je     c0011bd9 <Virt::allocateSwapfilePage()+0x67>
c0011b9d:	31 c9                	xor    ecx,ecx
c0011b9f:	bf 01 00 00 00       	mov    edi,0x1
c0011ba4:	eb 12                	jmp    c0011bb8 <Virt::allocateSwapfilePage()+0x46>
c0011ba6:	89 fd                	mov    ebp,edi
c0011ba8:	89 ca                	mov    edx,ecx
c0011baa:	d3 e5                	shl    ebp,cl
c0011bac:	c1 ea 05             	shr    edx,0x5
c0011baf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bb4:	85 ea                	test   edx,ebp
c0011bb6:	74 2a                	je     c0011be2 <Virt::allocateSwapfilePage()+0x70>
c0011bb8:	41                   	inc    ecx
c0011bb9:	39 c8                	cmp    eax,ecx
c0011bbb:	77 e9                	ja     c0011ba6 <Virt::allocateSwapfilePage()+0x34>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 6b b6 02 c0       	push   0xc002b66b
c0011bc5:	e8 cf 8d 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011bca:	83 c4 10             	add    esp,0x10
c0011bcd:	31 c9                	xor    ecx,ecx
c0011bcf:	83 c4 0c             	add    esp,0xc
c0011bd2:	89 c8                	mov    eax,ecx
c0011bd4:	5b                   	pop    ebx
c0011bd5:	5e                   	pop    esi
c0011bd6:	5f                   	pop    edi
c0011bd7:	5d                   	pop    ebp
c0011bd8:	c3                   	ret    
c0011bd9:	89 f3                	mov    ebx,esi
c0011bdb:	bd 01 00 00 00       	mov    ebp,0x1
c0011be0:	31 c9                	xor    ecx,ecx
c0011be2:	09 ea                	or     edx,ebp
c0011be4:	89 c8                	mov    eax,ecx
c0011be6:	89 13                	mov    DWORD PTR [ebx],edx
c0011be8:	83 c4 0c             	add    esp,0xc
c0011beb:	5b                   	pop    ebx
c0011bec:	5e                   	pop    esi
c0011bed:	5f                   	pop    edi
c0011bee:	5d                   	pop    ebp
c0011bef:	c3                   	ret    

c0011bf0 <Virt::virtualMemorySetup()>:
c0011bf0:	53                   	push   ebx
c0011bf1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bf6:	83 ec 08             	sub    esp,0x8
c0011bf9:	6a 0f                	push   0xf
c0011bfb:	53                   	push   ebx
c0011bfc:	43                   	inc    ebx
c0011bfd:	e8 d6 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c02:	59                   	pop    ecx
c0011c03:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c09:	58                   	pop    eax
c0011c0a:	75 ed                	jne    c0011bf9 <Virt::virtualMemorySetup()+0x9>
c0011c0c:	83 ec 08             	sub    esp,0x8
c0011c0f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c14:	68 00 00 00 c8       	push   0xc8000000
c0011c19:	68 82 b6 02 c0       	push   0xc002b682
c0011c1e:	e8 2e 12 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011c23:	58                   	pop    eax
c0011c24:	5a                   	pop    edx
c0011c25:	68 00 f0 ff ef       	push   0xeffff000
c0011c2a:	68 96 b6 02 c0       	push   0xc002b696
c0011c2f:	e8 1d 12 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011c34:	83 c4 10             	add    esp,0x10
c0011c37:	83 ec 08             	sub    esp,0x8
c0011c3a:	6a 00                	push   0x0
c0011c3c:	53                   	push   ebx
c0011c3d:	43                   	inc    ebx
c0011c3e:	e8 95 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4c:	75 e9                	jne    c0011c37 <Virt::virtualMemorySetup()+0x47>
c0011c4e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c53:	83 ec 08             	sub    esp,0x8
c0011c56:	6a 0f                	push   0xf
c0011c58:	53                   	push   ebx
c0011c59:	43                   	inc    ebx
c0011c5a:	e8 79 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c5f:	83 c4 10             	add    esp,0x10
c0011c62:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c68:	75 e9                	jne    c0011c53 <Virt::virtualMemorySetup()+0x63>
c0011c6a:	83 c4 08             	add    esp,0x8
c0011c6d:	5b                   	pop    ebx
c0011c6e:	c3                   	ret    

c0011c6f <Virt::swappingSetup()>:
c0011c6f:	c3                   	ret    

c0011c70 <Virt::setupPageSwapping(int)>:
c0011c70:	57                   	push   edi
c0011c71:	56                   	push   esi
c0011c72:	53                   	push   ebx
c0011c73:	83 ec 1c             	sub    esp,0x1c
c0011c76:	68 aa b6 02 c0       	push   0xc002b6aa
c0011c7b:	e8 d1 11 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011c80:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c87:	e8 00 dc ff ff       	call   c000f88c <malloc>
c0011c8c:	83 c4 0c             	add    esp,0xc
c0011c8f:	89 c6                	mov    esi,eax
c0011c91:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c0011c97:	68 be b6 02 c0       	push   0xc002b6be
c0011c9c:	50                   	push   eax
c0011c9d:	e8 0e 17 00 00       	call   c00133b0 <File::File(char const*, Process*)>
c0011ca2:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ca5:	e8 e2 18 00 00       	call   c001358c <File::unlink()>
c0011caa:	59                   	pop    ecx
c0011cab:	5b                   	pop    ebx
c0011cac:	6a 12                	push   0x12
c0011cae:	56                   	push   esi
c0011caf:	e8 60 17 00 00       	call   c0013414 <File::open(FileOpenMode)>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 c0                	test   eax,eax
c0011cb9:	0f 85 5b 01 00 00    	jne    c0011e1a <Virt::setupPageSwapping(int)+0x1aa>
c0011cbf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ccb:	c1 e3 08             	shl    ebx,0x8
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 00 00 01 00       	push   0x10000
c0011cd6:	e8 b1 db ff ff       	call   c000f88c <malloc>
c0011cdb:	83 c4 0c             	add    esp,0xc
c0011cde:	89 c7                	mov    edi,eax
c0011ce0:	68 00 00 01 00       	push   0x10000
c0011ce5:	68 ee 00 00 00       	push   0xee
c0011cea:	50                   	push   eax
c0011ceb:	e8 60 ea fe ff       	call   c0000750 <memset>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	85 db                	test   ebx,ebx
c0011cf5:	79 03                	jns    c0011cfa <Virt::setupPageSwapping(int)+0x8a>
c0011cf7:	83 c3 0f             	add    ebx,0xf
c0011cfa:	c1 fb 04             	sar    ebx,0x4
c0011cfd:	4b                   	dec    ebx
c0011cfe:	83 fb ff             	cmp    ebx,0xffffffff
c0011d01:	74 4f                	je     c0011d52 <Virt::setupPageSwapping(int)+0xe2>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d08:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d0c:	52                   	push   edx
c0011d0d:	57                   	push   edi
c0011d0e:	6a 00                	push   0x0
c0011d10:	68 00 00 01 00       	push   0x10000
c0011d15:	56                   	push   esi
c0011d16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d19:	83 c4 20             	add    esp,0x20
c0011d1c:	85 c0                	test   eax,eax
c0011d1e:	0f 85 e0 00 00 00    	jne    c0011e04 <Virt::setupPageSwapping(int)+0x194>
c0011d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d28:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d2d:	74 ce                	je     c0011cfd <Virt::setupPageSwapping(int)+0x8d>
c0011d2f:	83 ec 08             	sub    esp,0x8
c0011d32:	4b                   	dec    ebx
c0011d33:	50                   	push   eax
c0011d34:	68 11 b7 02 c0       	push   0xc002b711
c0011d39:	e8 13 11 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011d3e:	c7 04 24 1a b7 02 c0 	mov    DWORD PTR [esp],0xc002b71a
c0011d45:	e8 4f 8c 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	83 fb ff             	cmp    ebx,0xffffffff
c0011d50:	75 b1                	jne    c0011d03 <Virt::setupPageSwapping(int)+0x93>
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	56                   	push   esi
c0011d56:	e8 17 17 00 00       	call   c0013472 <File::close()>
c0011d5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d5e:	e8 49 db ff ff       	call   c000f8ac <rfree>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	85 f6                	test   esi,esi
c0011d68:	74 0c                	je     c0011d76 <Virt::setupPageSwapping(int)+0x106>
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d6f:	56                   	push   esi
c0011d70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	83 ec 08             	sub    esp,0x8
c0011d79:	a1 88 fb 02 c0       	mov    eax,ds:0xc002fb88
c0011d7e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d84:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d86:	68 be b6 02 c0       	push   0xc002b6be
c0011d8b:	50                   	push   eax
c0011d8c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d93:	c6 05 18 e5 02 c0 43 	mov    BYTE PTR ds:0xc002e518,0x43
c0011d9a:	c1 e2 0b             	shl    edx,0xb
c0011d9d:	a3 14 e5 02 c0       	mov    ds:0xc002e514,eax
c0011da2:	89 15 10 e5 02 c0    	mov    DWORD PTR ds:0xc002e510,edx
c0011da8:	c7 05 0c e5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e50c,0x8
c0011db2:	c1 ea 08             	shr    edx,0x8
c0011db5:	89 14 24             	mov    DWORD PTR [esp],edx
c0011db8:	e8 cf da ff ff       	call   c000f88c <malloc>
c0011dbd:	83 c4 0c             	add    esp,0xc
c0011dc0:	89 c1                	mov    ecx,eax
c0011dc2:	a3 ec f6 02 c0       	mov    ds:0xc002f6ec,eax
c0011dc7:	31 d2                	xor    edx,edx
c0011dc9:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c0011dce:	f7 35 0c e5 02 c0    	div    DWORD PTR ds:0xc002e50c
c0011dd4:	c1 e8 05             	shr    eax,0x5
c0011dd7:	50                   	push   eax
c0011dd8:	6a 00                	push   0x0
c0011dda:	51                   	push   ecx
c0011ddb:	e8 70 e9 fe ff       	call   c0000750 <memset>
c0011de0:	58                   	pop    eax
c0011de1:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c0011de6:	5a                   	pop    edx
c0011de7:	31 d2                	xor    edx,edx
c0011de9:	f7 35 0c e5 02 c0    	div    DWORD PTR ds:0xc002e50c
c0011def:	c1 e8 05             	shr    eax,0x5
c0011df2:	50                   	push   eax
c0011df3:	68 20 b7 02 c0       	push   0xc002b720
c0011df8:	e8 54 10 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011dfd:	83 c4 20             	add    esp,0x20
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	5f                   	pop    edi
c0011e03:	c3                   	ret    
c0011e04:	83 ec 08             	sub    esp,0x8
c0011e07:	50                   	push   eax
c0011e08:	68 f9 b6 02 c0       	push   0xc002b6f9
c0011e0d:	e8 3f 10 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	e9 0a ff ff ff       	jmp    c0011d24 <Virt::setupPageSwapping(int)+0xb4>
c0011e1a:	83 ec 08             	sub    esp,0x8
c0011e1d:	50                   	push   eax
c0011e1e:	68 d5 b6 02 c0       	push   0xc002b6d5
c0011e23:	e8 29 10 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0011e28:	c7 04 24 de b6 02 c0 	mov    DWORD PTR [esp],0xc002b6de
c0011e2f:	e8 65 8b 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	e9 83 fe ff ff       	jmp    c0011cbf <Virt::setupPageSwapping(int)+0x4f>

c0011e3c <VAS::VAS()>:
c0011e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e56:	a3 f0 f6 02 c0       	mov    ds:0xc002f6f0,eax
c0011e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e5f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e67:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e75:	90                   	nop
c0011e76:	c3                   	ret    
c0011e77:	90                   	nop

c0011e78 <VAS::VAS(VAS*)>:
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e91:	83 ec 0c             	sub    esp,0xc
c0011e94:	68 04 b5 02 c0       	push   0xc002b504
c0011e99:	e8 fb 8a 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	90                   	nop
c0011ea2:	83 c4 0c             	add    esp,0xc
c0011ea5:	c3                   	ret    

c0011ea6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eaa:	89 c2                	mov    edx,eax
c0011eac:	c1 e8 0a             	shr    eax,0xa
c0011eaf:	c1 ea 16             	shr    edx,0x16
c0011eb2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011eb7:	19 c9                	sbb    ecx,ecx
c0011eb9:	c1 e2 0c             	shl    edx,0xc
c0011ebc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ec2:	25 fc 0f 00 00       	and    eax,0xffc
c0011ec7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ece:	01 d0                	add    eax,edx
c0011ed0:	c3                   	ret    
c0011ed1:	90                   	nop

c0011ed2 <VAS::getPageTableEntry(unsigned long)>:
c0011ed2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ed6:	89 ca                	mov    edx,ecx
c0011ed8:	c1 e9 0a             	shr    ecx,0xa
c0011edb:	c1 ea 16             	shr    edx,0x16
c0011ede:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ee4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011eea:	c1 e0 0c             	shl    eax,0xc
c0011eed:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ef0:	c3                   	ret    

c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ef1:	57                   	push   edi
c0011ef2:	56                   	push   esi
c0011ef3:	be 01 00 00 00       	mov    esi,0x1
c0011ef8:	53                   	push   ebx
c0011ef9:	83 ec 10             	sub    esp,0x10
c0011efc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f00:	c1 eb 0c             	shr    ebx,0xc
c0011f03:	eb 3f                	jmp    c0011f44 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f05:	83 ec 08             	sub    esp,0x8
c0011f08:	57                   	push   edi
c0011f09:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c0011f0f:	e8 be ff ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f19:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f1d:	f6 c4 04             	test   ah,0x4
c0011f20:	75 5f                	jne    c0011f81 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f22:	80 fa 04             	cmp    dl,0x4
c0011f25:	74 78                	je     c0011f9f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f27:	80 fa 02             	cmp    dl,0x2
c0011f2a:	0f 84 88 00 00 00    	je     c0011fb8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f30:	80 fa 03             	cmp    dl,0x3
c0011f33:	0f 84 ad 00 00 00    	je     c0011fe6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f39:	fe ca                	dec    dl
c0011f3b:	0f 84 92 00 00 00    	je     c0011fd3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f41:	43                   	inc    ebx
c0011f42:	31 f6                	xor    esi,esi
c0011f44:	53                   	push   ebx
c0011f45:	89 df                	mov    edi,ebx
c0011f47:	e8 c1 fa ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011f4c:	c1 e7 0c             	shl    edi,0xc
c0011f4f:	59                   	pop    ecx
c0011f50:	84 c0                	test   al,al
c0011f52:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f56:	75 ad                	jne    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	68 3b b7 02 c0       	push   0xc002b73b
c0011f60:	e8 34 8a 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011f65:	58                   	pop    eax
c0011f66:	5a                   	pop    edx
c0011f67:	57                   	push   edi
c0011f68:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c0011f6e:	e8 5f ff ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f78:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f7c:	f6 c4 04             	test   ah,0x4
c0011f7f:	74 c0                	je     c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f81:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f85:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	50                   	push   eax
c0011f8e:	e8 db de ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c0011f93:	83 c4 10             	add    esp,0x10
c0011f96:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f9a:	80 fa 04             	cmp    dl,0x4
c0011f9d:	75 88                	jne    c0011f27 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f9f:	89 f0                	mov    eax,esi
c0011fa1:	84 c0                	test   al,al
c0011fa3:	75 47                	jne    c0011fec <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fa5:	c7 44 24 20 28 b5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b528
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	5b                   	pop    ebx
c0011fb1:	5e                   	pop    esi
c0011fb2:	5f                   	pop    edi
c0011fb3:	e9 e1 89 00 00       	jmp    c001a999 <Krnl::panic(char const*)>
c0011fb8:	89 f0                	mov    eax,esi
c0011fba:	84 c0                	test   al,al
c0011fbc:	75 15                	jne    c0011fd3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	68 57 b7 02 c0       	push   0xc002b757
c0011fc6:	e8 ce 89 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	e9 6e ff ff ff       	jmp    c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fd3:	83 ec 08             	sub    esp,0x8
c0011fd6:	6a 00                	push   0x0
c0011fd8:	53                   	push   ebx
c0011fd9:	e8 fa f9 ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	e9 5b ff ff ff       	jmp    c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fe6:	89 f0                	mov    eax,esi
c0011fe8:	84 c0                	test   al,al
c0011fea:	75 15                	jne    c0012001 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fec:	83 ec 08             	sub    esp,0x8
c0011fef:	6a 00                	push   0x0
c0011ff1:	53                   	push   ebx
c0011ff2:	e8 e1 f9 ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	5b                   	pop    ebx
c0011ffe:	5e                   	pop    esi
c0011fff:	5f                   	pop    edi
c0012000:	c3                   	ret    
c0012001:	c7 44 24 20 73 b7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b773
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	5b                   	pop    ebx
c001200d:	5e                   	pop    esi
c001200e:	5f                   	pop    edi
c001200f:	e9 85 89 00 00       	jmp    c001a999 <Krnl::panic(char const*)>

c0012014 <VAS::freeAllocatedPages(unsigned long)>:
c0012014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001201c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012020:	74 09                	je     c001202b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012022:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012026:	e9 c6 fe ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001202b:	c7 44 24 04 4c b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b54c
c0012033:	e9 19 0e 00 00       	jmp    c0012e51 <Dbg::kprintf(char const*, ...)>

c0012038 <VAS::virtualToPhysical(unsigned long)>:
c0012038:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001203c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012040:	e8 8d fe ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012045:	5a                   	pop    edx
c0012046:	8b 00                	mov    eax,DWORD PTR [eax]
c0012048:	59                   	pop    ecx
c0012049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001204e:	c3                   	ret    
c001204f:	90                   	nop

c0012050 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012050:	55                   	push   ebp
c0012051:	57                   	push   edi
c0012052:	56                   	push   esi
c0012053:	53                   	push   ebx
c0012054:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012058:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001205c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012060:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012064:	85 db                	test   ebx,ebx
c0012066:	7e 22                	jle    c001208a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012068:	c1 e3 0c             	shl    ebx,0xc
c001206b:	01 f3                	add    ebx,esi
c001206d:	56                   	push   esi
c001206e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012074:	55                   	push   ebp
c0012075:	e8 58 fe ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001207a:	5a                   	pop    edx
c001207b:	59                   	pop    ecx
c001207c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001207e:	21 f9                	and    ecx,edi
c0012080:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012084:	39 f3                	cmp    ebx,esi
c0012086:	89 08                	mov    DWORD PTR [eax],ecx
c0012088:	75 e3                	jne    c001206d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	5f                   	pop    edi
c001208d:	5d                   	pop    ebp
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VAS::setToWriteCombining(unsigned long, int)>:
c0012090:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012095:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001209b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120a2:	75 01                	jne    c00120a5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120a4:	c3                   	ret    
c00120a5:	68 80 00 00 00       	push   0x80
c00120aa:	6a ff                	push   0xffffffff
c00120ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b8:	e8 93 ff ff ff       	call   c0012050 <VAS::reflagRange(unsigned long, int, int, int)>
c00120bd:	83 c4 14             	add    esp,0x14
c00120c0:	c3                   	ret    
c00120c1:	90                   	nop

c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00120c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120d2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120d5:	19 c0                	sbb    eax,eax
c00120d7:	83 ca 03             	or     edx,0x3
c00120da:	83 e0 fc             	and    eax,0xfffffffc
c00120dd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120e4:	0f 20 d8             	mov    eax,cr3
c00120e7:	0f 22 d8             	mov    cr3,eax
c00120ea:	c3                   	ret    
c00120eb:	90                   	nop

c00120ec <VAS::~VAS()>:
c00120ec:	83 ec 2c             	sub    esp,0x2c
c00120ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120f7:	fa                   	cli    
c00120f8:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c00120fd:	40                   	inc    eax
c00120fe:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0012103:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012108:	8b 00                	mov    eax,DWORD PTR [eax]
c001210a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001210d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012113:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012117:	6a 01                	push   0x1
c0012119:	50                   	push   eax
c001211a:	e8 a3 ff ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001211f:	83 c4 0c             	add    esp,0xc
c0012122:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001212a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012132:	0f 8f d4 00 00 00    	jg     c001220c <VAS::~VAS()+0x120>
c0012138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001213c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001213f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012143:	c1 e2 02             	shl    edx,0x2
c0012146:	01 d0                	add    eax,edx
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001214e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012152:	83 e0 01             	and    eax,0x1
c0012155:	0f 84 a8 00 00 00    	je     c0012203 <VAS::~VAS()+0x117>
c001215b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012163:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001216b:	7f 72                	jg     c00121df <VAS::~VAS()+0xf3>
c001216d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012171:	c1 e0 0a             	shl    eax,0xa
c0012174:	89 c2                	mov    edx,eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	01 d0                	add    eax,edx
c001217c:	c1 e0 0c             	shl    eax,0xc
c001217f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012183:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012188:	8b 00                	mov    eax,DWORD PTR [eax]
c001218a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001218d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012193:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012197:	6a 01                	push   0x1
c0012199:	50                   	push   eax
c001219a:	e8 07 fd ff ff       	call   c0011ea6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001219f:	83 c4 0c             	add    esp,0xc
c00121a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b4:	25 01 04 00 00       	and    eax,0x401
c00121b9:	3d 01 04 00 00       	cmp    eax,0x401
c00121be:	75 19                	jne    c00121d9 <VAS::~VAS()+0xed>
c00121c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121c9:	83 ec 0c             	sub    esp,0xc
c00121cc:	50                   	push   eax
c00121cd:	e8 9c dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c00121d2:	83 c4 10             	add    esp,0x10
c00121d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121d9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121dd:	eb 84                	jmp    c0012163 <VAS::~VAS()+0x77>
c00121df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e3:	25 00 04 00 00       	and    eax,0x400
c00121e8:	74 19                	je     c0012203 <VAS::~VAS()+0x117>
c00121ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f3:	83 ec 0c             	sub    esp,0xc
c00121f6:	50                   	push   eax
c00121f7:	e8 72 dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c00121fc:	83 c4 10             	add    esp,0x10
c00121ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012203:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012207:	e9 1e ff ff ff       	jmp    c001212a <VAS::~VAS()+0x3e>
c001220c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012213:	83 ec 0c             	sub    esp,0xc
c0012216:	50                   	push   eax
c0012217:	e8 d5 fc ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012223:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012226:	83 ec 0c             	sub    esp,0xc
c0012229:	50                   	push   eax
c001222a:	e8 3f dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001223a:	c1 e0 02             	shl    eax,0x2
c001223d:	83 ec 08             	sub    esp,0x8
c0012240:	50                   	push   eax
c0012241:	68 70 b5 02 c0       	push   0xc002b570
c0012246:	e8 06 0c 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0012253:	48                   	dec    eax
c0012254:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0012259:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001225e:	85 c0                	test   eax,eax
c0012260:	75 01                	jne    c0012263 <VAS::~VAS()+0x177>
c0012262:	fb                   	sti    
c0012263:	90                   	nop
c0012264:	83 c4 2c             	add    esp,0x2c
c0012267:	c3                   	ret    

c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012268:	55                   	push   ebp
c0012269:	57                   	push   edi
c001226a:	56                   	push   esi
c001226b:	53                   	push   ebx
c001226c:	83 ec 1c             	sub    esp,0x1c
c001226f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012273:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012277:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001227d:	77 08                	ja     c0012287 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001227f:	0f 20 d8             	mov    eax,cr3
c0012282:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012285:	75 47                	jne    c00122ce <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001228b:	09 d8                	or     eax,ebx
c001228d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012292:	75 57                	jne    c00122eb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012294:	89 de                	mov    esi,ebx
c0012296:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012299:	c1 ee 16             	shr    esi,0x16
c001229c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122a3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122a7:	74 54                	je     c00122fd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ad:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122b3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122b7:	c1 e6 0c             	shl    esi,0xc
c00122ba:	c1 eb 0a             	shr    ebx,0xa
c00122bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122c3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122c6:	83 c4 1c             	add    esp,0x1c
c00122c9:	5b                   	pop    ebx
c00122ca:	5e                   	pop    esi
c00122cb:	5f                   	pop    edi
c00122cc:	5d                   	pop    ebp
c00122cd:	c3                   	ret    
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	68 90 b5 02 c0       	push   0xc002b590
c00122d6:	e8 76 0b 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122e2:	09 d8                	or     eax,ebx
c00122e4:	a9 ff 0f 00 00       	test   eax,0xfff
c00122e9:	74 a9                	je     c0012294 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122eb:	83 ec 0c             	sub    esp,0xc
c00122ee:	68 f8 b5 02 c0       	push   0xc002b5f8
c00122f3:	e8 a1 86 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00122f8:	83 c4 10             	add    esp,0x10
c00122fb:	eb 97                	jmp    c0012294 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012301:	e8 f2 db ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	89 c5                	mov    ebp,eax
c001230b:	8b 0d f0 f6 02 c0    	mov    ecx,DWORD PTR ds:0xc002f6f0
c0012311:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012315:	6a 01                	push   0x1
c0012317:	e8 15 f7 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001231c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012323:	6a 01                	push   0x1
c0012325:	50                   	push   eax
c0012326:	55                   	push   ebp
c0012327:	81 cd 07 04 00 00    	or     ebp,0x407
c001232d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012331:	51                   	push   ecx
c0012332:	e8 27 02 00 00       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012337:	83 c4 1c             	add    esp,0x1c
c001233a:	68 00 10 00 00       	push   0x1000
c001233f:	6a 00                	push   0x0
c0012341:	50                   	push   eax
c0012342:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012346:	e8 05 e4 fe ff       	call   c0000750 <memset>
c001234b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001234f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012352:	e8 9a fb ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001235b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012364:	e9 40 ff ff ff       	jmp    c00122a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012369:	90                   	nop

c001236a <VAS::allocatePages(int, int)>:
c001236a:	55                   	push   ebp
c001236b:	57                   	push   edi
c001236c:	56                   	push   esi
c001236d:	53                   	push   ebx
c001236e:	83 ec 1c             	sub    esp,0x1c
c0012371:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012375:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001237a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012380:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012386:	83 e0 01             	and    eax,0x1
c0012389:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001238d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012391:	0f 85 cc 00 00 00    	jne    c0012463 <VAS::allocatePages(int, int)+0xf9>
c0012397:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001239a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001239e:	85 c0                	test   eax,eax
c00123a0:	0f 84 a1 00 00 00    	je     c0012447 <VAS::allocatePages(int, int)+0xdd>
c00123a6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ae:	c1 e6 0c             	shl    esi,0xc
c00123b1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123b5:	85 c0                	test   eax,eax
c00123b7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123ba:	7e 33                	jle    c00123ef <VAS::allocatePages(int, int)+0x85>
c00123bc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c4:	81 cd 00 04 00 00    	or     ebp,0x400
c00123ca:	e8 29 db ff ff       	call   c000fef8 <Phys::allocatePage()>
c00123cf:	55                   	push   ebp
c00123d0:	53                   	push   ebx
c00123d1:	50                   	push   eax
c00123d2:	57                   	push   edi
c00123d3:	e8 90 fe ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123e0:	74 03                	je     c00123e5 <VAS::allocatePages(int, int)+0x7b>
c00123e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123eb:	39 de                	cmp    esi,ebx
c00123ed:	75 db                	jne    c00123ca <VAS::allocatePages(int, int)+0x60>
c00123ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123f4:	75 12                	jne    c0012408 <VAS::allocatePages(int, int)+0x9e>
c00123f6:	0f 20 d8             	mov    eax,cr3
c00123f9:	0f 22 d8             	mov    cr3,eax
c00123fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012400:	83 c4 1c             	add    esp,0x1c
c0012403:	5b                   	pop    ebx
c0012404:	5e                   	pop    esi
c0012405:	5f                   	pop    edi
c0012406:	5d                   	pop    ebp
c0012407:	c3                   	ret    
c0012408:	c1 ee 0a             	shr    esi,0xa
c001240b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001240f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012415:	c1 eb 0a             	shr    ebx,0xa
c0012418:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001241e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012424:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001242a:	39 c3                	cmp    ebx,eax
c001242c:	77 ce                	ja     c00123fc <VAS::allocatePages(int, int)+0x92>
c001242e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012431:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012437:	39 d8                	cmp    eax,ebx
c0012439:	73 f3                	jae    c001242e <VAS::allocatePages(int, int)+0xc4>
c001243b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001243f:	83 c4 1c             	add    esp,0x1c
c0012442:	5b                   	pop    ebx
c0012443:	5e                   	pop    esi
c0012444:	5f                   	pop    edi
c0012445:	5d                   	pop    ebp
c0012446:	c3                   	ret    
c0012447:	83 ec 0c             	sub    esp,0xc
c001244a:	68 1c b6 02 c0       	push   0xc002b61c
c001244f:	e8 45 85 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0012454:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	e9 43 ff ff ff       	jmp    c00123a6 <VAS::allocatePages(int, int)+0x3c>
c0012463:	83 ec 0c             	sub    esp,0xc
c0012466:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001246a:	e8 c2 f5 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001246f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001247b:	0f 87 9b 00 00 00    	ja     c001251c <VAS::allocatePages(int, int)+0x1b2>
c0012481:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012485:	85 d2                	test   edx,edx
c0012487:	7e 3c                	jle    c00124c5 <VAS::allocatePages(int, int)+0x15b>
c0012489:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001248d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012491:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012495:	c1 e5 0c             	shl    ebp,0xc
c0012498:	81 ce 00 04 00 00    	or     esi,0x400
c001249e:	01 dd                	add    ebp,ebx
c00124a0:	e8 53 da ff ff       	call   c000fef8 <Phys::allocatePage()>
c00124a5:	56                   	push   esi
c00124a6:	53                   	push   ebx
c00124a7:	50                   	push   eax
c00124a8:	57                   	push   edi
c00124a9:	e8 ba fd ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124b6:	74 03                	je     c00124bb <VAS::allocatePages(int, int)+0x151>
c00124b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124c1:	39 dd                	cmp    ebp,ebx
c00124c3:	75 db                	jne    c00124a0 <VAS::allocatePages(int, int)+0x136>
c00124c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ca:	0f 84 26 ff ff ff    	je     c00123f6 <VAS::allocatePages(int, int)+0x8c>
c00124d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124d8:	89 d3                	mov    ebx,edx
c00124da:	c1 e0 0c             	shl    eax,0xc
c00124dd:	c1 eb 0a             	shr    ebx,0xa
c00124e0:	01 d0                	add    eax,edx
c00124e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124e8:	c1 e8 0a             	shr    eax,0xa
c00124eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124f6:	2d 00 00 40 00       	sub    eax,0x400000
c00124fb:	39 c3                	cmp    ebx,eax
c00124fd:	0f 87 f9 fe ff ff    	ja     c00123fc <VAS::allocatePages(int, int)+0x92>
c0012503:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012506:	81 c3 00 10 00 00    	add    ebx,0x1000
c001250c:	39 d8                	cmp    eax,ebx
c001250e:	73 f3                	jae    c0012503 <VAS::allocatePages(int, int)+0x199>
c0012510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012514:	83 c4 1c             	add    esp,0x1c
c0012517:	5b                   	pop    ebx
c0012518:	5e                   	pop    esi
c0012519:	5f                   	pop    edi
c001251a:	5d                   	pop    ebp
c001251b:	c3                   	ret    
c001251c:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012521:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012527:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001252e:	0f 84 4d ff ff ff    	je     c0012481 <VAS::allocatePages(int, int)+0x117>
c0012534:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001253c:	e9 40 ff ff ff       	jmp    c0012481 <VAS::allocatePages(int, int)+0x117>
c0012541:	90                   	nop

c0012542 <VAS::setCPUSpecific(unsigned long)>:
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	6a 05                	push   0x5
c0012547:	68 00 00 40 c2       	push   0xc2400000
c001254c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012554:	e8 0f fd ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012559:	83 c4 1c             	add    esp,0x1c
c001255c:	c3                   	ret    
c001255d:	90                   	nop

c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001255e:	55                   	push   ebp
c001255f:	57                   	push   edi
c0012560:	56                   	push   esi
c0012561:	53                   	push   ebx
c0012562:	83 ec 1c             	sub    esp,0x1c
c0012565:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001256a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001256e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012574:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012578:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001257e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012582:	83 e0 01             	and    eax,0x1
c0012585:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012589:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001258d:	85 c0                	test   eax,eax
c001258f:	7e 39                	jle    c00125ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012591:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012595:	89 f3                	mov    ebx,esi
c0012597:	c1 e0 0c             	shl    eax,0xc
c001259a:	01 f0                	add    eax,esi
c001259c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125a0:	55                   	push   ebp
c00125a1:	53                   	push   ebx
c00125a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a6:	29 f0                	sub    eax,esi
c00125a8:	01 d8                	add    eax,ebx
c00125aa:	50                   	push   eax
c00125ab:	57                   	push   edi
c00125ac:	e8 b7 fc ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b9:	74 03                	je     c00125be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125bb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125be:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125c8:	75 d6                	jne    c00125a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125cf:	75 10                	jne    c00125e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125d1:	0f 20 d8             	mov    eax,cr3
c00125d4:	0f 22 d8             	mov    cr3,eax
c00125d7:	83 c4 1c             	add    esp,0x1c
c00125da:	89 f0                	mov    eax,esi
c00125dc:	5b                   	pop    ebx
c00125dd:	5e                   	pop    esi
c00125de:	5f                   	pop    edi
c00125df:	5d                   	pop    ebp
c00125e0:	c3                   	ret    
c00125e1:	89 f3                	mov    ebx,esi
c00125e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e7:	c1 eb 0a             	shr    ebx,0xa
c00125ea:	c1 e0 0c             	shl    eax,0xc
c00125ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f3:	01 f0                	add    eax,esi
c00125f5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fb:	c1 e8 0a             	shr    eax,0xa
c00125fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012603:	2d 00 00 40 00       	sub    eax,0x400000
c0012608:	39 c3                	cmp    ebx,eax
c001260a:	77 cb                	ja     c00125d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001260c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012615:	39 d8                	cmp    eax,ebx
c0012617:	73 f3                	jae    c001260c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012619:	83 c4 1c             	add    esp,0x1c
c001261c:	89 f0                	mov    eax,esi
c001261e:	5b                   	pop    ebx
c001261f:	5e                   	pop    esi
c0012620:	5f                   	pop    edi
c0012621:	5d                   	pop    ebp
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012624:	55                   	push   ebp
c0012625:	57                   	push   edi
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001262f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012633:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012637:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001263b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012640:	75 4a                	jne    c001268c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012642:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012646:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012649:	c1 eb 16             	shr    ebx,0x16
c001264c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012653:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012657:	74 4d                	je     c00126a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012659:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001265d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012661:	c1 e8 0a             	shr    eax,0xa
c0012664:	80 fa 01             	cmp    dl,0x1
c0012667:	19 d2                	sbb    edx,edx
c0012669:	c1 e3 0c             	shl    ebx,0xc
c001266c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012670:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012676:	25 fc 0f 00 00       	and    eax,0xffc
c001267b:	01 d8                	add    eax,ebx
c001267d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012684:	83 c4 1c             	add    esp,0x1c
c0012687:	5b                   	pop    ebx
c0012688:	5e                   	pop    esi
c0012689:	5f                   	pop    edi
c001268a:	5d                   	pop    ebp
c001268b:	c3                   	ret    
c001268c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012690:	83 ec 0c             	sub    esp,0xc
c0012693:	68 48 b6 02 c0       	push   0xc002b648
c0012698:	e8 fc 82 00 00       	call   c001a999 <Krnl::panic(char const*)>
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a4:	eb 9c                	jmp    c0012642 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126aa:	e8 49 d8 ff ff       	call   c000fef8 <Phys::allocatePage()>
c00126af:	83 ec 0c             	sub    esp,0xc
c00126b2:	89 c5                	mov    ebp,eax
c00126b4:	8b 0d f0 f6 02 c0    	mov    ecx,DWORD PTR ds:0xc002f6f0
c00126ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126be:	6a 01                	push   0x1
c00126c0:	e8 6c f3 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c00126c5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126cc:	6a 01                	push   0x1
c00126ce:	50                   	push   eax
c00126cf:	55                   	push   ebp
c00126d0:	81 cd 07 04 00 00    	or     ebp,0x407
c00126d6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126da:	51                   	push   ecx
c00126db:	e8 7e fe ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e0:	83 c4 1c             	add    esp,0x1c
c00126e3:	68 00 10 00 00       	push   0x1000
c00126e8:	6a 00                	push   0x0
c00126ea:	50                   	push   eax
c00126eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ef:	e8 5c e0 fe ff       	call   c0000750 <memset>
c00126f4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126fb:	e8 f1 f7 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012700:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012709:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001270d:	e9 47 ff ff ff       	jmp    c0012659 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012712 <VAS::VAS(bool)>:
c0012712:	53                   	push   ebx
c0012713:	83 ec 28             	sub    esp,0x28
c0012716:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001271e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012722:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012729:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012734:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012738:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001273c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001273f:	e8 b4 d7 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012744:	89 c2                	mov    edx,eax
c0012746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001274d:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c0012753:	83 ec 0c             	sub    esp,0xc
c0012756:	6a 01                	push   0x1
c0012758:	e8 d4 f2 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	89 c2                	mov    edx,eax
c0012762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012766:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012769:	83 ec 0c             	sub    esp,0xc
c001276c:	6a 03                	push   0x3
c001276e:	6a 01                	push   0x1
c0012770:	52                   	push   edx
c0012771:	50                   	push   eax
c0012772:	53                   	push   ebx
c0012773:	e8 e6 fd ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012778:	83 c4 20             	add    esp,0x20
c001277b:	89 c2                	mov    edx,eax
c001277d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012781:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012784:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001278c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012794:	7f 1c                	jg     c00127b2 <VAS::VAS(bool)+0xa0>
c0012796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001279d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127a1:	c1 e2 02             	shl    edx,0x2
c00127a4:	01 d0                	add    eax,edx
c00127a6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127b0:	eb da                	jmp    c001278c <VAS::VAS(bool)+0x7a>
c00127b2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127ba:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127c2:	7f 7a                	jg     c001283e <VAS::VAS(bool)+0x12c>
c00127c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c8:	2d 00 02 00 00       	sub    eax,0x200
c00127cd:	c1 e0 0c             	shl    eax,0xc
c00127d0:	83 c8 03             	or     eax,0x3
c00127d3:	89 c2                	mov    edx,eax
c00127d5:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00127da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127e6:	83 e0 10             	and    eax,0x10
c00127e9:	84 c0                	test   al,al
c00127eb:	74 07                	je     c00127f4 <VAS::VAS(bool)+0xe2>
c00127ed:	b8 00 01 00 00       	mov    eax,0x100
c00127f2:	eb 05                	jmp    c00127f9 <VAS::VAS(bool)+0xe7>
c00127f4:	b8 00 00 00 00       	mov    eax,0x0
c00127f9:	09 d0                	or     eax,edx
c00127fb:	89 c1                	mov    ecx,eax
c00127fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012801:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012808:	c1 e2 02             	shl    edx,0x2
c001280b:	01 d0                	add    eax,edx
c001280d:	89 ca                	mov    edx,ecx
c001280f:	89 10                	mov    DWORD PTR [eax],edx
c0012811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012815:	2d 40 03 00 00       	sub    eax,0x340
c001281a:	83 f8 7f             	cmp    eax,0x7f
c001281d:	77 16                	ja     c0012835 <VAS::VAS(bool)+0x123>
c001281f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012823:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012826:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001282a:	c1 e2 02             	shl    edx,0x2
c001282d:	01 d0                	add    eax,edx
c001282f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012835:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012839:	e9 7c ff ff ff       	jmp    c00127ba <VAS::VAS(bool)+0xa8>
c001283e:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012843:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012849:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001284f:	83 e0 10             	and    eax,0x10
c0012852:	84 c0                	test   al,al
c0012854:	74 07                	je     c001285d <VAS::VAS(bool)+0x14b>
c0012856:	b8 03 41 00 00       	mov    eax,0x4103
c001285b:	eb 05                	jmp    c0012862 <VAS::VAS(bool)+0x150>
c001285d:	b8 03 40 00 00       	mov    eax,0x4003
c0012862:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012866:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012869:	81 c2 20 0c 00 00    	add    edx,0xc20
c001286f:	89 02                	mov    DWORD PTR [edx],eax
c0012871:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012876:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012882:	83 ec 08             	sub    esp,0x8
c0012885:	50                   	push   eax
c0012886:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001288a:	e8 b3 fc ff ff       	call   c0012542 <VAS::setCPUSpecific(unsigned long)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012896:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012899:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001289e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128aa:	83 e0 10             	and    eax,0x10
c00128ad:	84 c0                	test   al,al
c00128af:	74 07                	je     c00128b8 <VAS::VAS(bool)+0x1a6>
c00128b1:	b8 00 01 00 00       	mov    eax,0x100
c00128b6:	eb 05                	jmp    c00128bd <VAS::VAS(bool)+0x1ab>
c00128b8:	b8 00 00 00 00       	mov    eax,0x0
c00128bd:	09 c2                	or     edx,eax
c00128bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128c6:	05 fc 0f 00 00       	add    eax,0xffc
c00128cb:	83 ca 03             	or     edx,0x3
c00128ce:	89 10                	mov    DWORD PTR [eax],edx
c00128d0:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00128d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	50                   	push   eax
c00128df:	e8 a6 1c 00 00       	call   c001458a <Device::getName()>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	83 ec 08             	sub    esp,0x8
c00128ea:	68 8d b7 02 c0       	push   0xc002b78d
c00128ef:	50                   	push   eax
c00128f0:	e8 a3 df fe ff       	call   c0000898 <strcmp>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	85 c0                	test   eax,eax
c00128fa:	0f 94 c0             	sete   al
c00128fd:	84 c0                	test   al,al
c00128ff:	0f 84 87 00 00 00    	je     c001298c <VAS::VAS(bool)+0x27a>
c0012905:	fa                   	cli    
c0012906:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001290b:	40                   	inc    eax
c001290c:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0012911:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012916:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001291c:	05 7c 09 00 00       	add    eax,0x97c
c0012921:	83 ec 0c             	sub    esp,0xc
c0012924:	50                   	push   eax
c0012925:	e8 e4 c9 ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012932:	89 c3                	mov    ebx,eax
c0012934:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012939:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001293f:	05 7c 09 00 00       	add    eax,0x97c
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	50                   	push   eax
c0012948:	e8 c1 c9 ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	50                   	push   eax
c0012954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012958:	e8 75 f5 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	8b 00                	mov    eax,DWORD PTR [eax]
c0012962:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012967:	6a 11                	push   0x11
c0012969:	53                   	push   ebx
c001296a:	50                   	push   eax
c001296b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001296f:	e8 f4 f8 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001297c:	48                   	dec    eax
c001297d:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0012982:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0012987:	85 c0                	test   eax,eax
c0012989:	75 01                	jne    c001298c <VAS::VAS(bool)+0x27a>
c001298b:	fb                   	sti    
c001298c:	90                   	nop
c001298d:	83 c4 28             	add    esp,0x28
c0012990:	5b                   	pop    ebx
c0012991:	c3                   	ret    

c0012992 <VAS::evict(unsigned long)>:
c0012992:	55                   	push   ebp
c0012993:	57                   	push   edi
c0012994:	56                   	push   esi
c0012995:	53                   	push   ebx
c0012996:	83 ec 1c             	sub    esp,0x1c
c0012999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129a5:	e8 c8 f1 ff ff       	call   c0011b72 <Virt::allocateSwapfilePage()>
c00129aa:	89 c7                	mov    edi,eax
c00129ac:	a1 0c e5 02 c0       	mov    eax,ds:0xc002e50c
c00129b1:	85 c0                	test   eax,eax
c00129b3:	7e 3d                	jle    c00129f2 <VAS::evict(unsigned long)+0x60>
c00129b5:	89 ee                	mov    esi,ebp
c00129b7:	31 db                	xor    ebx,ebx
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	57                   	push   edi
c00129bd:	e8 9e f1 ff ff       	call   c0011b60 <Virt::swapIDToSector(unsigned long)>
c00129c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00129c5:	01 d8                	add    eax,ebx
c00129c7:	6a 01                	push   0x1
c00129c9:	31 d2                	xor    edx,edx
c00129cb:	43                   	inc    ebx
c00129cc:	52                   	push   edx
c00129cd:	81 c6 00 02 00 00    	add    esi,0x200
c00129d3:	50                   	push   eax
c00129d4:	0f be 05 18 e5 02 c0 	movsx  eax,BYTE PTR ds:0xc002e518
c00129db:	ff 34 85 7c fa 02 c0 	push   DWORD PTR [eax*4-0x3ffd0584]
c00129e2:	e8 53 3e 00 00       	call   c001683a <LogicalDisk::write(unsigned long long, int, void*)>
c00129e7:	83 c4 20             	add    esp,0x20
c00129ea:	39 1d 0c e5 02 c0    	cmp    DWORD PTR ds:0xc002e50c,ebx
c00129f0:	7f c7                	jg     c00129b9 <VAS::evict(unsigned long)+0x27>
c00129f2:	83 ec 08             	sub    esp,0x8
c00129f5:	c1 e7 0b             	shl    edi,0xb
c00129f8:	55                   	push   ebp
c00129f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129fd:	e8 d0 f4 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012a02:	83 c4 0c             	add    esp,0xc
c0012a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a07:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a0d:	09 d7                	or     edi,edx
c0012a0f:	89 38                	mov    DWORD PTR [eax],edi
c0012a11:	a1 e8 f6 02 c0       	mov    eax,ds:0xc002f6e8
c0012a16:	40                   	inc    eax
c0012a17:	a3 e8 f6 02 c0       	mov    ds:0xc002f6e8,eax
c0012a1c:	0f 20 da             	mov    edx,cr3
c0012a1f:	0f 22 da             	mov    cr3,edx
c0012a22:	50                   	push   eax
c0012a23:	55                   	push   ebp
c0012a24:	68 9b b7 02 c0       	push   0xc002b79b
c0012a29:	e8 23 04 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012a2e:	a1 e4 f6 02 c0       	mov    eax,ds:0xc002f6e4
c0012a33:	c7 44 24 40 b0 b7 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b7b0
c0012a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0012a3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a42:	89 15 e4 f6 02 c0    	mov    DWORD PTR ds:0xc002f6e4,edx
c0012a48:	83 c4 2c             	add    esp,0x2c
c0012a4b:	5b                   	pop    ebx
c0012a4c:	5e                   	pop    esi
c0012a4d:	5f                   	pop    edi
c0012a4e:	5d                   	pop    ebp
c0012a4f:	e9 fd 03 00 00       	jmp    c0012e51 <Dbg::kprintf(char const*, ...)>

c0012a54 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a54:	55                   	push   ebp
c0012a55:	57                   	push   edi
c0012a56:	56                   	push   esi
c0012a57:	53                   	push   ebx
c0012a58:	83 ec 24             	sub    esp,0x24
c0012a5b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a5f:	53                   	push   ebx
c0012a60:	89 df                	mov    edi,ebx
c0012a62:	68 c1 b7 02 c0       	push   0xc002b7c1
c0012a67:	e8 e5 03 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012a75:	0f 84 e7 00 00 00    	je     c0012b62 <VAS::tryLoadBackOffDisk(unsigned long)+0x10e>
c0012a7b:	83 ec 08             	sub    esp,0x8
c0012a7e:	57                   	push   edi
c0012a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a83:	e8 4a f4 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	89 c6                	mov    esi,eax
c0012a8d:	85 c0                	test   eax,eax
c0012a8f:	0f 84 cd 00 00 00    	je     c0012b62 <VAS::tryLoadBackOffDisk(unsigned long)+0x10e>
c0012a95:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a97:	31 c0                	xor    eax,eax
c0012a99:	89 d1                	mov    ecx,edx
c0012a9b:	81 e1 01 04 00 00    	and    ecx,0x401
c0012aa1:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0012aa7:	0f 85 b7 00 00 00    	jne    c0012b64 <VAS::tryLoadBackOffDisk(unsigned long)+0x110>
c0012aad:	c1 ea 0b             	shr    edx,0xb
c0012ab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ab4:	e8 3f d4 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012ab9:	8b 16                	mov    edx,DWORD PTR [esi]
c0012abb:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ac1:	09 c2                	or     edx,eax
c0012ac3:	81 ca 01 08 00 00    	or     edx,0x801
c0012ac9:	89 16                	mov    DWORD PTR [esi],edx
c0012acb:	8b 35 0c e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e50c
c0012ad1:	85 f6                	test   esi,esi
c0012ad3:	7e 40                	jle    c0012b15 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c0012ad5:	89 fd                	mov    ebp,edi
c0012ad7:	31 f6                	xor    esi,esi
c0012ad9:	83 ec 0c             	sub    esp,0xc
c0012adc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ae0:	e8 7b f0 ff ff       	call   c0011b60 <Virt::swapIDToSector(unsigned long)>
c0012ae5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ae8:	01 f0                	add    eax,esi
c0012aea:	6a 01                	push   0x1
c0012aec:	31 d2                	xor    edx,edx
c0012aee:	46                   	inc    esi
c0012aef:	52                   	push   edx
c0012af0:	81 c5 00 02 00 00    	add    ebp,0x200
c0012af6:	50                   	push   eax
c0012af7:	0f be 05 18 e5 02 c0 	movsx  eax,BYTE PTR ds:0xc002e518
c0012afe:	ff 34 85 7c fa 02 c0 	push   DWORD PTR [eax*4-0x3ffd0584]
c0012b05:	e8 c4 3c 00 00       	call   c00167ce <LogicalDisk::read(unsigned long long, int, void*)>
c0012b0a:	83 c4 20             	add    esp,0x20
c0012b0d:	39 35 0c e5 02 c0    	cmp    DWORD PTR ds:0xc002e50c,esi
c0012b13:	7f c4                	jg     c0012ad9 <VAS::tryLoadBackOffDisk(unsigned long)+0x85>
c0012b15:	a1 e8 f6 02 c0       	mov    eax,ds:0xc002f6e8
c0012b1a:	48                   	dec    eax
c0012b1b:	52                   	push   edx
c0012b1c:	a3 e8 f6 02 c0       	mov    ds:0xc002f6e8,eax
c0012b21:	50                   	push   eax
c0012b22:	57                   	push   edi
c0012b23:	68 df b7 02 c0       	push   0xc002b7df
c0012b28:	e8 24 03 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012b2d:	59                   	pop    ecx
c0012b2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b32:	e8 0b f0 ff ff       	call   c0011b42 <Virt::freeSwapfilePage(unsigned long)>
c0012b37:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0012b3c:	83 c4 10             	add    esp,0x10
c0012b3f:	48                   	dec    eax
c0012b40:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0012b45:	85 c0                	test   eax,eax
c0012b47:	75 01                	jne    c0012b4a <VAS::tryLoadBackOffDisk(unsigned long)+0xf6>
c0012b49:	fb                   	sti    
c0012b4a:	81 e3 ff 0f 00 00    	and    ebx,0xfff
c0012b50:	81 fb e0 0f 00 00    	cmp    ebx,0xfe0
c0012b56:	77 14                	ja     c0012b6c <VAS::tryLoadBackOffDisk(unsigned long)+0x118>
c0012b58:	0f 20 d8             	mov    eax,cr3
c0012b5b:	0f 22 d8             	mov    cr3,eax
c0012b5e:	b0 01                	mov    al,0x1
c0012b60:	eb 02                	jmp    c0012b64 <VAS::tryLoadBackOffDisk(unsigned long)+0x110>
c0012b62:	31 c0                	xor    eax,eax
c0012b64:	83 c4 1c             	add    esp,0x1c
c0012b67:	5b                   	pop    ebx
c0012b68:	5e                   	pop    esi
c0012b69:	5f                   	pop    edi
c0012b6a:	5d                   	pop    ebp
c0012b6b:	c3                   	ret    
c0012b6c:	83 ec 0c             	sub    esp,0xc
c0012b6f:	68 f4 b7 02 c0       	push   0xc002b7f4
c0012b74:	e8 d8 02 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	eb da                	jmp    c0012b58 <VAS::tryLoadBackOffDisk(unsigned long)+0x104>

c0012b7e <VAS::scanForEviction()>:
c0012b7e:	57                   	push   edi
c0012b7f:	56                   	push   esi
c0012b80:	53                   	push   ebx
c0012b81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b85:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b88:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b8e:	75 0e                	jne    c0012b9e <VAS::scanForEviction()+0x20>
c0012b90:	89 da                	mov    edx,ebx
c0012b92:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b95:	c1 ea 16             	shr    edx,0x16
c0012b98:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b9c:	74 48                	je     c0012be6 <VAS::scanForEviction()+0x68>
c0012b9e:	53                   	push   ebx
c0012b9f:	56                   	push   esi
c0012ba0:	e8 2d f3 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012ba5:	5a                   	pop    edx
c0012ba6:	8b 38                	mov    edi,DWORD PTR [eax]
c0012ba8:	59                   	pop    ecx
c0012ba9:	89 fa                	mov    edx,edi
c0012bab:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012bb1:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bb7:	74 3d                	je     c0012bf6 <VAS::scanForEviction()+0x78>
c0012bb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bbf:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bc5:	76 2a                	jbe    c0012bf1 <VAS::scanForEviction()+0x73>
c0012bc7:	31 db                	xor    ebx,ebx
c0012bc9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bd0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bd6:	75 c6                	jne    c0012b9e <VAS::scanForEviction()+0x20>
c0012bd8:	89 da                	mov    edx,ebx
c0012bda:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bdd:	c1 ea 16             	shr    edx,0x16
c0012be0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012be4:	75 b8                	jne    c0012b9e <VAS::scanForEviction()+0x20>
c0012be6:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bec:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bef:	eb 97                	jmp    c0012b88 <VAS::scanForEviction()+0xa>
c0012bf1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bf4:	eb 92                	jmp    c0012b88 <VAS::scanForEviction()+0xa>
c0012bf6:	f7 c7 01 00 00 00    	test   edi,0x1
c0012bfc:	74 bb                	je     c0012bb9 <VAS::scanForEviction()+0x3b>
c0012bfe:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c04:	74 0a                	je     c0012c10 <VAS::scanForEviction()+0x92>
c0012c06:	83 e7 df             	and    edi,0xffffffdf
c0012c09:	89 38                	mov    DWORD PTR [eax],edi
c0012c0b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c0e:	eb a9                	jmp    c0012bb9 <VAS::scanForEviction()+0x3b>
c0012c10:	83 ec 08             	sub    esp,0x8
c0012c13:	53                   	push   ebx
c0012c14:	56                   	push   esi
c0012c15:	e8 78 fd ff ff       	call   c0012992 <VAS::evict(unsigned long)>
c0012c1a:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c21:	83 c4 10             	add    esp,0x10
c0012c24:	89 f8                	mov    eax,edi
c0012c26:	5b                   	pop    ebx
c0012c27:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c2c:	5e                   	pop    esi
c0012c2d:	5f                   	pop    edi
c0012c2e:	c3                   	ret    

c0012c2f <mapVASFirstTime>:
c0012c2f:	55                   	push   ebp
c0012c30:	57                   	push   edi
c0012c31:	56                   	push   esi
c0012c32:	53                   	push   ebx
c0012c33:	83 ec 0c             	sub    esp,0xc
c0012c36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c3b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c3e:	4a                   	dec    edx
c0012c3f:	0f 84 8e 00 00 00    	je     c0012cd3 <mapVASFirstTime+0xa4>
c0012c45:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c48:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c4b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c50:	c1 e5 15             	shl    ebp,0x15
c0012c53:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c58:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c5e:	29 eb                	sub    ebx,ebp
c0012c60:	29 ee                	sub    esi,ebp
c0012c62:	e8 91 d2 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012c67:	83 ec 0c             	sub    esp,0xc
c0012c6a:	68 03 04 00 00       	push   0x403
c0012c6f:	6a 01                	push   0x1
c0012c71:	53                   	push   ebx
c0012c72:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c78:	50                   	push   eax
c0012c79:	57                   	push   edi
c0012c7a:	e8 df f8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c7f:	83 c4 20             	add    esp,0x20
c0012c82:	39 f3                	cmp    ebx,esi
c0012c84:	75 dc                	jne    c0012c62 <mapVASFirstTime+0x33>
c0012c86:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c8b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c90:	29 ee                	sub    esi,ebp
c0012c92:	29 e8                	sub    eax,ebp
c0012c94:	89 c5                	mov    ebp,eax
c0012c96:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c9a:	19 db                	sbb    ebx,ebx
c0012c9c:	e8 57 d2 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012ca1:	83 e3 04             	and    ebx,0x4
c0012ca4:	83 ec 0c             	sub    esp,0xc
c0012ca7:	81 c3 03 04 00 00    	add    ebx,0x403
c0012cad:	53                   	push   ebx
c0012cae:	6a 01                	push   0x1
c0012cb0:	56                   	push   esi
c0012cb1:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cb7:	50                   	push   eax
c0012cb8:	57                   	push   edi
c0012cb9:	e8 a0 f8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cbe:	83 c4 20             	add    esp,0x20
c0012cc1:	39 f5                	cmp    ebp,esi
c0012cc3:	75 d1                	jne    c0012c96 <mapVASFirstTime+0x67>
c0012cc5:	0f 20 d8             	mov    eax,cr3
c0012cc8:	0f 22 d8             	mov    cr3,eax
c0012ccb:	83 c4 0c             	add    esp,0xc
c0012cce:	5b                   	pop    ebx
c0012ccf:	5e                   	pop    esi
c0012cd0:	5f                   	pop    edi
c0012cd1:	5d                   	pop    ebp
c0012cd2:	c3                   	ret    
c0012cd3:	83 ec 0c             	sub    esp,0xc
c0012cd6:	68 04 b8 02 c0       	push   0xc002b804
c0012cdb:	e8 71 01 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	83 c4 0c             	add    esp,0xc
c0012ce6:	5b                   	pop    ebx
c0012ce7:	5e                   	pop    esi
c0012ce8:	5f                   	pop    edi
c0012ce9:	5d                   	pop    ebp
c0012cea:	c3                   	ret    

c0012ceb <__cxa_atexit>:
c0012ceb:	31 c0                	xor    eax,eax
c0012ced:	c3                   	ret    

c0012cee <__cxa_finalize>:
c0012cee:	c3                   	ret    

c0012cef <__stack_chk_fail>:
c0012cef:	55                   	push   ebp
c0012cf0:	89 e5                	mov    ebp,esp
c0012cf2:	83 ec 14             	sub    esp,0x14
c0012cf5:	68 1d b8 02 c0       	push   0xc002b81d
c0012cfa:	e8 52 01 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012cff:	58                   	pop    eax
c0012d00:	5a                   	pop    edx
c0012d01:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d04:	68 6d b8 02 c0       	push   0xc002b86d
c0012d09:	e8 43 01 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012d0e:	59                   	pop    ecx
c0012d0f:	58                   	pop    eax
c0012d10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d13:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d16:	68 6d b8 02 c0       	push   0xc002b86d
c0012d1b:	e8 31 01 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012d20:	5a                   	pop    edx
c0012d21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d24:	59                   	pop    ecx
c0012d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d27:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d2a:	68 6d b8 02 c0       	push   0xc002b86d
c0012d2f:	e8 1d 01 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012d34:	5a                   	pop    edx
c0012d35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d38:	59                   	pop    ecx
c0012d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d40:	68 6d b8 02 c0       	push   0xc002b86d
c0012d45:	e8 07 01 00 00       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0012d4a:	c7 04 24 75 b8 02 c0 	mov    DWORD PTR [esp],0xc002b875
c0012d51:	e8 43 7c 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0012d56:	83 c4 10             	add    esp,0x10
c0012d59:	c9                   	leave  
c0012d5a:	c3                   	ret    

c0012d5b <__cxa_pure_virtual>:
c0012d5b:	83 ec 18             	sub    esp,0x18
c0012d5e:	68 8d b8 02 c0       	push   0xc002b88d
c0012d63:	e8 31 7c 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0012d68:	83 c4 1c             	add    esp,0x1c
c0012d6b:	c3                   	ret    

c0012d6c <operator new[](unsigned long)>:
c0012d6c:	e9 1b cb ff ff       	jmp    c000f88c <malloc>

c0012d71 <operator delete(void*, unsigned long)>:
c0012d71:	e9 36 cb ff ff       	jmp    c000f8ac <rfree>

c0012d76 <operator delete[](void*)>:
c0012d76:	e9 31 cb ff ff       	jmp    c000f8ac <rfree>

c0012d7b <operator delete[](void*, unsigned long)>:
c0012d7b:	e9 2c cb ff ff       	jmp    c000f8ac <rfree>

c0012d80 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d80:	57                   	push   edi
c0012d81:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d86:	56                   	push   esi
c0012d87:	be a0 b8 02 c0       	mov    esi,0xc002b8a0
c0012d8c:	53                   	push   ebx
c0012d8d:	83 ec 40             	sub    esp,0x40
c0012d90:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d94:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d98:	fc                   	cld    
c0012d99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d9b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d9f:	83 f9 3e             	cmp    ecx,0x3e
c0012da2:	7e 05                	jle    c0012da9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012da4:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012da9:	89 df                	mov    edi,ebx
c0012dab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012daf:	eb 02                	jmp    c0012db3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012db1:	89 c7                	mov    edi,eax
c0012db3:	31 d2                	xor    edx,edx
c0012db5:	46                   	inc    esi
c0012db6:	89 f8                	mov    eax,edi
c0012db8:	f7 f1                	div    ecx
c0012dba:	39 cf                	cmp    edi,ecx
c0012dbc:	73 f3                	jae    c0012db1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012dbe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dc1:	eb 02                	jmp    c0012dc5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012dc3:	89 c3                	mov    ebx,eax
c0012dc5:	31 d2                	xor    edx,edx
c0012dc7:	4e                   	dec    esi
c0012dc8:	89 d8                	mov    eax,ebx
c0012dca:	f7 f1                	div    ecx
c0012dcc:	39 cb                	cmp    ebx,ecx
c0012dce:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012dd2:	88 16                	mov    BYTE PTR [esi],dl
c0012dd4:	73 ed                	jae    c0012dc3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dd6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dda:	83 c4 40             	add    esp,0x40
c0012ddd:	5b                   	pop    ebx
c0012dde:	5e                   	pop    esi
c0012ddf:	5f                   	pop    edi
c0012de0:	c3                   	ret    

c0012de1 <Dbg::logc(char)>:
c0012de1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012de5:	ba fd 03 00 00       	mov    edx,0x3fd
c0012dea:	ec                   	in     al,dx
c0012deb:	a8 20                	test   al,0x20
c0012ded:	74 fb                	je     c0012dea <Dbg::logc(char)+0x9>
c0012def:	ba f8 03 00 00       	mov    edx,0x3f8
c0012df4:	88 c8                	mov    al,cl
c0012df6:	ee                   	out    dx,al
c0012df7:	c3                   	ret    

c0012df8 <Dbg::logs(char*)>:
c0012df8:	53                   	push   ebx
c0012df9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012dfd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e00:	84 c0                	test   al,al
c0012e02:	74 0f                	je     c0012e13 <Dbg::logs(char*)+0x1b>
c0012e04:	50                   	push   eax
c0012e05:	43                   	inc    ebx
c0012e06:	e8 d6 ff ff ff       	call   c0012de1 <Dbg::logc(char)>
c0012e0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e0e:	5a                   	pop    edx
c0012e0f:	84 c0                	test   al,al
c0012e11:	75 f1                	jne    c0012e04 <Dbg::logs(char*)+0xc>
c0012e13:	5b                   	pop    ebx
c0012e14:	c3                   	ret    

c0012e15 <Dbg::logWriteInt(unsigned int)>:
c0012e15:	83 ec 10             	sub    esp,0x10
c0012e18:	6a 0a                	push   0xa
c0012e1a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e1e:	50                   	push   eax
c0012e1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e23:	e8 58 ff ff ff       	call   c0012d80 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e28:	50                   	push   eax
c0012e29:	e8 ca ff ff ff       	call   c0012df8 <Dbg::logs(char*)>
c0012e2e:	83 c4 20             	add    esp,0x20
c0012e31:	c3                   	ret    

c0012e32 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e32:	83 ec 10             	sub    esp,0x10
c0012e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e39:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e3d:	50                   	push   eax
c0012e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e42:	e8 39 ff ff ff       	call   c0012d80 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e47:	50                   	push   eax
c0012e48:	e8 ab ff ff ff       	call   c0012df8 <Dbg::logs(char*)>
c0012e4d:	83 c4 20             	add    esp,0x20
c0012e50:	c3                   	ret    

c0012e51 <Dbg::kprintf(char const*, ...)>:
c0012e51:	55                   	push   ebp
c0012e52:	57                   	push   edi
c0012e53:	56                   	push   esi
c0012e54:	53                   	push   ebx
c0012e55:	83 ec 0c             	sub    esp,0xc
c0012e58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e64:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e67:	84 c0                	test   al,al
c0012e69:	74 4a                	je     c0012eb5 <Dbg::kprintf(char const*, ...)+0x64>
c0012e6b:	31 db                	xor    ebx,ebx
c0012e6d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e70:	3c 25                	cmp    al,0x25
c0012e72:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e75:	0f 85 e4 00 00 00    	jne    c0012f5f <Dbg::kprintf(char const*, ...)+0x10e>
c0012e7b:	83 c3 02             	add    ebx,0x2
c0012e7e:	8a 07                	mov    al,BYTE PTR [edi]
c0012e80:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e83:	83 e8 25             	sub    eax,0x25
c0012e86:	3c 53                	cmp    al,0x53
c0012e88:	0f 87 ba 00 00 00    	ja     c0012f48 <Dbg::kprintf(char const*, ...)+0xf7>
c0012e8e:	0f b6 c0             	movzx  eax,al
c0012e91:	ff 24 85 e0 b8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4720]
c0012e98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e9c:	89 c8                	mov    eax,ecx
c0012e9e:	83 c1 04             	add    ecx,0x4
c0012ea1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ea5:	ff 30                	push   DWORD PTR [eax]
c0012ea7:	e8 4c ff ff ff       	call   c0012df8 <Dbg::logs(char*)>
c0012eac:	58                   	pop    eax
c0012ead:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012eb1:	84 c0                	test   al,al
c0012eb3:	75 b8                	jne    c0012e6d <Dbg::kprintf(char const*, ...)+0x1c>
c0012eb5:	83 c4 0c             	add    esp,0xc
c0012eb8:	5b                   	pop    ebx
c0012eb9:	5e                   	pop    esi
c0012eba:	5f                   	pop    edi
c0012ebb:	5d                   	pop    ebp
c0012ebc:	c3                   	ret    
c0012ebd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ec1:	89 d0                	mov    eax,edx
c0012ec3:	83 c2 04             	add    edx,0x4
c0012ec6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eca:	ff 30                	push   DWORD PTR [eax]
c0012ecc:	e8 44 ff ff ff       	call   c0012e15 <Dbg::logWriteInt(unsigned int)>
c0012ed1:	58                   	pop    eax
c0012ed2:	eb d9                	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ed8:	89 d0                	mov    eax,edx
c0012eda:	83 c2 04             	add    edx,0x4
c0012edd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ee0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ee4:	50                   	push   eax
c0012ee5:	e8 f7 fe ff ff       	call   c0012de1 <Dbg::logc(char)>
c0012eea:	58                   	pop    eax
c0012eeb:	eb c0                	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012eed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef1:	89 c8                	mov    eax,ecx
c0012ef3:	83 c1 04             	add    ecx,0x4
c0012ef6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012efa:	ff 30                	push   DWORD PTR [eax]
c0012efc:	e8 14 ff ff ff       	call   c0012e15 <Dbg::logWriteInt(unsigned int)>
c0012f01:	5f                   	pop    edi
c0012f02:	eb a9                	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012f04:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f08:	89 c8                	mov    eax,ecx
c0012f0a:	83 c1 04             	add    ecx,0x4
c0012f0d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f11:	6a 10                	push   0x10
c0012f13:	ff 30                	push   DWORD PTR [eax]
c0012f15:	e8 18 ff ff ff       	call   c0012e32 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f1a:	59                   	pop    ecx
c0012f1b:	5f                   	pop    edi
c0012f1c:	eb 8f                	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012f1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f22:	89 d0                	mov    eax,edx
c0012f24:	83 c2 08             	add    edx,0x8
c0012f27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f2b:	6a 10                	push   0x10
c0012f2d:	ff 30                	push   DWORD PTR [eax]
c0012f2f:	e8 fe fe ff ff       	call   c0012e32 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f34:	58                   	pop    eax
c0012f35:	5a                   	pop    edx
c0012f36:	e9 72 ff ff ff       	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012f3b:	6a 25                	push   0x25
c0012f3d:	e8 9f fe ff ff       	call   c0012de1 <Dbg::logc(char)>
c0012f42:	58                   	pop    eax
c0012f43:	e9 65 ff ff ff       	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012f48:	6a 25                	push   0x25
c0012f4a:	e8 92 fe ff ff       	call   c0012de1 <Dbg::logc(char)>
c0012f4f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f52:	50                   	push   eax
c0012f53:	e8 89 fe ff ff       	call   c0012de1 <Dbg::logc(char)>
c0012f58:	5a                   	pop    edx
c0012f59:	59                   	pop    ecx
c0012f5a:	e9 4e ff ff ff       	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012f5f:	50                   	push   eax
c0012f60:	89 eb                	mov    ebx,ebp
c0012f62:	e8 7a fe ff ff       	call   c0012de1 <Dbg::logc(char)>
c0012f67:	89 fd                	mov    ebp,edi
c0012f69:	58                   	pop    eax
c0012f6a:	e9 3e ff ff ff       	jmp    c0012ead <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6f:	90                   	nop

c0012f70 <File::read(unsigned long long, void*, int*)>:
c0012f70:	53                   	push   ebx
c0012f71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f79:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f80:	3c 19                	cmp    al,0x19
c0012f82:	77 35                	ja     c0012fb9 <File::read(unsigned long long, void*, int*)+0x49>
c0012f84:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c0012f8b:	85 c0                	test   eax,eax
c0012f8d:	74 2a                	je     c0012fb9 <File::read(unsigned long long, void*, int*)+0x49>
c0012f8f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f95:	85 c0                	test   eax,eax
c0012f97:	74 20                	je     c0012fb9 <File::read(unsigned long long, void*, int*)+0x49>
c0012f99:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f9d:	74 21                	je     c0012fc0 <File::read(unsigned long long, void*, int*)+0x50>
c0012f9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fa1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fa5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012faf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fb3:	5b                   	pop    ebx
c0012fb4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fb7:	ff e0                	jmp    eax
c0012fb9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fbe:	eb 05                	jmp    c0012fc5 <File::read(unsigned long long, void*, int*)+0x55>
c0012fc0:	b8 05 00 00 00       	mov    eax,0x5
c0012fc5:	5b                   	pop    ebx
c0012fc6:	c3                   	ret    
c0012fc7:	90                   	nop

c0012fc8 <File::write(unsigned long long, void*, int*)>:
c0012fc8:	53                   	push   ebx
c0012fc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fcd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fd1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fd8:	3c 19                	cmp    al,0x19
c0012fda:	77 35                	ja     c0013011 <File::write(unsigned long long, void*, int*)+0x49>
c0012fdc:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c0012fe3:	85 c0                	test   eax,eax
c0012fe5:	74 2a                	je     c0013011 <File::write(unsigned long long, void*, int*)+0x49>
c0012fe7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fed:	85 c0                	test   eax,eax
c0012fef:	74 20                	je     c0013011 <File::write(unsigned long long, void*, int*)+0x49>
c0012ff1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff5:	74 21                	je     c0013018 <File::write(unsigned long long, void*, int*)+0x50>
c0012ff7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ff9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ffd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001300b:	5b                   	pop    ebx
c001300c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001300f:	ff e0                	jmp    eax
c0013011:	b8 0b 00 00 00       	mov    eax,0xb
c0013016:	eb 05                	jmp    c001301d <File::write(unsigned long long, void*, int*)+0x55>
c0013018:	b8 05 00 00 00       	mov    eax,0x5
c001301d:	5b                   	pop    ebx
c001301e:	c3                   	ret    
c001301f:	90                   	nop

c0013020 <Directory::read(unsigned long long, void*, int*)>:
c0013020:	53                   	push   ebx
c0013021:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013025:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013029:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013030:	3c 19                	cmp    al,0x19
c0013032:	77 35                	ja     c0013069 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013034:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001303b:	85 c0                	test   eax,eax
c001303d:	74 2a                	je     c0013069 <Directory::read(unsigned long long, void*, int*)+0x49>
c001303f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013045:	85 c0                	test   eax,eax
c0013047:	74 20                	je     c0013069 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013049:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001304d:	74 21                	je     c0013070 <Directory::read(unsigned long long, void*, int*)+0x50>
c001304f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013051:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013055:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001305b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001305f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013063:	5b                   	pop    ebx
c0013064:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013067:	ff e0                	jmp    eax
c0013069:	b8 0b 00 00 00       	mov    eax,0xb
c001306e:	eb 05                	jmp    c0013075 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013070:	b8 05 00 00 00       	mov    eax,0x5
c0013075:	5b                   	pop    ebx
c0013076:	c3                   	ret    
c0013077:	90                   	nop

c0013078 <Directory::write(unsigned long long, void*, int*)>:
c0013078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001307c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013083:	b8 0b 00 00 00       	mov    eax,0xb
c0013088:	80 fa 19             	cmp    dl,0x19
c001308b:	77 18                	ja     c00130a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001308d:	8b 14 95 80 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0480]
c0013094:	85 d2                	test   edx,edx
c0013096:	74 0d                	je     c00130a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013098:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001309f:	19 c0                	sbb    eax,eax
c00130a1:	83 e0 0a             	and    eax,0xa
c00130a4:	40                   	inc    eax
c00130a5:	c3                   	ret    

c00130a6 <File::isAtty()>:
c00130a6:	31 c0                	xor    eax,eax
c00130a8:	c3                   	ret    
c00130a9:	90                   	nop

c00130aa <Directory::isAtty()>:
c00130aa:	31 c0                	xor    eax,eax
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130ae:	b8 0a 00 00 00       	mov    eax,0xa
c00130b3:	c3                   	ret    

c00130b4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130b4:	b8 0a 00 00 00       	mov    eax,0xa
c00130b9:	c3                   	ret    

c00130ba <Filesystem::getFileFirstSector(char const*)>:
c00130ba:	31 c0                	xor    eax,eax
c00130bc:	31 d2                	xor    edx,edx
c00130be:	c3                   	ret    
c00130bf:	90                   	nop

c00130c0 <File::~File()>:
c00130c0:	83 ec 0c             	sub    esp,0xc
c00130c3:	ba a0 ba 02 c0       	mov    edx,0xc002baa0
c00130c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cc:	89 10                	mov    DWORD PTR [eax],edx
c00130ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	50                   	push   eax
c00130d6:	e8 f5 e6 ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	90                   	nop
c00130df:	83 c4 0c             	add    esp,0xc
c00130e2:	c3                   	ret    
c00130e3:	90                   	nop

c00130e4 <File::~File()>:
c00130e4:	83 ec 0c             	sub    esp,0xc
c00130e7:	83 ec 0c             	sub    esp,0xc
c00130ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ee:	e8 cd ff ff ff       	call   c00130c0 <File::~File()>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	83 ec 08             	sub    esp,0x8
c00130f9:	68 14 01 00 00       	push   0x114
c00130fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013102:	e8 6a fc ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0013107:	83 c4 10             	add    esp,0x10
c001310a:	83 c4 0c             	add    esp,0xc
c001310d:	c3                   	ret    

c001310e <Directory::~Directory()>:
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0013116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311a:	89 10                	mov    DWORD PTR [eax],edx
c001311c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	50                   	push   eax
c0013124:	e8 a7 e6 ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c0013129:	83 c4 10             	add    esp,0x10
c001312c:	90                   	nop
c001312d:	83 c4 0c             	add    esp,0xc
c0013130:	c3                   	ret    
c0013131:	90                   	nop

c0013132 <Directory::~Directory()>:
c0013132:	83 ec 0c             	sub    esp,0xc
c0013135:	83 ec 0c             	sub    esp,0xc
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 cd ff ff ff       	call   c001310e <Directory::~Directory()>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 ec 08             	sub    esp,0x8
c0013147:	68 14 01 00 00       	push   0x114
c001314c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013150:	e8 1c fc ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	83 c4 0c             	add    esp,0xc
c001315b:	c3                   	ret    

c001315c <Filesystem::Filesystem()>:
c001315c:	ba 38 ba 02 c0       	mov    edx,0xc002ba38
c0013161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013165:	89 10                	mov    DWORD PTR [eax],edx
c0013167:	8b 15 f4 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6f4
c001316d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013171:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013178:	a3 f4 f6 02 c0       	mov    ds:0xc002f6f4,eax
c001317d:	90                   	nop
c001317e:	c3                   	ret    
c001317f:	90                   	nop

c0013180 <Filesystem::~Filesystem()>:
c0013180:	ba 38 ba 02 c0       	mov    edx,0xc002ba38
c0013185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013189:	89 10                	mov    DWORD PTR [eax],edx
c001318b:	90                   	nop
c001318c:	c3                   	ret    
c001318d:	90                   	nop

c001318e <Filesystem::~Filesystem()>:
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013195:	e8 e6 ff ff ff       	call   c0013180 <Filesystem::~Filesystem()>
c001319a:	83 c4 04             	add    esp,0x4
c001319d:	83 ec 08             	sub    esp,0x8
c00131a0:	6a 08                	push   0x8
c00131a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a6:	e8 c6 fb ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	83 c4 0c             	add    esp,0xc
c00131b1:	c3                   	ret    

c00131b2 <Fs::getcwd(Process*, char*, int)>:
c00131b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131b6:	31 c0                	xor    eax,eax
c00131b8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131bb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131bf:	7d 15                	jge    c00131d6 <Fs::getcwd(Process*, char*, int)+0x24>
c00131c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131c5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131cc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131cf:	84 c9                	test   cl,cl
c00131d1:	74 06                	je     c00131d9 <Fs::getcwd(Process*, char*, int)+0x27>
c00131d3:	40                   	inc    eax
c00131d4:	eb e2                	jmp    c00131b8 <Fs::getcwd(Process*, char*, int)+0x6>
c00131d6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131d9:	31 c0                	xor    eax,eax
c00131db:	c3                   	ret    

c00131dc <Fs::initVFS()>:
c00131dc:	83 ec 18             	sub    esp,0x18
c00131df:	6a 08                	push   0x8
c00131e1:	e8 a6 c6 ff ff       	call   c000f88c <malloc>
c00131e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00131e9:	e8 94 e7 00 00       	call   c0021982 <FAT::FAT()>
c00131ee:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131f5:	e8 92 c6 ff ff       	call   c000f88c <malloc>
c00131fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00131fd:	e8 bc f9 00 00       	call   c0022bbe <ISO9660::ISO9660()>
c0013202:	83 c4 1c             	add    esp,0x1c
c0013205:	c3                   	ret    

c0013206 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013206:	55                   	push   ebp
c0013207:	57                   	push   edi
c0013208:	56                   	push   esi
c0013209:	53                   	push   ebx
c001320a:	81 ec 10 04 00 00    	sub    esp,0x410
c0013210:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013217:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001321e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013225:	68 00 04 00 00       	push   0x400
c001322a:	6a 00                	push   0x0
c001322c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013230:	56                   	push   esi
c0013231:	e8 1a d5 fe ff       	call   c0000750 <memset>
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001323d:	75 0b                	jne    c001324a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001323f:	50                   	push   eax
c0013240:	50                   	push   eax
c0013241:	57                   	push   edi
c0013242:	56                   	push   esi
c0013243:	e8 c4 d5 fe ff       	call   c000080c <strcpy>
c0013248:	eb 41                	jmp    c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001324a:	8a 07                	mov    al,BYTE PTR [edi]
c001324c:	3c 5c                	cmp    al,0x5c
c001324e:	74 04                	je     c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013250:	3c 2f                	cmp    al,0x2f
c0013252:	75 18                	jne    c001326c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013254:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013257:	3c 60                	cmp    al,0x60
c0013259:	7e 03                	jle    c001325e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001325b:	83 e8 20             	sub    eax,0x20
c001325e:	88 04 24             	mov    BYTE PTR [esp],al
c0013261:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013268:	50                   	push   eax
c0013269:	50                   	push   eax
c001326a:	eb 18                	jmp    c0013284 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001326c:	50                   	push   eax
c001326d:	50                   	push   eax
c001326e:	55                   	push   ebp
c001326f:	56                   	push   esi
c0013270:	e8 97 d5 fe ff       	call   c000080c <strcpy>
c0013275:	5a                   	pop    edx
c0013276:	59                   	pop    ecx
c0013277:	68 89 d2 02 c0       	push   0xc002d289
c001327c:	56                   	push   esi
c001327d:	e8 ca d6 fe ff       	call   c000094c <strcat>
c0013282:	5d                   	pop    ebp
c0013283:	58                   	pop    eax
c0013284:	57                   	push   edi
c0013285:	56                   	push   esi
c0013286:	e8 c1 d6 fe ff       	call   c000094c <strcat>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013291:	3c 60                	cmp    al,0x60
c0013293:	7e 03                	jle    c0013298 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013295:	83 e8 20             	sub    eax,0x20
c0013298:	88 04 24             	mov    BYTE PTR [esp],al
c001329b:	88 03                	mov    BYTE PTR [ebx],al
c001329d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132a4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132ae:	bf 03 00 00 00       	mov    edi,0x3
c00132b3:	b8 03 00 00 00       	mov    eax,0x3
c00132b8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132bb:	84 d2                	test   dl,dl
c00132bd:	0f 84 91 00 00 00    	je     c0013354 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132c3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132c6:	80 fa 5c             	cmp    dl,0x5c
c00132c9:	74 05                	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132cb:	80 fa 2f             	cmp    dl,0x2f
c00132ce:	75 12                	jne    c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132d0:	89 c5                	mov    ebp,eax
c00132d2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132d7:	74 09                	je     c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132d9:	40                   	inc    eax
c00132da:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132de:	89 cf                	mov    edi,ecx
c00132e0:	eb d6                	jmp    c00132b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132e2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132e7:	75 5b                	jne    c0013344 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132e9:	80 fa 2e             	cmp    dl,0x2e
c00132ec:	75 56                	jne    c0013344 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132ee:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132f2:	74 19                	je     c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132f4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132f9:	74 53                	je     c001334e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132fb:	89 f9                	mov    ecx,edi
c00132fd:	41                   	inc    ecx
c00132fe:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013301:	80 fa 2f             	cmp    dl,0x2f
c0013304:	74 f7                	je     c00132fd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013306:	80 fa 5c             	cmp    dl,0x5c
c0013309:	74 f2                	je     c00132fd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001330b:	eb d1                	jmp    c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001330d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013312:	74 3a                	je     c001334e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013314:	83 f8 03             	cmp    eax,0x3
c0013317:	74 c5                	je     c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013319:	41                   	inc    ecx
c001331a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001331d:	80 fa 2f             	cmp    dl,0x2f
c0013320:	74 f7                	je     c0013319 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013322:	80 fa 5c             	cmp    dl,0x5c
c0013325:	74 f2                	je     c0013319 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013327:	48                   	dec    eax
c0013328:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001332c:	75 06                	jne    c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001332e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013332:	eb f3                	jmp    c0013327 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013334:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013338:	74 07                	je     c0013341 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001333a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001333e:	48                   	dec    eax
c001333f:	eb f3                	jmp    c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013341:	40                   	inc    eax
c0013342:	eb 9a                	jmp    c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013344:	80 fa 2f             	cmp    dl,0x2f
c0013347:	74 95                	je     c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013349:	80 fa 5c             	cmp    dl,0x5c
c001334c:	74 90                	je     c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001334e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013351:	40                   	inc    eax
c0013352:	eb 8a                	jmp    c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013354:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013358:	83 ec 0c             	sub    esp,0xc
c001335b:	53                   	push   ebx
c001335c:	e8 0b d4 fe ff       	call   c000076c <strlen>
c0013361:	83 c4 10             	add    esp,0x10
c0013364:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013369:	75 26                	jne    c0013391 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001336b:	83 ec 0c             	sub    esp,0xc
c001336e:	53                   	push   ebx
c001336f:	e8 f8 d3 fe ff       	call   c000076c <strlen>
c0013374:	83 c4 10             	add    esp,0x10
c0013377:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001337c:	74 26                	je     c00133a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001337e:	83 ec 0c             	sub    esp,0xc
c0013381:	53                   	push   ebx
c0013382:	e8 e5 d3 fe ff       	call   c000076c <strlen>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001338f:	eb c7                	jmp    c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013391:	83 ec 0c             	sub    esp,0xc
c0013394:	53                   	push   ebx
c0013395:	e8 d2 d3 fe ff       	call   c000076c <strlen>
c001339a:	83 c4 10             	add    esp,0x10
c001339d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133a2:	74 c7                	je     c001336b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133a4:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133aa:	5b                   	pop    ebx
c00133ab:	5e                   	pop    esi
c00133ac:	5f                   	pop    edi
c00133ad:	5d                   	pop    ebp
c00133ae:	c3                   	ret    
c00133af:	90                   	nop

c00133b0 <File::File(char const*, Process*)>:
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b7:	83 ec 08             	sub    esp,0x8
c00133ba:	6a 00                	push   0x0
c00133bc:	50                   	push   eax
c00133bd:	e8 2c e2 ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c00133c2:	83 c4 10             	add    esp,0x10
c00133c5:	ba a0 ba 02 c0       	mov    edx,0xc002baa0
c00133ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ce:	89 10                	mov    DWORD PTR [eax],edx
c00133d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133de:	83 c0 0d             	add    eax,0xd
c00133e1:	83 ec 04             	sub    esp,0x4
c00133e4:	52                   	push   edx
c00133e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e9:	50                   	push   eax
c00133ea:	e8 17 fe ff ff       	call   c0013206 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133f9:	8d 50 bf             	lea    edx,[eax-0x41]
c00133fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013400:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001340e:	90                   	nop
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <File::open(FileOpenMode)>:
c0013414:	53                   	push   ebx
c0013415:	b8 0b 00 00 00       	mov    eax,0xb
c001341a:	83 ec 08             	sub    esp,0x8
c001341d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013421:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013428:	80 fa 19             	cmp    dl,0x19
c001342b:	77 40                	ja     c001346d <File::open(FileOpenMode)+0x59>
c001342d:	8b 14 95 80 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0480]
c0013434:	85 d2                	test   edx,edx
c0013436:	74 35                	je     c001346d <File::open(FileOpenMode)+0x59>
c0013438:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001343e:	85 d2                	test   edx,edx
c0013440:	74 2b                	je     c001346d <File::open(FileOpenMode)+0x59>
c0013442:	b8 06 00 00 00       	mov    eax,0x6
c0013447:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001344b:	75 20                	jne    c001346d <File::open(FileOpenMode)+0x59>
c001344d:	8b 02                	mov    eax,DWORD PTR [edx]
c001344f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013459:	51                   	push   ecx
c001345a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001345d:	51                   	push   ecx
c001345e:	52                   	push   edx
c001345f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	85 c0                	test   eax,eax
c0013467:	75 04                	jne    c001346d <File::open(FileOpenMode)+0x59>
c0013469:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001346d:	83 c4 08             	add    esp,0x8
c0013470:	5b                   	pop    ebx
c0013471:	c3                   	ret    

c0013472 <File::close()>:
c0013472:	53                   	push   ebx
c0013473:	b8 0b 00 00 00       	mov    eax,0xb
c0013478:	83 ec 08             	sub    esp,0x8
c001347b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001347f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013486:	80 fa 19             	cmp    dl,0x19
c0013489:	77 41                	ja     c00134cc <File::close()+0x5a>
c001348b:	8b 1c 95 80 fb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0480]
c0013492:	85 db                	test   ebx,ebx
c0013494:	74 36                	je     c00134cc <File::close()+0x5a>
c0013496:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001349d:	74 2d                	je     c00134cc <File::close()+0x5a>
c001349f:	b8 05 00 00 00       	mov    eax,0x5
c00134a4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134a8:	74 22                	je     c00134cc <File::close()+0x5a>
c00134aa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134ae:	8b 04 95 80 fb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0480]
c00134b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134bb:	53                   	push   ebx
c00134bc:	53                   	push   ebx
c00134bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00134bf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134c5:	50                   	push   eax
c00134c6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	83 c4 08             	add    esp,0x8
c00134cf:	5b                   	pop    ebx
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <File::seek(unsigned long long)>:
c00134d2:	56                   	push   esi
c00134d3:	53                   	push   ebx
c00134d4:	b8 0b 00 00 00       	mov    eax,0xb
c00134d9:	51                   	push   ecx
c00134da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134e2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134ed:	80 fa 19             	cmp    dl,0x19
c00134f0:	77 31                	ja     c0013523 <File::seek(unsigned long long)+0x51>
c00134f2:	8b 14 95 80 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0480]
c00134f9:	85 d2                	test   edx,edx
c00134fb:	74 26                	je     c0013523 <File::seek(unsigned long long)+0x51>
c00134fd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013503:	85 d2                	test   edx,edx
c0013505:	74 1c                	je     c0013523 <File::seek(unsigned long long)+0x51>
c0013507:	b8 05 00 00 00       	mov    eax,0x5
c001350c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013510:	74 11                	je     c0013523 <File::seek(unsigned long long)+0x51>
c0013512:	8b 02                	mov    eax,DWORD PTR [edx]
c0013514:	53                   	push   ebx
c0013515:	51                   	push   ecx
c0013516:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001351c:	52                   	push   edx
c001351d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	5a                   	pop    edx
c0013524:	5b                   	pop    ebx
c0013525:	5e                   	pop    esi
c0013526:	c3                   	ret    
c0013527:	90                   	nop

c0013528 <File::tell(unsigned long long*)>:
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	b8 0b 00 00 00       	mov    eax,0xb
c0013530:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013534:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001353b:	80 fa 19             	cmp    dl,0x19
c001353e:	77 34                	ja     c0013574 <File::tell(unsigned long long*)+0x4c>
c0013540:	8b 14 95 80 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0480]
c0013547:	85 d2                	test   edx,edx
c0013549:	74 29                	je     c0013574 <File::tell(unsigned long long*)+0x4c>
c001354b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013551:	85 d2                	test   edx,edx
c0013553:	74 1f                	je     c0013574 <File::tell(unsigned long long*)+0x4c>
c0013555:	b8 05 00 00 00       	mov    eax,0x5
c001355a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001355e:	74 14                	je     c0013574 <File::tell(unsigned long long*)+0x4c>
c0013560:	50                   	push   eax
c0013561:	8b 02                	mov    eax,DWORD PTR [edx]
c0013563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013567:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001356d:	52                   	push   edx
c001356e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013571:	83 c4 10             	add    esp,0x10
c0013574:	83 c4 0c             	add    esp,0xc
c0013577:	c3                   	ret    

c0013578 <File::rewind()>:
c0013578:	83 ec 10             	sub    esp,0x10
c001357b:	6a 00                	push   0x0
c001357d:	6a 00                	push   0x0
c001357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013583:	e8 4a ff ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c0013588:	83 c4 1c             	add    esp,0x1c
c001358b:	c3                   	ret    

c001358c <File::unlink()>:
c001358c:	83 ec 0c             	sub    esp,0xc
c001358f:	b8 0b 00 00 00       	mov    eax,0xb
c0013594:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013598:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001359f:	80 f9 19             	cmp    cl,0x19
c00135a2:	77 2f                	ja     c00135d3 <File::unlink()+0x47>
c00135a4:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c00135ab:	85 c9                	test   ecx,ecx
c00135ad:	74 24                	je     c00135d3 <File::unlink()+0x47>
c00135af:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135b5:	85 c9                	test   ecx,ecx
c00135b7:	74 1a                	je     c00135d3 <File::unlink()+0x47>
c00135b9:	b8 06 00 00 00       	mov    eax,0x6
c00135be:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135c2:	75 0f                	jne    c00135d3 <File::unlink()+0x47>
c00135c4:	83 c2 0d             	add    edx,0xd
c00135c7:	50                   	push   eax
c00135c8:	50                   	push   eax
c00135c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135cb:	52                   	push   edx
c00135cc:	51                   	push   ecx
c00135cd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	83 c4 0c             	add    esp,0xc
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <File::rename(char const*)>:
c00135d8:	83 ec 0c             	sub    esp,0xc
c00135db:	b8 0b 00 00 00       	mov    eax,0xb
c00135e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135eb:	80 f9 19             	cmp    cl,0x19
c00135ee:	77 32                	ja     c0013622 <File::rename(char const*)+0x4a>
c00135f0:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c00135f7:	85 c9                	test   ecx,ecx
c00135f9:	74 27                	je     c0013622 <File::rename(char const*)+0x4a>
c00135fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013601:	85 c9                	test   ecx,ecx
c0013603:	74 1d                	je     c0013622 <File::rename(char const*)+0x4a>
c0013605:	b8 06 00 00 00       	mov    eax,0x6
c001360a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001360e:	75 12                	jne    c0013622 <File::rename(char const*)+0x4a>
c0013610:	83 c2 0d             	add    edx,0xd
c0013613:	50                   	push   eax
c0013614:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013616:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001361a:	52                   	push   edx
c001361b:	51                   	push   ecx
c001361c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	83 c4 0c             	add    esp,0xc
c0013625:	c3                   	ret    

c0013626 <File::chfatattr(unsigned char, unsigned char)>:
c0013626:	57                   	push   edi
c0013627:	b8 0b 00 00 00       	mov    eax,0xb
c001362c:	56                   	push   esi
c001362d:	53                   	push   ebx
c001362e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013632:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013636:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001363d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013641:	80 f9 19             	cmp    cl,0x19
c0013644:	77 37                	ja     c001367d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013646:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c001364d:	85 c9                	test   ecx,ecx
c001364f:	74 2c                	je     c001367d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013651:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013657:	85 c9                	test   ecx,ecx
c0013659:	74 22                	je     c001367d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001365b:	b8 06 00 00 00       	mov    eax,0x6
c0013660:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013664:	75 17                	jne    c001367d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013666:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013668:	89 f0                	mov    eax,esi
c001366a:	83 c2 0d             	add    edx,0xd
c001366d:	0f b6 f0             	movzx  esi,al
c0013670:	0f b6 db             	movzx  ebx,bl
c0013673:	56                   	push   esi
c0013674:	53                   	push   ebx
c0013675:	52                   	push   edx
c0013676:	51                   	push   ecx
c0013677:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001367a:	83 c4 10             	add    esp,0x10
c001367d:	5b                   	pop    ebx
c001367e:	5e                   	pop    esi
c001367f:	5f                   	pop    edi
c0013680:	c3                   	ret    
c0013681:	90                   	nop

c0013682 <File::exists()>:
c0013682:	83 ec 0c             	sub    esp,0xc
c0013685:	31 c0                	xor    eax,eax
c0013687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013692:	80 f9 19             	cmp    cl,0x19
c0013695:	77 24                	ja     c00136bb <File::exists()+0x39>
c0013697:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c001369e:	85 c9                	test   ecx,ecx
c00136a0:	74 19                	je     c00136bb <File::exists()+0x39>
c00136a2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a8:	85 c9                	test   ecx,ecx
c00136aa:	74 0f                	je     c00136bb <File::exists()+0x39>
c00136ac:	83 c2 0d             	add    edx,0xd
c00136af:	50                   	push   eax
c00136b0:	50                   	push   eax
c00136b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b3:	52                   	push   edx
c00136b4:	51                   	push   ecx
c00136b5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	83 c4 0c             	add    esp,0xc
c00136be:	c3                   	ret    
c00136bf:	90                   	nop

c00136c0 <File::stat(unsigned long long*, bool*)>:
c00136c0:	56                   	push   esi
c00136c1:	53                   	push   ebx
c00136c2:	50                   	push   eax
c00136c3:	b8 0b 00 00 00       	mov    eax,0xb
c00136c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136db:	80 f9 19             	cmp    cl,0x19
c00136de:	77 3d                	ja     c001371d <File::stat(unsigned long long*, bool*)+0x5d>
c00136e0:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c00136e7:	85 c9                	test   ecx,ecx
c00136e9:	74 32                	je     c001371d <File::stat(unsigned long long*, bool*)+0x5d>
c00136eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f1:	85 c9                	test   ecx,ecx
c00136f3:	74 28                	je     c001371d <File::stat(unsigned long long*, bool*)+0x5d>
c00136f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136fb:	74 13                	je     c0013710 <File::stat(unsigned long long*, bool*)+0x50>
c00136fd:	83 ec 04             	sub    esp,0x4
c0013700:	56                   	push   esi
c0013701:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013707:	51                   	push   ecx
c0013708:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001370b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001370e:	eb 0a                	jmp    c001371a <File::stat(unsigned long long*, bool*)+0x5a>
c0013710:	53                   	push   ebx
c0013711:	83 c2 0d             	add    edx,0xd
c0013714:	56                   	push   esi
c0013715:	52                   	push   edx
c0013716:	51                   	push   ecx
c0013717:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	5a                   	pop    edx
c001371e:	5b                   	pop    ebx
c001371f:	5e                   	pop    esi
c0013720:	c3                   	ret    

c0013721 <Fs::setcwd(Process*, char*)>:
c0013721:	55                   	push   ebp
c0013722:	57                   	push   edi
c0013723:	56                   	push   esi
c0013724:	53                   	push   ebx
c0013725:	81 ec 20 02 00 00    	sub    esp,0x220
c001372b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013732:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013738:	57                   	push   edi
c0013739:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013740:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013744:	56                   	push   esi
c0013745:	e8 bc fa ff ff       	call   c0013206 <Fs::standardiseFiles(char*, char const*, char const*)>
c001374a:	89 34 24             	mov    DWORD PTR [esp],esi
c001374d:	e8 1a d0 fe ff       	call   c000076c <strlen>
c0013752:	83 c4 10             	add    esp,0x10
c0013755:	83 f8 02             	cmp    eax,0x2
c0013758:	77 17                	ja     c0013771 <Fs::setcwd(Process*, char*)+0x50>
c001375a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001375f:	83 e8 41             	sub    eax,0x41
c0013762:	83 f8 19             	cmp    eax,0x19
c0013765:	76 24                	jbe    c001378b <Fs::setcwd(Process*, char*)+0x6a>
c0013767:	b8 03 00 00 00       	mov    eax,0x3
c001376c:	e9 e0 00 00 00       	jmp    c0013851 <Fs::setcwd(Process*, char*)+0x130>
c0013771:	83 ec 0c             	sub    esp,0xc
c0013774:	56                   	push   esi
c0013775:	e8 f2 cf fe ff       	call   c000076c <strlen>
c001377a:	83 c4 10             	add    esp,0x10
c001377d:	83 f8 03             	cmp    eax,0x3
c0013780:	75 34                	jne    c00137b6 <Fs::setcwd(Process*, char*)+0x95>
c0013782:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013787:	75 2d                	jne    c00137b6 <Fs::setcwd(Process*, char*)+0x95>
c0013789:	eb cf                	jmp    c001375a <Fs::setcwd(Process*, char*)+0x39>
c001378b:	8b 14 85 80 fb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0480]
c0013792:	b8 05 00 00 00       	mov    eax,0x5
c0013797:	85 d2                	test   edx,edx
c0013799:	0f 84 b2 00 00 00    	je     c0013851 <Fs::setcwd(Process*, char*)+0x130>
c001379f:	b8 06 00 00 00       	mov    eax,0x6
c00137a4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137ab:	0f 85 92 00 00 00    	jne    c0013843 <Fs::setcwd(Process*, char*)+0x122>
c00137b1:	e9 9b 00 00 00       	jmp    c0013851 <Fs::setcwd(Process*, char*)+0x130>
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	68 14 01 00 00       	push   0x114
c00137be:	e8 c9 c0 ff ff       	call   c000f88c <malloc>
c00137c3:	83 c4 0c             	add    esp,0xc
c00137c6:	89 c3                	mov    ebx,eax
c00137c8:	55                   	push   ebp
c00137c9:	56                   	push   esi
c00137ca:	50                   	push   eax
c00137cb:	e8 e0 fb ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c00137d0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137d5:	83 c4 0c             	add    esp,0xc
c00137d8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137dc:	50                   	push   eax
c00137dd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137e1:	50                   	push   eax
c00137e2:	53                   	push   ebx
c00137e3:	e8 d8 fe ff ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	83 f8 02             	cmp    eax,0x2
c00137ee:	74 04                	je     c00137f4 <Fs::setcwd(Process*, char*)+0xd3>
c00137f0:	85 c0                	test   eax,eax
c00137f2:	74 1c                	je     c0013810 <Fs::setcwd(Process*, char*)+0xef>
c00137f4:	b8 01 00 00 00       	mov    eax,0x1
c00137f9:	85 db                	test   ebx,ebx
c00137fb:	74 54                	je     c0013851 <Fs::setcwd(Process*, char*)+0x130>
c00137fd:	83 ec 0c             	sub    esp,0xc
c0013800:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013802:	53                   	push   ebx
c0013803:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	b8 01 00 00 00       	mov    eax,0x1
c001380e:	eb 41                	jmp    c0013851 <Fs::setcwd(Process*, char*)+0x130>
c0013810:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013815:	75 1c                	jne    c0013833 <Fs::setcwd(Process*, char*)+0x112>
c0013817:	b8 02 00 00 00       	mov    eax,0x2
c001381c:	85 db                	test   ebx,ebx
c001381e:	74 31                	je     c0013851 <Fs::setcwd(Process*, char*)+0x130>
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013825:	53                   	push   ebx
c0013826:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013829:	83 c4 10             	add    esp,0x10
c001382c:	b8 02 00 00 00       	mov    eax,0x2
c0013831:	eb 1e                	jmp    c0013851 <Fs::setcwd(Process*, char*)+0x130>
c0013833:	85 db                	test   ebx,ebx
c0013835:	74 0c                	je     c0013843 <Fs::setcwd(Process*, char*)+0x122>
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383c:	53                   	push   ebx
c001383d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	50                   	push   eax
c0013844:	50                   	push   eax
c0013845:	56                   	push   esi
c0013846:	57                   	push   edi
c0013847:	e8 c0 cf fe ff       	call   c000080c <strcpy>
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	31 c0                	xor    eax,eax
c0013851:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013857:	5b                   	pop    ebx
c0013858:	5e                   	pop    esi
c0013859:	5f                   	pop    edi
c001385a:	5d                   	pop    ebp
c001385b:	c3                   	ret    

c001385c <Directory::Directory(char const*, Process*)>:
c001385c:	83 ec 0c             	sub    esp,0xc
c001385f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013863:	83 ec 08             	sub    esp,0x8
c0013866:	6a 00                	push   0x0
c0013868:	50                   	push   eax
c0013869:	e8 80 dd ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	89 10                	mov    DWORD PTR [eax],edx
c001387c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013880:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388a:	83 c0 0d             	add    eax,0xd
c001388d:	83 ec 04             	sub    esp,0x4
c0013890:	52                   	push   edx
c0013891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013895:	50                   	push   eax
c0013896:	e8 6b f9 ff ff       	call   c0013206 <Fs::standardiseFiles(char*, char const*, char const*)>
c001389b:	83 c4 10             	add    esp,0x10
c001389e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138a5:	8d 50 bf             	lea    edx,[eax-0x41]
c00138a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ac:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138ba:	90                   	nop
c00138bb:	83 c4 0c             	add    esp,0xc
c00138be:	c3                   	ret    
c00138bf:	90                   	nop

c00138c0 <Directory::open()>:
c00138c0:	53                   	push   ebx
c00138c1:	b8 0b 00 00 00       	mov    eax,0xb
c00138c6:	83 ec 08             	sub    esp,0x8
c00138c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138cd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138d4:	80 fa 19             	cmp    dl,0x19
c00138d7:	77 3d                	ja     c0013916 <Directory::open()+0x56>
c00138d9:	8b 14 95 80 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0480]
c00138e0:	85 d2                	test   edx,edx
c00138e2:	74 32                	je     c0013916 <Directory::open()+0x56>
c00138e4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138ea:	85 d2                	test   edx,edx
c00138ec:	74 28                	je     c0013916 <Directory::open()+0x56>
c00138ee:	b8 06 00 00 00       	mov    eax,0x6
c00138f3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138f7:	75 1d                	jne    c0013916 <Directory::open()+0x56>
c00138f9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138ff:	50                   	push   eax
c0013900:	8b 02                	mov    eax,DWORD PTR [edx]
c0013902:	51                   	push   ecx
c0013903:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013906:	51                   	push   ecx
c0013907:	52                   	push   edx
c0013908:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001390b:	83 c4 10             	add    esp,0x10
c001390e:	85 c0                	test   eax,eax
c0013910:	75 04                	jne    c0013916 <Directory::open()+0x56>
c0013912:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013916:	83 c4 08             	add    esp,0x8
c0013919:	5b                   	pop    ebx
c001391a:	c3                   	ret    
c001391b:	90                   	nop

c001391c <Directory::close()>:
c001391c:	53                   	push   ebx
c001391d:	b8 0b 00 00 00       	mov    eax,0xb
c0013922:	83 ec 08             	sub    esp,0x8
c0013925:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013929:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013930:	80 fa 19             	cmp    dl,0x19
c0013933:	77 41                	ja     c0013976 <Directory::close()+0x5a>
c0013935:	8b 1c 95 80 fb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0480]
c001393c:	85 db                	test   ebx,ebx
c001393e:	74 36                	je     c0013976 <Directory::close()+0x5a>
c0013940:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013947:	74 2d                	je     c0013976 <Directory::close()+0x5a>
c0013949:	b8 05 00 00 00       	mov    eax,0x5
c001394e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013952:	74 22                	je     c0013976 <Directory::close()+0x5a>
c0013954:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013958:	8b 04 95 80 fb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0480]
c001395f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013965:	53                   	push   ebx
c0013966:	53                   	push   ebx
c0013967:	8b 10                	mov    edx,DWORD PTR [eax]
c0013969:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001396f:	50                   	push   eax
c0013970:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013973:	83 c4 10             	add    esp,0x10
c0013976:	83 c4 08             	add    esp,0x8
c0013979:	5b                   	pop    ebx
c001397a:	c3                   	ret    
c001397b:	90                   	nop

c001397c <Directory::unlink()>:
c001397c:	83 ec 0c             	sub    esp,0xc
c001397f:	b8 0b 00 00 00       	mov    eax,0xb
c0013984:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013988:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001398f:	80 f9 19             	cmp    cl,0x19
c0013992:	77 2f                	ja     c00139c3 <Directory::unlink()+0x47>
c0013994:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c001399b:	85 c9                	test   ecx,ecx
c001399d:	74 24                	je     c00139c3 <Directory::unlink()+0x47>
c001399f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139a5:	85 c9                	test   ecx,ecx
c00139a7:	74 1a                	je     c00139c3 <Directory::unlink()+0x47>
c00139a9:	b8 06 00 00 00       	mov    eax,0x6
c00139ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139b2:	75 0f                	jne    c00139c3 <Directory::unlink()+0x47>
c00139b4:	83 c2 0d             	add    edx,0xd
c00139b7:	50                   	push   eax
c00139b8:	50                   	push   eax
c00139b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139bb:	52                   	push   edx
c00139bc:	51                   	push   ecx
c00139bd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	83 c4 0c             	add    esp,0xc
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <Directory::rename(char const*)>:
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	b8 0b 00 00 00       	mov    eax,0xb
c00139d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139db:	80 f9 19             	cmp    cl,0x19
c00139de:	77 32                	ja     c0013a12 <Directory::rename(char const*)+0x4a>
c00139e0:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c00139e7:	85 c9                	test   ecx,ecx
c00139e9:	74 27                	je     c0013a12 <Directory::rename(char const*)+0x4a>
c00139eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139f1:	85 c9                	test   ecx,ecx
c00139f3:	74 1d                	je     c0013a12 <Directory::rename(char const*)+0x4a>
c00139f5:	b8 06 00 00 00       	mov    eax,0x6
c00139fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139fe:	75 12                	jne    c0013a12 <Directory::rename(char const*)+0x4a>
c0013a00:	83 c2 0d             	add    edx,0xd
c0013a03:	50                   	push   eax
c0013a04:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0a:	52                   	push   edx
c0013a0b:	51                   	push   ecx
c0013a0c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	83 c4 0c             	add    esp,0xc
c0013a15:	c3                   	ret    

c0013a16 <Directory::exists()>:
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	31 c0                	xor    eax,eax
c0013a1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a1f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a26:	80 f9 19             	cmp    cl,0x19
c0013a29:	77 24                	ja     c0013a4f <Directory::exists()+0x39>
c0013a2b:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c0013a32:	85 c9                	test   ecx,ecx
c0013a34:	74 19                	je     c0013a4f <Directory::exists()+0x39>
c0013a36:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3c:	85 c9                	test   ecx,ecx
c0013a3e:	74 0f                	je     c0013a4f <Directory::exists()+0x39>
c0013a40:	83 c2 0d             	add    edx,0xd
c0013a43:	50                   	push   eax
c0013a44:	50                   	push   eax
c0013a45:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a47:	52                   	push   edx
c0013a48:	51                   	push   ecx
c0013a49:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a4c:	83 c4 10             	add    esp,0x10
c0013a4f:	83 c4 0c             	add    esp,0xc
c0013a52:	c3                   	ret    
c0013a53:	90                   	nop

c0013a54 <Directory::read(dirent*)>:
c0013a54:	83 ec 1c             	sub    esp,0x1c
c0013a57:	b8 0b 00 00 00       	mov    eax,0xb
c0013a5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a60:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a67:	80 fa 19             	cmp    dl,0x19
c0013a6a:	77 30                	ja     c0013a9c <Directory::read(dirent*)+0x48>
c0013a6c:	8b 14 95 80 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0480]
c0013a73:	85 d2                	test   edx,edx
c0013a75:	74 25                	je     c0013a9c <Directory::read(dirent*)+0x48>
c0013a77:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a7e:	74 1c                	je     c0013a9c <Directory::read(dirent*)+0x48>
c0013a80:	83 ec 0c             	sub    esp,0xc
c0013a83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a85:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a89:	52                   	push   edx
c0013a8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a8e:	6a 00                	push   0x0
c0013a90:	68 10 01 00 00       	push   0x110
c0013a95:	51                   	push   ecx
c0013a96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a99:	83 c4 20             	add    esp,0x20
c0013a9c:	83 c4 1c             	add    esp,0x1c
c0013a9f:	c3                   	ret    

c0013aa0 <Directory::create()>:
c0013aa0:	83 ec 0c             	sub    esp,0xc
c0013aa3:	b8 0b 00 00 00       	mov    eax,0xb
c0013aa8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ab3:	80 f9 19             	cmp    cl,0x19
c0013ab6:	77 2f                	ja     c0013ae7 <Directory::create()+0x47>
c0013ab8:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c0013abf:	85 c9                	test   ecx,ecx
c0013ac1:	74 24                	je     c0013ae7 <Directory::create()+0x47>
c0013ac3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ac9:	85 c9                	test   ecx,ecx
c0013acb:	74 1a                	je     c0013ae7 <Directory::create()+0x47>
c0013acd:	b8 06 00 00 00       	mov    eax,0x6
c0013ad2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ad6:	75 0f                	jne    c0013ae7 <Directory::create()+0x47>
c0013ad8:	83 c2 0d             	add    edx,0xd
c0013adb:	50                   	push   eax
c0013adc:	50                   	push   eax
c0013add:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013adf:	52                   	push   edx
c0013ae0:	51                   	push   ecx
c0013ae1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ae4:	83 c4 10             	add    esp,0x10
c0013ae7:	83 c4 0c             	add    esp,0xc
c0013aea:	c3                   	ret    
c0013aeb:	90                   	nop

c0013aec <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013aec:	b8 0a 00 00 00       	mov    eax,0xa
c0013af1:	c3                   	ret    

c0013af2 <Bus::Bus(char const*)>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af9:	83 ec 08             	sub    esp,0x8
c0013afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b00:	50                   	push   eax
c0013b01:	e8 88 09 00 00       	call   c001448e <Device::Device(char const*)>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	ba d8 ba 02 c0       	mov    edx,0xc002bad8
c0013b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b12:	89 10                	mov    DWORD PTR [eax],edx
c0013b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b18:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b22:	90                   	nop
c0013b23:	83 c4 0c             	add    esp,0xc
c0013b26:	c3                   	ret    
c0013b27:	90                   	nop

c0013b28 <Bus::~Bus()>:
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	ba d8 ba 02 c0       	mov    edx,0xc002bad8
c0013b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b34:	89 10                	mov    DWORD PTR [eax],edx
c0013b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	50                   	push   eax
c0013b3e:	e8 15 06 00 00       	call   c0014158 <Device::~Device()>
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	90                   	nop
c0013b47:	83 c4 0c             	add    esp,0xc
c0013b4a:	c3                   	ret    
c0013b4b:	90                   	nop

c0013b4c <Bus::~Bus()>:
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	83 ec 0c             	sub    esp,0xc
c0013b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b56:	e8 cd ff ff ff       	call   c0013b28 <Bus::~Bus()>
c0013b5b:	83 c4 10             	add    esp,0x10
c0013b5e:	83 ec 08             	sub    esp,0x8
c0013b61:	68 58 01 00 00       	push   0x158
c0013b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6a:	e8 02 f2 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	83 c4 0c             	add    esp,0xc
c0013b75:	c3                   	ret    

c0013b76 <Buzzer::Buzzer(char const*)>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7d:	83 ec 08             	sub    esp,0x8
c0013b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b84:	50                   	push   eax
c0013b85:	e8 04 09 00 00       	call   c001448e <Device::Device(char const*)>
c0013b8a:	83 c4 10             	add    esp,0x10
c0013b8d:	ba 04 bb 02 c0       	mov    edx,0xc002bb04
c0013b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b96:	89 10                	mov    DWORD PTR [eax],edx
c0013b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013baa:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bb4:	90                   	nop
c0013bb5:	83 c4 0c             	add    esp,0xc
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <Buzzer::~Buzzer()>:
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	ba 04 bb 02 c0       	mov    edx,0xc002bb04
c0013bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc6:	89 10                	mov    DWORD PTR [eax],edx
c0013bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	50                   	push   eax
c0013bd0:	e8 83 05 00 00       	call   c0014158 <Device::~Device()>
c0013bd5:	83 c4 10             	add    esp,0x10
c0013bd8:	90                   	nop
c0013bd9:	83 c4 0c             	add    esp,0xc
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <Buzzer::~Buzzer()>:
c0013bde:	83 ec 0c             	sub    esp,0xc
c0013be1:	83 ec 0c             	sub    esp,0xc
c0013be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be8:	e8 cd ff ff ff       	call   c0013bba <Buzzer::~Buzzer()>
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	83 ec 08             	sub    esp,0x8
c0013bf3:	68 5c 01 00 00       	push   0x15c
c0013bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bfc:	e8 70 f1 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0013c01:	83 c4 10             	add    esp,0x10
c0013c04:	83 c4 0c             	add    esp,0xc
c0013c07:	c3                   	ret    

c0013c08 <Buzzer::stop()>:
c0013c08:	83 ec 14             	sub    esp,0x14
c0013c0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c11:	6a 00                	push   0x0
c0013c13:	50                   	push   eax
c0013c14:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c17:	83 c4 1c             	add    esp,0x1c
c0013c1a:	c3                   	ret    

c0013c1b <beepThread(void*)>:
c0013c1b:	53                   	push   ebx
c0013c1c:	83 ec 08             	sub    esp,0x8
c0013c1f:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0013c24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c28:	48                   	dec    eax
c0013c29:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0013c2e:	75 01                	jne    c0013c31 <beepThread(void*)+0x16>
c0013c30:	fb                   	sti    
c0013c31:	50                   	push   eax
c0013c32:	50                   	push   eax
c0013c33:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c38:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c3e:	52                   	push   edx
c0013c3f:	50                   	push   eax
c0013c40:	e8 0a ae 00 00       	call   c001ea4f <nanoSleep(unsigned long long)>
c0013c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c48:	e8 bb ff ff ff       	call   c0013c08 <Buzzer::stop()>
c0013c4d:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c55:	83 c4 18             	add    esp,0x18
c0013c58:	5b                   	pop    ebx
c0013c59:	e9 ed ac 00 00       	jmp    c001e94b <blockTask(TaskState)>

c0013c5e <Buzzer::beep(int, int, bool)>:
c0013c5e:	57                   	push   edi
c0013c5f:	56                   	push   esi
c0013c60:	53                   	push   ebx
c0013c61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c6d:	52                   	push   edx
c0013c6e:	52                   	push   edx
c0013c6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c75:	56                   	push   esi
c0013c76:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c79:	83 c4 10             	add    esp,0x10
c0013c7c:	89 f8                	mov    eax,edi
c0013c7e:	84 c0                	test   al,al
c0013c80:	74 1f                	je     c0013ca1 <Buzzer::beep(int, int, bool)+0x43>
c0013c82:	50                   	push   eax
c0013c83:	50                   	push   eax
c0013c84:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c8a:	99                   	cdq    
c0013c8b:	52                   	push   edx
c0013c8c:	50                   	push   eax
c0013c8d:	e8 bd ad 00 00       	call   c001ea4f <nanoSleep(unsigned long long)>
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c99:	5b                   	pop    ebx
c0013c9a:	5e                   	pop    esi
c0013c9b:	5f                   	pop    edi
c0013c9c:	e9 67 ff ff ff       	jmp    c0013c08 <Buzzer::stop()>
c0013ca1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ca7:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0013cac:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cb4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cb8:	c7 44 24 14 1b 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c1b
c0013cc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cc4:	5b                   	pop    ebx
c0013cc5:	5e                   	pop    esi
c0013cc6:	5f                   	pop    edi
c0013cc7:	e9 3c a8 00 00       	jmp    c001e508 <Process::createThread(void (*)(void*), void*, int)>

c0013ccc <User::loadClockSettings(int)>:
c0013ccc:	53                   	push   ebx
c0013ccd:	83 ec 14             	sub    esp,0x14
c0013cd0:	68 14 01 00 00       	push   0x114
c0013cd5:	e8 b2 bb ff ff       	call   c000f88c <malloc>
c0013cda:	83 c4 0c             	add    esp,0xc
c0013cdd:	89 c3                	mov    ebx,eax
c0013cdf:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c0013ce5:	68 2c bb 02 c0       	push   0xc002bb2c
c0013cea:	50                   	push   eax
c0013ceb:	e8 c0 f6 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c0013cf0:	58                   	pop    eax
c0013cf1:	5a                   	pop    edx
c0013cf2:	6a 01                	push   0x1
c0013cf4:	53                   	push   ebx
c0013cf5:	e8 1a f7 ff ff       	call   c0013414 <File::open(FileOpenMode)>
c0013cfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cfd:	e8 70 f7 ff ff       	call   c0013472 <File::close()>
c0013d02:	83 c4 10             	add    esp,0x10
c0013d05:	85 db                	test   ebx,ebx
c0013d07:	74 0f                	je     c0013d18 <User::loadClockSettings(int)+0x4c>
c0013d09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d12:	83 c4 08             	add    esp,0x8
c0013d15:	5b                   	pop    ebx
c0013d16:	ff e0                	jmp    eax
c0013d18:	83 c4 08             	add    esp,0x8
c0013d1b:	5b                   	pop    ebx
c0013d1c:	c3                   	ret    
c0013d1d:	90                   	nop

c0013d1e <Clock::Clock(char const*)>:
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d25:	83 ec 08             	sub    esp,0x8
c0013d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2c:	50                   	push   eax
c0013d2d:	e8 5c 07 00 00       	call   c001448e <Device::Device(char const*)>
c0013d32:	83 c4 10             	add    esp,0x10
c0013d35:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c0013d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3e:	89 10                	mov    DWORD PTR [eax],edx
c0013d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d44:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d4e:	90                   	nop
c0013d4f:	83 c4 0c             	add    esp,0xc
c0013d52:	c3                   	ret    
c0013d53:	90                   	nop

c0013d54 <Clock::~Clock()>:
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c0013d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d60:	89 10                	mov    DWORD PTR [eax],edx
c0013d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d66:	83 ec 0c             	sub    esp,0xc
c0013d69:	50                   	push   eax
c0013d6a:	e8 e9 03 00 00       	call   c0014158 <Device::~Device()>
c0013d6f:	83 c4 10             	add    esp,0x10
c0013d72:	90                   	nop
c0013d73:	83 c4 0c             	add    esp,0xc
c0013d76:	c3                   	ret    
c0013d77:	90                   	nop

c0013d78 <Clock::~Clock()>:
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	83 ec 0c             	sub    esp,0xc
c0013d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d82:	e8 cd ff ff ff       	call   c0013d54 <Clock::~Clock()>
c0013d87:	83 c4 10             	add    esp,0x10
c0013d8a:	83 ec 08             	sub    esp,0x8
c0013d8d:	68 58 01 00 00       	push   0x158
c0013d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d96:	e8 d6 ef ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	83 c4 0c             	add    esp,0xc
c0013da1:	c3                   	ret    

c0013da2 <Clock::timeInSecondsLocal()>:
c0013da2:	53                   	push   ebx
c0013da3:	83 ec 14             	sub    esp,0x14
c0013da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013daa:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dac:	50                   	push   eax
c0013dad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013db0:	0f b6 0d fc f6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f6fc
c0013db7:	03 0d 00 f7 02 c0    	add    ecx,DWORD PTR ds:0xc002f700
c0013dbd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dc3:	89 cb                	mov    ebx,ecx
c0013dc5:	c1 fb 1f             	sar    ebx,0x1f
c0013dc8:	01 c8                	add    eax,ecx
c0013dca:	11 da                	adc    edx,ebx
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	31 c9                	xor    ecx,ecx
c0013dd1:	80 3d fd f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f6fd,0x0
c0013dd8:	74 05                	je     c0013ddf <Clock::timeInSecondsLocal()+0x3d>
c0013dda:	b9 08 07 00 00       	mov    ecx,0x708
c0013ddf:	31 db                	xor    ebx,ebx
c0013de1:	01 c8                	add    eax,ecx
c0013de3:	11 da                	adc    edx,ebx
c0013de5:	83 c4 08             	add    esp,0x8
c0013de8:	5b                   	pop    ebx
c0013de9:	c3                   	ret    

c0013dea <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013dea:	57                   	push   edi
c0013deb:	56                   	push   esi
c0013dec:	53                   	push   ebx
c0013ded:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013df1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013df5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013df7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013dfb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013dfe:	0f b6 05 fc f6 02 c0 	movzx  eax,BYTE PTR ds:0xc002f6fc
c0013e05:	03 05 00 f7 02 c0    	add    eax,DWORD PTR ds:0xc002f700
c0013e0b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e11:	99                   	cdq    
c0013e12:	29 c6                	sub    esi,eax
c0013e14:	19 d7                	sbb    edi,edx
c0013e16:	89 f0                	mov    eax,esi
c0013e18:	89 fa                	mov    edx,edi
c0013e1a:	31 f6                	xor    esi,esi
c0013e1c:	80 3d fd f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f6fd,0x0
c0013e23:	74 05                	je     c0013e2a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e25:	be 08 07 00 00       	mov    esi,0x708
c0013e2a:	31 ff                	xor    edi,edi
c0013e2c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e30:	29 f0                	sub    eax,esi
c0013e32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e36:	19 fa                	sbb    edx,edi
c0013e38:	89 d8                	mov    eax,ebx
c0013e3a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e3e:	5b                   	pop    ebx
c0013e3f:	5e                   	pop    esi
c0013e40:	5f                   	pop    edi
c0013e41:	ff e0                	jmp    eax

c0013e43 <datetimeToSeconds(datetime_t)>:
c0013e43:	55                   	push   ebp
c0013e44:	57                   	push   edi
c0013e45:	56                   	push   esi
c0013e46:	53                   	push   ebx
c0013e47:	83 ec 14             	sub    esp,0x14
c0013e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e4e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e52:	89 d3                	mov    ebx,edx
c0013e54:	0f b6 c6             	movzx  eax,dh
c0013e57:	c1 eb 10             	shr    ebx,0x10
c0013e5a:	48                   	dec    eax
c0013e5b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e60:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e64:	0f b6 f5             	movzx  esi,ch
c0013e67:	89 cf                	mov    edi,ecx
c0013e69:	6b f6 3c             	imul   esi,esi,0x3c
c0013e6c:	c1 ef 10             	shr    edi,0x10
c0013e6f:	0f b6 c9             	movzx  ecx,cl
c0013e72:	89 f8                	mov    eax,edi
c0013e74:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e7a:	0f b6 f8             	movzx  edi,al
c0013e7d:	0f b6 d2             	movzx  edx,dl
c0013e80:	01 fe                	add    esi,edi
c0013e82:	01 f1                	add    ecx,esi
c0013e84:	0f b7 f3             	movzx  esi,bx
c0013e87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e8b:	c1 f9 1f             	sar    ecx,0x1f
c0013e8e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e97:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e9c:	8b 0c 8d a0 bb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4460]
c0013ea3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ea7:	76 29                	jbe    c0013ed2 <datetimeToSeconds(datetime_t)+0x8f>
c0013ea9:	f6 c3 03             	test   bl,0x3
c0013eac:	75 24                	jne    c0013ed2 <datetimeToSeconds(datetime_t)+0x8f>
c0013eae:	31 d2                	xor    edx,edx
c0013eb0:	bf 64 00 00 00       	mov    edi,0x64
c0013eb5:	89 d8                	mov    eax,ebx
c0013eb7:	66 f7 f7             	div    di
c0013eba:	66 85 d2             	test   dx,dx
c0013ebd:	75 12                	jne    c0013ed1 <datetimeToSeconds(datetime_t)+0x8e>
c0013ebf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ec5:	bf 90 01 00 00       	mov    edi,0x190
c0013eca:	99                   	cdq    
c0013ecb:	f7 ff                	idiv   edi
c0013ecd:	85 d2                	test   edx,edx
c0013ecf:	75 01                	jne    c0013ed2 <datetimeToSeconds(datetime_t)+0x8f>
c0013ed1:	41                   	inc    ecx
c0013ed2:	66 83 fb 46          	cmp    bx,0x46
c0013ed6:	76 45                	jbe    c0013f1d <datetimeToSeconds(datetime_t)+0xda>
c0013ed8:	bb 46 00 00 00       	mov    ebx,0x46
c0013edd:	bf 64 00 00 00       	mov    edi,0x64
c0013ee2:	bd 90 01 00 00       	mov    ebp,0x190
c0013ee7:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eec:	f6 c3 03             	test   bl,0x3
c0013eef:	75 23                	jne    c0013f14 <datetimeToSeconds(datetime_t)+0xd1>
c0013ef1:	89 d8                	mov    eax,ebx
c0013ef3:	99                   	cdq    
c0013ef4:	f7 ff                	idiv   edi
c0013ef6:	b8 6e 01 00 00       	mov    eax,0x16e
c0013efb:	85 d2                	test   edx,edx
c0013efd:	75 15                	jne    c0013f14 <datetimeToSeconds(datetime_t)+0xd1>
c0013eff:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f05:	99                   	cdq    
c0013f06:	f7 fd                	idiv   ebp
c0013f08:	83 fa 01             	cmp    edx,0x1
c0013f0b:	19 c0                	sbb    eax,eax
c0013f0d:	f7 d0                	not    eax
c0013f0f:	05 6e 01 00 00       	add    eax,0x16e
c0013f14:	01 c1                	add    ecx,eax
c0013f16:	43                   	inc    ebx
c0013f17:	39 f3                	cmp    ebx,esi
c0013f19:	7c cc                	jl     c0013ee7 <datetimeToSeconds(datetime_t)+0xa4>
c0013f1b:	eb 35                	jmp    c0013f52 <datetimeToSeconds(datetime_t)+0x10f>
c0013f1d:	74 33                	je     c0013f52 <datetimeToSeconds(datetime_t)+0x10f>
c0013f1f:	b8 45 00 00 00       	mov    eax,0x45
c0013f24:	89 c2                	mov    edx,eax
c0013f26:	83 e2 03             	and    edx,0x3
c0013f29:	39 f0                	cmp    eax,esi
c0013f2b:	7e 0f                	jle    c0013f3c <datetimeToSeconds(datetime_t)+0xf9>
c0013f2d:	83 fa 01             	cmp    edx,0x1
c0013f30:	19 d2                	sbb    edx,edx
c0013f32:	48                   	dec    eax
c0013f33:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f3a:	eb e8                	jmp    c0013f24 <datetimeToSeconds(datetime_t)+0xe1>
c0013f3c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f41:	85 d2                	test   edx,edx
c0013f43:	75 0b                	jne    c0013f50 <datetimeToSeconds(datetime_t)+0x10d>
c0013f45:	66 83 fb 01          	cmp    bx,0x1
c0013f49:	19 c0                	sbb    eax,eax
c0013f4b:	05 6e 01 00 00       	add    eax,0x16e
c0013f50:	29 c1                	sub    ecx,eax
c0013f52:	b8 80 51 01 00       	mov    eax,0x15180
c0013f57:	f7 e9                	imul   ecx
c0013f59:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f5d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f61:	83 c4 14             	add    esp,0x14
c0013f64:	5b                   	pop    ebx
c0013f65:	5e                   	pop    esi
c0013f66:	5f                   	pop    edi
c0013f67:	5d                   	pop    ebp
c0013f68:	c3                   	ret    
c0013f69:	90                   	nop

c0013f6a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f6a:	57                   	push   edi
c0013f6b:	56                   	push   esi
c0013f6c:	53                   	push   ebx
c0013f6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f71:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f73:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f7e:	e8 c0 fe ff ff       	call   c0013e43 <datetimeToSeconds(datetime_t)>
c0013f83:	59                   	pop    ecx
c0013f84:	0f b6 0d fc f6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f6fc
c0013f8b:	5b                   	pop    ebx
c0013f8c:	03 0d 00 f7 02 c0    	add    ecx,DWORD PTR ds:0xc002f700
c0013f92:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f98:	89 cb                	mov    ebx,ecx
c0013f9a:	c1 fb 1f             	sar    ebx,0x1f
c0013f9d:	29 c8                	sub    eax,ecx
c0013f9f:	19 da                	sbb    edx,ebx
c0013fa1:	31 c9                	xor    ecx,ecx
c0013fa3:	80 3d fd f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f6fd,0x0
c0013faa:	74 05                	je     c0013fb1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fac:	b9 08 07 00 00       	mov    ecx,0x708
c0013fb1:	31 db                	xor    ebx,ebx
c0013fb3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fb7:	29 c8                	sub    eax,ecx
c0013fb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fbd:	19 da                	sbb    edx,ebx
c0013fbf:	89 f8                	mov    eax,edi
c0013fc1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fc5:	5b                   	pop    ebx
c0013fc6:	5e                   	pop    esi
c0013fc7:	5f                   	pop    edi
c0013fc8:	ff e0                	jmp    eax

c0013fca <secondsToDatetime(unsigned long long)>:
c0013fca:	55                   	push   ebp
c0013fcb:	57                   	push   edi
c0013fcc:	56                   	push   esi
c0013fcd:	53                   	push   ebx
c0013fce:	83 ec 1c             	sub    esp,0x1c
c0013fd1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fd5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fd9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fdd:	6a 00                	push   0x0
c0013fdf:	68 80 51 01 00       	push   0x15180
c0013fe4:	55                   	push   ebp
c0013fe5:	57                   	push   edi
c0013fe6:	e8 59 38 01 00       	call   c0027844 <__udivdi3>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013ff4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ff8:	6a 00                	push   0x0
c0013ffa:	68 80 51 01 00       	push   0x15180
c0013fff:	55                   	push   ebp
c0014000:	57                   	push   edi
c0014001:	bf 10 0e 00 00       	mov    edi,0xe10
c0014006:	e8 39 39 01 00       	call   c0027944 <__umoddi3>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	99                   	cdq    
c001400f:	f7 ff                	idiv   edi
c0014011:	bf 3c 00 00 00       	mov    edi,0x3c
c0014016:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014019:	89 d0                	mov    eax,edx
c001401b:	99                   	cdq    
c001401c:	f7 ff                	idiv   edi
c001401e:	85 db                	test   ebx,ebx
c0014020:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014023:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014026:	79 11                	jns    c0014039 <secondsToDatetime(unsigned long long)+0x6f>
c0014028:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001402c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014032:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014037:	eb 07                	jmp    c0014040 <secondsToDatetime(unsigned long long)+0x76>
c0014039:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001403e:	89 d8                	mov    eax,ebx
c0014040:	bf b4 05 00 00       	mov    edi,0x5b4
c0014045:	99                   	cdq    
c0014046:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001404b:	f7 f9                	idiv   ecx
c001404d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014052:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014056:	31 d2                	xor    edx,edx
c0014058:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014060:	01 c3                	add    ebx,eax
c0014062:	89 d8                	mov    eax,ebx
c0014064:	f7 f1                	div    ecx
c0014066:	31 d2                	xor    edx,edx
c0014068:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001406b:	89 d8                	mov    eax,ebx
c001406d:	f7 f7                	div    edi
c001406f:	31 d2                	xor    edx,edx
c0014071:	29 c1                	sub    ecx,eax
c0014073:	89 d8                	mov    eax,ebx
c0014075:	f7 f5                	div    ebp
c0014077:	bd 6d 01 00 00       	mov    ebp,0x16d
c001407c:	29 c1                	sub    ecx,eax
c001407e:	31 d2                	xor    edx,edx
c0014080:	89 c8                	mov    eax,ecx
c0014082:	f7 f5                	div    ebp
c0014084:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001408d:	31 d2                	xor    edx,edx
c001408f:	89 c8                	mov    eax,ecx
c0014091:	f7 f5                	div    ebp
c0014093:	31 d2                	xor    edx,edx
c0014095:	01 c3                	add    ebx,eax
c0014097:	89 c8                	mov    eax,ecx
c0014099:	f7 f7                	div    edi
c001409b:	bf 99 00 00 00       	mov    edi,0x99
c00140a0:	29 c3                	sub    ebx,eax
c00140a2:	31 d2                	xor    edx,edx
c00140a4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140ac:	29 c3                	sub    ebx,eax
c00140ae:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140b1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140b4:	bb 05 00 00 00       	mov    ebx,0x5
c00140b9:	83 c1 02             	add    ecx,0x2
c00140bc:	89 c8                	mov    eax,ecx
c00140be:	f7 f7                	div    edi
c00140c0:	31 d2                	xor    edx,edx
c00140c2:	89 c7                	mov    edi,eax
c00140c4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140ca:	83 c0 02             	add    eax,0x2
c00140cd:	f7 f3                	div    ebx
c00140cf:	89 eb                	mov    ebx,ebp
c00140d1:	29 c3                	sub    ebx,eax
c00140d3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140d9:	88 1e                	mov    BYTE PTR [esi],bl
c00140db:	19 c0                	sbb    eax,eax
c00140dd:	31 d2                	xor    edx,edx
c00140df:	83 e0 0c             	and    eax,0xc
c00140e2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140e6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140ee:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140f2:	83 f9 01             	cmp    ecx,0x1
c00140f5:	0f 96 c2             	setbe  dl
c00140f8:	41                   	inc    ecx
c00140f9:	01 d0                	add    eax,edx
c00140fb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140fe:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014102:	83 c4 1c             	add    esp,0x1c
c0014105:	89 f0                	mov    eax,esi
c0014107:	5b                   	pop    ebx
c0014108:	5e                   	pop    esi
c0014109:	5f                   	pop    edi
c001410a:	5d                   	pop    ebp
c001410b:	c2 04 00             	ret    0x4

c001410e <Clock::timeInDatetimeLocal()>:
c001410e:	53                   	push   ebx
c001410f:	83 ec 14             	sub    esp,0x14
c0014112:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014116:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001411a:	e8 83 fc ff ff       	call   c0013da2 <Clock::timeInSecondsLocal()>
c001411f:	83 c4 0c             	add    esp,0xc
c0014122:	52                   	push   edx
c0014123:	50                   	push   eax
c0014124:	53                   	push   ebx
c0014125:	e8 a0 fe ff ff       	call   c0013fca <secondsToDatetime(unsigned long long)>
c001412a:	89 d8                	mov    eax,ebx
c001412c:	83 c4 14             	add    esp,0x14
c001412f:	5b                   	pop    ebx
c0014130:	c2 04 00             	ret    0x4
c0014133:	90                   	nop

c0014134 <Device::hibernate()>:
c0014134:	c3                   	ret    
c0014135:	90                   	nop

c0014136 <Device::wake()>:
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <Device::detect()>:
c0014138:	c3                   	ret    
c0014139:	90                   	nop

c001413a <Device::disableLegacy()>:
c001413a:	c3                   	ret    
c001413b:	90                   	nop

c001413c <Device::powerSaving(PowerSavingLevel)>:
c001413c:	c3                   	ret    
c001413d:	90                   	nop

c001413e <DriverlessDevice::close(int, int, void*)>:
c001413e:	31 c0                	xor    eax,eax
c0014140:	c3                   	ret    
c0014141:	90                   	nop

c0014142 <DriverlessDevice::detect()>:
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <DriverlessDevice::open(int, int, void*)>:
c0014144:	83 ec 18             	sub    esp,0x18
c0014147:	68 d0 bb 02 c0       	push   0xc002bbd0
c001414c:	e8 48 68 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0014151:	83 c8 ff             	or     eax,0xffffffff
c0014154:	83 c4 1c             	add    esp,0x1c
c0014157:	c3                   	ret    

c0014158 <Device::~Device()>:
c0014158:	ba 30 bc 02 c0       	mov    edx,0xc002bc30
c001415d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014161:	89 10                	mov    DWORD PTR [eax],edx
c0014163:	90                   	nop
c0014164:	c3                   	ret    
c0014165:	90                   	nop

c0014166 <Device::~Device()>:
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001416d:	e8 e6 ff ff ff       	call   c0014158 <Device::~Device()>
c0014172:	83 c4 04             	add    esp,0x4
c0014175:	83 ec 08             	sub    esp,0x8
c0014178:	68 58 01 00 00       	push   0x158
c001417d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014181:	e8 eb eb ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0014186:	83 c4 10             	add    esp,0x10
c0014189:	83 c4 0c             	add    esp,0xc
c001418c:	c3                   	ret    
c001418d:	90                   	nop

c001418e <Device::findAndLoadDriver()>:
c001418e:	c7 44 24 04 ee bb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bbee
c0014196:	e9 b6 ec ff ff       	jmp    c0012e51 <Dbg::kprintf(char const*, ...)>
c001419b:	90                   	nop

c001419c <Device::preOpenPCI(PCIDeviceInfo)>:
c001419c:	57                   	push   edi
c001419d:	b9 09 00 00 00       	mov    ecx,0x9
c00141a2:	56                   	push   esi
c00141a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141a7:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141ab:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141b5:	81 c7 18 01 00 00    	add    edi,0x118
c00141bb:	fc                   	cld    
c00141bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141be:	5e                   	pop    esi
c00141bf:	5f                   	pop    edi
c00141c0:	c3                   	ret    
c00141c1:	90                   	nop

c00141c2 <Device::preOpenACPI(void*, char*, char*)>:
c00141c2:	57                   	push   edi
c00141c3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141c8:	56                   	push   esi
c00141c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141d1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141db:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141e1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141ed:	b9 0e 00 00 00       	mov    ecx,0xe
c00141f2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141fe:	5e                   	pop    esi
c00141ff:	5f                   	pop    edi
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014206:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001420b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014212:	75 0b                	jne    c001421f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014214:	8b 00                	mov    eax,DWORD PTR [eax]
c0014216:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001421a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001421d:	eb 1e                	jmp    c001423d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001421f:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0014224:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001422a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014230:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014232:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014236:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001423a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001423d:	ff e0                	jmp    eax
c001423f:	90                   	nop

c0014240 <Device::getParent()>:
c0014240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014244:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001424c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014250:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014255:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001425c:	75 0b                	jne    c0014269 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001425e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014260:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014264:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014267:	eb 1e                	jmp    c0014287 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014269:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001426e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014274:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001427a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001427c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014280:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014284:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014287:	ff e0                	jmp    eax
c0014289:	90                   	nop

c001428a <Device::addChild(Device*)>:
c001428a:	53                   	push   ebx
c001428b:	83 ec 08             	sub    esp,0x8
c001428e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014296:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001429c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142a4:	85 d2                	test   edx,edx
c00142a6:	74 04                	je     c00142ac <Device::addChild(Device*)+0x22>
c00142a8:	89 d3                	mov    ebx,edx
c00142aa:	eb f6                	jmp    c00142a2 <Device::addChild(Device*)+0x18>
c00142ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142af:	83 ec 0c             	sub    esp,0xc
c00142b2:	6a 08                	push   0x8
c00142b4:	e8 d3 b5 ff ff       	call   c000f88c <malloc>
c00142b9:	89 03                	mov    DWORD PTR [ebx],eax
c00142bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142c8:	83 c4 18             	add    esp,0x18
c00142cb:	5b                   	pop    ebx
c00142cc:	c3                   	ret    
c00142cd:	90                   	nop

c00142ce <Device::removeAllChildren()>:
c00142ce:	56                   	push   esi
c00142cf:	53                   	push   ebx
c00142d0:	52                   	push   edx
c00142d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142d5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142de:	74 17                	je     c00142f7 <Device::removeAllChildren()+0x29>
c00142e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142e3:	85 c0                	test   eax,eax
c00142e5:	74 0c                	je     c00142f3 <Device::removeAllChildren()+0x25>
c00142e7:	83 ec 0c             	sub    esp,0xc
c00142ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00142ec:	50                   	push   eax
c00142ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142f5:	eb e4                	jmp    c00142db <Device::removeAllChildren()+0xd>
c00142f7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014303:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014309:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014310:	58                   	pop    eax
c0014311:	5b                   	pop    ebx
c0014312:	5e                   	pop    esi
c0014313:	c3                   	ret    

c0014314 <Device::hibernateAll()>:
c0014314:	53                   	push   ebx
c0014315:	83 ec 14             	sub    esp,0x14
c0014318:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001431c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001431e:	53                   	push   ebx
c001431f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014322:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001432e:	74 0f                	je     c001433f <Device::hibernateAll()+0x2b>
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014336:	e8 d9 ff ff ff       	call   c0014314 <Device::hibernateAll()>
c001433b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001433d:	eb e9                	jmp    c0014328 <Device::hibernateAll()+0x14>
c001433f:	83 c4 08             	add    esp,0x8
c0014342:	5b                   	pop    ebx
c0014343:	c3                   	ret    

c0014344 <Device::wakeAll()>:
c0014344:	53                   	push   ebx
c0014345:	83 ec 14             	sub    esp,0x14
c0014348:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001434c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001434e:	53                   	push   ebx
c001434f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014352:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014358:	83 c4 10             	add    esp,0x10
c001435b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001435e:	74 0f                	je     c001436f <Device::wakeAll()+0x2b>
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014366:	e8 d9 ff ff ff       	call   c0014344 <Device::wakeAll()>
c001436b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001436d:	eb e9                	jmp    c0014358 <Device::wakeAll()+0x14>
c001436f:	83 c4 08             	add    esp,0x8
c0014372:	5b                   	pop    ebx
c0014373:	c3                   	ret    

c0014374 <Device::detectAll()>:
c0014374:	53                   	push   ebx
c0014375:	83 ec 14             	sub    esp,0x14
c0014378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001437c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437e:	53                   	push   ebx
c001437f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014382:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438e:	74 0f                	je     c001439f <Device::detectAll()+0x2b>
c0014390:	83 ec 0c             	sub    esp,0xc
c0014393:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014396:	e8 d9 ff ff ff       	call   c0014374 <Device::detectAll()>
c001439b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439d:	eb e9                	jmp    c0014388 <Device::detectAll()+0x14>
c001439f:	83 c4 08             	add    esp,0x8
c00143a2:	5b                   	pop    ebx
c00143a3:	c3                   	ret    

c00143a4 <Device::disableLegacyAll()>:
c00143a4:	53                   	push   ebx
c00143a5:	83 ec 14             	sub    esp,0x14
c00143a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ae:	53                   	push   ebx
c00143af:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143be:	74 0f                	je     c00143cf <Device::disableLegacyAll()+0x2b>
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c6:	e8 d9 ff ff ff       	call   c00143a4 <Device::disableLegacyAll()>
c00143cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cd:	eb e9                	jmp    c00143b8 <Device::disableLegacyAll()+0x14>
c00143cf:	83 c4 08             	add    esp,0x8
c00143d2:	5b                   	pop    ebx
c00143d3:	c3                   	ret    

c00143d4 <Device::loadDriversForAll()>:
c00143d4:	53                   	push   ebx
c00143d5:	83 ec 08             	sub    esp,0x8
c00143d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143dc:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c00143e3:	75 0c                	jne    c00143f1 <Device::loadDriversForAll()+0x1d>
c00143e5:	83 ec 0c             	sub    esp,0xc
c00143e8:	53                   	push   ebx
c00143e9:	e8 a0 fd ff ff       	call   c001418e <Device::findAndLoadDriver()>
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143fa:	74 12                	je     c001440e <Device::loadDriversForAll()+0x3a>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014402:	e8 cd ff ff ff       	call   c00143d4 <Device::loadDriversForAll()>
c0014407:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	eb e9                	jmp    c00143f7 <Device::loadDriversForAll()+0x23>
c001440e:	83 c4 08             	add    esp,0x8
c0014411:	5b                   	pop    ebx
c0014412:	c3                   	ret    
c0014413:	90                   	nop

c0014414 <Device::closeAll()>:
c0014414:	53                   	push   ebx
c0014415:	83 ec 08             	sub    esp,0x8
c0014418:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001441c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441e:	6a 00                	push   0x0
c0014420:	6a 00                	push   0x0
c0014422:	6a 00                	push   0x0
c0014424:	53                   	push   ebx
c0014425:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014428:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001442e:	83 c4 10             	add    esp,0x10
c0014431:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014434:	74 0f                	je     c0014445 <Device::closeAll()+0x31>
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001443c:	e8 d3 ff ff ff       	call   c0014414 <Device::closeAll()>
c0014441:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014443:	eb e9                	jmp    c001442e <Device::closeAll()+0x1a>
c0014445:	83 c4 08             	add    esp,0x8
c0014448:	5b                   	pop    ebx
c0014449:	c3                   	ret    

c001444a <Device::powerSavingAll(PowerSavingLevel)>:
c001444a:	56                   	push   esi
c001444b:	53                   	push   ebx
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014453:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014457:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014459:	56                   	push   esi
c001445a:	53                   	push   ebx
c001445b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001445e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014464:	83 c4 10             	add    esp,0x10
c0014467:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001446a:	74 0f                	je     c001447b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001446c:	52                   	push   edx
c001446d:	52                   	push   edx
c001446e:	56                   	push   esi
c001446f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014472:	e8 d3 ff ff ff       	call   c001444a <Device::powerSavingAll(PowerSavingLevel)>
c0014477:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014479:	eb e9                	jmp    c0014464 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001447b:	58                   	pop    eax
c001447c:	5b                   	pop    ebx
c001447d:	5e                   	pop    esi
c001447e:	c3                   	ret    
c001447f:	90                   	nop

c0014480 <Device::setName(char const*)>:
c0014480:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014488:	e9 7f c3 fe ff       	jmp    c000080c <strcpy>
c001448d:	90                   	nop

c001448e <Device::Device(char const*)>:
c001448e:	83 ec 1c             	sub    esp,0x1c
c0014491:	ba 30 bc 02 c0       	mov    edx,0xc002bc30
c0014496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449a:	89 10                	mov    DWORD PTR [eax],edx
c001449c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144d4:	83 ec 08             	sub    esp,0x8
c00144d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144df:	e8 9c ff ff ff       	call   c0014480 <Device::setName(char const*)>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144ef:	83 ec 0c             	sub    esp,0xc
c00144f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144f6:	e8 91 b3 ff ff       	call   c000f88c <malloc>
c00144fb:	83 c4 10             	add    esp,0x10
c00144fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001450b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001450f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014519:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001451f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014529:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001452f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014545:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001454c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014550:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001455a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014584:	90                   	nop
c0014585:	83 c4 1c             	add    esp,0x1c
c0014588:	c3                   	ret    
c0014589:	90                   	nop

c001458a <Device::getName()>:
c001458a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001458e:	05 d0 00 00 00       	add    eax,0xd0
c0014593:	c3                   	ret    

c0014594 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001459b:	83 ec 08             	sub    esp,0x8
c001459e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a2:	50                   	push   eax
c00145a3:	e8 e6 fe ff ff       	call   c001448e <Device::Device(char const*)>
c00145a8:	83 c4 10             	add    esp,0x10
c00145ab:	ba 5c bc 02 c0       	mov    edx,0xc002bc5c
c00145b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b4:	89 10                	mov    DWORD PTR [eax],edx
c00145b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ba:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145c4:	90                   	nop
c00145c5:	83 c4 0c             	add    esp,0xc
c00145c8:	c3                   	ret    
c00145c9:	90                   	nop

c00145ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145ca:	57                   	push   edi
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145d9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145df:	75 0c                	jne    c00145ed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145e1:	52                   	push   edx
c00145e2:	52                   	push   edx
c00145e3:	53                   	push   ebx
c00145e4:	56                   	push   esi
c00145e5:	e8 ac 51 01 00       	call   c0029796 <LinkedList<Device>::addElement(Device*)>
c00145ea:	83 c4 10             	add    esp,0x10
c00145ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145f6:	74 12                	je     c001460a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145f8:	50                   	push   eax
c00145f9:	57                   	push   edi
c00145fa:	56                   	push   esi
c00145fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145fe:	e8 c7 ff ff ff       	call   c00145ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014603:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014605:	83 c4 10             	add    esp,0x10
c0014608:	eb e9                	jmp    c00145f3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001460a:	5b                   	pop    ebx
c001460b:	5e                   	pop    esi
c001460c:	5f                   	pop    edi
c001460d:	c3                   	ret    

c001460e <getDevicesOfType(DeviceType)>:
c001460e:	53                   	push   ebx
c001460f:	83 ec 14             	sub    esp,0x14
c0014612:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014616:	53                   	push   ebx
c0014617:	e8 56 52 01 00       	call   c0029872 <LinkedList<Device>::LinkedList()>
c001461c:	83 c4 0c             	add    esp,0xc
c001461f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014623:	53                   	push   ebx
c0014624:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c001462a:	e8 9b ff ff ff       	call   c00145ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001462f:	89 d8                	mov    eax,ebx
c0014631:	83 c4 18             	add    esp,0x18
c0014634:	5b                   	pop    ebx
c0014635:	c2 04 00             	ret    0x4

c0014638 <HardDiskController::HardDiskController(char const*)>:
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463f:	83 ec 08             	sub    esp,0x8
c0014642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014646:	50                   	push   eax
c0014647:	e8 42 fe ff ff       	call   c001448e <Device::Device(char const*)>
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c0014654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014658:	89 10                	mov    DWORD PTR [eax],edx
c001465a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014668:	90                   	nop
c0014669:	83 c4 0c             	add    esp,0xc
c001466c:	c3                   	ret    
c001466d:	90                   	nop

c001466e <HardDiskController::~HardDiskController()>:
c001466e:	83 ec 0c             	sub    esp,0xc
c0014671:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c0014676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467a:	89 10                	mov    DWORD PTR [eax],edx
c001467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014680:	83 ec 0c             	sub    esp,0xc
c0014683:	50                   	push   eax
c0014684:	e8 cf fa ff ff       	call   c0014158 <Device::~Device()>
c0014689:	83 c4 10             	add    esp,0x10
c001468c:	90                   	nop
c001468d:	83 c4 0c             	add    esp,0xc
c0014690:	c3                   	ret    
c0014691:	90                   	nop

c0014692 <HardDiskController::~HardDiskController()>:
c0014692:	83 ec 0c             	sub    esp,0xc
c0014695:	83 ec 0c             	sub    esp,0xc
c0014698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001469c:	e8 cd ff ff ff       	call   c001466e <HardDiskController::~HardDiskController()>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	83 ec 08             	sub    esp,0x8
c00146a7:	68 58 01 00 00       	push   0x158
c00146ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b0:	e8 bc e6 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	83 c4 0c             	add    esp,0xc
c00146bb:	c3                   	ret    

c00146bc <PhysicalDisk::eject()>:
c00146bc:	83 ec 18             	sub    esp,0x18
c00146bf:	68 ac bc 02 c0       	push   0xc002bcac
c00146c4:	e8 88 e7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00146c9:	83 c8 ff             	or     eax,0xffffffff
c00146cc:	83 c4 1c             	add    esp,0x1c
c00146cf:	c3                   	ret    

c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d7:	83 ec 08             	sub    esp,0x8
c00146da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146de:	50                   	push   eax
c00146df:	e8 aa fd ff ff       	call   c001448e <Device::Device(char const*)>
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	ba dc bc 02 c0       	mov    edx,0xc002bcdc
c00146ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f0:	89 10                	mov    DWORD PTR [eax],edx
c00146f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014701:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001471e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014732:	90                   	nop
c0014733:	83 c4 0c             	add    esp,0xc
c0014736:	c3                   	ret    
c0014737:	90                   	nop

c0014738 <PhysicalDisk::startCache()>:
c0014738:	56                   	push   esi
c0014739:	53                   	push   ebx
c001473a:	83 ec 10             	sub    esp,0x10
c001473d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014741:	6a 44                	push   0x44
c0014743:	e8 44 b1 ff ff       	call   c000f88c <malloc>
c0014748:	89 c6                	mov    esi,eax
c001474a:	58                   	pop    eax
c001474b:	5a                   	pop    edx
c001474c:	53                   	push   ebx
c001474d:	56                   	push   esi
c001474e:	e8 a9 28 00 00       	call   c0016ffc <VCache::VCache(PhysicalDisk*)>
c0014753:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014759:	83 c4 14             	add    esp,0x14
c001475c:	5b                   	pop    ebx
c001475d:	5e                   	pop    esi
c001475e:	c3                   	ret    
c001475f:	90                   	nop

c0014760 <PhysicalDisk::~PhysicalDisk()>:
c0014760:	83 ec 0c             	sub    esp,0xc
c0014763:	ba dc bc 02 c0       	mov    edx,0xc002bcdc
c0014768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476c:	89 10                	mov    DWORD PTR [eax],edx
c001476e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	50                   	push   eax
c0014776:	e8 dd f9 ff ff       	call   c0014158 <Device::~Device()>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	90                   	nop
c001477f:	83 c4 0c             	add    esp,0xc
c0014782:	c3                   	ret    
c0014783:	90                   	nop

c0014784 <PhysicalDisk::~PhysicalDisk()>:
c0014784:	83 ec 0c             	sub    esp,0xc
c0014787:	83 ec 0c             	sub    esp,0xc
c001478a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478e:	e8 cd ff ff ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0014793:	83 c4 10             	add    esp,0x10
c0014796:	83 ec 08             	sub    esp,0x8
c0014799:	68 6c 01 00 00       	push   0x16c
c001479e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a2:	e8 ca e5 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	83 c4 0c             	add    esp,0xc
c00147ad:	c3                   	ret    

c00147ae <FPU::FPU(char const*)>:
c00147ae:	83 ec 0c             	sub    esp,0xc
c00147b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b5:	83 ec 08             	sub    esp,0x8
c00147b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147bc:	50                   	push   eax
c00147bd:	e8 cc fc ff ff       	call   c001448e <Device::Device(char const*)>
c00147c2:	83 c4 10             	add    esp,0x10
c00147c5:	ba 20 bd 02 c0       	mov    edx,0xc002bd20
c00147ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ce:	89 10                	mov    DWORD PTR [eax],edx
c00147d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147de:	90                   	nop
c00147df:	83 c4 0c             	add    esp,0xc
c00147e2:	c3                   	ret    
c00147e3:	90                   	nop

c00147e4 <FPU::~FPU()>:
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	ba 20 bd 02 c0       	mov    edx,0xc002bd20
c00147ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f0:	89 10                	mov    DWORD PTR [eax],edx
c00147f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	50                   	push   eax
c00147fa:	e8 59 f9 ff ff       	call   c0014158 <Device::~Device()>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	90                   	nop
c0014803:	83 c4 0c             	add    esp,0xc
c0014806:	c3                   	ret    
c0014807:	90                   	nop

c0014808 <FPU::~FPU()>:
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014812:	e8 cd ff ff ff       	call   c00147e4 <FPU::~FPU()>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	83 ec 08             	sub    esp,0x8
c001481d:	68 58 01 00 00       	push   0x158
c0014822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014826:	e8 46 e5 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c001482b:	83 c4 10             	add    esp,0x10
c001482e:	83 c4 0c             	add    esp,0xc
c0014831:	c3                   	ret    

c0014832 <setupFPU()>:
c0014832:	53                   	push   ebx
c0014833:	83 ec 08             	sub    esp,0x8
c0014836:	8b 15 68 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f568
c001483c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014843:	74 19                	je     c001485e <setupFPU()+0x2c>
c0014845:	83 ec 0c             	sub    esp,0xc
c0014848:	68 58 01 00 00       	push   0x158
c001484d:	e8 3a b0 ff ff       	call   c000f88c <malloc>
c0014852:	89 c3                	mov    ebx,eax
c0014854:	89 04 24             	mov    DWORD PTR [esp],eax
c0014857:	e8 66 1b 01 00       	call   c00263c2 <AVX::AVX()>
c001485c:	eb 5b                	jmp    c00148b9 <setupFPU()+0x87>
c001485e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014864:	84 c0                	test   al,al
c0014866:	79 19                	jns    c0014881 <setupFPU()+0x4f>
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	68 58 01 00 00       	push   0x158
c0014870:	e8 17 b0 ff ff       	call   c000f88c <malloc>
c0014875:	89 c3                	mov    ebx,eax
c0014877:	89 04 24             	mov    DWORD PTR [esp],eax
c001487a:	e8 69 1c 01 00       	call   c00264e8 <SSE::SSE()>
c001487f:	eb 38                	jmp    c00148b9 <setupFPU()+0x87>
c0014881:	a8 20                	test   al,0x20
c0014883:	74 19                	je     c001489e <setupFPU()+0x6c>
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	68 58 01 00 00       	push   0x158
c001488d:	e8 fa af ff ff       	call   c000f88c <malloc>
c0014892:	89 c3                	mov    ebx,eax
c0014894:	89 04 24             	mov    DWORD PTR [esp],eax
c0014897:	e8 b6 1b 01 00       	call   c0026452 <MMX::MMX()>
c001489c:	eb 1b                	jmp    c00148b9 <setupFPU()+0x87>
c001489e:	a8 10                	test   al,0x10
c00148a0:	74 1c                	je     c00148be <setupFPU()+0x8c>
c00148a2:	83 ec 0c             	sub    esp,0xc
c00148a5:	68 58 01 00 00       	push   0x158
c00148aa:	e8 dd af ff ff       	call   c000f88c <malloc>
c00148af:	89 c3                	mov    ebx,eax
c00148b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b4:	e8 bd 1c 01 00       	call   c0026576 <x87::x87()>
c00148b9:	83 c4 10             	add    esp,0x10
c00148bc:	eb 24                	jmp    c00148e2 <setupFPU()+0xb0>
c00148be:	83 e0 ef             	and    eax,0xffffffef
c00148c1:	83 ec 0c             	sub    esp,0xc
c00148c4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148ca:	68 0c bd 02 c0       	push   0xc002bd0c
c00148cf:	e8 7d e5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00148d4:	0f 20 c0             	mov    eax,cr0
c00148d7:	83 c8 04             	or     eax,0x4
c00148da:	0f 22 c0             	mov    cr0,eax
c00148dd:	31 db                	xor    ebx,ebx
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	89 d8                	mov    eax,ebx
c00148e4:	83 c4 08             	add    esp,0x8
c00148e7:	5b                   	pop    ebx
c00148e8:	c3                   	ret    
c00148e9:	90                   	nop

c00148ea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148f2:	c1 e0 04             	shl    eax,0x4
c00148f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148f9:	8d 50 10             	lea    edx,[eax+0x10]
c00148fc:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014902:	74 08                	je     c001490c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014904:	83 c0 04             	add    eax,0x4
c0014907:	39 d0                	cmp    eax,edx
c0014909:	75 f1                	jne    c00148fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001490b:	c3                   	ret    
c001490c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014916:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014920:	eb e2                	jmp    c0014904 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014922 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014922:	57                   	push   edi
c0014923:	31 c0                	xor    eax,eax
c0014925:	56                   	push   esi
c0014926:	53                   	push   ebx
c0014927:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001492b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001492f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014933:	89 da                	mov    edx,ebx
c0014935:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014939:	c1 e2 04             	shl    edx,0x4
c001493c:	01 ca                	add    edx,ecx
c001493e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014946:	74 16                	je     c001495e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014948:	40                   	inc    eax
c0014949:	83 f8 04             	cmp    eax,0x4
c001494c:	75 f0                	jne    c001493e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001494e:	c7 44 24 10 50 bd 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bd50
c0014956:	5b                   	pop    ebx
c0014957:	5e                   	pop    esi
c0014958:	5f                   	pop    edi
c0014959:	e9 3b 60 00 00       	jmp    c001a999 <Krnl::panic(char const*)>
c001495e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014961:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014964:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001496a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014970:	5b                   	pop    ebx
c0014971:	5e                   	pop    esi
c0014972:	5f                   	pop    edi
c0014973:	c3                   	ret    

c0014974 <doubleFault(regs*, void*)>:
c0014974:	55                   	push   ebp
c0014975:	89 e5                	mov    ebp,esp
c0014977:	83 ec 08             	sub    esp,0x8
c001497a:	83 ec 0c             	sub    esp,0xc
c001497d:	68 8b bd 02 c0       	push   0xc002bd8b
c0014982:	e8 12 60 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0014987:	83 c4 10             	add    esp,0x10
c001498a:	90                   	nop
c001498b:	c9                   	leave  
c001498c:	c3                   	ret    
c001498d:	90                   	nop

c001498e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001498e:	56                   	push   esi
c001498f:	53                   	push   ebx
c0014990:	50                   	push   eax
c0014991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014995:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014999:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001499e:	75 35                	jne    c00149d5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149a0:	8d 43 20             	lea    eax,[ebx+0x20]
c00149a3:	31 d2                	xor    edx,edx
c00149a5:	89 c1                	mov    ecx,eax
c00149a7:	c1 e1 04             	shl    ecx,0x4
c00149aa:	01 f1                	add    ecx,esi
c00149ac:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149b4:	74 3e                	je     c00149f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149b6:	42                   	inc    edx
c00149b7:	83 fa 04             	cmp    edx,0x4
c00149ba:	75 f0                	jne    c00149ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149bc:	83 ec 0c             	sub    esp,0xc
c00149bf:	68 d0 bd 02 c0       	push   0xc002bdd0
c00149c4:	e8 d0 5f 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00149c9:	83 c4 10             	add    esp,0x10
c00149cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149d1:	5a                   	pop    edx
c00149d2:	5b                   	pop    ebx
c00149d3:	5e                   	pop    esi
c00149d4:	c3                   	ret    
c00149d5:	83 ec 0c             	sub    esp,0xc
c00149d8:	56                   	push   esi
c00149d9:	e8 ac fb ff ff       	call   c001458a <Device::getName()>
c00149de:	83 c4 10             	add    esp,0x10
c00149e1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149e4:	75 ba                	jne    c00149a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149e6:	83 fb 0f             	cmp    ebx,0xf
c00149e9:	7f 29                	jg     c0014a14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149eb:	0f b6 9b c0 e7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1840]
c00149f2:	eb ac                	jmp    c00149a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149f4:	8d 04 82             	lea    eax,[edx+eax*4]
c00149f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00149fe:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a08:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a0e:	89 d8                	mov    eax,ebx
c0014a10:	5a                   	pop    edx
c0014a11:	5b                   	pop    ebx
c0014a12:	5e                   	pop    esi
c0014a13:	c3                   	ret    
c0014a14:	83 ec 0c             	sub    esp,0xc
c0014a17:	68 98 bd 02 c0       	push   0xc002bd98
c0014a1c:	e8 78 5f 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0014a21:	83 c4 10             	add    esp,0x10
c0014a24:	e9 77 ff ff ff       	jmp    c00149a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a29:	90                   	nop

c0014a2a <InterruptController::clearAllHandlers(int, bool)>:
c0014a2a:	56                   	push   esi
c0014a2b:	53                   	push   ebx
c0014a2c:	52                   	push   edx
c0014a2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a35:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a3a:	75 61                	jne    c0014a9d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a3c:	8d 46 20             	lea    eax,[esi+0x20]
c0014a3f:	c1 e6 04             	shl    esi,0x4
c0014a42:	c1 e0 04             	shl    eax,0x4
c0014a45:	01 de                	add    esi,ebx
c0014a47:	01 d8                	add    eax,ebx
c0014a49:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a53:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a5d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a67:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a71:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a7b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a85:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a8f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a99:	58                   	pop    eax
c0014a9a:	5b                   	pop    ebx
c0014a9b:	5e                   	pop    esi
c0014a9c:	c3                   	ret    
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	53                   	push   ebx
c0014aa1:	e8 e4 fa ff ff       	call   c001458a <Device::getName()>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aac:	75 8e                	jne    c0014a3c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aae:	83 fe 0f             	cmp    esi,0xf
c0014ab1:	7f 09                	jg     c0014abc <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014ab3:	0f b6 b6 c0 e7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1840]
c0014aba:	eb 80                	jmp    c0014a3c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014abc:	83 ec 0c             	sub    esp,0xc
c0014abf:	68 0c be 02 c0       	push   0xc002be0c
c0014ac4:	e8 d0 5e 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0014ac9:	83 c4 10             	add    esp,0x10
c0014acc:	e9 6b ff ff ff       	jmp    c0014a3c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ad1:	90                   	nop

c0014ad2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ad2:	56                   	push   esi
c0014ad3:	53                   	push   ebx
c0014ad4:	52                   	push   edx
c0014ad5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ad9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014add:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ae2:	75 3a                	jne    c0014b1e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ae4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ae8:	8d 50 20             	lea    edx,[eax+0x20]
c0014aeb:	c1 e2 04             	shl    edx,0x4
c0014aee:	8d 04 16             	lea    eax,[esi+edx*1]
c0014af1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014af5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014afb:	74 0b                	je     c0014b08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014afd:	83 c0 04             	add    eax,0x4
c0014b00:	39 d0                	cmp    eax,edx
c0014b02:	75 f1                	jne    c0014af5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b04:	58                   	pop    eax
c0014b05:	5b                   	pop    ebx
c0014b06:	5e                   	pop    esi
c0014b07:	c3                   	ret    
c0014b08:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b12:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b1c:	eb df                	jmp    c0014afd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b1e:	83 ec 0c             	sub    esp,0xc
c0014b21:	56                   	push   esi
c0014b22:	e8 63 fa ff ff       	call   c001458a <Device::getName()>
c0014b27:	83 c4 10             	add    esp,0x10
c0014b2a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b2d:	75 b5                	jne    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b2f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b34:	7f 11                	jg     c0014b47 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b3a:	0f b6 80 c0 e7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1840]
c0014b41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b45:	eb 9d                	jmp    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b47:	83 ec 0c             	sub    esp,0xc
c0014b4a:	68 0c be 02 c0       	push   0xc002be0c
c0014b4f:	e8 45 5e 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	eb 8b                	jmp    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b59 <nmiHandler(regs*, void*)>:
c0014b59:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0014b5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b62:	e9 6f a4 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014b67 <int_handler>:
c0014b67:	55                   	push   ebp
c0014b68:	57                   	push   edi
c0014b69:	56                   	push   esi
c0014b6a:	53                   	push   ebx
c0014b6b:	83 ec 0c             	sub    esp,0xc
c0014b6e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b72:	80 3d c4 20 03 c0 00 	cmp    BYTE PTR ds:0xc00320c4,0x0
c0014b79:	74 0b                	je     c0014b86 <int_handler+0x1f>
c0014b7b:	fa                   	cli    
c0014b7c:	f4                   	hlt    
c0014b7d:	80 3d c4 20 03 c0 00 	cmp    BYTE PTR ds:0xc00320c4,0x0
c0014b84:	75 f5                	jne    c0014b7b <int_handler+0x14>
c0014b86:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0014b8b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b94:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b9a:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b9d:	83 f8 17             	cmp    eax,0x17
c0014ba0:	77 13                	ja     c0014bb5 <int_handler+0x4e>
c0014ba2:	83 ec 08             	sub    esp,0x8
c0014ba5:	8b 17                	mov    edx,DWORD PTR [edi]
c0014ba7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014baa:	0f b6 c0             	movzx  eax,al
c0014bad:	50                   	push   eax
c0014bae:	57                   	push   edi
c0014baf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	83 c3 15             	add    ebx,0x15
c0014bb8:	c1 e3 04             	shl    ebx,0x4
c0014bbb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bbf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bc6:	31 db                	xor    ebx,ebx
c0014bc8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bcc:	85 c0                	test   eax,eax
c0014bce:	74 13                	je     c0014be3 <int_handler+0x7c>
c0014bd0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bd3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bd7:	74 1c                	je     c0014bf5 <int_handler+0x8e>
c0014bd9:	83 ec 08             	sub    esp,0x8
c0014bdc:	52                   	push   edx
c0014bdd:	56                   	push   esi
c0014bde:	ff d0                	call   eax
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	43                   	inc    ebx
c0014be4:	83 fb 04             	cmp    ebx,0x4
c0014be7:	75 df                	jne    c0014bc8 <int_handler+0x61>
c0014be9:	83 c4 0c             	add    esp,0xc
c0014bec:	31 c0                	xor    eax,eax
c0014bee:	5b                   	pop    ebx
c0014bef:	31 d2                	xor    edx,edx
c0014bf1:	5e                   	pop    esi
c0014bf2:	5f                   	pop    edi
c0014bf3:	5d                   	pop    ebp
c0014bf4:	c3                   	ret    
c0014bf5:	83 ec 08             	sub    esp,0x8
c0014bf8:	52                   	push   edx
c0014bf9:	56                   	push   esi
c0014bfa:	ff d0                	call   eax
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	83 c4 0c             	add    esp,0xc
c0014c02:	5b                   	pop    ebx
c0014c03:	5e                   	pop    esi
c0014c04:	5f                   	pop    edi
c0014c05:	5d                   	pop    ebp
c0014c06:	c3                   	ret    
c0014c07:	90                   	nop

c0014c08 <InterruptController::InterruptController(char const*)>:
c0014c08:	83 ec 1c             	sub    esp,0x1c
c0014c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c0f:	83 ec 08             	sub    esp,0x8
c0014c12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c16:	50                   	push   eax
c0014c17:	e8 72 f8 ff ff       	call   c001448e <Device::Device(char const*)>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	ba cc c0 02 c0       	mov    edx,0xc002c0cc
c0014c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c28:	89 10                	mov    DWORD PTR [eax],edx
c0014c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c2e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c40:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c48:	7f 5e                	jg     c0014ca8 <InterruptController::InterruptController(char const*)+0xa0>
c0014c4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c52:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c57:	7f 49                	jg     c0014ca2 <InterruptController::InterruptController(char const*)+0x9a>
c0014c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c61:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c6c:	01 ca                	add    edx,ecx
c0014c6e:	83 c2 54             	add    edx,0x54
c0014c71:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c8c:	01 ca                	add    edx,ecx
c0014c8e:	81 c2 54 04 00 00    	add    edx,0x454
c0014c94:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c9c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ca0:	eb b0                	jmp    c0014c52 <InterruptController::InterruptController(char const*)+0x4a>
c0014ca2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014ca6:	eb 98                	jmp    c0014c40 <InterruptController::InterruptController(char const*)+0x38>
c0014ca8:	90                   	nop
c0014ca9:	83 c4 1c             	add    esp,0x1c
c0014cac:	c3                   	ret    
c0014cad:	90                   	nop

c0014cae <InterruptController::~InterruptController()>:
c0014cae:	83 ec 0c             	sub    esp,0xc
c0014cb1:	ba cc c0 02 c0       	mov    edx,0xc002c0cc
c0014cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cba:	89 10                	mov    DWORD PTR [eax],edx
c0014cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc0:	83 ec 0c             	sub    esp,0xc
c0014cc3:	50                   	push   eax
c0014cc4:	e8 8f f4 ff ff       	call   c0014158 <Device::~Device()>
c0014cc9:	83 c4 10             	add    esp,0x10
c0014ccc:	90                   	nop
c0014ccd:	83 c4 0c             	add    esp,0xc
c0014cd0:	c3                   	ret    
c0014cd1:	90                   	nop

c0014cd2 <InterruptController::~InterruptController()>:
c0014cd2:	83 ec 0c             	sub    esp,0xc
c0014cd5:	83 ec 0c             	sub    esp,0xc
c0014cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cdc:	e8 cd ff ff ff       	call   c0014cae <InterruptController::~InterruptController()>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	83 ec 08             	sub    esp,0x8
c0014ce7:	68 58 21 00 00       	push   0x2158
c0014cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf0:	e8 7c e0 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	83 c4 0c             	add    esp,0xc
c0014cfb:	c3                   	ret    

c0014cfc <displayDebugInfo(regs*)>:
c0014cfc:	55                   	push   ebp
c0014cfd:	57                   	push   edi
c0014cfe:	56                   	push   esi
c0014cff:	53                   	push   ebx
c0014d00:	83 ec 24             	sub    esp,0x24
c0014d03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d07:	0f 20 c2             	mov    edx,cr0
c0014d0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d0e:	0f 20 d7             	mov    edi,cr2
c0014d11:	0f 20 de             	mov    esi,cr3
c0014d14:	0f 20 e5             	mov    ebp,cr4
c0014d17:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d1a:	68 46 be 02 c0       	push   0xc002be46
c0014d1f:	e8 2d e1 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d24:	59                   	pop    ecx
c0014d25:	58                   	pop    eax
c0014d26:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d29:	68 51 be 02 c0       	push   0xc002be51
c0014d2e:	e8 1e e1 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d33:	58                   	pop    eax
c0014d34:	5a                   	pop    edx
c0014d35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d38:	68 5c be 02 c0       	push   0xc002be5c
c0014d3d:	e8 0f e1 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d42:	59                   	pop    ecx
c0014d43:	58                   	pop    eax
c0014d44:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d47:	68 67 be 02 c0       	push   0xc002be67
c0014d4c:	e8 00 e1 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d51:	58                   	pop    eax
c0014d52:	5a                   	pop    edx
c0014d53:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d56:	68 72 be 02 c0       	push   0xc002be72
c0014d5b:	e8 f1 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d60:	59                   	pop    ecx
c0014d61:	58                   	pop    eax
c0014d62:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d65:	68 7d be 02 c0       	push   0xc002be7d
c0014d6a:	e8 e2 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d6f:	58                   	pop    eax
c0014d70:	5a                   	pop    edx
c0014d71:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d74:	68 88 be 02 c0       	push   0xc002be88
c0014d79:	e8 d3 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	58                   	pop    eax
c0014d80:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d83:	68 93 be 02 c0       	push   0xc002be93
c0014d88:	e8 c4 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d92:	68 9e be 02 c0       	push   0xc002be9e
c0014d97:	e8 b5 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014d9c:	59                   	pop    ecx
c0014d9d:	58                   	pop    eax
c0014d9e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014da1:	68 ad be 02 c0       	push   0xc002bead
c0014da6:	e8 a6 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014dab:	58                   	pop    eax
c0014dac:	5a                   	pop    edx
c0014dad:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014db0:	68 b8 be 02 c0       	push   0xc002beb8
c0014db5:	e8 97 e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014dba:	59                   	pop    ecx
c0014dbb:	58                   	pop    eax
c0014dbc:	57                   	push   edi
c0014dbd:	68 c3 be 02 c0       	push   0xc002bec3
c0014dc2:	e8 8a e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014dc7:	58                   	pop    eax
c0014dc8:	5a                   	pop    edx
c0014dc9:	56                   	push   esi
c0014dca:	68 ce be 02 c0       	push   0xc002bece
c0014dcf:	e8 7d e0 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0014dd4:	59                   	pop    ecx
c0014dd5:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014dda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de0:	e8 75 be ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c0014de5:	58                   	pop    eax
c0014de6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014de9:	5a                   	pop    edx
c0014dea:	c1 e0 05             	shl    eax,0x5
c0014ded:	05 20 e5 02 c0       	add    eax,0xc002e520
c0014df2:	50                   	push   eax
c0014df3:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014df8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfe:	e8 e3 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e03:	59                   	pop    ecx
c0014e04:	58                   	pop    eax
c0014e05:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e0a:	68 d9 be 02 c0       	push   0xc002bed9
c0014e0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e15:	e8 cc c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e1a:	58                   	pop    eax
c0014e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e20:	5a                   	pop    edx
c0014e21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e24:	83 c0 0c             	add    eax,0xc
c0014e27:	50                   	push   eax
c0014e28:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e33:	e8 ae c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e38:	59                   	pop    ecx
c0014e39:	58                   	pop    eax
c0014e3a:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e3f:	68 e2 be 02 c0       	push   0xc002bee2
c0014e44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4a:	e8 97 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e4f:	58                   	pop    eax
c0014e50:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e55:	5a                   	pop    edx
c0014e56:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e5f:	e8 a8 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e64:	59                   	pop    ecx
c0014e65:	58                   	pop    eax
c0014e66:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e6b:	68 ea be 02 c0       	push   0xc002beea
c0014e70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e76:	e8 6b c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e7b:	58                   	pop    eax
c0014e7c:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e81:	5a                   	pop    edx
c0014e82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8b:	e8 7c c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e90:	59                   	pop    ecx
c0014e91:	58                   	pop    eax
c0014e92:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014e97:	68 f2 be 02 c0       	push   0xc002bef2
c0014e9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea2:	e8 3f c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014ea7:	58                   	pop    eax
c0014ea8:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014ead:	5a                   	pop    edx
c0014eae:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014eb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb7:	e8 50 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014ebc:	59                   	pop    ecx
c0014ebd:	58                   	pop    eax
c0014ebe:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014ec3:	68 fa be 02 c0       	push   0xc002befa
c0014ec8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ece:	e8 13 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014ed3:	58                   	pop    eax
c0014ed4:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014ed9:	5a                   	pop    edx
c0014eda:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014edd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee3:	e8 24 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014ee8:	59                   	pop    ecx
c0014ee9:	58                   	pop    eax
c0014eea:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014eef:	68 02 bf 02 c0       	push   0xc002bf02
c0014ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efa:	e8 e7 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014eff:	58                   	pop    eax
c0014f00:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f05:	5a                   	pop    edx
c0014f06:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0f:	e8 f8 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f14:	59                   	pop    ecx
c0014f15:	58                   	pop    eax
c0014f16:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f1b:	68 0a bf 02 c0       	push   0xc002bf0a
c0014f20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f26:	e8 bb c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f2b:	58                   	pop    eax
c0014f2c:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f31:	5a                   	pop    edx
c0014f32:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3b:	e8 cc c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f40:	59                   	pop    ecx
c0014f41:	58                   	pop    eax
c0014f42:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f47:	68 12 bf 02 c0       	push   0xc002bf12
c0014f4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f52:	e8 8f c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f57:	58                   	pop    eax
c0014f58:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f5d:	5a                   	pop    edx
c0014f5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f62:	52                   	push   edx
c0014f63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f69:	e8 9e c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f6e:	59                   	pop    ecx
c0014f6f:	58                   	pop    eax
c0014f70:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f75:	68 1b bf 02 c0       	push   0xc002bf1b
c0014f7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f80:	e8 61 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f85:	58                   	pop    eax
c0014f86:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f8b:	5a                   	pop    edx
c0014f8c:	57                   	push   edi
c0014f8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f93:	e8 74 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f98:	59                   	pop    ecx
c0014f99:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014f9e:	5f                   	pop    edi
c0014f9f:	68 23 bf 02 c0       	push   0xc002bf23
c0014fa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faa:	e8 37 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014faf:	58                   	pop    eax
c0014fb0:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014fb5:	5a                   	pop    edx
c0014fb6:	56                   	push   esi
c0014fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbd:	e8 4a c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fc2:	59                   	pop    ecx
c0014fc3:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014fc8:	5e                   	pop    esi
c0014fc9:	68 2b bf 02 c0       	push   0xc002bf2b
c0014fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd4:	e8 0d c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014fd9:	5f                   	pop    edi
c0014fda:	58                   	pop    eax
c0014fdb:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014fe0:	55                   	push   ebp
c0014fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe7:	e8 20 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fec:	58                   	pop    eax
c0014fed:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0014ff2:	5a                   	pop    edx
c0014ff3:	68 33 bf 02 c0       	push   0xc002bf33
c0014ff8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffe:	e8 e3 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015003:	0f 21 c0             	mov    eax,db0
c0015006:	59                   	pop    ecx
c0015007:	5e                   	pop    esi
c0015008:	50                   	push   eax
c0015009:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001500e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015014:	e8 f3 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015019:	5f                   	pop    edi
c001501a:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001501f:	5d                   	pop    ebp
c0015020:	68 3c bf 02 c0       	push   0xc002bf3c
c0015025:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502b:	e8 b6 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015030:	0f 21 c8             	mov    eax,db1
c0015033:	5a                   	pop    edx
c0015034:	59                   	pop    ecx
c0015035:	50                   	push   eax
c0015036:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 c6 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015046:	5e                   	pop    esi
c0015047:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001504c:	5f                   	pop    edi
c001504d:	68 44 bf 02 c0       	push   0xc002bf44
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 89 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001505d:	0f 21 d0             	mov    eax,db2
c0015060:	5d                   	pop    ebp
c0015061:	5a                   	pop    edx
c0015062:	50                   	push   eax
c0015063:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0015068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506e:	e8 99 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015073:	59                   	pop    ecx
c0015074:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0015079:	5e                   	pop    esi
c001507a:	68 4c bf 02 c0       	push   0xc002bf4c
c001507f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015085:	e8 5c bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001508a:	0f 21 d8             	mov    eax,db3
c001508d:	5f                   	pop    edi
c001508e:	5d                   	pop    ebp
c001508f:	50                   	push   eax
c0015090:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0015095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509b:	e8 6c bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c00150a0:	58                   	pop    eax
c00150a1:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c00150a6:	5a                   	pop    edx
c00150a7:	68 54 bf 02 c0       	push   0xc002bf54
c00150ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b2:	e8 2f bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c00150b7:	0f 21 f0             	mov    eax,db6
c00150ba:	59                   	pop    ecx
c00150bb:	5e                   	pop    esi
c00150bc:	50                   	push   eax
c00150bd:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c00150c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c8:	e8 3f bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c00150cd:	5f                   	pop    edi
c00150ce:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c00150d3:	5d                   	pop    ebp
c00150d4:	68 5c bf 02 c0       	push   0xc002bf5c
c00150d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150df:	e8 02 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c00150e4:	0f 21 f8             	mov    eax,db7
c00150e7:	5a                   	pop    edx
c00150e8:	59                   	pop    ecx
c00150e9:	50                   	push   eax
c00150ea:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c00150ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f5:	e8 12 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c00150fa:	5e                   	pop    esi
c00150fb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150fe:	e8 19 8c 00 00       	call   c001dd1c <Thr::getDriverNameFromAddress(unsigned long)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	85 c0                	test   eax,eax
c0015108:	74 7d                	je     c0015187 <displayDebugInfo(regs*)+0x48b>
c001510a:	89 c6                	mov    esi,eax
c001510c:	50                   	push   eax
c001510d:	50                   	push   eax
c001510e:	56                   	push   esi
c001510f:	68 64 bf 02 c0       	push   0xc002bf64
c0015114:	e8 38 dd ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0015119:	5a                   	pop    edx
c001511a:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001511f:	59                   	pop    ecx
c0015120:	68 72 bf 02 c0       	push   0xc002bf72
c0015125:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512b:	e8 b6 be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015130:	5f                   	pop    edi
c0015131:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0015136:	5d                   	pop    ebp
c0015137:	56                   	push   esi
c0015138:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513e:	e8 a3 be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015143:	58                   	pop    eax
c0015144:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0015149:	5a                   	pop    edx
c001514a:	68 7e bf 02 c0       	push   0xc002bf7e
c001514f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015155:	e8 8c be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001515a:	59                   	pop    ecx
c001515b:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0015160:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015166:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015169:	e8 e5 8b 00 00       	call   c001dd53 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001516e:	5b                   	pop    ebx
c001516f:	5d                   	pop    ebp
c0015170:	50                   	push   eax
c0015171:	57                   	push   edi
c0015172:	e8 95 be ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015177:	58                   	pop    eax
c0015178:	5a                   	pop    edx
c0015179:	56                   	push   esi
c001517a:	68 8a bf 02 c0       	push   0xc002bf8a
c001517f:	e8 cd dc ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	fa                   	cli    
c0015188:	f4                   	hlt    
c0015189:	eb fe                	jmp    c0015189 <displayDebugInfo(regs*)+0x48d>

c001518b <x87EmulHandler(regs*, void*)>:
c001518b:	83 ec 0c             	sub    esp,0xc
c001518e:	0f 20 c2             	mov    edx,cr0
c0015191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015196:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001519a:	75 4b                	jne    c00151e7 <x87EmulHandler(regs*, void*)+0x5c>
c001519c:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00151a1:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00151a7:	85 c0                	test   eax,eax
c00151a9:	74 05                	je     c00151b0 <x87EmulHandler(regs*, void*)+0x25>
c00151ab:	83 e2 08             	and    edx,0x8
c00151ae:	75 17                	jne    c00151c7 <x87EmulHandler(regs*, void*)+0x3c>
c00151b0:	83 ec 0c             	sub    esp,0xc
c00151b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151b7:	e8 d0 b1 00 00       	call   c002038c <Vm::x87Handler(regs*)>
c00151bc:	83 c4 10             	add    esp,0x10
c00151bf:	84 c0                	test   al,al
c00151c1:	74 24                	je     c00151e7 <x87EmulHandler(regs*, void*)+0x5c>
c00151c3:	83 c4 0c             	add    esp,0xc
c00151c6:	c3                   	ret    
c00151c7:	83 ec 0c             	sub    esp,0xc
c00151ca:	68 b0 bf 02 c0       	push   0xc002bfb0
c00151cf:	e8 7d dc ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00151d4:	0f 06                	clts   
c00151d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151db:	83 c4 10             	add    esp,0x10
c00151de:	a3 08 f7 02 c0       	mov    ds:0xc002f708,eax
c00151e3:	83 c4 0c             	add    esp,0xc
c00151e6:	c3                   	ret    
c00151e7:	83 ec 0c             	sub    esp,0xc
c00151ea:	68 9a bf 02 c0       	push   0xc002bf9a
c00151ef:	e8 5d dc ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00151f4:	5a                   	pop    edx
c00151f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151f9:	e8 fe fa ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c00151fe <gpFault(regs*, void*)>:
c00151fe:	53                   	push   ebx
c00151ff:	83 ec 14             	sub    esp,0x14
c0015202:	c7 05 04 f7 02 c0 09 f7 01 c0 	mov    DWORD PTR ds:0xc002f704,0xc001f709
c001520c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015210:	53                   	push   ebx
c0015211:	e8 f3 a4 00 00       	call   c001f709 <Vm::faultHandler(regs*)>
c0015216:	83 c4 10             	add    esp,0x10
c0015219:	84 c0                	test   al,al
c001521b:	74 05                	je     c0015222 <gpFault(regs*, void*)+0x24>
c001521d:	83 c4 08             	add    esp,0x8
c0015220:	5b                   	pop    ebx
c0015221:	c3                   	ret    
c0015222:	83 ec 0c             	sub    esp,0xc
c0015225:	68 bd bf 02 c0       	push   0xc002bfbd
c001522a:	e8 22 dc ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001522f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015232:	e8 c5 fa ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c0015237 <pgFault(regs*, void*)>:
c0015237:	83 ec 18             	sub    esp,0x18
c001523a:	68 d8 bf 02 c0       	push   0xc002bfd8
c001523f:	e8 0d dc ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0015244:	58                   	pop    eax
c0015245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015249:	e8 ae fa ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c001524e <otherISRHandler(regs*, void*)>:
c001524e:	53                   	push   ebx
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015256:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015259:	50                   	push   eax
c001525a:	50                   	push   eax
c001525b:	68 e4 bf 02 c0       	push   0xc002bfe4
c0015260:	e8 ec db ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0015265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015268:	e8 8f fa ff ff       	call   c0014cfc <displayDebugInfo(regs*)>

c001526d <opcodeFault(regs*, void*)>:
c001526d:	55                   	push   ebp
c001526e:	89 e5                	mov    ebp,esp
c0015270:	56                   	push   esi
c0015271:	53                   	push   ebx
c0015272:	83 ec 40             	sub    esp,0x40
c0015275:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001527a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015280:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015286:	84 c0                	test   al,al
c0015288:	74 24                	je     c00152ae <opcodeFault(regs*, void*)+0x41>
c001528a:	83 ec 0c             	sub    esp,0xc
c001528d:	68 04 c0 02 c0       	push   0xc002c004
c0015292:	e8 ba db ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a0:	8d 50 19             	lea    edx,[eax+0x19]
c00152a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a9:	e9 d5 05 00 00       	jmp    c0015883 <opcodeFault(regs*, void*)+0x616>
c00152ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152b7:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152bb:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cb:	8a 00                	mov    al,BYTE PTR [eax]
c00152cd:	3c f0                	cmp    al,0xf0
c00152cf:	75 17                	jne    c00152e8 <opcodeFault(regs*, void*)+0x7b>
c00152d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152da:	8d 50 01             	lea    edx,[eax+0x1]
c00152dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152e3:	e9 da 00 00 00       	jmp    c00153c2 <opcodeFault(regs*, void*)+0x155>
c00152e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152eb:	8a 00                	mov    al,BYTE PTR [eax]
c00152ed:	3c f2                	cmp    al,0xf2
c00152ef:	74 09                	je     c00152fa <opcodeFault(regs*, void*)+0x8d>
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8a 00                	mov    al,BYTE PTR [eax]
c00152f6:	3c f3                	cmp    al,0xf3
c00152f8:	75 1b                	jne    c0015315 <opcodeFault(regs*, void*)+0xa8>
c00152fa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015304:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015307:	8d 50 01             	lea    edx,[eax+0x1]
c001530a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015310:	e9 ad 00 00 00       	jmp    c00153c2 <opcodeFault(regs*, void*)+0x155>
c0015315:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015318:	8a 00                	mov    al,BYTE PTR [eax]
c001531a:	3c 66                	cmp    al,0x66
c001531c:	75 1f                	jne    c001533d <opcodeFault(regs*, void*)+0xd0>
c001531e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015322:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015326:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532f:	8d 50 01             	lea    edx,[eax+0x1]
c0015332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015335:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015338:	e9 85 00 00 00       	jmp    c00153c2 <opcodeFault(regs*, void*)+0x155>
c001533d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015340:	8a 00                	mov    al,BYTE PTR [eax]
c0015342:	3c 67                	cmp    al,0x67
c0015344:	75 18                	jne    c001535e <opcodeFault(regs*, void*)+0xf1>
c0015346:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001534a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001534d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015350:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015353:	8d 50 01             	lea    edx,[eax+0x1]
c0015356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015359:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001535c:	eb 64                	jmp    c00153c2 <opcodeFault(regs*, void*)+0x155>
c001535e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015361:	8a 00                	mov    al,BYTE PTR [eax]
c0015363:	3c 2e                	cmp    al,0x2e
c0015365:	74 09                	je     c0015370 <opcodeFault(regs*, void*)+0x103>
c0015367:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536a:	8a 00                	mov    al,BYTE PTR [eax]
c001536c:	3c 3e                	cmp    al,0x3e
c001536e:	75 18                	jne    c0015388 <opcodeFault(regs*, void*)+0x11b>
c0015370:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015374:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537d:	8d 50 01             	lea    edx,[eax+0x1]
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015386:	eb 3a                	jmp    c00153c2 <opcodeFault(regs*, void*)+0x155>
c0015388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538b:	8a 00                	mov    al,BYTE PTR [eax]
c001538d:	3c 36                	cmp    al,0x36
c001538f:	74 1b                	je     c00153ac <opcodeFault(regs*, void*)+0x13f>
c0015391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015394:	8a 00                	mov    al,BYTE PTR [eax]
c0015396:	3c 26                	cmp    al,0x26
c0015398:	74 12                	je     c00153ac <opcodeFault(regs*, void*)+0x13f>
c001539a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539d:	8a 00                	mov    al,BYTE PTR [eax]
c001539f:	3c 64                	cmp    al,0x64
c00153a1:	74 09                	je     c00153ac <opcodeFault(regs*, void*)+0x13f>
c00153a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a6:	8a 00                	mov    al,BYTE PTR [eax]
c00153a8:	3c 65                	cmp    al,0x65
c00153aa:	75 16                	jne    c00153c2 <opcodeFault(regs*, void*)+0x155>
c00153ac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b9:	8d 50 01             	lea    edx,[eax+0x1]
c00153bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c5:	8a 00                	mov    al,BYTE PTR [eax]
c00153c7:	3c 0f                	cmp    al,0xf
c00153c9:	0f 85 ad 00 00 00    	jne    c001547c <opcodeFault(regs*, void*)+0x20f>
c00153cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d2:	40                   	inc    eax
c00153d3:	8a 00                	mov    al,BYTE PTR [eax]
c00153d5:	3c c2                	cmp    al,0xc2
c00153d7:	74 0e                	je     c00153e7 <opcodeFault(regs*, void*)+0x17a>
c00153d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dc:	40                   	inc    eax
c00153dd:	8a 00                	mov    al,BYTE PTR [eax]
c00153df:	3c c3                	cmp    al,0xc3
c00153e1:	0f 85 95 00 00 00    	jne    c001547c <opcodeFault(regs*, void*)+0x20f>
c00153e7:	83 ec 0c             	sub    esp,0xc
c00153ea:	68 27 c0 02 c0       	push   0xc002c027
c00153ef:	e8 5d da ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153fd:	8d 50 01             	lea    edx,[eax+0x1]
c0015400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015403:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015406:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540c:	8a 00                	mov    al,BYTE PTR [eax]
c001540e:	8d 50 fe             	lea    edx,[eax-0x2]
c0015411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015414:	88 10                	mov    BYTE PTR [eax],dl
c0015416:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015419:	50                   	push   eax
c001541a:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001541d:	50                   	push   eax
c001541e:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015421:	50                   	push   eax
c0015422:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015425:	e8 3c 4c 00 00       	call   c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015430:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015433:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015436:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015439:	01 d0                	add    eax,edx
c001543b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001543e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015441:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015444:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015447:	48                   	dec    eax
c0015448:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001544b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015451:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015457:	83 ec 04             	sub    esp,0x4
c001545a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001545d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015460:	50                   	push   eax
c0015461:	e8 4e ad fe ff       	call   c00001b4 <voodooXADD>
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001546c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001546f:	01 c2                	add    edx,eax
c0015471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015474:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015477:	e9 07 04 00 00       	jmp    c0015883 <opcodeFault(regs*, void*)+0x616>
c001547c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547f:	8a 00                	mov    al,BYTE PTR [eax]
c0015481:	3c 0f                	cmp    al,0xf
c0015483:	0f 85 8b 01 00 00    	jne    c0015614 <opcodeFault(regs*, void*)+0x3a7>
c0015489:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548c:	40                   	inc    eax
c001548d:	8a 00                	mov    al,BYTE PTR [eax]
c001548f:	3c c7                	cmp    al,0xc7
c0015491:	0f 86 7d 01 00 00    	jbe    c0015614 <opcodeFault(regs*, void*)+0x3a7>
c0015497:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549a:	40                   	inc    eax
c001549b:	8a 00                	mov    al,BYTE PTR [eax]
c001549d:	3c cf                	cmp    al,0xcf
c001549f:	0f 87 6f 01 00 00    	ja     c0015614 <opcodeFault(regs*, void*)+0x3a7>
c00154a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a8:	40                   	inc    eax
c00154a9:	8a 00                	mov    al,BYTE PTR [eax]
c00154ab:	83 c0 38             	add    eax,0x38
c00154ae:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154b1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154b5:	75 0b                	jne    c00154c2 <opcodeFault(regs*, void*)+0x255>
c00154b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ba:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c0:	eb 75                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c00154c2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154c6:	75 0b                	jne    c00154d3 <opcodeFault(regs*, void*)+0x266>
c00154c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154d1:	eb 64                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c00154d3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154d7:	75 0b                	jne    c00154e4 <opcodeFault(regs*, void*)+0x277>
c00154d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e2:	eb 53                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c00154e4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154e8:	75 0b                	jne    c00154f5 <opcodeFault(regs*, void*)+0x288>
c00154ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154f0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f3:	eb 42                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c00154f5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154f9:	75 0b                	jne    c0015506 <opcodeFault(regs*, void*)+0x299>
c00154fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fe:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015501:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015504:	eb 31                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c0015506:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001550a:	75 0b                	jne    c0015517 <opcodeFault(regs*, void*)+0x2aa>
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015512:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015515:	eb 20                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c0015517:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001551b:	75 0b                	jne    c0015528 <opcodeFault(regs*, void*)+0x2bb>
c001551d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015520:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015523:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015526:	eb 0f                	jmp    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c0015528:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001552c:	75 09                	jne    c0015537 <opcodeFault(regs*, void*)+0x2ca>
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015534:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015537:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001553b:	74 10                	je     c001554d <opcodeFault(regs*, void*)+0x2e0>
c001553d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015544:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001554b:	eb 2d                	jmp    c001557a <opcodeFault(regs*, void*)+0x30d>
c001554d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015550:	c1 e0 18             	shl    eax,0x18
c0015553:	89 c2                	mov    edx,eax
c0015555:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015558:	c1 e0 08             	shl    eax,0x8
c001555b:	25 00 00 ff 00       	and    eax,0xff0000
c0015560:	09 c2                	or     edx,eax
c0015562:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015565:	c1 e8 08             	shr    eax,0x8
c0015568:	25 00 ff 00 00       	and    eax,0xff00
c001556d:	09 c2                	or     edx,eax
c001556f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015572:	c1 e8 18             	shr    eax,0x18
c0015575:	09 d0                	or     eax,edx
c0015577:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001557e:	75 0b                	jne    c001558b <opcodeFault(regs*, void*)+0x31e>
c0015580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015583:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015586:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015589:	eb 75                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c001558b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001558f:	75 0b                	jne    c001559c <opcodeFault(regs*, void*)+0x32f>
c0015591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015594:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015597:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001559a:	eb 64                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c001559c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155a0:	75 0b                	jne    c00155ad <opcodeFault(regs*, void*)+0x340>
c00155a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155ab:	eb 53                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c00155ad:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155b1:	75 0b                	jne    c00155be <opcodeFault(regs*, void*)+0x351>
c00155b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155bc:	eb 42                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c00155be:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155c2:	75 0b                	jne    c00155cf <opcodeFault(regs*, void*)+0x362>
c00155c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ca:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155cd:	eb 31                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c00155cf:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155d3:	75 0b                	jne    c00155e0 <opcodeFault(regs*, void*)+0x373>
c00155d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155de:	eb 20                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c00155e0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155e4:	75 0b                	jne    c00155f1 <opcodeFault(regs*, void*)+0x384>
c00155e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ef:	eb 0f                	jmp    c0015600 <opcodeFault(regs*, void*)+0x393>
c00155f1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155f5:	75 09                	jne    c0015600 <opcodeFault(regs*, void*)+0x393>
c00155f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015603:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015606:	8d 50 02             	lea    edx,[eax+0x2]
c0015609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001560f:	e9 6f 02 00 00       	jmp    c0015883 <opcodeFault(regs*, void*)+0x616>
c0015614:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015617:	8a 00                	mov    al,BYTE PTR [eax]
c0015619:	3c 0f                	cmp    al,0xf
c001561b:	0f 85 8d 01 00 00    	jne    c00157ae <opcodeFault(regs*, void*)+0x541>
c0015621:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015624:	40                   	inc    eax
c0015625:	8a 00                	mov    al,BYTE PTR [eax]
c0015627:	3c c7                	cmp    al,0xc7
c0015629:	0f 85 7f 01 00 00    	jne    c00157ae <opcodeFault(regs*, void*)+0x541>
c001562f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015638:	8d 50 01             	lea    edx,[eax+0x1]
c001563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015641:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015644:	50                   	push   eax
c0015645:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015648:	50                   	push   eax
c0015649:	8d 45 bc             	lea    eax,[ebp-0x44]
c001564c:	50                   	push   eax
c001564d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015650:	e8 11 4a 00 00       	call   c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001565b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001565e:	83 f0 01             	xor    eax,0x1
c0015661:	84 c0                	test   al,al
c0015663:	0f 84 45 01 00 00    	je     c00157ae <opcodeFault(regs*, void*)+0x541>
c0015669:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001566c:	3c 01                	cmp    al,0x1
c001566e:	0f 85 3a 01 00 00    	jne    c00157ae <opcodeFault(regs*, void*)+0x541>
c0015674:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015677:	83 f0 01             	xor    eax,0x1
c001567a:	84 c0                	test   al,al
c001567c:	0f 84 2c 01 00 00    	je     c00157ae <opcodeFault(regs*, void*)+0x541>
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015688:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001568b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015692:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015695:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015698:	89 c2                	mov    edx,eax
c001569a:	b8 00 00 00 00       	mov    eax,0x0
c001569f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156a2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156ab:	ba 00 00 00 00       	mov    edx,0x0
c00156b0:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156b3:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156bc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156bf:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156c6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156c9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156cc:	89 c2                	mov    edx,eax
c00156ce:	b8 00 00 00 00       	mov    eax,0x0
c00156d3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156d6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156df:	ba 00 00 00 00       	mov    edx,0x0
c00156e4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156e7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156ea:	fa                   	cli    
c00156eb:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c00156f0:	40                   	inc    eax
c00156f1:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c00156f6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156f9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fe:	89 c1                	mov    ecx,eax
c0015700:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015703:	89 cb                	mov    ebx,ecx
c0015705:	89 d0                	mov    eax,edx
c0015707:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001570a:	89 c6                	mov    esi,eax
c001570c:	89 f0                	mov    eax,esi
c001570e:	09 d8                	or     eax,ebx
c0015710:	85 c0                	test   eax,eax
c0015712:	75 21                	jne    c0015735 <opcodeFault(regs*, void*)+0x4c8>
c0015714:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015717:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001571a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001571d:	89 01                	mov    DWORD PTR [ecx],eax
c001571f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015725:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015728:	83 c8 40             	or     eax,0x40
c001572b:	89 c2                	mov    edx,eax
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015733:	eb 3e                	jmp    c0015773 <opcodeFault(regs*, void*)+0x506>
c0015735:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001573b:	8b 00                	mov    eax,DWORD PTR [eax]
c001573d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015740:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015743:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015749:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001574c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001574f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015752:	89 d0                	mov    eax,edx
c0015754:	31 d2                	xor    edx,edx
c0015756:	89 c3                	mov    ebx,eax
c0015758:	89 d6                	mov    esi,edx
c001575a:	89 da                	mov    edx,ebx
c001575c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015765:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015768:	83 e0 bf             	and    eax,0xffffffbf
c001576b:	89 c2                	mov    edx,eax
c001576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015770:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015773:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015778:	48                   	dec    eax
c0015779:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001577e:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015783:	85 c0                	test   eax,eax
c0015785:	75 01                	jne    c0015788 <opcodeFault(regs*, void*)+0x51b>
c0015787:	fb                   	sti    
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001578e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015791:	01 c2                	add    edx,eax
c0015793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015796:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015799:	83 ec 0c             	sub    esp,0xc
c001579c:	68 36 c0 02 c0       	push   0xc002c036
c00157a1:	e8 ab d6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	e9 d5 00 00 00       	jmp    c0015883 <opcodeFault(regs*, void*)+0x616>
c00157ae:	83 ec 0c             	sub    esp,0xc
c00157b1:	68 49 c0 02 c0       	push   0xc002c049
c00157b6:	e8 96 d6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00157bb:	83 c4 10             	add    esp,0x10
c00157be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ca:	c1 e0 04             	shl    eax,0x4
c00157cd:	01 d0                	add    eax,edx
c00157cf:	83 c0 03             	add    eax,0x3
c00157d2:	8a 00                	mov    al,BYTE PTR [eax]
c00157d4:	0f b6 d8             	movzx  ebx,al
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e3:	c1 e0 04             	shl    eax,0x4
c00157e6:	01 d0                	add    eax,edx
c00157e8:	83 c0 02             	add    eax,0x2
c00157eb:	8a 00                	mov    al,BYTE PTR [eax]
c00157ed:	0f b6 c8             	movzx  ecx,al
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157fc:	c1 e0 04             	shl    eax,0x4
c00157ff:	01 d0                	add    eax,edx
c0015801:	40                   	inc    eax
c0015802:	8a 00                	mov    al,BYTE PTR [eax]
c0015804:	0f b6 d0             	movzx  edx,al
c0015807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015810:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015813:	c1 e0 04             	shl    eax,0x4
c0015816:	01 f0                	add    eax,esi
c0015818:	8a 00                	mov    al,BYTE PTR [eax]
c001581a:	0f b6 c0             	movzx  eax,al
c001581d:	83 ec 0c             	sub    esp,0xc
c0015820:	53                   	push   ebx
c0015821:	51                   	push   ecx
c0015822:	52                   	push   edx
c0015823:	50                   	push   eax
c0015824:	68 5c c0 02 c0       	push   0xc002c05c
c0015829:	e8 23 d6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001582e:	83 c4 20             	add    esp,0x20
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015837:	83 c0 03             	add    eax,0x3
c001583a:	8a 00                	mov    al,BYTE PTR [eax]
c001583c:	0f b6 d8             	movzx  ebx,al
c001583f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015842:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015845:	83 c0 02             	add    eax,0x2
c0015848:	8a 00                	mov    al,BYTE PTR [eax]
c001584a:	0f b6 c8             	movzx  ecx,al
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015853:	40                   	inc    eax
c0015854:	8a 00                	mov    al,BYTE PTR [eax]
c0015856:	0f b6 d0             	movzx  edx,al
c0015859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001585f:	8a 00                	mov    al,BYTE PTR [eax]
c0015861:	0f b6 c0             	movzx  eax,al
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	53                   	push   ebx
c0015868:	51                   	push   ecx
c0015869:	52                   	push   edx
c001586a:	50                   	push   eax
c001586b:	68 84 c0 02 c0       	push   0xc002c084
c0015870:	e8 dc d5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0015875:	83 c4 20             	add    esp,0x20
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001587e:	e8 79 f4 ff ff       	call   c0014cfc <displayDebugInfo(regs*)>
c0015883:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015886:	5b                   	pop    ebx
c0015887:	5e                   	pop    esi
c0015888:	5d                   	pop    ebp
c0015889:	c3                   	ret    

c001588a <displayProgramFault(char const*)>:
c001588a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015892:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015898:	85 c0                	test   eax,eax
c001589a:	74 15                	je     c00158b1 <displayProgramFault(char const*)+0x27>
c001589c:	83 ec 0c             	sub    esp,0xc
c001589f:	6a 04                	push   0x4
c00158a1:	6a 0f                	push   0xf
c00158a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158a7:	50                   	push   eax
c00158a8:	e8 7b b4 ff ff       	call   c0010d28 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158ad:	83 c4 1c             	add    esp,0x1c
c00158b0:	c3                   	ret    
c00158b1:	c3                   	ret    

c00158b2 <setupInterruptController()>:
c00158b2:	55                   	push   ebp
c00158b3:	89 e5                	mov    ebp,esp
c00158b5:	53                   	push   ebx
c00158b6:	83 ec 24             	sub    esp,0x24
c00158b9:	b8 00 00 00 00       	mov    eax,0x0
c00158be:	85 c0                	test   eax,eax
c00158c0:	0f 95 c0             	setne  al
c00158c3:	84 c0                	test   al,al
c00158c5:	74 5b                	je     c0015922 <setupInterruptController()+0x70>
c00158c7:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158d4:	e8 b3 9f ff ff       	call   c000f88c <malloc>
c00158d9:	83 c4 10             	add    esp,0x10
c00158dc:	89 c3                	mov    ebx,eax
c00158de:	83 ec 0c             	sub    esp,0xc
c00158e1:	53                   	push   ebx
c00158e2:	e8 cd 0e 01 00       	call   c00267b4 <APIC::APIC()>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f5:	83 c0 08             	add    eax,0x8
c00158f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fa:	6a 00                	push   0x0
c00158fc:	6a 00                	push   0x0
c00158fe:	6a 00                	push   0x0
c0015900:	52                   	push   edx
c0015901:	ff d0                	call   eax
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001590b:	83 ec 08             	sub    esp,0x8
c001590e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015911:	50                   	push   eax
c0015912:	e8 73 e9 ff ff       	call   c001428a <Device::addChild(Device*)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001591d:	e9 89 03 00 00       	jmp    c0015cab <setupInterruptController()+0x3f9>
c0015922:	a0 00 1f 03 c0       	mov    al,ds:0xc0031f00
c0015927:	84 c0                	test   al,al
c0015929:	75 24                	jne    c001594f <setupInterruptController()+0x9d>
c001592b:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0015930:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015936:	83 e2 fe             	and    edx,0xfffffffe
c0015939:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001593f:	83 ec 0c             	sub    esp,0xc
c0015942:	68 a9 c0 02 c0       	push   0xc002c0a9
c0015947:	e8 05 d5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0015954:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001595a:	83 e0 01             	and    eax,0x1
c001595d:	84 c0                	test   al,al
c001595f:	0f 95 c0             	setne  al
c0015962:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015965:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015972:	e8 15 9f ff ff       	call   c000f88c <malloc>
c0015977:	83 c4 10             	add    esp,0x10
c001597a:	89 c3                	mov    ebx,eax
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	53                   	push   ebx
c0015980:	e8 87 13 01 00       	call   c0026d0c <PIC::PIC()>
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001598b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001598e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015991:	8b 00                	mov    eax,DWORD PTR [eax]
c0015993:	83 c0 08             	add    eax,0x8
c0015996:	8b 00                	mov    eax,DWORD PTR [eax]
c0015998:	6a 00                	push   0x0
c001599a:	6a 00                	push   0x0
c001599c:	6a 00                	push   0x0
c001599e:	52                   	push   edx
c001599f:	ff d0                	call   eax
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159a8:	74 73                	je     c0015a1d <setupInterruptController()+0x16b>
c00159aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b2:	83 c0 0c             	add    eax,0xc
c00159b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b7:	6a 00                	push   0x0
c00159b9:	6a 00                	push   0x0
c00159bb:	6a 00                	push   0x0
c00159bd:	52                   	push   edx
c00159be:	ff d0                	call   eax
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159c7:	74 15                	je     c00159de <setupInterruptController()+0x12c>
c00159c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ce:	83 c0 04             	add    eax,0x4
c00159d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d3:	83 ec 0c             	sub    esp,0xc
c00159d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d9:	ff d0                	call   eax
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159e5:	83 ec 0c             	sub    esp,0xc
c00159e8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159eb:	e8 9c 9e ff ff       	call   c000f88c <malloc>
c00159f0:	83 c4 10             	add    esp,0x10
c00159f3:	89 c3                	mov    ebx,eax
c00159f5:	83 ec 0c             	sub    esp,0xc
c00159f8:	53                   	push   ebx
c00159f9:	e8 b6 0d 01 00       	call   c00267b4 <APIC::APIC()>
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a04:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0c:	83 c0 08             	add    eax,0x8
c0015a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a11:	6a 00                	push   0x0
c0015a13:	6a 00                	push   0x0
c0015a15:	6a 00                	push   0x0
c0015a17:	52                   	push   edx
c0015a18:	ff d0                	call   eax
c0015a1a:	83 c4 10             	add    esp,0x10
c0015a1d:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0015a22:	83 ec 08             	sub    esp,0x8
c0015a25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a28:	50                   	push   eax
c0015a29:	e8 5c e8 ff ff       	call   c001428a <Device::addChild(Device*)>
c0015a2e:	83 c4 10             	add    esp,0x10
c0015a31:	c7 05 08 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f708,0x0
c0015a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	83 c0 24             	add    eax,0x24
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	6a 00                	push   0x0
c0015a47:	68 4e 52 01 c0       	push   0xc001524e
c0015a4c:	6a 00                	push   0x0
c0015a4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a51:	ff d0                	call   eax
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5b:	83 c0 24             	add    eax,0x24
c0015a5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a60:	6a 00                	push   0x0
c0015a62:	68 4e 52 01 c0       	push   0xc001524e
c0015a67:	6a 01                	push   0x1
c0015a69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6c:	ff d0                	call   eax
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a76:	83 c0 24             	add    eax,0x24
c0015a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7b:	6a 00                	push   0x0
c0015a7d:	68 59 4b 01 c0       	push   0xc0014b59
c0015a82:	6a 02                	push   0x2
c0015a84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a87:	ff d0                	call   eax
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a91:	83 c0 24             	add    eax,0x24
c0015a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a96:	6a 00                	push   0x0
c0015a98:	68 4e 52 01 c0       	push   0xc001524e
c0015a9d:	6a 03                	push   0x3
c0015a9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa2:	ff d0                	call   eax
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aac:	83 c0 24             	add    eax,0x24
c0015aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab1:	6a 00                	push   0x0
c0015ab3:	68 4e 52 01 c0       	push   0xc001524e
c0015ab8:	6a 04                	push   0x4
c0015aba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abd:	ff d0                	call   eax
c0015abf:	83 c4 10             	add    esp,0x10
c0015ac2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	83 c0 24             	add    eax,0x24
c0015aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acc:	6a 00                	push   0x0
c0015ace:	68 4e 52 01 c0       	push   0xc001524e
c0015ad3:	6a 05                	push   0x5
c0015ad5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad8:	ff d0                	call   eax
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	83 c0 24             	add    eax,0x24
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	6a 00                	push   0x0
c0015ae9:	68 6d 52 01 c0       	push   0xc001526d
c0015aee:	6a 06                	push   0x6
c0015af0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af3:	ff d0                	call   eax
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	83 c0 24             	add    eax,0x24
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	6a 00                	push   0x0
c0015b04:	68 8b 51 01 c0       	push   0xc001518b
c0015b09:	6a 07                	push   0x7
c0015b0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0e:	ff d0                	call   eax
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	83 c0 24             	add    eax,0x24
c0015b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1d:	6a 00                	push   0x0
c0015b1f:	68 74 49 01 c0       	push   0xc0014974
c0015b24:	6a 08                	push   0x8
c0015b26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b29:	ff d0                	call   eax
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	83 c0 24             	add    eax,0x24
c0015b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b38:	6a 00                	push   0x0
c0015b3a:	68 4e 52 01 c0       	push   0xc001524e
c0015b3f:	6a 09                	push   0x9
c0015b41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b44:	ff d0                	call   eax
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	83 c0 24             	add    eax,0x24
c0015b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b53:	6a 00                	push   0x0
c0015b55:	68 4e 52 01 c0       	push   0xc001524e
c0015b5a:	6a 0a                	push   0xa
c0015b5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5f:	ff d0                	call   eax
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	83 c0 24             	add    eax,0x24
c0015b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6e:	6a 00                	push   0x0
c0015b70:	68 4e 52 01 c0       	push   0xc001524e
c0015b75:	6a 0b                	push   0xb
c0015b77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7a:	ff d0                	call   eax
c0015b7c:	83 c4 10             	add    esp,0x10
c0015b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	83 c0 24             	add    eax,0x24
c0015b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b89:	6a 00                	push   0x0
c0015b8b:	68 4e 52 01 c0       	push   0xc001524e
c0015b90:	6a 0c                	push   0xc
c0015b92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b95:	ff d0                	call   eax
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	83 c0 24             	add    eax,0x24
c0015ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba4:	6a 00                	push   0x0
c0015ba6:	68 fe 51 01 c0       	push   0xc00151fe
c0015bab:	6a 0d                	push   0xd
c0015bad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb0:	ff d0                	call   eax
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	83 c0 24             	add    eax,0x24
c0015bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbf:	6a 00                	push   0x0
c0015bc1:	68 37 52 01 c0       	push   0xc0015237
c0015bc6:	6a 0e                	push   0xe
c0015bc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcb:	ff d0                	call   eax
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	83 c0 24             	add    eax,0x24
c0015bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bda:	6a 00                	push   0x0
c0015bdc:	68 4e 52 01 c0       	push   0xc001524e
c0015be1:	6a 0f                	push   0xf
c0015be3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be6:	ff d0                	call   eax
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	83 c0 24             	add    eax,0x24
c0015bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf5:	6a 00                	push   0x0
c0015bf7:	68 4e 52 01 c0       	push   0xc001524e
c0015bfc:	6a 10                	push   0x10
c0015bfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c01:	ff d0                	call   eax
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	83 c0 24             	add    eax,0x24
c0015c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c10:	6a 00                	push   0x0
c0015c12:	68 4e 52 01 c0       	push   0xc001524e
c0015c17:	6a 11                	push   0x11
c0015c19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1c:	ff d0                	call   eax
c0015c1e:	83 c4 10             	add    esp,0x10
c0015c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	83 c0 24             	add    eax,0x24
c0015c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2b:	6a 00                	push   0x0
c0015c2d:	68 4e 52 01 c0       	push   0xc001524e
c0015c32:	6a 12                	push   0x12
c0015c34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c37:	ff d0                	call   eax
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	83 c0 24             	add    eax,0x24
c0015c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c46:	6a 00                	push   0x0
c0015c48:	68 4e 52 01 c0       	push   0xc001524e
c0015c4d:	6a 13                	push   0x13
c0015c4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c52:	ff d0                	call   eax
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	83 c0 24             	add    eax,0x24
c0015c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c61:	6a 00                	push   0x0
c0015c63:	68 4e 52 01 c0       	push   0xc001524e
c0015c68:	6a 14                	push   0x14
c0015c6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6d:	ff d0                	call   eax
c0015c6f:	83 c4 10             	add    esp,0x10
c0015c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	83 c0 24             	add    eax,0x24
c0015c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7c:	6a 00                	push   0x0
c0015c7e:	68 4e 52 01 c0       	push   0xc001524e
c0015c83:	6a 1e                	push   0x1e
c0015c85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c88:	ff d0                	call   eax
c0015c8a:	83 c4 10             	add    esp,0x10
c0015c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c92:	83 c0 24             	add    eax,0x24
c0015c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c97:	6a 00                	push   0x0
c0015c99:	68 92 cd 01 c0       	push   0xc001cd92
c0015c9e:	6a 60                	push   0x60
c0015ca0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca3:	ff d0                	call   eax
c0015ca5:	83 c4 10             	add    esp,0x10
c0015ca8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cae:	c9                   	leave  
c0015caf:	c3                   	ret    

c0015cb0 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cb0:	55                   	push   ebp
c0015cb1:	89 e5                	mov    ebp,esp
c0015cb3:	83 ec 08             	sub    esp,0x8
c0015cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb9:	83 ec 0c             	sub    esp,0xc
c0015cbc:	50                   	push   eax
c0015cbd:	e8 c8 e8 ff ff       	call   c001458a <Device::getName()>
c0015cc2:	83 c4 10             	add    esp,0x10
c0015cc5:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc7:	3c 41                	cmp    al,0x41
c0015cc9:	0f 94 c0             	sete   al
c0015ccc:	84 c0                	test   al,al
c0015cce:	74 28                	je     c0015cf8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cd0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cd4:	7f 12                	jg     c0015ce8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cd9:	05 c0 e7 02 c0       	add    eax,0xc002e7c0
c0015cde:	8a 00                	mov    al,BYTE PTR [eax]
c0015ce0:	0f b6 c0             	movzx  eax,al
c0015ce3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015ce6:	eb 10                	jmp    c0015cf8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	68 98 bd 02 c0       	push   0xc002bd98
c0015cf0:	e8 a4 4c 00 00       	call   c001a999 <Krnl::panic(char const*)>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cfb:	c9                   	leave  
c0015cfc:	c3                   	ret    
c0015cfd:	90                   	nop

c0015cfe <startGUI(void*)>:
c0015cfe:	55                   	push   ebp
c0015cff:	89 e5                	mov    ebp,esp
c0015d01:	53                   	push   ebx
c0015d02:	83 ec 04             	sub    esp,0x4
c0015d05:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015d0a:	48                   	dec    eax
c0015d0b:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0015d10:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015d15:	85 c0                	test   eax,eax
c0015d17:	75 01                	jne    c0015d1a <startGUI(void*)+0x1c>
c0015d19:	fb                   	sti    
c0015d1a:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c0015d20:	83 ec 08             	sub    esp,0x8
c0015d23:	6a 01                	push   0x1
c0015d25:	68 0c c1 02 c0       	push   0xc002c10c
c0015d2a:	e8 3e 80 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	83 ec 08             	sub    esp,0x8
c0015d35:	53                   	push   ebx
c0015d36:	50                   	push   eax
c0015d37:	e8 5c 82 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c0015d45:	83 ec 08             	sub    esp,0x8
c0015d48:	6a 01                	push   0x1
c0015d4a:	68 26 c1 02 c0       	push   0xc002c126
c0015d4f:	e8 19 80 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	83 ec 08             	sub    esp,0x8
c0015d5a:	53                   	push   ebx
c0015d5b:	50                   	push   eax
c0015d5c:	e8 37 82 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	90                   	nop
c0015d65:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d68:	c9                   	leave  
c0015d69:	c3                   	ret    

c0015d6a <startGUIVESA(void*)>:
c0015d6a:	55                   	push   ebp
c0015d6b:	89 e5                	mov    ebp,esp
c0015d6d:	53                   	push   ebx
c0015d6e:	83 ec 04             	sub    esp,0x4
c0015d71:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015d76:	48                   	dec    eax
c0015d77:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0015d7c:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015d81:	85 c0                	test   eax,eax
c0015d83:	75 01                	jne    c0015d86 <startGUIVESA(void*)+0x1c>
c0015d85:	fb                   	sti    
c0015d86:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c0015d8c:	83 ec 08             	sub    esp,0x8
c0015d8f:	6a 01                	push   0x1
c0015d91:	68 40 c1 02 c0       	push   0xc002c140
c0015d96:	e8 d2 7f 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	83 ec 08             	sub    esp,0x8
c0015da1:	53                   	push   ebx
c0015da2:	50                   	push   eax
c0015da3:	e8 f0 81 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	6a 01                	push   0x1
c0015db6:	68 26 c1 02 c0       	push   0xc002c126
c0015dbb:	e8 ad 7f 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	53                   	push   ebx
c0015dc7:	50                   	push   eax
c0015dc8:	e8 cb 81 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	90                   	nop
c0015dd1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dd4:	c9                   	leave  
c0015dd5:	c3                   	ret    

c0015dd6 <sendKeyToTerminal(unsigned char)>:
c0015dd6:	55                   	push   ebp
c0015dd7:	89 e5                	mov    ebp,esp
c0015dd9:	83 ec 28             	sub    esp,0x28
c0015ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015de2:	a1 44 f6 02 c0       	mov    eax,ds:0xc002f644
c0015de7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015deb:	83 ec 08             	sub    esp,0x8
c0015dee:	52                   	push   edx
c0015def:	50                   	push   eax
c0015df0:	e8 0b b4 ff ff       	call   c0011200 <VgaText::receiveKey(unsigned char)>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dfc:	0f 85 8f 00 00 00    	jne    c0015e91 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e02:	fa                   	cli    
c0015e03:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015e08:	40                   	inc    eax
c0015e09:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0015e0e:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c0015e13:	40                   	inc    eax
c0015e14:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c0015e19:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c0015e1e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e21:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c0015e2b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e2f:	74 1f                	je     c0015e50 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e34:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e3a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e3d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e46:	e8 c5 8d 00 00       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	eb db                	jmp    c0015e2b <sendKeyToTerminal(unsigned char)+0x55>
c0015e50:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c0015e55:	48                   	dec    eax
c0015e56:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c0015e5b:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c0015e60:	85 c0                	test   eax,eax
c0015e62:	75 18                	jne    c0015e7c <sendKeyToTerminal(unsigned char)+0xa6>
c0015e64:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c0015e69:	85 c0                	test   eax,eax
c0015e6b:	74 0f                	je     c0015e7c <sendKeyToTerminal(unsigned char)+0xa6>
c0015e6d:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c0015e77:	e8 d0 88 00 00       	call   c001e74c <schedule()>
c0015e7c:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015e81:	48                   	dec    eax
c0015e82:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0015e87:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0015e8c:	85 c0                	test   eax,eax
c0015e8e:	75 01                	jne    c0015e91 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e90:	fb                   	sti    
c0015e91:	90                   	nop
c0015e92:	c9                   	leave  
c0015e93:	c3                   	ret    

c0015e94 <sendKeyboardToken(KeyboardToken)>:
c0015e94:	55                   	push   ebp
c0015e95:	89 e5                	mov    ebp,esp
c0015e97:	83 ec 18             	sub    esp,0x18
c0015e9a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea0:	0f b7 c0             	movzx  eax,ax
c0015ea3:	83 f2 01             	xor    edx,0x1
c0015ea6:	88 90 40 f7 02 c0    	mov    BYTE PTR [eax-0x3ffd08c0],dl
c0015eac:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015eb1:	85 c0                	test   eax,eax
c0015eb3:	74 24                	je     c0015ed9 <sendKeyboardToken(KeyboardToken)+0x45>
c0015eb5:	8b 0d 28 f7 02 c0    	mov    ecx,DWORD PTR ds:0xc002f728
c0015ebb:	83 ec 04             	sub    esp,0x4
c0015ebe:	68 40 f7 02 c0       	push   0xc002f740
c0015ec3:	83 ec 08             	sub    esp,0x8
c0015ec6:	89 e2                	mov    edx,esp
c0015ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ecb:	89 02                	mov    DWORD PTR [edx],eax
c0015ecd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ed0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ed4:	ff d1                	call   ecx
c0015ed6:	83 c4 10             	add    esp,0x10
c0015ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edc:	66 3d 03 02          	cmp    ax,0x203
c0015ee0:	75 07                	jne    c0015ee9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ee2:	a0 40 f8 02 c0       	mov    al,ds:0xc002f840
c0015ee7:	84 c0                	test   al,al
c0015ee9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015eed:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ef0:	a0 48 fb 02 c0       	mov    al,ds:0xc002fb48
c0015ef5:	38 c2                	cmp    dl,al
c0015ef7:	74 1c                	je     c0015f15 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ef9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015efc:	a2 48 fb 02 c0       	mov    ds:0xc002fb48,al
c0015f01:	a0 48 fb 02 c0       	mov    al,ds:0xc002fb48
c0015f06:	0f b6 c0             	movzx  eax,al
c0015f09:	83 ec 0c             	sub    esp,0xc
c0015f0c:	50                   	push   eax
c0015f0d:	e8 76 a6 ff ff       	call   c0010588 <setTerminalScrollLock(bool)>
c0015f12:	83 c4 10             	add    esp,0x10
c0015f15:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f18:	84 c0                	test   al,al
c0015f1a:	0f 84 ae 00 00 00    	je     c0015fce <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f23:	66 3d 10 03          	cmp    ax,0x310
c0015f27:	75 06                	jne    c0015f2f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f29:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f32:	66 3d 11 03          	cmp    ax,0x311
c0015f36:	75 06                	jne    c0015f3e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f38:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	66 3d 12 03          	cmp    ax,0x312
c0015f45:	75 06                	jne    c0015f4d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f47:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f50:	66 3d 13 03          	cmp    ax,0x313
c0015f54:	75 06                	jne    c0015f5c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f56:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5f:	66 3d 14 03          	cmp    ax,0x314
c0015f63:	75 06                	jne    c0015f6b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f65:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6e:	66 3d 15 03          	cmp    ax,0x315
c0015f72:	75 06                	jne    c0015f7a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f74:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7d:	66 3d 16 03          	cmp    ax,0x316
c0015f81:	75 06                	jne    c0015f89 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f83:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8c:	66 3d 17 03          	cmp    ax,0x317
c0015f90:	75 06                	jne    c0015f98 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f92:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9b:	66 3d 18 03          	cmp    ax,0x318
c0015f9f:	75 06                	jne    c0015fa7 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fa1:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faa:	66 3d 19 03          	cmp    ax,0x319
c0015fae:	75 06                	jne    c0015fb6 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fb0:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb9:	66 3d 1a 03          	cmp    ax,0x31a
c0015fbd:	0f 85 c9 00 00 00    	jne    c001608c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fc9:	e9 be 00 00 00       	jmp    c001608c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd1:	66 3d 10 03          	cmp    ax,0x310
c0015fd5:	75 0a                	jne    c0015fe1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fd7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fdd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe4:	66 3d 11 03          	cmp    ax,0x311
c0015fe8:	75 0a                	jne    c0015ff4 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fea:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ff0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff7:	66 3d 12 03          	cmp    ax,0x312
c0015ffb:	75 0a                	jne    c0016007 <sendKeyboardToken(KeyboardToken)+0x173>
c0015ffd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016003:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600a:	66 3d 13 03          	cmp    ax,0x313
c001600e:	75 0a                	jne    c001601a <sendKeyboardToken(KeyboardToken)+0x186>
c0016010:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016016:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601d:	66 3d 14 03          	cmp    ax,0x314
c0016021:	75 0a                	jne    c001602d <sendKeyboardToken(KeyboardToken)+0x199>
c0016023:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016029:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016030:	66 3d 15 03          	cmp    ax,0x315
c0016034:	75 0a                	jne    c0016040 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016036:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001603c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016043:	66 3d 16 03          	cmp    ax,0x316
c0016047:	75 0a                	jne    c0016053 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016049:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001604f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016056:	66 3d 17 03          	cmp    ax,0x317
c001605a:	75 0a                	jne    c0016066 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001605c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016062:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016069:	66 3d 18 03          	cmp    ax,0x318
c001606d:	75 0a                	jne    c0016079 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001606f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016075:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607c:	66 3d 19 03          	cmp    ax,0x319
c0016080:	75 0a                	jne    c001608c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016082:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016088:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608f:	66 3d 00 02          	cmp    ax,0x200
c0016093:	75 2c                	jne    c00160c1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016095:	a0 40 fb 02 c0       	mov    al,ds:0xc002fb40
c001609a:	83 f0 01             	xor    eax,0x1
c001609d:	84 c0                	test   al,al
c001609f:	74 20                	je     c00160c1 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160a1:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c00160a6:	6a 01                	push   0x1
c00160a8:	6a 00                	push   0x0
c00160aa:	68 fe 5c 01 c0       	push   0xc0015cfe
c00160af:	50                   	push   eax
c00160b0:	e8 53 84 00 00       	call   c001e508 <Process::createThread(void (*)(void*), void*, int)>
c00160b5:	83 c4 10             	add    esp,0x10
c00160b8:	c6 05 40 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb40,0x1
c00160bf:	eb 33                	jmp    c00160f4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c4:	66 3d 01 02          	cmp    ax,0x201
c00160c8:	75 2a                	jne    c00160f4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160ca:	a0 40 fb 02 c0       	mov    al,ds:0xc002fb40
c00160cf:	83 f0 01             	xor    eax,0x1
c00160d2:	84 c0                	test   al,al
c00160d4:	74 1e                	je     c00160f4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160d6:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c00160db:	6a 01                	push   0x1
c00160dd:	6a 00                	push   0x0
c00160df:	68 6a 5d 01 c0       	push   0xc0015d6a
c00160e4:	50                   	push   eax
c00160e5:	e8 1e 84 00 00       	call   c001e508 <Process::createThread(void (*)(void*), void*, int)>
c00160ea:	83 c4 10             	add    esp,0x10
c00160ed:	c6 05 40 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb40,0x1
c00160f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f7:	66 3d 1d 03          	cmp    ax,0x31d
c00160fb:	75 06                	jne    c0016103 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160fd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016106:	66 3d 1c 03          	cmp    ax,0x31c
c001610a:	75 06                	jne    c0016112 <sendKeyboardToken(KeyboardToken)+0x27e>
c001610c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016115:	66 3d 1b 03          	cmp    ax,0x31b
c0016119:	75 06                	jne    c0016121 <sendKeyboardToken(KeyboardToken)+0x28d>
c001611b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016124:	66 3d 1e 03          	cmp    ax,0x31e
c0016128:	75 06                	jne    c0016130 <sendKeyboardToken(KeyboardToken)+0x29c>
c001612a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016133:	66 3d 1f 03          	cmp    ax,0x31f
c0016137:	75 06                	jne    c001613f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016139:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001613f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016142:	66 3d 1a 03          	cmp    ax,0x31a
c0016146:	75 06                	jne    c001614e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016148:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001614e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016152:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016155:	83 f0 01             	xor    eax,0x1
c0016158:	84 c0                	test   al,al
c001615a:	74 77                	je     c00161d3 <sendKeyboardToken(KeyboardToken)+0x33f>
c001615c:	a0 41 f8 02 c0       	mov    al,ds:0xc002f841
c0016161:	84 c0                	test   al,al
c0016163:	74 41                	je     c00161a6 <sendKeyboardToken(KeyboardToken)+0x312>
c0016165:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016169:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001616d:	74 2b                	je     c001619a <sendKeyboardToken(KeyboardToken)+0x306>
c001616f:	8b 15 44 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb44
c0016175:	89 d0                	mov    eax,edx
c0016177:	c1 e0 02             	shl    eax,0x2
c001617a:	01 d0                	add    eax,edx
c001617c:	01 c0                	add    eax,eax
c001617e:	a3 44 fb 02 c0       	mov    ds:0xc002fb44,eax
c0016183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016186:	0f b7 c0             	movzx  eax,ax
c0016189:	8d 50 d0             	lea    edx,[eax-0x30]
c001618c:	a1 44 fb 02 c0       	mov    eax,ds:0xc002fb44
c0016191:	01 d0                	add    eax,edx
c0016193:	a3 44 fb 02 c0       	mov    ds:0xc002fb44,eax
c0016198:	eb 6d                	jmp    c0016207 <sendKeyboardToken(KeyboardToken)+0x373>
c001619a:	c7 05 44 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x0
c00161a4:	eb 61                	jmp    c0016207 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a6:	a1 44 fb 02 c0       	mov    eax,ds:0xc002fb44
c00161ab:	85 c0                	test   eax,eax
c00161ad:	74 18                	je     c00161c7 <sendKeyboardToken(KeyboardToken)+0x333>
c00161af:	a1 44 fb 02 c0       	mov    eax,ds:0xc002fb44
c00161b4:	0f b6 c0             	movzx  eax,al
c00161b7:	83 ec 0c             	sub    esp,0xc
c00161ba:	50                   	push   eax
c00161bb:	e8 16 fc ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c00161c0:	83 c4 10             	add    esp,0x10
c00161c3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c7:	c7 05 44 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x0
c00161d1:	eb 34                	jmp    c0016207 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d6:	66 3d 01 01          	cmp    ax,0x101
c00161da:	75 2b                	jne    c0016207 <sendKeyboardToken(KeyboardToken)+0x373>
c00161dc:	a1 44 fb 02 c0       	mov    eax,ds:0xc002fb44
c00161e1:	85 c0                	test   eax,eax
c00161e3:	74 18                	je     c00161fd <sendKeyboardToken(KeyboardToken)+0x369>
c00161e5:	a1 44 fb 02 c0       	mov    eax,ds:0xc002fb44
c00161ea:	0f b6 c0             	movzx  eax,al
c00161ed:	83 ec 0c             	sub    esp,0xc
c00161f0:	50                   	push   eax
c00161f1:	e8 e0 fb ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c00161f6:	83 c4 10             	add    esp,0x10
c00161f9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161fd:	c7 05 44 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x0
c0016207:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001620a:	83 f0 01             	xor    eax,0x1
c001620d:	84 c0                	test   al,al
c001620f:	74 4c                	je     c001625d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016211:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016214:	83 f0 01             	xor    eax,0x1
c0016217:	84 c0                	test   al,al
c0016219:	74 42                	je     c001625d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621b:	a0 40 f8 02 c0       	mov    al,ds:0xc002f840
c0016220:	83 f0 01             	xor    eax,0x1
c0016223:	84 c0                	test   al,al
c0016225:	74 36                	je     c001625d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622a:	66 83 f8 1f          	cmp    ax,0x1f
c001622e:	76 09                	jbe    c0016239 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016233:	66 83 f8 7e          	cmp    ax,0x7e
c0016237:	76 12                	jbe    c001624b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623c:	66 83 f8 0a          	cmp    ax,0xa
c0016240:	74 09                	je     c001624b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016245:	66 83 f8 08          	cmp    ax,0x8
c0016249:	75 12                	jne    c001625d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	0f b6 c0             	movzx  eax,al
c0016251:	83 ec 0c             	sub    esp,0xc
c0016254:	50                   	push   eax
c0016255:	e8 7c fb ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c001625a:	83 c4 10             	add    esp,0x10
c001625d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016260:	83 f0 01             	xor    eax,0x1
c0016263:	84 c0                	test   al,al
c0016265:	74 4f                	je     c00162b6 <sendKeyboardToken(KeyboardToken)+0x422>
c0016267:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001626a:	83 f0 01             	xor    eax,0x1
c001626d:	84 c0                	test   al,al
c001626f:	74 45                	je     c00162b6 <sendKeyboardToken(KeyboardToken)+0x422>
c0016271:	a0 40 f8 02 c0       	mov    al,ds:0xc002f840
c0016276:	84 c0                	test   al,al
c0016278:	74 3c                	je     c00162b6 <sendKeyboardToken(KeyboardToken)+0x422>
c001627a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627d:	66 83 f8 3f          	cmp    ax,0x3f
c0016281:	76 33                	jbe    c00162b6 <sendKeyboardToken(KeyboardToken)+0x422>
c0016283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016286:	66 83 f8 7f          	cmp    ax,0x7f
c001628a:	77 2a                	ja     c00162b6 <sendKeyboardToken(KeyboardToken)+0x422>
c001628c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628f:	88 c2                	mov    dl,al
c0016291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016294:	66 83 f8 5f          	cmp    ax,0x5f
c0016298:	76 04                	jbe    c001629e <sendKeyboardToken(KeyboardToken)+0x40a>
c001629a:	b0 20                	mov    al,0x20
c001629c:	eb 02                	jmp    c00162a0 <sendKeyboardToken(KeyboardToken)+0x40c>
c001629e:	b0 00                	mov    al,0x0
c00162a0:	29 c2                	sub    edx,eax
c00162a2:	88 d0                	mov    al,dl
c00162a4:	83 e8 40             	sub    eax,0x40
c00162a7:	0f b6 c0             	movzx  eax,al
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	50                   	push   eax
c00162ae:	e8 23 fb ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c00162b3:	83 c4 10             	add    esp,0x10
c00162b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b9:	66 3d 00 03          	cmp    ax,0x300
c00162bd:	75 0f                	jne    c00162ce <sendKeyboardToken(KeyboardToken)+0x43a>
c00162bf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162c2:	83 f0 01             	xor    eax,0x1
c00162c5:	84 c0                	test   al,al
c00162c7:	74 05                	je     c00162ce <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c9:	e8 32 aa ff ff       	call   c0010d00 <doTerminalCycle()>
c00162ce:	90                   	nop
c00162cf:	c9                   	leave  
c00162d0:	c3                   	ret    

c00162d1 <clearInternalKeybuffer(VgaText*)>:
c00162d1:	55                   	push   ebp
c00162d2:	89 e5                	mov    ebp,esp
c00162d4:	83 ec 08             	sub    esp,0x8
c00162d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162da:	05 98 01 00 00       	add    eax,0x198
c00162df:	83 ec 0c             	sub    esp,0xc
c00162e2:	50                   	push   eax
c00162e3:	e8 84 a4 fe ff       	call   c000076c <strlen>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162ee:	81 c2 98 01 00 00    	add    edx,0x198
c00162f4:	83 ec 04             	sub    esp,0x4
c00162f7:	50                   	push   eax
c00162f8:	6a 00                	push   0x0
c00162fa:	52                   	push   edx
c00162fb:	e8 50 a4 fe ff       	call   c0000750 <memset>
c0016300:	83 c4 10             	add    esp,0x10
c0016303:	90                   	nop
c0016304:	c9                   	leave  
c0016305:	c3                   	ret    

c0016306 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016306:	55                   	push   ebp
c0016307:	89 e5                	mov    ebp,esp
c0016309:	83 ec 18             	sub    esp,0x18
c001630c:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0016311:	85 c0                	test   eax,eax
c0016313:	74 2a                	je     c001633f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016315:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001631b:	8b 0d 28 f7 02 c0    	mov    ecx,DWORD PTR ds:0xc002f728
c0016321:	83 ec 04             	sub    esp,0x4
c0016324:	68 40 f7 02 c0       	push   0xc002f740
c0016329:	83 ec 08             	sub    esp,0x8
c001632c:	89 e2                	mov    edx,esp
c001632e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016331:	89 02                	mov    DWORD PTR [edx],eax
c0016333:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016336:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001633a:	ff d1                	call   ecx
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	83 ec 0c             	sub    esp,0xc
c0016342:	68 5b c1 02 c0       	push   0xc002c15b
c0016347:	e8 05 cb ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001634c:	83 c4 10             	add    esp,0x10
c001634f:	fb                   	sti    
c0016350:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016357:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001635b:	0f 84 a1 00 00 00    	je     c0016402 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016364:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001636a:	84 c0                	test   al,al
c001636c:	75 28                	jne    c0016396 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001636e:	fa                   	cli    
c001636f:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0016374:	40                   	inc    eax
c0016375:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001637a:	e8 cd 83 00 00       	call   c001e74c <schedule()>
c001637f:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0016384:	48                   	dec    eax
c0016385:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001638a:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001638f:	85 c0                	test   eax,eax
c0016391:	75 ce                	jne    c0016361 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016393:	fb                   	sti    
c0016394:	eb cb                	jmp    c0016361 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016396:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016399:	8d 50 01             	lea    edx,[eax+0x1]
c001639c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001639f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a2:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163a8:	88 10                	mov    BYTE PTR [eax],dl
c00163aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ad:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163b3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b9:	05 98 01 00 00       	add    eax,0x198
c00163be:	83 ec 0c             	sub    esp,0xc
c00163c1:	50                   	push   eax
c00163c2:	e8 a5 a3 fe ff       	call   c000076c <strlen>
c00163c7:	83 c4 10             	add    esp,0x10
c00163ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163cd:	81 c2 98 01 00 00    	add    edx,0x198
c00163d3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163d6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d9:	81 c2 98 01 00 00    	add    edx,0x198
c00163df:	83 ec 04             	sub    esp,0x4
c00163e2:	50                   	push   eax
c00163e3:	51                   	push   ecx
c00163e4:	52                   	push   edx
c00163e5:	e8 9e a2 fe ff       	call   c0000688 <memmove>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163f3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163f7:	0f 85 5a ff ff ff    	jne    c0016357 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016400:	eb 03                	jmp    c0016405 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016402:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016405:	c9                   	leave  
c0016406:	c3                   	ret    
c0016407:	90                   	nop

c0016408 <Keyboard::Keyboard(char const*)>:
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640f:	83 ec 08             	sub    esp,0x8
c0016412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016416:	50                   	push   eax
c0016417:	e8 72 e0 ff ff       	call   c001448e <Device::Device(char const*)>
c001641c:	83 c4 10             	add    esp,0x10
c001641f:	ba 7c c1 02 c0       	mov    edx,0xc002c17c
c0016424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016428:	89 10                	mov    DWORD PTR [eax],edx
c001642a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016438:	c6 05 24 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f724,0x1
c001643f:	90                   	nop
c0016440:	83 c4 0c             	add    esp,0xc
c0016443:	c3                   	ret    

c0016444 <Keyboard::~Keyboard()>:
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	ba 7c c1 02 c0       	mov    edx,0xc002c17c
c001644c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016450:	89 10                	mov    DWORD PTR [eax],edx
c0016452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	50                   	push   eax
c001645a:	e8 f9 dc ff ff       	call   c0014158 <Device::~Device()>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	90                   	nop
c0016463:	83 c4 0c             	add    esp,0xc
c0016466:	c3                   	ret    
c0016467:	90                   	nop

c0016468 <Keyboard::~Keyboard()>:
c0016468:	83 ec 0c             	sub    esp,0xc
c001646b:	83 ec 0c             	sub    esp,0xc
c001646e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016472:	e8 cd ff ff ff       	call   c0016444 <Keyboard::~Keyboard()>
c0016477:	83 c4 10             	add    esp,0x10
c001647a:	83 ec 08             	sub    esp,0x8
c001647d:	68 5c 01 00 00       	push   0x15c
c0016482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016486:	e8 e6 c8 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	83 c4 0c             	add    esp,0xc
c0016491:	c3                   	ret    

c0016492 <LogicalDisk::close(int, int, void*)>:
c0016492:	83 c8 ff             	or     eax,0xffffffff
c0016495:	c3                   	ret    

c0016496 <LogicalDisk::~LogicalDisk()>:
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	ba 2c c2 02 c0       	mov    edx,0xc002c22c
c001649e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a2:	89 10                	mov    DWORD PTR [eax],edx
c00164a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a8:	83 ec 0c             	sub    esp,0xc
c00164ab:	50                   	push   eax
c00164ac:	e8 a7 dc ff ff       	call   c0014158 <Device::~Device()>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	90                   	nop
c00164b5:	83 c4 0c             	add    esp,0xc
c00164b8:	c3                   	ret    
c00164b9:	90                   	nop

c00164ba <LogicalDisk::~LogicalDisk()>:
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	83 ec 0c             	sub    esp,0xc
c00164c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c4:	e8 cd ff ff ff       	call   c0016496 <LogicalDisk::~LogicalDisk()>
c00164c9:	83 c4 10             	add    esp,0x10
c00164cc:	83 ec 08             	sub    esp,0x8
c00164cf:	68 74 01 00 00       	push   0x174
c00164d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d8:	e8 94 c8 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	83 c4 0c             	add    esp,0xc
c00164e3:	c3                   	ret    

c00164e4 <LogicalDisk::open(int, int, void*)>:
c00164e4:	83 ec 18             	sub    esp,0x18
c00164e7:	68 a8 c1 02 c0       	push   0xc002c1a8
c00164ec:	e8 a8 44 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00164f1:	83 c8 ff             	or     eax,0xffffffff
c00164f4:	83 c4 1c             	add    esp,0x1c
c00164f7:	c3                   	ret    

c00164f8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164f8:	53                   	push   ebx
c00164f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016501:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016505:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001650b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016511:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016517:	77 10                	ja     c0016529 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016519:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001651f:	89 d3                	mov    ebx,edx
c0016521:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016527:	72 05                	jb     c001652e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016529:	83 c8 ff             	or     eax,0xffffffff
c001652c:	89 c2                	mov    edx,eax
c001652e:	5b                   	pop    ebx
c001652f:	c3                   	ret    

c0016530 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016530:	56                   	push   esi
c0016531:	83 c8 ff             	or     eax,0xffffffff
c0016534:	53                   	push   ebx
c0016535:	89 c2                	mov    edx,eax
c0016537:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001653b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001653f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016543:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016549:	77 27                	ja     c0016572 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001654b:	89 d8                	mov    eax,ebx
c001654d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016553:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001655e:	89 c2                	mov    edx,eax
c0016560:	73 10                	jae    c0016572 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016562:	89 c8                	mov    eax,ecx
c0016564:	89 da                	mov    edx,ebx
c0016566:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001656c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016572:	5b                   	pop    ebx
c0016573:	5e                   	pop    esi
c0016574:	c3                   	ret    
c0016575:	90                   	nop

c0016576 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016576:	83 ec 1c             	sub    esp,0x1c
c0016579:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001657d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016581:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016589:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001658d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016590:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016594:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659c:	83 ec 08             	sub    esp,0x8
c001659f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165a3:	50                   	push   eax
c00165a4:	e8 e5 de ff ff       	call   c001448e <Device::Device(char const*)>
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	ba 2c c2 02 c0       	mov    edx,0xc002c22c
c00165b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b5:	89 10                	mov    DWORD PTR [eax],edx
c00165b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165e7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165ed:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165f7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165fe:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016604:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001660a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016612:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016626:	90                   	nop
c0016627:	83 c4 1c             	add    esp,0x1c
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <LogicalDisk::assignDriveLetter()>:
c001662c:	55                   	push   ebp
c001662d:	57                   	push   edi
c001662e:	56                   	push   esi
c001662f:	53                   	push   ebx
c0016630:	83 ec 14             	sub    esp,0x14
c0016633:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016637:	8b 3d 60 fb 02 c0    	mov    edi,DWORD PTR ds:0xc002fb60
c001663d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016643:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016647:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001664d:	8b 3d 64 fb 02 c0    	mov    edi,DWORD PTR ds:0xc002fb64
c0016653:	3c 01                	cmp    al,0x1
c0016655:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016659:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001665d:	19 c0                	sbb    eax,eax
c001665f:	83 e0 02             	and    eax,0x2
c0016662:	83 c0 41             	add    eax,0x41
c0016665:	0f be e8             	movsx  ebp,al
c0016668:	3c 43                	cmp    al,0x43
c001666a:	75 10                	jne    c001667c <LogicalDisk::assignDriveLetter()+0x50>
c001666c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016673:	75 5d                	jne    c00166d2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016675:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001667a:	75 56                	jne    c00166d2 <LogicalDisk::assignDriveLetter()+0xa6>
c001667c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001667f:	ba 01 00 00 00       	mov    edx,0x1
c0016684:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016688:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001668c:	d3 e2                	shl    edx,cl
c001668e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016692:	89 d7                	mov    edi,edx
c0016694:	89 d6                	mov    esi,edx
c0016696:	c1 ff 1f             	sar    edi,0x1f
c0016699:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001669d:	21 f9                	and    ecx,edi
c001669f:	09 d1                	or     ecx,edx
c00166a1:	75 2f                	jne    c00166d2 <LogicalDisk::assignDriveLetter()+0xa6>
c00166a3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166ab:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166b1:	09 f2                	or     edx,esi
c00166b3:	89 15 60 fb 02 c0    	mov    DWORD PTR ds:0xc002fb60,edx
c00166b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166bd:	09 fa                	or     edx,edi
c00166bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166c3:	89 15 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,edx
c00166c9:	89 1c bd 80 fb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0480],ebx
c00166d0:	eb 08                	jmp    c00166da <LogicalDisk::assignDriveLetter()+0xae>
c00166d2:	45                   	inc    ebp
c00166d3:	40                   	inc    eax
c00166d4:	3c 5b                	cmp    al,0x5b
c00166d6:	75 90                	jne    c0016668 <LogicalDisk::assignDriveLetter()+0x3c>
c00166d8:	31 c0                	xor    eax,eax
c00166da:	83 c4 14             	add    esp,0x14
c00166dd:	5b                   	pop    ebx
c00166de:	5e                   	pop    esi
c00166df:	5f                   	pop    edi
c00166e0:	5d                   	pop    ebp
c00166e1:	c3                   	ret    

c00166e2 <LogicalDisk::mount()>:
c00166e2:	56                   	push   esi
c00166e3:	53                   	push   ebx
c00166e4:	50                   	push   eax
c00166e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e9:	8b 1d f4 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f4
c00166ef:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166f9:	85 db                	test   ebx,ebx
c00166fb:	74 50                	je     c001674d <LogicalDisk::mount()+0x6b>
c00166fd:	50                   	push   eax
c00166fe:	50                   	push   eax
c00166ff:	ff 35 a8 2a 03 c0    	push   DWORD PTR ds:0xc0032aa8
c0016705:	68 cc c1 02 c0       	push   0xc002c1cc
c001670a:	e8 42 c7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001670f:	83 c4 0c             	add    esp,0xc
c0016712:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016719:	8b 13                	mov    edx,DWORD PTR [ebx]
c001671b:	83 e8 41             	sub    eax,0x41
c001671e:	50                   	push   eax
c001671f:	56                   	push   esi
c0016720:	53                   	push   ebx
c0016721:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016724:	83 c4 10             	add    esp,0x10
c0016727:	84 c0                	test   al,al
c0016729:	74 08                	je     c0016733 <LogicalDisk::mount()+0x51>
c001672b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016731:	eb 1c                	jmp    c001674f <LogicalDisk::mount()+0x6d>
c0016733:	51                   	push   ecx
c0016734:	51                   	push   ecx
c0016735:	ff 35 a8 2a 03 c0    	push   DWORD PTR ds:0xc0032aa8
c001673b:	68 e7 c1 02 c0       	push   0xc002c1e7
c0016740:	e8 0c c7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0016745:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016748:	83 c4 10             	add    esp,0x10
c001674b:	eb ac                	jmp    c00166f9 <LogicalDisk::mount()+0x17>
c001674d:	31 c0                	xor    eax,eax
c001674f:	5a                   	pop    edx
c0016750:	5b                   	pop    ebx
c0016751:	5e                   	pop    esi
c0016752:	c3                   	ret    
c0016753:	90                   	nop

c0016754 <LogicalDisk::unmount()>:
c0016754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016758:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016762:	c3                   	ret    
c0016763:	90                   	nop

c0016764 <LogicalDisk::eject()>:
c0016764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016768:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001676e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016770:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016774:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016777:	90                   	nop

c0016778 <LogicalDisk::unassignDriveLetter()>:
c0016778:	57                   	push   edi
c0016779:	56                   	push   esi
c001677a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001677e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016785:	84 c9                	test   cl,cl
c0016787:	75 0f                	jne    c0016798 <LogicalDisk::unassignDriveLetter()+0x20>
c0016789:	c7 44 24 0c 02 c2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002c202
c0016791:	5e                   	pop    esi
c0016792:	5f                   	pop    edi
c0016793:	e9 01 42 00 00       	jmp    c001a999 <Krnl::panic(char const*)>
c0016798:	83 e9 41             	sub    ecx,0x41
c001679b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167a2:	b8 01 00 00 00       	mov    eax,0x1
c00167a7:	c7 04 8d 80 fb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0480],0x0
c00167b2:	d3 e0                	shl    eax,cl
c00167b4:	89 c7                	mov    edi,eax
c00167b6:	f7 d0                	not    eax
c00167b8:	c1 ff 1f             	sar    edi,0x1f
c00167bb:	21 05 60 fb 02 c0    	and    DWORD PTR ds:0xc002fb60,eax
c00167c1:	89 fe                	mov    esi,edi
c00167c3:	f7 d6                	not    esi
c00167c5:	21 35 64 fb 02 c0    	and    DWORD PTR ds:0xc002fb64,esi
c00167cb:	5e                   	pop    esi
c00167cc:	5f                   	pop    edi
c00167cd:	c3                   	ret    

c00167ce <LogicalDisk::read(unsigned long long, int, void*)>:
c00167ce:	57                   	push   edi
c00167cf:	56                   	push   esi
c00167d0:	53                   	push   ebx
c00167d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167e7:	77 41                	ja     c001682a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167e9:	99                   	cdq    
c00167ea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f0:	01 c8                	add    eax,ecx
c00167f2:	11 da                	adc    edx,ebx
c00167f4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167fa:	19 d7                	sbb    edi,edx
c00167fc:	72 33                	jb     c0016831 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167fe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016804:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001680a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001680e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016812:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016818:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001681e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016822:	5b                   	pop    ebx
c0016823:	5e                   	pop    esi
c0016824:	5f                   	pop    edi
c0016825:	e9 ec 0a 00 00       	jmp    c0017316 <VCache::read(unsigned long long, int, void*)>
c001682a:	b8 05 00 00 00       	mov    eax,0x5
c001682f:	eb 05                	jmp    c0016836 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016831:	b8 07 00 00 00       	mov    eax,0x7
c0016836:	5b                   	pop    ebx
c0016837:	5e                   	pop    esi
c0016838:	5f                   	pop    edi
c0016839:	c3                   	ret    

c001683a <LogicalDisk::write(unsigned long long, int, void*)>:
c001683a:	57                   	push   edi
c001683b:	56                   	push   esi
c001683c:	53                   	push   ebx
c001683d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016841:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016845:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016849:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001684d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016853:	77 41                	ja     c0016896 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016855:	99                   	cdq    
c0016856:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001685c:	01 c8                	add    eax,ecx
c001685e:	11 da                	adc    edx,ebx
c0016860:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016866:	19 d7                	sbb    edi,edx
c0016868:	72 33                	jb     c001689d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001686a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016870:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016876:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001687a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001687e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016884:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001688a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001688e:	5b                   	pop    ebx
c001688f:	5e                   	pop    esi
c0016890:	5f                   	pop    edi
c0016891:	e9 96 09 00 00       	jmp    c001722c <VCache::write(unsigned long long, int, void*)>
c0016896:	b8 05 00 00 00       	mov    eax,0x5
c001689b:	eb 05                	jmp    c00168a2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001689d:	b8 07 00 00 00       	mov    eax,0x7
c00168a2:	5b                   	pop    ebx
c00168a3:	5e                   	pop    esi
c00168a4:	5f                   	pop    edi
c00168a5:	c3                   	ret    

c00168a6 <Mouse::Mouse(char const*)>:
c00168a6:	83 ec 0c             	sub    esp,0xc
c00168a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ad:	83 ec 08             	sub    esp,0x8
c00168b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b4:	50                   	push   eax
c00168b5:	e8 d4 db ff ff       	call   c001448e <Device::Device(char const*)>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	ba 58 c2 02 c0       	mov    edx,0xc002c258
c00168c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c6:	89 10                	mov    DWORD PTR [eax],edx
c00168c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168d6:	90                   	nop
c00168d7:	83 c4 0c             	add    esp,0xc
c00168da:	c3                   	ret    
c00168db:	90                   	nop

c00168dc <Mouse::~Mouse()>:
c00168dc:	83 ec 0c             	sub    esp,0xc
c00168df:	ba 58 c2 02 c0       	mov    edx,0xc002c258
c00168e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e8:	89 10                	mov    DWORD PTR [eax],edx
c00168ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	50                   	push   eax
c00168f2:	e8 61 d8 ff ff       	call   c0014158 <Device::~Device()>
c00168f7:	83 c4 10             	add    esp,0x10
c00168fa:	90                   	nop
c00168fb:	83 c4 0c             	add    esp,0xc
c00168fe:	c3                   	ret    
c00168ff:	90                   	nop

c0016900 <Mouse::~Mouse()>:
c0016900:	83 ec 0c             	sub    esp,0xc
c0016903:	83 ec 0c             	sub    esp,0xc
c0016906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001690a:	e8 cd ff ff ff       	call   c00168dc <Mouse::~Mouse()>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	83 ec 08             	sub    esp,0x8
c0016915:	68 58 01 00 00       	push   0x158
c001691a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001691e:	e8 4e c4 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	83 c4 0c             	add    esp,0xc
c0016929:	c3                   	ret    

c001692a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001692a:	55                   	push   ebp
c001692b:	57                   	push   edi
c001692c:	56                   	push   esi
c001692d:	53                   	push   ebx
c001692e:	81 ec 20 01 00 00    	sub    esp,0x120
c0016934:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001693b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016942:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016949:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016950:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016958:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001695c:	56                   	push   esi
c001695d:	68 7c c2 02 c0       	push   0xc002c27c
c0016962:	e8 ea c4 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0016967:	58                   	pop    eax
c0016968:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001696f:	e8 16 dc ff ff       	call   c001458a <Device::getName()>
c0016974:	5a                   	pop    edx
c0016975:	59                   	pop    ecx
c0016976:	50                   	push   eax
c0016977:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001697b:	53                   	push   ebx
c001697c:	e8 8b 9e fe ff       	call   c000080c <strcpy>
c0016981:	5d                   	pop    ebp
c0016982:	58                   	pop    eax
c0016983:	68 ad c2 02 c0       	push   0xc002c2ad
c0016988:	53                   	push   ebx
c0016989:	e8 be 9f fe ff       	call   c000094c <strcat>
c001698e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016995:	e8 f2 8e ff ff       	call   c000f88c <malloc>
c001699a:	83 c4 0c             	add    esp,0xc
c001699d:	89 c5                	mov    ebp,eax
c001699f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169a7:	57                   	push   edi
c00169a8:	56                   	push   esi
c00169a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169b0:	53                   	push   ebx
c00169b1:	50                   	push   eax
c00169b2:	e8 bf fb ff ff       	call   c0016576 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169b7:	83 c4 14             	add    esp,0x14
c00169ba:	55                   	push   ebp
c00169bb:	e8 6c fc ff ff       	call   c001662c <LogicalDisk::assignDriveLetter()>
c00169c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169c3:	0f be d8             	movsx  ebx,al
c00169c6:	e8 17 fd ff ff       	call   c00166e2 <LogicalDisk::mount()>
c00169cb:	58                   	pop    eax
c00169cc:	5a                   	pop    edx
c00169cd:	55                   	push   ebp
c00169ce:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169d5:	e8 b0 d8 ff ff       	call   c001428a <Device::addChild(Device*)>
c00169da:	59                   	pop    ecx
c00169db:	5e                   	pop    esi
c00169dc:	53                   	push   ebx
c00169dd:	68 b8 c2 02 c0       	push   0xc002c2b8
c00169e2:	e8 6a c4 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00169e7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169ed:	5b                   	pop    ebx
c00169ee:	5e                   	pop    esi
c00169ef:	5f                   	pop    edi
c00169f0:	5d                   	pop    ebp
c00169f1:	c3                   	ret    

c00169f2 <createPartitionsForDisk(PhysicalDisk*)>:
c00169f2:	55                   	push   ebp
c00169f3:	57                   	push   edi
c00169f4:	56                   	push   esi
c00169f5:	53                   	push   ebx
c00169f6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169fc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a03:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a09:	3d 00 02 00 00       	cmp    eax,0x200
c0016a0e:	74 27                	je     c0016a37 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a10:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a16:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a1c:	83 ec 10             	sub    esp,0x10
c0016a1f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a23:	99                   	cdq    
c0016a24:	c1 e6 0a             	shl    esi,0xa
c0016a27:	52                   	push   edx
c0016a28:	89 fd                	mov    ebp,edi
c0016a2a:	50                   	push   eax
c0016a2b:	55                   	push   ebp
c0016a2c:	56                   	push   esi
c0016a2d:	e8 12 0e 01 00       	call   c0027844 <__udivdi3>
c0016a32:	e9 b1 00 00 00       	jmp    c0016ae8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a37:	83 ec 0c             	sub    esp,0xc
c0016a3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a3c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a40:	56                   	push   esi
c0016a41:	6a 01                	push   0x1
c0016a43:	6a 00                	push   0x0
c0016a45:	6a 00                	push   0x0
c0016a47:	53                   	push   ebx
c0016a48:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a4b:	83 c4 20             	add    esp,0x20
c0016a4e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a56:	75 0a                	jne    c0016a62 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a58:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a60:	74 2c                	je     c0016a8e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a62:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a68:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a74:	83 ec 10             	sub    esp,0x10
c0016a77:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a7b:	89 f7                	mov    edi,esi
c0016a7d:	c1 e0 0a             	shl    eax,0xa
c0016a80:	c1 ff 1f             	sar    edi,0x1f
c0016a83:	57                   	push   edi
c0016a84:	56                   	push   esi
c0016a85:	52                   	push   edx
c0016a86:	50                   	push   eax
c0016a87:	e8 b8 0d 01 00       	call   c0027844 <__udivdi3>
c0016a8c:	eb 5a                	jmp    c0016ae8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a8e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a95:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a9c:	83 e1 7f             	and    ecx,0x7f
c0016a9f:	83 e0 7f             	and    eax,0x7f
c0016aa2:	01 c1                	add    ecx,eax
c0016aa4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aab:	83 e0 7f             	and    eax,0x7f
c0016aae:	01 c1                	add    ecx,eax
c0016ab0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ab7:	83 e0 7f             	and    eax,0x7f
c0016aba:	00 c1                	add    cl,al
c0016abc:	74 41                	je     c0016aff <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016abe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ac4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad0:	83 ec 10             	sub    esp,0x10
c0016ad3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ad7:	89 f7                	mov    edi,esi
c0016ad9:	c1 e0 0a             	shl    eax,0xa
c0016adc:	c1 ff 1f             	sar    edi,0x1f
c0016adf:	57                   	push   edi
c0016ae0:	56                   	push   esi
c0016ae1:	52                   	push   edx
c0016ae2:	50                   	push   eax
c0016ae3:	e8 5c 0d 01 00       	call   c0027844 <__udivdi3>
c0016ae8:	83 c4 14             	add    esp,0x14
c0016aeb:	52                   	push   edx
c0016aec:	50                   	push   eax
c0016aed:	6a 00                	push   0x0
c0016aef:	6a 00                	push   0x0
c0016af1:	53                   	push   ebx
c0016af2:	e8 33 fe ff ff       	call   c001692a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016af7:	83 c4 20             	add    esp,0x20
c0016afa:	e9 79 01 00 00       	jmp    c0016c78 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016aff:	89 f0                	mov    eax,esi
c0016b01:	31 f6                	xor    esi,esi
c0016b03:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b0a:	75 02                	jne    c0016b0e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b0c:	89 f1                	mov    ecx,esi
c0016b0e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b15:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b1c:	c1 e2 08             	shl    edx,0x8
c0016b1f:	c1 e7 10             	shl    edi,0x10
c0016b22:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b2a:	09 fa                	or     edx,edi
c0016b2c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b34:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b3b:	83 c0 10             	add    eax,0x10
c0016b3e:	09 fa                	or     edx,edi
c0016b40:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b47:	c1 e7 18             	shl    edi,0x18
c0016b4a:	09 fa                	or     edx,edi
c0016b4c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b53:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b57:	c1 e7 10             	shl    edi,0x10
c0016b5a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b61:	c1 e2 08             	shl    edx,0x8
c0016b64:	09 fa                	or     edx,edi
c0016b66:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b6d:	09 fa                	or     edx,edi
c0016b6f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b76:	c1 e7 18             	shl    edi,0x18
c0016b79:	09 fa                	or     edx,edi
c0016b7b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b7f:	46                   	inc    esi
c0016b80:	83 fe 04             	cmp    esi,0x4
c0016b83:	0f 85 7a ff ff ff    	jne    c0016b03 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b8d:	83 f0 01             	xor    eax,0x1
c0016b90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b94:	75 57                	jne    c0016bed <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b9a:	83 f0 01             	xor    eax,0x1
c0016b9d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ba1:	75 4a                	jne    c0016bed <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ba3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ba7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016baf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bb7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bbd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bc3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bc9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bcd:	89 f7                	mov    edi,esi
c0016bcf:	c1 e0 0a             	shl    eax,0xa
c0016bd2:	c1 ff 1f             	sar    edi,0x1f
c0016bd5:	57                   	push   edi
c0016bd6:	56                   	push   esi
c0016bd7:	52                   	push   edx
c0016bd8:	50                   	push   eax
c0016bd9:	e8 66 0c 01 00       	call   c0027844 <__udivdi3>
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016be5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016be9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bed:	84 c9                	test   cl,cl
c0016bef:	74 53                	je     c0016c44 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bf1:	0f b6 c9             	movzx  ecx,cl
c0016bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bfc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c00:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c0c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c10:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c18:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c24:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c28:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c2c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c30:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c34:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c38:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c3c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c40:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c44:	31 ed                	xor    ebp,ebp
c0016c46:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c4a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c4e:	89 f8                	mov    eax,edi
c0016c50:	09 f0                	or     eax,esi
c0016c52:	74 1e                	je     c0016c72 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c54:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c58:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c5c:	89 d1                	mov    ecx,edx
c0016c5e:	09 c1                	or     ecx,eax
c0016c60:	74 10                	je     c0016c72 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c62:	83 ec 0c             	sub    esp,0xc
c0016c65:	57                   	push   edi
c0016c66:	56                   	push   esi
c0016c67:	52                   	push   edx
c0016c68:	50                   	push   eax
c0016c69:	53                   	push   ebx
c0016c6a:	e8 bb fc ff ff       	call   c001692a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c6f:	83 c4 20             	add    esp,0x20
c0016c72:	45                   	inc    ebp
c0016c73:	83 fd 04             	cmp    ebp,0x4
c0016c76:	75 ce                	jne    c0016c46 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c78:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c7e:	5b                   	pop    ebx
c0016c7f:	5e                   	pop    esi
c0016c80:	5f                   	pop    edi
c0016c81:	5d                   	pop    ebp
c0016c82:	c3                   	ret    
c0016c83:	90                   	nop

c0016c84 <Serial::Serial(char const*)>:
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8b:	83 ec 08             	sub    esp,0x8
c0016c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c92:	50                   	push   eax
c0016c93:	e8 f6 d7 ff ff       	call   c001448e <Device::Device(char const*)>
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0016ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca4:	89 10                	mov    DWORD PTR [eax],edx
c0016ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016caa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cb4:	90                   	nop
c0016cb5:	83 c4 0c             	add    esp,0xc
c0016cb8:	c3                   	ret    
c0016cb9:	90                   	nop

c0016cba <Serial::~Serial()>:
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0016cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc6:	89 10                	mov    DWORD PTR [eax],edx
c0016cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	50                   	push   eax
c0016cd0:	e8 83 d4 ff ff       	call   c0014158 <Device::~Device()>
c0016cd5:	83 c4 10             	add    esp,0x10
c0016cd8:	90                   	nop
c0016cd9:	83 c4 0c             	add    esp,0xc
c0016cdc:	c3                   	ret    
c0016cdd:	90                   	nop

c0016cde <Serial::~Serial()>:
c0016cde:	83 ec 0c             	sub    esp,0xc
c0016ce1:	83 ec 0c             	sub    esp,0xc
c0016ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce8:	e8 cd ff ff ff       	call   c0016cba <Serial::~Serial()>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	83 ec 08             	sub    esp,0x8
c0016cf3:	68 58 01 00 00       	push   0x158
c0016cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfc:	e8 70 c0 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	83 c4 0c             	add    esp,0xc
c0016d07:	c3                   	ret    

c0016d08 <Timer::Timer(char const*)>:
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0f:	83 ec 08             	sub    esp,0x8
c0016d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d16:	50                   	push   eax
c0016d17:	e8 72 d7 ff ff       	call   c001448e <Device::Device(char const*)>
c0016d1c:	83 c4 10             	add    esp,0x10
c0016d1f:	ba 28 c3 02 c0       	mov    edx,0xc002c328
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	89 10                	mov    DWORD PTR [eax],edx
c0016d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d38:	90                   	nop
c0016d39:	83 c4 0c             	add    esp,0xc
c0016d3c:	c3                   	ret    
c0016d3d:	90                   	nop

c0016d3e <Timer::~Timer()>:
c0016d3e:	83 ec 0c             	sub    esp,0xc
c0016d41:	ba 28 c3 02 c0       	mov    edx,0xc002c328
c0016d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4a:	89 10                	mov    DWORD PTR [eax],edx
c0016d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d50:	83 ec 0c             	sub    esp,0xc
c0016d53:	50                   	push   eax
c0016d54:	e8 ff d3 ff ff       	call   c0014158 <Device::~Device()>
c0016d59:	83 c4 10             	add    esp,0x10
c0016d5c:	90                   	nop
c0016d5d:	83 c4 0c             	add    esp,0xc
c0016d60:	c3                   	ret    
c0016d61:	90                   	nop

c0016d62 <Timer::~Timer()>:
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	83 ec 0c             	sub    esp,0xc
c0016d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d6c:	e8 cd ff ff ff       	call   c0016d3e <Timer::~Timer()>
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	83 ec 08             	sub    esp,0x8
c0016d77:	68 5c 01 00 00       	push   0x15c
c0016d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d80:	e8 ec bf ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	83 c4 0c             	add    esp,0xc
c0016d8b:	c3                   	ret    

c0016d8c <Timer::read()>:
c0016d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d96:	c3                   	ret    

c0016d97 <timerHandler(unsigned long long)>:
c0016d97:	55                   	push   ebp
c0016d98:	57                   	push   edi
c0016d99:	56                   	push   esi
c0016d9a:	53                   	push   ebx
c0016d9b:	83 ec 0c             	sub    esp,0xc
c0016d9e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016da2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016da6:	01 35 f0 fb 02 c0    	add    DWORD PTR ds:0xc002fbf0,esi
c0016dac:	11 3d f4 fb 02 c0    	adc    DWORD PTR ds:0xc002fbf4,edi
c0016db2:	80 3d 6d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f56d,0x0
c0016db9:	0f 84 42 01 00 00    	je     c0016f01 <timerHandler(unsigned long long)+0x16a>
c0016dbf:	fa                   	cli    
c0016dc0:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c0016dc6:	83 ec 0c             	sub    esp,0xc
c0016dc9:	ff 05 a4 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa4
c0016dcf:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016dd4:	e8 f1 2a 01 00       	call   c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	84 c0                	test   al,al
c0016dde:	0f 85 a2 00 00 00    	jne    c0016e86 <timerHandler(unsigned long long)+0xef>
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016dec:	e8 f5 2a 01 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df1:	83 c4 10             	add    esp,0x10
c0016df4:	89 c3                	mov    ebx,eax
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016dfe:	e8 e3 2a 01 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e03:	c7 04 24 b8 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ab8
c0016e0a:	89 c5                	mov    ebp,eax
c0016e0c:	e8 dd 2a 01 00       	call   c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e11:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e14:	83 c4 10             	add    esp,0x10
c0016e17:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e1a:	39 15 f0 fb 02 c0    	cmp    DWORD PTR ds:0xc002fbf0,edx
c0016e20:	a1 f4 fb 02 c0       	mov    eax,ds:0xc002fbf4
c0016e25:	19 c8                	sbb    eax,ecx
c0016e27:	72 21                	jb     c0016e4a <timerHandler(unsigned long long)+0xb3>
c0016e29:	83 ec 0c             	sub    esp,0xc
c0016e2c:	55                   	push   ebp
c0016e2d:	e8 de 7d 00 00       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c0016e32:	83 c4 10             	add    esp,0x10
c0016e35:	39 eb                	cmp    ebx,ebp
c0016e37:	75 21                	jne    c0016e5a <timerHandler(unsigned long long)+0xc3>
c0016e39:	83 ec 0c             	sub    esp,0xc
c0016e3c:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016e41:	e8 a0 2a 01 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e46:	89 c3                	mov    ebx,eax
c0016e48:	eb 0d                	jmp    c0016e57 <timerHandler(unsigned long long)+0xc0>
c0016e4a:	50                   	push   eax
c0016e4b:	50                   	push   eax
c0016e4c:	55                   	push   ebp
c0016e4d:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016e52:	e8 45 2b 01 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e57:	83 c4 10             	add    esp,0x10
c0016e5a:	83 ec 0c             	sub    esp,0xc
c0016e5d:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016e62:	e8 63 2a 01 00       	call   c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e67:	83 c4 10             	add    esp,0x10
c0016e6a:	84 c0                	test   al,al
c0016e6c:	75 18                	jne    c0016e86 <timerHandler(unsigned long long)+0xef>
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	68 b8 2a 03 c0       	push   0xc0032ab8
c0016e76:	e8 6b 2a 01 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e7b:	83 c4 10             	add    esp,0x10
c0016e7e:	39 d8                	cmp    eax,ebx
c0016e80:	0f 85 70 ff ff ff    	jne    c0016df6 <timerHandler(unsigned long long)+0x5f>
c0016e86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e8b:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e8f:	74 3d                	je     c0016ece <timerHandler(unsigned long long)+0x137>
c0016e91:	80 3d 6c f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f56c,0x0
c0016e98:	74 34                	je     c0016ece <timerHandler(unsigned long long)+0x137>
c0016e9a:	fa                   	cli    
c0016e9b:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c0016ea1:	31 d2                	xor    edx,edx
c0016ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea8:	89 f9                	mov    ecx,edi
c0016eaa:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016eb5:	39 c6                	cmp    esi,eax
c0016eb7:	19 d1                	sbb    ecx,edx
c0016eb9:	72 05                	jb     c0016ec0 <timerHandler(unsigned long long)+0x129>
c0016ebb:	e8 8c 78 00 00       	call   c001e74c <schedule()>
c0016ec0:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0016ec5:	48                   	dec    eax
c0016ec6:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0016ecb:	75 01                	jne    c0016ece <timerHandler(unsigned long long)+0x137>
c0016ecd:	fb                   	sti    
c0016ece:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c0016ed3:	48                   	dec    eax
c0016ed4:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c0016ed9:	75 18                	jne    c0016ef3 <timerHandler(unsigned long long)+0x15c>
c0016edb:	83 3d a0 2a 03 c0 00 	cmp    DWORD PTR ds:0xc0032aa0,0x0
c0016ee2:	74 0f                	je     c0016ef3 <timerHandler(unsigned long long)+0x15c>
c0016ee4:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c0016eee:	e8 59 78 00 00       	call   c001e74c <schedule()>
c0016ef3:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0016ef8:	48                   	dec    eax
c0016ef9:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c0016efe:	75 01                	jne    c0016f01 <timerHandler(unsigned long long)+0x16a>
c0016f00:	fb                   	sti    
c0016f01:	83 c4 0c             	add    esp,0xc
c0016f04:	5b                   	pop    ebx
c0016f05:	5e                   	pop    esi
c0016f06:	5f                   	pop    edi
c0016f07:	5d                   	pop    ebp
c0016f08:	c3                   	ret    

c0016f09 <setupTimer(int)>:
c0016f09:	57                   	push   edi
c0016f0a:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0016f0f:	56                   	push   esi
c0016f10:	53                   	push   ebx
c0016f11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f15:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f1b:	83 ec 0c             	sub    esp,0xc
c0016f1e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f24:	e8 61 d6 ff ff       	call   c001458a <Device::getName()>
c0016f29:	83 c4 10             	add    esp,0x10
c0016f2c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f2f:	0f 85 8d 00 00 00    	jne    c0016fc2 <setupTimer(int)+0xb9>
c0016f35:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0016f3a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f41:	74 7f                	je     c0016fc2 <setupTimer(int)+0xb9>
c0016f43:	83 ec 0c             	sub    esp,0xc
c0016f46:	68 5c 01 00 00       	push   0x15c
c0016f4b:	e8 3c 89 ff ff       	call   c000f88c <malloc>
c0016f50:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f53:	89 c3                	mov    ebx,eax
c0016f55:	e8 bc 04 01 00       	call   c0027416 <PIT::PIT()>
c0016f5a:	59                   	pop    ecx
c0016f5b:	5f                   	pop    edi
c0016f5c:	53                   	push   ebx
c0016f5d:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c0016f63:	e8 22 d3 ff ff       	call   c001428a <Device::addChild(Device*)>
c0016f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f6a:	6a 00                	push   0x0
c0016f6c:	6a 00                	push   0x0
c0016f6e:	56                   	push   esi
c0016f6f:	53                   	push   ebx
c0016f70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f73:	83 c4 14             	add    esp,0x14
c0016f76:	68 60 01 00 00       	push   0x160
c0016f7b:	e8 0c 89 ff ff       	call   c000f88c <malloc>
c0016f80:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f83:	89 c7                	mov    edi,eax
c0016f85:	e8 3c 03 01 00       	call   c00272c6 <APICTimer::APICTimer()>
c0016f8a:	6a 00                	push   0x0
c0016f8c:	6a 00                	push   0x0
c0016f8e:	56                   	push   esi
c0016f8f:	57                   	push   edi
c0016f90:	e8 33 02 01 00       	call   c00271c8 <APICTimer::open(int, int, void*)>
c0016f95:	83 c4 20             	add    esp,0x20
c0016f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f9a:	6a 00                	push   0x0
c0016f9c:	6a 00                	push   0x0
c0016f9e:	6a 00                	push   0x0
c0016fa0:	53                   	push   ebx
c0016fa1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fa4:	58                   	pop    eax
c0016fa5:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0016faa:	5a                   	pop    edx
c0016fab:	57                   	push   edi
c0016fac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fb2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fb8:	e8 cd d2 ff ff       	call   c001428a <Device::addChild(Device*)>
c0016fbd:	83 c4 10             	add    esp,0x10
c0016fc0:	eb 33                	jmp    c0016ff5 <setupTimer(int)+0xec>
c0016fc2:	83 ec 0c             	sub    esp,0xc
c0016fc5:	68 5c 01 00 00       	push   0x15c
c0016fca:	e8 bd 88 ff ff       	call   c000f88c <malloc>
c0016fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fd2:	89 c3                	mov    ebx,eax
c0016fd4:	e8 3d 04 01 00       	call   c0027416 <PIT::PIT()>
c0016fd9:	58                   	pop    eax
c0016fda:	5a                   	pop    edx
c0016fdb:	53                   	push   ebx
c0016fdc:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c0016fe2:	e8 a3 d2 ff ff       	call   c001428a <Device::addChild(Device*)>
c0016fe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fe9:	6a 00                	push   0x0
c0016feb:	6a 00                	push   0x0
c0016fed:	56                   	push   esi
c0016fee:	53                   	push   ebx
c0016fef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ff2:	83 c4 20             	add    esp,0x20
c0016ff5:	89 d8                	mov    eax,ebx
c0016ff7:	5b                   	pop    ebx
c0016ff8:	5e                   	pop    esi
c0016ff9:	5f                   	pop    edi
c0016ffa:	c3                   	ret    
c0016ffb:	90                   	nop

c0016ffc <VCache::VCache(PhysicalDisk*)>:
c0016ffc:	53                   	push   ebx
c0016ffd:	83 ec 18             	sub    esp,0x18
c0017000:	ba 58 c3 02 c0       	mov    edx,0xc002c358
c0017005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017009:	89 10                	mov    DWORD PTR [eax],edx
c001700b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017025:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001702c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017037:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001703e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017049:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017054:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017063:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001706a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017076:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001707a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017086:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001708d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017095:	83 ec 0c             	sub    esp,0xc
c0017098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001709c:	e8 eb 87 ff ff       	call   c000f88c <malloc>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	89 c3                	mov    ebx,eax
c00170a6:	83 ec 0c             	sub    esp,0xc
c00170a9:	53                   	push   ebx
c00170aa:	e8 47 74 00 00       	call   c001e4f6 <Mutex::Mutex()>
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170c1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170f4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170f7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017102:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017106:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001710c:	05 00 01 00 00       	add    eax,0x100
c0017111:	c1 e0 04             	shl    eax,0x4
c0017114:	83 ec 0c             	sub    esp,0xc
c0017117:	50                   	push   eax
c0017118:	e8 6f 87 ff ff       	call   c000f88c <malloc>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	89 c2                	mov    edx,eax
c0017122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017126:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017138:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001713c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017140:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017146:	c1 e0 07             	shl    eax,0x7
c0017149:	83 ec 0c             	sub    esp,0xc
c001714c:	50                   	push   eax
c001714d:	e8 3a 87 ff ff       	call   c000f88c <malloc>
c0017152:	83 c4 10             	add    esp,0x10
c0017155:	89 c2                	mov    edx,eax
c0017157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001715e:	90                   	nop
c001715f:	83 c4 18             	add    esp,0x18
c0017162:	5b                   	pop    ebx
c0017163:	c3                   	ret    

c0017164 <VCache::invalidateReadBuffer()>:
c0017164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017168:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001716e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017172:	c3                   	ret    
c0017173:	90                   	nop

c0017174 <VCache::writeWriteBuffer()>:
c0017174:	53                   	push   ebx
c0017175:	83 ec 14             	sub    esp,0x14
c0017178:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001717c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001717f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017181:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017184:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017187:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001718a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001718d:	50                   	push   eax
c001718e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017191:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017198:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001719f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171a3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171aa:	83 c4 28             	add    esp,0x28
c00171ad:	5b                   	pop    ebx
c00171ae:	c3                   	ret    
c00171af:	90                   	nop

c00171b0 <VCache::~VCache()>:
c00171b0:	83 ec 0c             	sub    esp,0xc
c00171b3:	ba 58 c3 02 c0       	mov    edx,0xc002c358
c00171b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171bc:	89 10                	mov    DWORD PTR [eax],edx
c00171be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171c5:	84 c0                	test   al,al
c00171c7:	74 0f                	je     c00171d8 <VCache::~VCache()+0x28>
c00171c9:	83 ec 0c             	sub    esp,0xc
c00171cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d0:	e8 9f ff ff ff       	call   c0017174 <VCache::writeWriteBuffer()>
c00171d5:	83 c4 10             	add    esp,0x10
c00171d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171df:	83 ec 0c             	sub    esp,0xc
c00171e2:	50                   	push   eax
c00171e3:	e8 b4 86 ff ff       	call   c000f89c <free>
c00171e8:	83 c4 10             	add    esp,0x10
c00171eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171f2:	83 ec 0c             	sub    esp,0xc
c00171f5:	50                   	push   eax
c00171f6:	e8 a1 86 ff ff       	call   c000f89c <free>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	90                   	nop
c00171ff:	83 c4 0c             	add    esp,0xc
c0017202:	c3                   	ret    
c0017203:	90                   	nop

c0017204 <VCache::~VCache()>:
c0017204:	83 ec 0c             	sub    esp,0xc
c0017207:	83 ec 0c             	sub    esp,0xc
c001720a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001720e:	e8 9d ff ff ff       	call   c00171b0 <VCache::~VCache()>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	83 ec 08             	sub    esp,0x8
c0017219:	6a 44                	push   0x44
c001721b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001721f:	e8 4d bb ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	83 c4 0c             	add    esp,0xc
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <VCache::write(unsigned long long, int, void*)>:
c001722c:	55                   	push   ebp
c001722d:	57                   	push   edi
c001722e:	56                   	push   esi
c001722f:	53                   	push   ebx
c0017230:	83 ec 18             	sub    esp,0x18
c0017233:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017237:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001723b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001723f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017242:	e8 3d 78 00 00       	call   c001ea84 <Semaphore::acquire()>
c0017247:	83 c4 10             	add    esp,0x10
c001724a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001724e:	74 0c                	je     c001725c <VCache::write(unsigned long long, int, void*)+0x30>
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	53                   	push   ebx
c0017254:	e8 0b ff ff ff       	call   c0017164 <VCache::invalidateReadBuffer()>
c0017259:	83 c4 10             	add    esp,0x10
c001725c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017260:	74 5c                	je     c00172be <VCache::write(unsigned long long, int, void*)+0x92>
c0017262:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017265:	89 e8                	mov    eax,ebp
c0017267:	99                   	cdq    
c0017268:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001726b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001726e:	89 c1                	mov    ecx,eax
c0017270:	89 d0                	mov    eax,edx
c0017272:	31 f1                	xor    ecx,esi
c0017274:	31 f8                	xor    eax,edi
c0017276:	09 c1                	or     ecx,eax
c0017278:	75 38                	jne    c00172b2 <VCache::write(unsigned long long, int, void*)+0x86>
c001727a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001727f:	75 31                	jne    c00172b2 <VCache::write(unsigned long long, int, void*)+0x86>
c0017281:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017284:	89 ef                	mov    edi,ebp
c0017286:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001728c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017290:	0f af f9             	imul   edi,ecx
c0017293:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0017296:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017298:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001729b:	40                   	inc    eax
c001729c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001729f:	83 c0 80             	add    eax,0xffffff80
c00172a2:	75 5c                	jne    c0017300 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172a4:	83 ec 0c             	sub    esp,0xc
c00172a7:	53                   	push   ebx
c00172a8:	e8 c7 fe ff ff       	call   c0017174 <VCache::writeWriteBuffer()>
c00172ad:	83 c4 10             	add    esp,0x10
c00172b0:	eb 4e                	jmp    c0017300 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172b2:	83 ec 0c             	sub    esp,0xc
c00172b5:	53                   	push   ebx
c00172b6:	e8 b9 fe ff ff       	call   c0017174 <VCache::writeWriteBuffer()>
c00172bb:	83 c4 10             	add    esp,0x10
c00172be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c1:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172c6:	7f 22                	jg     c00172ea <VCache::write(unsigned long long, int, void*)+0xbe>
c00172c8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172cb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172d2:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172d6:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172d9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172dc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172e2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172e8:	eb 16                	jmp    c0017300 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172ea:	83 ec 0c             	sub    esp,0xc
c00172ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00172ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172f7:	57                   	push   edi
c00172f8:	56                   	push   esi
c00172f9:	50                   	push   eax
c00172fa:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172fd:	83 c4 20             	add    esp,0x20
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017306:	e8 b3 7e 00 00       	call   c001f1be <Semaphore::release()>
c001730b:	83 c4 1c             	add    esp,0x1c
c001730e:	31 c0                	xor    eax,eax
c0017310:	5b                   	pop    ebx
c0017311:	5e                   	pop    esi
c0017312:	5f                   	pop    edi
c0017313:	5d                   	pop    ebp
c0017314:	c3                   	ret    
c0017315:	90                   	nop

c0017316 <VCache::read(unsigned long long, int, void*)>:
c0017316:	55                   	push   ebp
c0017317:	57                   	push   edi
c0017318:	56                   	push   esi
c0017319:	53                   	push   ebx
c001731a:	83 ec 28             	sub    esp,0x28
c001731d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017321:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017325:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017329:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001732d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017330:	e8 4f 77 00 00       	call   c001ea84 <Semaphore::acquire()>
c0017335:	83 c4 10             	add    esp,0x10
c0017338:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001733c:	74 0c                	je     c001734a <VCache::read(unsigned long long, int, void*)+0x34>
c001733e:	83 ec 0c             	sub    esp,0xc
c0017341:	53                   	push   ebx
c0017342:	e8 2d fe ff ff       	call   c0017174 <VCache::writeWriteBuffer()>
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	83 fd 01             	cmp    ebp,0x1
c001734d:	0f 85 80 00 00 00    	jne    c00173d3 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017353:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017356:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001735a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017361:	75 70                	jne    c00173d3 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017363:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017366:	89 e9                	mov    ecx,ebp
c0017368:	f7 d9                	neg    ecx
c001736a:	89 c8                	mov    eax,ecx
c001736c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017370:	c1 f8 1f             	sar    eax,0x1f
c0017373:	21 f1                	and    ecx,esi
c0017375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017379:	89 c8                	mov    eax,ecx
c001737b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001737f:	21 f9                	and    ecx,edi
c0017381:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017385:	89 ca                	mov    edx,ecx
c0017387:	74 0a                	je     c0017393 <VCache::read(unsigned long long, int, void*)+0x7d>
c0017389:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001738c:	75 05                	jne    c0017393 <VCache::read(unsigned long long, int, void*)+0x7d>
c001738e:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0017391:	74 23                	je     c00173b6 <VCache::read(unsigned long long, int, void*)+0xa0>
c0017393:	83 ec 0c             	sub    esp,0xc
c0017396:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001739a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001739e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00173a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00173a4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173a6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173a9:	55                   	push   ebp
c00173aa:	52                   	push   edx
c00173ab:	50                   	push   eax
c00173ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173b0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173b3:	83 c4 20             	add    esp,0x20
c00173b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173bd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c6:	48                   	dec    eax
c00173c7:	21 c6                	and    esi,eax
c00173c9:	0f af f1             	imul   esi,ecx
c00173cc:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173d1:	eb 1d                	jmp    c00173f0 <VCache::read(unsigned long long, int, void*)+0xda>
c00173d3:	83 ec 0c             	sub    esp,0xc
c00173d6:	53                   	push   ebx
c00173d7:	e8 88 fd ff ff       	call   c0017164 <VCache::invalidateReadBuffer()>
c00173dc:	5a                   	pop    edx
c00173dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00173e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173e6:	55                   	push   ebp
c00173e7:	57                   	push   edi
c00173e8:	56                   	push   esi
c00173e9:	50                   	push   eax
c00173ea:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173ed:	83 c4 20             	add    esp,0x20
c00173f0:	83 ec 0c             	sub    esp,0xc
c00173f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173f6:	e8 c3 7d 00 00       	call   c001f1be <Semaphore::release()>
c00173fb:	83 c4 2c             	add    esp,0x2c
c00173fe:	31 c0                	xor    eax,eax
c0017400:	5b                   	pop    ebx
c0017401:	5e                   	pop    esi
c0017402:	5f                   	pop    edi
c0017403:	5d                   	pop    ebp
c0017404:	c3                   	ret    
c0017405:	90                   	nop

c0017406 <Video::putrect(int, int, int, int, unsigned int)>:
c0017406:	55                   	push   ebp
c0017407:	57                   	push   edi
c0017408:	56                   	push   esi
c0017409:	53                   	push   ebx
c001740a:	83 ec 1c             	sub    esp,0x1c
c001740d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017411:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017415:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017419:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001741d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017425:	01 df                	add    edi,ebx
c0017427:	39 fb                	cmp    ebx,edi
c0017429:	7d 1f                	jge    c001744a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001742b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001742f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017433:	7d 12                	jge    c0017447 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017435:	8b 16                	mov    edx,DWORD PTR [esi]
c0017437:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001743b:	53                   	push   ebx
c001743c:	55                   	push   ebp
c001743d:	45                   	inc    ebp
c001743e:	56                   	push   esi
c001743f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017442:	83 c4 10             	add    esp,0x10
c0017445:	eb e8                	jmp    c001742f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017447:	43                   	inc    ebx
c0017448:	eb dd                	jmp    c0017427 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001744a:	83 c4 1c             	add    esp,0x1c
c001744d:	5b                   	pop    ebx
c001744e:	5e                   	pop    esi
c001744f:	5f                   	pop    edi
c0017450:	5d                   	pop    ebp
c0017451:	c3                   	ret    

c0017452 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017452:	55                   	push   ebp
c0017453:	57                   	push   edi
c0017454:	31 ff                	xor    edi,edi
c0017456:	56                   	push   esi
c0017457:	53                   	push   ebx
c0017458:	83 ec 1c             	sub    esp,0x1c
c001745b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001745f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017463:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001746a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001746f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017473:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017477:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001747b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001747e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017482:	01 f9                	add    ecx,edi
c0017484:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017488:	7d 2f                	jge    c00174b9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001748a:	31 f6                	xor    esi,esi
c001748c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017490:	01 f2                	add    edx,esi
c0017492:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017496:	7d 1a                	jge    c00174b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017498:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001749b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001749e:	46                   	inc    esi
c001749f:	51                   	push   ecx
c00174a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174a4:	52                   	push   edx
c00174a5:	55                   	push   ebp
c00174a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174a9:	83 c4 10             	add    esp,0x10
c00174ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174b0:	eb da                	jmp    c001748c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174b2:	47                   	inc    edi
c00174b3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174b7:	eb c5                	jmp    c001747e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174b9:	83 c4 1c             	add    esp,0x1c
c00174bc:	5b                   	pop    ebx
c00174bd:	5e                   	pop    esi
c00174be:	5f                   	pop    edi
c00174bf:	5d                   	pop    ebp
c00174c0:	c3                   	ret    
c00174c1:	90                   	nop

c00174c2 <Video::blit(unsigned int*, int, int, int, int)>:
c00174c2:	55                   	push   ebp
c00174c3:	57                   	push   edi
c00174c4:	56                   	push   esi
c00174c5:	53                   	push   ebx
c00174c6:	83 ec 1c             	sub    esp,0x1c
c00174c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174d1:	85 c0                	test   eax,eax
c00174d3:	79 02                	jns    c00174d7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174d5:	31 c0                	xor    eax,eax
c00174d7:	c1 e0 02             	shl    eax,0x2
c00174da:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174e6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174ea:	39 d8                	cmp    eax,ebx
c00174ec:	7e 49                	jle    c0017537 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174ee:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174f4:	7c 41                	jl     c0017537 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174f6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174fe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017502:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017506:	39 f9                	cmp    ecx,edi
c0017508:	7e 22                	jle    c001752c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001750a:	83 c5 04             	add    ebp,0x4
c001750d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017513:	7c 14                	jl     c0017529 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017515:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017517:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001751a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001751e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017522:	56                   	push   esi
c0017523:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	47                   	inc    edi
c001752a:	eb d2                	jmp    c00174fe <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001752c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017530:	43                   	inc    ebx
c0017531:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017535:	eb ab                	jmp    c00174e2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017537:	83 c4 1c             	add    esp,0x1c
c001753a:	5b                   	pop    ebx
c001753b:	5e                   	pop    esi
c001753c:	5f                   	pop    edi
c001753d:	5d                   	pop    ebp
c001753e:	c3                   	ret    
c001753f:	90                   	nop

c0017540 <Video::clearScreen(unsigned int)>:
c0017540:	57                   	push   edi
c0017541:	56                   	push   esi
c0017542:	53                   	push   ebx
c0017543:	31 db                	xor    ebx,ebx
c0017545:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017549:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001754f:	7e 1f                	jle    c0017570 <Video::clearScreen(unsigned int)+0x30>
c0017551:	31 ff                	xor    edi,edi
c0017553:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017559:	7e 12                	jle    c001756d <Video::clearScreen(unsigned int)+0x2d>
c001755b:	8b 06                	mov    eax,DWORD PTR [esi]
c001755d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017561:	53                   	push   ebx
c0017562:	57                   	push   edi
c0017563:	47                   	inc    edi
c0017564:	56                   	push   esi
c0017565:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	eb e6                	jmp    c0017553 <Video::clearScreen(unsigned int)+0x13>
c001756d:	43                   	inc    ebx
c001756e:	eb d9                	jmp    c0017549 <Video::clearScreen(unsigned int)+0x9>
c0017570:	5b                   	pop    ebx
c0017571:	5e                   	pop    esi
c0017572:	5f                   	pop    edi
c0017573:	c3                   	ret    

c0017574 <Video::putpixel(int, int, unsigned int)>:
c0017574:	c7 44 24 04 60 c3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c360
c001757c:	e9 18 34 00 00       	jmp    c001a999 <Krnl::panic(char const*)>
c0017581:	90                   	nop

c0017582 <Video::Video(char const*)>:
c0017582:	83 ec 0c             	sub    esp,0xc
c0017585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017589:	83 ec 08             	sub    esp,0x8
c001758c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017590:	50                   	push   eax
c0017591:	e8 f8 ce ff ff       	call   c001448e <Device::Device(char const*)>
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c001759e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a2:	89 10                	mov    DWORD PTR [eax],edx
c00175a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175b2:	90                   	nop
c00175b3:	83 c4 0c             	add    esp,0xc
c00175b6:	c3                   	ret    
c00175b7:	90                   	nop

c00175b8 <Video::~Video()>:
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c00175c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c4:	89 10                	mov    DWORD PTR [eax],edx
c00175c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ca:	83 ec 0c             	sub    esp,0xc
c00175cd:	50                   	push   eax
c00175ce:	e8 85 cb ff ff       	call   c0014158 <Device::~Device()>
c00175d3:	83 c4 10             	add    esp,0x10
c00175d6:	90                   	nop
c00175d7:	83 c4 0c             	add    esp,0xc
c00175da:	c3                   	ret    
c00175db:	90                   	nop

c00175dc <Video::~Video()>:
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	83 ec 0c             	sub    esp,0xc
c00175e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e6:	e8 cd ff ff ff       	call   c00175b8 <Video::~Video()>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	83 ec 08             	sub    esp,0x8
c00175f1:	68 64 01 00 00       	push   0x164
c00175f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175fa:	e8 72 b7 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	83 c4 0c             	add    esp,0xc
c0017605:	c3                   	ret    

c0017606 <Video::isMonochrome()>:
c0017606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017610:	c3                   	ret    
c0017611:	90                   	nop

c0017612 <Video::getWidth()>:
c0017612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017616:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001761c:	c3                   	ret    
c001761d:	90                   	nop

c001761e <Video::getHeight()>:
c001761e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017622:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017628:	c3                   	ret    
c0017629:	90                   	nop

c001762a <Video::drawCursor(int, int, unsigned char*, int)>:
c001762a:	55                   	push   ebp
c001762b:	57                   	push   edi
c001762c:	56                   	push   esi
c001762d:	53                   	push   ebx
c001762e:	83 ec 2c             	sub    esp,0x2c
c0017631:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017635:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017639:	83 f8 01             	cmp    eax,0x1
c001763c:	19 c9                	sbb    ecx,ecx
c001763e:	31 db                	xor    ebx,ebx
c0017640:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017644:	89 cd                	mov    ebp,ecx
c0017646:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001764e:	f7 d5                	not    ebp
c0017650:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017656:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001765a:	01 d8                	add    eax,ebx
c001765c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017660:	56                   	push   esi
c0017661:	e8 b8 ff ff ff       	call   c001761e <Video::getHeight()>
c0017666:	59                   	pop    ecx
c0017667:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001766b:	7e 70                	jle    c00176dd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001766d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017671:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017675:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017678:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001767c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017680:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001768b:	89 f8                	mov    eax,edi
c001768d:	83 c0 20             	add    eax,0x20
c0017690:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017694:	56                   	push   esi
c0017695:	e8 78 ff ff ff       	call   c0017612 <Video::getWidth()>
c001769a:	5a                   	pop    edx
c001769b:	39 c7                	cmp    edi,eax
c001769d:	7d 34                	jge    c00176d3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001769f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176a4:	74 05                	je     c00176ab <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00176a8:	55                   	push   ebp
c00176a9:	eb 0d                	jmp    c00176b8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176ab:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176b0:	74 12                	je     c00176c4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176bc:	57                   	push   edi
c00176bd:	56                   	push   esi
c00176be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176c8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176cc:	47                   	inc    edi
c00176cd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176d1:	75 c1                	jne    c0017694 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176d3:	43                   	inc    ebx
c00176d4:	83 fb 20             	cmp    ebx,0x20
c00176d7:	0f 85 79 ff ff ff    	jne    c0017656 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176dd:	83 c4 2c             	add    esp,0x2c
c00176e0:	5b                   	pop    ebx
c00176e1:	5e                   	pop    esi
c00176e2:	5f                   	pop    edi
c00176e3:	5d                   	pop    ebp
c00176e4:	c3                   	ret    
c00176e5:	90                   	nop

c00176e6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176e6:	55                   	push   ebp
c00176e7:	57                   	push   edi
c00176e8:	56                   	push   esi
c00176e9:	53                   	push   ebx
c00176ea:	83 ec 28             	sub    esp,0x28
c00176ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176f1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176f5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176f9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176fd:	c1 e7 08             	shl    edi,0x8
c0017700:	01 c7                	add    edi,eax
c0017702:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017706:	c1 e0 08             	shl    eax,0x8
c0017709:	01 d0                	add    eax,edx
c001770b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001770f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017713:	0f af c7             	imul   eax,edi
c0017716:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001771d:	50                   	push   eax
c001771e:	e8 69 81 ff ff       	call   c000f88c <malloc>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	89 c5                	mov    ebp,eax
c0017728:	85 c0                	test   eax,eax
c001772a:	75 15                	jne    c0017741 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001772c:	83 ec 0c             	sub    esp,0xc
c001772f:	68 81 c3 02 c0       	push   0xc002c381
c0017734:	e8 18 b7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	e9 1c 01 00 00       	jmp    c001785d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017741:	be 12 00 00 00       	mov    esi,0x12
c0017746:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001774a:	74 11                	je     c001775d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001774c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017750:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017754:	c1 fe 03             	sar    esi,0x3
c0017757:	0f af f0             	imul   esi,eax
c001775a:	83 c6 12             	add    esi,0x12
c001775d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017761:	74 04                	je     c0017767 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017763:	85 ff                	test   edi,edi
c0017765:	75 12                	jne    c0017779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017767:	83 ec 0c             	sub    esp,0xc
c001776a:	68 98 c3 02 c0       	push   0xc002c398
c001776f:	e8 dd b6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0017774:	e9 ce 00 00 00       	jmp    c0017847 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017779:	52                   	push   edx
c001777a:	52                   	push   edx
c001777b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001777f:	50                   	push   eax
c0017780:	68 ad c3 02 c0       	push   0xc002c3ad
c0017785:	e8 c7 b6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001778a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001778e:	83 c4 10             	add    esp,0x10
c0017791:	80 fa 02             	cmp    dl,0x2
c0017794:	0f 85 98 00 00 00    	jne    c0017832 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001779a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001779f:	75 10                	jne    c00177b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177a1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177a5:	75 0a                	jne    c00177b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177a7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177aa:	83 e8 18             	sub    eax,0x18
c00177ad:	a8 f7                	test   al,0xf7
c00177af:	74 0a                	je     c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177b1:	83 ec 0c             	sub    esp,0xc
c00177b4:	68 ba c3 02 c0       	push   0xc002c3ba
c00177b9:	eb 7f                	jmp    c001783a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177d7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177db:	75 0c                	jne    c00177e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177dd:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177e2:	c1 e0 18             	shl    eax,0x18
c00177e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177e9:	41                   	inc    ecx
c00177ea:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177ef:	c1 e2 10             	shl    edx,0x10
c00177f2:	89 d0                	mov    eax,edx
c00177f4:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177f9:	c1 e2 08             	shl    edx,0x8
c00177fc:	09 c2                	or     edx,eax
c00177fe:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017802:	09 c2                	or     edx,eax
c0017804:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017808:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001780c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017810:	c1 f8 03             	sar    eax,0x3
c0017813:	01 c6                	add    esi,eax
c0017815:	89 c8                	mov    eax,ecx
c0017817:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001781b:	39 c7                	cmp    edi,eax
c001781d:	7f b0                	jg     c00177cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001781f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017823:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017827:	39 14 24             	cmp    DWORD PTR [esp],edx
c001782a:	7e 22                	jle    c001784e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001782c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017830:	eb 99                	jmp    c00177cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017832:	50                   	push   eax
c0017833:	50                   	push   eax
c0017834:	52                   	push   edx
c0017835:	68 c8 c3 02 c0       	push   0xc002c3c8
c001783a:	e8 12 b6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001783f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017842:	e8 55 80 ff ff       	call   c000f89c <free>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	31 ed                	xor    ebp,ebp
c001784c:	eb 0f                	jmp    c001785d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001784e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017852:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017855:	89 38                	mov    DWORD PTR [eax],edi
c0017857:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001785b:	89 08                	mov    DWORD PTR [eax],ecx
c001785d:	83 c4 1c             	add    esp,0x1c
c0017860:	89 e8                	mov    eax,ebp
c0017862:	5b                   	pop    ebx
c0017863:	5e                   	pop    esi
c0017864:	5f                   	pop    edi
c0017865:	5d                   	pop    ebp
c0017866:	c3                   	ret    
c0017867:	90                   	nop

c0017868 <Video::putTGA(int, int, unsigned char*, int)>:
c0017868:	55                   	push   ebp
c0017869:	57                   	push   edi
c001786a:	56                   	push   esi
c001786b:	53                   	push   ebx
c001786c:	83 ec 28             	sub    esp,0x28
c001786f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017873:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017877:	50                   	push   eax
c0017878:	8d 44 24 18          	lea    eax,[esp+0x18]
c001787c:	50                   	push   eax
c001787d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017881:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017885:	56                   	push   esi
c0017886:	e8 5b fe ff ff       	call   c00176e6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001788b:	83 c4 20             	add    esp,0x20
c001788e:	85 c0                	test   eax,eax
c0017890:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017894:	74 35                	je     c00178cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017896:	89 c7                	mov    edi,eax
c0017898:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001789c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178a0:	39 d8                	cmp    eax,ebx
c00178a2:	7e 27                	jle    c00178cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ac:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178b0:	39 e8                	cmp    eax,ebp
c00178b2:	7e 14                	jle    c00178c8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00178b6:	83 c7 04             	add    edi,0x4
c00178b9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178bc:	53                   	push   ebx
c00178bd:	55                   	push   ebp
c00178be:	45                   	inc    ebp
c00178bf:	56                   	push   esi
c00178c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	eb e0                	jmp    c00178a8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178c8:	43                   	inc    ebx
c00178c9:	eb cd                	jmp    c0017898 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178cb:	83 c4 1c             	add    esp,0x1c
c00178ce:	5b                   	pop    ebx
c00178cf:	5e                   	pop    esi
c00178d0:	5f                   	pop    edi
c00178d1:	5d                   	pop    ebp
c00178d2:	c3                   	ret    
c00178d3:	90                   	nop

c00178d4 <ACPI::close(int, int, void*)>:
c00178d4:	83 ec 1c             	sub    esp,0x1c
c00178d7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178df:	74 0a                	je     c00178eb <ACPI::close(int, int, void*)+0x17>
c00178e1:	b8 00 00 00 00       	mov    eax,0x0
c00178e6:	e9 9a 00 00 00       	jmp    c0017985 <ACPI::close(int, int, void*)+0xb1>
c00178eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178f0:	75 37                	jne    c0017929 <ACPI::close(int, int, void*)+0x55>
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	68 24 c4 02 c0       	push   0xc002c424
c00178fa:	e8 52 b5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	a1 28 1c 03 c0       	mov    eax,ds:0xc0031c28
c0017907:	85 c0                	test   eax,eax
c0017909:	74 07                	je     c0017912 <ACPI::close(int, int, void*)+0x3e>
c001790b:	a1 28 1c 03 c0       	mov    eax,ds:0xc0031c28
c0017910:	ff d0                	call   eax
c0017912:	83 ec 0c             	sub    esp,0xc
c0017915:	68 98 c5 02 c0       	push   0xc002c598
c001791a:	e8 7a 30 00 00       	call   c001a999 <Krnl::panic(char const*)>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017927:	eb 5c                	jmp    c0017985 <ACPI::close(int, int, void*)+0xb1>
c0017929:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001792e:	75 50                	jne    c0017980 <ACPI::close(int, int, void*)+0xac>
c0017930:	a1 24 1c 03 c0       	mov    eax,ds:0xc0031c24
c0017935:	85 c0                	test   eax,eax
c0017937:	74 07                	je     c0017940 <ACPI::close(int, int, void*)+0x6c>
c0017939:	a1 24 1c 03 c0       	mov    eax,ds:0xc0031c24
c001793e:	ff d0                	call   eax
c0017940:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017945:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001794a:	83 e0 02             	and    eax,0x2
c001794d:	74 1c                	je     c001796b <ACPI::close(int, int, void*)+0x97>
c001794f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001795a:	89 c2                	mov    edx,eax
c001795c:	ec                   	in     al,dx
c001795d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017961:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017965:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017969:	eb da                	jmp    c0017945 <ACPI::close(int, int, void*)+0x71>
c001796b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017972:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017977:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001797b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001797f:	ee                   	out    dx,al
c0017980:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017985:	83 c4 1c             	add    esp,0x1c
c0017988:	c3                   	ret    

c0017989 <findRSDP()>:
c0017989:	83 ec 1c             	sub    esp,0x1c
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	68 31 c4 02 c0       	push   0xc002c431
c0017994:	e8 b8 b4 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00179a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a7:	83 e0 04             	and    eax,0x4
c00179aa:	84 c0                	test   al,al
c00179ac:	75 07                	jne    c00179b5 <findRSDP()+0x2c>
c00179ae:	b8 00 00 00 00       	mov    eax,0x0
c00179b3:	eb 6a                	jmp    c0017a1f <findRSDP()+0x96>
c00179b5:	a1 b4 f5 02 c0       	mov    eax,ds:0xc002f5b4
c00179ba:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179bf:	7f 1b                	jg     c00179dc <findRSDP()+0x53>
c00179c1:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00179c6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179cc:	83 e2 fb             	and    edx,0xfffffffb
c00179cf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179d5:	b8 00 00 00 00       	mov    eax,0x0
c00179da:	eb 43                	jmp    c0017a1f <findRSDP()+0x96>
c00179dc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179e4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179ec:	77 2c                	ja     c0017a1a <findRSDP()+0x91>
c00179ee:	83 ec 04             	sub    esp,0x4
c00179f1:	6a 08                	push   0x8
c00179f3:	68 3f c4 02 c0       	push   0xc002c43f
c00179f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179fc:	e8 4b 8c fe ff       	call   c000064c <memcmp>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	85 c0                	test   eax,eax
c0017a06:	0f 94 c0             	sete   al
c0017a09:	84 c0                	test   al,al
c0017a0b:	74 06                	je     c0017a13 <findRSDP()+0x8a>
c0017a0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a11:	eb 0c                	jmp    c0017a1f <findRSDP()+0x96>
c0017a13:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a18:	eb ca                	jmp    c00179e4 <findRSDP()+0x5b>
c0017a1a:	b8 00 00 00 00       	mov    eax,0x0
c0017a1f:	83 c4 1c             	add    esp,0x1c
c0017a22:	c3                   	ret    

c0017a23 <loadACPITables(unsigned char*)>:
c0017a23:	57                   	push   edi
c0017a24:	56                   	push   esi
c0017a25:	53                   	push   ebx
c0017a26:	83 ec 60             	sub    esp,0x60
c0017a29:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017a2e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a34:	83 e0 04             	and    eax,0x4
c0017a37:	84 c0                	test   al,al
c0017a39:	0f 84 33 02 00 00    	je     c0017c72 <loadACPITables(unsigned char*)+0x24f>
c0017a3f:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c0017a44:	84 c0                	test   al,al
c0017a46:	74 75                	je     c0017abd <loadACPITables(unsigned char*)+0x9a>
c0017a48:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a4c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a50:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a57:	83 e8 24             	sub    eax,0x24
c0017a5a:	c1 e8 03             	shr    eax,0x3
c0017a5d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a61:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a69:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a6d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a71:	0f 8d b2 00 00 00    	jge    c0017b29 <loadACPITables(unsigned char*)+0x106>
c0017a77:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a7b:	83 c0 24             	add    eax,0x24
c0017a7e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a82:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a8a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a8e:	c1 e0 03             	shl    eax,0x3
c0017a91:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a95:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a99:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a9e:	89 c1                	mov    ecx,eax
c0017aa0:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c0017aa5:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa8:	89 15 2c 1c 03 c0    	mov    DWORD PTR ds:0xc0031c2c,edx
c0017aae:	89 ca                	mov    edx,ecx
c0017ab0:	89 14 c5 44 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3bc],edx
c0017ab7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017abb:	eb ac                	jmp    c0017a69 <loadACPITables(unsigned char*)+0x46>
c0017abd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017ac1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ac5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acc:	83 e8 24             	sub    eax,0x24
c0017acf:	c1 e8 02             	shr    eax,0x2
c0017ad2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ad6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017ade:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017ae2:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017ae6:	7d 41                	jge    c0017b29 <loadACPITables(unsigned char*)+0x106>
c0017ae8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aec:	83 c0 24             	add    eax,0x24
c0017aef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017af3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017af7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017afb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017aff:	c1 e0 02             	shl    eax,0x2
c0017b02:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b0c:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c0017b11:	8d 50 01             	lea    edx,[eax+0x1]
c0017b14:	89 15 2c 1c 03 c0    	mov    DWORD PTR ds:0xc0031c2c,edx
c0017b1a:	89 ca                	mov    edx,ecx
c0017b1c:	89 14 c5 44 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3bc],edx
c0017b23:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b27:	eb b5                	jmp    c0017ade <loadACPITables(unsigned char*)+0xbb>
c0017b29:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b31:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c0017b36:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b3a:	0f 8d 33 01 00 00    	jge    c0017c73 <loadACPITables(unsigned char*)+0x250>
c0017b40:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b44:	8b 04 c5 44 1c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce3bc]
c0017b4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b5b:	25 ff 0f 00 00       	and    eax,0xfff
c0017b60:	89 c6                	mov    esi,eax
c0017b62:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c0017b68:	83 ec 0c             	sub    esp,0xc
c0017b6b:	6a 01                	push   0x1
c0017b6d:	e8 bf 9e ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017b72:	83 c4 10             	add    esp,0x10
c0017b75:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b79:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	6a 01                	push   0x1
c0017b84:	6a 01                	push   0x1
c0017b86:	50                   	push   eax
c0017b87:	52                   	push   edx
c0017b88:	53                   	push   ebx
c0017b89:	e8 d0 a9 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b8e:	83 c4 20             	add    esp,0x20
c0017b91:	09 f0                	or     eax,esi
c0017b93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b97:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b9b:	c1 e0 03             	shl    eax,0x3
c0017b9e:	05 40 1c 03 c0       	add    eax,0xc0031c40
c0017ba3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017baf:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bc7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bcb:	89 c6                	mov    esi,eax
c0017bcd:	89 d7                	mov    edi,edx
c0017bcf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bd1:	89 c8                	mov    eax,ecx
c0017bd3:	89 fa                	mov    edx,edi
c0017bd5:	89 f3                	mov    ebx,esi
c0017bd7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017bdb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017bdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017be3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf2:	05 00 10 00 00       	add    eax,0x1000
c0017bf7:	c1 e8 0c             	shr    eax,0xc
c0017bfa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c0a:	25 ff 0f 00 00       	and    eax,0xfff
c0017c0f:	89 c6                	mov    esi,eax
c0017c11:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c0017c17:	83 ec 0c             	sub    esp,0xc
c0017c1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c1e:	e8 0e 9e ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017c23:	83 c4 10             	add    esp,0x10
c0017c26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c2a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	6a 01                	push   0x1
c0017c35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c39:	50                   	push   eax
c0017c3a:	52                   	push   edx
c0017c3b:	53                   	push   ebx
c0017c3c:	e8 1d a9 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c41:	83 c4 20             	add    esp,0x20
c0017c44:	09 f0                	or     eax,esi
c0017c46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4e:	83 ec 0c             	sub    esp,0xc
c0017c51:	50                   	push   eax
c0017c52:	e8 9a a2 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c5e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c62:	89 14 c5 44 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3bc],edx
c0017c69:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c6d:	e9 bf fe ff ff       	jmp    c0017b31 <loadACPITables(unsigned char*)+0x10e>
c0017c72:	90                   	nop
c0017c73:	83 c4 60             	add    esp,0x60
c0017c76:	5b                   	pop    ebx
c0017c77:	5e                   	pop    esi
c0017c78:	5f                   	pop    edi
c0017c79:	c3                   	ret    

c0017c7a <findRSDT(unsigned char*)>:
c0017c7a:	57                   	push   edi
c0017c7b:	56                   	push   esi
c0017c7c:	53                   	push   ebx
c0017c7d:	83 ec 50             	sub    esp,0x50
c0017c80:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017c85:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c8b:	83 e0 04             	and    eax,0x4
c0017c8e:	84 c0                	test   al,al
c0017c90:	75 0a                	jne    c0017c9c <findRSDT(unsigned char*)+0x22>
c0017c92:	b8 00 00 00 00       	mov    eax,0x0
c0017c97:	e9 21 01 00 00       	jmp    c0017dbd <findRSDT(unsigned char*)+0x143>
c0017c9c:	89 e0                	mov    eax,esp
c0017c9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ca2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017ca6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017caa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cbe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017cc2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017cc6:	89 c6                	mov    esi,eax
c0017cc8:	89 d7                	mov    edi,edx
c0017cca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ccc:	89 c8                	mov    eax,ecx
c0017cce:	89 fa                	mov    edx,edi
c0017cd0:	89 f3                	mov    ebx,esi
c0017cd2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017cd6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017cda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cde:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017ce2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017ce6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cf6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cfe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d02:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d06:	25 ff 0f 00 00       	and    eax,0xfff
c0017d0b:	89 c6                	mov    esi,eax
c0017d0d:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c0017d13:	83 ec 0c             	sub    esp,0xc
c0017d16:	6a 02                	push   0x2
c0017d18:	e8 14 9d ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017d1d:	83 c4 10             	add    esp,0x10
c0017d20:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d2a:	83 ec 0c             	sub    esp,0xc
c0017d2d:	6a 01                	push   0x1
c0017d2f:	6a 02                	push   0x2
c0017d31:	50                   	push   eax
c0017d32:	52                   	push   edx
c0017d33:	53                   	push   ebx
c0017d34:	e8 25 a8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d39:	83 c4 20             	add    esp,0x20
c0017d3c:	09 f0                	or     eax,esi
c0017d3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d46:	25 ff 0f 00 00       	and    eax,0xfff
c0017d4b:	89 c6                	mov    esi,eax
c0017d4d:	8b 1d f0 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f0
c0017d53:	83 ec 0c             	sub    esp,0xc
c0017d56:	6a 02                	push   0x2
c0017d58:	e8 d4 9c ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017d5d:	83 c4 10             	add    esp,0x10
c0017d60:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d64:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d6a:	83 ec 0c             	sub    esp,0xc
c0017d6d:	6a 01                	push   0x1
c0017d6f:	6a 02                	push   0x2
c0017d71:	50                   	push   eax
c0017d72:	52                   	push   edx
c0017d73:	53                   	push   ebx
c0017d74:	e8 e5 a7 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d79:	83 c4 20             	add    esp,0x20
c0017d7c:	09 f0                	or     eax,esi
c0017d7e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d82:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d87:	75 11                	jne    c0017d9a <findRSDT(unsigned char*)+0x120>
c0017d89:	c6 05 40 1e 03 c0 00 	mov    BYTE PTR ds:0xc0031e40,0x0
c0017d90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d94:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d98:	eb 1f                	jmp    c0017db9 <findRSDT(unsigned char*)+0x13f>
c0017d9a:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d9f:	75 11                	jne    c0017db2 <findRSDT(unsigned char*)+0x138>
c0017da1:	c6 05 40 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e40,0x1
c0017da8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017dac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017db0:	eb 07                	jmp    c0017db9 <findRSDT(unsigned char*)+0x13f>
c0017db2:	b8 00 00 00 00       	mov    eax,0x0
c0017db7:	eb 04                	jmp    c0017dbd <findRSDT(unsigned char*)+0x143>
c0017db9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017dbd:	83 c4 50             	add    esp,0x50
c0017dc0:	5b                   	pop    ebx
c0017dc1:	5e                   	pop    esi
c0017dc2:	5f                   	pop    edi
c0017dc3:	c3                   	ret    

c0017dc4 <findDataTable(unsigned char*, char*)>:
c0017dc4:	83 ec 1c             	sub    esp,0x1c
c0017dc7:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017dcc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dd2:	83 e0 04             	and    eax,0x4
c0017dd5:	84 c0                	test   al,al
c0017dd7:	75 07                	jne    c0017de0 <findDataTable(unsigned char*, char*)+0x1c>
c0017dd9:	b8 00 00 00 00       	mov    eax,0x0
c0017dde:	eb 7c                	jmp    c0017e5c <findDataTable(unsigned char*, char*)+0x98>
c0017de0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017de8:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c0017ded:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017df1:	7d 3a                	jge    c0017e2d <findDataTable(unsigned char*, char*)+0x69>
c0017df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017df7:	c1 e0 03             	shl    eax,0x3
c0017dfa:	05 40 1c 03 c0       	add    eax,0xc0031c40
c0017dff:	83 ec 04             	sub    esp,0x4
c0017e02:	6a 04                	push   0x4
c0017e04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e08:	50                   	push   eax
c0017e09:	e8 3e 88 fe ff       	call   c000064c <memcmp>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	85 c0                	test   eax,eax
c0017e13:	0f 94 c0             	sete   al
c0017e16:	84 c0                	test   al,al
c0017e18:	74 0d                	je     c0017e27 <findDataTable(unsigned char*, char*)+0x63>
c0017e1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e1e:	8b 04 c5 44 1c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce3bc]
c0017e25:	eb 35                	jmp    c0017e5c <findDataTable(unsigned char*, char*)+0x98>
c0017e27:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e2b:	eb bb                	jmp    c0017de8 <findDataTable(unsigned char*, char*)+0x24>
c0017e2d:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c0017e32:	84 c0                	test   al,al
c0017e34:	74 07                	je     c0017e3d <findDataTable(unsigned char*, char*)+0x79>
c0017e36:	b8 58 00 00 00       	mov    eax,0x58
c0017e3b:	eb 05                	jmp    c0017e42 <findDataTable(unsigned char*, char*)+0x7e>
c0017e3d:	b8 52 00 00 00       	mov    eax,0x52
c0017e42:	83 ec 04             	sub    esp,0x4
c0017e45:	50                   	push   eax
c0017e46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e4a:	68 bc c5 02 c0       	push   0xc002c5bc
c0017e4f:	e8 fd af ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	b8 00 00 00 00       	mov    eax,0x0
c0017e5c:	83 c4 1c             	add    esp,0x1c
c0017e5f:	c3                   	ret    

c0017e60 <scanMADT()>:
c0017e60:	53                   	push   ebx
c0017e61:	83 ec 38             	sub    esp,0x38
c0017e64:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017e69:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e6f:	83 e0 04             	and    eax,0x4
c0017e72:	84 c0                	test   al,al
c0017e74:	0f 84 63 04 00 00    	je     c00182dd <scanMADT()+0x47d>
c0017e7a:	e8 0a fb ff ff       	call   c0017989 <findRSDP()>
c0017e7f:	a3 4c 1e 03 c0       	mov    ds:0xc0031e4c,eax
c0017e84:	a1 4c 1e 03 c0       	mov    eax,ds:0xc0031e4c
c0017e89:	85 c0                	test   eax,eax
c0017e8b:	75 19                	jne    c0017ea6 <scanMADT()+0x46>
c0017e8d:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017e92:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e98:	83 e2 fb             	and    edx,0xfffffffb
c0017e9b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ea1:	e9 3b 04 00 00       	jmp    c00182e1 <scanMADT()+0x481>
c0017ea6:	a1 4c 1e 03 c0       	mov    eax,ds:0xc0031e4c
c0017eab:	83 ec 0c             	sub    esp,0xc
c0017eae:	50                   	push   eax
c0017eaf:	e8 c6 fd ff ff       	call   c0017c7a <findRSDT(unsigned char*)>
c0017eb4:	83 c4 10             	add    esp,0x10
c0017eb7:	a3 48 1e 03 c0       	mov    ds:0xc0031e48,eax
c0017ebc:	a1 48 1e 03 c0       	mov    eax,ds:0xc0031e48
c0017ec1:	85 c0                	test   eax,eax
c0017ec3:	75 19                	jne    c0017ede <scanMADT()+0x7e>
c0017ec5:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017eca:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ed0:	83 e2 fb             	and    edx,0xfffffffb
c0017ed3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ed9:	e9 03 04 00 00       	jmp    c00182e1 <scanMADT()+0x481>
c0017ede:	a1 48 1e 03 c0       	mov    eax,ds:0xc0031e48
c0017ee3:	83 ec 0c             	sub    esp,0xc
c0017ee6:	50                   	push   eax
c0017ee7:	e8 37 fb ff ff       	call   c0017a23 <loadACPITables(unsigned char*)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	a1 48 1e 03 c0       	mov    eax,ds:0xc0031e48
c0017ef4:	83 ec 08             	sub    esp,0x8
c0017ef7:	68 48 c4 02 c0       	push   0xc002c448
c0017efc:	50                   	push   eax
c0017efd:	e8 c2 fe ff ff       	call   c0017dc4 <findDataTable(unsigned char*, char*)>
c0017f02:	83 c4 10             	add    esp,0x10
c0017f05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f09:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f0e:	75 19                	jne    c0017f29 <scanMADT()+0xc9>
c0017f10:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0017f15:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f1b:	83 e2 fe             	and    edx,0xfffffffe
c0017f1e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f24:	e9 b8 03 00 00       	jmp    c00182e1 <scanMADT()+0x481>
c0017f29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f38:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f3c:	0f 87 9f 03 00 00    	ja     c00182e1 <scanMADT()+0x481>
c0017f42:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f4a:	0f 87 91 03 00 00    	ja     c00182e1 <scanMADT()+0x481>
c0017f50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f67:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f6b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f73:	8d 50 01             	lea    edx,[eax+0x1]
c0017f76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f7e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f82:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f86:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f8b:	0f 86 4f 03 00 00    	jbe    c00182e0 <scanMADT()+0x480>
c0017f91:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f96:	75 57                	jne    c0017fef <scanMADT()+0x18f>
c0017f98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa3:	8a 15 40 20 03 c0    	mov    dl,BYTE PTR ds:0xc0032040
c0017fa9:	0f b6 d2             	movzx  edx,dl
c0017fac:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fb0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fb4:	88 82 80 20 03 c0    	mov    BYTE PTR [edx-0x3ffcdf80],al
c0017fba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbe:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc5:	8a 15 40 20 03 c0    	mov    dl,BYTE PTR ds:0xc0032040
c0017fcb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fce:	88 0d 40 20 03 c0    	mov    BYTE PTR ds:0xc0032040,cl
c0017fd4:	0f b6 d2             	movzx  edx,dl
c0017fd7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fdb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fdf:	88 82 60 20 03 c0    	mov    BYTE PTR [edx-0x3ffcdfa0],al
c0017fe5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fea:	e9 da 02 00 00       	jmp    c00182c9 <scanMADT()+0x469>
c0017fef:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ff4:	0f 85 14 01 00 00    	jne    c001810e <scanMADT()+0x2ae>
c0017ffa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0018001:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018005:	8a 15 00 1f 03 c0    	mov    dl,BYTE PTR ds:0xc0031f00
c001800b:	0f b6 d2             	movzx  edx,dl
c001800e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018012:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018016:	88 82 20 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce0e0],al
c001801c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018020:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018024:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018028:	01 d0                	add    eax,edx
c001802a:	83 c0 2c             	add    eax,0x2c
c001802d:	8a 00                	mov    al,BYTE PTR [eax]
c001802f:	0f b6 d0             	movzx  edx,al
c0018032:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018036:	8d 48 01             	lea    ecx,[eax+0x1]
c0018039:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018041:	0f b6 c0             	movzx  eax,al
c0018044:	c1 e0 08             	shl    eax,0x8
c0018047:	89 d1                	mov    ecx,edx
c0018049:	09 c1                	or     ecx,eax
c001804b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804f:	8d 50 02             	lea    edx,[eax+0x2]
c0018052:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018056:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805a:	0f b6 c0             	movzx  eax,al
c001805d:	c1 e0 10             	shl    eax,0x10
c0018060:	09 c1                	or     ecx,eax
c0018062:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018066:	8d 50 03             	lea    edx,[eax+0x3]
c0018069:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018071:	0f b6 c0             	movzx  eax,al
c0018074:	c1 e0 18             	shl    eax,0x18
c0018077:	09 c1                	or     ecx,eax
c0018079:	89 ca                	mov    edx,ecx
c001807b:	a0 00 1f 03 c0       	mov    al,ds:0xc0031f00
c0018080:	0f b6 c0             	movzx  eax,al
c0018083:	89 14 85 40 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce0c0],edx
c001808a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001808f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018093:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018097:	01 d0                	add    eax,edx
c0018099:	83 c0 2c             	add    eax,0x2c
c001809c:	8a 00                	mov    al,BYTE PTR [eax]
c001809e:	0f b6 d0             	movzx  edx,al
c00180a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00180a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ac:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180b0:	0f b6 c0             	movzx  eax,al
c00180b3:	c1 e0 08             	shl    eax,0x8
c00180b6:	89 d1                	mov    ecx,edx
c00180b8:	09 c1                	or     ecx,eax
c00180ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180be:	8d 50 02             	lea    edx,[eax+0x2]
c00180c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c9:	0f b6 c0             	movzx  eax,al
c00180cc:	c1 e0 10             	shl    eax,0x10
c00180cf:	09 c1                	or     ecx,eax
c00180d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d5:	8d 50 03             	lea    edx,[eax+0x3]
c00180d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180dc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180e0:	0f b6 c0             	movzx  eax,al
c00180e3:	c1 e0 18             	shl    eax,0x18
c00180e6:	09 c1                	or     ecx,eax
c00180e8:	89 ca                	mov    edx,ecx
c00180ea:	a0 00 1f 03 c0       	mov    al,ds:0xc0031f00
c00180ef:	0f b6 c0             	movzx  eax,al
c00180f2:	89 14 85 c0 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce040],edx
c00180f9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180fe:	a0 00 1f 03 c0       	mov    al,ds:0xc0031f00
c0018103:	40                   	inc    eax
c0018104:	a2 00 1f 03 c0       	mov    ds:0xc0031f00,al
c0018109:	e9 bb 01 00 00       	jmp    c00182c9 <scanMADT()+0x469>
c001810e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018113:	0f 85 e9 00 00 00    	jne    c0018202 <scanMADT()+0x3a2>
c0018119:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811d:	8d 50 01             	lea    edx,[eax+0x1]
c0018120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018124:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018128:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001812c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018130:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018134:	8d 50 01             	lea    edx,[eax+0x1]
c0018137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001813b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018143:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018147:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001814b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814f:	01 d0                	add    eax,edx
c0018151:	83 c0 2c             	add    eax,0x2c
c0018154:	8a 00                	mov    al,BYTE PTR [eax]
c0018156:	0f b6 d0             	movzx  edx,al
c0018159:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001815d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018160:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018164:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018168:	0f b6 c0             	movzx  eax,al
c001816b:	c1 e0 08             	shl    eax,0x8
c001816e:	89 d1                	mov    ecx,edx
c0018170:	09 c1                	or     ecx,eax
c0018172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018176:	8d 50 02             	lea    edx,[eax+0x2]
c0018179:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001817d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018181:	0f b6 c0             	movzx  eax,al
c0018184:	c1 e0 10             	shl    eax,0x10
c0018187:	09 c1                	or     ecx,eax
c0018189:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818d:	8d 50 03             	lea    edx,[eax+0x3]
c0018190:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018194:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018198:	0f b6 c0             	movzx  eax,al
c001819b:	c1 e0 18             	shl    eax,0x18
c001819e:	09 c8                	or     eax,ecx
c00181a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181a4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b1:	01 d0                	add    eax,edx
c00181b3:	83 c0 2c             	add    eax,0x2c
c00181b6:	8a 00                	mov    al,BYTE PTR [eax]
c00181b8:	0f b6 c0             	movzx  eax,al
c00181bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181c6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181ca:	0f b6 d2             	movzx  edx,dl
c00181cd:	c1 e2 08             	shl    edx,0x8
c00181d0:	09 d0                	or     eax,edx
c00181d2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181d7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181dc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181e5:	88 90 c0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1840],dl
c00181eb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181f0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181f5:	66 89 84 12 e0 1e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce120],ax
c00181fd:	e9 c7 00 00 00       	jmp    c00182c9 <scanMADT()+0x469>
c0018202:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018207:	0f 85 b0 00 00 00    	jne    c00182bd <scanMADT()+0x45d>
c001820d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018211:	8d 50 01             	lea    edx,[eax+0x1]
c0018214:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018218:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001821c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018220:	0f b6 c0             	movzx  eax,al
c0018223:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018227:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001822b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001822f:	01 d0                	add    eax,edx
c0018231:	83 c0 2c             	add    eax,0x2c
c0018234:	8a 00                	mov    al,BYTE PTR [eax]
c0018236:	0f b6 d0             	movzx  edx,al
c0018239:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001823d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018240:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018244:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018248:	0f b6 c0             	movzx  eax,al
c001824b:	c1 e0 08             	shl    eax,0x8
c001824e:	09 d0                	or     eax,edx
c0018250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018254:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018259:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001825d:	8d 50 01             	lea    edx,[eax+0x1]
c0018260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018264:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018268:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001826c:	0f b6 c0             	movzx  eax,al
c001826f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018277:	c1 e0 08             	shl    eax,0x8
c001827a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001827e:	89 c1                	mov    ecx,eax
c0018280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018284:	c1 e0 18             	shl    eax,0x18
c0018287:	89 c3                	mov    ebx,eax
c0018289:	a1 50 1e 03 c0       	mov    eax,ds:0xc0031e50
c001828e:	8d 50 01             	lea    edx,[eax+0x1]
c0018291:	89 15 50 1e 03 c0    	mov    DWORD PTR ds:0xc0031e50,edx
c0018297:	09 d9                	or     ecx,ebx
c0018299:	89 ca                	mov    edx,ecx
c001829b:	89 14 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],edx
c00182a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182ae:	68 ec c5 02 c0       	push   0xc002c5ec
c00182b3:	e8 99 ab ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00182b8:	83 c4 10             	add    esp,0x10
c00182bb:	eb 0c                	jmp    c00182c9 <scanMADT()+0x469>
c00182bd:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182c2:	75 05                	jne    c00182c9 <scanMADT()+0x469>
c00182c4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182c9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182d2:	01 d0                	add    eax,edx
c00182d4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182d8:	e9 54 fc ff ff       	jmp    c0017f31 <scanMADT()+0xd1>
c00182dd:	90                   	nop
c00182de:	eb 01                	jmp    c00182e1 <scanMADT()+0x481>
c00182e0:	90                   	nop
c00182e1:	83 c4 38             	add    esp,0x38
c00182e4:	5b                   	pop    ebx
c00182e5:	c3                   	ret    

c00182e6 <ACPI::ACPI()>:
c00182e6:	83 ec 0c             	sub    esp,0xc
c00182e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ed:	83 ec 08             	sub    esp,0x8
c00182f0:	68 4d c4 02 c0       	push   0xc002c44d
c00182f5:	50                   	push   eax
c00182f6:	e8 93 c1 ff ff       	call   c001448e <Device::Device(char const*)>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	ba 88 c6 02 c0       	mov    edx,0xc002c688
c0018303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018307:	89 10                	mov    DWORD PTR [eax],edx
c0018309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018318:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018326:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018334:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001833b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001833f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018346:	e8 15 fb ff ff       	call   c0017e60 <scanMADT()>
c001834b:	90                   	nop
c001834c:	83 c4 0c             	add    esp,0xc
c001834f:	c3                   	ret    

c0018350 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018350:	83 ec 2c             	sub    esp,0x2c
c0018353:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001835b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001835f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018363:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018368:	88 d0                	mov    al,dl
c001836a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001836e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018373:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001837b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001837f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018385:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018389:	0f 8d 97 00 00 00    	jge    c0018426 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001838f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018393:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018397:	83 c2 2a             	add    edx,0x2a
c001839a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001839e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183a3:	75 78                	jne    c001841d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183ad:	83 c2 2a             	add    edx,0x2a
c00183b0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183b4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183b8:	75 63                	jne    c001841d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183bf:	74 3a                	je     c00183fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183c9:	83 c2 2a             	add    edx,0x2a
c00183cc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183d7:	39 c2                	cmp    edx,eax
c00183d9:	74 10                	je     c00183eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	68 28 c6 02 c0       	push   0xc002c628
c00183e3:	e8 b1 25 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	83 ec 0c             	sub    esp,0xc
c00183ee:	68 52 c4 02 c0       	push   0xc002c452
c00183f3:	e8 a1 25 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00183f8:	83 c4 10             	add    esp,0x10
c00183fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018403:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018407:	83 c2 2a             	add    edx,0x2a
c001840a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001840e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018410:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018413:	89 01                	mov    DWORD PTR [ecx],eax
c0018415:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018418:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001841d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018421:	e9 55 ff ff ff       	jmp    c001837b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018426:	90                   	nop
c0018427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001842b:	83 c4 2c             	add    esp,0x2c
c001842e:	c2 04 00             	ret    0x4
c0018431:	90                   	nop

c0018432 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018432:	83 ec 1c             	sub    esp,0x1c
c0018435:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018439:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001843d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018441:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018446:	88 c8                	mov    al,cl
c0018448:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001844c:	88 d0                	mov    al,dl
c001844e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018456:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018460:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018463:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018467:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001846b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018475:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018479:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001847c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018480:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018489:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001848f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018493:	8d 48 01             	lea    ecx,[eax+0x1]
c0018496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849a:	83 c2 2a             	add    edx,0x2a
c001849d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184af:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184b6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184be:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184c4:	8d 50 01             	lea    edx,[eax+0x1]
c00184c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184cb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184db:	3d 00 02 00 00       	cmp    eax,0x200
c00184e0:	75 10                	jne    c00184f2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184e2:	83 ec 0c             	sub    esp,0xc
c00184e5:	68 61 c4 02 c0       	push   0xc002c461
c00184ea:	e8 aa 24 00 00       	call   c001a999 <Krnl::panic(char const*)>
c00184ef:	83 c4 10             	add    esp,0x10
c00184f2:	90                   	nop
c00184f3:	83 c4 1c             	add    esp,0x1c
c00184f6:	c3                   	ret    
c00184f7:	90                   	nop

c00184f8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184f8:	b8 00 00 00 00       	mov    eax,0x0
c00184fd:	c3                   	ret    

c00184fe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184fe:	83 ec 1c             	sub    esp,0x1c
c0018501:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018505:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018508:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001850c:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0018511:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018516:	83 ec 08             	sub    esp,0x8
c0018519:	52                   	push   edx
c001851a:	50                   	push   eax
c001851b:	e8 82 69 ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c0018520:	83 c4 10             	add    esp,0x10
c0018523:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018527:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001852c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018531:	83 ec 04             	sub    esp,0x4
c0018534:	6a 01                	push   0x1
c0018536:	52                   	push   edx
c0018537:	50                   	push   eax
c0018538:	e8 7b 6a ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001853d:	83 c4 10             	add    esp,0x10
c0018540:	90                   	nop
c0018541:	83 c4 1c             	add    esp,0x1c
c0018544:	c3                   	ret    
c0018545:	90                   	nop

c0018546 <ACPI::sleep()>:
c0018546:	83 ec 0c             	sub    esp,0xc
c0018549:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c001854e:	85 c0                	test   eax,eax
c0018550:	74 07                	je     c0018559 <ACPI::sleep()+0x13>
c0018552:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0018557:	ff d0                	call   eax
c0018559:	90                   	nop
c001855a:	83 c4 0c             	add    esp,0xc
c001855d:	c3                   	ret    

c001855e <ACPI::open(int, int, void*)>:
c001855e:	57                   	push   edi
c001855f:	56                   	push   esi
c0018560:	53                   	push   ebx
c0018561:	81 ec 70 01 00 00    	sub    esp,0x170
c0018567:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001856e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018575:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001857c:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018583:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0018588:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001858e:	83 e0 04             	and    eax,0x4
c0018591:	84 c0                	test   al,al
c0018593:	74 53                	je     c00185e8 <ACPI::open(int, int, void*)+0x8a>
c0018595:	a1 48 1e 03 c0       	mov    eax,ds:0xc0031e48
c001859a:	83 ec 08             	sub    esp,0x8
c001859d:	68 7e c4 02 c0       	push   0xc002c47e
c00185a2:	50                   	push   eax
c00185a3:	e8 1c f8 ff ff       	call   c0017dc4 <findDataTable(unsigned char*, char*)>
c00185a8:	83 c4 10             	add    esp,0x10
c00185ab:	89 84 24 6c 01 00 00 	mov    DWORD PTR [esp+0x16c],eax
c00185b2:	83 bc 24 6c 01 00 00 00 	cmp    DWORD PTR [esp+0x16c],0x0
c00185ba:	74 2c                	je     c00185e8 <ACPI::open(int, int, void*)+0x8a>
c00185bc:	83 ec 0c             	sub    esp,0xc
c00185bf:	68 83 c4 02 c0       	push   0xc002c483
c00185c4:	e8 88 a8 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00185c9:	83 c4 10             	add    esp,0x10
c00185cc:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185d3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185da:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185e1:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185e8:	c7 84 24 68 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x168],0xc5f
c00185f3:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00185fa:	8a 00                	mov    al,BYTE PTR [eax]
c00185fc:	3c 01                	cmp    al,0x1
c00185fe:	75 2e                	jne    c001862e <ACPI::open(int, int, void*)+0xd0>
c0018600:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018607:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001860e:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018615:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001861c:	83 ec 0c             	sub    esp,0xc
c001861f:	68 94 c4 02 c0       	push   0xc002c494
c0018624:	e8 28 a8 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0018629:	83 c4 10             	add    esp,0x10
c001862c:	eb 2b                	jmp    c0018659 <ACPI::open(int, int, void*)+0xfb>
c001862e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0018635:	8a 00                	mov    al,BYTE PTR [eax]
c0018637:	3c 02                	cmp    al,0x2
c0018639:	75 1e                	jne    c0018659 <ACPI::open(int, int, void*)+0xfb>
c001863b:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018642:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018649:	83 ec 0c             	sub    esp,0xc
c001864c:	68 9c c4 02 c0       	push   0xc002c49c
c0018651:	e8 fb a7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0018656:	83 c4 10             	add    esp,0x10
c0018659:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018660:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018666:	83 f0 01             	xor    eax,0x1
c0018669:	84 c0                	test   al,al
c001866b:	74 7c                	je     c00186e9 <ACPI::open(int, int, void*)+0x18b>
c001866d:	83 ec 0c             	sub    esp,0xc
c0018670:	68 a4 c4 02 c0       	push   0xc002c4a4
c0018675:	e8 d7 a7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001867a:	83 c4 10             	add    esp,0x10
c001867d:	e8 ce 7a fe ff       	call   c0000150 <manualPCIProbe>
c0018682:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0018689:	83 bc 24 64 01 00 00 01 	cmp    DWORD PTR [esp+0x164],0x1
c0018691:	75 2e                	jne    c00186c1 <ACPI::open(int, int, void*)+0x163>
c0018693:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001869a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186a1:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186a8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186af:	83 ec 0c             	sub    esp,0xc
c00186b2:	68 b2 c4 02 c0       	push   0xc002c4b2
c00186b7:	e8 95 a7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	eb 28                	jmp    c00186e9 <ACPI::open(int, int, void*)+0x18b>
c00186c1:	83 bc 24 64 01 00 00 02 	cmp    DWORD PTR [esp+0x164],0x2
c00186c9:	75 1e                	jne    c00186e9 <ACPI::open(int, int, void*)+0x18b>
c00186cb:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186d2:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186d9:	83 ec 0c             	sub    esp,0xc
c00186dc:	68 bc c4 02 c0       	push   0xc002c4bc
c00186e1:	e8 6b a7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00186e6:	83 c4 10             	add    esp,0x10
c00186e9:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186f0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186f6:	84 c0                	test   al,al
c00186f8:	74 16                	je     c0018710 <ACPI::open(int, int, void*)+0x1b2>
c00186fa:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018701:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018707:	83 f0 01             	xor    eax,0x1
c001870a:	0f b6 c0             	movzx  eax,al
c001870d:	40                   	inc    eax
c001870e:	eb 05                	jmp    c0018715 <ACPI::open(int, int, void*)+0x1b7>
c0018710:	b8 00 00 00 00       	mov    eax,0x0
c0018715:	83 ec 08             	sub    esp,0x8
c0018718:	50                   	push   eax
c0018719:	68 c6 c4 02 c0       	push   0xc002c4c6
c001871e:	e8 2e a7 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0018723:	83 c4 10             	add    esp,0x10
c0018726:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001872d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018733:	84 c0                	test   al,al
c0018735:	74 7c                	je     c00187b3 <ACPI::open(int, int, void*)+0x255>
c0018737:	c7 84 24 44 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x144],0x158
c0018742:	83 ec 0c             	sub    esp,0xc
c0018745:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001874c:	e8 3b 71 ff ff       	call   c000f88c <malloc>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	89 c3                	mov    ebx,eax
c0018756:	83 ec 0c             	sub    esp,0xc
c0018759:	53                   	push   ebx
c001875a:	e8 99 ac 00 00       	call   c00233f8 <PCI::PCI()>
c001875f:	83 c4 10             	add    esp,0x10
c0018762:	89 9c 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],ebx
c0018769:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018770:	83 ec 08             	sub    esp,0x8
c0018773:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001877a:	50                   	push   eax
c001877b:	e8 0a bb ff ff       	call   c001428a <Device::addChild(Device*)>
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	8b 84 24 60 01 00 00 	mov    eax,DWORD PTR [esp+0x160]
c001878a:	8b 00                	mov    eax,DWORD PTR [eax]
c001878c:	83 c0 08             	add    eax,0x8
c001878f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018791:	6a 00                	push   0x0
c0018793:	6a 00                	push   0x0
c0018795:	6a 00                	push   0x0
c0018797:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001879e:	ff d0                	call   eax
c00187a0:	83 c4 10             	add    esp,0x10
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	68 cf c4 02 c0       	push   0xc002c4cf
c00187ab:	e8 a1 a6 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 ec 0c             	sub    esp,0xc
c00187b6:	68 da c4 02 c0       	push   0xc002c4da
c00187bb:	e8 36 4b 00 00       	call   c001d2f6 <Thr::loadKernelSymbolTable(char const*)>
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	83 ec 0c             	sub    esp,0xc
c00187c6:	6a 0c                	push   0xc
c00187c8:	e8 a3 94 ff ff       	call   c0011c70 <Virt::setupPageSwapping(int)>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00187d7:	83 ec 08             	sub    esp,0x8
c00187da:	6a 12                	push   0x12
c00187dc:	50                   	push   eax
c00187dd:	e8 2c be ff ff       	call   c001460e <getDevicesOfType(DeviceType)>
c00187e2:	83 c4 0c             	add    esp,0xc
c00187e5:	83 ec 0c             	sub    esp,0xc
c00187e8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00187ef:	50                   	push   eax
c00187f0:	e8 cb 12 01 00       	call   c0029ac0 <LinkedList<Device>::isEmpty()>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	83 f0 01             	xor    eax,0x1
c00187fb:	84 c0                	test   al,al
c00187fd:	0f 84 c7 01 00 00    	je     c00189ca <ACPI::open(int, int, void*)+0x46c>
c0018803:	83 ec 0c             	sub    esp,0xc
c0018806:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001880d:	50                   	push   eax
c001880e:	e8 c9 12 01 00       	call   c0029adc <LinkedList<Device>::getFirstElement()>
c0018813:	83 c4 10             	add    esp,0x10
c0018816:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001881d:	83 ec 0c             	sub    esp,0xc
c0018820:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018827:	50                   	push   eax
c0018828:	e8 b7 12 01 00       	call   c0029ae4 <LinkedList<Device>::removeFirst()>
c001882d:	83 c4 10             	add    esp,0x10
c0018830:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0018837:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001883e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018845:	83 ec 0c             	sub    esp,0xc
c0018848:	50                   	push   eax
c0018849:	e8 3c bd ff ff       	call   c001458a <Device::getName()>
c001884e:	83 c4 10             	add    esp,0x10
c0018851:	83 ec 08             	sub    esp,0x8
c0018854:	50                   	push   eax
c0018855:	68 58 c6 02 c0       	push   0xc002c658
c001885a:	e8 f2 a5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0018869:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886d:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018873:	ba 09 00 00 00       	mov    edx,0x9
c0018878:	fc                   	cld    
c0018879:	89 c7                	mov    edi,eax
c001887b:	89 de                	mov    esi,ebx
c001887d:	89 d1                	mov    ecx,edx
c001887f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018881:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018885:	0f b6 c0             	movzx  eax,al
c0018888:	83 ec 08             	sub    esp,0x8
c001888b:	50                   	push   eax
c001888c:	68 f8 c4 02 c0       	push   0xc002c4f8
c0018891:	e8 bb a5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0018896:	83 c4 10             	add    esp,0x10
c0018899:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001889d:	0f b6 c0             	movzx  eax,al
c00188a0:	83 ec 08             	sub    esp,0x8
c00188a3:	50                   	push   eax
c00188a4:	68 0a c5 02 c0       	push   0xc002c50a
c00188a9:	e8 a3 a5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00188ae:	83 c4 10             	add    esp,0x10
c00188b1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00188b6:	0f b7 c0             	movzx  eax,ax
c00188b9:	83 ec 08             	sub    esp,0x8
c00188bc:	50                   	push   eax
c00188bd:	68 1c c5 02 c0       	push   0xc002c51c
c00188c2:	e8 8a a5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00188c7:	83 c4 10             	add    esp,0x10
c00188ca:	83 ec 08             	sub    esp,0x8
c00188cd:	8d 44 24 38          	lea    eax,[esp+0x38]
c00188d1:	50                   	push   eax
c00188d2:	83 ec 24             	sub    esp,0x24
c00188d5:	89 e0                	mov    eax,esp
c00188d7:	89 c3                	mov    ebx,eax
c00188d9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00188dd:	ba 09 00 00 00       	mov    edx,0x9
c00188e2:	89 df                	mov    edi,ebx
c00188e4:	89 c6                	mov    esi,eax
c00188e6:	89 d1                	mov    ecx,edx
c00188e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188ea:	e8 95 ae 00 00       	call   c0023784 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00188ef:	83 c4 30             	add    esp,0x30
c00188f2:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00188f9:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0018901:	0f 84 de fe ff ff    	je     c00187e5 <ACPI::open(int, int, void*)+0x287>
c0018907:	83 ec 08             	sub    esp,0x8
c001890a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018911:	68 2e c5 02 c0       	push   0xc002c52e
c0018916:	e8 36 a5 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018929:	83 ec 0c             	sub    esp,0xc
c001892c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018933:	e8 54 6f ff ff       	call   c000f88c <malloc>
c0018938:	83 c4 10             	add    esp,0x10
c001893b:	89 c3                	mov    ebx,eax
c001893d:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0018942:	83 ec 04             	sub    esp,0x4
c0018945:	50                   	push   eax
c0018946:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001894d:	53                   	push   ebx
c001894e:	e8 5d aa ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001895d:	83 ec 0c             	sub    esp,0xc
c0018960:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018967:	e8 16 ad ff ff       	call   c0013682 <File::exists()>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	84 c0                	test   al,al
c0018971:	74 27                	je     c001899a <ACPI::open(int, int, void*)+0x43c>
c0018973:	83 ec 08             	sub    esp,0x8
c0018976:	6a 01                	push   0x1
c0018978:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001897f:	e8 e9 53 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	83 ec 08             	sub    esp,0x8
c001898a:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0018991:	50                   	push   eax
c0018992:	e8 01 56 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00189a2:	0f 84 3d fe ff ff    	je     c00187e5 <ACPI::open(int, int, void*)+0x287>
c00189a8:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00189af:	8b 00                	mov    eax,DWORD PTR [eax]
c00189b1:	83 c0 08             	add    eax,0x8
c00189b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00189b6:	83 ec 0c             	sub    esp,0xc
c00189b9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00189c0:	ff d0                	call   eax
c00189c2:	83 c4 10             	add    esp,0x10
c00189c5:	e9 1b fe ff ff       	jmp    c00187e5 <ACPI::open(int, int, void*)+0x287>
c00189ca:	83 ec 0c             	sub    esp,0xc
c00189cd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00189d4:	50                   	push   eax
c00189d5:	e8 e4 10 01 00       	call   c0029abe <LinkedList<Device>::~LinkedList()>
c00189da:	83 c4 10             	add    esp,0x10
c00189dd:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c00189e3:	83 ec 08             	sub    esp,0x8
c00189e6:	6a 01                	push   0x1
c00189e8:	68 3a c5 02 c0       	push   0xc002c53a
c00189ed:	e8 7b 53 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	83 ec 08             	sub    esp,0x8
c00189f8:	53                   	push   ebx
c00189f9:	50                   	push   eax
c00189fa:	e8 99 55 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	8b 1d 68 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f568
c0018a08:	83 ec 08             	sub    esp,0x8
c0018a0b:	6a 01                	push   0x1
c0018a0d:	68 57 c5 02 c0       	push   0xc002c557
c0018a12:	e8 56 53 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	83 ec 08             	sub    esp,0x8
c0018a1d:	53                   	push   ebx
c0018a1e:	50                   	push   eax
c0018a1f:	e8 74 55 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0018a24:	83 c4 10             	add    esp,0x10
c0018a27:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0018a2c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018a32:	83 e0 04             	and    eax,0x4
c0018a35:	84 c0                	test   al,al
c0018a37:	0f 84 fd 00 00 00    	je     c0018b3a <ACPI::open(int, int, void*)+0x5dc>
c0018a3d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018a48:	83 ec 0c             	sub    esp,0xc
c0018a4b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018a52:	e8 35 6e ff ff       	call   c000f88c <malloc>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	89 c3                	mov    ebx,eax
c0018a5c:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0018a61:	83 ec 04             	sub    esp,0x4
c0018a64:	50                   	push   eax
c0018a65:	68 74 c5 02 c0       	push   0xc002c574
c0018a6a:	53                   	push   ebx
c0018a6b:	e8 40 a9 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c0018a70:	83 c4 10             	add    esp,0x10
c0018a73:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018a7a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018a82:	74 1a                	je     c0018a9e <ACPI::open(int, int, void*)+0x540>
c0018a84:	83 ec 0c             	sub    esp,0xc
c0018a87:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018a8e:	e8 ef ab ff ff       	call   c0013682 <File::exists()>
c0018a93:	83 c4 10             	add    esp,0x10
c0018a96:	84 c0                	test   al,al
c0018a98:	74 04                	je     c0018a9e <ACPI::open(int, int, void*)+0x540>
c0018a9a:	b0 01                	mov    al,0x1
c0018a9c:	eb 02                	jmp    c0018aa0 <ACPI::open(int, int, void*)+0x542>
c0018a9e:	b0 00                	mov    al,0x0
c0018aa0:	84 c0                	test   al,al
c0018aa2:	74 25                	je     c0018ac9 <ACPI::open(int, int, void*)+0x56b>
c0018aa4:	83 ec 08             	sub    esp,0x8
c0018aa7:	6a 01                	push   0x1
c0018aa9:	68 74 c5 02 c0       	push   0xc002c574
c0018aae:	e8 ba 52 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c0018ab3:	83 c4 10             	add    esp,0x10
c0018ab6:	83 ec 08             	sub    esp,0x8
c0018ab9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0018ac0:	50                   	push   eax
c0018ac1:	e8 d2 54 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c0018ac6:	83 c4 10             	add    esp,0x10
c0018ac9:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018ad1:	74 27                	je     c0018afa <ACPI::open(int, int, void*)+0x59c>
c0018ad3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018adb:	74 1d                	je     c0018afa <ACPI::open(int, int, void*)+0x59c>
c0018add:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ae6:	83 c0 08             	add    eax,0x8
c0018ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018aeb:	83 ec 0c             	sub    esp,0xc
c0018aee:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018af5:	ff d0                	call   eax
c0018af7:	83 c4 10             	add    esp,0x10
c0018afa:	a1 48 1e 03 c0       	mov    eax,ds:0xc0031e48
c0018aff:	83 ec 08             	sub    esp,0x8
c0018b02:	68 91 c5 02 c0       	push   0xc002c591
c0018b07:	50                   	push   eax
c0018b08:	e8 b7 f2 ff ff       	call   c0017dc4 <findDataTable(unsigned char*, char*)>
c0018b0d:	83 c4 10             	add    esp,0x10
c0018b10:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0018b17:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018b1f:	74 19                	je     c0018b3a <ACPI::open(int, int, void*)+0x5dc>
c0018b21:	83 ec 08             	sub    esp,0x8
c0018b24:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0018b2b:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0018b32:	e8 c7 f9 ff ff       	call   c00184fe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018b37:	83 c4 10             	add    esp,0x10
c0018b3a:	b8 00 00 00 00       	mov    eax,0x0
c0018b3f:	81 c4 70 01 00 00    	add    esp,0x170
c0018b45:	5b                   	pop    ebx
c0018b46:	5e                   	pop    esi
c0018b47:	5f                   	pop    edi
c0018b48:	c3                   	ret    
c0018b49:	90                   	nop

c0018b4a <CPU::close(int, int, void*)>:
c0018b4a:	31 c0                	xor    eax,eax
c0018b4c:	c3                   	ret    
c0018b4d:	90                   	nop

c0018b4e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018b4e:	55                   	push   ebp
c0018b4f:	57                   	push   edi
c0018b50:	56                   	push   esi
c0018b51:	53                   	push   ebx
c0018b52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018b56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b5a:	89 ce                	mov    esi,ecx
c0018b5c:	89 d5                	mov    ebp,edx
c0018b5e:	80 f9 04             	cmp    cl,0x4
c0018b61:	75 28                	jne    c0018b8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018b63:	8d 42 f9             	lea    eax,[edx-0x7]
c0018b66:	3c 03                	cmp    al,0x3
c0018b68:	0f 86 63 01 00 00    	jbe    c0018cd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b6e:	80 fa 03             	cmp    dl,0x3
c0018b71:	0f 84 5a 01 00 00    	je     c0018cd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b77:	8d 7a f2             	lea    edi,[edx-0xe]
c0018b7a:	b8 90 e9 02 c0       	mov    eax,0xc002e990
c0018b7f:	89 fb                	mov    ebx,edi
c0018b81:	80 fb 01             	cmp    bl,0x1
c0018b84:	77 4e                	ja     c0018bd4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018b86:	e9 52 01 00 00       	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b8b:	80 f9 05             	cmp    cl,0x5
c0018b8e:	75 4d                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018b90:	b8 a0 e9 02 c0       	mov    eax,0xc002e9a0
c0018b95:	80 fa 03             	cmp    dl,0x3
c0018b98:	0f 86 3f 01 00 00    	jbe    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018ba1:	b8 b0 e9 02 c0       	mov    eax,0xc002e9b0
c0018ba6:	89 fb                	mov    ebx,edi
c0018ba8:	80 fb 01             	cmp    bl,0x1
c0018bab:	0f 86 2c 01 00 00    	jbe    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb1:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0018bb6:	80 fa 08             	cmp    dl,0x8
c0018bb9:	0f 84 1e 01 00 00    	je     c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bbf:	89 d7                	mov    edi,edx
c0018bc1:	b8 d0 e9 02 c0       	mov    eax,0xc002e9d0
c0018bc6:	83 e7 fb             	and    edi,0xfffffffb
c0018bc9:	89 fb                	mov    ebx,edi
c0018bcb:	80 fb 09             	cmp    bl,0x9
c0018bce:	0f 84 09 01 00 00    	je     c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd4:	31 c0                	xor    eax,eax
c0018bd6:	89 eb                	mov    ebx,ebp
c0018bd8:	0f b6 fb             	movzx  edi,bl
c0018bdb:	eb 30                	jmp    c0018c0d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018bdd:	31 c0                	xor    eax,eax
c0018bdf:	80 f9 06             	cmp    cl,0x6
c0018be2:	75 f2                	jne    c0018bd6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018be4:	80 fa 0a             	cmp    dl,0xa
c0018be7:	77 ed                	ja     c0018bd6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018be9:	bf de 05 00 00       	mov    edi,0x5de
c0018bee:	0f a3 d7             	bt     edi,edx
c0018bf1:	73 e3                	jae    c0018bd6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018bf3:	b8 e0 e9 02 c0       	mov    eax,0xc002e9e0
c0018bf8:	e9 e0 00 00 00       	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bfd:	39 c7                	cmp    edi,eax
c0018bff:	0f 84 d3 00 00 00    	je     c0018cd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018c05:	40                   	inc    eax
c0018c06:	3d d0 00 00 00       	cmp    eax,0xd0
c0018c0b:	74 09                	je     c0018c16 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018c0d:	89 f3                	mov    ebx,esi
c0018c0f:	80 fb 0f             	cmp    bl,0xf
c0018c12:	75 f1                	jne    c0018c05 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018c14:	eb e7                	jmp    c0018bfd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018c16:	80 f9 10             	cmp    cl,0x10
c0018c19:	75 14                	jne    c0018c2f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018c1b:	8d 42 fc             	lea    eax,[edx-0x4]
c0018c1e:	83 e0 fb             	and    eax,0xfffffffb
c0018c21:	3c 02                	cmp    al,0x2
c0018c23:	76 34                	jbe    c0018c59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018c25:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018c2a:	80 fa 02             	cmp    dl,0x2
c0018c2d:	eb 24                	jmp    c0018c53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018c2f:	80 f9 11             	cmp    cl,0x11
c0018c32:	75 13                	jne    c0018c47 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018c34:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018c39:	80 fa 03             	cmp    dl,0x3
c0018c3c:	0f 85 9b 00 00 00    	jne    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c42:	e9 91 00 00 00       	jmp    c0018cd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018c47:	80 f9 12             	cmp    cl,0x12
c0018c4a:	75 14                	jne    c0018c60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018c4c:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018c51:	fe ca                	dec    dl
c0018c53:	0f 85 84 00 00 00    	jne    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c59:	b8 00 ea 02 c0       	mov    eax,0xc002ea00
c0018c5e:	eb 7d                	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c60:	80 f9 14             	cmp    cl,0x14
c0018c63:	75 12                	jne    c0018c77 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018c65:	4a                   	dec    edx
c0018c66:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018c6b:	80 fa 01             	cmp    dl,0x1
c0018c6e:	77 6d                	ja     c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c70:	b8 10 ea 02 c0       	mov    eax,0xc002ea10
c0018c75:	eb 66                	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c77:	80 f9 15             	cmp    cl,0x15
c0018c7a:	75 31                	jne    c0018cad <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018c7c:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0018c81:	80 fa 01             	cmp    dl,0x1
c0018c84:	74 57                	je     c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c86:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018c8b:	80 fa 13             	cmp    dl,0x13
c0018c8e:	76 0c                	jbe    c0018c9c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018c90:	80 fa 30             	cmp    dl,0x30
c0018c93:	75 48                	jne    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c95:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0018c9a:	eb 41                	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c9c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018ca1:	0f a3 d1             	bt     ecx,edx
c0018ca4:	73 37                	jae    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ca6:	b8 30 ea 02 c0       	mov    eax,0xc002ea30
c0018cab:	eb 30                	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cad:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018cb2:	80 f9 16             	cmp    cl,0x16
c0018cb5:	75 26                	jne    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cb7:	b8 50 ea 02 c0       	mov    eax,0xc002ea50
c0018cbc:	84 d2                	test   dl,dl
c0018cbe:	74 1d                	je     c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cc0:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018cc5:	80 fa 30             	cmp    dl,0x30
c0018cc8:	75 13                	jne    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cca:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0018ccf:	eb 0c                	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cd1:	b8 80 e9 02 c0       	mov    eax,0xc002e980
c0018cd6:	eb 05                	jmp    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cd8:	b8 f0 e9 02 c0       	mov    eax,0xc002e9f0
c0018cdd:	5b                   	pop    ebx
c0018cde:	5e                   	pop    esi
c0018cdf:	5f                   	pop    edi
c0018ce0:	5d                   	pop    ebp
c0018ce1:	c3                   	ret    

c0018ce2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018ce2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ce6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cea:	80 f9 04             	cmp    cl,0x4
c0018ced:	75 6b                	jne    c0018d5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018cef:	b8 e0 e7 02 c0       	mov    eax,0xc002e7e0
c0018cf4:	80 fa 01             	cmp    dl,0x1
c0018cf7:	0f 86 92 02 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cfd:	b8 f0 e7 02 c0       	mov    eax,0xc002e7f0
c0018d02:	80 fa 02             	cmp    dl,0x2
c0018d05:	0f 84 84 02 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0b:	b8 00 e8 02 c0       	mov    eax,0xc002e800
c0018d10:	80 fa 03             	cmp    dl,0x3
c0018d13:	0f 84 76 02 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d19:	b8 10 e8 02 c0       	mov    eax,0xc002e810
c0018d1e:	80 fa 04             	cmp    dl,0x4
c0018d21:	0f 84 68 02 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d27:	b8 20 e8 02 c0       	mov    eax,0xc002e820
c0018d2c:	80 fa 05             	cmp    dl,0x5
c0018d2f:	0f 84 5a 02 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d35:	b8 00 e8 02 c0       	mov    eax,0xc002e800
c0018d3a:	80 fa 07             	cmp    dl,0x7
c0018d3d:	0f 84 4c 02 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d43:	83 ea 08             	sub    edx,0x8
c0018d46:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018d4b:	80 fa 01             	cmp    dl,0x1
c0018d4e:	0f 87 3b 02 00 00    	ja     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d54:	b8 30 e8 02 c0       	mov    eax,0xc002e830
c0018d59:	c3                   	ret    
c0018d5a:	80 f9 05             	cmp    cl,0x5
c0018d5d:	75 45                	jne    c0018da4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018d5f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018d62:	b8 40 e8 02 c0       	mov    eax,0xc002e840
c0018d67:	80 f9 02             	cmp    cl,0x2
c0018d6a:	0f 86 1f 02 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d70:	80 fa 04             	cmp    dl,0x4
c0018d73:	0f 84 f3 01 00 00    	je     c0018f6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018d79:	80 fa 07             	cmp    dl,0x7
c0018d7c:	0f 84 0d 02 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d82:	b8 50 e8 02 c0       	mov    eax,0xc002e850
c0018d87:	80 fa 08             	cmp    dl,0x8
c0018d8a:	0f 84 ff 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d90:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018d95:	80 fa 09             	cmp    dl,0x9
c0018d98:	0f 85 f1 01 00 00    	jne    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9e:	b8 60 e8 02 c0       	mov    eax,0xc002e860
c0018da3:	c3                   	ret    
c0018da4:	80 f9 06             	cmp    cl,0x6
c0018da7:	0f 85 85 01 00 00    	jne    c0018f32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018dad:	b8 70 e8 02 c0       	mov    eax,0xc002e870
c0018db2:	80 fa 01             	cmp    dl,0x1
c0018db5:	0f 84 d4 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbb:	8d 42 fb             	lea    eax,[edx-0x5]
c0018dbe:	3c 01                	cmp    al,0x1
c0018dc0:	0f 86 ac 01 00 00    	jbe    c0018f72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018dc6:	80 fa 03             	cmp    dl,0x3
c0018dc9:	0f 84 a3 01 00 00    	je     c0018f72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018dcf:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018dd2:	b8 90 e8 02 c0       	mov    eax,0xc002e890
c0018dd7:	80 f9 01             	cmp    cl,0x1
c0018dda:	0f 86 af 01 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de0:	80 fa 09             	cmp    dl,0x9
c0018de3:	0f 84 8f 01 00 00    	je     c0018f78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018de9:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018dec:	80 f9 01             	cmp    cl,0x1
c0018def:	0f 86 9a 01 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df5:	b8 a0 e8 02 c0       	mov    eax,0xc002e8a0
c0018dfa:	80 fa 0d             	cmp    dl,0xd
c0018dfd:	0f 84 8c 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e03:	b8 b0 e8 02 c0       	mov    eax,0xc002e8b0
c0018e08:	80 fa 0e             	cmp    dl,0xe
c0018e0b:	0f 84 7e 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e11:	b8 c0 e8 02 c0       	mov    eax,0xc002e8c0
c0018e16:	80 fa 0f             	cmp    dl,0xf
c0018e19:	0f 84 70 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1f:	b8 a0 e8 02 c0       	mov    eax,0xc002e8a0
c0018e24:	80 fa 15             	cmp    dl,0x15
c0018e27:	0f 84 62 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018e30:	b8 c0 e8 02 c0       	mov    eax,0xc002e8c0
c0018e35:	80 f9 01             	cmp    cl,0x1
c0018e38:	0f 86 51 01 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3e:	80 fa 1a             	cmp    dl,0x1a
c0018e41:	0f 84 37 01 00 00    	je     c0018f7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018e47:	80 fa 1c             	cmp    dl,0x1c
c0018e4a:	0f 84 34 01 00 00    	je     c0018f84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018e50:	80 fa 1d             	cmp    dl,0x1d
c0018e53:	0f 84 36 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e59:	b8 f0 e8 02 c0       	mov    eax,0xc002e8f0
c0018e5e:	80 fa 25             	cmp    dl,0x25
c0018e61:	0f 84 28 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e67:	8d 4a da             	lea    ecx,[edx-0x26]
c0018e6a:	b8 e0 e8 02 c0       	mov    eax,0xc002e8e0
c0018e6f:	80 f9 01             	cmp    cl,0x1
c0018e72:	0f 86 17 01 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e78:	b8 00 e9 02 c0       	mov    eax,0xc002e900
c0018e7d:	80 fa 2a             	cmp    dl,0x2a
c0018e80:	0f 84 09 01 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e86:	b8 f0 e8 02 c0       	mov    eax,0xc002e8f0
c0018e8b:	80 fa 2c             	cmp    dl,0x2c
c0018e8e:	0f 84 fb 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e94:	b8 00 e9 02 c0       	mov    eax,0xc002e900
c0018e99:	80 fa 2d             	cmp    dl,0x2d
c0018e9c:	0f 84 ed 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea2:	b8 d0 e8 02 c0       	mov    eax,0xc002e8d0
c0018ea7:	80 fa 2e             	cmp    dl,0x2e
c0018eaa:	0f 84 df 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eb0:	b8 f0 e8 02 c0       	mov    eax,0xc002e8f0
c0018eb5:	80 fa 2f             	cmp    dl,0x2f
c0018eb8:	0f 84 d1 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ebe:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ec1:	b8 e0 e8 02 c0       	mov    eax,0xc002e8e0
c0018ec6:	80 f9 01             	cmp    cl,0x1
c0018ec9:	0f 86 c0 00 00 00    	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ecf:	b8 10 e9 02 c0       	mov    eax,0xc002e910
c0018ed4:	80 fa 37             	cmp    dl,0x37
c0018ed7:	0f 84 b2 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018edd:	b8 20 e9 02 c0       	mov    eax,0xc002e920
c0018ee2:	80 fa 3a             	cmp    dl,0x3a
c0018ee5:	0f 84 a4 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eeb:	b8 30 e9 02 c0       	mov    eax,0xc002e930
c0018ef0:	80 fa 3c             	cmp    dl,0x3c
c0018ef3:	0f 84 96 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ef9:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0018efe:	80 fa 3d             	cmp    dl,0x3d
c0018f01:	0f 84 88 00 00 00    	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f07:	b8 20 e9 02 c0       	mov    eax,0xc002e920
c0018f0c:	80 fa 3e             	cmp    dl,0x3e
c0018f0f:	74 7e                	je     c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f11:	8d 42 bb             	lea    eax,[edx-0x45]
c0018f14:	3c 01                	cmp    al,0x1
c0018f16:	76 72                	jbe    c0018f8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018f18:	80 fa 3f             	cmp    dl,0x3f
c0018f1b:	74 6d                	je     c0018f8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018f1d:	80 fa 4a             	cmp    dl,0x4a
c0018f20:	74 0a                	je     c0018f2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018f22:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018f27:	80 fa 4d             	cmp    dl,0x4d
c0018f2a:	75 63                	jne    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f2c:	b8 10 e9 02 c0       	mov    eax,0xc002e910
c0018f31:	c3                   	ret    
c0018f32:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018f37:	80 f9 0b             	cmp    cl,0xb
c0018f3a:	75 0a                	jne    c0018f46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018f3c:	fe ca                	dec    dl
c0018f3e:	75 4f                	jne    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f40:	b8 50 e9 02 c0       	mov    eax,0xc002e950
c0018f45:	c3                   	ret    
c0018f46:	80 f9 0f             	cmp    cl,0xf
c0018f49:	75 44                	jne    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f4b:	b8 60 e9 02 c0       	mov    eax,0xc002e960
c0018f50:	80 fa 02             	cmp    dl,0x2
c0018f53:	76 3a                	jbe    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f55:	8d 42 fd             	lea    eax,[edx-0x3]
c0018f58:	3c 01                	cmp    al,0x1
c0018f5a:	76 0a                	jbe    c0018f66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018f5c:	b8 9e c9 02 c0       	mov    eax,0xc002c99e
c0018f61:	80 fa 06             	cmp    dl,0x6
c0018f64:	75 29                	jne    c0018f8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f66:	b8 70 e9 02 c0       	mov    eax,0xc002e970
c0018f6b:	c3                   	ret    
c0018f6c:	b8 50 e8 02 c0       	mov    eax,0xc002e850
c0018f71:	c3                   	ret    
c0018f72:	b8 80 e8 02 c0       	mov    eax,0xc002e880
c0018f77:	c3                   	ret    
c0018f78:	b8 a0 e8 02 c0       	mov    eax,0xc002e8a0
c0018f7d:	c3                   	ret    
c0018f7e:	b8 d0 e8 02 c0       	mov    eax,0xc002e8d0
c0018f83:	c3                   	ret    
c0018f84:	b8 e0 e8 02 c0       	mov    eax,0xc002e8e0
c0018f89:	c3                   	ret    
c0018f8a:	b8 30 e9 02 c0       	mov    eax,0xc002e930
c0018f8f:	c3                   	ret    

c0018f90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018f90:	60                   	pusha  
c0018f91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f9d:	9c                   	pushf  
c0018f9e:	fa                   	cli    
c0018f9f:	0f 09                	wbinvd 
c0018fa1:	0f 30                	wrmsr  
c0018fa3:	9d                   	popf   
c0018fa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fa8:	89 02                	mov    DWORD PTR [edx],eax
c0018faa:	61                   	popa   
c0018fab:	c3                   	ret    

c0018fac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018fac:	60                   	pusha  
c0018fad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018fb1:	9c                   	pushf  
c0018fb2:	fa                   	cli    
c0018fb3:	0f 09                	wbinvd 
c0018fb5:	31 c0                	xor    eax,eax
c0018fb7:	31 d2                	xor    edx,edx
c0018fb9:	0f 32                	rdmsr  
c0018fbb:	9d                   	popf   
c0018fbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018fc0:	89 02                	mov    DWORD PTR [edx],eax
c0018fc2:	61                   	popa   
c0018fc3:	c3                   	ret    

c0018fc4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018fc4:	56                   	push   esi
c0018fc5:	53                   	push   ebx
c0018fc6:	83 ec 10             	sub    esp,0x10
c0018fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018fcd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018fd2:	75 5d                	jne    c0019031 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018fd4:	83 f8 08             	cmp    eax,0x8
c0018fd7:	75 09                	jne    c0018fe2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018fd9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018fde:	7e 13                	jle    c0018ff3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018fe0:	eb 30                	jmp    c0019012 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018fe2:	83 f8 06             	cmp    eax,0x6
c0018fe5:	7c 4a                	jl     c0019031 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018fe7:	83 f8 07             	cmp    eax,0x7
c0018fea:	7e 07                	jle    c0018ff3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018fec:	83 f8 09             	cmp    eax,0x9
c0018fef:	74 21                	je     c0019012 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ff1:	eb 3e                	jmp    c0019031 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ff3:	89 e6                	mov    esi,esp
c0018ff5:	8b 1d a8 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f5a8
c0018ffb:	56                   	push   esi
c0018ffc:	c1 eb 15             	shr    ebx,0x15
c0018fff:	68 82 00 00 c0       	push   0xc0000082
c0019004:	83 e3 7e             	and    ebx,0x7e
c0019007:	e8 a0 ff ff ff       	call   c0018fac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001900c:	56                   	push   esi
c001900d:	6a 00                	push   0x0
c001900f:	53                   	push   ebx
c0019010:	eb 12                	jmp    c0019024 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0019012:	89 e3                	mov    ebx,esp
c0019014:	53                   	push   ebx
c0019015:	68 82 00 00 c0       	push   0xc0000082
c001901a:	e8 8d ff ff ff       	call   c0018fac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001901f:	53                   	push   ebx
c0019020:	6a 00                	push   0x0
c0019022:	6a 00                	push   0x0
c0019024:	68 82 00 00 c0       	push   0xc0000082
c0019029:	e8 62 ff ff ff       	call   c0018f90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001902e:	83 c4 18             	add    esp,0x18
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	5b                   	pop    ebx
c0019035:	5e                   	pop    esi
c0019036:	c3                   	ret    
c0019037:	90                   	nop

c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019038:	55                   	push   ebp
c0019039:	57                   	push   edi
c001903a:	56                   	push   esi
c001903b:	53                   	push   ebx
c001903c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019040:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019044:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019048:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001904c:	39 05 80 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea80,eax
c0019052:	75 23                	jne    c0019077 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0019054:	a1 ac 20 03 c0       	mov    eax,ds:0xc00320ac
c0019059:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001905d:	89 06                	mov    DWORD PTR [esi],eax
c001905f:	a1 a8 20 03 c0       	mov    eax,ds:0xc00320a8
c0019064:	89 07                	mov    DWORD PTR [edi],eax
c0019066:	a1 a4 20 03 c0       	mov    eax,ds:0xc00320a4
c001906b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001906e:	a1 a0 20 03 c0       	mov    eax,ds:0xc00320a0
c0019073:	89 02                	mov    DWORD PTR [edx],eax
c0019075:	eb 3f                	jmp    c00190b6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0019077:	31 c9                	xor    ecx,ecx
c0019079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001907d:	0f a2                	cpuid  
c001907f:	89 06                	mov    DWORD PTR [esi],eax
c0019081:	89 1f                	mov    DWORD PTR [edi],ebx
c0019083:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019087:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001908a:	89 10                	mov    DWORD PTR [eax],edx
c001908c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019090:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0019095:	8b 06                	mov    eax,DWORD PTR [esi]
c0019097:	a3 ac 20 03 c0       	mov    ds:0xc00320ac,eax
c001909c:	8b 07                	mov    eax,DWORD PTR [edi]
c001909e:	a3 a8 20 03 c0       	mov    ds:0xc00320a8,eax
c00190a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190a6:	a3 a4 20 03 c0       	mov    ds:0xc00320a4,eax
c00190ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00190af:	8b 00                	mov    eax,DWORD PTR [eax]
c00190b1:	a3 a0 20 03 c0       	mov    ds:0xc00320a0,eax
c00190b6:	5b                   	pop    ebx
c00190b7:	5e                   	pop    esi
c00190b8:	5f                   	pop    edi
c00190b9:	5d                   	pop    ebp
c00190ba:	c3                   	ret    
c00190bb:	90                   	nop

c00190bc <CPU::cpuidCheckEDX(unsigned int)>:
c00190bc:	83 ec 10             	sub    esp,0x10
c00190bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190c3:	50                   	push   eax
c00190c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190c8:	50                   	push   eax
c00190c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190cd:	50                   	push   eax
c00190ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190d2:	50                   	push   eax
c00190d3:	6a 01                	push   0x1
c00190d5:	e8 5e ff ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190de:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00190e2:	0f 95 c0             	setne  al
c00190e5:	83 c4 24             	add    esp,0x24
c00190e8:	c3                   	ret    
c00190e9:	90                   	nop

c00190ea <CPU::cpuidCheckECX(unsigned int)>:
c00190ea:	83 ec 10             	sub    esp,0x10
c00190ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190f1:	50                   	push   eax
c00190f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190f6:	50                   	push   eax
c00190f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190fb:	50                   	push   eax
c00190fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019100:	50                   	push   eax
c0019101:	6a 01                	push   0x1
c0019103:	e8 30 ff ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019108:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001910c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019110:	0f 95 c0             	setne  al
c0019113:	83 c4 24             	add    esp,0x24
c0019116:	c3                   	ret    
c0019117:	90                   	nop

c0019118 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019118:	83 ec 10             	sub    esp,0x10
c001911b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001911f:	50                   	push   eax
c0019120:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019124:	50                   	push   eax
c0019125:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019129:	50                   	push   eax
c001912a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001912e:	50                   	push   eax
c001912f:	6a 07                	push   0x7
c0019131:	e8 02 ff ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019136:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001913a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001913e:	0f 95 c0             	setne  al
c0019141:	83 c4 24             	add    esp,0x24
c0019144:	c3                   	ret    
c0019145:	90                   	nop

c0019146 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019146:	83 ec 10             	sub    esp,0x10
c0019149:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001914d:	50                   	push   eax
c001914e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019152:	50                   	push   eax
c0019153:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019157:	50                   	push   eax
c0019158:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001915c:	50                   	push   eax
c001915d:	6a 07                	push   0x7
c001915f:	e8 d4 fe ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019164:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019168:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001916c:	0f 95 c0             	setne  al
c001916f:	83 c4 24             	add    esp,0x24
c0019172:	c3                   	ret    
c0019173:	90                   	nop

c0019174 <CPU::CPU()>:
c0019174:	83 ec 0c             	sub    esp,0xc
c0019177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001917b:	83 ec 08             	sub    esp,0x8
c001917e:	68 9e c9 02 c0       	push   0xc002c99e
c0019183:	50                   	push   eax
c0019184:	e8 05 b3 ff ff       	call   c001448e <Device::Device(char const*)>
c0019189:	83 c4 10             	add    esp,0x10
c001918c:	ba 78 ca 02 c0       	mov    edx,0xc002ca78
c0019191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019195:	89 10                	mov    DWORD PTR [eax],edx
c0019197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001919b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00191a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191a9:	05 78 01 00 00       	add    eax,0x178
c00191ae:	83 ec 0c             	sub    esp,0xc
c00191b1:	50                   	push   eax
c00191b2:	e8 eb 5e ff ff       	call   c000f0a2 <GDT::GDT()>
c00191b7:	83 c4 10             	add    esp,0x10
c00191ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191be:	05 7c 09 00 00       	add    eax,0x97c
c00191c3:	83 ec 0c             	sub    esp,0xc
c00191c6:	50                   	push   eax
c00191c7:	e8 40 61 ff ff       	call   c000f30c <IDT::IDT()>
c00191cc:	83 c4 10             	add    esp,0x10
c00191cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191d3:	05 7c 11 00 00       	add    eax,0x117c
c00191d8:	83 ec 0c             	sub    esp,0xc
c00191db:	50                   	push   eax
c00191dc:	e8 81 81 ff ff       	call   c0011362 <TSS::TSS()>
c00191e1:	83 c4 10             	add    esp,0x10
c00191e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191e8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00191ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191f3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00191fd:	90                   	nop
c00191fe:	83 c4 0c             	add    esp,0xc
c0019201:	c3                   	ret    

c0019202 <CPU::displayFeatures()>:
c0019202:	53                   	push   ebx
c0019203:	83 ec 10             	sub    esp,0x10
c0019206:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001920a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019210:	68 ac c6 02 c0       	push   0xc002c6ac
c0019215:	e8 37 9c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001921a:	59                   	pop    ecx
c001921b:	58                   	pop    eax
c001921c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019222:	50                   	push   eax
c0019223:	68 bd c6 02 c0       	push   0xc002c6bd
c0019228:	e8 24 9c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001922d:	58                   	pop    eax
c001922e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019234:	5a                   	pop    edx
c0019235:	c1 e8 0e             	shr    eax,0xe
c0019238:	0f b6 c0             	movzx  eax,al
c001923b:	50                   	push   eax
c001923c:	68 ce c6 02 c0       	push   0xc002c6ce
c0019241:	e8 0b 9c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019246:	59                   	pop    ecx
c0019247:	58                   	pop    eax
c0019248:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001924e:	66 c1 e8 06          	shr    ax,0x6
c0019252:	0f b6 c0             	movzx  eax,al
c0019255:	50                   	push   eax
c0019256:	68 df c6 02 c0       	push   0xc002c6df
c001925b:	e8 f1 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019260:	c7 04 24 8c cb 02 c0 	mov    DWORD PTR [esp],0xc002cb8c
c0019267:	e8 e5 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019274:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001927b:	74 05                	je     c0019282 <CPU::displayFeatures()+0x80>
c001927d:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019282:	52                   	push   edx
c0019283:	52                   	push   edx
c0019284:	50                   	push   eax
c0019285:	68 f0 c6 02 c0       	push   0xc002c6f0
c001928a:	e8 c2 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001928f:	83 c4 10             	add    esp,0x10
c0019292:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019297:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001929e:	78 05                	js     c00192a5 <CPU::displayFeatures()+0xa3>
c00192a0:	b8 96 af 02 c0       	mov    eax,0xc002af96
c00192a5:	51                   	push   ecx
c00192a6:	51                   	push   ecx
c00192a7:	50                   	push   eax
c00192a8:	68 07 c7 02 c0       	push   0xc002c707
c00192ad:	e8 9f 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	b8 92 af 02 c0       	mov    eax,0xc002af92
c00192ba:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00192c1:	75 05                	jne    c00192c8 <CPU::displayFeatures()+0xc6>
c00192c3:	b8 96 af 02 c0       	mov    eax,0xc002af96
c00192c8:	52                   	push   edx
c00192c9:	52                   	push   edx
c00192ca:	50                   	push   eax
c00192cb:	68 1e c7 02 c0       	push   0xc002c71e
c00192d0:	e8 7c 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00192d5:	83 c4 10             	add    esp,0x10
c00192d8:	b8 92 af 02 c0       	mov    eax,0xc002af92
c00192dd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00192e4:	75 05                	jne    c00192eb <CPU::displayFeatures()+0xe9>
c00192e6:	b8 96 af 02 c0       	mov    eax,0xc002af96
c00192eb:	51                   	push   ecx
c00192ec:	51                   	push   ecx
c00192ed:	50                   	push   eax
c00192ee:	68 35 c7 02 c0       	push   0xc002c735
c00192f3:	e8 59 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019300:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019307:	75 05                	jne    c001930e <CPU::displayFeatures()+0x10c>
c0019309:	b8 96 af 02 c0       	mov    eax,0xc002af96
c001930e:	52                   	push   edx
c001930f:	52                   	push   edx
c0019310:	50                   	push   eax
c0019311:	68 4c c7 02 c0       	push   0xc002c74c
c0019316:	e8 36 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019323:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001932a:	75 05                	jne    c0019331 <CPU::displayFeatures()+0x12f>
c001932c:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019331:	51                   	push   ecx
c0019332:	51                   	push   ecx
c0019333:	50                   	push   eax
c0019334:	68 63 c7 02 c0       	push   0xc002c763
c0019339:	e8 13 9b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019346:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001934d:	75 05                	jne    c0019354 <CPU::displayFeatures()+0x152>
c001934f:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019354:	52                   	push   edx
c0019355:	52                   	push   edx
c0019356:	50                   	push   eax
c0019357:	68 7a c7 02 c0       	push   0xc002c77a
c001935c:	e8 f0 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019361:	83 c4 10             	add    esp,0x10
c0019364:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019369:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019370:	75 05                	jne    c0019377 <CPU::displayFeatures()+0x175>
c0019372:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019377:	51                   	push   ecx
c0019378:	51                   	push   ecx
c0019379:	50                   	push   eax
c001937a:	68 91 c7 02 c0       	push   0xc002c791
c001937f:	e8 cd 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	b8 92 af 02 c0       	mov    eax,0xc002af92
c001938c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019393:	75 05                	jne    c001939a <CPU::displayFeatures()+0x198>
c0019395:	b8 96 af 02 c0       	mov    eax,0xc002af96
c001939a:	52                   	push   edx
c001939b:	52                   	push   edx
c001939c:	50                   	push   eax
c001939d:	68 a8 c7 02 c0       	push   0xc002c7a8
c00193a2:	e8 aa 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00193a7:	83 c4 10             	add    esp,0x10
c00193aa:	b8 92 af 02 c0       	mov    eax,0xc002af92
c00193af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00193b6:	75 05                	jne    c00193bd <CPU::displayFeatures()+0x1bb>
c00193b8:	b8 96 af 02 c0       	mov    eax,0xc002af96
c00193bd:	51                   	push   ecx
c00193be:	51                   	push   ecx
c00193bf:	50                   	push   eax
c00193c0:	68 bf c7 02 c0       	push   0xc002c7bf
c00193c5:	e8 87 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	b8 92 af 02 c0       	mov    eax,0xc002af92
c00193d2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00193d9:	75 05                	jne    c00193e0 <CPU::displayFeatures()+0x1de>
c00193db:	b8 96 af 02 c0       	mov    eax,0xc002af96
c00193e0:	52                   	push   edx
c00193e1:	52                   	push   edx
c00193e2:	50                   	push   eax
c00193e3:	68 d6 c7 02 c0       	push   0xc002c7d6
c00193e8:	e8 64 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00193ed:	83 c4 10             	add    esp,0x10
c00193f0:	b8 92 af 02 c0       	mov    eax,0xc002af92
c00193f5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00193fc:	75 05                	jne    c0019403 <CPU::displayFeatures()+0x201>
c00193fe:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019403:	51                   	push   ecx
c0019404:	51                   	push   ecx
c0019405:	50                   	push   eax
c0019406:	68 ed c7 02 c0       	push   0xc002c7ed
c001940b:	e8 41 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	b8 92 af 02 c0       	mov    eax,0xc002af92
c0019418:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001941f:	75 05                	jne    c0019426 <CPU::displayFeatures()+0x224>
c0019421:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019426:	52                   	push   edx
c0019427:	52                   	push   edx
c0019428:	50                   	push   eax
c0019429:	68 04 c8 02 c0       	push   0xc002c804
c001942e:	e8 1e 9a ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019433:	83 c4 10             	add    esp,0x10
c0019436:	b8 92 af 02 c0       	mov    eax,0xc002af92
c001943b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019442:	78 05                	js     c0019449 <CPU::displayFeatures()+0x247>
c0019444:	b8 96 af 02 c0       	mov    eax,0xc002af96
c0019449:	51                   	push   ecx
c001944a:	51                   	push   ecx
c001944b:	50                   	push   eax
c001944c:	68 1b c8 02 c0       	push   0xc002c81b
c0019451:	e8 fb 99 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019456:	83 c4 10             	add    esp,0x10
c0019459:	b8 92 af 02 c0       	mov    eax,0xc002af92
c001945e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019465:	75 05                	jne    c001946c <CPU::displayFeatures()+0x26a>
c0019467:	b8 96 af 02 c0       	mov    eax,0xc002af96
c001946c:	52                   	push   edx
c001946d:	52                   	push   edx
c001946e:	50                   	push   eax
c001946f:	68 32 c8 02 c0       	push   0xc002c832
c0019474:	e8 d8 99 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0019479:	83 c4 18             	add    esp,0x18
c001947c:	5b                   	pop    ebx
c001947d:	c3                   	ret    

c001947e <CPU::detectFeatures()>:
c001947e:	55                   	push   ebp
c001947f:	57                   	push   edi
c0019480:	56                   	push   esi
c0019481:	53                   	push   ebx
c0019482:	83 ec 50             	sub    esp,0x50
c0019485:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019489:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019493:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001949a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00194a0:	6a 0d                	push   0xd
c00194a2:	6a 00                	push   0x0
c00194a4:	55                   	push   ebp
c00194a5:	e8 a6 72 fe ff       	call   c0000750 <memset>
c00194aa:	83 c4 10             	add    esp,0x10
c00194ad:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00194b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00194b9:	0f 84 22 09 00 00    	je     c0019de1 <CPU::detectFeatures()+0x963>
c00194bf:	83 ec 0c             	sub    esp,0xc
c00194c2:	89 ef                	mov    edi,ebp
c00194c4:	6a 10                	push   0x10
c00194c6:	e8 f1 fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c00194cb:	83 e0 01             	and    eax,0x1
c00194ce:	8d 14 00             	lea    edx,[eax+eax*1]
c00194d1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194d7:	83 e0 fd             	and    eax,0xfffffffd
c00194da:	09 d0                	or     eax,edx
c00194dc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194e2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00194e9:	e8 ce fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c00194ee:	83 e0 01             	and    eax,0x1
c00194f1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194f8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194fe:	83 e0 fb             	and    eax,0xfffffffb
c0019501:	09 d0                	or     eax,edx
c0019503:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019509:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019510:	e8 a7 fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c0019515:	83 e0 01             	and    eax,0x1
c0019518:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001951f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019525:	83 e0 f7             	and    eax,0xfffffff7
c0019528:	09 d0                	or     eax,edx
c001952a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019530:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019537:	e8 80 fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c001953c:	83 e0 01             	and    eax,0x1
c001953f:	c1 e0 04             	shl    eax,0x4
c0019542:	88 c2                	mov    dl,al
c0019544:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001954a:	83 e0 ef             	and    eax,0xffffffef
c001954d:	09 d0                	or     eax,edx
c001954f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019555:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001955c:	e8 5b fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c0019561:	83 e0 01             	and    eax,0x1
c0019564:	c1 e0 05             	shl    eax,0x5
c0019567:	88 c2                	mov    dl,al
c0019569:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956f:	83 e0 df             	and    eax,0xffffffdf
c0019572:	09 d0                	or     eax,edx
c0019574:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001957a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019581:	e8 36 fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c0019586:	83 e0 01             	and    eax,0x1
c0019589:	8d 14 00             	lea    edx,[eax+eax*1]
c001958c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019592:	83 e0 fd             	and    eax,0xfffffffd
c0019595:	09 d0                	or     eax,edx
c0019597:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001959d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00195a4:	e8 13 fb ff ff       	call   c00190bc <CPU::cpuidCheckEDX(unsigned int)>
c00195a9:	83 e0 01             	and    eax,0x1
c00195ac:	c1 e0 06             	shl    eax,0x6
c00195af:	88 c2                	mov    dl,al
c00195b1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195b7:	83 e0 bf             	and    eax,0xffffffbf
c00195ba:	09 d0                	or     eax,edx
c00195bc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195c2:	58                   	pop    eax
c00195c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195c7:	50                   	push   eax
c00195c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195cc:	50                   	push   eax
c00195cd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00195d1:	56                   	push   esi
c00195d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195d6:	50                   	push   eax
c00195d7:	6a 00                	push   0x0
c00195d9:	e8 5a fa ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195de:	b8 04 00 00 00       	mov    eax,0x4
c00195e3:	89 c1                	mov    ecx,eax
c00195e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00195e7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00195ed:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00195f1:	89 c1                	mov    ecx,eax
c00195f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00195f5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00195fb:	8d 74 24 38          	lea    esi,[esp+0x38]
c00195ff:	89 c1                	mov    ecx,eax
c0019601:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019603:	83 c4 18             	add    esp,0x18
c0019606:	68 49 c8 02 c0       	push   0xc002c849
c001960b:	55                   	push   ebp
c001960c:	e8 87 72 fe ff       	call   c0000898 <strcmp>
c0019611:	83 c4 10             	add    esp,0x10
c0019614:	85 c0                	test   eax,eax
c0019616:	75 0f                	jne    c0019627 <CPU::detectFeatures()+0x1a9>
c0019618:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019622:	e9 22 02 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c0019627:	50                   	push   eax
c0019628:	50                   	push   eax
c0019629:	68 56 c8 02 c0       	push   0xc002c856
c001962e:	55                   	push   ebp
c001962f:	e8 64 72 fe ff       	call   c0000898 <strcmp>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	85 c0                	test   eax,eax
c0019639:	74 dd                	je     c0019618 <CPU::detectFeatures()+0x19a>
c001963b:	50                   	push   eax
c001963c:	50                   	push   eax
c001963d:	68 63 c8 02 c0       	push   0xc002c863
c0019642:	55                   	push   ebp
c0019643:	e8 50 72 fe ff       	call   c0000898 <strcmp>
c0019648:	83 c4 10             	add    esp,0x10
c001964b:	85 c0                	test   eax,eax
c001964d:	74 2a                	je     c0019679 <CPU::detectFeatures()+0x1fb>
c001964f:	50                   	push   eax
c0019650:	50                   	push   eax
c0019651:	68 70 c8 02 c0       	push   0xc002c870
c0019656:	55                   	push   ebp
c0019657:	e8 3c 72 fe ff       	call   c0000898 <strcmp>
c001965c:	83 c4 10             	add    esp,0x10
c001965f:	85 c0                	test   eax,eax
c0019661:	74 16                	je     c0019679 <CPU::detectFeatures()+0x1fb>
c0019663:	50                   	push   eax
c0019664:	50                   	push   eax
c0019665:	68 7d c8 02 c0       	push   0xc002c87d
c001966a:	55                   	push   ebp
c001966b:	e8 28 72 fe ff       	call   c0000898 <strcmp>
c0019670:	83 c4 10             	add    esp,0x10
c0019673:	85 c0                	test   eax,eax
c0019675:	74 48                	je     c00196bf <CPU::detectFeatures()+0x241>
c0019677:	eb 0f                	jmp    c0019688 <CPU::detectFeatures()+0x20a>
c0019679:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019683:	e9 c1 01 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c0019688:	50                   	push   eax
c0019689:	50                   	push   eax
c001968a:	68 8a c8 02 c0       	push   0xc002c88a
c001968f:	55                   	push   ebp
c0019690:	e8 03 72 fe ff       	call   c0000898 <strcmp>
c0019695:	83 c4 10             	add    esp,0x10
c0019698:	85 c0                	test   eax,eax
c001969a:	74 23                	je     c00196bf <CPU::detectFeatures()+0x241>
c001969c:	57                   	push   edi
c001969d:	57                   	push   edi
c001969e:	68 97 c8 02 c0       	push   0xc002c897
c00196a3:	55                   	push   ebp
c00196a4:	e8 ef 71 fe ff       	call   c0000898 <strcmp>
c00196a9:	83 c4 10             	add    esp,0x10
c00196ac:	85 c0                	test   eax,eax
c00196ae:	75 1e                	jne    c00196ce <CPU::detectFeatures()+0x250>
c00196b0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00196ba:	e9 8a 01 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c00196bf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00196c9:	e9 7b 01 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c00196ce:	56                   	push   esi
c00196cf:	56                   	push   esi
c00196d0:	68 a4 c8 02 c0       	push   0xc002c8a4
c00196d5:	55                   	push   ebp
c00196d6:	e8 bd 71 fe ff       	call   c0000898 <strcmp>
c00196db:	83 c4 10             	add    esp,0x10
c00196de:	85 c0                	test   eax,eax
c00196e0:	75 0f                	jne    c00196f1 <CPU::detectFeatures()+0x273>
c00196e2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00196ec:	e9 58 01 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c00196f1:	51                   	push   ecx
c00196f2:	51                   	push   ecx
c00196f3:	68 63 c8 02 c0       	push   0xc002c863
c00196f8:	55                   	push   ebp
c00196f9:	e8 9a 71 fe ff       	call   c0000898 <strcmp>
c00196fe:	83 c4 10             	add    esp,0x10
c0019701:	85 c0                	test   eax,eax
c0019703:	75 0f                	jne    c0019714 <CPU::detectFeatures()+0x296>
c0019705:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001970f:	e9 35 01 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c0019714:	52                   	push   edx
c0019715:	52                   	push   edx
c0019716:	68 b1 c8 02 c0       	push   0xc002c8b1
c001971b:	55                   	push   ebp
c001971c:	e8 77 71 fe ff       	call   c0000898 <strcmp>
c0019721:	83 c4 10             	add    esp,0x10
c0019724:	85 c0                	test   eax,eax
c0019726:	75 0f                	jne    c0019737 <CPU::detectFeatures()+0x2b9>
c0019728:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019732:	e9 12 01 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c0019737:	50                   	push   eax
c0019738:	50                   	push   eax
c0019739:	68 be c8 02 c0       	push   0xc002c8be
c001973e:	55                   	push   ebp
c001973f:	e8 54 71 fe ff       	call   c0000898 <strcmp>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	85 c0                	test   eax,eax
c0019749:	75 0f                	jne    c001975a <CPU::detectFeatures()+0x2dc>
c001974b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019755:	e9 ef 00 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c001975a:	50                   	push   eax
c001975b:	50                   	push   eax
c001975c:	68 cb c8 02 c0       	push   0xc002c8cb
c0019761:	55                   	push   ebp
c0019762:	e8 31 71 fe ff       	call   c0000898 <strcmp>
c0019767:	83 c4 10             	add    esp,0x10
c001976a:	85 c0                	test   eax,eax
c001976c:	75 0f                	jne    c001977d <CPU::detectFeatures()+0x2ff>
c001976e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019778:	e9 cc 00 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c001977d:	50                   	push   eax
c001977e:	50                   	push   eax
c001977f:	68 d8 c8 02 c0       	push   0xc002c8d8
c0019784:	55                   	push   ebp
c0019785:	e8 0e 71 fe ff       	call   c0000898 <strcmp>
c001978a:	83 c4 10             	add    esp,0x10
c001978d:	85 c0                	test   eax,eax
c001978f:	75 0f                	jne    c00197a0 <CPU::detectFeatures()+0x322>
c0019791:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001979b:	e9 a9 00 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c00197a0:	50                   	push   eax
c00197a1:	50                   	push   eax
c00197a2:	68 e5 c8 02 c0       	push   0xc002c8e5
c00197a7:	55                   	push   ebp
c00197a8:	e8 eb 70 fe ff       	call   c0000898 <strcmp>
c00197ad:	83 c4 10             	add    esp,0x10
c00197b0:	85 c0                	test   eax,eax
c00197b2:	75 0f                	jne    c00197c3 <CPU::detectFeatures()+0x345>
c00197b4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00197be:	e9 86 00 00 00       	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c00197c3:	50                   	push   eax
c00197c4:	50                   	push   eax
c00197c5:	68 f2 c8 02 c0       	push   0xc002c8f2
c00197ca:	55                   	push   ebp
c00197cb:	e8 c8 70 fe ff       	call   c0000898 <strcmp>
c00197d0:	83 c4 10             	add    esp,0x10
c00197d3:	85 c0                	test   eax,eax
c00197d5:	75 0c                	jne    c00197e3 <CPU::detectFeatures()+0x365>
c00197d7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00197e1:	eb 66                	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c00197e3:	50                   	push   eax
c00197e4:	50                   	push   eax
c00197e5:	68 ff c8 02 c0       	push   0xc002c8ff
c00197ea:	55                   	push   ebp
c00197eb:	e8 a8 70 fe ff       	call   c0000898 <strcmp>
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	85 c0                	test   eax,eax
c00197f5:	75 0c                	jne    c0019803 <CPU::detectFeatures()+0x385>
c00197f7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019801:	eb 46                	jmp    c0019849 <CPU::detectFeatures()+0x3cb>
c0019803:	57                   	push   edi
c0019804:	57                   	push   edi
c0019805:	68 0c c9 02 c0       	push   0xc002c90c
c001980a:	55                   	push   ebp
c001980b:	e8 88 70 fe ff       	call   c0000898 <strcmp>
c0019810:	83 c4 10             	add    esp,0x10
c0019813:	85 c0                	test   eax,eax
c0019815:	74 e0                	je     c00197f7 <CPU::detectFeatures()+0x379>
c0019817:	56                   	push   esi
c0019818:	56                   	push   esi
c0019819:	68 19 c9 02 c0       	push   0xc002c919
c001981e:	55                   	push   ebp
c001981f:	e8 74 70 fe ff       	call   c0000898 <strcmp>
c0019824:	83 c4 10             	add    esp,0x10
c0019827:	85 c0                	test   eax,eax
c0019829:	74 cc                	je     c00197f7 <CPU::detectFeatures()+0x379>
c001982b:	51                   	push   ecx
c001982c:	51                   	push   ecx
c001982d:	68 26 c9 02 c0       	push   0xc002c926
c0019832:	55                   	push   ebp
c0019833:	e8 60 70 fe ff       	call   c0000898 <strcmp>
c0019838:	83 c4 10             	add    esp,0x10
c001983b:	85 c0                	test   eax,eax
c001983d:	74 b8                	je     c00197f7 <CPU::detectFeatures()+0x379>
c001983f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019849:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001984e:	0f 86 be 00 00 00    	jbe    c0019912 <CPU::detectFeatures()+0x494>
c0019854:	83 ec 0c             	sub    esp,0xc
c0019857:	68 80 00 00 00       	push   0x80
c001985c:	e8 b7 f8 ff ff       	call   c0019118 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019861:	83 e0 01             	and    eax,0x1
c0019864:	c1 e0 06             	shl    eax,0x6
c0019867:	88 c2                	mov    dl,al
c0019869:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001986f:	83 e0 bf             	and    eax,0xffffffbf
c0019872:	09 d0                	or     eax,edx
c0019874:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001987a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019881:	e8 92 f8 ff ff       	call   c0019118 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019886:	83 e0 01             	and    eax,0x1
c0019889:	c1 e0 04             	shl    eax,0x4
c001988c:	88 c2                	mov    dl,al
c001988e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019894:	83 e0 ef             	and    eax,0xffffffef
c0019897:	09 d0                	or     eax,edx
c0019899:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001989f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00198a6:	e8 6d f8 ff ff       	call   c0019118 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00198ab:	c1 e0 07             	shl    eax,0x7
c00198ae:	88 c2                	mov    dl,al
c00198b0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00198b6:	83 e0 7f             	and    eax,0x7f
c00198b9:	09 d0                	or     eax,edx
c00198bb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00198c1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00198c8:	e8 79 f8 ff ff       	call   c0019146 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00198cd:	83 e0 01             	and    eax,0x1
c00198d0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00198d7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00198dd:	83 e0 f7             	and    eax,0xfffffff7
c00198e0:	09 d0                	or     eax,edx
c00198e2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00198e8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00198ef:	e8 52 f8 ff ff       	call   c0019146 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00198f4:	83 c4 10             	add    esp,0x10
c00198f7:	83 e0 01             	and    eax,0x1
c00198fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019901:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019907:	83 e0 fb             	and    eax,0xfffffffb
c001990a:	09 d0                	or     eax,edx
c001990c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019912:	83 ec 0c             	sub    esp,0xc
c0019915:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019919:	50                   	push   eax
c001991a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001991e:	50                   	push   eax
c001991f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019923:	56                   	push   esi
c0019924:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019928:	50                   	push   eax
c0019929:	6a 01                	push   0x1
c001992b:	e8 08 f7 ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019930:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019934:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001993a:	88 ca                	mov    dl,cl
c001993c:	83 e0 f0             	and    eax,0xfffffff0
c001993f:	83 e2 0f             	and    edx,0xf
c0019942:	09 d0                	or     eax,edx
c0019944:	88 ca                	mov    dl,cl
c0019946:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001994c:	c0 ea 04             	shr    dl,0x4
c001994f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019953:	0f b6 c2             	movzx  eax,dl
c0019956:	83 c4 20             	add    esp,0x20
c0019959:	c1 e0 06             	shl    eax,0x6
c001995c:	89 c7                	mov    edi,eax
c001995e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019964:	66 25 3f c0          	and    ax,0xc03f
c0019968:	09 f8                	or     eax,edi
c001996a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019971:	89 c8                	mov    eax,ecx
c0019973:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001997a:	c1 e8 08             	shr    eax,0x8
c001997d:	83 e5 3f             	and    ebp,0x3f
c0019980:	83 e0 0f             	and    eax,0xf
c0019983:	89 c7                	mov    edi,eax
c0019985:	c1 e7 06             	shl    edi,0x6
c0019988:	09 ef                	or     edi,ebp
c001998a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019991:	89 fa                	mov    edx,edi
c0019993:	83 e5 c0             	and    ebp,0xffffffc0
c0019996:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001999c:	88 c2                	mov    dl,al
c001999e:	c0 ea 02             	shr    dl,0x2
c00199a1:	89 d7                	mov    edi,edx
c00199a3:	09 ef                	or     edi,ebp
c00199a5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00199ab:	89 fa                	mov    edx,edi
c00199ad:	83 e5 cf             	and    ebp,0xffffffcf
c00199b0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00199b6:	89 cf                	mov    edi,ecx
c00199b8:	c1 ef 0c             	shr    edi,0xc
c00199bb:	83 e7 03             	and    edi,0x3
c00199be:	c1 e7 04             	shl    edi,0x4
c00199c1:	09 ef                	or     edi,ebp
c00199c3:	3c 06                	cmp    al,0x6
c00199c5:	89 fa                	mov    edx,edi
c00199c7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00199cd:	74 04                	je     c00199d3 <CPU::detectFeatures()+0x555>
c00199cf:	3c 0f                	cmp    al,0xf
c00199d1:	75 5c                	jne    c0019a2f <CPU::detectFeatures()+0x5b1>
c00199d3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00199d7:	89 cf                	mov    edi,ecx
c00199d9:	c1 ef 10             	shr    edi,0x10
c00199dc:	c1 e7 04             	shl    edi,0x4
c00199df:	09 fa                	or     edx,edi
c00199e1:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00199e7:	0f b6 d2             	movzx  edx,dl
c00199ea:	66 81 e7 3f c0       	and    di,0xc03f
c00199ef:	c1 e2 06             	shl    edx,0x6
c00199f2:	09 fa                	or     edx,edi
c00199f4:	3c 0f                	cmp    al,0xf
c00199f6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00199fd:	75 30                	jne    c0019a2f <CPU::detectFeatures()+0x5b1>
c00199ff:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019a05:	c1 e9 14             	shr    ecx,0x14
c0019a08:	83 e0 3f             	and    eax,0x3f
c0019a0b:	83 c1 0f             	add    ecx,0xf
c0019a0e:	88 ca                	mov    dl,cl
c0019a10:	c0 e9 02             	shr    cl,0x2
c0019a13:	c1 e2 06             	shl    edx,0x6
c0019a16:	09 d0                	or     eax,edx
c0019a18:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019a1e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019a24:	83 e0 c0             	and    eax,0xffffffc0
c0019a27:	09 c1                	or     ecx,eax
c0019a29:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019a2f:	83 ec 0c             	sub    esp,0xc
c0019a32:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019a3d:	50                   	push   eax
c0019a3e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019a42:	55                   	push   ebp
c0019a43:	56                   	push   esi
c0019a44:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019a48:	57                   	push   edi
c0019a49:	68 00 00 00 80       	push   0x80000000
c0019a4e:	e8 e5 f5 ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a53:	83 c4 20             	add    esp,0x20
c0019a56:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019a5e:	76 22                	jbe    c0019a82 <CPU::detectFeatures()+0x604>
c0019a60:	83 ec 0c             	sub    esp,0xc
c0019a63:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019a67:	50                   	push   eax
c0019a68:	55                   	push   ebp
c0019a69:	56                   	push   esi
c0019a6a:	57                   	push   edi
c0019a6b:	68 01 00 00 80       	push   0x80000001
c0019a70:	e8 c3 f5 ff ff       	call   c0019038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a75:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019a7f:	83 c4 20             	add    esp,0x20
c0019a82:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019a88:	83 f8 01             	cmp    eax,0x1
c0019a8b:	75 6f                	jne    c0019afc <CPU::detectFeatures()+0x67e>
c0019a8d:	51                   	push   ecx
c0019a8e:	51                   	push   ecx
c0019a8f:	68 32 c9 02 c0       	push   0xc002c932
c0019a94:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a98:	56                   	push   esi
c0019a99:	e8 6e 6d fe ff       	call   c000080c <strcpy>
c0019a9e:	5f                   	pop    edi
c0019a9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019aa5:	5d                   	pop    ebp
c0019aa6:	66 c1 e8 06          	shr    ax,0x6
c0019aaa:	0f b6 c0             	movzx  eax,al
c0019aad:	50                   	push   eax
c0019aae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ab4:	c1 e8 0e             	shr    eax,0xe
c0019ab7:	0f b6 c0             	movzx  eax,al
c0019aba:	50                   	push   eax
c0019abb:	e8 22 f2 ff ff       	call   c0018ce2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019ac0:	5a                   	pop    edx
c0019ac1:	59                   	pop    ecx
c0019ac2:	50                   	push   eax
c0019ac3:	56                   	push   esi
c0019ac4:	e8 83 6e fe ff       	call   c000094c <strcat>
c0019ac9:	5f                   	pop    edi
c0019aca:	5d                   	pop    ebp
c0019acb:	56                   	push   esi
c0019acc:	53                   	push   ebx
c0019acd:	e8 ae a9 ff ff       	call   c0014480 <Device::setName(char const*)>
c0019ad2:	58                   	pop    eax
c0019ad3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019ad9:	5a                   	pop    edx
c0019ada:	68 39 c9 02 c0       	push   0xc002c939
c0019adf:	50                   	push   eax
c0019ae0:	e8 b3 6d fe ff       	call   c0000898 <strcmp>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	85 c0                	test   eax,eax
c0019aea:	0f 85 71 03 00 00    	jne    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019af0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019af7:	e9 65 03 00 00       	jmp    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019afc:	83 f8 02             	cmp    eax,0x2
c0019aff:	0f 85 b5 00 00 00    	jne    c0019bba <CPU::detectFeatures()+0x73c>
c0019b05:	57                   	push   edi
c0019b06:	57                   	push   edi
c0019b07:	68 4b c9 02 c0       	push   0xc002c94b
c0019b0c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019b10:	56                   	push   esi
c0019b11:	e8 f6 6c fe ff       	call   c000080c <strcpy>
c0019b16:	5d                   	pop    ebp
c0019b17:	58                   	pop    eax
c0019b18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b1e:	66 c1 e8 06          	shr    ax,0x6
c0019b22:	0f b6 c0             	movzx  eax,al
c0019b25:	50                   	push   eax
c0019b26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b2c:	c1 e8 0e             	shr    eax,0xe
c0019b2f:	0f b6 c0             	movzx  eax,al
c0019b32:	50                   	push   eax
c0019b33:	e8 16 f0 ff ff       	call   c0018b4e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019b38:	5a                   	pop    edx
c0019b39:	59                   	pop    ecx
c0019b3a:	50                   	push   eax
c0019b3b:	56                   	push   esi
c0019b3c:	e8 0b 6e fe ff       	call   c000094c <strcat>
c0019b41:	5f                   	pop    edi
c0019b42:	5d                   	pop    ebp
c0019b43:	56                   	push   esi
c0019b44:	53                   	push   ebx
c0019b45:	e8 36 a9 ff ff       	call   c0014480 <Device::setName(char const*)>
c0019b4a:	58                   	pop    eax
c0019b4b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019b51:	5a                   	pop    edx
c0019b52:	68 50 c9 02 c0       	push   0xc002c950
c0019b57:	50                   	push   eax
c0019b58:	e8 3b 6d fe ff       	call   c0000898 <strcmp>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	85 c0                	test   eax,eax
c0019b62:	75 20                	jne    c0019b84 <CPU::detectFeatures()+0x706>
c0019b64:	8b 15 68 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f568
c0019b6a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019b70:	a8 01                	test   al,0x1
c0019b72:	74 10                	je     c0019b84 <CPU::detectFeatures()+0x706>
c0019b74:	83 e0 fe             	and    eax,0xfffffffe
c0019b77:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019b7d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019b84:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b8a:	c1 e8 0e             	shr    eax,0xe
c0019b8d:	3c 05                	cmp    al,0x5
c0019b8f:	0f 85 cc 02 00 00    	jne    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019b95:	56                   	push   esi
c0019b96:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019b9c:	83 e0 0f             	and    eax,0xf
c0019b9f:	50                   	push   eax
c0019ba0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ba6:	66 c1 e8 06          	shr    ax,0x6
c0019baa:	0f b6 c0             	movzx  eax,al
c0019bad:	50                   	push   eax
c0019bae:	6a 05                	push   0x5
c0019bb0:	e8 0f f4 ff ff       	call   c0018fc4 <CPU::AMD_K6_writeback(int, int, int)>
c0019bb5:	e9 1f 02 00 00       	jmp    c0019dd9 <CPU::detectFeatures()+0x95b>
c0019bba:	8d 50 fd             	lea    edx,[eax-0x3]
c0019bbd:	83 fa 01             	cmp    edx,0x1
c0019bc0:	76 09                	jbe    c0019bcb <CPU::detectFeatures()+0x74d>
c0019bc2:	83 f8 06             	cmp    eax,0x6
c0019bc5:	0f 85 91 01 00 00    	jne    c0019d5c <CPU::detectFeatures()+0x8de>
c0019bcb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019bd1:	c1 ea 0e             	shr    edx,0xe
c0019bd4:	80 fa 05             	cmp    dl,0x5
c0019bd7:	75 7b                	jne    c0019c54 <CPU::detectFeatures()+0x7d6>
c0019bd9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019bdf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019be4:	66 81 fa 00 01       	cmp    dx,0x100
c0019be9:	75 0c                	jne    c0019bf7 <CPU::detectFeatures()+0x779>
c0019beb:	51                   	push   ecx
c0019bec:	51                   	push   ecx
c0019bed:	68 57 c9 02 c0       	push   0xc002c957
c0019bf2:	e9 dc 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019bf7:	66 81 fa 00 02       	cmp    dx,0x200
c0019bfc:	75 0c                	jne    c0019c0a <CPU::detectFeatures()+0x78c>
c0019bfe:	52                   	push   edx
c0019bff:	52                   	push   edx
c0019c00:	68 6a c9 02 c0       	push   0xc002c96a
c0019c05:	e9 c9 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c0a:	66 81 fa 40 02       	cmp    dx,0x240
c0019c0f:	75 0c                	jne    c0019c1d <CPU::detectFeatures()+0x79f>
c0019c11:	50                   	push   eax
c0019c12:	50                   	push   eax
c0019c13:	68 7c c9 02 c0       	push   0xc002c97c
c0019c18:	e9 b6 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c1d:	83 f8 06             	cmp    eax,0x6
c0019c20:	75 0c                	jne    c0019c2e <CPU::detectFeatures()+0x7b0>
c0019c22:	50                   	push   eax
c0019c23:	50                   	push   eax
c0019c24:	68 8e c9 02 c0       	push   0xc002c98e
c0019c29:	e9 a5 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c2e:	83 f8 04             	cmp    eax,0x4
c0019c31:	75 0c                	jne    c0019c3f <CPU::detectFeatures()+0x7c1>
c0019c33:	50                   	push   eax
c0019c34:	50                   	push   eax
c0019c35:	68 9a c9 02 c0       	push   0xc002c99a
c0019c3a:	e9 94 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c3f:	83 f8 03             	cmp    eax,0x3
c0019c42:	0f 85 19 02 00 00    	jne    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019c48:	50                   	push   eax
c0019c49:	50                   	push   eax
c0019c4a:	68 a2 c9 02 c0       	push   0xc002c9a2
c0019c4f:	e9 7f 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c54:	80 fa 06             	cmp    dl,0x6
c0019c57:	0f 85 db 00 00 00    	jne    c0019d38 <CPU::detectFeatures()+0x8ba>
c0019c5d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019c63:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019c68:	66 81 fa 80 01       	cmp    dx,0x180
c0019c6d:	75 0c                	jne    c0019c7b <CPU::detectFeatures()+0x7fd>
c0019c6f:	50                   	push   eax
c0019c70:	50                   	push   eax
c0019c71:	68 ad c9 02 c0       	push   0xc002c9ad
c0019c76:	e9 58 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c7b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019c81:	66 f7 c1 80 ff       	test   cx,0xff80
c0019c86:	75 0c                	jne    c0019c94 <CPU::detectFeatures()+0x816>
c0019c88:	50                   	push   eax
c0019c89:	50                   	push   eax
c0019c8a:	68 bd c9 02 c0       	push   0xc002c9bd
c0019c8f:	e9 3f 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019c94:	66 81 fa 40 02       	cmp    dx,0x240
c0019c99:	75 0c                	jne    c0019ca7 <CPU::detectFeatures()+0x829>
c0019c9b:	55                   	push   ebp
c0019c9c:	55                   	push   ebp
c0019c9d:	68 c4 c9 02 c0       	push   0xc002c9c4
c0019ca2:	e9 2c 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019ca7:	66 81 fa 80 02       	cmp    dx,0x280
c0019cac:	75 0c                	jne    c0019cba <CPU::detectFeatures()+0x83c>
c0019cae:	57                   	push   edi
c0019caf:	57                   	push   edi
c0019cb0:	68 cd c9 02 c0       	push   0xc002c9cd
c0019cb5:	e9 19 01 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019cba:	66 81 fa 40 03       	cmp    dx,0x340
c0019cbf:	74 ed                	je     c0019cae <CPU::detectFeatures()+0x830>
c0019cc1:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019cc6:	75 0c                	jne    c0019cd4 <CPU::detectFeatures()+0x856>
c0019cc8:	56                   	push   esi
c0019cc9:	56                   	push   esi
c0019cca:	68 d4 c9 02 c0       	push   0xc002c9d4
c0019ccf:	e9 ff 00 00 00       	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019cd4:	83 f8 06             	cmp    eax,0x6
c0019cd7:	0f 84 45 ff ff ff    	je     c0019c22 <CPU::detectFeatures()+0x7a4>
c0019cdd:	83 f8 04             	cmp    eax,0x4
c0019ce0:	0f 84 4d ff ff ff    	je     c0019c33 <CPU::detectFeatures()+0x7b5>
c0019ce6:	83 f8 03             	cmp    eax,0x3
c0019ce9:	0f 85 72 01 00 00    	jne    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019cef:	51                   	push   ecx
c0019cf0:	51                   	push   ecx
c0019cf1:	68 dd c9 02 c0       	push   0xc002c9dd
c0019cf6:	53                   	push   ebx
c0019cf7:	e8 84 a7 ff ff       	call   c0014480 <Device::setName(char const*)>
c0019cfc:	b1 c1                	mov    cl,0xc1
c0019cfe:	88 c8                	mov    al,cl
c0019d00:	e6 22                	out    0x22,al
c0019d02:	e4 23                	in     al,0x23
c0019d04:	88 c2                	mov    dl,al
c0019d06:	88 c8                	mov    al,cl
c0019d08:	e6 22                	out    0x22,al
c0019d0a:	88 d0                	mov    al,dl
c0019d0c:	83 c8 10             	or     eax,0x10
c0019d0f:	e6 23                	out    0x23,al
c0019d11:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019d18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019d1b:	89 d0                	mov    eax,edx
c0019d1d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019d23:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019d27:	40                   	inc    eax
c0019d28:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019d2e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019d33:	e9 a1 00 00 00       	jmp    c0019dd9 <CPU::detectFeatures()+0x95b>
c0019d38:	83 f8 06             	cmp    eax,0x6
c0019d3b:	0f 84 e1 fe ff ff    	je     c0019c22 <CPU::detectFeatures()+0x7a4>
c0019d41:	83 f8 04             	cmp    eax,0x4
c0019d44:	0f 84 e9 fe ff ff    	je     c0019c33 <CPU::detectFeatures()+0x7b5>
c0019d4a:	83 f8 03             	cmp    eax,0x3
c0019d4d:	0f 85 0e 01 00 00    	jne    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019d53:	52                   	push   edx
c0019d54:	52                   	push   edx
c0019d55:	68 e8 c9 02 c0       	push   0xc002c9e8
c0019d5a:	eb 77                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019d5c:	83 f8 07             	cmp    eax,0x7
c0019d5f:	75 09                	jne    c0019d6a <CPU::detectFeatures()+0x8ec>
c0019d61:	50                   	push   eax
c0019d62:	50                   	push   eax
c0019d63:	68 f2 c9 02 c0       	push   0xc002c9f2
c0019d68:	eb 69                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019d6a:	83 f8 0a             	cmp    eax,0xa
c0019d6d:	75 09                	jne    c0019d78 <CPU::detectFeatures()+0x8fa>
c0019d6f:	50                   	push   eax
c0019d70:	50                   	push   eax
c0019d71:	68 fd c9 02 c0       	push   0xc002c9fd
c0019d76:	eb 5b                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019d78:	83 f8 0b             	cmp    eax,0xb
c0019d7b:	75 09                	jne    c0019d86 <CPU::detectFeatures()+0x908>
c0019d7d:	50                   	push   eax
c0019d7e:	50                   	push   eax
c0019d7f:	68 05 ca 02 c0       	push   0xc002ca05
c0019d84:	eb 4d                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019d86:	83 f8 08             	cmp    eax,0x8
c0019d89:	75 09                	jne    c0019d94 <CPU::detectFeatures()+0x916>
c0019d8b:	50                   	push   eax
c0019d8c:	50                   	push   eax
c0019d8d:	68 0e ca 02 c0       	push   0xc002ca0e
c0019d92:	eb 3f                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019d94:	83 f8 09             	cmp    eax,0x9
c0019d97:	75 09                	jne    c0019da2 <CPU::detectFeatures()+0x924>
c0019d99:	50                   	push   eax
c0019d9a:	50                   	push   eax
c0019d9b:	68 16 ca 02 c0       	push   0xc002ca16
c0019da0:	eb 31                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019da2:	83 f8 05             	cmp    eax,0x5
c0019da5:	75 09                	jne    c0019db0 <CPU::detectFeatures()+0x932>
c0019da7:	50                   	push   eax
c0019da8:	50                   	push   eax
c0019da9:	68 1e ca 02 c0       	push   0xc002ca1e
c0019dae:	eb 23                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019db0:	83 f8 0c             	cmp    eax,0xc
c0019db3:	75 09                	jne    c0019dbe <CPU::detectFeatures()+0x940>
c0019db5:	55                   	push   ebp
c0019db6:	55                   	push   ebp
c0019db7:	68 2c ca 02 c0       	push   0xc002ca2c
c0019dbc:	eb 15                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019dbe:	83 f8 0d             	cmp    eax,0xd
c0019dc1:	75 09                	jne    c0019dcc <CPU::detectFeatures()+0x94e>
c0019dc3:	57                   	push   edi
c0019dc4:	57                   	push   edi
c0019dc5:	68 37 ca 02 c0       	push   0xc002ca37
c0019dca:	eb 07                	jmp    c0019dd3 <CPU::detectFeatures()+0x955>
c0019dcc:	56                   	push   esi
c0019dcd:	56                   	push   esi
c0019dce:	68 4b ca 02 c0       	push   0xc002ca4b
c0019dd3:	53                   	push   ebx
c0019dd4:	e8 a7 a6 ff ff       	call   c0014480 <Device::setName(char const*)>
c0019dd9:	83 c4 10             	add    esp,0x10
c0019ddc:	e9 80 00 00 00       	jmp    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019de1:	51                   	push   ecx
c0019de2:	51                   	push   ecx
c0019de3:	68 97 c8 02 c0       	push   0xc002c897
c0019de8:	55                   	push   ebp
c0019de9:	e8 1e 6a fe ff       	call   c000080c <strcpy>
c0019dee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019df8:	e8 b1 64 fe ff       	call   c00002ae <is486>
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	85 c0                	test   eax,eax
c0019e02:	74 2b                	je     c0019e2f <CPU::detectFeatures()+0x9b1>
c0019e04:	52                   	push   edx
c0019e05:	52                   	push   edx
c0019e06:	68 57 ca 02 c0       	push   0xc002ca57
c0019e0b:	53                   	push   ebx
c0019e0c:	e8 6f a6 ff ff       	call   c0014480 <Device::setName(char const*)>
c0019e11:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019e18:	0f 20 c0             	mov    eax,cr0
c0019e1b:	83 e0 14             	and    eax,0x14
c0019e1e:	83 c4 10             	add    esp,0x10
c0019e21:	83 f8 04             	cmp    eax,0x4
c0019e24:	75 1f                	jne    c0019e45 <CPU::detectFeatures()+0x9c7>
c0019e26:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019e2d:	eb 32                	jmp    c0019e61 <CPU::detectFeatures()+0x9e3>
c0019e2f:	50                   	push   eax
c0019e30:	50                   	push   eax
c0019e31:	68 62 ca 02 c0       	push   0xc002ca62
c0019e36:	53                   	push   ebx
c0019e37:	e8 44 a6 ff ff       	call   c0014480 <Device::setName(char const*)>
c0019e3c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019e43:	eb d3                	jmp    c0019e18 <CPU::detectFeatures()+0x99a>
c0019e45:	e8 3f 64 fe ff       	call   c0000289 <hasLegacyFPU>
c0019e4a:	83 e0 01             	and    eax,0x1
c0019e4d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019e50:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019e56:	83 e0 fd             	and    eax,0xfffffffd
c0019e59:	09 d0                	or     eax,edx
c0019e5b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019e61:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019e68:	83 c4 4c             	add    esp,0x4c
c0019e6b:	5b                   	pop    ebx
c0019e6c:	5e                   	pop    esi
c0019e6d:	5f                   	pop    edi
c0019e6e:	5d                   	pop    ebp
c0019e6f:	c3                   	ret    

c0019e70 <CPU::setupSMEP()>:
c0019e70:	0f 20 e0             	mov    eax,cr4
c0019e73:	0d 00 00 10 00       	or     eax,0x100000
c0019e78:	0f 22 e0             	mov    cr4,eax
c0019e7b:	c3                   	ret    

c0019e7c <CPU::setupUMIP()>:
c0019e7c:	0f 20 e0             	mov    eax,cr4
c0019e7f:	80 cc 08             	or     ah,0x8
c0019e82:	0f 22 e0             	mov    cr4,eax
c0019e85:	c3                   	ret    

c0019e86 <CPU::setupTSC()>:
c0019e86:	0f 20 e0             	mov    eax,cr4
c0019e89:	83 c8 04             	or     eax,0x4
c0019e8c:	0f 22 e0             	mov    cr4,eax
c0019e8f:	c3                   	ret    

c0019e90 <CPU::setupLargePages()>:
c0019e90:	0f 20 e0             	mov    eax,cr4
c0019e93:	83 c8 10             	or     eax,0x10
c0019e96:	0f 22 e0             	mov    cr4,eax
c0019e99:	c3                   	ret    

c0019e9a <CPU::setupPAT()>:
c0019e9a:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0019e9f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ea6:	74 2c                	je     c0019ed4 <CPU::setupPAT()+0x3a>
c0019ea8:	53                   	push   ebx
c0019ea9:	83 ec 10             	sub    esp,0x10
c0019eac:	68 77 02 00 00       	push   0x277
c0019eb1:	50                   	push   eax
c0019eb2:	e8 7b 4f ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019eb7:	83 e2 f8             	and    edx,0xfffffff8
c0019eba:	83 ca 01             	or     edx,0x1
c0019ebd:	52                   	push   edx
c0019ebe:	50                   	push   eax
c0019ebf:	68 77 02 00 00       	push   0x277
c0019ec4:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c0019eca:	e8 8f 4f ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019ecf:	83 c4 28             	add    esp,0x28
c0019ed2:	5b                   	pop    ebx
c0019ed3:	c3                   	ret    
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <CPU::setupMTRR()>:
c0019ed6:	c3                   	ret    
c0019ed7:	90                   	nop

c0019ed8 <CPU::setupGlobalPages()>:
c0019ed8:	0f 20 e0             	mov    eax,cr4
c0019edb:	0c 80                	or     al,0x80
c0019edd:	0f 22 e0             	mov    cr4,eax
c0019ee0:	c3                   	ret    
c0019ee1:	90                   	nop

c0019ee2 <CPU::allowUsermodeDataAccess()>:
c0019ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ee6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019eed:	74 03                	je     c0019ef2 <CPU::allowUsermodeDataAccess()+0x10>
c0019eef:	0f 01 cb             	stac   
c0019ef2:	c3                   	ret    
c0019ef3:	90                   	nop

c0019ef4 <CPU::prohibitUsermodeDataAccess()>:
c0019ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ef8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019eff:	74 03                	je     c0019f04 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019f01:	0f 01 ca             	clac   
c0019f04:	c3                   	ret    
c0019f05:	90                   	nop

c0019f06 <CPU::setupSMAP()>:
c0019f06:	0f 20 e0             	mov    eax,cr4
c0019f09:	0d 00 00 20 00       	or     eax,0x200000
c0019f0e:	0f 22 e0             	mov    cr4,eax
c0019f11:	eb e1                	jmp    c0019ef4 <CPU::prohibitUsermodeDataAccess()>
c0019f13:	90                   	nop

c0019f14 <CPU::setupFeatures()>:
c0019f14:	83 ec 0c             	sub    esp,0xc
c0019f17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f1b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019f22:	74 07                	je     c0019f2b <CPU::setupFeatures()+0x17>
c0019f24:	52                   	push   edx
c0019f25:	e8 46 ff ff ff       	call   c0019e70 <CPU::setupSMEP()>
c0019f2a:	58                   	pop    eax
c0019f2b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019f32:	74 07                	je     c0019f3b <CPU::setupFeatures()+0x27>
c0019f34:	52                   	push   edx
c0019f35:	e8 cc ff ff ff       	call   c0019f06 <CPU::setupSMAP()>
c0019f3a:	58                   	pop    eax
c0019f3b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019f42:	74 07                	je     c0019f4b <CPU::setupFeatures()+0x37>
c0019f44:	52                   	push   edx
c0019f45:	e8 32 ff ff ff       	call   c0019e7c <CPU::setupUMIP()>
c0019f4a:	58                   	pop    eax
c0019f4b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019f52:	74 07                	je     c0019f5b <CPU::setupFeatures()+0x47>
c0019f54:	52                   	push   edx
c0019f55:	e8 2c ff ff ff       	call   c0019e86 <CPU::setupTSC()>
c0019f5a:	58                   	pop    eax
c0019f5b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019f62:	74 07                	je     c0019f6b <CPU::setupFeatures()+0x57>
c0019f64:	52                   	push   edx
c0019f65:	e8 26 ff ff ff       	call   c0019e90 <CPU::setupLargePages()>
c0019f6a:	59                   	pop    ecx
c0019f6b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019f72:	74 07                	je     c0019f7b <CPU::setupFeatures()+0x67>
c0019f74:	52                   	push   edx
c0019f75:	e8 5e ff ff ff       	call   c0019ed8 <CPU::setupGlobalPages()>
c0019f7a:	58                   	pop    eax
c0019f7b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019f82:	74 0c                	je     c0019f90 <CPU::setupFeatures()+0x7c>
c0019f84:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019f88:	83 c4 0c             	add    esp,0xc
c0019f8b:	e9 0a ff ff ff       	jmp    c0019e9a <CPU::setupPAT()>
c0019f90:	83 c4 0c             	add    esp,0xc
c0019f93:	c3                   	ret    

c0019f94 <CPU::open(int, int, void*)>:
c0019f94:	57                   	push   edi
c0019f95:	56                   	push   esi
c0019f96:	53                   	push   ebx
c0019f97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f9f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019fa5:	83 ec 0c             	sub    esp,0xc
c0019fa8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019fae:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019fb4:	50                   	push   eax
c0019fb5:	e8 64 51 ff ff       	call   c000f11e <GDT::setup()>
c0019fba:	83 c4 0c             	add    esp,0xc
c0019fbd:	6a 00                	push   0x0
c0019fbf:	68 ef be ad de       	push   0xdeadbeef
c0019fc4:	57                   	push   edi
c0019fc5:	e8 d8 73 ff ff       	call   c00113a2 <TSS::setup(unsigned long, unsigned long)>
c0019fca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fcd:	e8 b0 73 ff ff       	call   c0011382 <TSS::flush()>
c0019fd2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019fd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fdb:	e8 a2 53 ff ff       	call   c000f382 <IDT::setup()>
c0019fe0:	b8 00 04 00 00       	mov    eax,0x400
c0019fe5:	0f 23 f8             	mov    db7,eax
c0019fe8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ff2:	e8 01 5f ff ff       	call   c000fef8 <Phys::allocatePage()>
c0019ff7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ffd:	89 30                	mov    DWORD PTR [eax],esi
c0019fff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a005:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a008:	58                   	pop    eax
c001a009:	5a                   	pop    edx
c001a00a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a010:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a014:	e8 29 85 ff ff       	call   c0012542 <VAS::setCPUSpecific(unsigned long)>
c001a019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a01c:	e8 5d f4 ff ff       	call   c001947e <CPU::detectFeatures()>
c001a021:	e8 8c b8 ff ff       	call   c00158b2 <setupInterruptController()>
c001a026:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001a02c:	a1 80 f5 02 c0       	mov    eax,ds:0xc002f580
c001a031:	83 e0 10             	and    eax,0x10
c001a034:	83 f8 01             	cmp    eax,0x1
c001a037:	19 c0                	sbb    eax,eax
c001a039:	83 e0 46             	and    eax,0x46
c001a03c:	83 c0 1e             	add    eax,0x1e
c001a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a042:	e8 c2 ce ff ff       	call   c0016f09 <setupTimer(int)>
c001a047:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001a04d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a050:	e8 bf fe ff ff       	call   c0019f14 <CPU::setupFeatures()>
c001a055:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a058:	e8 a5 f1 ff ff       	call   c0019202 <CPU::displayFeatures()>
c001a05d:	83 c4 10             	add    esp,0x10
c001a060:	31 c0                	xor    eax,eax
c001a062:	5b                   	pop    ebx
c001a063:	5e                   	pop    esi
c001a064:	5f                   	pop    edi
c001a065:	c3                   	ret    

c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001a066:	57                   	push   edi
c001a067:	56                   	push   esi
c001a068:	53                   	push   ebx
c001a069:	51                   	push   ecx
c001a06a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a06e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001a071:	0f 02 c0             	lar    eax,ax
c001a074:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001a077:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a07b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001a07e:	88 ca                	mov    dl,cl
c001a080:	c0 ea 06             	shr    dl,0x6
c001a083:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001a087:	89 ca                	mov    edx,ecx
c001a089:	66 c1 ea 03          	shr    dx,0x3
c001a08d:	83 e2 07             	and    edx,0x7
c001a090:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001a095:	88 17                	mov    BYTE PTR [edi],dl
c001a097:	0f 84 a6 01 00 00    	je     c001a243 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001a09d:	83 e1 07             	and    ecx,0x7
c001a0a0:	80 f9 04             	cmp    cl,0x4
c001a0a3:	0f 84 98 00 00 00    	je     c001a141 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001a0a9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0ae:	0f 95 c0             	setne  al
c001a0b1:	80 f9 05             	cmp    cl,0x5
c001a0b4:	0f 95 c2             	setne  dl
c001a0b7:	08 c2                	or     dl,al
c001a0b9:	74 79                	je     c001a134 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001a0bb:	84 c9                	test   cl,cl
c001a0bd:	75 05                	jne    c001a0c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001a0bf:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0c2:	eb 3c                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0c4:	80 f9 01             	cmp    cl,0x1
c001a0c7:	75 05                	jne    c001a0ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a0c9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0cc:	eb 32                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0ce:	80 f9 02             	cmp    cl,0x2
c001a0d1:	75 05                	jne    c001a0d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a0d3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0d6:	eb 28                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0d8:	31 c0                	xor    eax,eax
c001a0da:	80 f9 03             	cmp    cl,0x3
c001a0dd:	75 05                	jne    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a0df:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0e2:	eb 1c                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0e4:	80 f9 05             	cmp    cl,0x5
c001a0e7:	75 05                	jne    c001a0ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a0e9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0ec:	eb 12                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0ee:	80 f9 06             	cmp    cl,0x6
c001a0f1:	75 05                	jne    c001a0f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a0f3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0f6:	eb 08                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0f8:	80 f9 07             	cmp    cl,0x7
c001a0fb:	75 03                	jne    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0fd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a100:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a105:	75 10                	jne    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a107:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a10b:	b9 03 00 00 00       	mov    ecx,0x3
c001a110:	01 d0                	add    eax,edx
c001a112:	e9 37 01 00 00       	jmp    c001a24e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a117:	b9 02 00 00 00       	mov    ecx,0x2
c001a11c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a121:	0f 85 27 01 00 00    	jne    c001a24e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a127:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a12a:	b9 06 00 00 00       	mov    ecx,0x6
c001a12f:	e9 1a 01 00 00       	jmp    c001a24e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a134:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a137:	b9 06 00 00 00       	mov    ecx,0x6
c001a13c:	e9 0f 01 00 00       	jmp    c001a250 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a141:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a144:	88 ca                	mov    dl,cl
c001a146:	c0 ea 06             	shr    dl,0x6
c001a149:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a14d:	89 ca                	mov    edx,ecx
c001a14f:	66 c1 ea 03          	shr    dx,0x3
c001a153:	83 e2 07             	and    edx,0x7
c001a156:	80 e1 07             	and    cl,0x7
c001a159:	75 05                	jne    c001a160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a15b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a15e:	eb 4c                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a160:	80 f9 01             	cmp    cl,0x1
c001a163:	75 05                	jne    c001a16a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a165:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a168:	eb 42                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a16a:	80 f9 02             	cmp    cl,0x2
c001a16d:	75 05                	jne    c001a174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a16f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a172:	eb 38                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a174:	80 f9 03             	cmp    cl,0x3
c001a177:	75 05                	jne    c001a17e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a179:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a17c:	eb 2e                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a17e:	80 f9 04             	cmp    cl,0x4
c001a181:	75 12                	jne    c001a195 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a183:	f6 c4 60             	test   ah,0x60
c001a186:	75 08                	jne    c001a190 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a188:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a18b:	8d 78 14             	lea    edi,[eax+0x14]
c001a18e:	eb 1c                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a190:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a193:	eb 17                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a195:	80 f9 05             	cmp    cl,0x5
c001a198:	75 05                	jne    c001a19f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a19a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a19d:	eb 0d                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a19f:	80 f9 06             	cmp    cl,0x6
c001a1a2:	75 05                	jne    c001a1a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a1a4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a1a7:	eb 03                	jmp    c001a1ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a1a9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a1ac:	84 d2                	test   dl,dl
c001a1ae:	75 05                	jne    c001a1b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a1b0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a1b3:	eb 3c                	jmp    c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1b5:	80 fa 01             	cmp    dl,0x1
c001a1b8:	75 05                	jne    c001a1bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a1ba:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a1bd:	eb 32                	jmp    c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1bf:	80 fa 02             	cmp    dl,0x2
c001a1c2:	75 05                	jne    c001a1c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a1c4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a1c7:	eb 28                	jmp    c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1c9:	80 fa 03             	cmp    dl,0x3
c001a1cc:	75 05                	jne    c001a1d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a1ce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a1d1:	eb 1e                	jmp    c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1d3:	31 c0                	xor    eax,eax
c001a1d5:	80 fa 04             	cmp    dl,0x4
c001a1d8:	74 17                	je     c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1da:	80 fa 05             	cmp    dl,0x5
c001a1dd:	75 05                	jne    c001a1e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a1df:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a1e2:	eb 0d                	jmp    c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1e4:	80 fa 06             	cmp    dl,0x6
c001a1e7:	75 05                	jne    c001a1ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a1e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a1ec:	eb 03                	jmp    c001a1f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1ee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a1f1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a1f6:	0f 94 c2             	sete   dl
c001a1f9:	80 f9 05             	cmp    cl,0x5
c001a1fc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a200:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a205:	d3 e0                	shl    eax,cl
c001a207:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a20b:	74 0a                	je     c001a217 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a20d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a210:	b9 07 00 00 00       	mov    ecx,0x7
c001a215:	eb 37                	jmp    c001a24e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a217:	01 f8                	add    eax,edi
c001a219:	b9 03 00 00 00       	mov    ecx,0x3
c001a21e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a223:	74 2b                	je     c001a250 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a225:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a22a:	75 0d                	jne    c001a239 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a22c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a230:	01 c8                	add    eax,ecx
c001a232:	b9 04 00 00 00       	mov    ecx,0x4
c001a237:	eb 17                	jmp    c001a250 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a239:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a23c:	b9 07 00 00 00       	mov    ecx,0x7
c001a241:	eb 0d                	jmp    c001a250 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a243:	b9 02 00 00 00       	mov    ecx,0x2
c001a248:	b2 01                	mov    dl,0x1
c001a24a:	31 c0                	xor    eax,eax
c001a24c:	eb 02                	jmp    c001a250 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a24e:	31 d2                	xor    edx,edx
c001a250:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a254:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a256:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a25a:	88 11                	mov    BYTE PTR [ecx],dl
c001a25c:	5a                   	pop    edx
c001a25d:	5b                   	pop    ebx
c001a25e:	5e                   	pop    esi
c001a25f:	5f                   	pop    edi
c001a260:	c3                   	ret    

c001a261 <Krnl::smpEntry()>:
c001a261:	eb fe                	jmp    c001a261 <Krnl::smpEntry()>

c001a263 <Krnl::startCPU(int)>:
c001a263:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001a268:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a26f:	0f 84 36 01 00 00    	je     c001a3ab <Krnl::startCPU(int)+0x148>
c001a275:	53                   	push   ebx
c001a276:	83 ec 10             	sub    esp,0x10
c001a279:	fa                   	cli    
c001a27a:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001a280:	6a 1b                	push   0x1b
c001a282:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c001a288:	e8 a5 4b ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001a28d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a292:	89 c3                	mov    ebx,eax
c001a294:	58                   	pop    eax
c001a295:	5a                   	pop    edx
c001a296:	53                   	push   ebx
c001a297:	68 9c ca 02 c0       	push   0xc002ca9c
c001a29c:	e8 b0 8b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001a2a1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2af:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2b9:	c1 e0 18             	shl    eax,0x18
c001a2bc:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a2c2:	83 c4 10             	add    esp,0x10
c001a2c5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a2cb:	09 c2                	or     edx,eax
c001a2cd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a2d3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a2d9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a2df:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a2e5:	80 cd c5             	or     ch,0xc5
c001a2e8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a2ee:	f3 90                	pause  
c001a2f0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a2f2:	0f ba e1 0c          	bt     ecx,0xc
c001a2f6:	72 f6                	jb     c001a2ee <Krnl::startCPU(int)+0x8b>
c001a2f8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a2fe:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a304:	09 c1                	or     ecx,eax
c001a306:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a30c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a312:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a318:	80 cd 85             	or     ch,0x85
c001a31b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a321:	f3 90                	pause  
c001a323:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a325:	0f ba e1 0c          	bt     ecx,0xc
c001a329:	72 f6                	jb     c001a321 <Krnl::startCPU(int)+0xbe>
c001a32b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a335:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a33b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a341:	09 c1                	or     ecx,eax
c001a343:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a349:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a34f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a355:	81 c9 02 06 00 00    	or     ecx,0x602
c001a35b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a361:	f3 90                	pause  
c001a363:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a365:	0f ba e1 0c          	bt     ecx,0xc
c001a369:	72 f6                	jb     c001a361 <Krnl::startCPU(int)+0xfe>
c001a36b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a375:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a37b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a381:	09 c8                	or     eax,ecx
c001a383:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a389:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a38f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a394:	0d 02 06 00 00       	or     eax,0x602
c001a399:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a39f:	f3 90                	pause  
c001a3a1:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3a3:	0f ba e0 0c          	bt     eax,0xc
c001a3a7:	72 f6                	jb     c001a39f <Krnl::startCPU(int)+0x13c>
c001a3a9:	eb fe                	jmp    c001a3a9 <Krnl::startCPU(int)+0x146>
c001a3ab:	c3                   	ret    

c001a3ac <Krnl::startCPUs()>:
c001a3ac:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001a3b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a3b7:	88 c2                	mov    dl,al
c001a3b9:	83 e2 0a             	and    edx,0xa
c001a3bc:	80 fa 0a             	cmp    dl,0xa
c001a3bf:	75 09                	jne    c001a3ca <Krnl::startCPUs()+0x1e>
c001a3c1:	a8 01                	test   al,0x1
c001a3c3:	74 05                	je     c001a3ca <Krnl::startCPUs()+0x1e>
c001a3c5:	e9 d1 5d fe ff       	jmp    c000019b <prepareTramp>
c001a3ca:	c3                   	ret    
c001a3cb:	90                   	nop

c001a3cc <EnvVarContainer::getEnv(char const*)>:
c001a3cc:	57                   	push   edi
c001a3cd:	56                   	push   esi
c001a3ce:	53                   	push   ebx
c001a3cf:	31 db                	xor    ebx,ebx
c001a3d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3d5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a3d7:	7e 2b                	jle    c001a404 <EnvVarContainer::getEnv(char const*)+0x38>
c001a3d9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a3e0:	50                   	push   eax
c001a3e1:	50                   	push   eax
c001a3e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3e5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a3e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a3ec:	e8 a7 64 fe ff       	call   c0000898 <strcmp>
c001a3f1:	83 c4 10             	add    esp,0x10
c001a3f4:	85 c0                	test   eax,eax
c001a3f6:	75 09                	jne    c001a401 <EnvVarContainer::getEnv(char const*)+0x35>
c001a3f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3fb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a3ff:	eb 05                	jmp    c001a406 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a401:	43                   	inc    ebx
c001a402:	eb d1                	jmp    c001a3d5 <EnvVarContainer::getEnv(char const*)+0x9>
c001a404:	31 c0                	xor    eax,eax
c001a406:	5b                   	pop    ebx
c001a407:	5e                   	pop    esi
c001a408:	5f                   	pop    edi
c001a409:	c3                   	ret    

c001a40a <EnvVarContainer::setEnv(char const*, char const*)>:
c001a40a:	55                   	push   ebp
c001a40b:	57                   	push   edi
c001a40c:	56                   	push   esi
c001a40d:	53                   	push   ebx
c001a40e:	83 ec 28             	sub    esp,0x28
c001a411:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a415:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a419:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a41d:	56                   	push   esi
c001a41e:	e8 49 63 fe ff       	call   c000076c <strlen>
c001a423:	40                   	inc    eax
c001a424:	89 04 24             	mov    DWORD PTR [esp],eax
c001a427:	e8 60 54 ff ff       	call   c000f88c <malloc>
c001a42c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a42f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a433:	e8 34 63 fe ff       	call   c000076c <strlen>
c001a438:	40                   	inc    eax
c001a439:	89 04 24             	mov    DWORD PTR [esp],eax
c001a43c:	e8 4b 54 ff ff       	call   c000f88c <malloc>
c001a441:	89 34 24             	mov    DWORD PTR [esp],esi
c001a444:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a448:	e8 1f 63 fe ff       	call   c000076c <strlen>
c001a44d:	83 c4 0c             	add    esp,0xc
c001a450:	40                   	inc    eax
c001a451:	50                   	push   eax
c001a452:	6a 00                	push   0x0
c001a454:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a458:	e8 f3 62 fe ff       	call   c0000750 <memset>
c001a45d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a460:	e8 07 63 fe ff       	call   c000076c <strlen>
c001a465:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a469:	8d 48 01             	lea    ecx,[eax+0x1]
c001a46c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a46e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a471:	89 de                	mov    esi,ebx
c001a473:	e8 f4 62 fe ff       	call   c000076c <strlen>
c001a478:	83 c4 0c             	add    esp,0xc
c001a47b:	40                   	inc    eax
c001a47c:	50                   	push   eax
c001a47d:	6a 00                	push   0x0
c001a47f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a483:	e8 c8 62 fe ff       	call   c0000750 <memset>
c001a488:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a48b:	e8 dc 62 fe ff       	call   c000076c <strlen>
c001a490:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a494:	8d 48 01             	lea    ecx,[eax+0x1]
c001a497:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a499:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a49c:	40                   	inc    eax
c001a49d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a4a0:	c1 e0 03             	shl    eax,0x3
c001a4a3:	5a                   	pop    edx
c001a4a4:	59                   	pop    ecx
c001a4a5:	50                   	push   eax
c001a4a6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4a9:	e8 ca 53 ff ff       	call   c000f878 <realloc>
c001a4ae:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a4b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a4b5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a4b8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a4bc:	b9 08 00 00 00       	mov    ecx,0x8
c001a4c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4c3:	83 c4 2c             	add    esp,0x2c
c001a4c6:	5b                   	pop    ebx
c001a4c7:	5e                   	pop    esi
c001a4c8:	5f                   	pop    edi
c001a4c9:	5d                   	pop    ebp
c001a4ca:	c3                   	ret    
c001a4cb:	90                   	nop

c001a4cc <EnvVarContainer::deleteEnv(char const*)>:
c001a4cc:	c3                   	ret    
c001a4cd:	90                   	nop

c001a4ce <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a4ce:	55                   	push   ebp
c001a4cf:	57                   	push   edi
c001a4d0:	56                   	push   esi
c001a4d1:	53                   	push   ebx
c001a4d2:	81 ec 38 01 00 00    	sub    esp,0x138
c001a4d8:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a4df:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a4e6:	68 14 01 00 00       	push   0x114
c001a4eb:	e8 9c 53 ff ff       	call   c000f88c <malloc>
c001a4f0:	83 c4 0c             	add    esp,0xc
c001a4f3:	89 c5                	mov    ebp,eax
c001a4f5:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a4f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a4ff:	50                   	push   eax
c001a500:	e8 ab 8e ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001a505:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a508:	e8 75 91 ff ff       	call   c0013682 <File::exists()>
c001a50d:	83 c4 10             	add    esp,0x10
c001a510:	84 c0                	test   al,al
c001a512:	75 32                	jne    c001a546 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a514:	51                   	push   ecx
c001a515:	51                   	push   ecx
c001a516:	6a 12                	push   0x12
c001a518:	55                   	push   ebp
c001a519:	e8 f6 8e ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001a51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a521:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a524:	89 34 24             	mov    DWORD PTR [esp],esi
c001a527:	e8 40 62 fe ff       	call   c000076c <strlen>
c001a52c:	5a                   	pop    edx
c001a52d:	31 d2                	xor    edx,edx
c001a52f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a533:	51                   	push   ecx
c001a534:	56                   	push   esi
c001a535:	52                   	push   edx
c001a536:	50                   	push   eax
c001a537:	55                   	push   ebp
c001a538:	ff d7                	call   edi
c001a53a:	83 c4 14             	add    esp,0x14
c001a53d:	55                   	push   ebp
c001a53e:	e8 2f 8f ff ff       	call   c0013472 <File::close()>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	31 f6                	xor    esi,esi
c001a548:	50                   	push   eax
c001a549:	68 00 01 00 00       	push   0x100
c001a54e:	6a 00                	push   0x0
c001a550:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a554:	50                   	push   eax
c001a555:	e8 f6 61 fe ff       	call   c0000750 <memset>
c001a55a:	58                   	pop    eax
c001a55b:	5a                   	pop    edx
c001a55c:	6a 01                	push   0x1
c001a55e:	55                   	push   ebp
c001a55f:	e8 b0 8e ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001a564:	83 c4 10             	add    esp,0x10
c001a567:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a575:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a579:	51                   	push   ecx
c001a57a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a57e:	52                   	push   edx
c001a57f:	6a 00                	push   0x0
c001a581:	6a 01                	push   0x1
c001a583:	55                   	push   ebp
c001a584:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a587:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a58b:	83 c4 20             	add    esp,0x20
c001a58e:	3c 0d                	cmp    al,0xd
c001a590:	0f 84 16 01 00 00    	je     c001a6ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a596:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a59b:	0f 84 fc 00 00 00    	je     c001a69d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a5a1:	3c 0a                	cmp    al,0xa
c001a5a3:	74 13                	je     c001a5b8 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a5a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5aa:	74 0c                	je     c001a5b8 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a5ac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a5b2:	0f 8e e5 00 00 00    	jle    c001a69d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a5b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5bc:	83 ec 0c             	sub    esp,0xc
c001a5bf:	8d 78 01             	lea    edi,[eax+0x1]
c001a5c2:	57                   	push   edi
c001a5c3:	e8 c4 52 ff ff       	call   c000f88c <malloc>
c001a5c8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a5cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5d0:	8d 56 04             	lea    edx,[esi+0x4]
c001a5d3:	89 14 24             	mov    DWORD PTR [esp],edx
c001a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a5da:	e8 ad 52 ff ff       	call   c000f88c <malloc>
c001a5df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a5e3:	83 c4 0c             	add    esp,0xc
c001a5e6:	57                   	push   edi
c001a5e7:	6a 00                	push   0x0
c001a5e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5ed:	e8 5e 61 fe ff       	call   c0000750 <memset>
c001a5f2:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a5f6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a5fa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a600:	83 c4 0c             	add    esp,0xc
c001a603:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a607:	52                   	push   edx
c001a608:	6a 00                	push   0x0
c001a60a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a60e:	e8 3d 61 fe ff       	call   c0000750 <memset>
c001a613:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a617:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a61b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a61e:	e8 49 61 fe ff       	call   c000076c <strlen>
c001a623:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a627:	89 c1                	mov    ecx,eax
c001a629:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a62b:	5e                   	pop    esi
c001a62c:	5f                   	pop    edi
c001a62d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a631:	68 ad ca 02 c0       	push   0xc002caad
c001a636:	e8 16 88 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001a63b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a63d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a640:	40                   	inc    eax
c001a641:	83 c4 10             	add    esp,0x10
c001a644:	89 03                	mov    DWORD PTR [ebx],eax
c001a646:	85 d2                	test   edx,edx
c001a648:	75 0c                	jne    c001a656 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a64a:	83 ec 0c             	sub    esp,0xc
c001a64d:	6a 08                	push   0x8
c001a64f:	e8 38 52 ff ff       	call   c000f88c <malloc>
c001a654:	eb 0c                	jmp    c001a662 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a656:	c1 e0 03             	shl    eax,0x3
c001a659:	51                   	push   ecx
c001a65a:	51                   	push   ecx
c001a65b:	50                   	push   eax
c001a65c:	52                   	push   edx
c001a65d:	e8 16 52 ff ff       	call   c000f878 <realloc>
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a668:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a66a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a66d:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a671:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a675:	b9 08 00 00 00       	mov    ecx,0x8
c001a67a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a67c:	31 f6                	xor    esi,esi
c001a67e:	52                   	push   edx
c001a67f:	68 00 01 00 00       	push   0x100
c001a684:	6a 00                	push   0x0
c001a686:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a68a:	50                   	push   eax
c001a68b:	e8 c0 60 fe ff       	call   c0000750 <memset>
c001a690:	83 c4 10             	add    esp,0x10
c001a693:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a69b:	eb 0f                	jmp    c001a6ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a69d:	3c 3d                	cmp    al,0x3d
c001a69f:	74 07                	je     c001a6a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a6a1:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a6a5:	46                   	inc    esi
c001a6a6:	eb 04                	jmp    c001a6ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a6a8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a6ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6b1:	0f 85 b8 fe ff ff    	jne    c001a56f <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a6b7:	50                   	push   eax
c001a6b8:	50                   	push   eax
c001a6b9:	ff 33                	push   DWORD PTR [ebx]
c001a6bb:	68 bb ca 02 c0       	push   0xc002cabb
c001a6c0:	e8 8c 87 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001a6c5:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a6cb:	5b                   	pop    ebx
c001a6cc:	5e                   	pop    esi
c001a6cd:	5f                   	pop    edi
c001a6ce:	5d                   	pop    ebp
c001a6cf:	c3                   	ret    

c001a6d0 <EnvVarContainer::__loadSystem()>:
c001a6d0:	83 ec 10             	sub    esp,0x10
c001a6d3:	68 a0 ea 02 c0       	push   0xc002eaa0
c001a6d8:	68 e6 ca 02 c0       	push   0xc002cae6
c001a6dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e1:	e8 e8 fd ff ff       	call   c001a4ce <EnvVarContainer::loadFrom(char const*, char const*)>
c001a6e6:	83 c4 1c             	add    esp,0x1c
c001a6e9:	c3                   	ret    

c001a6ea <EnvVarContainer::__loadUser()>:
c001a6ea:	c3                   	ret    
c001a6eb:	90                   	nop

c001a6ec <EnvVarContainer::EnvVarContainer(Process*)>:
c001a6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a705:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a70c:	90                   	nop
c001a70d:	c3                   	ret    

c001a70e <EnvVarContainer::~EnvVarContainer()>:
c001a70e:	83 ec 0c             	sub    esp,0xc
c001a711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a718:	85 c0                	test   eax,eax
c001a71a:	74 1d                	je     c001a739 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a720:	8b 00                	mov    eax,DWORD PTR [eax]
c001a722:	85 c0                	test   eax,eax
c001a724:	74 13                	je     c001a739 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a72a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a72d:	83 ec 0c             	sub    esp,0xc
c001a730:	50                   	push   eax
c001a731:	e8 66 51 ff ff       	call   c000f89c <free>
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	90                   	nop
c001a73a:	83 c4 0c             	add    esp,0xc
c001a73d:	c3                   	ret    

c001a73e <Krnl::getEnv(Process*, char const*)>:
c001a73e:	53                   	push   ebx
c001a73f:	83 ec 08             	sub    esp,0x8
c001a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a746:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a74a:	39 05 d0 2a 03 c0    	cmp    DWORD PTR ds:0xc0032ad0,eax
c001a750:	74 04                	je     c001a756 <Krnl::getEnv(Process*, char const*)+0x18>
c001a752:	85 c0                	test   eax,eax
c001a754:	75 0b                	jne    c001a761 <Krnl::getEnv(Process*, char const*)+0x23>
c001a756:	a1 b4 20 03 c0       	mov    eax,ds:0xc00320b4
c001a75b:	85 c0                	test   eax,eax
c001a75d:	75 19                	jne    c001a778 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a75f:	eb 27                	jmp    c001a788 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a761:	52                   	push   edx
c001a762:	52                   	push   edx
c001a763:	53                   	push   ebx
c001a764:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a76a:	e8 5d fc ff ff       	call   c001a3cc <EnvVarContainer::getEnv(char const*)>
c001a76f:	83 c4 10             	add    esp,0x10
c001a772:	85 c0                	test   eax,eax
c001a774:	75 28                	jne    c001a79e <Krnl::getEnv(Process*, char const*)+0x60>
c001a776:	eb de                	jmp    c001a756 <Krnl::getEnv(Process*, char const*)+0x18>
c001a778:	52                   	push   edx
c001a779:	52                   	push   edx
c001a77a:	53                   	push   ebx
c001a77b:	50                   	push   eax
c001a77c:	e8 4b fc ff ff       	call   c001a3cc <EnvVarContainer::getEnv(char const*)>
c001a781:	83 c4 10             	add    esp,0x10
c001a784:	85 c0                	test   eax,eax
c001a786:	75 16                	jne    c001a79e <Krnl::getEnv(Process*, char const*)+0x60>
c001a788:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a78c:	a1 b8 20 03 c0       	mov    eax,ds:0xc00320b8
c001a791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a795:	83 c4 08             	add    esp,0x8
c001a798:	5b                   	pop    ebx
c001a799:	e9 2e fc ff ff       	jmp    c001a3cc <EnvVarContainer::getEnv(char const*)>
c001a79e:	83 c4 08             	add    esp,0x8
c001a7a1:	5b                   	pop    ebx
c001a7a2:	c3                   	ret    

c001a7a3 <Krnl::setEnvSystem(char const*, char const*)>:
c001a7a3:	83 ec 10             	sub    esp,0x10
c001a7a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7ae:	ff 35 b8 20 03 c0    	push   DWORD PTR ds:0xc00320b8
c001a7b4:	e8 51 fc ff ff       	call   c001a40a <EnvVarContainer::setEnv(char const*, char const*)>
c001a7b9:	83 c4 1c             	add    esp,0x1c
c001a7bc:	c3                   	ret    

c001a7bd <Krnl::setEnvUser(char const*, char const*)>:
c001a7bd:	a1 b4 20 03 c0       	mov    eax,ds:0xc00320b4
c001a7c2:	85 c0                	test   eax,eax
c001a7c4:	74 15                	je     c001a7db <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a7c6:	83 ec 10             	sub    esp,0x10
c001a7c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7d1:	50                   	push   eax
c001a7d2:	e8 33 fc ff ff       	call   c001a40a <EnvVarContainer::setEnv(char const*, char const*)>
c001a7d7:	83 c4 1c             	add    esp,0x1c
c001a7da:	c3                   	ret    
c001a7db:	c3                   	ret    

c001a7dc <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7e0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a7e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7ea:	e9 1b fc ff ff       	jmp    c001a40a <EnvVarContainer::setEnv(char const*, char const*)>

c001a7ef <Krnl::deleteEnvSystem(char const*)>:
c001a7ef:	c3                   	ret    

c001a7f0 <Krnl::deleteEnvUser(char const*)>:
c001a7f0:	c3                   	ret    

c001a7f1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a7f1:	c3                   	ret    

c001a7f2 <Krnl::newProcessEnv(Process*)>:
c001a7f2:	83 ec 28             	sub    esp,0x28
c001a7f5:	6a 0c                	push   0xc
c001a7f7:	e8 90 50 ff ff       	call   c000f88c <malloc>
c001a7fc:	5a                   	pop    edx
c001a7fd:	59                   	pop    ecx
c001a7fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a802:	50                   	push   eax
c001a803:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a807:	e8 e0 fe ff ff       	call   c001a6ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a80c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a810:	83 c4 2c             	add    esp,0x2c
c001a813:	c3                   	ret    

c001a814 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a814:	57                   	push   edi
c001a815:	56                   	push   esi
c001a816:	53                   	push   ebx
c001a817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81b:	83 ec 0c             	sub    esp,0xc
c001a81e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a824:	6a 0c                	push   0xc
c001a826:	e8 61 50 ff ff       	call   c000f88c <malloc>
c001a82b:	89 c3                	mov    ebx,eax
c001a82d:	58                   	pop    eax
c001a82e:	5a                   	pop    edx
c001a82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a833:	53                   	push   ebx
c001a834:	e8 b3 fe ff ff       	call   c001a6ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a839:	8b 07                	mov    eax,DWORD PTR [edi]
c001a83b:	89 03                	mov    DWORD PTR [ebx],eax
c001a83d:	c1 e0 03             	shl    eax,0x3
c001a840:	89 04 24             	mov    DWORD PTR [esp],eax
c001a843:	e8 44 50 ff ff       	call   c000f88c <malloc>
c001a848:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a84b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a84d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a850:	c1 e1 03             	shl    ecx,0x3
c001a853:	89 c7                	mov    edi,eax
c001a855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	89 d8                	mov    eax,ebx
c001a85c:	5b                   	pop    ebx
c001a85d:	5e                   	pop    esi
c001a85e:	5f                   	pop    edi
c001a85f:	c3                   	ret    

c001a860 <Krnl::loadSystemEnv()>:
c001a860:	53                   	push   ebx
c001a861:	83 ec 14             	sub    esp,0x14
c001a864:	6a 0c                	push   0xc
c001a866:	e8 21 50 ff ff       	call   c000f88c <malloc>
c001a86b:	89 c3                	mov    ebx,eax
c001a86d:	58                   	pop    eax
c001a86e:	5a                   	pop    edx
c001a86f:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c001a875:	53                   	push   ebx
c001a876:	e8 71 fe ff ff       	call   c001a6ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a87b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a87e:	89 1d b8 20 03 c0    	mov    DWORD PTR ds:0xc00320b8,ebx
c001a884:	e8 47 fe ff ff       	call   c001a6d0 <EnvVarContainer::__loadSystem()>
c001a889:	83 c4 18             	add    esp,0x18
c001a88c:	5b                   	pop    ebx
c001a88d:	c3                   	ret    

c001a88e <Krnl::loadUserEnv()>:
c001a88e:	53                   	push   ebx
c001a88f:	83 ec 14             	sub    esp,0x14
c001a892:	6a 0c                	push   0xc
c001a894:	e8 f3 4f ff ff       	call   c000f88c <malloc>
c001a899:	89 c3                	mov    ebx,eax
c001a89b:	58                   	pop    eax
c001a89c:	5a                   	pop    edx
c001a89d:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c001a8a3:	53                   	push   ebx
c001a8a4:	e8 43 fe ff ff       	call   c001a6ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a8a9:	89 1d b4 20 03 c0    	mov    DWORD PTR ds:0xc00320b4,ebx
c001a8af:	83 c4 18             	add    esp,0x18
c001a8b2:	5b                   	pop    ebx
c001a8b3:	c3                   	ret    

c001a8b4 <Krnl::flushEnv()>:
c001a8b4:	c3                   	ret    

c001a8b5 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a8b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b9:	8b 15 b4 20 03 c0    	mov    edx,DWORD PTR ds:0xc00320b4
c001a8bf:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a8c5:	a1 b8 20 03 c0       	mov    eax,ds:0xc00320b8
c001a8ca:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8cc:	03 01                	add    eax,DWORD PTR [ecx]
c001a8ce:	85 d2                	test   edx,edx
c001a8d0:	74 02                	je     c001a8d4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a8d2:	03 02                	add    eax,DWORD PTR [edx]
c001a8d4:	c3                   	ret    

c001a8d5 <Krnl::getProcessEnvPair(Process*, int)>:
c001a8d5:	57                   	push   edi
c001a8d6:	8b 0d b4 20 03 c0    	mov    ecx,DWORD PTR ds:0xc00320b4
c001a8dc:	56                   	push   esi
c001a8dd:	85 c9                	test   ecx,ecx
c001a8df:	53                   	push   ebx
c001a8e0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a8e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8e8:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a8ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a8f2:	8b 02                	mov    eax,DWORD PTR [edx]
c001a8f4:	75 47                	jne    c001a93d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a8f6:	39 c3                	cmp    ebx,eax
c001a8f8:	7c 47                	jl     c001a941 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a8fa:	8b 15 b8 20 03 c0    	mov    edx,DWORD PTR ds:0xc00320b8
c001a900:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a902:	01 c1                	add    ecx,eax
c001a904:	39 d9                	cmp    ecx,ebx
c001a906:	7e 6c                	jle    c001a974 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a908:	51                   	push   ecx
c001a909:	89 d9                	mov    ecx,ebx
c001a90b:	29 c1                	sub    ecx,eax
c001a90d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a910:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a914:	53                   	push   ebx
c001a915:	68 08 cb 02 c0       	push   0xc002cb08
c001a91a:	e8 32 85 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001a91f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a925:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a927:	a1 b8 20 03 c0       	mov    eax,ds:0xc00320b8
c001a92c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a92f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a933:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a936:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a939:	89 06                	mov    DWORD PTR [esi],eax
c001a93b:	eb 51                	jmp    c001a98e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a93d:	39 c3                	cmp    ebx,eax
c001a93f:	7d 05                	jge    c001a946 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a941:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a944:	eb 20                	jmp    c001a966 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a946:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a948:	8d 14 07             	lea    edx,[edi+eax*1]
c001a94b:	39 da                	cmp    edx,ebx
c001a94d:	7e 04                	jle    c001a953 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a94f:	29 c3                	sub    ebx,eax
c001a951:	eb 10                	jmp    c001a963 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a953:	8b 0d b8 20 03 c0    	mov    ecx,DWORD PTR ds:0xc00320b8
c001a959:	03 11                	add    edx,DWORD PTR [ecx]
c001a95b:	39 da                	cmp    edx,ebx
c001a95d:	7e 15                	jle    c001a974 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a95f:	29 c3                	sub    ebx,eax
c001a961:	29 fb                	sub    ebx,edi
c001a963:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a966:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a96a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a96d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a970:	89 06                	mov    DWORD PTR [esi],eax
c001a972:	eb 1d                	jmp    c001a991 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a974:	83 ec 0c             	sub    esp,0xc
c001a977:	68 1c cb 02 c0       	push   0xc002cb1c
c001a97c:	e8 18 00 00 00       	call   c001a999 <Krnl::panic(char const*)>
c001a981:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a987:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a98e:	83 c4 10             	add    esp,0x10
c001a991:	89 f0                	mov    eax,esi
c001a993:	5b                   	pop    ebx
c001a994:	5e                   	pop    esi
c001a995:	5f                   	pop    edi
c001a996:	c2 04 00             	ret    0x4

c001a999 <Krnl::panic(char const*)>:
c001a999:	55                   	push   ebp
c001a99a:	89 e5                	mov    ebp,esp
c001a99c:	53                   	push   ebx
c001a99d:	83 ec 0c             	sub    esp,0xc
c001a9a0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a9a3:	fa                   	cli    
c001a9a4:	c6 05 c4 20 03 c0 01 	mov    BYTE PTR ds:0xc00320c4,0x1
c001a9ab:	53                   	push   ebx
c001a9ac:	c6 05 a4 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e4a4,0x0
c001a9b3:	68 36 cb 02 c0       	push   0xc002cb36
c001a9b8:	e8 94 84 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001a9bd:	58                   	pop    eax
c001a9be:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001a9c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c9:	e8 8c 62 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001a9ce:	83 c4 0c             	add    esp,0xc
c001a9d1:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001a9d6:	6a 01                	push   0x1
c001a9d8:	6a 0f                	push   0xf
c001a9da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e0:	e8 13 5d ff ff       	call   c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a9e5:	58                   	pop    eax
c001a9e6:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001a9eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f1:	e8 aa 64 ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c001a9f6:	58                   	pop    eax
c001a9f7:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001a9fc:	5a                   	pop    edx
c001a9fd:	68 4f cb 02 c0       	push   0xc002cb4f
c001aa02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa08:	e8 d9 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa0d:	59                   	pop    ecx
c001aa0e:	58                   	pop    eax
c001aa0f:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aa14:	68 f4 cb 02 c0       	push   0xc002cbf4
c001aa19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa1f:	e8 c2 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa24:	58                   	pop    eax
c001aa25:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aa2a:	5a                   	pop    edx
c001aa2b:	68 6b cb 02 c0       	push   0xc002cb6b
c001aa30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa36:	e8 ab 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa3b:	59                   	pop    ecx
c001aa3c:	58                   	pop    eax
c001aa3d:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aa42:	53                   	push   ebx
c001aa43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa49:	e8 98 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa4e:	58                   	pop    eax
c001aa4f:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aa54:	5a                   	pop    edx
c001aa55:	68 8b cb 02 c0       	push   0xc002cb8b
c001aa5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa60:	e8 81 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa65:	a1 c0 20 03 c0       	mov    eax,ds:0xc00320c0
c001aa6a:	83 c4 10             	add    esp,0x10
c001aa6d:	85 c0                	test   eax,eax
c001aa6f:	74 02                	je     c001aa73 <Krnl::panic(char const*)+0xda>
c001aa71:	ff d0                	call   eax
c001aa73:	83 ec 0c             	sub    esp,0xc
c001aa76:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa79:	e8 9e 32 00 00       	call   c001dd1c <Thr::getDriverNameFromAddress(unsigned long)>
c001aa7e:	83 c4 10             	add    esp,0x10
c001aa81:	89 c3                	mov    ebx,eax
c001aa83:	85 c0                	test   eax,eax
c001aa85:	0f 84 50 02 00 00    	je     c001acdb <Krnl::panic(char const*)+0x342>
c001aa8b:	83 ec 08             	sub    esp,0x8
c001aa8e:	8b 15 d0 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032ad0
c001aa94:	68 30 cc 02 c0       	push   0xc002cc30
c001aa99:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aa9f:	e8 42 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aaa4:	58                   	pop    eax
c001aaa5:	5a                   	pop    edx
c001aaa6:	8b 15 d0 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032ad0
c001aaac:	68 6b cb 02 c0       	push   0xc002cb6b
c001aab1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aab7:	e8 2a 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aabc:	59                   	pop    ecx
c001aabd:	58                   	pop    eax
c001aabe:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aac3:	53                   	push   ebx
c001aac4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaca:	e8 17 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aacf:	83 c4 10             	add    esp,0x10
c001aad2:	83 ec 08             	sub    esp,0x8
c001aad5:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aada:	68 8a cb 02 c0       	push   0xc002cb8a
c001aadf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aae5:	e8 fc 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aaea:	58                   	pop    eax
c001aaeb:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aaf0:	5a                   	pop    edx
c001aaf1:	68 88 cc 02 c0       	push   0xc002cc88
c001aaf6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aafc:	e8 e5 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab01:	59                   	pop    ecx
c001ab02:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ab07:	5b                   	pop    ebx
c001ab08:	68 c8 cc 02 c0       	push   0xc002ccc8
c001ab0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab13:	e8 ce 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab18:	58                   	pop    eax
c001ab19:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ab1e:	5a                   	pop    edx
c001ab1f:	68 76 cb 02 c0       	push   0xc002cb76
c001ab24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab2a:	e8 b7 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab2f:	59                   	pop    ecx
c001ab30:	5b                   	pop    ebx
c001ab31:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab34:	68 8e cb 02 c0       	push   0xc002cb8e
c001ab39:	e8 13 83 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ab3e:	58                   	pop    eax
c001ab3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ab42:	5a                   	pop    edx
c001ab43:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001ab46:	68 97 cb 02 c0       	push   0xc002cb97
c001ab4b:	e8 01 83 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ab50:	59                   	pop    ecx
c001ab51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ab54:	5b                   	pop    ebx
c001ab55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab57:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001ab5a:	68 a0 cb 02 c0       	push   0xc002cba0
c001ab5f:	e8 ed 82 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ab64:	58                   	pop    eax
c001ab65:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ab6a:	5a                   	pop    edx
c001ab6b:	68 0c cd 02 c0       	push   0xc002cd0c
c001ab70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab76:	e8 6b 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab7b:	59                   	pop    ecx
c001ab7c:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ab81:	5b                   	pop    ebx
c001ab82:	68 a9 cb 02 c0       	push   0xc002cba9
c001ab87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab8d:	e8 54 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab92:	0f 20 c0             	mov    eax,cr0
c001ab95:	5a                   	pop    edx
c001ab96:	59                   	pop    ecx
c001ab97:	50                   	push   eax
c001ab98:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ab9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aba3:	e8 64 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001aba8:	5b                   	pop    ebx
c001aba9:	58                   	pop    eax
c001abaa:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001abaf:	68 b3 cb 02 c0       	push   0xc002cbb3
c001abb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abba:	e8 27 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001abbf:	0f 20 d0             	mov    eax,cr2
c001abc2:	5a                   	pop    edx
c001abc3:	59                   	pop    ecx
c001abc4:	50                   	push   eax
c001abc5:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001abca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abd0:	e8 37 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001abd5:	5b                   	pop    ebx
c001abd6:	58                   	pop    eax
c001abd7:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001abdc:	68 bd cb 02 c0       	push   0xc002cbbd
c001abe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abe7:	e8 fa 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001abec:	0f 20 d8             	mov    eax,cr3
c001abef:	5a                   	pop    edx
c001abf0:	59                   	pop    ecx
c001abf1:	50                   	push   eax
c001abf2:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001abf7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abfd:	e8 0a 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac02:	5b                   	pop    ebx
c001ac03:	58                   	pop    eax
c001ac04:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac09:	68 d0 cb 02 c0       	push   0xc002cbd0
c001ac0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac14:	e8 cd 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac19:	0f 20 e0             	mov    eax,cr4
c001ac1c:	5a                   	pop    edx
c001ac1d:	59                   	pop    ecx
c001ac1e:	50                   	push   eax
c001ac1f:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac2a:	e8 dd 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac2f:	5b                   	pop    ebx
c001ac30:	58                   	pop    eax
c001ac31:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac36:	68 da cb 02 c0       	push   0xc002cbda
c001ac3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac41:	e8 a0 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac46:	5a                   	pop    edx
c001ac47:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac4c:	59                   	pop    ecx
c001ac4d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac53:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ac56:	50                   	push   eax
c001ac57:	e8 b0 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac5c:	5b                   	pop    ebx
c001ac5d:	58                   	pop    eax
c001ac5e:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac63:	68 f1 cb 02 c0       	push   0xc002cbf1
c001ac68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac6e:	e8 73 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac73:	5a                   	pop    edx
c001ac74:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac79:	59                   	pop    ecx
c001ac7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac83:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac86:	50                   	push   eax
c001ac87:	e8 80 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac8c:	5b                   	pop    ebx
c001ac8d:	58                   	pop    eax
c001ac8e:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ac93:	68 f1 cb 02 c0       	push   0xc002cbf1
c001ac98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac9e:	e8 43 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aca3:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001aca8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001acab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001acb1:	8b 12                	mov    edx,DWORD PTR [edx]
c001acb3:	59                   	pop    ecx
c001acb4:	5b                   	pop    ebx
c001acb5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001acb8:	50                   	push   eax
c001acb9:	e8 4e 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	b2 fe                	mov    dl,0xfe
c001acc3:	e4 60                	in     al,0x60
c001acc5:	3c 1c                	cmp    al,0x1c
c001acc7:	74 04                	je     c001accd <Krnl::panic(char const*)+0x334>
c001acc9:	3c 5a                	cmp    al,0x5a
c001accb:	75 f6                	jne    c001acc3 <Krnl::panic(char const*)+0x32a>
c001accd:	e4 64                	in     al,0x64
c001accf:	a8 02                	test   al,0x2
c001acd1:	75 fa                	jne    c001accd <Krnl::panic(char const*)+0x334>
c001acd3:	88 d0                	mov    al,dl
c001acd5:	e6 64                	out    0x64,al
c001acd7:	fa                   	cli    
c001acd8:	f4                   	hlt    
c001acd9:	eb e8                	jmp    c001acc3 <Krnl::panic(char const*)+0x32a>
c001acdb:	50                   	push   eax
c001acdc:	50                   	push   eax
c001acdd:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ace2:	68 5c cc 02 c0       	push   0xc002cc5c
c001ace7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aced:	e8 f4 62 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001acf2:	58                   	pop    eax
c001acf3:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001acf8:	5a                   	pop    edx
c001acf9:	68 6b cb 02 c0       	push   0xc002cb6b
c001acfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad04:	e8 dd 62 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ad09:	59                   	pop    ecx
c001ad0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad0f:	5b                   	pop    ebx
c001ad10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad13:	83 c0 0c             	add    eax,0xc
c001ad16:	50                   	push   eax
c001ad17:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001ad1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad22:	e8 bf 62 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	e9 a3 fd ff ff       	jmp    c001aad2 <Krnl::panic(char const*)+0x139>

c001ad2f <Net::switchEndian16(unsigned short)>:
c001ad2f:	83 ec 04             	sub    esp,0x4
c001ad32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad36:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ad3a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ad3e:	c1 f8 08             	sar    eax,0x8
c001ad41:	89 c2                	mov    edx,eax
c001ad43:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ad47:	c1 e0 08             	shl    eax,0x8
c001ad4a:	09 d0                	or     eax,edx
c001ad4c:	83 c4 04             	add    esp,0x4
c001ad4f:	c3                   	ret    

c001ad50 <Net::switchEndian32(unsigned int)>:
c001ad50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad54:	c1 e8 18             	shr    eax,0x18
c001ad57:	89 c2                	mov    edx,eax
c001ad59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad5d:	c1 e0 08             	shl    eax,0x8
c001ad60:	25 00 00 ff 00       	and    eax,0xff0000
c001ad65:	09 c2                	or     edx,eax
c001ad67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad6b:	c1 e8 08             	shr    eax,0x8
c001ad6e:	25 00 ff 00 00       	and    eax,0xff00
c001ad73:	09 c2                	or     edx,eax
c001ad75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad79:	c1 e0 18             	shl    eax,0x18
c001ad7c:	09 d0                	or     eax,edx
c001ad7e:	c3                   	ret    

c001ad7f <Net::crc32Calc(unsigned char*, int)>:
c001ad7f:	83 ec 10             	sub    esp,0x10
c001ad82:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ad87:	75 07                	jne    c001ad90 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ad89:	b8 00 00 00 00       	mov    eax,0x0
c001ad8e:	eb 7c                	jmp    c001ae0c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ad90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ad95:	7f 07                	jg     c001ad9e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ad97:	b8 00 00 00 00       	mov    eax,0x0
c001ad9c:	eb 6e                	jmp    c001ae0c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ad9e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ada6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001adae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001adb6:	7d 4e                	jge    c001ae06 <Net::crc32Calc(unsigned char*, int)+0x87>
c001adb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adc0:	01 d0                	add    eax,edx
c001adc2:	8a 00                	mov    al,BYTE PTR [eax]
c001adc4:	0f b6 c0             	movzx  eax,al
c001adc7:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001adcb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001add3:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001add8:	7f 26                	jg     c001ae00 <Net::crc32Calc(unsigned char*, int)+0x81>
c001adda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adde:	83 e0 01             	and    eax,0x1
c001ade1:	74 0d                	je     c001adf0 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ade3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ade7:	d1 e8                	shr    eax,1
c001ade9:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001adee:	eb 06                	jmp    c001adf6 <Net::crc32Calc(unsigned char*, int)+0x77>
c001adf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adf4:	d1 e8                	shr    eax,1
c001adf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adfa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001adfe:	eb d3                	jmp    c001add3 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ae00:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ae04:	eb a8                	jmp    c001adae <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ae06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae0a:	f7 d0                	not    eax
c001ae0c:	83 c4 10             	add    esp,0x10
c001ae0f:	c3                   	ret    

c001ae10 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ae10:	57                   	push   edi
c001ae11:	56                   	push   esi
c001ae12:	53                   	push   ebx
c001ae13:	83 ec 60             	sub    esp,0x60
c001ae16:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae1d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ae21:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ae29:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ae2e:	7f 1a                	jg     c001ae4a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ae30:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae37:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae41:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ae44:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ae48:	eb df                	jmp    c001ae29 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ae4a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae51:	8d 50 01             	lea    edx,[eax+0x1]
c001ae54:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae5b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ae5e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae69:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ae6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae71:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ae79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae85:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae8d:	89 c6                	mov    esi,eax
c001ae8f:	89 d7                	mov    edi,edx
c001ae91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae93:	89 c8                	mov    eax,ecx
c001ae95:	89 fa                	mov    edx,edi
c001ae97:	89 f3                	mov    ebx,esi
c001ae99:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ae9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aea1:	89 04 24             	mov    DWORD PTR [esp],eax
c001aea4:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001aeac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aeb3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aeb7:	8d 44 24 78          	lea    eax,[esp+0x78]
c001aebb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aebf:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aec7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aecb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aed3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aed7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aedb:	89 c6                	mov    esi,eax
c001aedd:	89 d7                	mov    edi,edx
c001aedf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aee1:	89 c8                	mov    eax,ecx
c001aee3:	89 fa                	mov    edx,edi
c001aee5:	89 f3                	mov    ebx,esi
c001aee7:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aeeb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aeef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aef3:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001aefb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af02:	0f b7 c0             	movzx  eax,ax
c001af05:	c1 f8 08             	sar    eax,0x8
c001af08:	89 c1                	mov    ecx,eax
c001af0a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af11:	8d 50 01             	lea    edx,[eax+0x1]
c001af14:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af1b:	88 ca                	mov    dl,cl
c001af1d:	88 10                	mov    BYTE PTR [eax],dl
c001af1f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001af26:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af2d:	8d 48 01             	lea    ecx,[eax+0x1]
c001af30:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001af37:	88 10                	mov    BYTE PTR [eax],dl
c001af39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af3d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001af41:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001af48:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001af4c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001af50:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001af54:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af58:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001af5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af60:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001af64:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001af68:	89 c6                	mov    esi,eax
c001af6a:	89 d7                	mov    edi,edx
c001af6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af6e:	89 c8                	mov    eax,ecx
c001af70:	89 fa                	mov    edx,edi
c001af72:	89 f3                	mov    ebx,esi
c001af74:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001af78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001af7c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af80:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af84:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001af8b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af92:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001af96:	50                   	push   eax
c001af97:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001af9b:	e8 df fd ff ff       	call   c001ad7f <Net::crc32Calc(unsigned char*, int)>
c001afa0:	83 c4 08             	add    esp,0x8
c001afa3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001afa7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afab:	c1 e8 18             	shr    eax,0x18
c001afae:	89 c1                	mov    ecx,eax
c001afb0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001afb7:	8d 50 01             	lea    edx,[eax+0x1]
c001afba:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001afc1:	88 ca                	mov    dl,cl
c001afc3:	88 10                	mov    BYTE PTR [eax],dl
c001afc5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afc9:	c1 e8 10             	shr    eax,0x10
c001afcc:	89 c1                	mov    ecx,eax
c001afce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001afd5:	8d 50 01             	lea    edx,[eax+0x1]
c001afd8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001afdf:	88 ca                	mov    dl,cl
c001afe1:	88 10                	mov    BYTE PTR [eax],dl
c001afe3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afe7:	c1 e8 08             	shr    eax,0x8
c001afea:	89 c1                	mov    ecx,eax
c001afec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aff3:	8d 50 01             	lea    edx,[eax+0x1]
c001aff6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001affd:	88 ca                	mov    dl,cl
c001afff:	88 10                	mov    BYTE PTR [eax],dl
c001b001:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b008:	8d 50 01             	lea    edx,[eax+0x1]
c001b00b:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001b012:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b016:	88 10                	mov    BYTE PTR [eax],dl
c001b018:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b01c:	83 c4 60             	add    esp,0x60
c001b01f:	5b                   	pop    ebx
c001b020:	5e                   	pop    esi
c001b021:	5f                   	pop    edi
c001b022:	c3                   	ret    

c001b023 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001b023:	57                   	push   edi
c001b024:	56                   	push   esi
c001b025:	53                   	push   ebx
c001b026:	83 ec 70             	sub    esp,0x70
c001b029:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b030:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001b034:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001b03c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b043:	83 c0 0e             	add    eax,0xe
c001b046:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b04a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b051:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b055:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001b05d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b065:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b069:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b06d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001b071:	89 c6                	mov    esi,eax
c001b073:	89 d7                	mov    edi,edx
c001b075:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b077:	89 c8                	mov    eax,ecx
c001b079:	89 fa                	mov    edx,edi
c001b07b:	89 f3                	mov    ebx,esi
c001b07d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001b081:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b089:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b091:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b098:	83 c0 08             	add    eax,0x8
c001b09b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001b09f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b0aa:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001b0b2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b0ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0be:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b0c2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b0c6:	89 c6                	mov    esi,eax
c001b0c8:	89 d7                	mov    edi,edx
c001b0ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0cc:	89 c8                	mov    eax,ecx
c001b0ce:	89 fa                	mov    edx,edi
c001b0d0:	89 f3                	mov    ebx,esi
c001b0d2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b0d6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001b0da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b0de:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b0e6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0ed:	8d 50 01             	lea    edx,[eax+0x1]
c001b0f0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0f7:	8a 00                	mov    al,BYTE PTR [eax]
c001b0f9:	0f b6 c0             	movzx  eax,al
c001b0fc:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b101:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b108:	8d 50 01             	lea    edx,[eax+0x1]
c001b10b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b112:	8a 00                	mov    al,BYTE PTR [eax]
c001b114:	0f b6 c0             	movzx  eax,al
c001b117:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b11c:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b121:	c1 e0 08             	shl    eax,0x8
c001b124:	89 c2                	mov    edx,eax
c001b126:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b12a:	09 d0                	or     eax,edx
c001b12c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b133:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b137:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b13f:	75 46                	jne    c001b187 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b141:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b148:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b14b:	66 3d dc 05          	cmp    ax,0x5dc
c001b14f:	77 16                	ja     c001b167 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b151:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b158:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b15b:	0f b7 c0             	movzx  eax,ax
c001b15e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b165:	eb 20                	jmp    c001b187 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b167:	83 ec 0c             	sub    esp,0xc
c001b16a:	68 34 cd 02 c0       	push   0xc002cd34
c001b16f:	e8 dd 7c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b17e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b182:	e9 17 01 00 00       	jmp    c001b29e <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b187:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b18e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b195:	8b 12                	mov    edx,DWORD PTR [edx]
c001b197:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b19b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b1a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b1a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b1aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b1ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1be:	89 c6                	mov    esi,eax
c001b1c0:	89 d7                	mov    edi,edx
c001b1c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1c4:	89 c8                	mov    eax,ecx
c001b1c6:	89 fa                	mov    edx,edi
c001b1c8:	89 f3                	mov    ebx,esi
c001b1ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b1ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b1d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1d5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b1dc:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b1e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1ea:	8d 50 01             	lea    edx,[eax+0x1]
c001b1ed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1f4:	8a 00                	mov    al,BYTE PTR [eax]
c001b1f6:	0f b6 c0             	movzx  eax,al
c001b1f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b1fd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b204:	8d 50 01             	lea    edx,[eax+0x1]
c001b207:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b20e:	8a 00                	mov    al,BYTE PTR [eax]
c001b210:	0f b6 c0             	movzx  eax,al
c001b213:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b217:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b21e:	8d 50 01             	lea    edx,[eax+0x1]
c001b221:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b228:	8a 00                	mov    al,BYTE PTR [eax]
c001b22a:	0f b6 c0             	movzx  eax,al
c001b22d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b231:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b238:	8d 50 01             	lea    edx,[eax+0x1]
c001b23b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b242:	8a 00                	mov    al,BYTE PTR [eax]
c001b244:	0f b6 c0             	movzx  eax,al
c001b247:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b24b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b24f:	c1 e0 18             	shl    eax,0x18
c001b252:	89 c2                	mov    edx,eax
c001b254:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b258:	c1 e0 10             	shl    eax,0x10
c001b25b:	09 c2                	or     edx,eax
c001b25d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b261:	c1 e0 08             	shl    eax,0x8
c001b264:	09 d0                	or     eax,edx
c001b266:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b26a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b26e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b275:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b279:	83 e8 04             	sub    eax,0x4
c001b27c:	83 ec 08             	sub    esp,0x8
c001b27f:	50                   	push   eax
c001b280:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b284:	e8 f6 fa ff ff       	call   c001ad7f <Net::crc32Calc(unsigned char*, int)>
c001b289:	83 c4 10             	add    esp,0x10
c001b28c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b290:	0f 94 c2             	sete   dl
c001b293:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b29a:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b29d:	90                   	nop
c001b29e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b2a5:	83 c4 70             	add    esp,0x70
c001b2a8:	5b                   	pop    ebx
c001b2a9:	5e                   	pop    esi
c001b2aa:	5f                   	pop    edi
c001b2ab:	c2 04 00             	ret    0x4

c001b2ae <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b2ae:	55                   	push   ebp
c001b2af:	57                   	push   edi
c001b2b0:	56                   	push   esi
c001b2b1:	53                   	push   ebx
c001b2b2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b2b8:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b2bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b2c1:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b2c4:	80 fb 40             	cmp    bl,0x40
c001b2c7:	75 1b                	jne    c001b2e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b2c9:	8a 16                	mov    dl,BYTE PTR [esi]
c001b2cb:	84 d2                	test   dl,dl
c001b2cd:	0f 84 f1 00 00 00    	je     c001b3c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2d3:	8d 46 01             	lea    eax,[esi+0x1]
c001b2d6:	80 fa 3a             	cmp    dl,0x3a
c001b2d9:	74 04                	je     c001b2df <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b2db:	89 c6                	mov    esi,eax
c001b2dd:	eb ea                	jmp    c001b2c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b2df:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b2e2:	89 c6                	mov    esi,eax
c001b2e4:	50                   	push   eax
c001b2e5:	6a 40                	push   0x40
c001b2e7:	6a 00                	push   0x0
c001b2e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2ed:	50                   	push   eax
c001b2ee:	e8 5d 54 fe ff       	call   c0000750 <memset>
c001b2f3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b2fa:	31 c0                	xor    eax,eax
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b301:	84 c9                	test   cl,cl
c001b303:	0f 84 bb 00 00 00    	je     c001b3c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b309:	3d c7 00 00 00       	cmp    eax,0xc7
c001b30e:	0f 8f b0 00 00 00    	jg     c001b3c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b314:	80 f9 0a             	cmp    cl,0xa
c001b317:	0f 85 98 00 00 00    	jne    c001b3b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b31d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b322:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b326:	a8 df                	test   al,0xdf
c001b328:	0f 94 c1             	sete   cl
c001b32b:	3c 23                	cmp    al,0x23
c001b32d:	0f 94 c2             	sete   dl
c001b330:	08 d1                	or     cl,dl
c001b332:	75 4a                	jne    c001b37e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b334:	8d 50 f7             	lea    edx,[eax-0x9]
c001b337:	80 fa 01             	cmp    dl,0x1
c001b33a:	76 42                	jbe    c001b37e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b33c:	3c 5b                	cmp    al,0x5b
c001b33e:	75 42                	jne    c001b382 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b340:	80 fb 40             	cmp    bl,0x40
c001b343:	75 39                	jne    c001b37e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b34c:	52                   	push   edx
c001b34d:	e8 1a 54 fe ff       	call   c000076c <strlen>
c001b352:	83 c4 10             	add    esp,0x10
c001b355:	83 f8 3f             	cmp    eax,0x3f
c001b358:	77 6a                	ja     c001b3c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b35a:	50                   	push   eax
c001b35b:	50                   	push   eax
c001b35c:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b360:	52                   	push   edx
c001b361:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b365:	52                   	push   edx
c001b366:	e8 a1 54 fe ff       	call   c000080c <strcpy>
c001b36b:	58                   	pop    eax
c001b36c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b370:	52                   	push   edx
c001b371:	e8 f6 53 fe ff       	call   c000076c <strlen>
c001b376:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b37b:	83 c4 10             	add    esp,0x10
c001b37e:	31 d2                	xor    edx,edx
c001b380:	eb 3a                	jmp    c001b3bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b382:	80 fb 40             	cmp    bl,0x40
c001b385:	74 06                	je     c001b38d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b387:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b38b:	eb 20                	jmp    c001b3ad <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b38d:	50                   	push   eax
c001b38e:	50                   	push   eax
c001b38f:	55                   	push   ebp
c001b390:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b394:	50                   	push   eax
c001b395:	e8 fe 54 fe ff       	call   c0000898 <strcmp>
c001b39a:	83 c4 10             	add    esp,0x10
c001b39d:	85 c0                	test   eax,eax
c001b39f:	75 dd                	jne    c001b37e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b3a1:	eb e4                	jmp    c001b387 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b3a3:	8d 50 01             	lea    edx,[eax+0x1]
c001b3a6:	80 f9 3d             	cmp    cl,0x3d
c001b3a9:	74 1d                	je     c001b3c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b3ab:	89 d0                	mov    eax,edx
c001b3ad:	8a 08                	mov    cl,BYTE PTR [eax]
c001b3af:	84 c9                	test   cl,cl
c001b3b1:	75 f0                	jne    c001b3a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b3b3:	eb 0f                	jmp    c001b3c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b3b5:	8d 50 01             	lea    edx,[eax+0x1]
c001b3b8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b3bc:	47                   	inc    edi
c001b3bd:	89 d0                	mov    eax,edx
c001b3bf:	e9 3b ff ff ff       	jmp    c001b2ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b3c4:	31 c0                	xor    eax,eax
c001b3c6:	eb 33                	jmp    c001b3fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b3c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b3cc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b3cf:	50                   	push   eax
c001b3d0:	50                   	push   eax
c001b3d1:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b3d5:	50                   	push   eax
c001b3d6:	56                   	push   esi
c001b3d7:	e8 bc 54 fe ff       	call   c0000898 <strcmp>
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	85 c0                	test   eax,eax
c001b3e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b3e5:	75 97                	jne    c001b37e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b3e7:	51                   	push   ecx
c001b3e8:	51                   	push   ecx
c001b3e9:	52                   	push   edx
c001b3ea:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b3f1:	e8 16 54 fe ff       	call   c000080c <strcpy>
c001b3f6:	83 c4 10             	add    esp,0x10
c001b3f9:	b0 01                	mov    al,0x1
c001b3fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b401:	5b                   	pop    ebx
c001b402:	5e                   	pop    esi
c001b403:	5f                   	pop    edi
c001b404:	5d                   	pop    ebp
c001b405:	c3                   	ret    

c001b406 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b406:	57                   	push   edi
c001b407:	56                   	push   esi
c001b408:	53                   	push   ebx
c001b409:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b40f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b416:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b41d:	53                   	push   ebx
c001b41e:	e8 49 53 fe ff       	call   c000076c <strlen>
c001b423:	89 34 24             	mov    DWORD PTR [esp],esi
c001b426:	89 c7                	mov    edi,eax
c001b428:	e8 3f 53 fe ff       	call   c000076c <strlen>
c001b42d:	83 c4 10             	add    esp,0x10
c001b430:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b434:	3d ff 00 00 00       	cmp    eax,0xff
c001b439:	0f 87 d3 00 00 00    	ja     c001b512 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b43f:	57                   	push   edi
c001b440:	57                   	push   edi
c001b441:	56                   	push   esi
c001b442:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b446:	56                   	push   esi
c001b447:	e8 c0 53 fe ff       	call   c000080c <strcpy>
c001b44c:	58                   	pop    eax
c001b44d:	5a                   	pop    edx
c001b44e:	68 89 d2 02 c0       	push   0xc002d289
c001b453:	56                   	push   esi
c001b454:	e8 f3 54 fe ff       	call   c000094c <strcat>
c001b459:	59                   	pop    ecx
c001b45a:	5f                   	pop    edi
c001b45b:	53                   	push   ebx
c001b45c:	56                   	push   esi
c001b45d:	e8 ea 54 fe ff       	call   c000094c <strcat>
c001b462:	58                   	pop    eax
c001b463:	5a                   	pop    edx
c001b464:	68 80 cd 02 c0       	push   0xc002cd80
c001b469:	56                   	push   esi
c001b46a:	e8 dd 54 fe ff       	call   c000094c <strcat>
c001b46f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b476:	e8 11 44 ff ff       	call   c000f88c <malloc>
c001b47b:	83 c4 0c             	add    esp,0xc
c001b47e:	89 c3                	mov    ebx,eax
c001b480:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c001b486:	56                   	push   esi
c001b487:	50                   	push   eax
c001b488:	e8 23 7f ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	85 db                	test   ebx,ebx
c001b492:	74 7e                	je     c001b512 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b494:	51                   	push   ecx
c001b495:	51                   	push   ecx
c001b496:	6a 01                	push   0x1
c001b498:	53                   	push   ebx
c001b499:	e8 76 7f ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	85 c0                	test   eax,eax
c001b4a3:	74 08                	je     c001b4ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b4a5:	83 ec 0c             	sub    esp,0xc
c001b4a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4aa:	53                   	push   ebx
c001b4ab:	eb 5f                	jmp    c001b50c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b4ad:	52                   	push   edx
c001b4ae:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b4b2:	50                   	push   eax
c001b4b3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b4b7:	50                   	push   eax
c001b4b8:	53                   	push   ebx
c001b4b9:	e8 02 82 ff ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c001b4be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	89 c1                	mov    ecx,eax
c001b4c7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b4cb:	74 31                	je     c001b4fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b4cd:	83 ec 0c             	sub    esp,0xc
c001b4d0:	50                   	push   eax
c001b4d1:	e8 b6 43 ff ff       	call   c000f88c <malloc>
c001b4d6:	89 c6                	mov    esi,eax
c001b4d8:	58                   	pop    eax
c001b4d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4db:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b4df:	52                   	push   edx
c001b4e0:	56                   	push   esi
c001b4e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b4e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b4e9:	53                   	push   ebx
c001b4ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4ed:	83 c4 20             	add    esp,0x20
c001b4f0:	85 c0                	test   eax,eax
c001b4f2:	75 0a                	jne    c001b4fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4f8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b4fc:	74 18                	je     c001b516 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b4fe:	83 ec 0c             	sub    esp,0xc
c001b501:	53                   	push   ebx
c001b502:	e8 6b 7f ff ff       	call   c0013472 <File::close()>
c001b507:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b50c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b50f:	83 c4 10             	add    esp,0x10
c001b512:	31 c0                	xor    eax,eax
c001b514:	eb 3b                	jmp    c001b551 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b516:	83 ec 0c             	sub    esp,0xc
c001b519:	53                   	push   ebx
c001b51a:	e8 53 7f ff ff       	call   c0013472 <File::close()>
c001b51f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b521:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b524:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b527:	83 c4 0c             	add    esp,0xc
c001b52a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b531:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b538:	56                   	push   esi
c001b539:	e8 70 fd ff ff       	call   c001b2ae <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b53e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b541:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b545:	e8 52 43 ff ff       	call   c000f89c <free>
c001b54a:	83 c4 10             	add    esp,0x10
c001b54d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b551:	81 c4 20 01 00 00    	add    esp,0x120
c001b557:	5b                   	pop    ebx
c001b558:	5e                   	pop    esi
c001b559:	5f                   	pop    edi
c001b55a:	c3                   	ret    

c001b55b <Reg::getLine(char*, char*, char*)>:
c001b55b:	57                   	push   edi
c001b55c:	56                   	push   esi
c001b55d:	53                   	push   ebx
c001b55e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b562:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b566:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b56a:	57                   	push   edi
c001b56b:	56                   	push   esi
c001b56c:	53                   	push   ebx
c001b56d:	68 85 cd 02 c0       	push   0xc002cd85
c001b572:	e8 8f fe ff ff       	call   c001b406 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b577:	83 c4 10             	add    esp,0x10
c001b57a:	84 c0                	test   al,al
c001b57c:	75 10                	jne    c001b58e <Reg::getLine(char*, char*, char*)+0x33>
c001b57e:	57                   	push   edi
c001b57f:	56                   	push   esi
c001b580:	53                   	push   ebx
c001b581:	68 aa cd 02 c0       	push   0xc002cdaa
c001b586:	e8 7b fe ff ff       	call   c001b406 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b58b:	83 c4 10             	add    esp,0x10
c001b58e:	5b                   	pop    ebx
c001b58f:	5e                   	pop    esi
c001b590:	5f                   	pop    edi
c001b591:	c3                   	ret    

c001b592 <Reg::readInt(char*, char*, int*)>:
c001b592:	55                   	push   ebp
c001b593:	57                   	push   edi
c001b594:	56                   	push   esi
c001b595:	53                   	push   ebx
c001b596:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b59c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b5a0:	57                   	push   edi
c001b5a1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b5a8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b5af:	e8 a7 ff ff ff       	call   c001b55b <Reg::getLine(char*, char*, char*)>
c001b5b4:	83 c4 10             	add    esp,0x10
c001b5b7:	84 c0                	test   al,al
c001b5b9:	0f 84 b3 00 00 00    	je     c001b672 <Reg::readInt(char*, char*, int*)+0xe0>
c001b5bf:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b5c3:	80 fa 2b             	cmp    dl,0x2b
c001b5c6:	74 0c                	je     c001b5d4 <Reg::readInt(char*, char*, int*)+0x42>
c001b5c8:	80 fa 2d             	cmp    dl,0x2d
c001b5cb:	75 0e                	jne    c001b5db <Reg::readInt(char*, char*, int*)+0x49>
c001b5cd:	ba 01 00 00 00       	mov    edx,0x1
c001b5d2:	eb 0b                	jmp    c001b5df <Reg::readInt(char*, char*, int*)+0x4d>
c001b5d4:	ba 01 00 00 00       	mov    edx,0x1
c001b5d9:	eb 02                	jmp    c001b5dd <Reg::readInt(char*, char*, int*)+0x4b>
c001b5db:	31 d2                	xor    edx,edx
c001b5dd:	31 c0                	xor    eax,eax
c001b5df:	be 0a 00 00 00       	mov    esi,0xa
c001b5e4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b5e9:	75 20                	jne    c001b60b <Reg::readInt(char*, char*, int*)+0x79>
c001b5eb:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b5ef:	80 f9 78             	cmp    cl,0x78
c001b5f2:	75 0a                	jne    c001b5fe <Reg::readInt(char*, char*, int*)+0x6c>
c001b5f4:	83 c2 02             	add    edx,0x2
c001b5f7:	be 10 00 00 00       	mov    esi,0x10
c001b5fc:	eb 0d                	jmp    c001b60b <Reg::readInt(char*, char*, int*)+0x79>
c001b5fe:	80 f9 62             	cmp    cl,0x62
c001b601:	75 08                	jne    c001b60b <Reg::readInt(char*, char*, int*)+0x79>
c001b603:	83 c2 02             	add    edx,0x2
c001b606:	be 02 00 00 00       	mov    esi,0x2
c001b60b:	01 d7                	add    edi,edx
c001b60d:	31 d2                	xor    edx,edx
c001b60f:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b611:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b615:	80 fb 0d             	cmp    bl,0xd
c001b618:	0f 94 c3             	sete   bl
c001b61b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b620:	0f 94 c1             	sete   cl
c001b623:	08 cb                	or     bl,cl
c001b625:	75 3a                	jne    c001b661 <Reg::readInt(char*, char*, int*)+0xcf>
c001b627:	0f af d6             	imul   edx,esi
c001b62a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b62f:	83 fe 10             	cmp    esi,0x10
c001b632:	75 26                	jne    c001b65a <Reg::readInt(char*, char*, int*)+0xc8>
c001b634:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b638:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b63b:	89 e9                	mov    ecx,ebp
c001b63d:	80 f9 05             	cmp    cl,0x5
c001b640:	77 06                	ja     c001b648 <Reg::readInt(char*, char*, int*)+0xb6>
c001b642:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b646:	eb 16                	jmp    c001b65e <Reg::readInt(char*, char*, int*)+0xcc>
c001b648:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b64c:	83 e9 61             	sub    ecx,0x61
c001b64f:	80 f9 05             	cmp    cl,0x5
c001b652:	77 06                	ja     c001b65a <Reg::readInt(char*, char*, int*)+0xc8>
c001b654:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b658:	eb 04                	jmp    c001b65e <Reg::readInt(char*, char*, int*)+0xcc>
c001b65a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b65e:	47                   	inc    edi
c001b65f:	eb ae                	jmp    c001b60f <Reg::readInt(char*, char*, int*)+0x7d>
c001b661:	84 c0                	test   al,al
c001b663:	74 02                	je     c001b667 <Reg::readInt(char*, char*, int*)+0xd5>
c001b665:	f7 da                	neg    edx
c001b667:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b66e:	89 10                	mov    DWORD PTR [eax],edx
c001b670:	88 d8                	mov    al,bl
c001b672:	81 c4 ec 00 00 00    	add    esp,0xec
c001b678:	5b                   	pop    ebx
c001b679:	5e                   	pop    esi
c001b67a:	5f                   	pop    edi
c001b67b:	5d                   	pop    ebp
c001b67c:	c3                   	ret    

c001b67d <Reg::readString(char*, char*, char*, int)>:
c001b67d:	57                   	push   edi
c001b67e:	56                   	push   esi
c001b67f:	53                   	push   ebx
c001b680:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b686:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b68d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b691:	57                   	push   edi
c001b692:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b699:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b6a0:	e8 b6 fe ff ff       	call   c001b55b <Reg::getLine(char*, char*, char*)>
c001b6a5:	83 c4 10             	add    esp,0x10
c001b6a8:	89 c6                	mov    esi,eax
c001b6aa:	84 c0                	test   al,al
c001b6ac:	74 44                	je     c001b6f2 <Reg::readString(char*, char*, char*, int)+0x75>
c001b6ae:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b6b5:	31 c0                	xor    eax,eax
c001b6b7:	4a                   	dec    edx
c001b6b8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b6bb:	84 c9                	test   cl,cl
c001b6bd:	74 0f                	je     c001b6ce <Reg::readString(char*, char*, char*, int)+0x51>
c001b6bf:	39 c2                	cmp    edx,eax
c001b6c1:	7e 0b                	jle    c001b6ce <Reg::readString(char*, char*, char*, int)+0x51>
c001b6c3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b6c6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b6cb:	40                   	inc    eax
c001b6cc:	eb ea                	jmp    c001b6b8 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b6ce:	83 ec 0c             	sub    esp,0xc
c001b6d1:	53                   	push   ebx
c001b6d2:	e8 95 50 fe ff       	call   c000076c <strlen>
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b6df:	75 11                	jne    c001b6f2 <Reg::readString(char*, char*, char*, int)+0x75>
c001b6e1:	83 ec 0c             	sub    esp,0xc
c001b6e4:	53                   	push   ebx
c001b6e5:	e8 82 50 fe ff       	call   c000076c <strlen>
c001b6ea:	83 c4 10             	add    esp,0x10
c001b6ed:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b6f2:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b6f8:	89 f0                	mov    eax,esi
c001b6fa:	5b                   	pop    ebx
c001b6fb:	5e                   	pop    esi
c001b6fc:	5f                   	pop    edi
c001b6fd:	c3                   	ret    

c001b6fe <Reg::readBool(char*, char*, bool*)>:
c001b6fe:	83 ec 20             	sub    esp,0x20
c001b701:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b705:	50                   	push   eax
c001b706:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b70a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b70e:	e8 7f fe ff ff       	call   c001b592 <Reg::readInt(char*, char*, int*)>
c001b713:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b718:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b71c:	0f 95 02             	setne  BYTE PTR [edx]
c001b71f:	83 c4 2c             	add    esp,0x2c
c001b722:	c3                   	ret    

c001b723 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b723:	53                   	push   ebx
c001b724:	83 ec 1c             	sub    esp,0x1c
c001b727:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b72b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b72f:	50                   	push   eax
c001b730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b738:	e8 c1 ff ff ff       	call   c001b6fe <Reg::readBool(char*, char*, bool*)>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	84 c0                	test   al,al
c001b742:	74 04                	je     c001b748 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b744:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b748:	88 d8                	mov    al,bl
c001b74a:	83 c4 18             	add    esp,0x18
c001b74d:	5b                   	pop    ebx
c001b74e:	c3                   	ret    

c001b74f <Reg::readIntWithDefault(char*, char*, int)>:
c001b74f:	53                   	push   ebx
c001b750:	83 ec 1c             	sub    esp,0x1c
c001b753:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b757:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b75b:	50                   	push   eax
c001b75c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b760:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b764:	e8 29 fe ff ff       	call   c001b592 <Reg::readInt(char*, char*, int*)>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	84 c0                	test   al,al
c001b76e:	74 04                	je     c001b774 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b770:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b774:	89 d8                	mov    eax,ebx
c001b776:	83 c4 18             	add    esp,0x18
c001b779:	5b                   	pop    ebx
c001b77a:	c3                   	ret    

c001b77b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b77b:	57                   	push   edi
c001b77c:	56                   	push   esi
c001b77d:	56                   	push   esi
c001b77e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b782:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b786:	56                   	push   esi
c001b787:	57                   	push   edi
c001b788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b78c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b790:	e8 e8 fe ff ff       	call   c001b67d <Reg::readString(char*, char*, char*, int)>
c001b795:	83 c4 10             	add    esp,0x10
c001b798:	84 c0                	test   al,al
c001b79a:	75 1a                	jne    c001b7b6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b79c:	51                   	push   ecx
c001b79d:	56                   	push   esi
c001b79e:	6a 00                	push   0x0
c001b7a0:	57                   	push   edi
c001b7a1:	e8 aa 4f fe ff       	call   c0000750 <memset>
c001b7a6:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b7a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b7b6:	89 f8                	mov    eax,edi
c001b7b8:	5a                   	pop    edx
c001b7b9:	5e                   	pop    esi
c001b7ba:	5f                   	pop    edi
c001b7bb:	c3                   	ret    

c001b7bc <Sys::eject(regs*)>:
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	83 ca ff             	or     edx,0xffffffff
c001b7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b7c9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ce:	83 e9 41             	sub    ecx,0x41
c001b7d1:	83 f9 19             	cmp    ecx,0x19
c001b7d4:	77 18                	ja     c001b7ee <Sys::eject(regs*)+0x32>
c001b7d6:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c001b7dd:	85 c9                	test   ecx,ecx
c001b7df:	74 0d                	je     c001b7ee <Sys::eject(regs*)+0x32>
c001b7e1:	83 ec 0c             	sub    esp,0xc
c001b7e4:	51                   	push   ecx
c001b7e5:	e8 7a af ff ff       	call   c0016764 <LogicalDisk::eject()>
c001b7ea:	83 c4 10             	add    esp,0x10
c001b7ed:	99                   	cdq    
c001b7ee:	83 c4 0c             	add    esp,0xc
c001b7f1:	c3                   	ret    

c001b7f2 <Sys::exit(regs*)>:
c001b7f2:	83 ec 18             	sub    esp,0x18
c001b7f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b7fc:	e8 7e 38 00 00       	call   c001f07f <terminateTask(int)>
c001b801:	83 c8 ff             	or     eax,0xffffffff
c001b804:	83 c4 1c             	add    esp,0x1c
c001b807:	89 c2                	mov    edx,eax
c001b809:	c3                   	ret    

c001b80a <Sys::getCwd(regs*)>:
c001b80a:	83 ec 10             	sub    esp,0x10
c001b80d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b811:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b814:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b81c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b81f:	e8 8e 79 ff ff       	call   c00131b2 <Fs::getcwd(Process*, char*, int)>
c001b824:	83 c4 1c             	add    esp,0x1c
c001b827:	99                   	cdq    
c001b828:	c3                   	ret    

c001b829 <Sys::getPID(regs*)>:
c001b829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b82e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b831:	8b 00                	mov    eax,DWORD PTR [eax]
c001b833:	99                   	cdq    
c001b834:	c3                   	ret    

c001b835 <Sys::getRAMData(regs*)>:
c001b835:	8b 0d b4 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f5b4
c001b83b:	6b 05 b0 f5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f5b0,0x64
c001b842:	99                   	cdq    
c001b843:	f7 f9                	idiv   ecx
c001b845:	c1 e0 18             	shl    eax,0x18
c001b848:	09 c8                	or     eax,ecx
c001b84a:	99                   	cdq    
c001b84b:	c3                   	ret    

c001b84c <Sys::getVGAPtr(regs*)>:
c001b84c:	55                   	push   ebp
c001b84d:	57                   	push   edi
c001b84e:	56                   	push   esi
c001b84f:	53                   	push   ebx
c001b850:	83 ec 18             	sub    esp,0x18
c001b853:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b857:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b85a:	e8 02 33 00 00       	call   c001eb61 <Thr::processFromPID(int)>
c001b85f:	83 c4 10             	add    esp,0x10
c001b862:	89 c1                	mov    ecx,eax
c001b864:	b8 01 00 00 00       	mov    eax,0x1
c001b869:	85 c9                	test   ecx,ecx
c001b86b:	74 59                	je     c001b8c6 <Sys::getVGAPtr(regs*)+0x7a>
c001b86d:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b873:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b877:	74 0c                	je     c001b885 <Sys::getVGAPtr(regs*)+0x39>
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	53                   	push   ebx
c001b87d:	e8 d8 53 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001b882:	83 c4 10             	add    esp,0x10
c001b885:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b888:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b88b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b890:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b892:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b895:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b898:	81 c3 82 00 00 00    	add    ebx,0x82
c001b89e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b8a4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b8a7:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b8aa:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b8b0:	50                   	push   eax
c001b8b1:	50                   	push   eax
c001b8b2:	53                   	push   ebx
c001b8b3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b8b6:	05 a8 0f 00 00       	add    eax,0xfa8
c001b8bb:	50                   	push   eax
c001b8bc:	e8 4b 4f fe ff       	call   c000080c <strcpy>
c001b8c1:	83 c4 10             	add    esp,0x10
c001b8c4:	31 c0                	xor    eax,eax
c001b8c6:	83 c4 0c             	add    esp,0xc
c001b8c9:	31 d2                	xor    edx,edx
c001b8cb:	5b                   	pop    ebx
c001b8cc:	5e                   	pop    esi
c001b8cd:	5f                   	pop    edi
c001b8ce:	5d                   	pop    ebp
c001b8cf:	c3                   	ret    

c001b8d0 <Sys::loadDLL(regs*)>:
c001b8d0:	56                   	push   esi
c001b8d1:	53                   	push   ebx
c001b8d2:	31 d2                	xor    edx,edx
c001b8d4:	51                   	push   ecx
c001b8d5:	b8 01 00 00 00       	mov    eax,0x1
c001b8da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8de:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b8e2:	0f 84 8c 00 00 00    	je     c001b974 <Sys::loadDLL(regs*)+0xa4>
c001b8e8:	83 ec 0c             	sub    esp,0xc
c001b8eb:	68 14 01 00 00       	push   0x114
c001b8f0:	e8 97 3f ff ff       	call   c000f88c <malloc>
c001b8f5:	83 c4 0c             	add    esp,0xc
c001b8f8:	89 c3                	mov    ebx,eax
c001b8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b902:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b905:	53                   	push   ebx
c001b906:	e8 a5 7a ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	31 d2                	xor    edx,edx
c001b910:	b8 02 00 00 00       	mov    eax,0x2
c001b915:	85 db                	test   ebx,ebx
c001b917:	74 5b                	je     c001b974 <Sys::loadDLL(regs*)+0xa4>
c001b919:	83 ec 0c             	sub    esp,0xc
c001b91c:	53                   	push   ebx
c001b91d:	e8 60 7d ff ff       	call   c0013682 <File::exists()>
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	84 c0                	test   al,al
c001b927:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b929:	75 11                	jne    c001b93c <Sys::loadDLL(regs*)+0x6c>
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	53                   	push   ebx
c001b92f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	b8 03 00 00 00       	mov    eax,0x3
c001b93a:	eb 36                	jmp    c001b972 <Sys::loadDLL(regs*)+0xa2>
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	53                   	push   ebx
c001b940:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b943:	58                   	pop    eax
c001b944:	5a                   	pop    edx
c001b945:	6a 00                	push   0x0
c001b947:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b94a:	e8 1e 24 00 00       	call   c001dd6d <Thr::loadDLL(char const*, bool)>
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	89 c1                	mov    ecx,eax
c001b954:	31 d2                	xor    edx,edx
c001b956:	b8 04 00 00 00       	mov    eax,0x4
c001b95b:	85 c9                	test   ecx,ecx
c001b95d:	74 15                	je     c001b974 <Sys::loadDLL(regs*)+0xa4>
c001b95f:	53                   	push   ebx
c001b960:	53                   	push   ebx
c001b961:	ff 35 68 f5 02 c0    	push   DWORD PTR ds:0xc002f568
c001b967:	51                   	push   ecx
c001b968:	e8 2b 26 00 00       	call   c001df98 <Thr::executeDLL(unsigned long, void*)>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	31 c0                	xor    eax,eax
c001b972:	31 d2                	xor    edx,edx
c001b974:	59                   	pop    ecx
c001b975:	5b                   	pop    ebx
c001b976:	5e                   	pop    esi
c001b977:	c3                   	ret    

c001b978 <Sys::read(regs*)>:
c001b978:	57                   	push   edi
c001b979:	56                   	push   esi
c001b97a:	53                   	push   ebx
c001b97b:	83 ec 10             	sub    esp,0x10
c001b97e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b982:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b985:	83 f8 02             	cmp    eax,0x2
c001b988:	77 10                	ja     c001b99a <Sys::read(regs*)+0x22>
c001b98a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b992:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b998:	eb 0e                	jmp    c001b9a8 <Sys::read(regs*)+0x30>
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	50                   	push   eax
c001b99e:	e8 38 5f ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	89 c1                	mov    ecx,eax
c001b9a8:	83 c8 ff             	or     eax,0xffffffff
c001b9ab:	85 c9                	test   ecx,ecx
c001b9ad:	89 c2                	mov    edx,eax
c001b9af:	74 28                	je     c001b9d9 <Sys::read(regs*)+0x61>
c001b9b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9b9:	31 ff                	xor    edi,edi
c001b9bb:	83 ec 0c             	sub    esp,0xc
c001b9be:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b9c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b9c4:	52                   	push   edx
c001b9c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9c8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b9cb:	57                   	push   edi
c001b9cc:	56                   	push   esi
c001b9cd:	51                   	push   ecx
c001b9ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9d5:	83 c4 20             	add    esp,0x20
c001b9d8:	99                   	cdq    
c001b9d9:	83 c4 10             	add    esp,0x10
c001b9dc:	5b                   	pop    ebx
c001b9dd:	5e                   	pop    esi
c001b9de:	5f                   	pop    edi
c001b9df:	c3                   	ret    

c001b9e0 <Sys::sbrk(regs*)>:
c001b9e0:	56                   	push   esi
c001b9e1:	53                   	push   ebx
c001b9e2:	50                   	push   eax
c001b9e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9ef:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b9f2:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b9f8:	85 db                	test   ebx,ebx
c001b9fa:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b9fd:	74 02                	je     c001ba01 <Sys::sbrk(regs*)+0x21>
c001b9ff:	79 06                	jns    c001ba07 <Sys::sbrk(regs*)+0x27>
c001ba01:	89 f0                	mov    eax,esi
c001ba03:	31 d2                	xor    edx,edx
c001ba05:	eb 2a                	jmp    c001ba31 <Sys::sbrk(regs*)+0x51>
c001ba07:	83 c8 ff             	or     eax,0xffffffff
c001ba0a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ba10:	89 c2                	mov    edx,eax
c001ba12:	77 1d                	ja     c001ba31 <Sys::sbrk(regs*)+0x51>
c001ba14:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ba1a:	50                   	push   eax
c001ba1b:	c1 ea 0c             	shr    edx,0xc
c001ba1e:	68 07 0c 00 00       	push   0xc07
c001ba23:	52                   	push   edx
c001ba24:	51                   	push   ecx
c001ba25:	e8 40 69 ff ff       	call   c001236a <VAS::allocatePages(int, int)>
c001ba2a:	89 f0                	mov    eax,esi
c001ba2c:	31 d2                	xor    edx,edx
c001ba2e:	83 c4 10             	add    esp,0x10
c001ba31:	59                   	pop    ecx
c001ba32:	5b                   	pop    ebx
c001ba33:	5e                   	pop    esi
c001ba34:	c3                   	ret    

c001ba35 <Sys::setCwd(regs*)>:
c001ba35:	83 ec 14             	sub    esp,0x14
c001ba38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba3c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ba3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba44:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba47:	e8 d5 7c ff ff       	call   c0013721 <Fs::setcwd(Process*, char*)>
c001ba4c:	83 c4 1c             	add    esp,0x1c
c001ba4f:	99                   	cdq    
c001ba50:	c3                   	ret    

c001ba51 <Sys::setTime(regs*)>:
c001ba51:	55                   	push   ebp
c001ba52:	31 d2                	xor    edx,edx
c001ba54:	57                   	push   edi
c001ba55:	bf 18 00 00 00       	mov    edi,0x18
c001ba5a:	56                   	push   esi
c001ba5b:	53                   	push   ebx
c001ba5c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001ba61:	83 ec 30             	sub    esp,0x30
c001ba64:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001ba68:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001ba6b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba6e:	f7 f3                	div    ebx
c001ba70:	89 d6                	mov    esi,edx
c001ba72:	31 d2                	xor    edx,edx
c001ba74:	f7 f3                	div    ebx
c001ba76:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba7d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ba82:	31 d2                	xor    edx,edx
c001ba84:	f7 f3                	div    ebx
c001ba86:	31 d2                	xor    edx,edx
c001ba88:	bb 0c 00 00 00       	mov    ebx,0xc
c001ba8d:	f7 f7                	div    edi
c001ba8f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ba92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba96:	0f b7 cd             	movzx  ecx,bp
c001ba99:	56                   	push   esi
c001ba9a:	89 c7                	mov    edi,eax
c001ba9c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001baa0:	c1 e6 10             	shl    esi,0x10
c001baa3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001baa7:	83 e7 1f             	and    edi,0x1f
c001baaa:	51                   	push   ecx
c001baab:	47                   	inc    edi
c001baac:	c1 e8 05             	shr    eax,0x5
c001baaf:	31 d2                	xor    edx,edx
c001bab1:	f7 f3                	div    ebx
c001bab3:	31 db                	xor    ebx,ebx
c001bab5:	52                   	push   edx
c001bab6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001baba:	57                   	push   edi
c001babb:	68 c5 cd 02 c0       	push   0xc002cdc5
c001bac0:	e8 8c 73 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bac5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bac9:	89 f8                	mov    eax,edi
c001bacb:	31 c9                	xor    ecx,ecx
c001bacd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bad1:	88 c1                	mov    cl,al
c001bad3:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001bad9:	88 d5                	mov    ch,dl
c001badb:	c1 e0 10             	shl    eax,0x10
c001bade:	0f b7 d1             	movzx  edx,cx
c001bae1:	09 c2                	or     edx,eax
c001bae3:	89 d8                	mov    eax,ebx
c001bae5:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001baea:	09 f0                	or     eax,esi
c001baec:	89 c3                	mov    ebx,eax
c001baee:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001baf2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001baf6:	83 c4 18             	add    esp,0x18
c001baf9:	53                   	push   ebx
c001bafa:	52                   	push   edx
c001bafb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001baff:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bb03:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001bb07:	e8 37 83 ff ff       	call   c0013e43 <datetimeToSeconds(datetime_t)>
c001bb0c:	83 c4 0c             	add    esp,0xc
c001bb0f:	52                   	push   edx
c001bb10:	50                   	push   eax
c001bb11:	56                   	push   esi
c001bb12:	e8 b3 84 ff ff       	call   c0013fca <secondsToDatetime(unsigned long long)>
c001bb17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb1f:	51                   	push   ecx
c001bb20:	89 d6                	mov    esi,edx
c001bb22:	51                   	push   ecx
c001bb23:	c1 ee 10             	shr    esi,0x10
c001bb26:	89 f3                	mov    ebx,esi
c001bb28:	0f b6 f3             	movzx  esi,bl
c001bb2b:	56                   	push   esi
c001bb2c:	0f b6 f6             	movzx  esi,dh
c001bb2f:	0f b6 d2             	movzx  edx,dl
c001bb32:	56                   	push   esi
c001bb33:	52                   	push   edx
c001bb34:	89 c2                	mov    edx,eax
c001bb36:	c1 ea 10             	shr    edx,0x10
c001bb39:	52                   	push   edx
c001bb3a:	0f b6 d4             	movzx  edx,ah
c001bb3d:	0f b6 c0             	movzx  eax,al
c001bb40:	52                   	push   edx
c001bb41:	50                   	push   eax
c001bb42:	68 e1 cd 02 c0       	push   0xc002cde1
c001bb47:	e8 05 73 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bb4c:	83 c4 2c             	add    esp,0x2c
c001bb4f:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001bb54:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bb58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bb5c:	53                   	push   ebx
c001bb5d:	51                   	push   ecx
c001bb5e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001bb64:	e8 01 84 ff ff       	call   c0013f6a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001bb69:	83 f0 01             	xor    eax,0x1
c001bb6c:	31 d2                	xor    edx,edx
c001bb6e:	0f b6 c0             	movzx  eax,al
c001bb71:	83 c4 3c             	add    esp,0x3c
c001bb74:	5b                   	pop    ebx
c001bb75:	5e                   	pop    esi
c001bb76:	5f                   	pop    edi
c001bb77:	5d                   	pop    ebp
c001bb78:	c3                   	ret    

c001bb79 <Sys::timezone(regs*)>:
c001bb79:	53                   	push   ebx
c001bb7a:	83 ec 08             	sub    esp,0x8
c001bb7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb81:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001bb85:	75 17                	jne    c001bb9e <Sys::timezone(regs*)+0x25>
c001bb87:	83 ec 0c             	sub    esp,0xc
c001bb8a:	68 fd cd 02 c0       	push   0xc002cdfd
c001bb8f:	e8 bd 72 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bb94:	83 c8 ff             	or     eax,0xffffffff
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	89 c2                	mov    edx,eax
c001bb9c:	eb 20                	jmp    c001bbbe <Sys::timezone(regs*)+0x45>
c001bb9e:	83 ec 0c             	sub    esp,0xc
c001bba1:	68 35 ce 02 c0       	push   0xc002ce35
c001bba6:	e8 a6 72 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bbab:	58                   	pop    eax
c001bbac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bbaf:	e8 18 81 ff ff       	call   c0013ccc <User::loadClockSettings(int)>
c001bbb4:	83 c4 10             	add    esp,0x10
c001bbb7:	b8 01 00 00 00       	mov    eax,0x1
c001bbbc:	31 d2                	xor    edx,edx
c001bbbe:	83 c4 08             	add    esp,0x8
c001bbc1:	5b                   	pop    ebx
c001bbc2:	c3                   	ret    

c001bbc3 <Sys::write(regs*)>:
c001bbc3:	57                   	push   edi
c001bbc4:	56                   	push   esi
c001bbc5:	53                   	push   ebx
c001bbc6:	83 ec 10             	sub    esp,0x10
c001bbc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbcd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbd0:	83 f8 02             	cmp    eax,0x2
c001bbd3:	77 10                	ja     c001bbe5 <Sys::write(regs*)+0x22>
c001bbd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbdd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bbe3:	eb 0e                	jmp    c001bbf3 <Sys::write(regs*)+0x30>
c001bbe5:	83 ec 0c             	sub    esp,0xc
c001bbe8:	50                   	push   eax
c001bbe9:	e8 ed 5c ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bbee:	83 c4 10             	add    esp,0x10
c001bbf1:	89 c1                	mov    ecx,eax
c001bbf3:	83 c8 ff             	or     eax,0xffffffff
c001bbf6:	85 c9                	test   ecx,ecx
c001bbf8:	89 c2                	mov    edx,eax
c001bbfa:	74 28                	je     c001bc24 <Sys::write(regs*)+0x61>
c001bbfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc04:	31 ff                	xor    edi,edi
c001bc06:	83 ec 0c             	sub    esp,0xc
c001bc09:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bc0b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bc0f:	52                   	push   edx
c001bc10:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc13:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bc16:	57                   	push   edi
c001bc17:	56                   	push   esi
c001bc18:	51                   	push   ecx
c001bc19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bc1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc20:	83 c4 20             	add    esp,0x20
c001bc23:	99                   	cdq    
c001bc24:	83 c4 10             	add    esp,0x10
c001bc27:	5b                   	pop    ebx
c001bc28:	5e                   	pop    esi
c001bc29:	5f                   	pop    edi
c001bc2a:	c3                   	ret    

c001bc2b <Sys::wsbe(regs*)>:
c001bc2b:	57                   	push   edi
c001bc2c:	b9 0b 00 00 00       	mov    ecx,0xb
c001bc31:	56                   	push   esi
c001bc32:	be 74 ce 02 c0       	mov    esi,0xc002ce74
c001bc37:	53                   	push   ebx
c001bc38:	83 ec 30             	sub    esp,0x30
c001bc3b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bc3f:	fc                   	cld    
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc45:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bc49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc51:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bc57:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc59:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bc5c:	57                   	push   edi
c001bc5d:	e8 0a 4b fe ff       	call   c000076c <strlen>
c001bc62:	5a                   	pop    edx
c001bc63:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bc67:	52                   	push   edx
c001bc68:	31 d2                	xor    edx,edx
c001bc6a:	57                   	push   edi
c001bc6b:	52                   	push   edx
c001bc6c:	50                   	push   eax
c001bc6d:	56                   	push   esi
c001bc6e:	ff d3                	call   ebx
c001bc70:	83 c4 14             	add    esp,0x14
c001bc73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bc77:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc7a:	e8 00 34 00 00       	call   c001f07f <terminateTask(int)>
c001bc7f:	83 c4 40             	add    esp,0x40
c001bc82:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bc87:	5b                   	pop    ebx
c001bc88:	31 d2                	xor    edx,edx
c001bc8a:	5e                   	pop    esi
c001bc8b:	5f                   	pop    edi
c001bc8c:	c3                   	ret    

c001bc8d <Sys::yield(regs*)>:
c001bc8d:	57                   	push   edi
c001bc8e:	56                   	push   esi
c001bc8f:	53                   	push   ebx
c001bc90:	fa                   	cli    
c001bc91:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001bc97:	e8 b0 2a 00 00       	call   c001e74c <schedule()>
c001bc9c:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001bca1:	48                   	dec    eax
c001bca2:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001bca7:	75 01                	jne    c001bcaa <Sys::yield(regs*)+0x1d>
c001bca9:	fb                   	sti    
c001bcaa:	8b 35 f0 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fbf0
c001bcb0:	8b 3d f4 fb 02 c0    	mov    edi,DWORD PTR ds:0xc002fbf4
c001bcb6:	89 f0                	mov    eax,esi
c001bcb8:	89 fb                	mov    ebx,edi
c001bcba:	89 f1                	mov    ecx,esi
c001bcbc:	c1 e0 07             	shl    eax,0x7
c001bcbf:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bcc3:	25 80 30 0f 00       	and    eax,0xf3080
c001bcc8:	c1 eb 17             	shr    ebx,0x17
c001bccb:	31 c8                	xor    eax,ecx
c001bccd:	89 da                	mov    edx,ebx
c001bccf:	5b                   	pop    ebx
c001bcd0:	5e                   	pop    esi
c001bcd1:	5f                   	pop    edi
c001bcd2:	c3                   	ret    

c001bcd3 <sysCallSeekDir(regs*)>:
c001bcd3:	31 c0                	xor    eax,eax
c001bcd5:	31 d2                	xor    edx,edx
c001bcd7:	c3                   	ret    

c001bcd8 <sysCallTellDir(regs*)>:
c001bcd8:	31 c0                	xor    eax,eax
c001bcda:	31 d2                	xor    edx,edx
c001bcdc:	c3                   	ret    

c001bcdd <sysCallVerify(regs*)>:
c001bcdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce1:	31 d2                	xor    edx,edx
c001bce3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bce6:	c3                   	ret    

c001bce7 <sysFormatDisk(regs*)>:
c001bce7:	56                   	push   esi
c001bce8:	53                   	push   ebx
c001bce9:	53                   	push   ebx
c001bcea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcee:	8b 1d f4 f6 02 c0    	mov    ebx,DWORD PTR ds:0xc002f6f4
c001bcf4:	eb 25                	jmp    c001bd1b <sysFormatDisk(regs*)+0x34>
c001bcf6:	83 ec 0c             	sub    esp,0xc
c001bcf9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bcfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcfe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bd01:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bd04:	50                   	push   eax
c001bd05:	ff 34 85 80 fb 02 c0 	push   DWORD PTR [eax*4-0x3ffd0480]
c001bd0c:	53                   	push   ebx
c001bd0d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bd10:	83 c4 20             	add    esp,0x20
c001bd13:	83 f8 08             	cmp    eax,0x8
c001bd16:	75 12                	jne    c001bd2a <sysFormatDisk(regs*)+0x43>
c001bd18:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bd1b:	85 db                	test   ebx,ebx
c001bd1d:	75 d7                	jne    c001bcf6 <sysFormatDisk(regs*)+0xf>
c001bd1f:	59                   	pop    ecx
c001bd20:	b8 03 00 00 00       	mov    eax,0x3
c001bd25:	31 d2                	xor    edx,edx
c001bd27:	5b                   	pop    ebx
c001bd28:	5e                   	pop    esi
c001bd29:	c3                   	ret    
c001bd2a:	85 c0                	test   eax,eax
c001bd2c:	74 1b                	je     c001bd49 <sysFormatDisk(regs*)+0x62>
c001bd2e:	83 f8 09             	cmp    eax,0x9
c001bd31:	74 0b                	je     c001bd3e <sysFormatDisk(regs*)+0x57>
c001bd33:	59                   	pop    ecx
c001bd34:	b8 02 00 00 00       	mov    eax,0x2
c001bd39:	31 d2                	xor    edx,edx
c001bd3b:	5b                   	pop    ebx
c001bd3c:	5e                   	pop    esi
c001bd3d:	c3                   	ret    
c001bd3e:	59                   	pop    ecx
c001bd3f:	b8 01 00 00 00       	mov    eax,0x1
c001bd44:	31 d2                	xor    edx,edx
c001bd46:	5b                   	pop    ebx
c001bd47:	5e                   	pop    esi
c001bd48:	c3                   	ret    
c001bd49:	59                   	pop    ecx
c001bd4a:	31 c0                	xor    eax,eax
c001bd4c:	31 d2                	xor    edx,edx
c001bd4e:	5b                   	pop    ebx
c001bd4f:	5e                   	pop    esi
c001bd50:	c3                   	ret    

c001bd51 <sysSetDiskVolumeLabel(regs*)>:
c001bd51:	56                   	push   esi
c001bd52:	53                   	push   ebx
c001bd53:	53                   	push   ebx
c001bd54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd58:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd5b:	83 f8 19             	cmp    eax,0x19
c001bd5e:	77 29                	ja     c001bd89 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd60:	8b 0c 85 80 fb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0480]
c001bd67:	85 c9                	test   ecx,ecx
c001bd69:	74 1e                	je     c001bd89 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd6b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bd6e:	85 d2                	test   edx,edx
c001bd70:	74 17                	je     c001bd89 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd72:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bd78:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bd7a:	52                   	push   edx
c001bd7b:	50                   	push   eax
c001bd7c:	51                   	push   ecx
c001bd7d:	53                   	push   ebx
c001bd7e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	99                   	cdq    
c001bd85:	59                   	pop    ecx
c001bd86:	5b                   	pop    ebx
c001bd87:	5e                   	pop    esi
c001bd88:	c3                   	ret    
c001bd89:	59                   	pop    ecx
c001bd8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd94:	5b                   	pop    ebx
c001bd95:	5e                   	pop    esi
c001bd96:	c3                   	ret    

c001bd97 <sysGetDiskVolumeLabel(regs*)>:
c001bd97:	57                   	push   edi
c001bd98:	56                   	push   esi
c001bd99:	53                   	push   ebx
c001bd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bda1:	83 fa 19             	cmp    edx,0x19
c001bda4:	77 34                	ja     c001bdda <sysGetDiskVolumeLabel(regs*)+0x43>
c001bda6:	8b 0c 95 80 fb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0480]
c001bdad:	85 c9                	test   ecx,ecx
c001bdaf:	74 29                	je     c001bdda <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdb1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bdb4:	85 db                	test   ebx,ebx
c001bdb6:	74 22                	je     c001bdda <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bdbb:	85 c0                	test   eax,eax
c001bdbd:	74 1b                	je     c001bdda <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdbf:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bdc5:	83 ec 0c             	sub    esp,0xc
c001bdc8:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bdca:	50                   	push   eax
c001bdcb:	53                   	push   ebx
c001bdcc:	52                   	push   edx
c001bdcd:	51                   	push   ecx
c001bdce:	56                   	push   esi
c001bdcf:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bdd2:	83 c4 20             	add    esp,0x20
c001bdd5:	99                   	cdq    
c001bdd6:	5b                   	pop    ebx
c001bdd7:	5e                   	pop    esi
c001bdd8:	5f                   	pop    edi
c001bdd9:	c3                   	ret    
c001bdda:	5b                   	pop    ebx
c001bddb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bde0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bde5:	5e                   	pop    esi
c001bde6:	5f                   	pop    edi
c001bde7:	c3                   	ret    

c001bde8 <sysShutdown(regs*)>:
c001bde8:	83 ec 0c             	sub    esp,0xc
c001bdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdf2:	85 c0                	test   eax,eax
c001bdf4:	74 18                	je     c001be0e <sysShutdown(regs*)+0x26>
c001bdf6:	83 f8 01             	cmp    eax,0x1
c001bdf9:	74 38                	je     c001be33 <sysShutdown(regs*)+0x4b>
c001bdfb:	83 f8 02             	cmp    eax,0x2
c001bdfe:	74 24                	je     c001be24 <sysShutdown(regs*)+0x3c>
c001be00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be05:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be0a:	83 c4 0c             	add    esp,0xc
c001be0d:	c3                   	ret    
c001be0e:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001be13:	8b 10                	mov    edx,DWORD PTR [eax]
c001be15:	6a 00                	push   0x0
c001be17:	6a 00                	push   0x0
c001be19:	6a 00                	push   0x0
c001be1b:	50                   	push   eax
c001be1c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be1f:	83 c4 10             	add    esp,0x10
c001be22:	eb dc                	jmp    c001be00 <sysShutdown(regs*)+0x18>
c001be24:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001be29:	8b 10                	mov    edx,DWORD PTR [eax]
c001be2b:	6a 00                	push   0x0
c001be2d:	6a 00                	push   0x0
c001be2f:	6a 01                	push   0x1
c001be31:	eb e8                	jmp    c001be1b <sysShutdown(regs*)+0x33>
c001be33:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c001be38:	85 c0                	test   eax,eax
c001be3a:	74 02                	je     c001be3e <sysShutdown(regs*)+0x56>
c001be3c:	ff d0                	call   eax
c001be3e:	31 c0                	xor    eax,eax
c001be40:	31 d2                	xor    edx,edx
c001be42:	83 c4 0c             	add    esp,0xc
c001be45:	c3                   	ret    

c001be46 <sysCallRealpath(regs*)>:
c001be46:	83 ec 0c             	sub    esp,0xc
c001be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be4d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001be50:	85 d2                	test   edx,edx
c001be52:	74 07                	je     c001be5b <sysCallRealpath(regs*)+0x15>
c001be54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001be57:	85 c0                	test   eax,eax
c001be59:	75 0b                	jne    c001be66 <sysCallRealpath(regs*)+0x20>
c001be5b:	b8 01 00 00 00       	mov    eax,0x1
c001be60:	31 d2                	xor    edx,edx
c001be62:	83 c4 0c             	add    esp,0xc
c001be65:	c3                   	ret    
c001be66:	51                   	push   ecx
c001be67:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be6d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be70:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001be76:	51                   	push   ecx
c001be77:	52                   	push   edx
c001be78:	50                   	push   eax
c001be79:	e8 88 73 ff ff       	call   c0013206 <Fs::standardiseFiles(char*, char const*, char const*)>
c001be7e:	83 c4 10             	add    esp,0x10
c001be81:	31 c0                	xor    eax,eax
c001be83:	31 d2                	xor    edx,edx
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	c3                   	ret    

c001be89 <sysCallGetArgc(regs*)>:
c001be89:	83 ec 14             	sub    esp,0x14
c001be8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be94:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001be9a:	68 a0 ce 02 c0       	push   0xc002cea0
c001be9f:	e8 ad 6f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beac:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001beb2:	83 c4 1c             	add    esp,0x1c
c001beb5:	99                   	cdq    
c001beb6:	c3                   	ret    

c001beb7 <sysCallReadDir(regs*)>:
c001beb7:	53                   	push   ebx
c001beb8:	83 ec 18             	sub    esp,0x18
c001bebb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bebf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bec2:	83 f8 02             	cmp    eax,0x2
c001bec5:	76 53                	jbe    c001bf1a <sysCallReadDir(regs*)+0x63>
c001bec7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001beca:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bed0:	77 4f                	ja     c001bf21 <sysCallReadDir(regs*)+0x6a>
c001bed2:	83 ec 0c             	sub    esp,0xc
c001bed5:	50                   	push   eax
c001bed6:	e8 00 5a ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	85 c0                	test   eax,eax
c001bee0:	74 50                	je     c001bf32 <sysCallReadDir(regs*)+0x7b>
c001bee2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beea:	83 ec 0c             	sub    esp,0xc
c001beed:	8b 10                	mov    edx,DWORD PTR [eax]
c001beef:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bef3:	51                   	push   ecx
c001bef4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bef7:	6a 00                	push   0x0
c001bef9:	68 10 01 00 00       	push   0x110
c001befe:	50                   	push   eax
c001beff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bf02:	83 c4 20             	add    esp,0x20
c001bf05:	85 c0                	test   eax,eax
c001bf07:	74 38                	je     c001bf41 <sysCallReadDir(regs*)+0x8a>
c001bf09:	83 f8 07             	cmp    eax,0x7
c001bf0c:	74 0c                	je     c001bf1a <sysCallReadDir(regs*)+0x63>
c001bf0e:	b8 02 00 00 00       	mov    eax,0x2
c001bf13:	31 d2                	xor    edx,edx
c001bf15:	83 c4 18             	add    esp,0x18
c001bf18:	5b                   	pop    ebx
c001bf19:	c3                   	ret    
c001bf1a:	b8 01 00 00 00       	mov    eax,0x1
c001bf1f:	eb f2                	jmp    c001bf13 <sysCallReadDir(regs*)+0x5c>
c001bf21:	83 ec 08             	sub    esp,0x8
c001bf24:	52                   	push   edx
c001bf25:	68 c4 cf 02 c0       	push   0xc002cfc4
c001bf2a:	e8 22 6f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf37:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf3c:	83 c4 18             	add    esp,0x18
c001bf3f:	5b                   	pop    ebx
c001bf40:	c3                   	ret    
c001bf41:	31 c0                	xor    eax,eax
c001bf43:	eb ce                	jmp    c001bf13 <sysCallReadDir(regs*)+0x5c>

c001bf45 <sysCallIsATTY(regs*)>:
c001bf45:	83 ec 0c             	sub    esp,0xc
c001bf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf4f:	83 f8 02             	cmp    eax,0x2
c001bf52:	76 07                	jbe    c001bf5b <sysCallIsATTY(regs*)+0x16>
c001bf54:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf59:	75 26                	jne    c001bf81 <sysCallIsATTY(regs*)+0x3c>
c001bf5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf60:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf63:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bf69:	85 c0                	test   eax,eax
c001bf6b:	74 24                	je     c001bf91 <sysCallIsATTY(regs*)+0x4c>
c001bf6d:	83 ec 0c             	sub    esp,0xc
c001bf70:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf72:	50                   	push   eax
c001bf73:	ff 12                	call   DWORD PTR [edx]
c001bf75:	31 d2                	xor    edx,edx
c001bf77:	0f b6 c0             	movzx  eax,al
c001bf7a:	83 c4 10             	add    esp,0x10
c001bf7d:	83 c4 0c             	add    esp,0xc
c001bf80:	c3                   	ret    
c001bf81:	83 ec 0c             	sub    esp,0xc
c001bf84:	50                   	push   eax
c001bf85:	e8 51 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	75 dc                	jne    c001bf6d <sysCallIsATTY(regs*)+0x28>
c001bf91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf96:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf9b:	83 c4 0c             	add    esp,0xc
c001bf9e:	c3                   	ret    

c001bf9f <sysCallSeek(regs*)>:
c001bf9f:	53                   	push   ebx
c001bfa0:	83 ec 08             	sub    esp,0x8
c001bfa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfa7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfaa:	83 f8 02             	cmp    eax,0x2
c001bfad:	76 4a                	jbe    c001bff9 <sysCallSeek(regs*)+0x5a>
c001bfaf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfb4:	77 32                	ja     c001bfe8 <sysCallSeek(regs*)+0x49>
c001bfb6:	83 ec 0c             	sub    esp,0xc
c001bfb9:	50                   	push   eax
c001bfba:	e8 1c 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bfbf:	83 c4 0c             	add    esp,0xc
c001bfc2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bfc5:	31 db                	xor    ebx,ebx
c001bfc7:	53                   	push   ebx
c001bfc8:	51                   	push   ecx
c001bfc9:	50                   	push   eax
c001bfca:	e8 03 75 ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	85 c0                	test   eax,eax
c001bfd4:	0f 95 c0             	setne  al
c001bfd7:	31 d2                	xor    edx,edx
c001bfd9:	0f b6 c0             	movzx  eax,al
c001bfdc:	f7 d8                	neg    eax
c001bfde:	83 d2 00             	adc    edx,0x0
c001bfe1:	83 c4 08             	add    esp,0x8
c001bfe4:	f7 da                	neg    edx
c001bfe6:	5b                   	pop    ebx
c001bfe7:	c3                   	ret    
c001bfe8:	83 ec 08             	sub    esp,0x8
c001bfeb:	50                   	push   eax
c001bfec:	68 ab ce 02 c0       	push   0xc002ceab
c001bff1:	e8 5b 6e ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bffe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c003:	83 c4 08             	add    esp,0x8
c001c006:	5b                   	pop    ebx
c001c007:	c3                   	ret    

c001c008 <sysCallTell(regs*)>:
c001c008:	53                   	push   ebx
c001c009:	83 ec 08             	sub    esp,0x8
c001c00c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c010:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c013:	83 f8 02             	cmp    eax,0x2
c001c016:	76 5e                	jbe    c001c076 <sysCallTell(regs*)+0x6e>
c001c018:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c01d:	77 2d                	ja     c001c04c <sysCallTell(regs*)+0x44>
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	50                   	push   eax
c001c023:	e8 b3 58 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c028:	5a                   	pop    edx
c001c029:	59                   	pop    ecx
c001c02a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c02d:	50                   	push   eax
c001c02e:	e8 f5 74 ff ff       	call   c0013528 <File::tell(unsigned long long*)>
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	85 c0                	test   eax,eax
c001c038:	0f 95 c0             	setne  al
c001c03b:	31 d2                	xor    edx,edx
c001c03d:	0f b6 c0             	movzx  eax,al
c001c040:	f7 d8                	neg    eax
c001c042:	83 d2 00             	adc    edx,0x0
c001c045:	83 c4 08             	add    esp,0x8
c001c048:	f7 da                	neg    edx
c001c04a:	5b                   	pop    ebx
c001c04b:	c3                   	ret    
c001c04c:	83 ec 08             	sub    esp,0x8
c001c04f:	50                   	push   eax
c001c050:	68 c5 ce 02 c0       	push   0xc002cec5
c001c055:	e8 f7 6d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c05a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c066:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c06d:	31 d2                	xor    edx,edx
c001c06f:	31 c0                	xor    eax,eax
c001c071:	83 c4 08             	add    esp,0x8
c001c074:	5b                   	pop    ebx
c001c075:	c3                   	ret    
c001c076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c07b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c080:	83 c4 08             	add    esp,0x8
c001c083:	5b                   	pop    ebx
c001c084:	c3                   	ret    

c001c085 <sysCallSize(regs*)>:
c001c085:	53                   	push   ebx
c001c086:	83 ec 18             	sub    esp,0x18
c001c089:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c08d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c090:	83 f8 02             	cmp    eax,0x2
c001c093:	76 64                	jbe    c001c0f9 <sysCallSize(regs*)+0x74>
c001c095:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c09a:	77 33                	ja     c001c0cf <sysCallSize(regs*)+0x4a>
c001c09c:	83 ec 0c             	sub    esp,0xc
c001c09f:	50                   	push   eax
c001c0a0:	e8 36 58 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c0a5:	83 c4 0c             	add    esp,0xc
c001c0a8:	8d 54 24 13          	lea    edx,[esp+0x13]
c001c0ac:	52                   	push   edx
c001c0ad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0b0:	50                   	push   eax
c001c0b1:	e8 0a 76 ff ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c001c0b6:	83 c4 10             	add    esp,0x10
c001c0b9:	85 c0                	test   eax,eax
c001c0bb:	0f 95 c0             	setne  al
c001c0be:	31 d2                	xor    edx,edx
c001c0c0:	0f b6 c0             	movzx  eax,al
c001c0c3:	f7 d8                	neg    eax
c001c0c5:	83 d2 00             	adc    edx,0x0
c001c0c8:	83 c4 18             	add    esp,0x18
c001c0cb:	f7 da                	neg    edx
c001c0cd:	5b                   	pop    ebx
c001c0ce:	c3                   	ret    
c001c0cf:	83 ec 08             	sub    esp,0x8
c001c0d2:	50                   	push   eax
c001c0d3:	68 df ce 02 c0       	push   0xc002cedf
c001c0d8:	e8 74 6d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c0dd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c0e0:	83 c4 10             	add    esp,0x10
c001c0e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0f0:	31 d2                	xor    edx,edx
c001c0f2:	31 c0                	xor    eax,eax
c001c0f4:	83 c4 18             	add    esp,0x18
c001c0f7:	5b                   	pop    ebx
c001c0f8:	c3                   	ret    
c001c0f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c103:	83 c4 18             	add    esp,0x18
c001c106:	5b                   	pop    ebx
c001c107:	c3                   	ret    

c001c108 <sysCallSizeFromFilename(regs*)>:
c001c108:	57                   	push   edi
c001c109:	56                   	push   esi
c001c10a:	53                   	push   ebx
c001c10b:	83 ec 20             	sub    esp,0x20
c001c10e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c112:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c115:	83 fb 02             	cmp    ebx,0x2
c001c118:	0f 86 99 00 00 00    	jbe    c001c1b7 <sysCallSizeFromFilename(regs*)+0xaf>
c001c11e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c124:	77 65                	ja     c001c18b <sysCallSizeFromFilename(regs*)+0x83>
c001c126:	83 ec 0c             	sub    esp,0xc
c001c129:	68 14 01 00 00       	push   0x114
c001c12e:	e8 59 37 ff ff       	call   c000f88c <malloc>
c001c133:	83 c4 0c             	add    esp,0xc
c001c136:	89 c6                	mov    esi,eax
c001c138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c13d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c140:	53                   	push   ebx
c001c141:	56                   	push   esi
c001c142:	e8 69 72 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001c147:	83 c4 0c             	add    esp,0xc
c001c14a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c14e:	50                   	push   eax
c001c14f:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c152:	56                   	push   esi
c001c153:	e8 68 75 ff ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c001c158:	83 c4 10             	add    esp,0x10
c001c15b:	85 f6                	test   esi,esi
c001c15d:	74 14                	je     c001c173 <sysCallSizeFromFilename(regs*)+0x6b>
c001c15f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c163:	8b 16                	mov    edx,DWORD PTR [esi]
c001c165:	83 ec 0c             	sub    esp,0xc
c001c168:	56                   	push   esi
c001c169:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c16c:	83 c4 10             	add    esp,0x10
c001c16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c173:	85 c0                	test   eax,eax
c001c175:	0f 95 c0             	setne  al
c001c178:	31 d2                	xor    edx,edx
c001c17a:	0f b6 c0             	movzx  eax,al
c001c17d:	f7 d8                	neg    eax
c001c17f:	83 d2 00             	adc    edx,0x0
c001c182:	83 c4 20             	add    esp,0x20
c001c185:	f7 da                	neg    edx
c001c187:	5b                   	pop    ebx
c001c188:	5e                   	pop    esi
c001c189:	5f                   	pop    edi
c001c18a:	c3                   	ret    
c001c18b:	83 ec 08             	sub    esp,0x8
c001c18e:	53                   	push   ebx
c001c18f:	68 df ce 02 c0       	push   0xc002cedf
c001c194:	e8 b8 6c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c199:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1ac:	31 d2                	xor    edx,edx
c001c1ae:	83 c4 20             	add    esp,0x20
c001c1b1:	31 c0                	xor    eax,eax
c001c1b3:	5b                   	pop    ebx
c001c1b4:	5e                   	pop    esi
c001c1b5:	5f                   	pop    edi
c001c1b6:	c3                   	ret    
c001c1b7:	83 c4 20             	add    esp,0x20
c001c1ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1bf:	5b                   	pop    ebx
c001c1c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1c5:	5e                   	pop    esi
c001c1c6:	5f                   	pop    edi
c001c1c7:	c3                   	ret    

c001c1c8 <sysCallClose(regs*)>:
c001c1c8:	53                   	push   ebx
c001c1c9:	83 ec 08             	sub    esp,0x8
c001c1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1d3:	83 f8 02             	cmp    eax,0x2
c001c1d6:	76 50                	jbe    c001c228 <sysCallClose(regs*)+0x60>
c001c1d8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c1dd:	74 58                	je     c001c237 <sysCallClose(regs*)+0x6f>
c001c1df:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c1e4:	74 60                	je     c001c246 <sysCallClose(regs*)+0x7e>
c001c1e6:	77 2f                	ja     c001c217 <sysCallClose(regs*)+0x4f>
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	50                   	push   eax
c001c1ec:	e8 ea 56 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c1f1:	89 c3                	mov    ebx,eax
c001c1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1f6:	e8 77 72 ff ff       	call   c0013472 <File::close()>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	85 db                	test   ebx,ebx
c001c200:	74 0c                	je     c001c20e <sysCallClose(regs*)+0x46>
c001c202:	83 ec 0c             	sub    esp,0xc
c001c205:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c207:	53                   	push   ebx
c001c208:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	31 c0                	xor    eax,eax
c001c210:	31 d2                	xor    edx,edx
c001c212:	83 c4 08             	add    esp,0x8
c001c215:	5b                   	pop    ebx
c001c216:	c3                   	ret    
c001c217:	83 ec 08             	sub    esp,0x8
c001c21a:	50                   	push   eax
c001c21b:	68 e8 cf 02 c0       	push   0xc002cfe8
c001c220:	e8 2c 6c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c225:	83 c4 10             	add    esp,0x10
c001c228:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c22d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c232:	83 c4 08             	add    esp,0x8
c001c235:	5b                   	pop    ebx
c001c236:	c3                   	ret    
c001c237:	83 ec 0c             	sub    esp,0xc
c001c23a:	68 fa ce 02 c0       	push   0xc002cefa
c001c23f:	e8 0d 6c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c244:	eb c5                	jmp    c001c20b <sysCallClose(regs*)+0x43>
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	68 08 cf 02 c0       	push   0xc002cf08
c001c24e:	eb ef                	jmp    c001c23f <sysCallClose(regs*)+0x77>

c001c250 <sysCallOpenDir(regs*)>:
c001c250:	56                   	push   esi
c001c251:	53                   	push   ebx
c001c252:	53                   	push   ebx
c001c253:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c257:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c25a:	85 f6                	test   esi,esi
c001c25c:	74 59                	je     c001c2b7 <sysCallOpenDir(regs*)+0x67>
c001c25e:	83 ec 0c             	sub    esp,0xc
c001c261:	68 14 01 00 00       	push   0x114
c001c266:	e8 21 36 ff ff       	call   c000f88c <malloc>
c001c26b:	83 c4 0c             	add    esp,0xc
c001c26e:	89 c6                	mov    esi,eax
c001c270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c275:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c278:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c27b:	56                   	push   esi
c001c27c:	e8 db 75 ff ff       	call   c001385c <Directory::Directory(char const*, Process*)>
c001c281:	83 c4 10             	add    esp,0x10
c001c284:	85 f6                	test   esi,esi
c001c286:	74 2f                	je     c001c2b7 <sysCallOpenDir(regs*)+0x67>
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	56                   	push   esi
c001c28c:	e8 2f 76 ff ff       	call   c00138c0 <Directory::open()>
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	85 c0                	test   eax,eax
c001c296:	75 1f                	jne    c001c2b7 <sysCallOpenDir(regs*)+0x67>
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	56                   	push   esi
c001c29c:	e8 45 53 ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c2a1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c2a4:	83 c4 10             	add    esp,0x10
c001c2a7:	89 02                	mov    DWORD PTR [edx],eax
c001c2a9:	c1 f8 1f             	sar    eax,0x1f
c001c2ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c2af:	31 c0                	xor    eax,eax
c001c2b1:	59                   	pop    ecx
c001c2b2:	31 d2                	xor    edx,edx
c001c2b4:	5b                   	pop    ebx
c001c2b5:	5e                   	pop    esi
c001c2b6:	c3                   	ret    
c001c2b7:	59                   	pop    ecx
c001c2b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2c2:	5b                   	pop    ebx
c001c2c3:	5e                   	pop    esi
c001c2c4:	c3                   	ret    

c001c2c5 <sysCallCloseDir(regs*)>:
c001c2c5:	53                   	push   ebx
c001c2c6:	83 ec 08             	sub    esp,0x8
c001c2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2d0:	83 f8 02             	cmp    eax,0x2
c001c2d3:	76 47                	jbe    c001c31c <sysCallCloseDir(regs*)+0x57>
c001c2d5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c2da:	77 2f                	ja     c001c30b <sysCallCloseDir(regs*)+0x46>
c001c2dc:	83 ec 0c             	sub    esp,0xc
c001c2df:	50                   	push   eax
c001c2e0:	e8 f6 55 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c2e5:	89 c3                	mov    ebx,eax
c001c2e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2ea:	e8 2d 76 ff ff       	call   c001391c <Directory::close()>
c001c2ef:	83 c4 10             	add    esp,0x10
c001c2f2:	85 db                	test   ebx,ebx
c001c2f4:	74 0c                	je     c001c302 <sysCallCloseDir(regs*)+0x3d>
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2fb:	53                   	push   ebx
c001c2fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	31 c0                	xor    eax,eax
c001c304:	31 d2                	xor    edx,edx
c001c306:	83 c4 08             	add    esp,0x8
c001c309:	5b                   	pop    ebx
c001c30a:	c3                   	ret    
c001c30b:	83 ec 08             	sub    esp,0x8
c001c30e:	50                   	push   eax
c001c30f:	68 10 d0 02 c0       	push   0xc002d010
c001c314:	e8 38 6b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c319:	83 c4 10             	add    esp,0x10
c001c31c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c321:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c326:	83 c4 08             	add    esp,0x8
c001c329:	5b                   	pop    ebx
c001c32a:	c3                   	ret    

c001c32b <sysCallMakeDir(regs*)>:
c001c32b:	56                   	push   esi
c001c32c:	53                   	push   ebx
c001c32d:	83 ec 10             	sub    esp,0x10
c001c330:	68 14 01 00 00       	push   0x114
c001c335:	e8 52 35 ff ff       	call   c000f88c <malloc>
c001c33a:	83 c4 0c             	add    esp,0xc
c001c33d:	89 c3                	mov    ebx,eax
c001c33f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c344:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c347:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c34b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c34e:	53                   	push   ebx
c001c34f:	e8 08 75 ff ff       	call   c001385c <Directory::Directory(char const*, Process*)>
c001c354:	83 c4 10             	add    esp,0x10
c001c357:	85 db                	test   ebx,ebx
c001c359:	74 32                	je     c001c38d <sysCallMakeDir(regs*)+0x62>
c001c35b:	83 ec 0c             	sub    esp,0xc
c001c35e:	53                   	push   ebx
c001c35f:	e8 3c 77 ff ff       	call   c0013aa0 <Directory::create()>
c001c364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c367:	89 c6                	mov    esi,eax
c001c369:	e8 ae 75 ff ff       	call   c001391c <Directory::close()>
c001c36e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c373:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	31 c0                	xor    eax,eax
c001c37b:	59                   	pop    ecx
c001c37c:	85 f6                	test   esi,esi
c001c37e:	5b                   	pop    ebx
c001c37f:	0f 95 c0             	setne  al
c001c382:	5e                   	pop    esi
c001c383:	31 d2                	xor    edx,edx
c001c385:	f7 d8                	neg    eax
c001c387:	83 d2 00             	adc    edx,0x0
c001c38a:	f7 da                	neg    edx
c001c38c:	c3                   	ret    
c001c38d:	59                   	pop    ecx
c001c38e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c393:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c398:	5b                   	pop    ebx
c001c399:	5e                   	pop    esi
c001c39a:	c3                   	ret    

c001c39b <sysCallWait(regs*)>:
c001c39b:	83 ec 10             	sub    esp,0x10
c001c39e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3a2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c3a5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c3a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c3ab:	e8 c8 25 00 00       	call   c001e978 <waitTask(int, int*, int)>
c001c3b0:	83 c4 1c             	add    esp,0x1c
c001c3b3:	99                   	cdq    
c001c3b4:	c3                   	ret    

c001c3b5 <sysCallNotImpl(regs*)>:
c001c3b5:	83 ec 18             	sub    esp,0x18
c001c3b8:	68 16 cf 02 c0       	push   0xc002cf16
c001c3bd:	e8 d7 e5 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001c3c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3cc:	83 c4 1c             	add    esp,0x1c
c001c3cf:	c3                   	ret    

c001c3d0 <sysPanic(regs*)>:
c001c3d0:	83 ec 18             	sub    esp,0x18
c001c3d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3d7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c3da:	e8 ba e5 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001c3df:	c7 04 24 30 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf30
c001c3e6:	e8 ae e5 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001c3eb:	b8 01 00 00 00       	mov    eax,0x1
c001c3f0:	31 d2                	xor    edx,edx
c001c3f2:	83 c4 1c             	add    esp,0x1c
c001c3f5:	c3                   	ret    

c001c3f6 <sysCallRmdir(regs*)>:
c001c3f6:	56                   	push   esi
c001c3f7:	53                   	push   ebx
c001c3f8:	83 ec 20             	sub    esp,0x20
c001c3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3ff:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c402:	68 14 01 00 00       	push   0x114
c001c407:	e8 80 34 ff ff       	call   c000f88c <malloc>
c001c40c:	83 c4 0c             	add    esp,0xc
c001c40f:	89 c3                	mov    ebx,eax
c001c411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c416:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c419:	56                   	push   esi
c001c41a:	53                   	push   ebx
c001c41b:	e8 90 6f ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001c420:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c423:	e8 64 71 ff ff       	call   c001358c <File::unlink()>
c001c428:	83 c4 10             	add    esp,0x10
c001c42b:	85 db                	test   ebx,ebx
c001c42d:	74 14                	je     c001c443 <sysCallRmdir(regs*)+0x4d>
c001c42f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c433:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c435:	83 ec 0c             	sub    esp,0xc
c001c438:	53                   	push   ebx
c001c439:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c43c:	83 c4 10             	add    esp,0x10
c001c43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c443:	85 c0                	test   eax,eax
c001c445:	0f 95 c0             	setne  al
c001c448:	31 d2                	xor    edx,edx
c001c44a:	0f b6 c0             	movzx  eax,al
c001c44d:	f7 d8                	neg    eax
c001c44f:	83 d2 00             	adc    edx,0x0
c001c452:	83 c4 14             	add    esp,0x14
c001c455:	f7 da                	neg    edx
c001c457:	5b                   	pop    ebx
c001c458:	5e                   	pop    esi
c001c459:	c3                   	ret    

c001c45a <sysCallUnlink(regs*)>:
c001c45a:	56                   	push   esi
c001c45b:	53                   	push   ebx
c001c45c:	83 ec 20             	sub    esp,0x20
c001c45f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c463:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c466:	68 14 01 00 00       	push   0x114
c001c46b:	e8 1c 34 ff ff       	call   c000f88c <malloc>
c001c470:	83 c4 0c             	add    esp,0xc
c001c473:	89 c3                	mov    ebx,eax
c001c475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c47a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c47d:	56                   	push   esi
c001c47e:	53                   	push   ebx
c001c47f:	e8 2c 6f ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001c484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c487:	e8 00 71 ff ff       	call   c001358c <File::unlink()>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	85 db                	test   ebx,ebx
c001c491:	74 14                	je     c001c4a7 <sysCallUnlink(regs*)+0x4d>
c001c493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c497:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c499:	83 ec 0c             	sub    esp,0xc
c001c49c:	53                   	push   ebx
c001c49d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c4a0:	83 c4 10             	add    esp,0x10
c001c4a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4a7:	85 c0                	test   eax,eax
c001c4a9:	0f 95 c0             	setne  al
c001c4ac:	31 d2                	xor    edx,edx
c001c4ae:	0f b6 c0             	movzx  eax,al
c001c4b1:	f7 d8                	neg    eax
c001c4b3:	83 d2 00             	adc    edx,0x0
c001c4b6:	83 c4 14             	add    esp,0x14
c001c4b9:	f7 da                	neg    edx
c001c4bb:	5b                   	pop    ebx
c001c4bc:	5e                   	pop    esi
c001c4bd:	c3                   	ret    

c001c4be <sysCallGetArgv(regs*)>:
c001c4be:	83 ec 0c             	sub    esp,0xc
c001c4c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4c5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c4c8:	85 c0                	test   eax,eax
c001c4ca:	78 2b                	js     c001c4f7 <sysCallGetArgv(regs*)+0x39>
c001c4cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c4d2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c4d5:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c4db:	7d 1a                	jge    c001c4f7 <sysCallGetArgv(regs*)+0x39>
c001c4dd:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c4e4:	85 c0                	test   eax,eax
c001c4e6:	74 17                	je     c001c4ff <sysCallGetArgv(regs*)+0x41>
c001c4e8:	83 ec 08             	sub    esp,0x8
c001c4eb:	50                   	push   eax
c001c4ec:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c4ef:	e8 18 43 fe ff       	call   c000080c <strcpy>
c001c4f4:	83 c4 10             	add    esp,0x10
c001c4f7:	31 c0                	xor    eax,eax
c001c4f9:	31 d2                	xor    edx,edx
c001c4fb:	83 c4 0c             	add    esp,0xc
c001c4fe:	c3                   	ret    
c001c4ff:	b8 01 00 00 00       	mov    eax,0x1
c001c504:	31 d2                	xor    edx,edx
c001c506:	83 c4 0c             	add    esp,0xc
c001c509:	c3                   	ret    

c001c50a <sysCallTTYName(regs*)>:
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	53                   	push   ebx
c001c50d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c511:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c514:	85 c0                	test   eax,eax
c001c516:	74 5f                	je     c001c577 <sysCallTTYName(regs*)+0x6d>
c001c518:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c51b:	83 f8 02             	cmp    eax,0x2
c001c51e:	77 3e                	ja     c001c55e <sysCallTTYName(regs*)+0x54>
c001c520:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c525:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c528:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c52e:	85 db                	test   ebx,ebx
c001c530:	74 45                	je     c001c577 <sysCallTTYName(regs*)+0x6d>
c001c532:	83 ec 0c             	sub    esp,0xc
c001c535:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c537:	53                   	push   ebx
c001c538:	ff 10                	call   DWORD PTR [eax]
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	84 c0                	test   al,al
c001c53f:	74 41                	je     c001c582 <sysCallTTYName(regs*)+0x78>
c001c541:	83 ec 08             	sub    esp,0x8
c001c544:	81 c3 82 00 00 00    	add    ebx,0x82
c001c54a:	53                   	push   ebx
c001c54b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c54e:	e8 b9 42 fe ff       	call   c000080c <strcpy>
c001c553:	83 c4 10             	add    esp,0x10
c001c556:	31 c0                	xor    eax,eax
c001c558:	59                   	pop    ecx
c001c559:	31 d2                	xor    edx,edx
c001c55b:	5b                   	pop    ebx
c001c55c:	5e                   	pop    esi
c001c55d:	c3                   	ret    
c001c55e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c563:	74 bb                	je     c001c520 <sysCallTTYName(regs*)+0x16>
c001c565:	83 ec 0c             	sub    esp,0xc
c001c568:	50                   	push   eax
c001c569:	e8 6d 53 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	89 c3                	mov    ebx,eax
c001c573:	85 db                	test   ebx,ebx
c001c575:	75 bb                	jne    c001c532 <sysCallTTYName(regs*)+0x28>
c001c577:	59                   	pop    ecx
c001c578:	b8 01 00 00 00       	mov    eax,0x1
c001c57d:	31 d2                	xor    edx,edx
c001c57f:	5b                   	pop    ebx
c001c580:	5e                   	pop    esi
c001c581:	c3                   	ret    
c001c582:	59                   	pop    ecx
c001c583:	b8 02 00 00 00       	mov    eax,0x2
c001c588:	31 d2                	xor    edx,edx
c001c58a:	5b                   	pop    ebx
c001c58b:	5e                   	pop    esi
c001c58c:	c3                   	ret    

c001c58d <sysCallUSleep(regs*)>:
c001c58d:	83 ec 14             	sub    esp,0x14
c001c590:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c595:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c599:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c5a0:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c5a3:	01 ca                	add    edx,ecx
c001c5a5:	52                   	push   edx
c001c5a6:	50                   	push   eax
c001c5a7:	e8 a3 24 00 00       	call   c001ea4f <nanoSleep(unsigned long long)>
c001c5ac:	31 c0                	xor    eax,eax
c001c5ae:	31 d2                	xor    edx,edx
c001c5b0:	83 c4 1c             	add    esp,0x1c
c001c5b3:	c3                   	ret    

c001c5b4 <sysCallSpawn(regs*)>:
c001c5b4:	56                   	push   esi
c001c5b5:	53                   	push   ebx
c001c5b6:	50                   	push   eax
c001c5b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c5be:	85 c0                	test   eax,eax
c001c5c0:	75 08                	jne    c001c5ca <sysCallSpawn(regs*)+0x16>
c001c5c2:	59                   	pop    ecx
c001c5c3:	31 c0                	xor    eax,eax
c001c5c5:	31 d2                	xor    edx,edx
c001c5c7:	5b                   	pop    ebx
c001c5c8:	5e                   	pop    esi
c001c5c9:	c3                   	ret    
c001c5ca:	83 ec 08             	sub    esp,0x8
c001c5cd:	50                   	push   eax
c001c5ce:	68 3f cf 02 c0       	push   0xc002cf3f
c001c5d3:	e8 79 68 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c5d8:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c5df:	e8 a8 32 ff ff       	call   c000f88c <malloc>
c001c5e4:	83 c4 10             	add    esp,0x10
c001c5e7:	89 c6                	mov    esi,eax
c001c5e9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5ef:	85 c0                	test   eax,eax
c001c5f1:	75 32                	jne    c001c625 <sysCallSpawn(regs*)+0x71>
c001c5f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5fb:	52                   	push   edx
c001c5fc:	50                   	push   eax
c001c5fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c600:	56                   	push   esi
c001c601:	e8 26 1b 00 00       	call   c001e12c <Process::Process(char const*, Process*, char**)>
c001c606:	83 c4 10             	add    esp,0x10
c001c609:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c610:	75 b0                	jne    c001c5c2 <sysCallSpawn(regs*)+0xe>
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	56                   	push   esi
c001c616:	e8 f3 1f 00 00       	call   c001e60e <Process::createUserThread()>
c001c61b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c61d:	83 c4 10             	add    esp,0x10
c001c620:	99                   	cdq    
c001c621:	59                   	pop    ecx
c001c622:	5b                   	pop    ebx
c001c623:	5e                   	pop    esi
c001c624:	c3                   	ret    
c001c625:	31 c0                	xor    eax,eax
c001c627:	eb d2                	jmp    c001c5fb <sysCallSpawn(regs*)+0x47>

c001c629 <sysCallGetEnv(regs*)>:
c001c629:	55                   	push   ebp
c001c62a:	57                   	push   edi
c001c62b:	56                   	push   esi
c001c62c:	53                   	push   ebx
c001c62d:	83 ec 28             	sub    esp,0x28
c001c630:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c634:	68 4d cf 02 c0       	push   0xc002cf4d
c001c639:	e8 13 68 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c63e:	5f                   	pop    edi
c001c63f:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c642:	5d                   	pop    ebp
c001c643:	53                   	push   ebx
c001c644:	68 7a d2 02 c0       	push   0xc002d27a
c001c649:	e8 03 68 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c64e:	58                   	pop    eax
c001c64f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c652:	5a                   	pop    edx
c001c653:	57                   	push   edi
c001c654:	68 56 cf 02 c0       	push   0xc002cf56
c001c659:	e8 f3 67 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c65e:	59                   	pop    ecx
c001c65f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c664:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c667:	e8 49 e2 ff ff       	call   c001a8b5 <Krnl::getProcessTotalEnvCount(Process*)>
c001c66c:	5a                   	pop    edx
c001c66d:	89 c5                	mov    ebp,eax
c001c66f:	59                   	pop    ecx
c001c670:	50                   	push   eax
c001c671:	68 60 cf 02 c0       	push   0xc002cf60
c001c676:	e8 d6 67 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	39 ef                	cmp    edi,ebp
c001c680:	7c 15                	jl     c001c697 <sysCallGetEnv(regs*)+0x6e>
c001c682:	85 db                	test   ebx,ebx
c001c684:	75 0c                	jne    c001c692 <sysCallGetEnv(regs*)+0x69>
c001c686:	83 c4 1c             	add    esp,0x1c
c001c689:	31 c0                	xor    eax,eax
c001c68b:	5b                   	pop    ebx
c001c68c:	31 d2                	xor    edx,edx
c001c68e:	5e                   	pop    esi
c001c68f:	5f                   	pop    edi
c001c690:	5d                   	pop    ebp
c001c691:	c3                   	ret    
c001c692:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c695:	eb ef                	jmp    c001c686 <sysCallGetEnv(regs*)+0x5d>
c001c697:	83 ec 0c             	sub    esp,0xc
c001c69a:	68 6c cf 02 c0       	push   0xc002cf6c
c001c69f:	e8 ad 67 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c6a4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6a8:	83 c4 0c             	add    esp,0xc
c001c6ab:	57                   	push   edi
c001c6ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c6b2:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c6b5:	50                   	push   eax
c001c6b6:	e8 1a e2 ff ff       	call   c001a8d5 <Krnl::getProcessEnvPair(Process*, int)>
c001c6bb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c6bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c6c3:	68 2b d3 02 c0       	push   0xc002d32b
c001c6c8:	e8 84 67 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c6d3:	85 f6                	test   esi,esi
c001c6d5:	75 47                	jne    c001c71e <sysCallGetEnv(regs*)+0xf5>
c001c6d7:	83 ec 0c             	sub    esp,0xc
c001c6da:	55                   	push   ebp
c001c6db:	e8 8c 40 fe ff       	call   c000076c <strlen>
c001c6e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6e3:	89 c3                	mov    ebx,eax
c001c6e5:	e8 82 40 fe ff       	call   c000076c <strlen>
c001c6ea:	5a                   	pop    edx
c001c6eb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c6ef:	59                   	pop    ecx
c001c6f0:	50                   	push   eax
c001c6f1:	68 6f cf 02 c0       	push   0xc002cf6f
c001c6f6:	e8 56 67 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c6fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6fe:	e8 69 40 fe ff       	call   c000076c <strlen>
c001c703:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c706:	89 c3                	mov    ebx,eax
c001c708:	e8 5f 40 fe ff       	call   c000076c <strlen>
c001c70d:	83 c4 10             	add    esp,0x10
c001c710:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c714:	83 c4 1c             	add    esp,0x1c
c001c717:	31 d2                	xor    edx,edx
c001c719:	5b                   	pop    ebx
c001c71a:	5e                   	pop    esi
c001c71b:	5f                   	pop    edi
c001c71c:	5d                   	pop    ebp
c001c71d:	c3                   	ret    
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	68 45 d3 02 c0       	push   0xc002d345
c001c726:	e8 26 67 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c72b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c72e:	58                   	pop    eax
c001c72f:	5a                   	pop    edx
c001c730:	55                   	push   ebp
c001c731:	53                   	push   ebx
c001c732:	e8 d5 40 fe ff       	call   c000080c <strcpy>
c001c737:	59                   	pop    ecx
c001c738:	5e                   	pop    esi
c001c739:	68 79 cf 02 c0       	push   0xc002cf79
c001c73e:	53                   	push   ebx
c001c73f:	e8 08 42 fe ff       	call   c000094c <strcat>
c001c744:	5d                   	pop    ebp
c001c745:	58                   	pop    eax
c001c746:	57                   	push   edi
c001c747:	53                   	push   ebx
c001c748:	e8 ff 41 fe ff       	call   c000094c <strcat>
c001c74d:	c7 04 24 5f d3 02 c0 	mov    DWORD PTR [esp],0xc002d35f
c001c754:	e8 f8 66 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001c759:	83 c4 10             	add    esp,0x10
c001c75c:	e9 25 ff ff ff       	jmp    c001c686 <sysCallGetEnv(regs*)+0x5d>

c001c761 <sysAppSettings(regs*)>:
c001c761:	57                   	push   edi
c001c762:	56                   	push   esi
c001c763:	56                   	push   esi
c001c764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c768:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c76b:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c771:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c776:	66 3d c0 09          	cmp    ax,0x9c0
c001c77a:	75 2e                	jne    c001c7aa <sysAppSettings(regs*)+0x49>
c001c77c:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c782:	83 e0 1f             	and    eax,0x1f
c001c785:	3c 01                	cmp    al,0x1
c001c787:	74 2c                	je     c001c7b5 <sysAppSettings(regs*)+0x54>
c001c789:	3c 07                	cmp    al,0x7
c001c78b:	0f 84 b3 00 00 00    	je     c001c844 <sysAppSettings(regs*)+0xe3>
c001c791:	84 c0                	test   al,al
c001c793:	0f 84 d2 00 00 00    	je     c001c86b <sysAppSettings(regs*)+0x10a>
c001c799:	3c 08                	cmp    al,0x8
c001c79b:	74 63                	je     c001c800 <sysAppSettings(regs*)+0x9f>
c001c79d:	59                   	pop    ecx
c001c79e:	0f b6 c0             	movzx  eax,al
c001c7a1:	5e                   	pop    esi
c001c7a2:	05 e8 03 00 00       	add    eax,0x3e8
c001c7a7:	5f                   	pop    edi
c001c7a8:	99                   	cdq    
c001c7a9:	c3                   	ret    
c001c7aa:	b8 01 00 00 00       	mov    eax,0x1
c001c7af:	59                   	pop    ecx
c001c7b0:	31 d2                	xor    edx,edx
c001c7b2:	5e                   	pop    esi
c001c7b3:	5f                   	pop    edi
c001c7b4:	c3                   	ret    
c001c7b5:	50                   	push   eax
c001c7b6:	68 00 01 00 00       	push   0x100
c001c7bb:	6a 00                	push   0x0
c001c7bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7c5:	83 c0 0c             	add    eax,0xc
c001c7c8:	50                   	push   eax
c001c7c9:	e8 82 3f fe ff       	call   c0000750 <memset>
c001c7ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7d3:	b9 ff 00 00 00       	mov    ecx,0xff
c001c7d8:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c7db:	83 c7 0c             	add    edi,0xc
c001c7de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7e5:	5a                   	pop    edx
c001c7e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7e9:	59                   	pop    ecx
c001c7ea:	8d 50 0c             	lea    edx,[eax+0xc]
c001c7ed:	52                   	push   edx
c001c7ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c7f4:	e8 0d 43 ff ff       	call   c0010b06 <VgaText::setTitle(char*)>
c001c7f9:	83 c4 10             	add    esp,0x10
c001c7fc:	31 c0                	xor    eax,eax
c001c7fe:	eb af                	jmp    c001c7af <sysAppSettings(regs*)+0x4e>
c001c800:	83 ec 08             	sub    esp,0x8
c001c803:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c809:	83 e0 0f             	and    eax,0xf
c001c80c:	50                   	push   eax
c001c80d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c812:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c815:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c81b:	e8 d8 42 ff ff       	call   c0010af8 <VgaText::setTitleColour(VgaColour)>
c001c820:	5f                   	pop    edi
c001c821:	58                   	pop    eax
c001c822:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c828:	c1 e8 04             	shr    eax,0x4
c001c82b:	83 e0 0f             	and    eax,0xf
c001c82e:	50                   	push   eax
c001c82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c837:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c83d:	e8 a8 42 ff ff       	call   c0010aea <VgaText::setTitleTextColour(VgaColour)>
c001c842:	eb b5                	jmp    c001c7f9 <sysAppSettings(regs*)+0x98>
c001c844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c849:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c84c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c852:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c858:	c0 e8 06             	shr    al,0x6
c001c85b:	83 e0 01             	and    eax,0x1
c001c85e:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c864:	31 c0                	xor    eax,eax
c001c866:	e9 44 ff ff ff       	jmp    c001c7af <sysAppSettings(regs*)+0x4e>
c001c86b:	b8 02 00 00 00       	mov    eax,0x2
c001c870:	e9 3a ff ff ff       	jmp    c001c7af <sysAppSettings(regs*)+0x4e>

c001c875 <sysSetFatAttrib(regs*)>:
c001c875:	57                   	push   edi
c001c876:	56                   	push   esi
c001c877:	53                   	push   ebx
c001c878:	83 ec 1c             	sub    esp,0x1c
c001c87b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c87f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c882:	68 14 01 00 00       	push   0x114
c001c887:	e8 00 30 ff ff       	call   c000f88c <malloc>
c001c88c:	83 c4 0c             	add    esp,0xc
c001c88f:	89 c3                	mov    ebx,eax
c001c891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c896:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c899:	57                   	push   edi
c001c89a:	53                   	push   ebx
c001c89b:	e8 10 6b ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001c8a0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c8a3:	83 c4 0c             	add    esp,0xc
c001c8a6:	0f b6 d4             	movzx  edx,ah
c001c8a9:	0f b6 c0             	movzx  eax,al
c001c8ac:	52                   	push   edx
c001c8ad:	50                   	push   eax
c001c8ae:	53                   	push   ebx
c001c8af:	e8 72 6d ff ff       	call   c0013626 <File::chfatattr(unsigned char, unsigned char)>
c001c8b4:	83 c4 10             	add    esp,0x10
c001c8b7:	85 db                	test   ebx,ebx
c001c8b9:	74 14                	je     c001c8cf <sysSetFatAttrib(regs*)+0x5a>
c001c8bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c8c1:	83 ec 0c             	sub    esp,0xc
c001c8c4:	53                   	push   ebx
c001c8c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8cf:	85 c0                	test   eax,eax
c001c8d1:	0f 95 c0             	setne  al
c001c8d4:	31 d2                	xor    edx,edx
c001c8d6:	0f b6 c0             	movzx  eax,al
c001c8d9:	f7 d8                	neg    eax
c001c8db:	83 d2 00             	adc    edx,0x0
c001c8de:	83 c4 10             	add    esp,0x10
c001c8e1:	f7 da                	neg    edx
c001c8e3:	5b                   	pop    ebx
c001c8e4:	5e                   	pop    esi
c001c8e5:	5f                   	pop    edi
c001c8e6:	c3                   	ret    

c001c8e7 <sysPipe(regs*)>:
c001c8e7:	57                   	push   edi
c001c8e8:	56                   	push   esi
c001c8e9:	53                   	push   ebx
c001c8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ee:	83 ec 0c             	sub    esp,0xc
c001c8f1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c8f4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c8f7:	6a 20                	push   0x20
c001c8f9:	e8 8e 2f ff ff       	call   c000f88c <malloc>
c001c8fe:	89 c3                	mov    ebx,eax
c001c900:	58                   	pop    eax
c001c901:	5a                   	pop    edx
c001c902:	68 00 50 00 00       	push   0x5000
c001c907:	53                   	push   ebx
c001c908:	e8 a1 3b ff ff       	call   c00104ae <Pipe::Pipe(int)>
c001c90d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c910:	e8 d1 4c ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c915:	89 07                	mov    DWORD PTR [edi],eax
c001c917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c91a:	e8 c7 4c ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	89 06                	mov    DWORD PTR [esi],eax
c001c924:	31 d2                	xor    edx,edx
c001c926:	5b                   	pop    ebx
c001c927:	31 c0                	xor    eax,eax
c001c929:	5e                   	pop    esi
c001c92a:	5f                   	pop    edi
c001c92b:	c3                   	ret    

c001c92c <sysGetUnixTime(regs*)>:
c001c92c:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001c931:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c937:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c93b:	e9 62 74 ff ff       	jmp    c0013da2 <Clock::timeInSecondsLocal()>

c001c940 <string_ends_with(char const*, char const*)>:
c001c940:	57                   	push   edi
c001c941:	56                   	push   esi
c001c942:	53                   	push   ebx
c001c943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c947:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	53                   	push   ebx
c001c94f:	e8 18 3e fe ff       	call   c000076c <strlen>
c001c954:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c957:	89 c6                	mov    esi,eax
c001c959:	e8 0e 3e fe ff       	call   c000076c <strlen>
c001c95e:	83 c4 10             	add    esp,0x10
c001c961:	39 c6                	cmp    esi,eax
c001c963:	7d 06                	jge    c001c96b <string_ends_with(char const*, char const*)+0x2b>
c001c965:	5b                   	pop    ebx
c001c966:	31 c0                	xor    eax,eax
c001c968:	5e                   	pop    esi
c001c969:	5f                   	pop    edi
c001c96a:	c3                   	ret    
c001c96b:	83 ec 08             	sub    esp,0x8
c001c96e:	29 c6                	sub    esi,eax
c001c970:	57                   	push   edi
c001c971:	01 f3                	add    ebx,esi
c001c973:	53                   	push   ebx
c001c974:	e8 1f 3f fe ff       	call   c0000898 <strcmp>
c001c979:	83 c4 10             	add    esp,0x10
c001c97c:	85 c0                	test   eax,eax
c001c97e:	5b                   	pop    ebx
c001c97f:	0f 94 c0             	sete   al
c001c982:	5e                   	pop    esi
c001c983:	0f b6 c0             	movzx  eax,al
c001c986:	5f                   	pop    edi
c001c987:	c3                   	ret    

c001c988 <sysCallOpen(regs*)>:
c001c988:	56                   	push   esi
c001c989:	53                   	push   ebx
c001c98a:	81 ec 04 01 00 00    	sub    esp,0x104
c001c990:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c997:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c99a:	85 c9                	test   ecx,ecx
c001c99c:	0f 84 b3 00 00 00    	je     c001ca55 <sysCallOpen(regs*)+0xcd>
c001c9a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c9a5:	85 c0                	test   eax,eax
c001c9a7:	0f 84 a8 00 00 00    	je     c001ca55 <sysCallOpen(regs*)+0xcd>
c001c9ad:	52                   	push   edx
c001c9ae:	68 7b cf 02 c0       	push   0xc002cf7b
c001c9b3:	50                   	push   eax
c001c9b4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c9b8:	56                   	push   esi
c001c9b9:	e8 48 68 ff ff       	call   c0013206 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c9be:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9c1:	e8 a6 3d fe ff       	call   c000076c <strlen>
c001c9c6:	83 c4 10             	add    esp,0x10
c001c9c9:	48                   	dec    eax
c001c9ca:	74 1d                	je     c001c9e9 <sysCallOpen(regs*)+0x61>
c001c9cc:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c9cf:	eb 0f                	jmp    c001c9e0 <sysCallOpen(regs*)+0x58>
c001c9d1:	80 fa 3a             	cmp    dl,0x3a
c001c9d4:	74 0f                	je     c001c9e5 <sysCallOpen(regs*)+0x5d>
c001c9d6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c9da:	48                   	dec    eax
c001c9db:	74 0c                	je     c001c9e9 <sysCallOpen(regs*)+0x61>
c001c9dd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c9e0:	80 fa 2e             	cmp    dl,0x2e
c001c9e3:	75 ec                	jne    c001c9d1 <sysCallOpen(regs*)+0x49>
c001c9e5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c9e9:	83 ec 08             	sub    esp,0x8
c001c9ec:	68 7f cf 02 c0       	push   0xc002cf7f
c001c9f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9f4:	e8 47 ff ff ff       	call   c001c940 <string_ends_with(char const*, char const*)>
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	85 c0                	test   eax,eax
c001c9fe:	75 17                	jne    c001ca17 <sysCallOpen(regs*)+0x8f>
c001ca00:	83 ec 08             	sub    esp,0x8
c001ca03:	68 a0 cf 02 c0       	push   0xc002cfa0
c001ca08:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca0b:	e8 30 ff ff ff       	call   c001c940 <string_ends_with(char const*, char const*)>
c001ca10:	83 c4 10             	add    esp,0x10
c001ca13:	85 c0                	test   eax,eax
c001ca15:	74 51                	je     c001ca68 <sysCallOpen(regs*)+0xe0>
c001ca17:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca1a:	83 ec 08             	sub    esp,0x8
c001ca1d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001ca23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca2d:	ff 30                	push   DWORD PTR [eax]
c001ca2f:	68 84 cf 02 c0       	push   0xc002cf84
c001ca34:	e8 18 64 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ca39:	c7 04 24 93 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf93
c001ca40:	e8 0c 64 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ca45:	83 c4 10             	add    esp,0x10
c001ca48:	81 c4 04 01 00 00    	add    esp,0x104
c001ca4e:	31 c0                	xor    eax,eax
c001ca50:	31 d2                	xor    edx,edx
c001ca52:	5b                   	pop    ebx
c001ca53:	5e                   	pop    esi
c001ca54:	c3                   	ret    
c001ca55:	81 c4 04 01 00 00    	add    esp,0x104
c001ca5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ca60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ca65:	5b                   	pop    ebx
c001ca66:	5e                   	pop    esi
c001ca67:	c3                   	ret    
c001ca68:	83 ec 08             	sub    esp,0x8
c001ca6b:	68 80 cf 02 c0       	push   0xc002cf80
c001ca70:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca73:	e8 20 3e fe ff       	call   c0000898 <strcmp>
c001ca78:	83 c4 10             	add    esp,0x10
c001ca7b:	85 c0                	test   eax,eax
c001ca7d:	74 98                	je     c001ca17 <sysCallOpen(regs*)+0x8f>
c001ca7f:	83 ec 08             	sub    esp,0x8
c001ca82:	68 7f cf 02 c0       	push   0xc002cf7f
c001ca87:	56                   	push   esi
c001ca88:	e8 b3 fe ff ff       	call   c001c940 <string_ends_with(char const*, char const*)>
c001ca8d:	83 c4 10             	add    esp,0x10
c001ca90:	85 c0                	test   eax,eax
c001ca92:	75 83                	jne    c001ca17 <sysCallOpen(regs*)+0x8f>
c001ca94:	83 ec 08             	sub    esp,0x8
c001ca97:	68 a5 cf 02 c0       	push   0xc002cfa5
c001ca9c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca9f:	e8 9c fe ff ff       	call   c001c940 <string_ends_with(char const*, char const*)>
c001caa4:	83 c4 10             	add    esp,0x10
c001caa7:	85 c0                	test   eax,eax
c001caa9:	0f 85 d9 00 00 00    	jne    c001cb88 <sysCallOpen(regs*)+0x200>
c001caaf:	83 ec 08             	sub    esp,0x8
c001cab2:	68 aa cf 02 c0       	push   0xc002cfaa
c001cab7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001caba:	e8 81 fe ff ff       	call   c001c940 <string_ends_with(char const*, char const*)>
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	85 c0                	test   eax,eax
c001cac4:	0f 85 be 00 00 00    	jne    c001cb88 <sysCallOpen(regs*)+0x200>
c001caca:	83 ec 08             	sub    esp,0x8
c001cacd:	68 a6 cf 02 c0       	push   0xc002cfa6
c001cad2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cad5:	e8 be 3d fe ff       	call   c0000898 <strcmp>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	85 c0                	test   eax,eax
c001cadf:	0f 84 a3 00 00 00    	je     c001cb88 <sysCallOpen(regs*)+0x200>
c001cae5:	83 ec 08             	sub    esp,0x8
c001cae8:	68 a5 cf 02 c0       	push   0xc002cfa5
c001caed:	56                   	push   esi
c001caee:	e8 4d fe ff ff       	call   c001c940 <string_ends_with(char const*, char const*)>
c001caf3:	83 c4 10             	add    esp,0x10
c001caf6:	85 c0                	test   eax,eax
c001caf8:	0f 85 8a 00 00 00    	jne    c001cb88 <sysCallOpen(regs*)+0x200>
c001cafe:	83 ec 0c             	sub    esp,0xc
c001cb01:	68 14 01 00 00       	push   0x114
c001cb06:	e8 81 2d ff ff       	call   c000f88c <malloc>
c001cb0b:	83 c4 0c             	add    esp,0xc
c001cb0e:	89 c6                	mov    esi,eax
c001cb10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb15:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001cb18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cb1b:	56                   	push   esi
c001cb1c:	e8 8f 68 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	85 f6                	test   esi,esi
c001cb26:	0f 84 29 ff ff ff    	je     c001ca55 <sysCallOpen(regs*)+0xcd>
c001cb2c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001cb2f:	0f b6 c2             	movzx  eax,dl
c001cb32:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001cb35:	89 d0                	mov    eax,edx
c001cb37:	83 e0 01             	and    eax,0x1
c001cb3a:	f6 c2 02             	test   dl,0x2
c001cb3d:	74 03                	je     c001cb42 <sysCallOpen(regs*)+0x1ba>
c001cb3f:	83 c8 02             	or     eax,0x2
c001cb42:	f6 c2 04             	test   dl,0x4
c001cb45:	74 03                	je     c001cb4a <sysCallOpen(regs*)+0x1c2>
c001cb47:	83 c8 04             	or     eax,0x4
c001cb4a:	f6 c2 08             	test   dl,0x8
c001cb4d:	74 03                	je     c001cb52 <sysCallOpen(regs*)+0x1ca>
c001cb4f:	83 c8 0a             	or     eax,0xa
c001cb52:	83 e2 10             	and    edx,0x10
c001cb55:	74 03                	je     c001cb5a <sysCallOpen(regs*)+0x1d2>
c001cb57:	83 c8 12             	or     eax,0x12
c001cb5a:	83 ec 08             	sub    esp,0x8
c001cb5d:	50                   	push   eax
c001cb5e:	56                   	push   esi
c001cb5f:	e8 b0 68 ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001cb64:	83 c4 10             	add    esp,0x10
c001cb67:	85 c0                	test   eax,eax
c001cb69:	0f 85 e6 fe ff ff    	jne    c001ca55 <sysCallOpen(regs*)+0xcd>
c001cb6f:	83 ec 0c             	sub    esp,0xc
c001cb72:	56                   	push   esi
c001cb73:	e8 6e 4a ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001cb78:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cb7b:	89 02                	mov    DWORD PTR [edx],eax
c001cb7d:	c1 f8 1f             	sar    eax,0x1f
c001cb80:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb83:	e9 bd fe ff ff       	jmp    c001ca45 <sysCallOpen(regs*)+0xbd>
c001cb88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb8b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001cb91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb98:	e9 ab fe ff ff       	jmp    c001ca48 <sysCallOpen(regs*)+0xc0>

c001cb9d <Sys::loadSyscalls()>:
c001cb9d:	c7 05 e0 20 03 c0 8d bc 01 c0 	mov    DWORD PTR ds:0xc00320e0,0xc001bc8d
c001cba7:	c7 05 e4 20 03 c0 f2 b7 01 c0 	mov    DWORD PTR ds:0xc00320e4,0xc001b7f2
c001cbb1:	c7 05 e8 20 03 c0 e0 b9 01 c0 	mov    DWORD PTR ds:0xc00320e8,0xc001b9e0
c001cbbb:	c7 05 ec 20 03 c0 c3 bb 01 c0 	mov    DWORD PTR ds:0xc00320ec,0xc001bbc3
c001cbc5:	c7 05 f0 20 03 c0 78 b9 01 c0 	mov    DWORD PTR ds:0xc00320f0,0xc001b978
c001cbcf:	c7 05 f4 20 03 c0 29 b8 01 c0 	mov    DWORD PTR ds:0xc00320f4,0xc001b829
c001cbd9:	c7 05 f8 20 03 c0 0a b8 01 c0 	mov    DWORD PTR ds:0xc00320f8,0xc001b80a
c001cbe3:	c7 05 fc 20 03 c0 35 ba 01 c0 	mov    DWORD PTR ds:0xc00320fc,0xc001ba35
c001cbed:	c7 05 04 21 03 c0 c8 c1 01 c0 	mov    DWORD PTR ds:0xc0032104,0xc001c1c8
c001cbf7:	c7 05 00 21 03 c0 88 c9 01 c0 	mov    DWORD PTR ds:0xc0032100,0xc001c988
c001cc01:	c7 05 08 21 03 c0 50 c2 01 c0 	mov    DWORD PTR ds:0xc0032108,0xc001c250
c001cc0b:	c7 05 0c 21 03 c0 b7 be 01 c0 	mov    DWORD PTR ds:0xc003210c,0xc001beb7
c001cc15:	c7 05 10 21 03 c0 d3 bc 01 c0 	mov    DWORD PTR ds:0xc0032110,0xc001bcd3
c001cc1f:	c7 05 14 21 03 c0 d8 bc 01 c0 	mov    DWORD PTR ds:0xc0032114,0xc001bcd8
c001cc29:	c7 05 18 21 03 c0 2b c3 01 c0 	mov    DWORD PTR ds:0xc0032118,0xc001c32b
c001cc33:	c7 05 1c 21 03 c0 c5 c2 01 c0 	mov    DWORD PTR ds:0xc003211c,0xc001c2c5
c001cc3d:	c7 05 20 21 03 c0 9f bf 01 c0 	mov    DWORD PTR ds:0xc0032120,0xc001bf9f
c001cc47:	c7 05 24 21 03 c0 08 c0 01 c0 	mov    DWORD PTR ds:0xc0032124,0xc001c008
c001cc51:	c7 05 28 21 03 c0 85 c0 01 c0 	mov    DWORD PTR ds:0xc0032128,0xc001c085
c001cc5b:	c7 05 2c 21 03 c0 dd bc 01 c0 	mov    DWORD PTR ds:0xc003212c,0xc001bcdd
c001cc65:	c7 05 30 21 03 c0 9b c3 01 c0 	mov    DWORD PTR ds:0xc0032130,0xc001c39b
c001cc6f:	c7 05 34 21 03 c0 b5 c3 01 c0 	mov    DWORD PTR ds:0xc0032134,0xc001c3b5
c001cc79:	c7 05 38 21 03 c0 b5 c3 01 c0 	mov    DWORD PTR ds:0xc0032138,0xc001c3b5
c001cc83:	c7 05 3c 21 03 c0 f6 c3 01 c0 	mov    DWORD PTR ds:0xc003213c,0xc001c3f6
c001cc8d:	c7 05 40 21 03 c0 5a c4 01 c0 	mov    DWORD PTR ds:0xc0032140,0xc001c45a
c001cc97:	c7 05 44 21 03 c0 89 be 01 c0 	mov    DWORD PTR ds:0xc0032144,0xc001be89
c001cca1:	c7 05 48 21 03 c0 be c4 01 c0 	mov    DWORD PTR ds:0xc0032148,0xc001c4be
c001ccab:	c7 05 4c 21 03 c0 46 be 01 c0 	mov    DWORD PTR ds:0xc003214c,0xc001be46
c001ccb5:	c7 05 50 21 03 c0 0a c5 01 c0 	mov    DWORD PTR ds:0xc0032150,0xc001c50a
c001ccbf:	c7 05 54 21 03 c0 45 bf 01 c0 	mov    DWORD PTR ds:0xc0032154,0xc001bf45
c001ccc9:	c7 05 58 21 03 c0 8d c5 01 c0 	mov    DWORD PTR ds:0xc0032158,0xc001c58d
c001ccd3:	c7 05 5c 21 03 c0 08 c1 01 c0 	mov    DWORD PTR ds:0xc003215c,0xc001c108
c001ccdd:	c7 05 60 21 03 c0 b4 c5 01 c0 	mov    DWORD PTR ds:0xc0032160,0xc001c5b4
c001cce7:	c7 05 64 21 03 c0 29 c6 01 c0 	mov    DWORD PTR ds:0xc0032164,0xc001c629
c001ccf1:	c7 05 68 21 03 c0 61 c7 01 c0 	mov    DWORD PTR ds:0xc0032168,0xc001c761
c001ccfb:	c7 05 6c 21 03 c0 e7 bc 01 c0 	mov    DWORD PTR ds:0xc003216c,0xc001bce7
c001cd05:	c7 05 70 21 03 c0 51 bd 01 c0 	mov    DWORD PTR ds:0xc0032170,0xc001bd51
c001cd0f:	c7 05 74 21 03 c0 97 bd 01 c0 	mov    DWORD PTR ds:0xc0032174,0xc001bd97
c001cd19:	c7 05 78 21 03 c0 75 c8 01 c0 	mov    DWORD PTR ds:0xc0032178,0xc001c875
c001cd23:	c7 05 7c 21 03 c0 d0 c3 01 c0 	mov    DWORD PTR ds:0xc003217c,0xc001c3d0
c001cd2d:	c7 05 80 21 03 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc0032180,0xc001bde8
c001cd37:	c7 05 84 21 03 c0 e7 c8 01 c0 	mov    DWORD PTR ds:0xc0032184,0xc001c8e7
c001cd41:	c7 05 88 21 03 c0 2c c9 01 c0 	mov    DWORD PTR ds:0xc0032188,0xc001c92c
c001cd4b:	c7 05 8c 21 03 c0 d0 b8 01 c0 	mov    DWORD PTR ds:0xc003218c,0xc001b8d0
c001cd55:	c7 05 90 21 03 c0 51 ba 01 c0 	mov    DWORD PTR ds:0xc0032190,0xc001ba51
c001cd5f:	c7 05 94 21 03 c0 79 bb 01 c0 	mov    DWORD PTR ds:0xc0032194,0xc001bb79
c001cd69:	c7 05 98 21 03 c0 bc b7 01 c0 	mov    DWORD PTR ds:0xc0032198,0xc001b7bc
c001cd73:	c7 05 9c 21 03 c0 2b bc 01 c0 	mov    DWORD PTR ds:0xc003219c,0xc001bc2b
c001cd7d:	c7 05 a0 21 03 c0 35 b8 01 c0 	mov    DWORD PTR ds:0xc00321a0,0xc001b835
c001cd87:	c7 05 a4 21 03 c0 4c b8 01 c0 	mov    DWORD PTR ds:0xc00321a4,0xc001b84c
c001cd91:	c3                   	ret    

c001cd92 <Sys::systemCall(regs*, void*)>:
c001cd92:	53                   	push   ebx
c001cd93:	83 ec 08             	sub    esp,0x8
c001cd96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd9a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd9d:	83 f8 7f             	cmp    eax,0x7f
c001cda0:	77 16                	ja     c001cdb8 <Sys::systemCall(regs*, void*)+0x26>
c001cda2:	8b 14 85 e0 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdf20]
c001cda9:	85 d2                	test   edx,edx
c001cdab:	74 0b                	je     c001cdb8 <Sys::systemCall(regs*, void*)+0x26>
c001cdad:	83 ec 0c             	sub    esp,0xc
c001cdb0:	53                   	push   ebx
c001cdb1:	ff d2                	call   edx
c001cdb3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cdb6:	eb 0d                	jmp    c001cdc5 <Sys::systemCall(regs*, void*)+0x33>
c001cdb8:	52                   	push   edx
c001cdb9:	52                   	push   edx
c001cdba:	50                   	push   eax
c001cdbb:	68 af cf 02 c0       	push   0xc002cfaf
c001cdc0:	e8 8c 60 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001cdc5:	83 c4 10             	add    esp,0x10
c001cdc8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cdcd:	31 d2                	xor    edx,edx
c001cdcf:	83 c4 08             	add    esp,0x8
c001cdd2:	5b                   	pop    ebx
c001cdd3:	c3                   	ret    

c001cdd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cdd4:	55                   	push   ebp
c001cdd5:	57                   	push   edi
c001cdd6:	56                   	push   esi
c001cdd7:	53                   	push   ebx
c001cdd8:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cdde:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cde5:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cdec:	85 c0                	test   eax,eax
c001cdee:	0f 95 c1             	setne  cl
c001cdf1:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cdf9:	0f 94 c2             	sete   dl
c001cdfc:	84 d1                	test   cl,dl
c001cdfe:	74 23                	je     c001ce23 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ce00:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001ce06:	74 1b                	je     c001ce23 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ce08:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ce0e:	89 da                	mov    edx,ebx
c001ce10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001ce16:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001ce1c:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001ce23:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001ce2a:	05 ff 0f 00 00       	add    eax,0xfff
c001ce2f:	83 ec 0c             	sub    esp,0xc
c001ce32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce36:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001ce3c:	c1 e8 0c             	shr    eax,0xc
c001ce3f:	89 fe                	mov    esi,edi
c001ce41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce45:	c1 ee 0c             	shr    esi,0xc
c001ce48:	6a 01                	push   0x1
c001ce4a:	e8 e2 4b ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001ce4f:	89 c5                	mov    ebp,eax
c001ce51:	58                   	pop    eax
c001ce52:	5a                   	pop    edx
c001ce53:	56                   	push   esi
c001ce54:	68 33 d0 02 c0       	push   0xc002d033
c001ce59:	e8 f3 5f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ce5e:	59                   	pop    ecx
c001ce5f:	58                   	pop    eax
c001ce60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce64:	68 45 d0 02 c0       	push   0xc002d045
c001ce69:	e8 e3 5f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ce6e:	83 c4 10             	add    esp,0x10
c001ce71:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001ce77:	0f 86 31 01 00 00    	jbe    c001cfae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001ce7d:	c1 e6 0c             	shl    esi,0xc
c001ce80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce83:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001ce86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce8a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001ce91:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ce94:	01 df                	add    edi,ebx
c001ce96:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001ce99:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001ce9d:	0f 84 08 01 00 00    	je     c001cfab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cea3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cea9:	76 05                	jbe    c001ceb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001ceab:	bf 00 10 00 00       	mov    edi,0x1000
c001ceb0:	83 ec 0c             	sub    esp,0xc
c001ceb3:	31 d2                	xor    edx,edx
c001ceb5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cebc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cebe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cec2:	50                   	push   eax
c001cec3:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cec7:	56                   	push   esi
c001cec8:	52                   	push   edx
c001cec9:	57                   	push   edi
c001ceca:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ced1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ced4:	83 c4 20             	add    esp,0x20
c001ced7:	85 c0                	test   eax,eax
c001ced9:	74 0a                	je     c001cee5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cedb:	53                   	push   ebx
c001cedc:	53                   	push   ebx
c001cedd:	50                   	push   eax
c001cede:	68 57 d0 02 c0       	push   0xc002d057
c001cee3:	eb 0f                	jmp    c001cef4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cee5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cee9:	74 20                	je     c001cf0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ceeb:	51                   	push   ecx
c001ceec:	51                   	push   ecx
c001ceed:	6a 00                	push   0x0
c001ceef:	68 82 d0 02 c0       	push   0xc002d082
c001cef4:	e8 58 5f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001cef9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cefc:	e8 f0 4f ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	31 c0                	xor    eax,eax
c001cf06:	e9 68 01 00 00       	jmp    c001d073 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cf0b:	fa                   	cli    
c001cf0c:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001cf12:	e8 e1 2f ff ff       	call   c000fef8 <Phys::allocatePage()>
c001cf17:	6a 07                	push   0x7
c001cf19:	89 c7                	mov    edi,eax
c001cf1b:	55                   	push   ebp
c001cf1c:	50                   	push   eax
c001cf1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf25:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf2b:	e8 38 53 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf30:	83 c4 0c             	add    esp,0xc
c001cf33:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf3a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf40:	6a 00                	push   0x0
c001cf42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf4a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf50:	e8 6d 51 ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cf55:	58                   	pop    eax
c001cf56:	5a                   	pop    edx
c001cf57:	68 07 0c 00 00       	push   0xc07
c001cf5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cf60:	57                   	push   edi
c001cf61:	89 ef                	mov    edi,ebp
c001cf63:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf70:	6a 00                	push   0x0
c001cf72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf7a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf80:	e8 9f 56 ff ff       	call   c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf85:	b9 00 10 00 00       	mov    ecx,0x1000
c001cf8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf8c:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001cf91:	83 c4 20             	add    esp,0x20
c001cf94:	48                   	dec    eax
c001cf95:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001cf9a:	85 c0                	test   eax,eax
c001cf9c:	75 01                	jne    c001cf9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cf9e:	fb                   	sti    
c001cf9f:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cfa6:	e9 df fe ff ff       	jmp    c001ce8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cfab:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cfae:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cfb6:	0f 86 a9 00 00 00    	jbe    c001d065 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cfbc:	fa                   	cli    
c001cfbd:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001cfc3:	51                   	push   ecx
c001cfc4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cfcb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfd1:	6a 00                	push   0x0
c001cfd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cfdb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfe1:	e8 dc 50 ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cfe6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cfea:	c1 e6 0c             	shl    esi,0xc
c001cfed:	01 de                	add    esi,ebx
c001cfef:	83 c4 10             	add    esp,0x10
c001cff2:	39 de                	cmp    esi,ebx
c001cff4:	74 61                	je     c001d057 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cff6:	e8 fd 2e ff ff       	call   c000fef8 <Phys::allocatePage()>
c001cffb:	6a 07                	push   0x7
c001cffd:	89 c7                	mov    edi,eax
c001cfff:	55                   	push   ebp
c001d000:	50                   	push   eax
c001d001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d006:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d009:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d00f:	e8 54 52 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d014:	58                   	pop    eax
c001d015:	5a                   	pop    edx
c001d016:	68 07 0c 00 00       	push   0xc07
c001d01b:	53                   	push   ebx
c001d01c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001d022:	57                   	push   edi
c001d023:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001d02a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d030:	6a 00                	push   0x0
c001d032:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d037:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d03a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d040:	e8 df 55 ff ff       	call   c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001d045:	83 c4 1c             	add    esp,0x1c
c001d048:	68 00 10 00 00       	push   0x1000
c001d04d:	6a 00                	push   0x0
c001d04f:	55                   	push   ebp
c001d050:	e8 fb 36 fe ff       	call   c0000750 <memset>
c001d055:	eb 98                	jmp    c001cfef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001d057:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001d05c:	48                   	dec    eax
c001d05d:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001d062:	75 01                	jne    c001d065 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001d064:	fb                   	sti    
c001d065:	83 ec 0c             	sub    esp,0xc
c001d068:	55                   	push   ebp
c001d069:	e8 83 4e ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001d06e:	83 c4 10             	add    esp,0x10
c001d071:	b0 01                	mov    al,0x1
c001d073:	81 c4 2c 10 00 00    	add    esp,0x102c
c001d079:	5b                   	pop    ebx
c001d07a:	5e                   	pop    esi
c001d07b:	5f                   	pop    edi
c001d07c:	5d                   	pop    ebp
c001d07d:	c3                   	ret    

c001d07e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001d07e:	55                   	push   ebp
c001d07f:	57                   	push   edi
c001d080:	56                   	push   esi
c001d081:	53                   	push   ebx
c001d082:	83 ec 48             	sub    esp,0x48
c001d085:	68 14 01 00 00       	push   0x114
c001d08a:	e8 fd 27 ff ff       	call   c000f88c <malloc>
c001d08f:	83 c4 0c             	add    esp,0xc
c001d092:	89 c6                	mov    esi,eax
c001d094:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d098:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001d09c:	50                   	push   eax
c001d09d:	e8 0e 63 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001d0a2:	58                   	pop    eax
c001d0a3:	5a                   	pop    edx
c001d0a4:	6a 01                	push   0x1
c001d0a6:	56                   	push   esi
c001d0a7:	e8 68 63 ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	85 c0                	test   eax,eax
c001d0b1:	0f 85 47 01 00 00    	jne    c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0b7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	6a 34                	push   0x34
c001d0c4:	e8 c3 27 ff ff       	call   c000f88c <malloc>
c001d0c9:	89 c3                	mov    ebx,eax
c001d0cb:	58                   	pop    eax
c001d0cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0ce:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d0d2:	57                   	push   edi
c001d0d3:	53                   	push   ebx
c001d0d4:	6a 00                	push   0x0
c001d0d6:	6a 34                	push   0x34
c001d0d8:	56                   	push   esi
c001d0d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0dc:	83 c4 20             	add    esp,0x20
c001d0df:	85 c0                	test   eax,eax
c001d0e1:	0f 85 17 01 00 00    	jne    c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0e7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d0ed:	0f 85 0b 01 00 00    	jne    c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d0f6:	85 c0                	test   eax,eax
c001d0f8:	0f 84 00 01 00 00    	je     c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0fe:	31 d2                	xor    edx,edx
c001d100:	55                   	push   ebp
c001d101:	52                   	push   edx
c001d102:	50                   	push   eax
c001d103:	56                   	push   esi
c001d104:	e8 c9 63 ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	85 c0                	test   eax,eax
c001d10e:	0f 85 ea 00 00 00    	jne    c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d114:	83 ec 0c             	sub    esp,0xc
c001d117:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d11a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d122:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d126:	0f af c2             	imul   eax,edx
c001d129:	50                   	push   eax
c001d12a:	e8 5d 27 ff ff       	call   c000f88c <malloc>
c001d12f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d131:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d135:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d138:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d13c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d140:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d144:	0f af c2             	imul   eax,edx
c001d147:	99                   	cdq    
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	56                   	push   esi
c001d14b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d14e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d151:	83 c4 20             	add    esp,0x20
c001d154:	85 c0                	test   eax,eax
c001d156:	0f 84 a2 00 00 00    	je     c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d15c:	31 d2                	xor    edx,edx
c001d15e:	51                   	push   ecx
c001d15f:	52                   	push   edx
c001d160:	50                   	push   eax
c001d161:	56                   	push   esi
c001d162:	e8 6b 63 ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d167:	83 c4 10             	add    esp,0x10
c001d16a:	85 c0                	test   eax,eax
c001d16c:	0f 85 8c 00 00 00    	jne    c001d1fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d172:	83 ec 0c             	sub    esp,0xc
c001d175:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d179:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d17d:	31 ed                	xor    ebp,ebp
c001d17f:	0f af c2             	imul   eax,edx
c001d182:	50                   	push   eax
c001d183:	e8 04 27 ff ff       	call   c000f88c <malloc>
c001d188:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d18a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d18e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d195:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d199:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d19d:	0f af c2             	imul   eax,edx
c001d1a0:	99                   	cdq    
c001d1a1:	52                   	push   edx
c001d1a2:	50                   	push   eax
c001d1a3:	56                   	push   esi
c001d1a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1a7:	83 c4 20             	add    esp,0x20
c001d1aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d1b2:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d1b6:	0f 86 80 00 00 00    	jbe    c001d23c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d1bc:	0f b7 fd             	movzx  edi,bp
c001d1bf:	c1 e7 05             	shl    edi,0x5
c001d1c2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d1c6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d1c9:	75 6b                	jne    c001d236 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d1cb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d1ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1d2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d1d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1d9:	52                   	push   edx
c001d1da:	31 d2                	xor    edx,edx
c001d1dc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d1df:	52                   	push   edx
c001d1e0:	50                   	push   eax
c001d1e1:	56                   	push   esi
c001d1e2:	e8 eb 62 ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	85 c0                	test   eax,eax
c001d1ec:	74 17                	je     c001d205 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d1ee:	83 ec 0c             	sub    esp,0xc
c001d1f1:	68 ae d0 02 c0       	push   0xc002d0ae
c001d1f6:	e8 56 5c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	31 c0                	xor    eax,eax
c001d200:	e9 87 00 00 00       	jmp    c001d28c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d205:	83 ec 0c             	sub    esp,0xc
c001d208:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d20b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d20e:	50                   	push   eax
c001d20f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d213:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d217:	56                   	push   esi
c001d218:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d21c:	e8 b3 fb ff ff       	call   c001cdd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d221:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d225:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d229:	83 c4 20             	add    esp,0x20
c001d22c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d230:	73 04                	jae    c001d236 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d236:	45                   	inc    ebp
c001d237:	e9 76 ff ff ff       	jmp    c001d1b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d23c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d248:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d24e:	83 ec 0c             	sub    esp,0xc
c001d251:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d257:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d25c:	05 00 10 00 00       	add    eax,0x1000
c001d261:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d268:	e8 2f 26 ff ff       	call   c000f89c <free>
c001d26d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d270:	e8 27 26 ff ff       	call   c000f89c <free>
c001d275:	58                   	pop    eax
c001d276:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d27a:	e8 1d 26 ff ff       	call   c000f89c <free>
c001d27f:	89 34 24             	mov    DWORD PTR [esp],esi
c001d282:	e8 eb 61 ff ff       	call   c0013472 <File::close()>
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	b0 01                	mov    al,0x1
c001d28c:	83 c4 3c             	add    esp,0x3c
c001d28f:	5b                   	pop    ebx
c001d290:	5e                   	pop    esi
c001d291:	5f                   	pop    edi
c001d292:	5d                   	pop    ebp
c001d293:	c3                   	ret    

c001d294 <Thr::runtimeReferenceHelper()>:
c001d294:	83 ec 18             	sub    esp,0x18
c001d297:	68 b6 d0 02 c0       	push   0xc002d0b6
c001d29c:	e8 b0 5b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001d2a1:	fa                   	cli    
c001d2a2:	83 c4 10             	add    esp,0x10
c001d2a5:	eb fe                	jmp    c001d2a5 <Thr::runtimeReferenceHelper()+0x11>

c001d2a7 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d2a7:	57                   	push   edi
c001d2a8:	56                   	push   esi
c001d2a9:	53                   	push   ebx
c001d2aa:	31 db                	xor    ebx,ebx
c001d2ac:	39 1d 80 2a 03 c0    	cmp    DWORD PTR ds:0xc0032a80,ebx
c001d2b2:	7e 3c                	jle    c001d2f0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d2b4:	8b 34 9d 00 2a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd600]
c001d2bb:	31 ff                	xor    edi,edi
c001d2bd:	39 3c 9d 00 29 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd700],edi
c001d2c4:	7e 27                	jle    c001d2ed <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d2c6:	50                   	push   eax
c001d2c7:	50                   	push   eax
c001d2c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2ce:	03 04 9d 80 29 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd680]
c001d2d5:	50                   	push   eax
c001d2d6:	e8 bd 35 fe ff       	call   c0000898 <strcmp>
c001d2db:	83 c4 10             	add    esp,0x10
c001d2de:	85 c0                	test   eax,eax
c001d2e0:	75 05                	jne    c001d2e7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d2e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d2e5:	eb 0b                	jmp    c001d2f2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d2e7:	83 c6 10             	add    esi,0x10
c001d2ea:	47                   	inc    edi
c001d2eb:	eb d0                	jmp    c001d2bd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d2ed:	43                   	inc    ebx
c001d2ee:	eb bc                	jmp    c001d2ac <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d2f0:	31 c0                	xor    eax,eax
c001d2f2:	5b                   	pop    ebx
c001d2f3:	5e                   	pop    esi
c001d2f4:	5f                   	pop    edi
c001d2f5:	c3                   	ret    

c001d2f6 <Thr::loadKernelSymbolTable(char const*)>:
c001d2f6:	55                   	push   ebp
c001d2f7:	57                   	push   edi
c001d2f8:	56                   	push   esi
c001d2f9:	53                   	push   ebx
c001d2fa:	83 ec 68             	sub    esp,0x68
c001d2fd:	8b 35 d0 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032ad0
c001d303:	68 14 01 00 00       	push   0x114
c001d308:	e8 7f 25 ff ff       	call   c000f88c <malloc>
c001d30d:	83 c4 0c             	add    esp,0xc
c001d310:	89 c3                	mov    ebx,eax
c001d312:	56                   	push   esi
c001d313:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d317:	50                   	push   eax
c001d318:	e8 93 60 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001d31d:	5e                   	pop    esi
c001d31e:	5f                   	pop    edi
c001d31f:	6a 01                	push   0x1
c001d321:	53                   	push   ebx
c001d322:	e8 ed 60 ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001d327:	83 c4 10             	add    esp,0x10
c001d32a:	85 c0                	test   eax,eax
c001d32c:	74 0a                	je     c001d338 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d32e:	83 ec 0c             	sub    esp,0xc
c001d331:	68 d8 d0 02 c0       	push   0xc002d0d8
c001d336:	eb 34                	jmp    c001d36c <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d338:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	6a 34                	push   0x34
c001d345:	e8 42 25 ff ff       	call   c000f88c <malloc>
c001d34a:	59                   	pop    ecx
c001d34b:	89 c7                	mov    edi,eax
c001d34d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d351:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d353:	56                   	push   esi
c001d354:	57                   	push   edi
c001d355:	6a 00                	push   0x0
c001d357:	6a 34                	push   0x34
c001d359:	53                   	push   ebx
c001d35a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d35d:	83 c4 20             	add    esp,0x20
c001d360:	85 c0                	test   eax,eax
c001d362:	74 17                	je     c001d37b <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d364:	83 ec 0c             	sub    esp,0xc
c001d367:	68 ef d0 02 c0       	push   0xc002d0ef
c001d36c:	e8 28 d6 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001d371:	83 c4 10             	add    esp,0x10
c001d374:	31 c0                	xor    eax,eax
c001d376:	e9 31 02 00 00       	jmp    c001d5ac <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d37b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d381:	75 e1                	jne    c001d364 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d383:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d386:	85 c0                	test   eax,eax
c001d388:	74 da                	je     c001d364 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d38a:	52                   	push   edx
c001d38b:	31 d2                	xor    edx,edx
c001d38d:	52                   	push   edx
c001d38e:	50                   	push   eax
c001d38f:	53                   	push   ebx
c001d390:	e8 3d 61 ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	85 c0                	test   eax,eax
c001d39a:	75 c8                	jne    c001d364 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d39c:	83 ec 0c             	sub    esp,0xc
c001d39f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3a7:	31 ed                	xor    ebp,ebp
c001d3a9:	0f af c2             	imul   eax,edx
c001d3ac:	50                   	push   eax
c001d3ad:	e8 da 24 ff ff       	call   c000f88c <malloc>
c001d3b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d3b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3b8:	89 34 24             	mov    DWORD PTR [esp],esi
c001d3bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3bf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3c3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3c7:	0f af c2             	imul   eax,edx
c001d3ca:	99                   	cdq    
c001d3cb:	52                   	push   edx
c001d3cc:	50                   	push   eax
c001d3cd:	53                   	push   ebx
c001d3ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3d1:	83 c4 20             	add    esp,0x20
c001d3d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3dc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d3e4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d3ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d3f4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d3f8:	0f 86 aa 00 00 00    	jbe    c001d4a8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d3fe:	0f b7 f5             	movzx  esi,bp
c001d401:	6b f6 28             	imul   esi,esi,0x28
c001d404:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d408:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d40b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d40f:	50                   	push   eax
c001d410:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d414:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d418:	8b 16                	mov    edx,DWORD PTR [esi]
c001d41a:	6b c0 28             	imul   eax,eax,0x28
c001d41d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d421:	89 d0                	mov    eax,edx
c001d423:	31 d2                	xor    edx,edx
c001d425:	52                   	push   edx
c001d426:	50                   	push   eax
c001d427:	53                   	push   ebx
c001d428:	e8 a5 60 ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d42d:	83 c4 0c             	add    esp,0xc
c001d430:	6a 20                	push   0x20
c001d432:	6a 00                	push   0x0
c001d434:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d438:	52                   	push   edx
c001d439:	e8 12 33 fe ff       	call   c0000750 <memset>
c001d43e:	58                   	pop    eax
c001d43f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d441:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d445:	51                   	push   ecx
c001d446:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d44a:	52                   	push   edx
c001d44b:	6a 00                	push   0x0
c001d44d:	6a 1f                	push   0x1f
c001d44f:	53                   	push   ebx
c001d450:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d453:	83 c4 18             	add    esp,0x18
c001d456:	68 06 d1 02 c0       	push   0xc002d106
c001d45b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d45f:	52                   	push   edx
c001d460:	e8 33 34 fe ff       	call   c0000898 <strcmp>
c001d465:	83 c4 10             	add    esp,0x10
c001d468:	85 c0                	test   eax,eax
c001d46a:	75 0f                	jne    c001d47b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d46c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d46f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d473:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d47b:	50                   	push   eax
c001d47c:	50                   	push   eax
c001d47d:	68 0e d1 02 c0       	push   0xc002d10e
c001d482:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d486:	50                   	push   eax
c001d487:	e8 0c 34 fe ff       	call   c0000898 <strcmp>
c001d48c:	83 c4 10             	add    esp,0x10
c001d48f:	85 c0                	test   eax,eax
c001d491:	75 0f                	jne    c001d4a2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d493:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d496:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d49a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4a2:	45                   	inc    ebp
c001d4a3:	e9 4c ff ff ff       	jmp    c001d3f4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d4a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d4ad:	75 10                	jne    c001d4bf <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d4af:	83 ec 0c             	sub    esp,0xc
c001d4b2:	68 16 d1 02 c0       	push   0xc002d116
c001d4b7:	e8 dd d4 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001d4bc:	83 c4 10             	add    esp,0x10
c001d4bf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d4c4:	75 10                	jne    c001d4d6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d4c6:	83 ec 0c             	sub    esp,0xc
c001d4c9:	68 16 d1 02 c0       	push   0xc002d116
c001d4ce:	e8 c6 d4 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001d4d3:	83 c4 10             	add    esp,0x10
c001d4d6:	31 d2                	xor    edx,edx
c001d4d8:	50                   	push   eax
c001d4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4dd:	52                   	push   edx
c001d4de:	50                   	push   eax
c001d4df:	53                   	push   ebx
c001d4e0:	e8 ed 5f ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d4e5:	5a                   	pop    edx
c001d4e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4ea:	e8 9d 23 ff ff       	call   c000f88c <malloc>
c001d4ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d4f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4f7:	31 c9                	xor    ecx,ecx
c001d4f9:	5e                   	pop    esi
c001d4fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4fc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d500:	55                   	push   ebp
c001d501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d505:	51                   	push   ecx
c001d506:	52                   	push   edx
c001d507:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d50b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d50f:	53                   	push   ebx
c001d510:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d513:	83 c4 14             	add    esp,0x14
c001d516:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d51a:	e8 6d 23 ff ff       	call   c000f88c <malloc>
c001d51f:	89 c6                	mov    esi,eax
c001d521:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d523:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d526:	56                   	push   esi
c001d527:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d52b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d52f:	51                   	push   ecx
c001d530:	52                   	push   edx
c001d531:	53                   	push   ebx
c001d532:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d535:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d539:	8b 15 80 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a80
c001d53f:	83 c4 1c             	add    esp,0x1c
c001d542:	c1 e8 04             	shr    eax,0x4
c001d545:	89 04 95 00 29 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd700],eax
c001d54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d550:	31 d2                	xor    edx,edx
c001d552:	52                   	push   edx
c001d553:	50                   	push   eax
c001d554:	53                   	push   ebx
c001d555:	e8 78 5f ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d55a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d55c:	31 d2                	xor    edx,edx
c001d55e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d561:	56                   	push   esi
c001d562:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d566:	52                   	push   edx
c001d567:	50                   	push   eax
c001d568:	53                   	push   ebx
c001d569:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d56c:	83 c4 14             	add    esp,0x14
c001d56f:	53                   	push   ebx
c001d570:	e8 fd 5e ff ff       	call   c0013472 <File::close()>
c001d575:	5d                   	pop    ebp
c001d576:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d57a:	e8 1d 23 ff ff       	call   c000f89c <free>
c001d57f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d582:	e8 15 23 ff ff       	call   c000f89c <free>
c001d587:	a1 80 2a 03 c0       	mov    eax,ds:0xc0032a80
c001d58c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d590:	8d 50 01             	lea    edx,[eax+0x1]
c001d593:	89 0c 85 00 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd600],ecx
c001d59a:	89 34 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],esi
c001d5a1:	89 15 80 2a 03 c0    	mov    DWORD PTR ds:0xc0032a80,edx
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	b0 01                	mov    al,0x1
c001d5ac:	83 c4 5c             	add    esp,0x5c
c001d5af:	5b                   	pop    ebx
c001d5b0:	5e                   	pop    esi
c001d5b1:	5f                   	pop    edi
c001d5b2:	5d                   	pop    ebp
c001d5b3:	c3                   	ret    

c001d5b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d5b4:	55                   	push   ebp
c001d5b5:	57                   	push   edi
c001d5b6:	56                   	push   esi
c001d5b7:	53                   	push   ebx
c001d5b8:	81 ec 68 03 00 00    	sub    esp,0x368
c001d5be:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d5c5:	8b 1d d0 2a 03 c0    	mov    ebx,DWORD PTR ds:0xc0032ad0
c001d5cb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d5cf:	68 14 01 00 00       	push   0x114
c001d5d4:	e8 b3 22 ff ff       	call   c000f88c <malloc>
c001d5d9:	83 c4 0c             	add    esp,0xc
c001d5dc:	89 c5                	mov    ebp,eax
c001d5de:	53                   	push   ebx
c001d5df:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d5e6:	50                   	push   eax
c001d5e7:	e8 c4 5d ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001d5ec:	5e                   	pop    esi
c001d5ed:	5f                   	pop    edi
c001d5ee:	6a 01                	push   0x1
c001d5f0:	55                   	push   ebp
c001d5f1:	e8 1e 5e ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001d5f6:	83 c4 10             	add    esp,0x10
c001d5f9:	85 c0                	test   eax,eax
c001d5fb:	0f 85 a7 06 00 00    	jne    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d601:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d609:	83 ec 0c             	sub    esp,0xc
c001d60c:	6a 34                	push   0x34
c001d60e:	e8 79 22 ff ff       	call   c000f88c <malloc>
c001d613:	5b                   	pop    ebx
c001d614:	89 c7                	mov    edi,eax
c001d616:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d61a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d61d:	53                   	push   ebx
c001d61e:	57                   	push   edi
c001d61f:	6a 00                	push   0x0
c001d621:	6a 34                	push   0x34
c001d623:	55                   	push   ebp
c001d624:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d627:	83 c4 20             	add    esp,0x20
c001d62a:	85 c0                	test   eax,eax
c001d62c:	0f 85 76 06 00 00    	jne    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d632:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d638:	0f 85 6a 06 00 00    	jne    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d63e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d641:	85 c0                	test   eax,eax
c001d643:	0f 84 5f 06 00 00    	je     c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d649:	31 d2                	xor    edx,edx
c001d64b:	51                   	push   ecx
c001d64c:	52                   	push   edx
c001d64d:	50                   	push   eax
c001d64e:	55                   	push   ebp
c001d64f:	e8 7e 5e ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	85 c0                	test   eax,eax
c001d659:	0f 85 49 06 00 00    	jne    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d65f:	83 ec 0c             	sub    esp,0xc
c001d662:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d665:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d669:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d66d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d671:	0f af c2             	imul   eax,edx
c001d674:	50                   	push   eax
c001d675:	e8 12 22 ff ff       	call   c000f88c <malloc>
c001d67a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d67d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d688:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d68c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d690:	0f af c2             	imul   eax,edx
c001d693:	99                   	cdq    
c001d694:	52                   	push   edx
c001d695:	50                   	push   eax
c001d696:	55                   	push   ebp
c001d697:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d69a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d69d:	83 c4 20             	add    esp,0x20
c001d6a0:	85 c0                	test   eax,eax
c001d6a2:	0f 84 00 06 00 00    	je     c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6a8:	52                   	push   edx
c001d6a9:	31 d2                	xor    edx,edx
c001d6ab:	52                   	push   edx
c001d6ac:	50                   	push   eax
c001d6ad:	55                   	push   ebp
c001d6ae:	e8 1f 5e ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	85 c0                	test   eax,eax
c001d6b8:	0f 85 ea 05 00 00    	jne    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6be:	83 ec 0c             	sub    esp,0xc
c001d6c1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d6c5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d6c9:	31 f6                	xor    esi,esi
c001d6cb:	0f af c2             	imul   eax,edx
c001d6ce:	50                   	push   eax
c001d6cf:	e8 b8 21 ff ff       	call   c000f88c <malloc>
c001d6d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6e2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d6e6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d6ea:	0f af c2             	imul   eax,edx
c001d6ed:	99                   	cdq    
c001d6ee:	52                   	push   edx
c001d6ef:	50                   	push   eax
c001d6f0:	55                   	push   ebp
c001d6f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6f4:	83 c4 20             	add    esp,0x20
c001d6f7:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d6fb:	0f 86 8a 00 00 00    	jbe    c001d78b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d701:	0f b7 de             	movzx  ebx,si
c001d704:	c1 e3 05             	shl    ebx,0x5
c001d707:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d70b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d70e:	75 75                	jne    c001d785 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d710:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d713:	31 d2                	xor    edx,edx
c001d715:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d719:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d71c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d720:	50                   	push   eax
c001d721:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d724:	52                   	push   edx
c001d725:	50                   	push   eax
c001d726:	55                   	push   ebp
c001d727:	e8 a6 5d ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d72c:	83 c4 10             	add    esp,0x10
c001d72f:	85 c0                	test   eax,eax
c001d731:	0f 85 71 05 00 00    	jne    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d737:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d73e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d741:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d745:	31 d2                	xor    edx,edx
c001d747:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d74b:	83 ec 0c             	sub    esp,0xc
c001d74e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d752:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d759:	50                   	push   eax
c001d75a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d762:	52                   	push   edx
c001d763:	50                   	push   eax
c001d764:	55                   	push   ebp
c001d765:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d768:	83 c4 1c             	add    esp,0x1c
c001d76b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d76e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d771:	50                   	push   eax
c001d772:	6a 00                	push   0x0
c001d774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d778:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d77c:	50                   	push   eax
c001d77d:	e8 ce 2f fe ff       	call   c0000750 <memset>
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	46                   	inc    esi
c001d786:	e9 6c ff ff ff       	jmp    c001d6f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d78b:	53                   	push   ebx
c001d78c:	31 db                	xor    ebx,ebx
c001d78e:	68 00 01 00 00       	push   0x100
c001d793:	6a 00                	push   0x0
c001d795:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d799:	50                   	push   eax
c001d79a:	e8 b1 2f fe ff       	call   c0000750 <memset>
c001d79f:	83 c4 0c             	add    esp,0xc
c001d7a2:	68 00 01 00 00       	push   0x100
c001d7a7:	6a 00                	push   0x0
c001d7a9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d7b0:	50                   	push   eax
c001d7b1:	e8 9a 2f fe ff       	call   c0000750 <memset>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d7c1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d7c9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d7d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d7d9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7e1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d7e5:	0f 86 30 01 00 00    	jbe    c001d91b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d7eb:	0f b7 f3             	movzx  esi,bx
c001d7ee:	6b f6 28             	imul   esi,esi,0x28
c001d7f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d7f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d7f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7fc:	52                   	push   edx
c001d7fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d801:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d805:	8b 06                	mov    eax,DWORD PTR [esi]
c001d807:	6b d2 28             	imul   edx,edx,0x28
c001d80a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d80e:	31 d2                	xor    edx,edx
c001d810:	52                   	push   edx
c001d811:	50                   	push   eax
c001d812:	55                   	push   ebp
c001d813:	e8 ba 5c ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d818:	83 c4 0c             	add    esp,0xc
c001d81b:	6a 20                	push   0x20
c001d81d:	6a 00                	push   0x0
c001d81f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d826:	51                   	push   ecx
c001d827:	e8 24 2f fe ff       	call   c0000750 <memset>
c001d82c:	59                   	pop    ecx
c001d82d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d830:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d834:	52                   	push   edx
c001d835:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d83c:	51                   	push   ecx
c001d83d:	6a 00                	push   0x0
c001d83f:	6a 1f                	push   0x1f
c001d841:	55                   	push   ebp
c001d842:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d845:	83 c4 1c             	add    esp,0x1c
c001d848:	6a 09                	push   0x9
c001d84a:	68 30 d1 02 c0       	push   0xc002d130
c001d84f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d856:	51                   	push   ecx
c001d857:	e8 f0 2d fe ff       	call   c000064c <memcmp>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	85 c0                	test   eax,eax
c001d861:	75 21                	jne    c001d884 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d86b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d86f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d873:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d876:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d87d:	89 d0                	mov    eax,edx
c001d87f:	40                   	inc    eax
c001d880:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d884:	50                   	push   eax
c001d885:	6a 09                	push   0x9
c001d887:	68 3a d1 02 c0       	push   0xc002d13a
c001d88c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d893:	50                   	push   eax
c001d894:	e8 b3 2d fe ff       	call   c000064c <memcmp>
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	85 c0                	test   eax,eax
c001d89e:	75 21                	jne    c001d8c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d8a8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d8ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d8b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d8b3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d8ba:	89 d0                	mov    eax,edx
c001d8bc:	40                   	inc    eax
c001d8bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8c1:	50                   	push   eax
c001d8c2:	50                   	push   eax
c001d8c3:	68 06 d1 02 c0       	push   0xc002d106
c001d8c8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8cf:	50                   	push   eax
c001d8d0:	e8 c3 2f fe ff       	call   c0000898 <strcmp>
c001d8d5:	83 c4 10             	add    esp,0x10
c001d8d8:	85 c0                	test   eax,eax
c001d8da:	75 0f                	jne    c001d8eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d8dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d8df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8eb:	50                   	push   eax
c001d8ec:	50                   	push   eax
c001d8ed:	68 0e d1 02 c0       	push   0xc002d10e
c001d8f2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8f9:	50                   	push   eax
c001d8fa:	e8 99 2f fe ff       	call   c0000898 <strcmp>
c001d8ff:	83 c4 10             	add    esp,0x10
c001d902:	85 c0                	test   eax,eax
c001d904:	75 0f                	jne    c001d915 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d906:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d909:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d90d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d911:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d915:	43                   	inc    ebx
c001d916:	e9 c6 fe ff ff       	jmp    c001d7e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d91b:	31 d2                	xor    edx,edx
c001d91d:	50                   	push   eax
c001d91e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d922:	52                   	push   edx
c001d923:	50                   	push   eax
c001d924:	55                   	push   ebp
c001d925:	e8 a8 5b ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d92a:	58                   	pop    eax
c001d92b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d92f:	e8 58 1f ff ff       	call   c000f88c <malloc>
c001d934:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d937:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d93b:	31 d2                	xor    edx,edx
c001d93d:	58                   	pop    eax
c001d93e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d942:	53                   	push   ebx
c001d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d947:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d94b:	52                   	push   edx
c001d94c:	50                   	push   eax
c001d94d:	55                   	push   ebp
c001d94e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d951:	83 c4 14             	add    esp,0x14
c001d954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d958:	e8 2f 1f ff ff       	call   c000f88c <malloc>
c001d95d:	31 d2                	xor    edx,edx
c001d95f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d963:	83 c4 0c             	add    esp,0xc
c001d966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d96a:	52                   	push   edx
c001d96b:	50                   	push   eax
c001d96c:	55                   	push   ebp
c001d96d:	e8 60 5b ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d972:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d975:	31 d2                	xor    edx,edx
c001d977:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d97a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d97e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d982:	52                   	push   edx
c001d983:	50                   	push   eax
c001d984:	55                   	push   ebp
c001d985:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d988:	83 c4 20             	add    esp,0x20
c001d98b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d993:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d997:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d99b:	0f 84 0b 03 00 00    	je     c001dcac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d9a1:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d9a8:	31 d2                	xor    edx,edx
c001d9aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9ae:	c1 e8 03             	shr    eax,0x3
c001d9b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d9b5:	51                   	push   ecx
c001d9b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9ba:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d9be:	52                   	push   edx
c001d9bf:	50                   	push   eax
c001d9c0:	55                   	push   ebp
c001d9c1:	e8 0c 5b ff ff       	call   c00134d2 <File::seek(unsigned long long)>
c001d9c6:	5b                   	pop    ebx
c001d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d9d2:	e8 b5 1e ff ff       	call   c000f88c <malloc>
c001d9d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d9da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9de:	31 d2                	xor    edx,edx
c001d9e0:	5e                   	pop    esi
c001d9e1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d9e5:	50                   	push   eax
c001d9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d9ee:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d9f5:	52                   	push   edx
c001d9f6:	50                   	push   eax
c001d9f7:	55                   	push   ebp
c001d9f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d9fb:	83 c4 20             	add    esp,0x20
c001d9fe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001da06:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001da0a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001da0e:	0f 8d 7c 02 00 00    	jge    c001dc90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001da14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da1c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001da21:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001da24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001da28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da2c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001da30:	89 d8                	mov    eax,ebx
c001da32:	c1 e8 08             	shr    eax,0x8
c001da35:	89 c6                	mov    esi,eax
c001da37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001da3b:	c1 e6 04             	shl    esi,0x4
c001da3e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001da42:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001da45:	85 d2                	test   edx,edx
c001da47:	0f 85 bf 00 00 00    	jne    c001db0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da4d:	83 ec 0c             	sub    esp,0xc
c001da50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da54:	03 06                	add    eax,DWORD PTR [esi]
c001da56:	50                   	push   eax
c001da57:	e8 4b f8 ff ff       	call   c001d2a7 <Thr::getAddressOfKernelSymbol(char const*)>
c001da5c:	83 c4 10             	add    esp,0x10
c001da5f:	89 c2                	mov    edx,eax
c001da61:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001da66:	85 c0                	test   eax,eax
c001da68:	0f 85 9e 00 00 00    	jne    c001db0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da6e:	83 ec 0c             	sub    esp,0xc
c001da71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da75:	03 06                	add    eax,DWORD PTR [esi]
c001da77:	50                   	push   eax
c001da78:	e8 c2 0a ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	89 c2                	mov    edx,eax
c001da82:	85 c0                	test   eax,eax
c001da84:	0f 85 82 00 00 00    	jne    c001db0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da8a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001da8e:	50                   	push   eax
c001da8f:	50                   	push   eax
c001da90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da94:	03 06                	add    eax,DWORD PTR [esi]
c001da96:	50                   	push   eax
c001da97:	68 44 d1 02 c0       	push   0xc002d144
c001da9c:	e8 b0 53 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001daa1:	58                   	pop    eax
c001daa2:	5a                   	pop    edx
c001daa3:	68 5e d1 02 c0       	push   0xc002d15e
c001daa8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001daaf:	50                   	push   eax
c001dab0:	e8 57 2d fe ff       	call   c000080c <strcpy>
c001dab5:	59                   	pop    ecx
c001dab6:	58                   	pop    eax
c001dab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabb:	03 06                	add    eax,DWORD PTR [esi]
c001dabd:	50                   	push   eax
c001dabe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001dac5:	50                   	push   eax
c001dac6:	e8 81 2e fe ff       	call   c000094c <strcat>
c001dacb:	58                   	pop    eax
c001dacc:	5a                   	pop    edx
c001dacd:	68 f4 d1 02 c0       	push   0xc002d1f4
c001dad2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001dad9:	50                   	push   eax
c001dada:	e8 6d 2e fe ff       	call   c000094c <strcat>
c001dadf:	83 c4 10             	add    esp,0x10
c001dae2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dae7:	0f 84 5d 01 00 00    	je     c001dc4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001daf7:	50                   	push   eax
c001daf8:	e8 9c ce ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001db04:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db08:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001db0c:	80 fb 01             	cmp    bl,0x1
c001db0f:	0f 85 88 00 00 00    	jne    c001db9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001db15:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001db1c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db20:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001db24:	01 ce                	add    esi,ecx
c001db26:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001db2c:	0f 94 c0             	sete   al
c001db2f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001db35:	0f 94 c3             	sete   bl
c001db38:	09 c3                	or     ebx,eax
c001db3a:	8b 06                	mov    eax,DWORD PTR [esi]
c001db3c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db41:	74 41                	je     c001db84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001db43:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001db46:	84 db                	test   bl,bl
c001db48:	75 15                	jne    c001db5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001db4a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db4e:	66 83 f8 0c          	cmp    ax,0xc
c001db52:	76 05                	jbe    c001db59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001db54:	b8 0c 00 00 00       	mov    eax,0xc
c001db59:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001db5d:	76 37                	jbe    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db5f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001db63:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db68:	0f 84 dc 00 00 00    	je     c001dc4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db6e:	83 ec 0c             	sub    esp,0xc
c001db71:	68 75 d1 02 c0       	push   0xc002d175
c001db76:	e8 1e ce ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001db7b:	83 c4 10             	add    esp,0x10
c001db7e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001db82:	eb 12                	jmp    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db84:	01 c1                	add    ecx,eax
c001db86:	84 db                	test   bl,bl
c001db88:	75 0c                	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db8e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001db92:	77 02                	ja     c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db94:	01 d1                	add    ecx,edx
c001db96:	89 0e                	mov    DWORD PTR [esi],ecx
c001db98:	e9 ea 00 00 00       	jmp    c001dc87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db9d:	80 fb 02             	cmp    bl,0x2
c001dba0:	75 7c                	jne    c001dc1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001dba2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001dba9:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001dbad:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001dbb1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001dbb7:	74 20                	je     c001dbd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001dbb9:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001dbbf:	74 18                	je     c001dbd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001dbc1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dbc5:	b9 0a 00 00 00       	mov    ecx,0xa
c001dbca:	66 83 f8 0e          	cmp    ax,0xe
c001dbce:	77 03                	ja     c001dbd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001dbd0:	8d 48 fc             	lea    ecx,[eax-0x4]
c001dbd3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001dbd7:	76 1f                	jbe    c001dbf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001dbd9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001dbdd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dbe2:	74 66                	je     c001dc4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	68 91 d1 02 c0       	push   0xc002d191
c001dbec:	e8 a8 cd ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001dbf1:	83 c4 10             	add    esp,0x10
c001dbf4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dbf8:	8b 06                	mov    eax,DWORD PTR [esi]
c001dbfa:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001dbff:	74 13                	je     c001dc14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001dc01:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc05:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001dc0c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001dc10:	01 c8                	add    eax,ecx
c001dc12:	eb 04                	jmp    c001dc18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001dc14:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001dc18:	01 c2                	add    edx,eax
c001dc1a:	89 16                	mov    DWORD PTR [esi],edx
c001dc1c:	eb 69                	jmp    c001dc87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dc1e:	0f b6 db             	movzx  ebx,bl
c001dc21:	50                   	push   eax
c001dc22:	50                   	push   eax
c001dc23:	53                   	push   ebx
c001dc24:	68 ad d1 02 c0       	push   0xc002d1ad
c001dc29:	e8 23 52 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001dc2e:	83 c4 10             	add    esp,0x10
c001dc31:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dc36:	74 12                	je     c001dc4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dc38:	83 ec 0c             	sub    esp,0xc
c001dc3b:	68 b8 d1 02 c0       	push   0xc002d1b8
c001dc40:	e8 54 cd ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001dc45:	83 c4 10             	add    esp,0x10
c001dc48:	eb 3d                	jmp    c001dc87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	55                   	push   ebp
c001dc4e:	e8 1f 58 ff ff       	call   c0013472 <File::close()>
c001dc53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc56:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc5c:	59                   	pop    ecx
c001dc5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc61:	e8 36 1c ff ff       	call   c000f89c <free>
c001dc66:	5b                   	pop    ebx
c001dc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc6b:	e8 2c 1c ff ff       	call   c000f89c <free>
c001dc70:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc73:	e8 24 1c ff ff       	call   c000f89c <free>
c001dc78:	5e                   	pop    esi
c001dc79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc7d:	e8 1a 1c ff ff       	call   c000f89c <free>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	eb 21                	jmp    c001dca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dc87:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dc8b:	e9 76 fd ff ff       	jmp    c001da06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc97:	e8 00 1c ff ff       	call   c000f89c <free>
c001dc9c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dca0:	83 c4 10             	add    esp,0x10
c001dca3:	e9 eb fc ff ff       	jmp    c001d993 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dca8:	31 c0                	xor    eax,eax
c001dcaa:	eb 33                	jmp    c001dcdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dcac:	83 ec 0c             	sub    esp,0xc
c001dcaf:	55                   	push   ebp
c001dcb0:	e8 bd 57 ff ff       	call   c0013472 <File::close()>
c001dcb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dcb8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dcbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dcbe:	58                   	pop    eax
c001dcbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dcc3:	e8 d4 1b ff ff       	call   c000f89c <free>
c001dcc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dccb:	e8 cc 1b ff ff       	call   c000f89c <free>
c001dcd0:	5a                   	pop    edx
c001dcd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcd5:	e8 c2 1b ff ff       	call   c000f89c <free>
c001dcda:	83 c4 10             	add    esp,0x10
c001dcdd:	b0 01                	mov    al,0x1
c001dcdf:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dce5:	5b                   	pop    ebx
c001dce6:	5e                   	pop    esi
c001dce7:	5f                   	pop    edi
c001dce8:	5d                   	pop    ebp
c001dce9:	c3                   	ret    

c001dcea <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dcea:	56                   	push   esi
c001dceb:	31 d2                	xor    edx,edx
c001dced:	53                   	push   ebx
c001dcee:	8b 1d e0 22 03 c0    	mov    ebx,DWORD PTR ds:0xc00322e0
c001dcf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcf8:	39 d3                	cmp    ebx,edx
c001dcfa:	7e 1b                	jle    c001dd17 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dcfc:	8b 04 95 00 25 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdb00]
c001dd03:	39 c8                	cmp    eax,ecx
c001dd05:	77 0d                	ja     c001dd14 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dd07:	8b 34 95 00 23 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcdd00]
c001dd0e:	01 c6                	add    esi,eax
c001dd10:	39 ce                	cmp    esi,ecx
c001dd12:	77 05                	ja     c001dd19 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dd14:	42                   	inc    edx
c001dd15:	eb e1                	jmp    c001dcf8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dd17:	31 c0                	xor    eax,eax
c001dd19:	5b                   	pop    ebx
c001dd1a:	5e                   	pop    esi
c001dd1b:	c3                   	ret    

c001dd1c <Thr::getDriverNameFromAddress(unsigned long)>:
c001dd1c:	53                   	push   ebx
c001dd1d:	31 c0                	xor    eax,eax
c001dd1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd23:	8b 1d e0 22 03 c0    	mov    ebx,DWORD PTR ds:0xc00322e0
c001dd29:	39 c3                	cmp    ebx,eax
c001dd2b:	7e 22                	jle    c001dd4f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dd2d:	8b 14 85 00 25 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdb00]
c001dd34:	39 ca                	cmp    edx,ecx
c001dd36:	77 14                	ja     c001dd4c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dd38:	03 14 85 00 23 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcdd00]
c001dd3f:	39 ca                	cmp    edx,ecx
c001dd41:	76 09                	jbe    c001dd4c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dd43:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c001dd4a:	eb 05                	jmp    c001dd51 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dd4c:	40                   	inc    eax
c001dd4d:	eb da                	jmp    c001dd29 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dd4f:	31 c0                	xor    eax,eax
c001dd51:	5b                   	pop    ebx
c001dd52:	c3                   	ret    

c001dd53 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dd53:	53                   	push   ebx
c001dd54:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dd58:	53                   	push   ebx
c001dd59:	e8 8c ff ff ff       	call   c001dcea <Thr::getDriverBaseFromAddress(unsigned long)>
c001dd5e:	5a                   	pop    edx
c001dd5f:	31 d2                	xor    edx,edx
c001dd61:	85 c0                	test   eax,eax
c001dd63:	74 04                	je     c001dd69 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dd65:	89 da                	mov    edx,ebx
c001dd67:	29 c2                	sub    edx,eax
c001dd69:	89 d0                	mov    eax,edx
c001dd6b:	5b                   	pop    ebx
c001dd6c:	c3                   	ret    

c001dd6d <Thr::loadDLL(char const*, bool)>:
c001dd6d:	55                   	push   ebp
c001dd6e:	57                   	push   edi
c001dd6f:	56                   	push   esi
c001dd70:	53                   	push   ebx
c001dd71:	81 ec 34 01 00 00    	sub    esp,0x134
c001dd77:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dd7e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dd85:	56                   	push   esi
c001dd86:	68 d0 d1 02 c0       	push   0xc002d1d0
c001dd8b:	e8 c1 50 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001dd90:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dd97:	e8 f0 1a ff ff       	call   c000f88c <malloc>
c001dd9c:	83 c4 0c             	add    esp,0xc
c001dd9f:	89 c3                	mov    ebx,eax
c001dda1:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c001dda7:	56                   	push   esi
c001dda8:	50                   	push   eax
c001dda9:	e8 02 56 ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001ddae:	83 c4 10             	add    esp,0x10
c001ddb1:	85 db                	test   ebx,ebx
c001ddb3:	75 3c                	jne    c001ddf1 <Thr::loadDLL(char const*, bool)+0x84>
c001ddb5:	89 f8                	mov    eax,edi
c001ddb7:	84 c0                	test   al,al
c001ddb9:	0f 84 cc 01 00 00    	je     c001df8b <Thr::loadDLL(char const*, bool)+0x21e>
c001ddbf:	55                   	push   ebp
c001ddc0:	55                   	push   ebp
c001ddc1:	68 e1 d1 02 c0       	push   0xc002d1e1
c001ddc6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001ddca:	55                   	push   ebp
c001ddcb:	e8 3c 2a fe ff       	call   c000080c <strcpy>
c001ddd0:	58                   	pop    eax
c001ddd1:	5a                   	pop    edx
c001ddd2:	56                   	push   esi
c001ddd3:	55                   	push   ebp
c001ddd4:	e8 73 2b fe ff       	call   c000094c <strcat>
c001ddd9:	59                   	pop    ecx
c001ddda:	58                   	pop    eax
c001dddb:	68 f4 d1 02 c0       	push   0xc002d1f4
c001dde0:	55                   	push   ebp
c001dde1:	e8 66 2b fe ff       	call   c000094c <strcat>
c001dde6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dde9:	e8 ab cb ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001ddee:	83 c4 10             	add    esp,0x10
c001ddf1:	51                   	push   ecx
c001ddf2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001ddf6:	50                   	push   eax
c001ddf7:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ddfb:	50                   	push   eax
c001ddfc:	53                   	push   ebx
c001ddfd:	e8 be 58 ff ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c001de02:	83 c4 10             	add    esp,0x10
c001de05:	85 db                	test   ebx,ebx
c001de07:	74 0c                	je     c001de15 <Thr::loadDLL(char const*, bool)+0xa8>
c001de09:	83 ec 0c             	sub    esp,0xc
c001de0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de0e:	53                   	push   ebx
c001de0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de12:	83 c4 10             	add    esp,0x10
c001de15:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001de1a:	75 0a                	jne    c001de26 <Thr::loadDLL(char const*, bool)+0xb9>
c001de1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de20:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001de24:	75 3c                	jne    c001de62 <Thr::loadDLL(char const*, bool)+0xf5>
c001de26:	89 f8                	mov    eax,edi
c001de28:	84 c0                	test   al,al
c001de2a:	0f 84 43 01 00 00    	je     c001df73 <Thr::loadDLL(char const*, bool)+0x206>
c001de30:	51                   	push   ecx
c001de31:	51                   	push   ecx
c001de32:	68 e1 d1 02 c0       	push   0xc002d1e1
c001de37:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001de3b:	53                   	push   ebx
c001de3c:	e8 cb 29 fe ff       	call   c000080c <strcpy>
c001de41:	5d                   	pop    ebp
c001de42:	58                   	pop    eax
c001de43:	56                   	push   esi
c001de44:	53                   	push   ebx
c001de45:	e8 02 2b fe ff       	call   c000094c <strcat>
c001de4a:	58                   	pop    eax
c001de4b:	5a                   	pop    edx
c001de4c:	68 f4 d1 02 c0       	push   0xc002d1f4
c001de51:	53                   	push   ebx
c001de52:	e8 f5 2a fe ff       	call   c000094c <strcat>
c001de57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de5a:	e8 3a cb ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001de5f:	83 c4 10             	add    esp,0x10
c001de62:	52                   	push   edx
c001de63:	6a 03                	push   0x3
c001de65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001de6d:	05 ff 0f 00 00       	add    eax,0xfff
c001de72:	83 d2 00             	adc    edx,0x0
c001de75:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de79:	50                   	push   eax
c001de7a:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c001de80:	e8 e5 44 ff ff       	call   c001236a <VAS::allocatePages(int, int)>
c001de85:	59                   	pop    ecx
c001de86:	89 c3                	mov    ebx,eax
c001de88:	5d                   	pop    ebp
c001de89:	50                   	push   eax
c001de8a:	68 f6 d1 02 c0       	push   0xc002d1f6
c001de8f:	e8 bd 4f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001de94:	89 34 24             	mov    DWORD PTR [esp],esi
c001de97:	e8 d0 28 fe ff       	call   c000076c <strlen>
c001de9c:	8b 2d e0 22 03 c0    	mov    ebp,DWORD PTR ds:0xc00322e0
c001dea2:	40                   	inc    eax
c001dea3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dea6:	e8 e1 19 ff ff       	call   c000f88c <malloc>
c001deab:	89 04 ad 00 27 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcd900],eax
c001deb2:	58                   	pop    eax
c001deb3:	a1 e0 22 03 c0       	mov    eax,ds:0xc00322e0
c001deb8:	5a                   	pop    edx
c001deb9:	56                   	push   esi
c001deba:	ff 34 85 00 27 03 c0 	push   DWORD PTR [eax*4-0x3ffcd900]
c001dec1:	e8 46 29 fe ff       	call   c000080c <strcpy>
c001dec6:	a1 e0 22 03 c0       	mov    eax,ds:0xc00322e0
c001decb:	8d 50 01             	lea    edx,[eax+0x1]
c001dece:	89 1c 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],ebx
c001ded5:	89 15 e0 22 03 c0    	mov    DWORD PTR ds:0xc00322e0,edx
c001dedb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dedf:	83 c4 0c             	add    esp,0xc
c001dee2:	89 14 85 00 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd00],edx
c001dee9:	6a 01                	push   0x1
c001deeb:	53                   	push   ebx
c001deec:	56                   	push   esi
c001deed:	e8 c2 f6 ff ff       	call   c001d5b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001def2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001def6:	83 c4 10             	add    esp,0x10
c001def9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001defe:	0f 85 83 00 00 00    	jne    c001df87 <Thr::loadDLL(char const*, bool)+0x21a>
c001df04:	89 f8                	mov    eax,edi
c001df06:	84 c0                	test   al,al
c001df08:	74 6d                	je     c001df77 <Thr::loadDLL(char const*, bool)+0x20a>
c001df0a:	83 ec 0c             	sub    esp,0xc
c001df0d:	68 03 d2 02 c0       	push   0xc002d203
c001df12:	e8 82 ca ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001df17:	83 c4 10             	add    esp,0x10
c001df1a:	eb 5b                	jmp    c001df77 <Thr::loadDLL(char const*, bool)+0x20a>
c001df1c:	89 ee                	mov    esi,ebp
c001df1e:	50                   	push   eax
c001df1f:	c1 e6 0c             	shl    esi,0xc
c001df22:	50                   	push   eax
c001df23:	01 de                	add    esi,ebx
c001df25:	56                   	push   esi
c001df26:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c001df2c:	e8 a1 3f ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001df31:	83 c4 10             	add    esp,0x10
c001df34:	f6 00 60             	test   BYTE PTR [eax],0x60
c001df37:	75 0c                	jne    c001df45 <Thr::loadDLL(char const*, bool)+0x1d8>
c001df39:	83 ec 0c             	sub    esp,0xc
c001df3c:	56                   	push   esi
c001df3d:	e8 2c 1f ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c001df42:	83 c4 10             	add    esp,0x10
c001df45:	45                   	inc    ebp
c001df46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df4e:	05 ff 0f 00 00       	add    eax,0xfff
c001df53:	bf 00 00 00 00       	mov    edi,0x0
c001df58:	83 d2 00             	adc    edx,0x0
c001df5b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001df5f:	c1 ea 0c             	shr    edx,0xc
c001df62:	39 c5                	cmp    ebp,eax
c001df64:	89 d1                	mov    ecx,edx
c001df66:	89 f8                	mov    eax,edi
c001df68:	19 c8                	sbb    eax,ecx
c001df6a:	72 b0                	jb     c001df1c <Thr::loadDLL(char const*, bool)+0x1af>
c001df6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001df71:	75 18                	jne    c001df8b <Thr::loadDLL(char const*, bool)+0x21e>
c001df73:	31 db                	xor    ebx,ebx
c001df75:	eb 14                	jmp    c001df8b <Thr::loadDLL(char const*, bool)+0x21e>
c001df77:	83 ec 0c             	sub    esp,0xc
c001df7a:	68 22 d2 02 c0       	push   0xc002d222
c001df7f:	e8 15 ca ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001df84:	83 c4 10             	add    esp,0x10
c001df87:	31 ed                	xor    ebp,ebp
c001df89:	eb bb                	jmp    c001df46 <Thr::loadDLL(char const*, bool)+0x1d9>
c001df8b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001df91:	89 d8                	mov    eax,ebx
c001df93:	5b                   	pop    ebx
c001df94:	5e                   	pop    esi
c001df95:	5f                   	pop    edi
c001df96:	5d                   	pop    ebp
c001df97:	c3                   	ret    

c001df98 <Thr::executeDLL(unsigned long, void*)>:
c001df98:	56                   	push   esi
c001df99:	53                   	push   ebx
c001df9a:	52                   	push   edx
c001df9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dfa3:	85 db                	test   ebx,ebx
c001dfa5:	75 10                	jne    c001dfb7 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dfa7:	83 ec 0c             	sub    esp,0xc
c001dfaa:	68 3e d2 02 c0       	push   0xc002d23e
c001dfaf:	e8 e5 c9 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001dfb4:	83 c4 10             	add    esp,0x10
c001dfb7:	50                   	push   eax
c001dfb8:	50                   	push   eax
c001dfb9:	53                   	push   ebx
c001dfba:	68 68 d2 02 c0       	push   0xc002d268
c001dfbf:	e8 8d 4e ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001dfc4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dfc8:	89 d8                	mov    eax,ebx
c001dfca:	83 c4 14             	add    esp,0x14
c001dfcd:	5b                   	pop    ebx
c001dfce:	5e                   	pop    esi
c001dfcf:	ff e0                	jmp    eax
c001dfd1:	90                   	nop

c001dfd2 <userModeEntryPoint(void*)>:
c001dfd2:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001dfd7:	48                   	dec    eax
c001dfd8:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001dfdd:	75 01                	jne    c001dfe0 <userModeEntryPoint(void*)+0xe>
c001dfdf:	fb                   	sti    
c001dfe0:	fb                   	sti    
c001dfe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfe6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dfe9:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dfef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dff3:	e9 32 23 fe ff       	jmp    c000032a <goToUsermode>

c001dff8 <changeTSS>:
c001dff8:	83 ec 14             	sub    esp,0x14
c001dffb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e000:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001e003:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001e008:	c1 e2 15             	shl    edx,0x15
c001e00b:	29 d0                	sub    eax,edx
c001e00d:	50                   	push   eax
c001e00e:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001e013:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e019:	05 7c 11 00 00       	add    eax,0x117c
c001e01e:	50                   	push   eax
c001e01f:	e8 4c 33 ff ff       	call   c0011370 <TSS::setESP(unsigned long)>
c001e024:	83 c4 1c             	add    esp,0x1c
c001e027:	c3                   	ret    

c001e028 <switchToThread(ThreadControlBlock*)>:
c001e028:	57                   	push   edi
c001e029:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001e02e:	56                   	push   esi
c001e02f:	85 c0                	test   eax,eax
c001e031:	53                   	push   ebx
c001e032:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e036:	0f 85 88 00 00 00    	jne    c001e0c4 <switchToThread(ThreadControlBlock*)+0x9c>
c001e03c:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001e03f:	3c ff                	cmp    al,0xff
c001e041:	74 7d                	je     c001e0c0 <switchToThread(ThreadControlBlock*)+0x98>
c001e043:	0f b6 d0             	movzx  edx,al
c001e046:	b8 84 03 00 00       	mov    eax,0x384
c001e04b:	29 d0                	sub    eax,edx
c001e04d:	c1 e0 10             	shl    eax,0x10
c001e050:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001e053:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e056:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001e05b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e061:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001e068:	74 4a                	je     c001e0b4 <switchToThread(ThreadControlBlock*)+0x8c>
c001e06a:	0f 31                	rdtsc  
c001e06c:	a3 e8 2a 03 c0       	mov    ds:0xc0032ae8,eax
c001e071:	89 c6                	mov    esi,eax
c001e073:	89 d7                	mov    edi,edx
c001e075:	2b 35 d8 2a 03 c0    	sub    esi,DWORD PTR ds:0xc0032ad8
c001e07b:	89 15 ec 2a 03 c0    	mov    DWORD PTR ds:0xc0032aec,edx
c001e081:	1b 3d dc 2a 03 c0    	sbb    edi,DWORD PTR ds:0xc0032adc
c001e087:	89 35 e0 2a 03 c0    	mov    DWORD PTR ds:0xc0032ae0,esi
c001e08d:	a3 d8 2a 03 c0       	mov    ds:0xc0032ad8,eax
c001e092:	89 3d e4 2a 03 c0    	mov    DWORD PTR ds:0xc0032ae4,edi
c001e098:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001e09e:	89 15 dc 2a 03 c0    	mov    DWORD PTR ds:0xc0032adc,edx
c001e0a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e0a7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001e0aa:	01 c6                	add    esi,eax
c001e0ac:	11 d7                	adc    edi,edx
c001e0ae:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e0b1:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001e0b4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e0b8:	5b                   	pop    ebx
c001e0b9:	5e                   	pop    esi
c001e0ba:	5f                   	pop    edi
c001e0bb:	e9 a2 22 fe ff       	jmp    c0000362 <switchToThreadASM>
c001e0c0:	31 c0                	xor    eax,eax
c001e0c2:	eb 8f                	jmp    c001e053 <switchToThread(ThreadControlBlock*)+0x2b>
c001e0c4:	5b                   	pop    ebx
c001e0c5:	c7 05 a0 2a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x1
c001e0cf:	5e                   	pop    esi
c001e0d0:	5f                   	pop    edi
c001e0d1:	c3                   	ret    

c001e0d2 <Process::addArgs(char**)>:
c001e0d2:	57                   	push   edi
c001e0d3:	56                   	push   esi
c001e0d4:	53                   	push   ebx
c001e0d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e0dd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e0e7:	85 ff                	test   edi,edi
c001e0e9:	74 3d                	je     c001e128 <Process::addArgs(char**)+0x56>
c001e0eb:	8b 07                	mov    eax,DWORD PTR [edi]
c001e0ed:	85 c0                	test   eax,eax
c001e0ef:	74 37                	je     c001e128 <Process::addArgs(char**)+0x56>
c001e0f1:	31 db                	xor    ebx,ebx
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	50                   	push   eax
c001e0f7:	e8 70 26 fe ff       	call   c000076c <strlen>
c001e0fc:	40                   	inc    eax
c001e0fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001e100:	e8 87 17 ff ff       	call   c000f88c <malloc>
c001e105:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e10c:	5a                   	pop    edx
c001e10d:	59                   	pop    ecx
c001e10e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e111:	43                   	inc    ebx
c001e112:	50                   	push   eax
c001e113:	e8 f4 26 fe ff       	call   c000080c <strcpy>
c001e118:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e11e:	83 c4 10             	add    esp,0x10
c001e121:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e124:	85 c0                	test   eax,eax
c001e126:	75 cb                	jne    c001e0f3 <Process::addArgs(char**)+0x21>
c001e128:	5b                   	pop    ebx
c001e129:	5e                   	pop    esi
c001e12a:	5f                   	pop    edi
c001e12b:	c3                   	ret    

c001e12c <Process::Process(char const*, Process*, char**)>:
c001e12c:	56                   	push   esi
c001e12d:	53                   	push   ebx
c001e12e:	83 ec 14             	sub    esp,0x14
c001e131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e135:	05 0c 02 00 00       	add    eax,0x20c
c001e13a:	bb 07 00 00 00       	mov    ebx,0x7
c001e13f:	89 c6                	mov    esi,eax
c001e141:	85 db                	test   ebx,ebx
c001e143:	78 12                	js     c001e157 <Process::Process(char const*, Process*, char**)+0x2b>
c001e145:	83 ec 0c             	sub    esp,0xc
c001e148:	56                   	push   esi
c001e149:	e8 94 ba 00 00       	call   c0029be2 <ThreadControlBlock::ThreadControlBlock()>
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	83 c6 63             	add    esi,0x63
c001e154:	4b                   	dec    ebx
c001e155:	eb ea                	jmp    c001e141 <Process::Process(char const*, Process*, char**)+0x15>
c001e157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e15b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e169:	e8 84 c6 ff ff       	call   c001a7f2 <Krnl::newProcessEnv(Process*)>
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	89 c2                	mov    edx,eax
c001e173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e177:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e17d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e181:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e18a:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c001e18f:	8d 50 01             	lea    edx,[eax+0x1]
c001e192:	89 15 f0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaf0,edx
c001e198:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e19c:	89 02                	mov    DWORD PTR [edx],eax
c001e19e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e1a6:	83 ec 0c             	sub    esp,0xc
c001e1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e1ad:	e8 da 16 ff ff       	call   c000f88c <malloc>
c001e1b2:	83 c4 10             	add    esp,0x10
c001e1b5:	89 c3                	mov    ebx,eax
c001e1b7:	83 ec 08             	sub    esp,0x8
c001e1ba:	6a 00                	push   0x0
c001e1bc:	53                   	push   ebx
c001e1bd:	e8 50 45 ff ff       	call   c0012712 <VAS::VAS(bool)>
c001e1c2:	83 c4 10             	add    esp,0x10
c001e1c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1c9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1d3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1e5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e1eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1ef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1f5:	85 c0                	test   eax,eax
c001e1f7:	74 42                	je     c001e23b <Process::Process(char const*, Process*, char**)+0x10f>
c001e1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1fd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e203:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e20d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e217:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e21d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e227:	05 0c 01 00 00       	add    eax,0x10c
c001e22c:	83 ec 08             	sub    esp,0x8
c001e22f:	52                   	push   edx
c001e230:	50                   	push   eax
c001e231:	e8 d6 25 fe ff       	call   c000080c <strcpy>
c001e236:	83 c4 10             	add    esp,0x10
c001e239:	eb 63                	jmp    c001e29e <Process::Process(char const*, Process*, char**)+0x172>
c001e23b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e243:	83 ec 0c             	sub    esp,0xc
c001e246:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e24a:	e8 3d 16 ff ff       	call   c000f88c <malloc>
c001e24f:	83 c4 10             	add    esp,0x10
c001e252:	89 c3                	mov    ebx,eax
c001e254:	83 ec 08             	sub    esp,0x8
c001e257:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e25b:	53                   	push   ebx
c001e25c:	e8 f1 2d ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c001e261:	83 c4 10             	add    esp,0x10
c001e264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e268:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e272:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	50                   	push   eax
c001e27c:	e8 08 23 ff ff       	call   c0010589 <addToTerminalCycle(VgaText*)>
c001e281:	83 c4 10             	add    esp,0x10
c001e284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e288:	05 0c 01 00 00       	add    eax,0x10c
c001e28d:	83 ec 08             	sub    esp,0x8
c001e290:	68 87 d2 02 c0       	push   0xc002d287
c001e295:	50                   	push   eax
c001e296:	e8 71 25 fe ff       	call   c000080c <strcpy>
c001e29b:	83 c4 10             	add    esp,0x10
c001e29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2a2:	83 c0 0c             	add    eax,0xc
c001e2a5:	83 ec 08             	sub    esp,0x8
c001e2a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2ac:	50                   	push   eax
c001e2ad:	e8 5a 25 fe ff       	call   c000080c <strcpy>
c001e2b2:	83 c4 10             	add    esp,0x10
c001e2b5:	83 ec 08             	sub    esp,0x8
c001e2b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e2bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2c0:	e8 0d fe ff ff       	call   c001e0d2 <Process::addArgs(char**)>
c001e2c5:	83 c4 10             	add    esp,0x10
c001e2c8:	83 ec 08             	sub    esp,0x8
c001e2cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2d3:	e8 a6 ed ff ff       	call   c001d07e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e2d8:	83 c4 10             	add    esp,0x10
c001e2db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e2e3:	83 f0 01             	xor    eax,0x1
c001e2e6:	88 c2                	mov    dl,al
c001e2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2ec:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e2f2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e2f7:	83 ec 08             	sub    esp,0x8
c001e2fa:	50                   	push   eax
c001e2fb:	68 b4 d3 02 c0       	push   0xc002d3b4
c001e300:	e8 4c 4b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	90                   	nop
c001e309:	83 c4 14             	add    esp,0x14
c001e30c:	5b                   	pop    ebx
c001e30d:	5e                   	pop    esi
c001e30e:	c3                   	ret    
c001e30f:	90                   	nop

c001e310 <Process::Process(bool, char const*, Process*, char**)>:
c001e310:	56                   	push   esi
c001e311:	53                   	push   ebx
c001e312:	83 ec 24             	sub    esp,0x24
c001e315:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e319:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e31d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e321:	05 0c 02 00 00       	add    eax,0x20c
c001e326:	bb 07 00 00 00       	mov    ebx,0x7
c001e32b:	89 c6                	mov    esi,eax
c001e32d:	85 db                	test   ebx,ebx
c001e32f:	78 12                	js     c001e343 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e331:	83 ec 0c             	sub    esp,0xc
c001e334:	56                   	push   esi
c001e335:	e8 a8 b8 00 00       	call   c0029be2 <ThreadControlBlock::ThreadControlBlock()>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	83 c6 63             	add    esi,0x63
c001e340:	4b                   	dec    ebx
c001e341:	eb ea                	jmp    c001e32d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e347:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e355:	e8 98 c4 ff ff       	call   c001a7f2 <Krnl::newProcessEnv(Process*)>
c001e35a:	83 c4 10             	add    esp,0x10
c001e35d:	89 c2                	mov    edx,eax
c001e35f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e363:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e36d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e376:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c001e37b:	8d 50 01             	lea    edx,[eax+0x1]
c001e37e:	89 15 f0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaf0,edx
c001e384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e388:	89 02                	mov    DWORD PTR [edx],eax
c001e38a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e392:	83 ec 0c             	sub    esp,0xc
c001e395:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e399:	e8 ee 14 ff ff       	call   c000f88c <malloc>
c001e39e:	83 c4 10             	add    esp,0x10
c001e3a1:	89 c3                	mov    ebx,eax
c001e3a3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e3a8:	83 ec 08             	sub    esp,0x8
c001e3ab:	50                   	push   eax
c001e3ac:	53                   	push   ebx
c001e3ad:	e8 60 43 ff ff       	call   c0012712 <VAS::VAS(bool)>
c001e3b2:	83 c4 10             	add    esp,0x10
c001e3b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3b9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e3bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3c3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e3cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3d1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3d5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e3db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3e5:	85 c0                	test   eax,eax
c001e3e7:	74 42                	je     c001e42b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e3e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3f3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e3f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3fd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e407:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e40d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e417:	05 0c 01 00 00       	add    eax,0x10c
c001e41c:	83 ec 08             	sub    esp,0x8
c001e41f:	52                   	push   edx
c001e420:	50                   	push   eax
c001e421:	e8 e6 23 fe ff       	call   c000080c <strcpy>
c001e426:	83 c4 10             	add    esp,0x10
c001e429:	eb 63                	jmp    c001e48e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e42b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e433:	83 ec 0c             	sub    esp,0xc
c001e436:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e43a:	e8 4d 14 ff ff       	call   c000f88c <malloc>
c001e43f:	83 c4 10             	add    esp,0x10
c001e442:	89 c3                	mov    ebx,eax
c001e444:	83 ec 08             	sub    esp,0x8
c001e447:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e44b:	53                   	push   ebx
c001e44c:	e8 01 2c ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e458:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e45e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e462:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e468:	83 ec 0c             	sub    esp,0xc
c001e46b:	50                   	push   eax
c001e46c:	e8 18 21 ff ff       	call   c0010589 <addToTerminalCycle(VgaText*)>
c001e471:	83 c4 10             	add    esp,0x10
c001e474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e478:	05 0c 01 00 00       	add    eax,0x10c
c001e47d:	83 ec 08             	sub    esp,0x8
c001e480:	68 87 d2 02 c0       	push   0xc002d287
c001e485:	50                   	push   eax
c001e486:	e8 81 23 fe ff       	call   c000080c <strcpy>
c001e48b:	83 c4 10             	add    esp,0x10
c001e48e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e492:	83 c0 0c             	add    eax,0xc
c001e495:	83 ec 08             	sub    esp,0x8
c001e498:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e49c:	50                   	push   eax
c001e49d:	e8 6a 23 fe ff       	call   c000080c <strcpy>
c001e4a2:	83 c4 10             	add    esp,0x10
c001e4a5:	83 ec 08             	sub    esp,0x8
c001e4a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e4b0:	e8 1d fc ff ff       	call   c001e0d2 <Process::addArgs(char**)>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	90                   	nop
c001e4b9:	83 c4 24             	add    esp,0x24
c001e4bc:	5b                   	pop    ebx
c001e4bd:	5e                   	pop    esi
c001e4be:	c3                   	ret    

c001e4bf <taskStartupFunction>:
c001e4bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4c4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e4c7:	c3                   	ret    

c001e4c8 <Semaphore::Semaphore(int)>:
c001e4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e4d0:	89 10                	mov    DWORD PTR [eax],edx
c001e4d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4d6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e4dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e4e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e4f3:	90                   	nop
c001e4f4:	c3                   	ret    
c001e4f5:	90                   	nop

c001e4f6 <Mutex::Mutex()>:
c001e4f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4fa:	6a 01                	push   0x1
c001e4fc:	50                   	push   eax
c001e4fd:	e8 c6 ff ff ff       	call   c001e4c8 <Semaphore::Semaphore(int)>
c001e502:	83 c4 08             	add    esp,0x8
c001e505:	90                   	nop
c001e506:	c3                   	ret    
c001e507:	90                   	nop

c001e508 <Process::createThread(void (*)(void*), void*, int)>:
c001e508:	55                   	push   ebp
c001e509:	31 c9                	xor    ecx,ecx
c001e50b:	57                   	push   edi
c001e50c:	56                   	push   esi
c001e50d:	53                   	push   ebx
c001e50e:	83 ec 1c             	sub    esp,0x1c
c001e511:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e515:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e51c:	89 f2                	mov    edx,esi
c001e51e:	0f b7 c2             	movzx  eax,dx
c001e521:	83 e2 01             	and    edx,0x1
c001e524:	74 16                	je     c001e53c <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e526:	d1 f8                	sar    eax,1
c001e528:	41                   	inc    ecx
c001e529:	89 c2                	mov    edx,eax
c001e52b:	83 f9 10             	cmp    ecx,0x10
c001e52e:	75 ee                	jne    c001e51e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e530:	83 c4 1c             	add    esp,0x1c
c001e533:	31 db                	xor    ebx,ebx
c001e535:	89 d8                	mov    eax,ebx
c001e537:	5b                   	pop    ebx
c001e538:	5e                   	pop    esi
c001e539:	5f                   	pop    edi
c001e53a:	5d                   	pop    ebp
c001e53b:	c3                   	ret    
c001e53c:	b8 01 00 00 00       	mov    eax,0x1
c001e541:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e544:	d3 e0                	shl    eax,cl
c001e546:	09 c6                	or     esi,eax
c001e548:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e54b:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e552:	89 c6                	mov    esi,eax
c001e554:	c1 e6 05             	shl    esi,0x5
c001e557:	01 f0                	add    eax,esi
c001e559:	01 d8                	add    eax,ebx
c001e55b:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e562:	75 0a                	jne    c001e56e <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e564:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e56e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e574:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e578:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e57b:	01 ca                	add    edx,ecx
c001e57d:	83 ec 08             	sub    esp,0x8
c001e580:	89 d0                	mov    eax,edx
c001e582:	c1 e0 05             	shl    eax,0x5
c001e585:	01 d0                	add    eax,edx
c001e587:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e58b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e58f:	01 d8                	add    eax,ebx
c001e591:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e597:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e59d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e5a3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e5a9:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e5af:	89 cd                	mov    ebp,ecx
c001e5b1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e5b5:	f7 dd                	neg    ebp
c001e5b7:	c1 e5 15             	shl    ebp,0x15
c001e5ba:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e5c0:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e5c6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e5d0:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e5d6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e5e0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e5ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5ee:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e5f5:	53                   	push   ebx
c001e5f6:	68 c4 2a 03 c0       	push   0xc0032ac4
c001e5fb:	e8 9c b3 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e600:	89 d8                	mov    eax,ebx
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	83 c4 1c             	add    esp,0x1c
c001e608:	5b                   	pop    ebx
c001e609:	5e                   	pop    esi
c001e60a:	5f                   	pop    edi
c001e60b:	5d                   	pop    ebp
c001e60c:	c3                   	ret    
c001e60d:	90                   	nop

c001e60e <Process::createUserThread()>:
c001e60e:	83 ec 0c             	sub    esp,0xc
c001e611:	68 80 00 00 00       	push   0x80
c001e616:	6a 00                	push   0x0
c001e618:	68 d2 df 01 c0       	push   0xc001dfd2
c001e61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e621:	e8 e2 fe ff ff       	call   c001e508 <Process::createThread(void (*)(void*), void*, int)>
c001e626:	83 c4 1c             	add    esp,0x1c
c001e629:	c3                   	ret    

c001e62a <setupMultitasking(void (*)())>:
c001e62a:	56                   	push   esi
c001e62b:	53                   	push   ebx
c001e62c:	51                   	push   ecx
c001e62d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e631:	eb 10                	jmp    c001e643 <setupMultitasking(void (*)())+0x19>
c001e633:	83 ec 0c             	sub    esp,0xc
c001e636:	68 c4 2a 03 c0       	push   0xc0032ac4
c001e63b:	e8 ae b2 00 00       	call   c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e640:	83 c4 10             	add    esp,0x10
c001e643:	83 ec 0c             	sub    esp,0xc
c001e646:	68 c4 2a 03 c0       	push   0xc0032ac4
c001e64b:	e8 7a b2 00 00       	call   c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e650:	83 c4 10             	add    esp,0x10
c001e653:	84 c0                	test   al,al
c001e655:	74 dc                	je     c001e633 <setupMultitasking(void (*)())+0x9>
c001e657:	83 ec 0c             	sub    esp,0xc
c001e65a:	68 3f 07 00 00       	push   0x73f
c001e65f:	e8 28 12 ff ff       	call   c000f88c <malloc>
c001e664:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e66b:	89 c3                	mov    ebx,eax
c001e66d:	6a 00                	push   0x0
c001e66f:	68 8b d2 02 c0       	push   0xc002d28b
c001e674:	6a 01                	push   0x1
c001e676:	50                   	push   eax
c001e677:	e8 94 fc ff ff       	call   c001e310 <Process::Process(bool, char const*, Process*, char**)>
c001e67c:	83 c4 18             	add    esp,0x18
c001e67f:	89 1d d0 2a 03 c0    	mov    DWORD PTR ds:0xc0032ad0,ebx
c001e685:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e68b:	68 dc d3 02 c0       	push   0xc002d3dc
c001e690:	e8 bc 47 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001e695:	58                   	pop    eax
c001e696:	5a                   	pop    edx
c001e697:	6a 63                	push   0x63
c001e699:	68 10 d4 02 c0       	push   0xc002d410
c001e69e:	e8 ae 47 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001e6a3:	59                   	pop    ecx
c001e6a4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e6aa:	e8 ab 25 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001e6af:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e6b7:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e6c1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e6c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e6ca:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e6d4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e6da:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e6e0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e6ea:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e6f4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e6fe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e704:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e70e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e714:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e71e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e724:	58                   	pop    eax
c001e725:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e72b:	5a                   	pop    edx
c001e72c:	68 87 d2 02 c0       	push   0xc002d287
c001e731:	50                   	push   eax
c001e732:	e8 d5 20 fe ff       	call   c000080c <strcpy>
c001e737:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e73e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e742:	83 c4 14             	add    esp,0x14
c001e745:	5b                   	pop    ebx
c001e746:	5e                   	pop    esi
c001e747:	e9 08 1c fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e74c <schedule()>:
c001e74c:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001e751:	85 c0                	test   eax,eax
c001e753:	74 0b                	je     c001e760 <schedule()+0x14>
c001e755:	c7 05 a0 2a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x1
c001e75f:	c3                   	ret    
c001e760:	53                   	push   ebx
c001e761:	83 ec 14             	sub    esp,0x14
c001e764:	68 c4 2a 03 c0       	push   0xc0032ac4
c001e769:	e8 5c b1 00 00       	call   c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e76e:	83 c4 10             	add    esp,0x10
c001e771:	84 c0                	test   al,al
c001e773:	75 38                	jne    c001e7ad <schedule()+0x61>
c001e775:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e77a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e77d:	4a                   	dec    edx
c001e77e:	74 32                	je     c001e7b2 <schedule()+0x66>
c001e780:	83 ec 0c             	sub    esp,0xc
c001e783:	68 c4 2a 03 c0       	push   0xc0032ac4
c001e788:	e8 59 b1 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e78d:	c7 04 24 c4 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ac4
c001e794:	89 c3                	mov    ebx,eax
c001e796:	e8 53 b1 00 00       	call   c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e79b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e7a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7a5:	e8 7e f8 ff ff       	call   c001e028 <switchToThread(ThreadControlBlock*)>
c001e7aa:	83 c4 10             	add    esp,0x10
c001e7ad:	83 c4 08             	add    esp,0x8
c001e7b0:	5b                   	pop    ebx
c001e7b1:	c3                   	ret    
c001e7b2:	83 ec 08             	sub    esp,0x8
c001e7b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e7bc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e7c2:	68 c4 2a 03 c0       	push   0xc0032ac4
c001e7c7:	e8 d0 b1 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7cc:	83 c4 10             	add    esp,0x10
c001e7cf:	eb af                	jmp    c001e780 <schedule()+0x34>
c001e7d1:	90                   	nop

c001e7d2 <Semaphore::tryAcquire()>:
c001e7d2:	53                   	push   ebx
c001e7d3:	83 ec 08             	sub    esp,0x8
c001e7d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7da:	fa                   	cli    
c001e7db:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e7e0:	8d 50 01             	lea    edx,[eax+0x1]
c001e7e3:	89 15 a8 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa8,edx
c001e7e9:	8b 15 a4 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032aa4
c001e7ef:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e7f2:	89 1d a4 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa4,ebx
c001e7f8:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e7fb:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e7fd:	7c 2a                	jl     c001e829 <Semaphore::tryAcquire()+0x57>
c001e7ff:	89 15 a4 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa4,edx
c001e805:	85 d2                	test   edx,edx
c001e807:	75 0a                	jne    c001e813 <Semaphore::tryAcquire()+0x41>
c001e809:	8b 15 a0 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032aa0
c001e80f:	85 d2                	test   edx,edx
c001e811:	75 5b                	jne    c001e86e <Semaphore::tryAcquire()+0x9c>
c001e813:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001e818:	85 c0                	test   eax,eax
c001e81a:	74 07                	je     c001e823 <Semaphore::tryAcquire()+0x51>
c001e81c:	31 c0                	xor    eax,eax
c001e81e:	83 c4 08             	add    esp,0x8
c001e821:	5b                   	pop    ebx
c001e822:	c3                   	ret    
c001e823:	fb                   	sti    
c001e824:	83 c4 08             	add    esp,0x8
c001e827:	5b                   	pop    ebx
c001e828:	c3                   	ret    
c001e829:	43                   	inc    ebx
c001e82a:	89 15 a4 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa4,edx
c001e830:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e833:	85 d2                	test   edx,edx
c001e835:	75 1f                	jne    c001e856 <Semaphore::tryAcquire()+0x84>
c001e837:	8b 0d a0 2a 03 c0    	mov    ecx,DWORD PTR ds:0xc0032aa0
c001e83d:	85 c9                	test   ecx,ecx
c001e83f:	74 15                	je     c001e856 <Semaphore::tryAcquire()+0x84>
c001e841:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001e84b:	e8 fc fe ff ff       	call   c001e74c <schedule()>
c001e850:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e855:	48                   	dec    eax
c001e856:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001e85b:	85 c0                	test   eax,eax
c001e85d:	75 08                	jne    c001e867 <Semaphore::tryAcquire()+0x95>
c001e85f:	fb                   	sti    
c001e860:	b0 01                	mov    al,0x1
c001e862:	83 c4 08             	add    esp,0x8
c001e865:	5b                   	pop    ebx
c001e866:	c3                   	ret    
c001e867:	b0 01                	mov    al,0x1
c001e869:	83 c4 08             	add    esp,0x8
c001e86c:	5b                   	pop    ebx
c001e86d:	c3                   	ret    
c001e86e:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001e878:	e8 cf fe ff ff       	call   c001e74c <schedule()>
c001e87d:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e882:	48                   	dec    eax
c001e883:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001e888:	85 c0                	test   eax,eax
c001e88a:	75 90                	jne    c001e81c <Semaphore::tryAcquire()+0x4a>
c001e88c:	eb 95                	jmp    c001e823 <Semaphore::tryAcquire()+0x51>

c001e88e <Semaphore::assertLocked(char const*)>:
c001e88e:	83 ec 0c             	sub    esp,0xc
c001e891:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e895:	fa                   	cli    
c001e896:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001e89c:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001e8a1:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8a4:	89 0d a4 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa4,ecx
c001e8aa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e8ac:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e8af:	7c 24                	jl     c001e8d5 <Semaphore::assertLocked(char const*)+0x47>
c001e8b1:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c001e8b6:	85 c0                	test   eax,eax
c001e8b8:	75 09                	jne    c001e8c3 <Semaphore::assertLocked(char const*)+0x35>
c001e8ba:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c001e8bf:	85 c0                	test   eax,eax
c001e8c1:	75 29                	jne    c001e8ec <Semaphore::assertLocked(char const*)+0x5e>
c001e8c3:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e8c8:	48                   	dec    eax
c001e8c9:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001e8ce:	75 01                	jne    c001e8d1 <Semaphore::assertLocked(char const*)+0x43>
c001e8d0:	fb                   	sti    
c001e8d1:	83 c4 0c             	add    esp,0xc
c001e8d4:	c3                   	ret    
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e8dc:	e8 b8 c0 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001e8e1:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001e8e6:	83 c4 10             	add    esp,0x10
c001e8e9:	48                   	dec    eax
c001e8ea:	eb c5                	jmp    c001e8b1 <Semaphore::assertLocked(char const*)+0x23>
c001e8ec:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001e8f6:	e8 51 fe ff ff       	call   c001e74c <schedule()>
c001e8fb:	eb c6                	jmp    c001e8c3 <Semaphore::assertLocked(char const*)+0x35>

c001e8fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e8fd:	83 ec 14             	sub    esp,0x14
c001e900:	ff 35 a8 2a 03 c0    	push   DWORD PTR ds:0xc0032aa8
c001e906:	68 34 d4 02 c0       	push   0xc002d434
c001e90b:	e8 41 45 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001e910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e915:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e919:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e91c:	e8 2b fe ff ff       	call   c001e74c <schedule()>
c001e921:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e926:	83 c4 10             	add    esp,0x10
c001e929:	48                   	dec    eax
c001e92a:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001e92f:	85 c0                	test   eax,eax
c001e931:	75 06                	jne    c001e939 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e933:	fb                   	sti    
c001e934:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e939:	83 ec 08             	sub    esp,0x8
c001e93c:	50                   	push   eax
c001e93d:	68 68 d4 02 c0       	push   0xc002d468
c001e942:	e8 0a 45 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001e947:	83 c4 1c             	add    esp,0x1c
c001e94a:	c3                   	ret    

c001e94b <blockTask(TaskState)>:
c001e94b:	83 ec 0c             	sub    esp,0xc
c001e94e:	fa                   	cli    
c001e94f:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001e955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e95e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e961:	e8 e6 fd ff ff       	call   c001e74c <schedule()>
c001e966:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001e96b:	48                   	dec    eax
c001e96c:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001e971:	75 01                	jne    c001e974 <blockTask(TaskState)+0x29>
c001e973:	fb                   	sti    
c001e974:	83 c4 0c             	add    esp,0xc
c001e977:	c3                   	ret    

c001e978 <waitTask(int, int*, int)>:
c001e978:	83 ec 18             	sub    esp,0x18
c001e97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e980:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e984:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e987:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e98b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e990:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e993:	6a 07                	push   0x7
c001e995:	e8 b1 ff ff ff       	call   c001e94b <blockTask(TaskState)>
c001e99a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e99f:	83 c4 10             	add    esp,0x10
c001e9a2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e9a5:	85 d2                	test   edx,edx
c001e9a7:	74 0a                	je     c001e9b3 <waitTask(int, int*, int)+0x3b>
c001e9a9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e9ac:	89 02                	mov    DWORD PTR [edx],eax
c001e9ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9b3:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e9b6:	83 c4 0c             	add    esp,0xc
c001e9b9:	c3                   	ret    

c001e9ba <nanoSleepUntil(unsigned long long)>:
c001e9ba:	83 ec 0c             	sub    esp,0xc
c001e9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9c5:	3b 05 f0 fb 02 c0    	cmp    eax,DWORD PTR ds:0xc002fbf0
c001e9cb:	89 d1                	mov    ecx,edx
c001e9cd:	1b 0d f4 fb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002fbf4
c001e9d3:	73 04                	jae    c001e9d9 <nanoSleepUntil(unsigned long long)+0x1f>
c001e9d5:	83 c4 0c             	add    esp,0xc
c001e9d8:	c3                   	ret    
c001e9d9:	fa                   	cli    
c001e9da:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001e9e0:	83 ec 08             	sub    esp,0x8
c001e9e3:	ff 05 a4 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa4
c001e9e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9ef:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e9f2:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e9f5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e9fb:	68 b8 2a 03 c0       	push   0xc0032ab8
c001ea00:	e8 97 af 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea05:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001ea0c:	e8 3a ff ff ff       	call   c001e94b <blockTask(TaskState)>
c001ea11:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	48                   	dec    eax
c001ea1a:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c001ea1f:	85 c0                	test   eax,eax
c001ea21:	75 09                	jne    c001ea2c <nanoSleepUntil(unsigned long long)+0x72>
c001ea23:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c001ea28:	85 c0                	test   eax,eax
c001ea2a:	75 12                	jne    c001ea3e <nanoSleepUntil(unsigned long long)+0x84>
c001ea2c:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001ea31:	48                   	dec    eax
c001ea32:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001ea37:	75 9c                	jne    c001e9d5 <nanoSleepUntil(unsigned long long)+0x1b>
c001ea39:	fb                   	sti    
c001ea3a:	83 c4 0c             	add    esp,0xc
c001ea3d:	c3                   	ret    
c001ea3e:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001ea48:	e8 ff fc ff ff       	call   c001e74c <schedule()>
c001ea4d:	eb dd                	jmp    c001ea2c <nanoSleepUntil(unsigned long long)+0x72>

c001ea4f <nanoSleep(unsigned long long)>:
c001ea4f:	a1 f0 fb 02 c0       	mov    eax,ds:0xc002fbf0
c001ea54:	8b 15 f4 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbf4
c001ea5a:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001ea5e:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001ea62:	e9 53 ff ff ff       	jmp    c001e9ba <nanoSleepUntil(unsigned long long)>

c001ea67 <sleep(unsigned long long)>:
c001ea67:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001ea6f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001ea74:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001ea78:	01 ca                	add    edx,ecx
c001ea7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea82:	eb cb                	jmp    c001ea4f <nanoSleep(unsigned long long)>

c001ea84 <Semaphore::acquire()>:
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea8b:	fa                   	cli    
c001ea8c:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001ea91:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001ea97:	8d 48 01             	lea    ecx,[eax+0x1]
c001ea9a:	89 0d a4 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa4,ecx
c001eaa0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001eaa3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001eaa5:	7d 28                	jge    c001eacf <Semaphore::acquire()+0x4b>
c001eaa7:	41                   	inc    ecx
c001eaa8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001eaab:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c001eab0:	85 c0                	test   eax,eax
c001eab2:	75 09                	jne    c001eabd <Semaphore::acquire()+0x39>
c001eab4:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c001eab9:	85 c0                	test   eax,eax
c001eabb:	75 4e                	jne    c001eb0b <Semaphore::acquire()+0x87>
c001eabd:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001eac2:	48                   	dec    eax
c001eac3:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001eac8:	75 01                	jne    c001eacb <Semaphore::acquire()+0x47>
c001eaca:	fb                   	sti    
c001eacb:	83 c4 0c             	add    esp,0xc
c001eace:	c3                   	ret    
c001eacf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ead4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eadb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eade:	85 c9                	test   ecx,ecx
c001eae0:	74 3a                	je     c001eb1c <Semaphore::acquire()+0x98>
c001eae2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001eae5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaeb:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001eaee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaf3:	83 ec 0c             	sub    esp,0xc
c001eaf6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001eaf9:	6a 05                	push   0x5
c001eafb:	e8 4b fe ff ff       	call   c001e94b <blockTask(TaskState)>
c001eb00:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	48                   	dec    eax
c001eb09:	eb a0                	jmp    c001eaab <Semaphore::acquire()+0x27>
c001eb0b:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001eb15:	e8 32 fc ff ff       	call   c001e74c <schedule()>
c001eb1a:	eb a1                	jmp    c001eabd <Semaphore::acquire()+0x39>
c001eb1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb24:	eb c8                	jmp    c001eaee <Semaphore::acquire()+0x6a>

c001eb26 <taskReturned>:
c001eb26:	83 ec 18             	sub    esp,0x18
c001eb29:	68 9c d4 02 c0       	push   0xc002d49c
c001eb2e:	e8 66 be ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	6a 02                	push   0x2
c001eb3b:	e8 0b fe ff ff       	call   c001e94b <blockTask(TaskState)>
c001eb40:	fa                   	cli    
c001eb41:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001eb47:	e8 00 fc ff ff       	call   c001e74c <schedule()>
c001eb4c:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	48                   	dec    eax
c001eb55:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001eb5a:	85 c0                	test   eax,eax
c001eb5c:	75 d8                	jne    c001eb36 <taskReturned+0x10>
c001eb5e:	fb                   	sti    
c001eb5f:	eb d5                	jmp    c001eb36 <taskReturned+0x10>

c001eb61 <Thr::processFromPID(int)>:
c001eb61:	57                   	push   edi
c001eb62:	56                   	push   esi
c001eb63:	53                   	push   ebx
c001eb64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	68 92 d2 02 c0       	push   0xc002d292
c001eb70:	e8 dc 42 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001eb75:	fa                   	cli    
c001eb76:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001eb7c:	c7 04 24 c4 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ac4
c001eb83:	e8 5e ad 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	89 c7                	mov    edi,eax
c001eb8d:	eb 14                	jmp    c001eba3 <Thr::processFromPID(int)+0x42>
c001eb8f:	83 ec 0c             	sub    esp,0xc
c001eb92:	68 c4 2a 03 c0       	push   0xc0032ac4
c001eb97:	e8 4a ad 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	39 f8                	cmp    eax,edi
c001eba1:	74 49                	je     c001ebec <Thr::processFromPID(int)+0x8b>
c001eba3:	83 ec 0c             	sub    esp,0xc
c001eba6:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ebab:	e8 36 ad 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebb0:	c7 04 24 c4 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ac4
c001ebb7:	89 c3                	mov    ebx,eax
c001ebb9:	e8 30 ad 00 00       	call   c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ebbe:	58                   	pop    eax
c001ebbf:	5a                   	pop    edx
c001ebc0:	53                   	push   ebx
c001ebc1:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ebc6:	e8 d1 ad 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ebcb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebce:	83 c4 10             	add    esp,0x10
c001ebd1:	39 30                	cmp    DWORD PTR [eax],esi
c001ebd3:	75 ba                	jne    c001eb8f <Thr::processFromPID(int)+0x2e>
c001ebd5:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001ebda:	48                   	dec    eax
c001ebdb:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001ebe0:	74 07                	je     c001ebe9 <Thr::processFromPID(int)+0x88>
c001ebe2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebe5:	5b                   	pop    ebx
c001ebe6:	5e                   	pop    esi
c001ebe7:	5f                   	pop    edi
c001ebe8:	c3                   	ret    
c001ebe9:	fb                   	sti    
c001ebea:	eb f6                	jmp    c001ebe2 <Thr::processFromPID(int)+0x81>
c001ebec:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001ebf1:	48                   	dec    eax
c001ebf2:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001ebf7:	75 01                	jne    c001ebfa <Thr::processFromPID(int)+0x99>
c001ebf9:	fb                   	sti    
c001ebfa:	83 ec 0c             	sub    esp,0xc
c001ebfd:	68 ad d2 02 c0       	push   0xc002d2ad
c001ec02:	e8 4a 42 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ec07:	83 c4 10             	add    esp,0x10
c001ec0a:	31 c0                	xor    eax,eax
c001ec0c:	5b                   	pop    ebx
c001ec0d:	5e                   	pop    esi
c001ec0e:	5f                   	pop    edi
c001ec0f:	c3                   	ret    

c001ec10 <unblockTask(ThreadControlBlock*)>:
c001ec10:	53                   	push   ebx
c001ec11:	83 ec 08             	sub    esp,0x8
c001ec14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ec18:	fa                   	cli    
c001ec19:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001ec1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ec22:	85 c0                	test   eax,eax
c001ec24:	74 66                	je     c001ec8c <unblockTask(ThreadControlBlock*)+0x7c>
c001ec26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ec29:	48                   	dec    eax
c001ec2a:	74 31                	je     c001ec5d <unblockTask(ThreadControlBlock*)+0x4d>
c001ec2c:	83 ec 0c             	sub    esp,0xc
c001ec2f:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ec34:	e8 ad ac 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec39:	83 c4 10             	add    esp,0x10
c001ec3c:	85 c0                	test   eax,eax
c001ec3e:	75 17                	jne    c001ec57 <unblockTask(ThreadControlBlock*)+0x47>
c001ec40:	eb 68                	jmp    c001ecaa <unblockTask(ThreadControlBlock*)+0x9a>
c001ec42:	83 ec 08             	sub    esp,0x8
c001ec45:	50                   	push   eax
c001ec46:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ec4b:	e8 34 b0 00 00       	call   c0029c84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ec50:	83 c4 10             	add    esp,0x10
c001ec53:	85 c0                	test   eax,eax
c001ec55:	74 53                	je     c001ecaa <unblockTask(ThreadControlBlock*)+0x9a>
c001ec57:	39 c3                	cmp    ebx,eax
c001ec59:	75 e7                	jne    c001ec42 <unblockTask(ThreadControlBlock*)+0x32>
c001ec5b:	eb 1c                	jmp    c001ec79 <unblockTask(ThreadControlBlock*)+0x69>
c001ec5d:	83 ec 0c             	sub    esp,0xc
c001ec60:	68 8c d5 02 c0       	push   0xc002d58c
c001ec65:	e8 e7 41 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ec6a:	c7 04 24 18 d5 02 c0 	mov    DWORD PTR [esp],0xc002d518
c001ec71:	e8 db 41 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ec76:	83 c4 10             	add    esp,0x10
c001ec79:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001ec7e:	48                   	dec    eax
c001ec7f:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001ec84:	75 01                	jne    c001ec87 <unblockTask(ThreadControlBlock*)+0x77>
c001ec86:	fb                   	sti    
c001ec87:	83 c4 08             	add    esp,0x8
c001ec8a:	5b                   	pop    ebx
c001ec8b:	c3                   	ret    
c001ec8c:	83 ec 0c             	sub    esp,0xc
c001ec8f:	68 d0 d4 02 c0       	push   0xc002d4d0
c001ec94:	e8 b8 41 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ec99:	c7 04 24 18 d5 02 c0 	mov    DWORD PTR [esp],0xc002d518
c001eca0:	e8 ac 41 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001eca5:	83 c4 10             	add    esp,0x10
c001eca8:	eb cf                	jmp    c001ec79 <unblockTask(ThreadControlBlock*)+0x69>
c001ecaa:	83 ec 08             	sub    esp,0x8
c001ecad:	53                   	push   ebx
c001ecae:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ecb3:	e8 e4 ac 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ecb8:	83 c4 10             	add    esp,0x10
c001ecbb:	eb bc                	jmp    c001ec79 <unblockTask(ThreadControlBlock*)+0x69>

c001ecbd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ecbd:	55                   	push   ebp
c001ecbe:	57                   	push   edi
c001ecbf:	56                   	push   esi
c001ecc0:	53                   	push   ebx
c001ecc1:	83 ec 1c             	sub    esp,0x1c
c001ecc4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ecc8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eccb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ecd1:	85 ff                	test   edi,edi
c001ecd3:	7e 20                	jle    c001ecf5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ecd5:	31 f6                	xor    esi,esi
c001ecd7:	83 ec 0c             	sub    esp,0xc
c001ecda:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ece1:	46                   	inc    esi
c001ece2:	e8 b5 0b ff ff       	call   c000f89c <free>
c001ece7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecea:	83 c4 10             	add    esp,0x10
c001eced:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ecf3:	7f e2                	jg     c001ecd7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ecf5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ecff:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ed04:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ed07:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ed0a:	d3 c0                	rol    eax,cl
c001ed0c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ed13:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed16:	89 f7                	mov    edi,esi
c001ed18:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ed20:	0f 85 74 01 00 00    	jne    c001ee9a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ed26:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ed2c:	85 ed                	test   ebp,ebp
c001ed2e:	74 1b                	je     c001ed4b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	55                   	push   ebp
c001ed34:	e8 d5 b9 ff ff       	call   c001a70e <EnvVarContainer::~EnvVarContainer()>
c001ed39:	59                   	pop    ecx
c001ed3a:	5e                   	pop    esi
c001ed3b:	6a 0c                	push   0xc
c001ed3d:	55                   	push   ebp
c001ed3e:	e8 2e 40 ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c001ed43:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed46:	83 c4 10             	add    esp,0x10
c001ed49:	89 f7                	mov    edi,esi
c001ed4b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed51:	85 c0                	test   eax,eax
c001ed53:	0f 84 aa 00 00 00    	je     c001ee03 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ed59:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ed5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ed60:	31 c9                	xor    ecx,ecx
c001ed62:	eb 10                	jmp    c001ed74 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ed64:	41                   	inc    ecx
c001ed65:	83 f9 10             	cmp    ecx,0x10
c001ed68:	0f 84 95 00 00 00    	je     c001ee03 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ed6e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed74:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ed7b:	d3 fa                	sar    edx,cl
c001ed7d:	83 e2 01             	and    edx,0x1
c001ed80:	74 e2                	je     c001ed64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed82:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ed85:	01 ca                	add    edx,ecx
c001ed87:	89 d5                	mov    ebp,edx
c001ed89:	c1 e5 05             	shl    ebp,0x5
c001ed8c:	01 ea                	add    edx,ebp
c001ed8e:	01 d0                	add    eax,edx
c001ed90:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ed96:	83 fd 07             	cmp    ebp,0x7
c001ed99:	75 c9                	jne    c001ed64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed9b:	05 40 02 00 00       	add    eax,0x240
c001eda0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eda3:	83 fd ff             	cmp    ebp,0xffffffff
c001eda6:	0f 8c 08 01 00 00    	jl     c001eeb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001edac:	0f 84 b9 01 00 00    	je     c001ef6b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001edb2:	85 ed                	test   ebp,ebp
c001edb4:	0f 84 a0 01 00 00    	je     c001ef5a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001edba:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001edbc:	75 a6                	jne    c001ed64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001edbe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001edc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edc8:	01 d0                	add    eax,edx
c001edca:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001edce:	83 ec 0c             	sub    esp,0xc
c001edd1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001edd7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edda:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ede0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ede7:	50                   	push   eax
c001ede8:	e8 23 fe ff ff       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001edf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edf7:	89 f7                	mov    edi,esi
c001edf9:	41                   	inc    ecx
c001edfa:	83 f9 10             	cmp    ecx,0x10
c001edfd:	0f 85 6b ff ff ff    	jne    c001ed6e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ee03:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ee09:	85 c0                	test   eax,eax
c001ee0b:	74 5d                	je     c001ee6a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ee0d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ee13:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ee19:	74 4f                	je     c001ee6a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ee1b:	83 ec 0c             	sub    esp,0xc
c001ee1e:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ee23:	e8 be aa 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee28:	c7 04 24 c4 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ac4
c001ee2f:	89 c7                	mov    edi,eax
c001ee31:	e8 94 aa 00 00       	call   c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ee36:	83 c4 10             	add    esp,0x10
c001ee39:	84 c0                	test   al,al
c001ee3b:	0f 84 e4 00 00 00    	je     c001ef25 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ee41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee44:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ee4a:	85 d2                	test   edx,edx
c001ee4c:	74 0f                	je     c001ee5d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ee4e:	83 ec 0c             	sub    esp,0xc
c001ee51:	8b 02                	mov    eax,DWORD PTR [edx]
c001ee53:	52                   	push   edx
c001ee54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee57:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee5a:	83 c4 10             	add    esp,0x10
c001ee5d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ee67:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ee6a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ee70:	85 db                	test   ebx,ebx
c001ee72:	74 16                	je     c001ee8a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	53                   	push   ebx
c001ee78:	e8 6f 32 ff ff       	call   c00120ec <VAS::~VAS()>
c001ee7d:	58                   	pop    eax
c001ee7e:	5a                   	pop    edx
c001ee7f:	6a 14                	push   0x14
c001ee81:	53                   	push   ebx
c001ee82:	e8 ea 3e ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	83 ec 0c             	sub    esp,0xc
c001ee8d:	68 c4 d2 02 c0       	push   0xc002d2c4
c001ee92:	e8 ba 3f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ee97:	83 c4 10             	add    esp,0x10
c001ee9a:	83 ec 08             	sub    esp,0x8
c001ee9d:	68 3f 07 00 00       	push   0x73f
c001eea2:	68 d2 d2 02 c0       	push   0xc002d2d2
c001eea7:	e8 a5 3f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001eeac:	83 c4 2c             	add    esp,0x2c
c001eeaf:	5b                   	pop    ebx
c001eeb0:	5e                   	pop    esi
c001eeb1:	5f                   	pop    edi
c001eeb2:	5d                   	pop    ebp
c001eeb3:	c3                   	ret    
c001eeb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eeb8:	83 ec 0c             	sub    esp,0xc
c001eebb:	68 d0 d5 02 c0       	push   0xc002d5d0
c001eec0:	e8 d4 ba ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001eec5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eec8:	83 c4 10             	add    esp,0x10
c001eecb:	89 f7                	mov    edi,esi
c001eecd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eed1:	e9 8e fe ff ff       	jmp    c001ed64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eed6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001eedc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001eee2:	75 1c                	jne    c001ef00 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	68 38 d6 02 c0       	push   0xc002d638
c001eeec:	e8 60 3f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001eef1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001eef8:	e8 4e fa ff ff       	call   c001e94b <blockTask(TaskState)>
c001eefd:	83 c4 10             	add    esp,0x10
c001ef00:	83 ec 08             	sub    esp,0x8
c001ef03:	56                   	push   esi
c001ef04:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ef09:	e8 8e aa 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ef0e:	c7 04 24 c4 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ac4
c001ef15:	e8 cc a9 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef1a:	83 c4 10             	add    esp,0x10
c001ef1d:	39 f8                	cmp    eax,edi
c001ef1f:	0f 84 1c ff ff ff    	je     c001ee41 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ef25:	83 ec 0c             	sub    esp,0xc
c001ef28:	68 c4 2a 03 c0       	push   0xc0032ac4
c001ef2d:	e8 b4 a9 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef32:	c7 04 24 c4 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ac4
c001ef39:	89 c6                	mov    esi,eax
c001ef3b:	e8 ae a9 00 00       	call   c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef40:	83 c4 10             	add    esp,0x10
c001ef43:	39 f3                	cmp    ebx,esi
c001ef45:	74 b9                	je     c001ef00 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ef47:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ef4a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ef4d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ef53:	75 ab                	jne    c001ef00 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ef55:	e9 7c ff ff ff       	jmp    c001eed6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ef5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef5e:	83 ec 0c             	sub    esp,0xc
c001ef61:	68 04 d6 02 c0       	push   0xc002d604
c001ef66:	e9 55 ff ff ff       	jmp    c001eec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ef6b:	8b 36                	mov    esi,DWORD PTR [esi]
c001ef6d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef71:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ef74:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ef77:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ef7d:	01 d7                	add    edi,edx
c001ef7f:	89 f8                	mov    eax,edi
c001ef81:	e9 44 fe ff ff       	jmp    c001edca <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ef86 <cleanerTaskFunction(void*)>:
c001ef86:	53                   	push   ebx
c001ef87:	83 ec 08             	sub    esp,0x8
c001ef8a:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001ef8f:	48                   	dec    eax
c001ef90:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001ef95:	75 01                	jne    c001ef98 <cleanerTaskFunction(void*)+0x12>
c001ef97:	fb                   	sti    
c001ef98:	fa                   	cli    
c001ef99:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001ef9e:	80 3d 8c 2a 03 c0 00 	cmp    BYTE PTR ds:0xc0032a8c,0x0
c001efa5:	8d 50 01             	lea    edx,[eax+0x1]
c001efa8:	89 15 a8 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa8,edx
c001efae:	0f 84 b9 00 00 00    	je     c001f06d <cleanerTaskFunction(void*)+0xe7>
c001efb4:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001efb9:	85 c0                	test   eax,eax
c001efbb:	75 01                	jne    c001efbe <cleanerTaskFunction(void*)+0x38>
c001efbd:	fb                   	sti    
c001efbe:	c6 05 8c 2a 03 c0 00 	mov    BYTE PTR ds:0xc0032a8c,0x0
c001efc5:	fa                   	cli    
c001efc6:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001efcc:	ff 05 a4 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa4
c001efd2:	fa                   	cli    
c001efd3:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001efd9:	eb 3e                	jmp    c001f019 <cleanerTaskFunction(void*)+0x93>
c001efdb:	83 ec 0c             	sub    esp,0xc
c001efde:	68 ac 2a 03 c0       	push   0xc0032aac
c001efe3:	e8 fe a8 00 00       	call   c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001efe8:	c7 04 24 ac 2a 03 c0 	mov    DWORD PTR [esp],0xc0032aac
c001efef:	89 c3                	mov    ebx,eax
c001eff1:	e8 f8 a8 00 00       	call   c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eff6:	c7 04 24 e8 d2 02 c0 	mov    DWORD PTR [esp],0xc002d2e8
c001effd:	e8 4f 3e ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f002:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f005:	e8 b3 fc ff ff       	call   c001ecbd <cleanupTerminatedTask(ThreadControlBlock*)>
c001f00a:	c7 04 24 01 d3 02 c0 	mov    DWORD PTR [esp],0xc002d301
c001f011:	e8 3b 3e ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f016:	83 c4 10             	add    esp,0x10
c001f019:	83 ec 0c             	sub    esp,0xc
c001f01c:	68 ac 2a 03 c0       	push   0xc0032aac
c001f021:	e8 a4 a8 00 00       	call   c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001f026:	83 c4 10             	add    esp,0x10
c001f029:	84 c0                	test   al,al
c001f02b:	74 ae                	je     c001efdb <cleanerTaskFunction(void*)+0x55>
c001f02d:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f032:	48                   	dec    eax
c001f033:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f038:	75 01                	jne    c001f03b <cleanerTaskFunction(void*)+0xb5>
c001f03a:	fb                   	sti    
c001f03b:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001f040:	48                   	dec    eax
c001f041:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c001f046:	0f 85 3e ff ff ff    	jne    c001ef8a <cleanerTaskFunction(void*)+0x4>
c001f04c:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c001f051:	85 c0                	test   eax,eax
c001f053:	0f 84 31 ff ff ff    	je     c001ef8a <cleanerTaskFunction(void*)+0x4>
c001f059:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001f063:	e8 e4 f6 ff ff       	call   c001e74c <schedule()>
c001f068:	e9 1d ff ff ff       	jmp    c001ef8a <cleanerTaskFunction(void*)+0x4>
c001f06d:	83 ec 0c             	sub    esp,0xc
c001f070:	6a 02                	push   0x2
c001f072:	e8 86 f8 ff ff       	call   c001e8fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f077:	83 c4 10             	add    esp,0x10
c001f07a:	e9 3f ff ff ff       	jmp    c001efbe <cleanerTaskFunction(void*)+0x38>

c001f07f <terminateTask(int)>:
c001f07f:	83 ec 14             	sub    esp,0x14
c001f082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f087:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001f08a:	83 c0 0c             	add    eax,0xc
c001f08d:	50                   	push   eax
c001f08e:	68 60 d6 02 c0       	push   0xc002d660
c001f093:	e8 b9 3d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f098:	fa                   	cli    
c001f099:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f09f:	ff 05 a4 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa4
c001f0a5:	fa                   	cli    
c001f0a6:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f0ac:	c7 04 24 14 d3 02 c0 	mov    DWORD PTR [esp],0xc002d314
c001f0b3:	e8 99 3d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f0b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f0bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0c1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001f0c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0c9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f0cc:	5a                   	pop    edx
c001f0cd:	59                   	pop    ecx
c001f0ce:	50                   	push   eax
c001f0cf:	68 ac 2a 03 c0       	push   0xc0032aac
c001f0d4:	e8 c3 a8 00 00       	call   c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f0d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0de:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f0e5:	c7 04 24 2e d3 02 c0 	mov    DWORD PTR [esp],0xc002d32e
c001f0ec:	e8 60 3d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f0f1:	83 c4 10             	add    esp,0x10
c001f0f4:	a1 88 2a 03 c0       	mov    eax,ds:0xc0032a88
c001f0f9:	85 c0                	test   eax,eax
c001f0fb:	0f 84 8d 00 00 00    	je     c001f18e <terminateTask(int)+0x10f>
c001f101:	83 ec 0c             	sub    esp,0xc
c001f104:	68 48 d3 02 c0       	push   0xc002d348
c001f109:	e8 43 3d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f10e:	58                   	pop    eax
c001f10f:	c6 05 8c 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a8c,0x1
c001f116:	ff 35 88 2a 03 c0    	push   DWORD PTR ds:0xc0032a88
c001f11c:	e8 ef fa ff ff       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c001f121:	c7 04 24 62 d3 02 c0 	mov    DWORD PTR [esp],0xc002d362
c001f128:	e8 24 3d ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f135:	48                   	dec    eax
c001f136:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f13b:	75 01                	jne    c001f13e <terminateTask(int)+0xbf>
c001f13d:	fb                   	sti    
c001f13e:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001f143:	48                   	dec    eax
c001f144:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c001f149:	75 09                	jne    c001f154 <terminateTask(int)+0xd5>
c001f14b:	83 3d a0 2a 03 c0 00 	cmp    DWORD PTR ds:0xc0032aa0,0x0
c001f152:	75 4c                	jne    c001f1a0 <terminateTask(int)+0x121>
c001f154:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f159:	48                   	dec    eax
c001f15a:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f15f:	75 01                	jne    c001f162 <terminateTask(int)+0xe3>
c001f161:	fb                   	sti    
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	68 9a d3 02 c0       	push   0xc002d39a
c001f16a:	e8 e2 3c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f16f:	83 c4 10             	add    esp,0x10
c001f172:	fa                   	cli    
c001f173:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f179:	e8 ce f5 ff ff       	call   c001e74c <schedule()>
c001f17e:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f183:	48                   	dec    eax
c001f184:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f189:	75 e7                	jne    c001f172 <terminateTask(int)+0xf3>
c001f18b:	fb                   	sti    
c001f18c:	eb e4                	jmp    c001f172 <terminateTask(int)+0xf3>
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	68 7c d3 02 c0       	push   0xc002d37c
c001f196:	e8 b6 3c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f19b:	83 c4 10             	add    esp,0x10
c001f19e:	eb 90                	jmp    c001f130 <terminateTask(int)+0xb1>
c001f1a0:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001f1aa:	e8 9d f5 ff ff       	call   c001e74c <schedule()>
c001f1af:	eb a3                	jmp    c001f154 <terminateTask(int)+0xd5>

c001f1b1 <Thr::terminateFromIRQ(int)>:
c001f1b1:	83 ec 18             	sub    esp,0x18
c001f1b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b8:	e8 c2 fe ff ff       	call   c001f07f <terminateTask(int)>
c001f1bd:	90                   	nop

c001f1be <Semaphore::release()>:
c001f1be:	83 ec 0c             	sub    esp,0xc
c001f1c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1c5:	fa                   	cli    
c001f1c6:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001f1cb:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f1d1:	8d 48 01             	lea    ecx,[eax+0x1]
c001f1d4:	89 0d a4 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa4,ecx
c001f1da:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f1dd:	85 c9                	test   ecx,ecx
c001f1df:	74 3c                	je     c001f21d <Semaphore::release()+0x5f>
c001f1e1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f1e4:	83 ec 0c             	sub    esp,0xc
c001f1e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f1ea:	51                   	push   ecx
c001f1eb:	e8 20 fa ff ff       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c001f1f0:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	48                   	dec    eax
c001f1f9:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c001f1fe:	85 c0                	test   eax,eax
c001f200:	75 09                	jne    c001f20b <Semaphore::release()+0x4d>
c001f202:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c001f207:	85 c0                	test   eax,eax
c001f209:	75 17                	jne    c001f222 <Semaphore::release()+0x64>
c001f20b:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f210:	48                   	dec    eax
c001f211:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f216:	75 01                	jne    c001f219 <Semaphore::release()+0x5b>
c001f218:	fb                   	sti    
c001f219:	83 c4 0c             	add    esp,0xc
c001f21c:	c3                   	ret    
c001f21d:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f220:	eb d7                	jmp    c001f1f9 <Semaphore::release()+0x3b>
c001f222:	c7 05 a0 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa0,0x0
c001f22c:	e8 1b f5 ff ff       	call   c001e74c <schedule()>
c001f231:	eb d8                	jmp    c001f20b <Semaphore::release()+0x4d>

c001f233 <__static_initialization_and_destruction_0(int, int)>:
c001f233:	83 ec 0c             	sub    esp,0xc
c001f236:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f23b:	0f 85 88 00 00 00    	jne    c001f2c9 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f241:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f249:	75 7e                	jne    c001f2c9 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f24b:	83 ec 0c             	sub    esp,0xc
c001f24e:	68 c4 2a 03 c0       	push   0xc0032ac4
c001f253:	e8 d4 a9 00 00       	call   c0029c2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f258:	83 c4 10             	add    esp,0x10
c001f25b:	83 ec 04             	sub    esp,0x4
c001f25e:	68 8c e4 02 c0       	push   0xc002e48c
c001f263:	68 c4 2a 03 c0       	push   0xc0032ac4
c001f268:	68 e0 9b 02 c0       	push   0xc0029be0
c001f26d:	e8 79 3a ff ff       	call   c0012ceb <__cxa_atexit>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	83 ec 0c             	sub    esp,0xc
c001f278:	68 b8 2a 03 c0       	push   0xc0032ab8
c001f27d:	e8 aa a9 00 00       	call   c0029c2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f282:	83 c4 10             	add    esp,0x10
c001f285:	83 ec 04             	sub    esp,0x4
c001f288:	68 8c e4 02 c0       	push   0xc002e48c
c001f28d:	68 b8 2a 03 c0       	push   0xc0032ab8
c001f292:	68 e0 9b 02 c0       	push   0xc0029be0
c001f297:	e8 4f 3a ff ff       	call   c0012ceb <__cxa_atexit>
c001f29c:	83 c4 10             	add    esp,0x10
c001f29f:	83 ec 0c             	sub    esp,0xc
c001f2a2:	68 ac 2a 03 c0       	push   0xc0032aac
c001f2a7:	e8 80 a9 00 00       	call   c0029c2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f2ac:	83 c4 10             	add    esp,0x10
c001f2af:	83 ec 04             	sub    esp,0x4
c001f2b2:	68 8c e4 02 c0       	push   0xc002e48c
c001f2b7:	68 ac 2a 03 c0       	push   0xc0032aac
c001f2bc:	68 e0 9b 02 c0       	push   0xc0029be0
c001f2c1:	e8 25 3a ff ff       	call   c0012ceb <__cxa_atexit>
c001f2c6:	83 c4 10             	add    esp,0x10
c001f2c9:	90                   	nop
c001f2ca:	83 c4 0c             	add    esp,0xc
c001f2cd:	c3                   	ret    

c001f2ce <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f2ce:	83 ec 0c             	sub    esp,0xc
c001f2d1:	83 ec 08             	sub    esp,0x8
c001f2d4:	68 ff ff 00 00       	push   0xffff
c001f2d9:	6a 01                	push   0x1
c001f2db:	e8 53 ff ff ff       	call   c001f233 <__static_initialization_and_destruction_0(int, int)>
c001f2e0:	83 c4 10             	add    esp,0x10
c001f2e3:	83 c4 0c             	add    esp,0xc
c001f2e6:	c3                   	ret    

c001f2e7 <Vm::inbv(unsigned short)>:
c001f2e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2eb:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f2f0:	75 06                	jne    c001f2f8 <Vm::inbv(unsigned short)+0x11>
c001f2f2:	a0 0c 2b 03 c0       	mov    al,ds:0xc0032b0c
c001f2f7:	c3                   	ret    
c001f2f8:	ec                   	in     al,dx
c001f2f9:	c3                   	ret    

c001f2fa <Vm::outbv(unsigned short, unsigned char)>:
c001f2fa:	53                   	push   ebx
c001f2fb:	83 ec 08             	sub    esp,0x8
c001f2fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f302:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f306:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f30b:	75 38                	jne    c001f345 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f30d:	0f b6 c3             	movzx  eax,bl
c001f310:	51                   	push   ecx
c001f311:	51                   	push   ecx
c001f312:	50                   	push   eax
c001f313:	68 7f d6 02 c0       	push   0xc002d67f
c001f318:	e8 34 3b ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f31d:	8b 15 0c 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b0c
c001f323:	83 c4 10             	add    esp,0x10
c001f326:	8d 42 01             	lea    eax,[edx+0x1]
c001f329:	88 9a 20 2b 03 c0    	mov    BYTE PTR [edx-0x3ffcd4e0],bl
c001f32f:	a3 0c 2b 03 c0       	mov    ds:0xc0032b0c,eax
c001f334:	83 f8 20             	cmp    eax,0x20
c001f337:	75 0f                	jne    c001f348 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f339:	c7 05 0c 2b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0032b0c,0x1f
c001f343:	eb 03                	jmp    c001f348 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f345:	88 d8                	mov    al,bl
c001f347:	ee                   	out    dx,al
c001f348:	83 c4 08             	add    esp,0x8
c001f34b:	5b                   	pop    ebx
c001f34c:	c3                   	ret    

c001f34d <Vm::realToLinear(unsigned short, unsigned short)>:
c001f34d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f352:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f357:	c1 e0 04             	shl    eax,0x4
c001f35a:	01 d0                	add    eax,edx
c001f35c:	c3                   	ret    

c001f35d <Vm::getSegment(unsigned int)>:
c001f35d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f361:	c1 e8 10             	shr    eax,0x10
c001f364:	c3                   	ret    

c001f365 <Vm::getOffset(unsigned int)>:
c001f365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f369:	c3                   	ret    

c001f36a <Vm::mainloop2()>:
c001f36a:	83 ec 18             	sub    esp,0x18
c001f36d:	fa                   	cli    
c001f36e:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f374:	6a 02                	push   0x2
c001f376:	c6 05 05 2b 03 c0 01 	mov    BYTE PTR ds:0xc0032b05,0x1
c001f37d:	e8 7b f5 ff ff       	call   c001e8fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f387:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f38b:	52                   	push   edx
c001f38c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f390:	52                   	push   edx
c001f391:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f395:	52                   	push   edx
c001f396:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f39a:	50                   	push   eax
c001f39b:	e8 5a 0f fe ff       	call   c00002fa <goToVM86>
c001f3a0:	83 c4 2c             	add    esp,0x2c
c001f3a3:	c3                   	ret    

c001f3a4 <Vm::mainVm8086Loop(void*)>:
c001f3a4:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f3a9:	48                   	dec    eax
c001f3aa:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f3af:	75 01                	jne    c001f3b2 <Vm::mainVm8086Loop(void*)+0xe>
c001f3b1:	fb                   	sti    
c001f3b2:	eb b6                	jmp    c001f36a <Vm::mainloop2()>

c001f3b4 <Vm::mainloop3(unsigned long)>:
c001f3b4:	83 ec 18             	sub    esp,0x18
c001f3b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3bb:	fa                   	cli    
c001f3bc:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f3c2:	6a 02                	push   0x2
c001f3c4:	c6 05 04 2b 03 c0 01 	mov    BYTE PTR ds:0xc0032b04,0x1
c001f3cb:	a3 00 2b 03 c0       	mov    ds:0xc0032b00,eax
c001f3d0:	e8 28 f5 ff ff       	call   c001e8fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f3d5:	83 c4 1c             	add    esp,0x1c
c001f3d8:	eb 90                	jmp    c001f36a <Vm::mainloop2()>

c001f3da <Vm::initialise8086()>:
c001f3da:	83 ec 0c             	sub    esp,0xc
c001f3dd:	68 80 00 00 00       	push   0x80
c001f3e2:	6a 00                	push   0x0
c001f3e4:	68 a4 f3 01 c0       	push   0xc001f3a4
c001f3e9:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c001f3ef:	e8 14 f1 ff ff       	call   c001e508 <Process::createThread(void (*)(void*), void*, int)>
c001f3f4:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f3fb:	a3 08 2b 03 c0       	mov    ds:0xc0032b08,eax
c001f400:	68 00 01 00 00       	push   0x100
c001f405:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c001f40a:	6a 00                	push   0x0
c001f40c:	6a 00                	push   0x0
c001f40e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f414:	e8 45 31 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f419:	83 c4 2c             	add    esp,0x2c
c001f41c:	c3                   	ret    

c001f41d <Vm::finish8086()>:
c001f41d:	53                   	push   ebx
c001f41e:	83 ec 08             	sub    esp,0x8
c001f421:	fa                   	cli    
c001f422:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f428:	80 3d 04 2b 03 c0 00 	cmp    BYTE PTR ds:0xc0032b04,0x0
c001f42f:	75 15                	jne    c001f446 <Vm::finish8086()+0x29>
c001f431:	e8 16 f3 ff ff       	call   c001e74c <schedule()>
c001f436:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f43b:	48                   	dec    eax
c001f43c:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f441:	75 de                	jne    c001f421 <Vm::finish8086()+0x4>
c001f443:	fb                   	sti    
c001f444:	eb db                	jmp    c001f421 <Vm::finish8086()+0x4>
c001f446:	83 ec 0c             	sub    esp,0xc
c001f449:	8b 1d 00 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b00
c001f44f:	ff 35 08 2b 03 c0    	push   DWORD PTR ds:0xc0032b08
c001f455:	c6 05 04 2b 03 c0 00 	mov    BYTE PTR ds:0xc0032b04,0x0
c001f45c:	e8 af f7 ff ff       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c001f461:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f466:	83 c4 10             	add    esp,0x10
c001f469:	8d 50 ff             	lea    edx,[eax-0x1]
c001f46c:	89 15 a8 2a 03 c0    	mov    DWORD PTR ds:0xc0032aa8,edx
c001f472:	85 d2                	test   edx,edx
c001f474:	75 01                	jne    c001f477 <Vm::finish8086()+0x5a>
c001f476:	fb                   	sti    
c001f477:	89 d8                	mov    eax,ebx
c001f479:	83 c4 08             	add    esp,0x8
c001f47c:	5b                   	pop    ebx
c001f47d:	c3                   	ret    

c001f47e <Vm::getOutput8086(unsigned char*)>:
c001f47e:	57                   	push   edi
c001f47f:	8b 0d 0c 2b 03 c0    	mov    ecx,DWORD PTR ds:0xc0032b0c
c001f485:	56                   	push   esi
c001f486:	be 20 2b 03 c0       	mov    esi,0xc0032b20
c001f48b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f48f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f491:	a1 0c 2b 03 c0       	mov    eax,ds:0xc0032b0c
c001f496:	5e                   	pop    esi
c001f497:	c7 05 0c 2b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032b0c,0x0
c001f4a1:	5f                   	pop    edi
c001f4a2:	c3                   	ret    

c001f4a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f4a3:	55                   	push   ebp
c001f4a4:	57                   	push   edi
c001f4a5:	56                   	push   esi
c001f4a6:	53                   	push   ebx
c001f4a7:	83 ec 2c             	sub    esp,0x2c
c001f4aa:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f4ae:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f4b2:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f4b6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f4ba:	fa                   	cli    
c001f4bb:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c001f4c1:	0f b6 35 05 2b 03 c0 	movzx  esi,BYTE PTR ds:0xc0032b05
c001f4c8:	89 f0                	mov    eax,esi
c001f4ca:	84 c0                	test   al,al
c001f4cc:	75 1d                	jne    c001f4eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f4ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4d2:	e8 75 f2 ff ff       	call   c001e74c <schedule()>
c001f4d7:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f4dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f4e0:	48                   	dec    eax
c001f4e1:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f4e6:	75 d2                	jne    c001f4ba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f4e8:	fb                   	sti    
c001f4e9:	eb cf                	jmp    c001f4ba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f4eb:	a1 08 2b 03 c0       	mov    eax,ds:0xc0032b08
c001f4f0:	c7 05 0c 2b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032b0c,0x0
c001f4fa:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f4fe:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f502:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f506:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f50a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f50e:	50                   	push   eax
c001f50f:	6a 20                	push   0x20
c001f511:	6a 00                	push   0x0
c001f513:	68 20 2b 03 c0       	push   0xc0032b20
c001f518:	e8 33 12 fe ff       	call   c0000750 <memset>
c001f51d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f524:	e8 63 03 ff ff       	call   c000f88c <malloc>
c001f529:	83 c4 0c             	add    esp,0xc
c001f52c:	89 c3                	mov    ebx,eax
c001f52e:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c001f534:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f538:	50                   	push   eax
c001f539:	e8 72 3e ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c001f53e:	83 c4 10             	add    esp,0x10
c001f541:	85 db                	test   ebx,ebx
c001f543:	75 0a                	jne    c001f54f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f545:	83 ec 0c             	sub    esp,0xc
c001f548:	68 9b d6 02 c0       	push   0xc002d69b
c001f54d:	eb 3e                	jmp    c001f58d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f54f:	50                   	push   eax
c001f550:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f554:	50                   	push   eax
c001f555:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f559:	50                   	push   eax
c001f55a:	53                   	push   ebx
c001f55b:	e8 60 41 ff ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c001f560:	83 c4 10             	add    esp,0x10
c001f563:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f568:	74 0a                	je     c001f574 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f56a:	83 ec 0c             	sub    esp,0xc
c001f56d:	68 af d6 02 c0       	push   0xc002d6af
c001f572:	eb 19                	jmp    c001f58d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f574:	51                   	push   ecx
c001f575:	51                   	push   ecx
c001f576:	6a 01                	push   0x1
c001f578:	53                   	push   ebx
c001f579:	e8 96 3e ff ff       	call   c0013414 <File::open(FileOpenMode)>
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	85 c0                	test   eax,eax
c001f583:	74 24                	je     c001f5a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f585:	83 ec 0c             	sub    esp,0xc
c001f588:	68 c8 d6 02 c0       	push   0xc002d6c8
c001f58d:	e8 07 b4 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c001f592:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f597:	83 c4 10             	add    esp,0x10
c001f59a:	48                   	dec    eax
c001f59b:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f5a0:	85 c0                	test   eax,eax
c001f5a2:	75 01                	jne    c001f5a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f5a4:	fb                   	sti    
c001f5a5:	31 f6                	xor    esi,esi
c001f5a7:	eb 58                	jmp    c001f601 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f5a9:	0f b7 ed             	movzx  ebp,bp
c001f5ac:	50                   	push   eax
c001f5ad:	0f b7 ff             	movzx  edi,di
c001f5b0:	50                   	push   eax
c001f5b1:	55                   	push   ebp
c001f5b2:	57                   	push   edi
c001f5b3:	e8 95 fd ff ff       	call   c001f34d <Vm::realToLinear(unsigned short, unsigned short)>
c001f5b8:	5a                   	pop    edx
c001f5b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f5bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f5bf:	51                   	push   ecx
c001f5c0:	50                   	push   eax
c001f5c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f5c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f5c9:	53                   	push   ebx
c001f5ca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f5cd:	83 c4 14             	add    esp,0x14
c001f5d0:	53                   	push   ebx
c001f5d1:	e8 9c 3e ff ff       	call   c0013472 <File::close()>
c001f5d6:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	48                   	dec    eax
c001f5df:	c6 05 05 2b 03 c0 00 	mov    BYTE PTR ds:0xc0032b05,0x0
c001f5e6:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c001f5eb:	85 c0                	test   eax,eax
c001f5ed:	75 01                	jne    c001f5f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f5ef:	fb                   	sti    
c001f5f0:	83 ec 0c             	sub    esp,0xc
c001f5f3:	ff 35 08 2b 03 c0    	push   DWORD PTR ds:0xc0032b08
c001f5f9:	e8 12 f6 ff ff       	call   c001ec10 <unblockTask(ThreadControlBlock*)>
c001f5fe:	83 c4 10             	add    esp,0x10
c001f601:	83 c4 2c             	add    esp,0x2c
c001f604:	89 f0                	mov    eax,esi
c001f606:	5b                   	pop    ebx
c001f607:	5e                   	pop    esi
c001f608:	5f                   	pop    edi
c001f609:	5d                   	pop    ebp
c001f60a:	c3                   	ret    

c001f60b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f60b:	57                   	push   edi
c001f60c:	56                   	push   esi
c001f60d:	53                   	push   ebx
c001f60e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f616:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f61a:	83 e8 06             	sub    eax,0x6
c001f61d:	0f b7 c0             	movzx  eax,ax
c001f620:	50                   	push   eax
c001f621:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f626:	50                   	push   eax
c001f627:	e8 21 fd ff ff       	call   c001f34d <Vm::realToLinear(unsigned short, unsigned short)>
c001f62c:	5a                   	pop    edx
c001f62d:	5e                   	pop    esi
c001f62e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f631:	8d 56 fa             	lea    edx,[esi-0x6]
c001f634:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f63a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f63d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f640:	83 c2 02             	add    edx,0x2
c001f643:	66 89 10             	mov    WORD PTR [eax],dx
c001f646:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f649:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f64d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f650:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f654:	89 d6                	mov    esi,edx
c001f656:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f65c:	66 81 e6 ff fd       	and    si,0xfdff
c001f661:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f665:	74 07                	je     c001f66e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f667:	89 d6                	mov    esi,edx
c001f669:	66 81 ce 00 02       	or     si,0x200
c001f66e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f677:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f67b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f683:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f686:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f68e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f691:	5b                   	pop    ebx
c001f692:	5e                   	pop    esi
c001f693:	5f                   	pop    edi
c001f694:	c3                   	ret    

c001f695 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f695:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f69a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f69f:	c1 e0 04             	shl    eax,0x4
c001f6a2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f6a5:	c3                   	ret    

c001f6a6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f6a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6b0:	c1 e0 04             	shl    eax,0x4
c001f6b3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f6b7:	c3                   	ret    

c001f6b8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f6b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6c2:	c1 e0 04             	shl    eax,0x4
c001f6c5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f6c8:	c3                   	ret    

c001f6c9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f6c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6d3:	c1 e0 04             	shl    eax,0x4
c001f6d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6da:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f6dd:	c3                   	ret    

c001f6de <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f6de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6e8:	c1 e0 04             	shl    eax,0x4
c001f6eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6ef:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f6f3:	c3                   	ret    

c001f6f4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f6f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6fe:	c1 e0 04             	shl    eax,0x4
c001f701:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f705:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f708:	c3                   	ret    

c001f709 <Vm::faultHandler(regs*)>:
c001f709:	55                   	push   ebp
c001f70a:	57                   	push   edi
c001f70b:	56                   	push   esi
c001f70c:	53                   	push   ebx
c001f70d:	83 ec 1c             	sub    esp,0x1c
c001f710:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f714:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f717:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f71a:	0f b7 c1             	movzx  eax,cx
c001f71d:	50                   	push   eax
c001f71e:	0f b7 c3             	movzx  eax,bx
c001f721:	c1 e3 04             	shl    ebx,0x4
c001f724:	50                   	push   eax
c001f725:	e8 23 fc ff ff       	call   c001f34d <Vm::realToLinear(unsigned short, unsigned short)>
c001f72a:	5a                   	pop    edx
c001f72b:	89 c5                	mov    ebp,eax
c001f72d:	5e                   	pop    esi
c001f72e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f732:	50                   	push   eax
c001f733:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f737:	50                   	push   eax
c001f738:	e8 10 fc ff ff       	call   c001f34d <Vm::realToLinear(unsigned short, unsigned short)>
c001f73d:	01 cb                	add    ebx,ecx
c001f73f:	89 c6                	mov    esi,eax
c001f741:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f745:	50                   	push   eax
c001f746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f74a:	50                   	push   eax
c001f74b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f74f:	50                   	push   eax
c001f750:	55                   	push   ebp
c001f751:	53                   	push   ebx
c001f752:	b3 06                	mov    bl,0x6
c001f754:	68 e1 d6 02 c0       	push   0xc002d6e1
c001f759:	e8 f3 36 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f75e:	83 c4 20             	add    esp,0x20
c001f761:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f766:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f76b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f76f:	3c 9d                	cmp    al,0x9d
c001f771:	0f 84 d7 02 00 00    	je     c001fa4e <Vm::faultHandler(regs*)+0x345>
c001f777:	0f 87 a3 00 00 00    	ja     c001f820 <Vm::faultHandler(regs*)+0x117>
c001f77d:	3c 66                	cmp    al,0x66
c001f77f:	0f 84 15 02 00 00    	je     c001f99a <Vm::faultHandler(regs*)+0x291>
c001f785:	77 5f                	ja     c001f7e6 <Vm::faultHandler(regs*)+0xdd>
c001f787:	3c 36                	cmp    al,0x36
c001f789:	0f 84 f1 01 00 00    	je     c001f980 <Vm::faultHandler(regs*)+0x277>
c001f78f:	77 28                	ja     c001f7b9 <Vm::faultHandler(regs*)+0xb0>
c001f791:	3c 26                	cmp    al,0x26
c001f793:	0f 84 99 01 00 00    	je     c001f932 <Vm::faultHandler(regs*)+0x229>
c001f799:	3c 2e                	cmp    al,0x2e
c001f79b:	0f 85 3b 07 00 00    	jne    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f7a1:	83 ec 0c             	sub    esp,0xc
c001f7a4:	31 db                	xor    ebx,ebx
c001f7a6:	68 f6 d6 02 c0       	push   0xc002d6f6
c001f7ab:	e8 a1 36 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f7b0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	45                   	inc    ebp
c001f7b7:	eb b2                	jmp    c001f76b <Vm::faultHandler(regs*)+0x62>
c001f7b9:	3c 64                	cmp    al,0x64
c001f7bb:	0f 84 8b 01 00 00    	je     c001f94c <Vm::faultHandler(regs*)+0x243>
c001f7c1:	0f 87 9f 01 00 00    	ja     c001f966 <Vm::faultHandler(regs*)+0x25d>
c001f7c7:	3c 3e                	cmp    al,0x3e
c001f7c9:	0f 85 0d 07 00 00    	jne    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	b3 01                	mov    bl,0x1
c001f7d4:	68 fa d6 02 c0       	push   0xc002d6fa
c001f7d9:	e8 73 36 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f7de:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7e1:	83 c4 10             	add    esp,0x10
c001f7e4:	eb d0                	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f7e6:	3c 6d                	cmp    al,0x6d
c001f7e8:	0f 84 af 03 00 00    	je     c001fb9d <Vm::faultHandler(regs*)+0x494>
c001f7ee:	77 15                	ja     c001f805 <Vm::faultHandler(regs*)+0xfc>
c001f7f0:	3c 67                	cmp    al,0x67
c001f7f2:	0f 84 bf 01 00 00    	je     c001f9b7 <Vm::faultHandler(regs*)+0x2ae>
c001f7f8:	3c 6c                	cmp    al,0x6c
c001f7fa:	0f 84 3f 03 00 00    	je     c001fb3f <Vm::faultHandler(regs*)+0x436>
c001f800:	e9 d7 06 00 00       	jmp    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f805:	3c 6f                	cmp    al,0x6f
c001f807:	0f 84 a4 04 00 00    	je     c001fcb1 <Vm::faultHandler(regs*)+0x5a8>
c001f80d:	0f 82 11 04 00 00    	jb     c001fc24 <Vm::faultHandler(regs*)+0x51b>
c001f813:	3c 9c                	cmp    al,0x9c
c001f815:	0f 84 ba 01 00 00    	je     c001f9d5 <Vm::faultHandler(regs*)+0x2cc>
c001f81b:	e9 bc 06 00 00       	jmp    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f820:	3c ec                	cmp    al,0xec
c001f822:	0f 84 24 06 00 00    	je     c001fe4c <Vm::faultHandler(regs*)+0x743>
c001f828:	0f 87 93 00 00 00    	ja     c001f8c1 <Vm::faultHandler(regs*)+0x1b8>
c001f82e:	3c e4                	cmp    al,0xe4
c001f830:	0f 84 5c 05 00 00    	je     c001fd92 <Vm::faultHandler(regs*)+0x689>
c001f836:	77 6a                	ja     c001f8a2 <Vm::faultHandler(regs*)+0x199>
c001f838:	3c cd                	cmp    al,0xcd
c001f83a:	0f 84 7e 02 00 00    	je     c001fabe <Vm::faultHandler(regs*)+0x3b5>
c001f840:	3c cf                	cmp    al,0xcf
c001f842:	0f 85 94 06 00 00    	jne    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f848:	83 ec 0c             	sub    esp,0xc
c001f84b:	68 3e d7 02 c0       	push   0xc002d73e
c001f850:	e8 fc 35 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f855:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f858:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f85b:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f85f:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f862:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f866:	0d 00 02 02 00       	or     eax,0x20200
c001f86b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f86e:	56                   	push   esi
c001f86f:	53                   	push   ebx
c001f870:	52                   	push   edx
c001f871:	68 44 d7 02 c0       	push   0xc002d744
c001f876:	e8 d6 35 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f87b:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f87f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f885:	66 c1 e8 09          	shr    ax,0x9
c001f889:	83 e0 01             	and    eax,0x1
c001f88c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f88f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f892:	83 c0 06             	add    eax,0x6
c001f895:	25 ff ff 00 00       	and    eax,0xffff
c001f89a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f89d:	e9 95 02 00 00       	jmp    c001fb37 <Vm::faultHandler(regs*)+0x42e>
c001f8a2:	3c e6                	cmp    al,0xe6
c001f8a4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f8a8:	0f 84 4e 05 00 00    	je     c001fdfc <Vm::faultHandler(regs*)+0x6f3>
c001f8ae:	0f 82 0a 05 00 00    	jb     c001fdbe <Vm::faultHandler(regs*)+0x6b5>
c001f8b4:	3c e7                	cmp    al,0xe7
c001f8b6:	0f 84 69 05 00 00    	je     c001fe25 <Vm::faultHandler(regs*)+0x71c>
c001f8bc:	e9 1b 06 00 00       	jmp    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f8c1:	3c ef                	cmp    al,0xef
c001f8c3:	0f 84 e6 05 00 00    	je     c001feaf <Vm::faultHandler(regs*)+0x7a6>
c001f8c9:	77 37                	ja     c001f902 <Vm::faultHandler(regs*)+0x1f9>
c001f8cb:	3c ed                	cmp    al,0xed
c001f8cd:	0f 84 a3 05 00 00    	je     c001fe76 <Vm::faultHandler(regs*)+0x76d>
c001f8d3:	3c ee                	cmp    al,0xee
c001f8d5:	0f 85 01 06 00 00    	jne    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f8db:	52                   	push   edx
c001f8dc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f8df:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f8e2:	68 df d7 02 c0       	push   0xc002d7df
c001f8e7:	e8 65 35 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f8ec:	59                   	pop    ecx
c001f8ed:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f8f1:	5b                   	pop    ebx
c001f8f2:	50                   	push   eax
c001f8f3:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8f7:	50                   	push   eax
c001f8f8:	e8 fd f9 ff ff       	call   c001f2fa <Vm::outbv(unsigned short, unsigned char)>
c001f8fd:	e9 a5 05 00 00       	jmp    c001fea7 <Vm::faultHandler(regs*)+0x79e>
c001f902:	3c fa                	cmp    al,0xfa
c001f904:	0f 84 f7 01 00 00    	je     c001fb01 <Vm::faultHandler(regs*)+0x3f8>
c001f90a:	3c fb                	cmp    al,0xfb
c001f90c:	0f 84 0a 02 00 00    	je     c001fb1c <Vm::faultHandler(regs*)+0x413>
c001f912:	3c f3                	cmp    al,0xf3
c001f914:	0f 85 c2 05 00 00    	jne    c001fedc <Vm::faultHandler(regs*)+0x7d3>
c001f91a:	83 ec 0c             	sub    esp,0xc
c001f91d:	68 17 d7 02 c0       	push   0xc002d717
c001f922:	e8 2a 35 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f927:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f92a:	83 c4 10             	add    esp,0x10
c001f92d:	e9 84 fe ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f932:	83 ec 0c             	sub    esp,0xc
c001f935:	b3 02                	mov    bl,0x2
c001f937:	68 f2 d6 02 c0       	push   0xc002d6f2
c001f93c:	e8 10 35 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f941:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f944:	83 c4 10             	add    esp,0x10
c001f947:	e9 6a fe ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f94c:	83 ec 0c             	sub    esp,0xc
c001f94f:	b3 03                	mov    bl,0x3
c001f951:	68 fe d6 02 c0       	push   0xc002d6fe
c001f956:	e8 f6 34 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f95b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f95e:	83 c4 10             	add    esp,0x10
c001f961:	e9 50 fe ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	b3 04                	mov    bl,0x4
c001f96b:	68 02 d7 02 c0       	push   0xc002d702
c001f970:	e8 dc 34 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f975:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f978:	83 c4 10             	add    esp,0x10
c001f97b:	e9 36 fe ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f980:	83 ec 0c             	sub    esp,0xc
c001f983:	b3 05                	mov    bl,0x5
c001f985:	68 06 d7 02 c0       	push   0xc002d706
c001f98a:	e8 c2 34 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f98f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f992:	83 c4 10             	add    esp,0x10
c001f995:	e9 1c fe ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	68 0a d7 02 c0       	push   0xc002d70a
c001f9a2:	e8 aa 34 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f9a7:	83 c4 10             	add    esp,0x10
c001f9aa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f9ad:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f9b2:	e9 ff fd ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f9b7:	50                   	push   eax
c001f9b8:	50                   	push   eax
c001f9b9:	6a 01                	push   0x1
c001f9bb:	68 0f d7 02 c0       	push   0xc002d70f
c001f9c0:	e8 8c 34 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f9c5:	83 c4 10             	add    esp,0x10
c001f9c8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f9cb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f9d0:	e9 e1 fd ff ff       	jmp    c001f7b6 <Vm::faultHandler(regs*)+0xad>
c001f9d5:	83 ec 0c             	sub    esp,0xc
c001f9d8:	68 1d d7 02 c0       	push   0xc002d71d
c001f9dd:	e8 6f 34 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001f9e2:	83 c4 10             	add    esp,0x10
c001f9e5:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f9e8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f9ed:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f9f0:	74 2f                	je     c001fa21 <Vm::faultHandler(regs*)+0x318>
c001f9f2:	83 ea 04             	sub    edx,0x4
c001f9f5:	25 ff 0d 00 00       	and    eax,0xdff
c001f9fa:	81 e2 ff ff 00 00    	and    edx,0xffff
c001fa00:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001fa03:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001fa06:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa0c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001fa10:	0f 84 bf 04 00 00    	je     c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fa16:	80 cc 02             	or     ah,0x2
c001fa19:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001fa1c:	e9 b4 04 00 00       	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fa21:	83 ea 02             	sub    edx,0x2
c001fa24:	81 e2 ff ff 00 00    	and    edx,0xffff
c001fa2a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001fa2d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001fa31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa37:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001fa3b:	74 05                	je     c001fa42 <Vm::faultHandler(regs*)+0x339>
c001fa3d:	80 cc 02             	or     ah,0x2
c001fa40:	eb 03                	jmp    c001fa45 <Vm::faultHandler(regs*)+0x33c>
c001fa42:	80 e4 fd             	and    ah,0xfd
c001fa45:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001fa49:	e9 87 04 00 00       	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	68 24 d7 02 c0       	push   0xc002d724
c001fa56:	e8 f6 33 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fa5b:	83 c4 10             	add    esp,0x10
c001fa5e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa63:	74 28                	je     c001fa8d <Vm::faultHandler(regs*)+0x384>
c001fa65:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa67:	25 ff 0d 00 00       	and    eax,0xdff
c001fa6c:	0d 00 02 02 00       	or     eax,0x20200
c001fa71:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001fa74:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa7c:	c1 e8 09             	shr    eax,0x9
c001fa7f:	83 e0 01             	and    eax,0x1
c001fa82:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001fa85:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001fa88:	83 c0 04             	add    eax,0x4
c001fa8b:	eb 24                	jmp    c001fab1 <Vm::faultHandler(regs*)+0x3a8>
c001fa8d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fa90:	0d 00 02 02 00       	or     eax,0x20200
c001fa95:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001fa98:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa9b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001faa1:	66 c1 e8 09          	shr    ax,0x9
c001faa5:	83 e0 01             	and    eax,0x1
c001faa8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001faab:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001faae:	83 c0 02             	add    eax,0x2
c001fab1:	25 ff ff 00 00       	and    eax,0xffff
c001fab6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001fab9:	e9 17 04 00 00       	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fabe:	53                   	push   ebx
c001fabf:	53                   	push   ebx
c001fac0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fac4:	50                   	push   eax
c001fac5:	68 2a d7 02 c0       	push   0xc002d72a
c001faca:	e8 82 33 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001facf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad3:	83 c4 10             	add    esp,0x10
c001fad6:	3c ee                	cmp    al,0xee
c001fad8:	75 10                	jne    c001faea <Vm::faultHandler(regs*)+0x3e1>
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fae0:	e8 cf f8 ff ff       	call   c001f3b4 <Vm::mainloop3(unsigned long)>
c001fae5:	e9 c0 03 00 00       	jmp    c001feaa <Vm::faultHandler(regs*)+0x7a1>
c001faea:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001faee:	83 ec 0c             	sub    esp,0xc
c001faf1:	53                   	push   ebx
c001faf2:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001faf6:	53                   	push   ebx
c001faf7:	55                   	push   ebp
c001faf8:	50                   	push   eax
c001faf9:	57                   	push   edi
c001fafa:	e8 0c fb ff ff       	call   c001f60b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001faff:	eb 36                	jmp    c001fb37 <Vm::faultHandler(regs*)+0x42e>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 34 d7 02 c0       	push   0xc002d734
c001fb09:	e8 43 33 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fb0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fb13:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fb17:	e9 8b 03 00 00       	jmp    c001fea7 <Vm::faultHandler(regs*)+0x79e>
c001fb1c:	83 ec 0c             	sub    esp,0xc
c001fb1f:	68 39 d7 02 c0       	push   0xc002d739
c001fb24:	e8 28 33 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fb29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fb2e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fb32:	e9 70 03 00 00       	jmp    c001fea7 <Vm::faultHandler(regs*)+0x79e>
c001fb37:	83 c4 20             	add    esp,0x20
c001fb3a:	e9 99 03 00 00       	jmp    c001fed8 <Vm::faultHandler(regs*)+0x7cf>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	68 77 d7 02 c0       	push   0xc002d777
c001fb47:	e8 05 33 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fb52:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb57:	74 0d                	je     c001fb66 <Vm::faultHandler(regs*)+0x45d>
c001fb59:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fb60:	0f 87 9e 01 00 00    	ja     c001fd04 <Vm::faultHandler(regs*)+0x5fb>
c001fb66:	83 ec 0c             	sub    esp,0xc
c001fb69:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb6d:	0f b7 db             	movzx  ebx,bx
c001fb70:	50                   	push   eax
c001fb71:	e8 71 f7 ff ff       	call   c001f2e7 <Vm::inbv(unsigned short)>
c001fb76:	83 c4 0c             	add    esp,0xc
c001fb79:	0f b6 c0             	movzx  eax,al
c001fb7c:	50                   	push   eax
c001fb7d:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fb81:	50                   	push   eax
c001fb82:	53                   	push   ebx
c001fb83:	e8 41 fb ff ff       	call   c001f6c9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fb88:	83 c4 10             	add    esp,0x10
c001fb8b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb8e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb92:	74 03                	je     c001fb97 <Vm::faultHandler(regs*)+0x48e>
c001fb94:	48                   	dec    eax
c001fb95:	eb 01                	jmp    c001fb98 <Vm::faultHandler(regs*)+0x48f>
c001fb97:	40                   	inc    eax
c001fb98:	0f b7 c0             	movzx  eax,ax
c001fb9b:	eb 7f                	jmp    c001fc1c <Vm::faultHandler(regs*)+0x513>
c001fb9d:	83 ec 0c             	sub    esp,0xc
c001fba0:	68 a9 d7 02 c0       	push   0xc002d7a9
c001fba5:	e8 a7 32 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fbaa:	83 c4 10             	add    esp,0x10
c001fbad:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fbb0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fbb5:	74 0d                	je     c001fbc4 <Vm::faultHandler(regs*)+0x4bb>
c001fbb7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fbbe:	0f 87 40 01 00 00    	ja     c001fd04 <Vm::faultHandler(regs*)+0x5fb>
c001fbc4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbc7:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fbcb:	0f b7 db             	movzx  ebx,bx
c001fbce:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbd3:	74 20                	je     c001fbf5 <Vm::faultHandler(regs*)+0x4ec>
c001fbd5:	ed                   	in     eax,dx
c001fbd6:	51                   	push   ecx
c001fbd7:	50                   	push   eax
c001fbd8:	56                   	push   esi
c001fbd9:	53                   	push   ebx
c001fbda:	e8 15 fb ff ff       	call   c001f6f4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fbdf:	83 c4 10             	add    esp,0x10
c001fbe2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fbe5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fbe9:	74 05                	je     c001fbf0 <Vm::faultHandler(regs*)+0x4e7>
c001fbeb:	83 e8 04             	sub    eax,0x4
c001fbee:	eb 27                	jmp    c001fc17 <Vm::faultHandler(regs*)+0x50e>
c001fbf0:	83 c0 04             	add    eax,0x4
c001fbf3:	eb 22                	jmp    c001fc17 <Vm::faultHandler(regs*)+0x50e>
c001fbf5:	66 ed                	in     ax,dx
c001fbf7:	0f b7 c0             	movzx  eax,ax
c001fbfa:	52                   	push   edx
c001fbfb:	50                   	push   eax
c001fbfc:	56                   	push   esi
c001fbfd:	53                   	push   ebx
c001fbfe:	e8 db fa ff ff       	call   c001f6de <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fc09:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fc0d:	74 05                	je     c001fc14 <Vm::faultHandler(regs*)+0x50b>
c001fc0f:	83 e8 02             	sub    eax,0x2
c001fc12:	eb 03                	jmp    c001fc17 <Vm::faultHandler(regs*)+0x50e>
c001fc14:	83 c0 02             	add    eax,0x2
c001fc17:	25 ff ff 00 00       	and    eax,0xffff
c001fc1c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fc1f:	e9 b1 02 00 00       	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fc24:	83 ec 0c             	sub    esp,0xc
c001fc27:	4b                   	dec    ebx
c001fc28:	68 af d7 02 c0       	push   0xc002d7af
c001fc2d:	e8 1f 32 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fc32:	83 c4 10             	add    esp,0x10
c001fc35:	80 fb 05             	cmp    bl,0x5
c001fc38:	77 0a                	ja     c001fc44 <Vm::faultHandler(regs*)+0x53b>
c001fc3a:	0f b6 db             	movzx  ebx,bl
c001fc3d:	ff 24 9d 20 d8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd27e0]
c001fc44:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fc48:	eb 1b                	jmp    c001fc65 <Vm::faultHandler(regs*)+0x55c>
c001fc4a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fc4e:	eb 15                	jmp    c001fc65 <Vm::faultHandler(regs*)+0x55c>
c001fc50:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fc54:	eb 0f                	jmp    c001fc65 <Vm::faultHandler(regs*)+0x55c>
c001fc56:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fc5a:	eb 09                	jmp    c001fc65 <Vm::faultHandler(regs*)+0x55c>
c001fc5c:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc5f:	eb 04                	jmp    c001fc65 <Vm::faultHandler(regs*)+0x55c>
c001fc61:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc65:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc6a:	74 0d                	je     c001fc79 <Vm::faultHandler(regs*)+0x570>
c001fc6c:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fc73:	0f 87 8b 00 00 00    	ja     c001fd04 <Vm::faultHandler(regs*)+0x5fb>
c001fc79:	53                   	push   ebx
c001fc7a:	53                   	push   ebx
c001fc7b:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fc7f:	52                   	push   edx
c001fc80:	50                   	push   eax
c001fc81:	e8 0f fa ff ff       	call   c001f695 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fc86:	5e                   	pop    esi
c001fc87:	0f b6 c0             	movzx  eax,al
c001fc8a:	5d                   	pop    ebp
c001fc8b:	50                   	push   eax
c001fc8c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fc90:	50                   	push   eax
c001fc91:	e8 64 f6 ff ff       	call   c001f2fa <Vm::outbv(unsigned short, unsigned char)>
c001fc96:	83 c4 10             	add    esp,0x10
c001fc99:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fc9c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fca0:	74 03                	je     c001fca5 <Vm::faultHandler(regs*)+0x59c>
c001fca2:	48                   	dec    eax
c001fca3:	eb 01                	jmp    c001fca6 <Vm::faultHandler(regs*)+0x59d>
c001fca5:	40                   	inc    eax
c001fca6:	0f b7 c0             	movzx  eax,ax
c001fca9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fcac:	e9 24 02 00 00       	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fcb1:	83 ec 0c             	sub    esp,0xc
c001fcb4:	4b                   	dec    ebx
c001fcb5:	68 af d7 02 c0       	push   0xc002d7af
c001fcba:	e8 92 31 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fcbf:	83 c4 10             	add    esp,0x10
c001fcc2:	80 fb 05             	cmp    bl,0x5
c001fcc5:	77 0a                	ja     c001fcd1 <Vm::faultHandler(regs*)+0x5c8>
c001fcc7:	0f b6 db             	movzx  ebx,bl
c001fcca:	ff 24 9d 38 d8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd27c8]
c001fcd1:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fcd5:	eb 1b                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x5e9>
c001fcd7:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fcdb:	eb 15                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x5e9>
c001fcdd:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fce1:	eb 0f                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x5e9>
c001fce3:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fce7:	eb 09                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x5e9>
c001fce9:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fcec:	eb 04                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x5e9>
c001fcee:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fcf2:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fcf5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fcfa:	74 39                	je     c001fd35 <Vm::faultHandler(regs*)+0x62c>
c001fcfc:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fd02:	76 31                	jbe    c001fd35 <Vm::faultHandler(regs*)+0x62c>
c001fd04:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fd08:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fd0c:	51                   	push   ecx
c001fd0d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fd11:	51                   	push   ecx
c001fd12:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fd16:	51                   	push   ecx
c001fd17:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fd1b:	51                   	push   ecx
c001fd1c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd20:	52                   	push   edx
c001fd21:	50                   	push   eax
c001fd22:	50                   	push   eax
c001fd23:	68 7c d7 02 c0       	push   0xc002d77c
c001fd28:	e8 24 31 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fd2d:	83 c4 20             	add    esp,0x20
c001fd30:	e9 fb 01 00 00       	jmp    c001ff30 <Vm::faultHandler(regs*)+0x827>
c001fd35:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fd38:	0f b7 d3             	movzx  edx,bx
c001fd3b:	81 e6 00 04 00 00    	and    esi,0x400
c001fd41:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fd44:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd49:	74 1d                	je     c001fd68 <Vm::faultHandler(regs*)+0x65f>
c001fd4b:	51                   	push   ecx
c001fd4c:	51                   	push   ecx
c001fd4d:	52                   	push   edx
c001fd4e:	50                   	push   eax
c001fd4f:	e8 64 f9 ff ff       	call   c001f6b8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fd54:	83 c4 10             	add    esp,0x10
c001fd57:	89 ea                	mov    edx,ebp
c001fd59:	ef                   	out    dx,eax
c001fd5a:	85 f6                	test   esi,esi
c001fd5c:	74 05                	je     c001fd63 <Vm::faultHandler(regs*)+0x65a>
c001fd5e:	83 eb 04             	sub    ebx,0x4
c001fd61:	eb 21                	jmp    c001fd84 <Vm::faultHandler(regs*)+0x67b>
c001fd63:	83 c3 04             	add    ebx,0x4
c001fd66:	eb 1c                	jmp    c001fd84 <Vm::faultHandler(regs*)+0x67b>
c001fd68:	51                   	push   ecx
c001fd69:	51                   	push   ecx
c001fd6a:	52                   	push   edx
c001fd6b:	50                   	push   eax
c001fd6c:	e8 35 f9 ff ff       	call   c001f6a6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fd71:	83 c4 10             	add    esp,0x10
c001fd74:	89 ea                	mov    edx,ebp
c001fd76:	66 ef                	out    dx,ax
c001fd78:	85 f6                	test   esi,esi
c001fd7a:	74 05                	je     c001fd81 <Vm::faultHandler(regs*)+0x678>
c001fd7c:	83 eb 02             	sub    ebx,0x2
c001fd7f:	eb 03                	jmp    c001fd84 <Vm::faultHandler(regs*)+0x67b>
c001fd81:	83 c3 02             	add    ebx,0x2
c001fd84:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fd8a:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fd8d:	e9 43 01 00 00       	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fd92:	53                   	push   ebx
c001fd93:	53                   	push   ebx
c001fd94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd98:	50                   	push   eax
c001fd99:	68 b5 d7 02 c0       	push   0xc002d7b5
c001fd9e:	e8 ae 30 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fda3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fdaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdae:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdb1:	e8 31 f5 ff ff       	call   c001f2e7 <Vm::inbv(unsigned short)>
c001fdb6:	0f b6 c0             	movzx  eax,al
c001fdb9:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fdbc:	eb 5e                	jmp    c001fe1c <Vm::faultHandler(regs*)+0x713>
c001fdbe:	51                   	push   ecx
c001fdbf:	51                   	push   ecx
c001fdc0:	53                   	push   ebx
c001fdc1:	68 bb d7 02 c0       	push   0xc002d7bb
c001fdc6:	e8 86 30 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fdd3:	74 07                	je     c001fddc <Vm::faultHandler(regs*)+0x6d3>
c001fdd5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fdd9:	ed                   	in     eax,dx
c001fdda:	eb 14                	jmp    c001fdf0 <Vm::faultHandler(regs*)+0x6e7>
c001fddc:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fddf:	66 31 db             	xor    bx,bx
c001fde2:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fde5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fde9:	66 ed                	in     ax,dx
c001fdeb:	0f b7 c0             	movzx  eax,ax
c001fdee:	09 d8                	or     eax,ebx
c001fdf0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fdf3:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fdf7:	e9 dc 00 00 00       	jmp    c001fed8 <Vm::faultHandler(regs*)+0x7cf>
c001fdfc:	50                   	push   eax
c001fdfd:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe00:	53                   	push   ebx
c001fe01:	68 c1 d7 02 c0       	push   0xc002d7c1
c001fe06:	e8 46 30 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fe0b:	58                   	pop    eax
c001fe0c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fe10:	5a                   	pop    edx
c001fe11:	50                   	push   eax
c001fe12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe16:	50                   	push   eax
c001fe17:	e8 de f4 ff ff       	call   c001f2fa <Vm::outbv(unsigned short, unsigned char)>
c001fe1c:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fe20:	e9 85 00 00 00       	jmp    c001feaa <Vm::faultHandler(regs*)+0x7a1>
c001fe25:	50                   	push   eax
c001fe26:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe29:	53                   	push   ebx
c001fe2a:	68 ca d7 02 c0       	push   0xc002d7ca
c001fe2f:	e8 1d 30 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fe34:	83 c4 10             	add    esp,0x10
c001fe37:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fe3b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe40:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fe43:	74 03                	je     c001fe48 <Vm::faultHandler(regs*)+0x73f>
c001fe45:	ef                   	out    dx,eax
c001fe46:	eb ab                	jmp    c001fdf3 <Vm::faultHandler(regs*)+0x6ea>
c001fe48:	66 ef                	out    dx,ax
c001fe4a:	eb a7                	jmp    c001fdf3 <Vm::faultHandler(regs*)+0x6ea>
c001fe4c:	55                   	push   ebp
c001fe4d:	55                   	push   ebp
c001fe4e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe51:	68 d3 d7 02 c0       	push   0xc002d7d3
c001fe56:	e8 f6 2f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fe5b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fe62:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fe66:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe69:	e8 79 f4 ff ff       	call   c001f2e7 <Vm::inbv(unsigned short)>
c001fe6e:	0f b6 c0             	movzx  eax,al
c001fe71:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fe74:	eb 31                	jmp    c001fea7 <Vm::faultHandler(regs*)+0x79e>
c001fe76:	56                   	push   esi
c001fe77:	56                   	push   esi
c001fe78:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe7b:	68 d9 d7 02 c0       	push   0xc002d7d9
c001fe80:	e8 cc 2f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fe85:	83 c4 10             	add    esp,0x10
c001fe88:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fe8b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe90:	74 03                	je     c001fe95 <Vm::faultHandler(regs*)+0x78c>
c001fe92:	ed                   	in     eax,dx
c001fe93:	eb 0d                	jmp    c001fea2 <Vm::faultHandler(regs*)+0x799>
c001fe95:	66 ed                	in     ax,dx
c001fe97:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fe9a:	0f b7 c0             	movzx  eax,ax
c001fe9d:	66 31 d2             	xor    dx,dx
c001fea0:	09 d0                	or     eax,edx
c001fea2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fea5:	eb 2e                	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fea7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001feaa:	83 c4 10             	add    esp,0x10
c001fead:	eb 29                	jmp    c001fed8 <Vm::faultHandler(regs*)+0x7cf>
c001feaf:	50                   	push   eax
c001feb0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001feb3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001feb6:	68 e8 d7 02 c0       	push   0xc002d7e8
c001febb:	e8 91 2f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001fec0:	83 c4 10             	add    esp,0x10
c001fec3:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fec6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fecb:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fece:	74 03                	je     c001fed3 <Vm::faultHandler(regs*)+0x7ca>
c001fed0:	ef                   	out    dx,eax
c001fed1:	eb 02                	jmp    c001fed5 <Vm::faultHandler(regs*)+0x7cc>
c001fed3:	66 ef                	out    dx,ax
c001fed5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fed8:	b0 01                	mov    al,0x1
c001feda:	eb 56                	jmp    c001ff32 <Vm::faultHandler(regs*)+0x829>
c001fedc:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fee0:	51                   	push   ecx
c001fee1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fee5:	51                   	push   ecx
c001fee6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001feea:	51                   	push   ecx
c001feeb:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001feef:	51                   	push   ecx
c001fef0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fef4:	52                   	push   edx
c001fef5:	50                   	push   eax
c001fef6:	50                   	push   eax
c001fef7:	68 f1 d7 02 c0       	push   0xc002d7f1
c001fefc:	e8 50 2f ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c001ff01:	83 c4 20             	add    esp,0x20
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	6a 60                	push   0x60
c001ff09:	e8 d9 f3 ff ff       	call   c001f2e7 <Vm::inbv(unsigned short)>
c001ff0e:	83 c4 10             	add    esp,0x10
c001ff11:	3c 1c                	cmp    al,0x1c
c001ff13:	74 04                	je     c001ff19 <Vm::faultHandler(regs*)+0x810>
c001ff15:	3c 5a                	cmp    al,0x5a
c001ff17:	75 eb                	jne    c001ff04 <Vm::faultHandler(regs*)+0x7fb>
c001ff19:	3c 1c                	cmp    al,0x1c
c001ff1b:	74 04                	je     c001ff21 <Vm::faultHandler(regs*)+0x818>
c001ff1d:	3c 5a                	cmp    al,0x5a
c001ff1f:	75 0f                	jne    c001ff30 <Vm::faultHandler(regs*)+0x827>
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	6a 60                	push   0x60
c001ff26:	e8 bc f3 ff ff       	call   c001f2e7 <Vm::inbv(unsigned short)>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	eb e9                	jmp    c001ff19 <Vm::faultHandler(regs*)+0x810>
c001ff30:	31 c0                	xor    eax,eax
c001ff32:	83 c4 1c             	add    esp,0x1c
c001ff35:	5b                   	pop    ebx
c001ff36:	5e                   	pop    esi
c001ff37:	5f                   	pop    edi
c001ff38:	5d                   	pop    ebp
c001ff39:	c3                   	ret    

c001ff3a <Vm::fpuInternalTo32(unsigned long long)>:
c001ff3a:	57                   	push   edi
c001ff3b:	56                   	push   esi
c001ff3c:	53                   	push   ebx
c001ff3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff45:	89 d6                	mov    esi,edx
c001ff47:	89 d7                	mov    edi,edx
c001ff49:	89 c1                	mov    ecx,eax
c001ff4b:	c1 ef 14             	shr    edi,0x14
c001ff4e:	89 d3                	mov    ebx,edx
c001ff50:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ff56:	31 d2                	xor    edx,edx
c001ff58:	89 f8                	mov    eax,edi
c001ff5a:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ff60:	bf ff 00 00 00       	mov    edi,0xff
c001ff65:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ff6a:	83 d2 ff             	adc    edx,0xffffffff
c001ff6d:	39 c7                	cmp    edi,eax
c001ff6f:	bf 00 00 00 00       	mov    edi,0x0
c001ff74:	19 d7                	sbb    edi,edx
c001ff76:	72 15                	jb     c001ff8d <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ff78:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ff7c:	c1 e0 17             	shl    eax,0x17
c001ff7f:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ff85:	09 f1                	or     ecx,esi
c001ff87:	09 c1                	or     ecx,eax
c001ff89:	89 cf                	mov    edi,ecx
c001ff8b:	eb 02                	jmp    c001ff8f <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ff8d:	31 ff                	xor    edi,edi
c001ff8f:	89 f8                	mov    eax,edi
c001ff91:	5b                   	pop    ebx
c001ff92:	5e                   	pop    esi
c001ff93:	5f                   	pop    edi
c001ff94:	c3                   	ret    

c001ff95 <Vm::fpuInternalTo64(unsigned long long)>:
c001ff95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff9d:	c3                   	ret    

c001ff9e <Vm::fpu32ToInternal(unsigned int)>:
c001ff9e:	57                   	push   edi
c001ff9f:	31 ff                	xor    edi,edi
c001ffa1:	56                   	push   esi
c001ffa2:	53                   	push   ebx
c001ffa3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ffa7:	89 cb                	mov    ebx,ecx
c001ffa9:	89 ce                	mov    esi,ecx
c001ffab:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ffb1:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ffb7:	c1 e9 17             	shr    ecx,0x17
c001ffba:	89 f0                	mov    eax,esi
c001ffbc:	0f b6 d1             	movzx  edx,cl
c001ffbf:	81 c2 80 03 00 00    	add    edx,0x380
c001ffc5:	89 d1                	mov    ecx,edx
c001ffc7:	89 fa                	mov    edx,edi
c001ffc9:	c1 e1 14             	shl    ecx,0x14
c001ffcc:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ffd0:	c1 e0 1d             	shl    eax,0x1d
c001ffd3:	89 d7                	mov    edi,edx
c001ffd5:	89 c6                	mov    esi,eax
c001ffd7:	89 ca                	mov    edx,ecx
c001ffd9:	89 f0                	mov    eax,esi
c001ffdb:	09 fa                	or     edx,edi
c001ffdd:	09 da                	or     edx,ebx
c001ffdf:	5b                   	pop    ebx
c001ffe0:	5e                   	pop    esi
c001ffe1:	5f                   	pop    edi
c001ffe2:	c3                   	ret    

c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>:
c001ffe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffe7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffeb:	c3                   	ret    

c001ffec <Vm::fpuFloatToLong(unsigned long long)>:
c001ffec:	57                   	push   edi
c001ffed:	31 c0                	xor    eax,eax
c001ffef:	56                   	push   esi
c001fff0:	31 d2                	xor    edx,edx
c001fff2:	53                   	push   ebx
c001fff3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fffb:	89 d9                	mov    ecx,ebx
c001fffd:	c1 e9 14             	shr    ecx,0x14
c0020000:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020006:	89 cf                	mov    edi,ecx
c0020008:	81 ef ff 03 00 00    	sub    edi,0x3ff
c002000e:	78 33                	js     c0020043 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c0020010:	89 d9                	mov    ecx,ebx
c0020012:	89 f0                	mov    eax,esi
c0020014:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c002001a:	81 c9 00 00 10 00    	or     ecx,0x100000
c0020020:	89 ca                	mov    edx,ecx
c0020022:	b9 34 00 00 00       	mov    ecx,0x34
c0020027:	29 f9                	sub    ecx,edi
c0020029:	0f ad d0             	shrd   eax,edx,cl
c002002c:	d3 fa                	sar    edx,cl
c002002e:	f6 c1 20             	test   cl,0x20
c0020031:	74 05                	je     c0020038 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c0020033:	89 d0                	mov    eax,edx
c0020035:	c1 fa 1f             	sar    edx,0x1f
c0020038:	85 db                	test   ebx,ebx
c002003a:	79 07                	jns    c0020043 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c002003c:	f7 d8                	neg    eax
c002003e:	83 d2 00             	adc    edx,0x0
c0020041:	f7 da                	neg    edx
c0020043:	5b                   	pop    ebx
c0020044:	5e                   	pop    esi
c0020045:	5f                   	pop    edi
c0020046:	c3                   	ret    

c0020047 <Vm::fpuULongToFloat(unsigned long long)>:
c0020047:	57                   	push   edi
c0020048:	31 c9                	xor    ecx,ecx
c002004a:	56                   	push   esi
c002004b:	53                   	push   ebx
c002004c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020050:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020054:	0f ba e7 14          	bt     edi,0x14
c0020058:	72 07                	jb     c0020061 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c002005a:	01 f6                	add    esi,esi
c002005c:	11 ff                	adc    edi,edi
c002005e:	41                   	inc    ecx
c002005f:	eb f3                	jmp    c0020054 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c0020061:	89 fa                	mov    edx,edi
c0020063:	89 f0                	mov    eax,esi
c0020065:	bb 33 04 00 00       	mov    ebx,0x433
c002006a:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0020070:	29 cb                	sub    ebx,ecx
c0020072:	89 d9                	mov    ecx,ebx
c0020074:	5b                   	pop    ebx
c0020075:	c1 e1 14             	shl    ecx,0x14
c0020078:	5e                   	pop    esi
c0020079:	09 ca                	or     edx,ecx
c002007b:	5f                   	pop    edi
c002007c:	c3                   	ret    

c002007d <Vm::fpuLongToFloat(long long)>:
c002007d:	56                   	push   esi
c002007e:	31 c0                	xor    eax,eax
c0020080:	53                   	push   ebx
c0020081:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020085:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020089:	39 c8                	cmp    eax,ecx
c002008b:	19 d8                	sbb    eax,ebx
c002008d:	7d 04                	jge    c0020093 <Vm::fpuLongToFloat(long long)+0x16>
c002008f:	31 f6                	xor    esi,esi
c0020091:	eb 0c                	jmp    c002009f <Vm::fpuLongToFloat(long long)+0x22>
c0020093:	f7 d9                	neg    ecx
c0020095:	be 01 00 00 00       	mov    esi,0x1
c002009a:	83 d3 00             	adc    ebx,0x0
c002009d:	f7 db                	neg    ebx
c002009f:	31 c0                	xor    eax,eax
c00200a1:	0f ba e3 14          	bt     ebx,0x14
c00200a5:	72 07                	jb     c00200ae <Vm::fpuLongToFloat(long long)+0x31>
c00200a7:	01 c9                	add    ecx,ecx
c00200a9:	11 db                	adc    ebx,ebx
c00200ab:	40                   	inc    eax
c00200ac:	eb f3                	jmp    c00200a1 <Vm::fpuLongToFloat(long long)+0x24>
c00200ae:	ba 33 04 00 00       	mov    edx,0x433
c00200b3:	29 c2                	sub    edx,eax
c00200b5:	89 c8                	mov    eax,ecx
c00200b7:	c1 e2 14             	shl    edx,0x14
c00200ba:	89 d9                	mov    ecx,ebx
c00200bc:	89 f3                	mov    ebx,esi
c00200be:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00200c4:	09 ca                	or     edx,ecx
c00200c6:	84 db                	test   bl,bl
c00200c8:	74 06                	je     c00200d0 <Vm::fpuLongToFloat(long long)+0x53>
c00200ca:	81 ca 00 00 00 80    	or     edx,0x80000000
c00200d0:	5b                   	pop    ebx
c00200d1:	5e                   	pop    esi
c00200d2:	c3                   	ret    

c00200d3 <Vm::fpuGet0()>:
c00200d3:	31 c0                	xor    eax,eax
c00200d5:	31 d2                	xor    edx,edx
c00200d7:	c3                   	ret    

c00200d8 <Vm::fpuGet1()>:
c00200d8:	b8 01 00 00 00       	mov    eax,0x1
c00200dd:	31 d2                	xor    edx,edx
c00200df:	c3                   	ret    

c00200e0 <Vm::fpuGetPi()>:
c00200e0:	b8 03 00 00 00       	mov    eax,0x3
c00200e5:	31 d2                	xor    edx,edx
c00200e7:	c3                   	ret    

c00200e8 <Vm::fpuGetLog2E()>:
c00200e8:	83 ec 18             	sub    esp,0x18
c00200eb:	68 50 d8 02 c0       	push   0xc002d850
c00200f0:	e8 a4 a8 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00200f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00200fa:	31 d2                	xor    edx,edx
c00200fc:	83 c4 1c             	add    esp,0x1c
c00200ff:	c3                   	ret    

c0020100 <Vm::fpuGetLogE2()>:
c0020100:	83 ec 18             	sub    esp,0x18
c0020103:	68 5c d8 02 c0       	push   0xc002d85c
c0020108:	e8 8c a8 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c002010d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020112:	31 d2                	xor    edx,edx
c0020114:	83 c4 1c             	add    esp,0x1c
c0020117:	c3                   	ret    

c0020118 <Vm::fpuGetLog210()>:
c0020118:	83 ec 18             	sub    esp,0x18
c002011b:	68 68 d8 02 c0       	push   0xc002d868
c0020120:	e8 74 a8 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0020125:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002012a:	31 d2                	xor    edx,edx
c002012c:	83 c4 1c             	add    esp,0x1c
c002012f:	c3                   	ret    

c0020130 <Vm::fpuGetLog102()>:
c0020130:	83 ec 18             	sub    esp,0x18
c0020133:	68 75 d8 02 c0       	push   0xc002d875
c0020138:	e8 5c a8 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c002013d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020142:	31 d2                	xor    edx,edx
c0020144:	83 c4 1c             	add    esp,0x1c
c0020147:	c3                   	ret    

c0020148 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0020148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002014c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0020150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020154:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0020158:	0f 92 c0             	setb   al
c002015b:	c3                   	ret    

c002015c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c002015c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020164:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0020168:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c002016c:	09 c2                	or     edx,eax
c002016e:	0f 94 c0             	sete   al
c0020171:	c3                   	ret    

c0020172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0020172:	57                   	push   edi
c0020173:	56                   	push   esi
c0020174:	53                   	push   ebx
c0020175:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020179:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002017d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020181:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020185:	57                   	push   edi
c0020186:	56                   	push   esi
c0020187:	53                   	push   ebx
c0020188:	51                   	push   ecx
c0020189:	e8 ce ff ff ff       	call   c002015c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c002018e:	83 c4 10             	add    esp,0x10
c0020191:	88 c2                	mov    dl,al
c0020193:	31 c0                	xor    eax,eax
c0020195:	84 d2                	test   dl,dl
c0020197:	75 0c                	jne    c00201a5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c0020199:	57                   	push   edi
c002019a:	56                   	push   esi
c002019b:	53                   	push   ebx
c002019c:	51                   	push   ecx
c002019d:	e8 a6 ff ff ff       	call   c0020148 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00201a2:	83 c4 10             	add    esp,0x10
c00201a5:	83 e0 01             	and    eax,0x1
c00201a8:	5b                   	pop    ebx
c00201a9:	88 c1                	mov    cl,al
c00201ab:	83 e2 01             	and    edx,0x1
c00201ae:	a0 41 2b 03 c0       	mov    al,ds:0xc0032b41
c00201b3:	c1 e2 06             	shl    edx,0x6
c00201b6:	83 e0 ba             	and    eax,0xffffffba
c00201b9:	5e                   	pop    esi
c00201ba:	09 c8                	or     eax,ecx
c00201bc:	5f                   	pop    edi
c00201bd:	09 d0                	or     eax,edx
c00201bf:	a2 41 2b 03 c0       	mov    ds:0xc0032b41,al
c00201c4:	c3                   	ret    

c00201c5 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00201c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00201cd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00201d1:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00201d5:	c3                   	ret    

c00201d6 <Vm::fpuAbs(unsigned long long)>:
c00201d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00201de:	c3                   	ret    

c00201df <Vm::fpuChs(unsigned long long)>:
c00201df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00201e7:	f7 d8                	neg    eax
c00201e9:	83 d2 00             	adc    edx,0x0
c00201ec:	f7 da                	neg    edx
c00201ee:	c3                   	ret    

c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00201ef:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00201f3:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00201f8:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00201fc:	eb c7                	jmp    c00201c5 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00201fe <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00201fe:	53                   	push   ebx
c00201ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002020b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002020f:	0f af ca             	imul   ecx,edx
c0020212:	0f af d8             	imul   ebx,eax
c0020215:	f7 e2                	mul    edx
c0020217:	01 d9                	add    ecx,ebx
c0020219:	5b                   	pop    ebx
c002021a:	01 ca                	add    edx,ecx
c002021c:	c3                   	ret    

c002021d <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c002021d:	83 ec 0c             	sub    esp,0xc
c0020220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002022c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020230:	e8 0f 76 00 00       	call   c0027844 <__udivdi3>
c0020235:	83 c4 1c             	add    esp,0x1c
c0020238:	c3                   	ret    

c0020239 <Vm::fpuSquare(unsigned long long)>:
c0020239:	50                   	push   eax
c002023a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002023e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020242:	52                   	push   edx
c0020243:	50                   	push   eax
c0020244:	52                   	push   edx
c0020245:	50                   	push   eax
c0020246:	e8 b3 ff ff ff       	call   c00201fe <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002024b:	83 c4 14             	add    esp,0x14
c002024e:	c3                   	ret    

c002024f <Vm::fpuGetReg(int)>:
c002024f:	83 ec 0c             	sub    esp,0xc
c0020252:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020257:	76 10                	jbe    c0020269 <Vm::fpuGetReg(int)+0x1a>
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	68 82 d8 02 c0       	push   0xc002d882
c0020261:	e8 33 a7 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0020266:	83 c4 10             	add    esp,0x10
c0020269:	a0 41 2b 03 c0       	mov    al,ds:0xc0032b41
c002026e:	b9 08 00 00 00       	mov    ecx,0x8
c0020273:	c0 e8 03             	shr    al,0x3
c0020276:	83 e0 07             	and    eax,0x7
c0020279:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002027d:	99                   	cdq    
c002027e:	f7 f9                	idiv   ecx
c0020280:	8b 04 d5 44 2b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd4bc]
c0020287:	8b 14 d5 48 2b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd4b8]
c002028e:	83 c4 0c             	add    esp,0xc
c0020291:	c3                   	ret    

c0020292 <Vm::fpuSetReg(int, unsigned long long)>:
c0020292:	57                   	push   edi
c0020293:	56                   	push   esi
c0020294:	52                   	push   edx
c0020295:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020299:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002029d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00202a2:	76 10                	jbe    c00202b4 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00202a4:	83 ec 0c             	sub    esp,0xc
c00202a7:	68 95 d8 02 c0       	push   0xc002d895
c00202ac:	e8 e8 a6 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00202b1:	83 c4 10             	add    esp,0x10
c00202b4:	a0 41 2b 03 c0       	mov    al,ds:0xc0032b41
c00202b9:	b9 08 00 00 00       	mov    ecx,0x8
c00202be:	c0 e8 03             	shr    al,0x3
c00202c1:	83 e0 07             	and    eax,0x7
c00202c4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00202c8:	99                   	cdq    
c00202c9:	f7 f9                	idiv   ecx
c00202cb:	89 34 d5 44 2b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd4bc],esi
c00202d2:	89 3c d5 48 2b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd4b8],edi
c00202d9:	58                   	pop    eax
c00202da:	5e                   	pop    esi
c00202db:	5f                   	pop    edi
c00202dc:	c3                   	ret    

c00202dd <Vm::fpuPush(unsigned long long)>:
c00202dd:	a0 41 2b 03 c0       	mov    al,ds:0xc0032b41
c00202e2:	c0 e8 03             	shr    al,0x3
c00202e5:	83 e0 07             	and    eax,0x7
c00202e8:	83 c0 07             	add    eax,0x7
c00202eb:	88 c2                	mov    dl,al
c00202ed:	83 e0 07             	and    eax,0x7
c00202f0:	83 e2 07             	and    edx,0x7
c00202f3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00202fa:	8a 15 41 2b 03 c0    	mov    dl,BYTE PTR ds:0xc0032b41
c0020300:	83 e2 c7             	and    edx,0xffffffc7
c0020303:	09 ca                	or     edx,ecx
c0020305:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020309:	88 15 41 2b 03 c0    	mov    BYTE PTR ds:0xc0032b41,dl
c002030f:	89 0c c5 48 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd4b8],ecx
c0020316:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002031a:	89 14 c5 44 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd4bc],edx
c0020321:	a1 84 2b 03 c0       	mov    eax,ds:0xc0032b84
c0020326:	83 f8 08             	cmp    eax,0x8
c0020329:	75 08                	jne    c0020333 <Vm::fpuPush(unsigned long long)+0x56>
c002032b:	80 0d 40 2b 03 c0 40 	or     BYTE PTR ds:0xc0032b40,0x40
c0020332:	c3                   	ret    
c0020333:	40                   	inc    eax
c0020334:	a3 84 2b 03 c0       	mov    ds:0xc0032b84,eax
c0020339:	c3                   	ret    

c002033a <Vm::fpuPop()>:
c002033a:	8a 0d 41 2b 03 c0    	mov    cl,BYTE PTR ds:0xc0032b41
c0020340:	53                   	push   ebx
c0020341:	c0 e9 03             	shr    cl,0x3
c0020344:	8a 1d 41 2b 03 c0    	mov    bl,BYTE PTR ds:0xc0032b41
c002034a:	83 e1 07             	and    ecx,0x7
c002034d:	83 e3 c7             	and    ebx,0xffffffc7
c0020350:	8b 04 cd 44 2b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd4bc]
c0020357:	8b 14 cd 48 2b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd4b8]
c002035e:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020365:	83 e1 38             	and    ecx,0x38
c0020368:	09 d9                	or     ecx,ebx
c002036a:	88 0d 41 2b 03 c0    	mov    BYTE PTR ds:0xc0032b41,cl
c0020370:	8b 0d 84 2b 03 c0    	mov    ecx,DWORD PTR ds:0xc0032b84
c0020376:	85 c9                	test   ecx,ecx
c0020378:	74 09                	je     c0020383 <Vm::fpuPop()+0x49>
c002037a:	49                   	dec    ecx
c002037b:	89 0d 84 2b 03 c0    	mov    DWORD PTR ds:0xc0032b84,ecx
c0020381:	eb 07                	jmp    c002038a <Vm::fpuPop()+0x50>
c0020383:	80 0d 40 2b 03 c0 40 	or     BYTE PTR ds:0xc0032b40,0x40
c002038a:	5b                   	pop    ebx
c002038b:	c3                   	ret    

c002038c <Vm::x87Handler(regs*)>:
c002038c:	55                   	push   ebp
c002038d:	57                   	push   edi
c002038e:	56                   	push   esi
c002038f:	53                   	push   ebx
c0020390:	83 ec 1c             	sub    esp,0x1c
c0020393:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020397:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c002039c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c002039f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00203a7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00203ab:	50                   	push   eax
c00203ac:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00203b0:	50                   	push   eax
c00203b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203b5:	50                   	push   eax
c00203b6:	53                   	push   ebx
c00203b7:	e8 aa 9c ff ff       	call   c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00203bc:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00203bf:	83 c4 10             	add    esp,0x10
c00203c2:	89 c6                	mov    esi,eax
c00203c4:	80 fa d9             	cmp    dl,0xd9
c00203c7:	0f 85 52 01 00 00    	jne    c002051f <Vm::x87Handler(regs*)+0x193>
c00203cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203d1:	8d 50 20             	lea    edx,[eax+0x20]
c00203d4:	80 fa 0e             	cmp    dl,0xe
c00203d7:	0f 87 86 00 00 00    	ja     c0020463 <Vm::x87Handler(regs*)+0xd7>
c00203dd:	0f b6 d2             	movzx  edx,dl
c00203e0:	ff 24 95 a8 d8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2758]
c00203e7:	e8 e7 fc ff ff       	call   c00200d3 <Vm::fpuGet0()>
c00203ec:	eb 05                	jmp    c00203f3 <Vm::x87Handler(regs*)+0x67>
c00203ee:	e8 e5 fc ff ff       	call   c00200d8 <Vm::fpuGet1()>
c00203f3:	57                   	push   edi
c00203f4:	57                   	push   edi
c00203f5:	52                   	push   edx
c00203f6:	50                   	push   eax
c00203f7:	e8 e1 fe ff ff       	call   c00202dd <Vm::fpuPush(unsigned long long)>
c00203fc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020400:	83 c4 10             	add    esp,0x10
c0020403:	b0 01                	mov    al,0x1
c0020405:	e9 e3 09 00 00       	jmp    c0020ded <Vm::x87Handler(regs*)+0xa61>
c002040a:	83 ec 0c             	sub    esp,0xc
c002040d:	6a 00                	push   0x0
c002040f:	e8 3b fe ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020414:	59                   	pop    ecx
c0020415:	5e                   	pop    esi
c0020416:	52                   	push   edx
c0020417:	50                   	push   eax
c0020418:	e8 c2 fd ff ff       	call   c00201df <Vm::fpuChs(unsigned long long)>
c002041d:	eb 13                	jmp    c0020432 <Vm::x87Handler(regs*)+0xa6>
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	6a 00                	push   0x0
c0020424:	e8 26 fe ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020429:	5f                   	pop    edi
c002042a:	5d                   	pop    ebp
c002042b:	52                   	push   edx
c002042c:	50                   	push   eax
c002042d:	e8 a4 fd ff ff       	call   c00201d6 <Vm::fpuAbs(unsigned long long)>
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	52                   	push   edx
c0020436:	50                   	push   eax
c0020437:	6a 00                	push   0x0
c0020439:	e8 54 fe ff ff       	call   c0020292 <Vm::fpuSetReg(int, unsigned long long)>
c002043e:	eb bc                	jmp    c00203fc <Vm::x87Handler(regs*)+0x70>
c0020440:	e8 d3 fc ff ff       	call   c0020118 <Vm::fpuGetLog210()>
c0020445:	eb ac                	jmp    c00203f3 <Vm::x87Handler(regs*)+0x67>
c0020447:	e8 9c fc ff ff       	call   c00200e8 <Vm::fpuGetLog2E()>
c002044c:	eb a5                	jmp    c00203f3 <Vm::x87Handler(regs*)+0x67>
c002044e:	e8 8d fc ff ff       	call   c00200e0 <Vm::fpuGetPi()>
c0020453:	eb 9e                	jmp    c00203f3 <Vm::x87Handler(regs*)+0x67>
c0020455:	e8 d6 fc ff ff       	call   c0020130 <Vm::fpuGetLog102()>
c002045a:	eb 97                	jmp    c00203f3 <Vm::x87Handler(regs*)+0x67>
c002045c:	e8 9f fc ff ff       	call   c0020100 <Vm::fpuGetLogE2()>
c0020461:	eb 90                	jmp    c00203f3 <Vm::x87Handler(regs*)+0x67>
c0020463:	8d 50 40             	lea    edx,[eax+0x40]
c0020466:	80 fa 07             	cmp    dl,0x7
c0020469:	77 15                	ja     c0020480 <Vm::x87Handler(regs*)+0xf4>
c002046b:	83 ec 0c             	sub    esp,0xc
c002046e:	2d c0 00 00 00       	sub    eax,0xc0
c0020473:	50                   	push   eax
c0020474:	e8 d6 fd ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020479:	59                   	pop    ecx
c002047a:	5e                   	pop    esi
c002047b:	e9 75 ff ff ff       	jmp    c00203f5 <Vm::x87Handler(regs*)+0x69>
c0020480:	8d 50 38             	lea    edx,[eax+0x38]
c0020483:	80 fa 07             	cmp    dl,0x7
c0020486:	77 3c                	ja     c00204c4 <Vm::x87Handler(regs*)+0x138>
c0020488:	83 ec 0c             	sub    esp,0xc
c002048b:	2d c8 00 00 00       	sub    eax,0xc8
c0020490:	50                   	push   eax
c0020491:	e8 b9 fd ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049d:	89 c6                	mov    esi,eax
c002049f:	89 d7                	mov    edi,edx
c00204a1:	e8 a9 fd ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00204a6:	83 c4 0c             	add    esp,0xc
c00204a9:	52                   	push   edx
c00204aa:	50                   	push   eax
c00204ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204af:	2d c8 00 00 00       	sub    eax,0xc8
c00204b4:	50                   	push   eax
c00204b5:	e8 d8 fd ff ff       	call   c0020292 <Vm::fpuSetReg(int, unsigned long long)>
c00204ba:	83 c4 0c             	add    esp,0xc
c00204bd:	57                   	push   edi
c00204be:	56                   	push   esi
c00204bf:	e9 73 ff ff ff       	jmp    c0020437 <Vm::x87Handler(regs*)+0xab>
c00204c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204c8:	84 d2                	test   dl,dl
c00204ca:	75 0f                	jne    c00204db <Vm::x87Handler(regs*)+0x14f>
c00204cc:	83 ec 0c             	sub    esp,0xc
c00204cf:	ff 36                	push   DWORD PTR [esi]
c00204d1:	e8 c8 fa ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c00204d6:	e9 bf 00 00 00       	jmp    c002059a <Vm::x87Handler(regs*)+0x20e>
c00204db:	80 fa 03             	cmp    dl,0x3
c00204de:	75 13                	jne    c00204f3 <Vm::x87Handler(regs*)+0x167>
c00204e0:	e8 55 fe ff ff       	call   c002033a <Vm::fpuPop()>
c00204e5:	55                   	push   ebp
c00204e6:	55                   	push   ebp
c00204e7:	52                   	push   edx
c00204e8:	50                   	push   eax
c00204e9:	e8 4c fa ff ff       	call   c001ff3a <Vm::fpuInternalTo32(unsigned long long)>
c00204ee:	e9 88 00 00 00       	jmp    c002057b <Vm::x87Handler(regs*)+0x1ef>
c00204f3:	80 fa 05             	cmp    dl,0x5
c00204f6:	75 0e                	jne    c0020506 <Vm::x87Handler(regs*)+0x17a>
c00204f8:	66 8b 06             	mov    ax,WORD PTR [esi]
c00204fb:	66 a3 42 2b 03 c0    	mov    ds:0xc0032b42,ax
c0020501:	e9 df 00 00 00       	jmp    c00205e5 <Vm::x87Handler(regs*)+0x259>
c0020506:	31 c0                	xor    eax,eax
c0020508:	80 fa 07             	cmp    dl,0x7
c002050b:	0f 85 dc 08 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020511:	66 a1 42 2b 03 c0    	mov    ax,ds:0xc0032b42
c0020517:	66 89 06             	mov    WORD PTR [esi],ax
c002051a:	e9 c6 00 00 00       	jmp    c00205e5 <Vm::x87Handler(regs*)+0x259>
c002051f:	80 fa d8             	cmp    dl,0xd8
c0020522:	0f 84 c9 00 00 00    	je     c00205f1 <Vm::x87Handler(regs*)+0x265>
c0020528:	80 fa dc             	cmp    dl,0xdc
c002052b:	0f 84 0d 02 00 00    	je     c002073e <Vm::x87Handler(regs*)+0x3b2>
c0020531:	80 fa de             	cmp    dl,0xde
c0020534:	0f 84 cd 02 00 00    	je     c0020807 <Vm::x87Handler(regs*)+0x47b>
c002053a:	80 fa dd             	cmp    dl,0xdd
c002053d:	0f 84 5f 04 00 00    	je     c00209a2 <Vm::x87Handler(regs*)+0x616>
c0020543:	80 fa da             	cmp    dl,0xda
c0020546:	0f 84 24 05 00 00    	je     c0020a70 <Vm::x87Handler(regs*)+0x6e4>
c002054c:	80 fa df             	cmp    dl,0xdf
c002054f:	0f 84 68 05 00 00    	je     c0020abd <Vm::x87Handler(regs*)+0x731>
c0020555:	31 c0                	xor    eax,eax
c0020557:	80 fa db             	cmp    dl,0xdb
c002055a:	0f 85 8d 08 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020560:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020564:	80 fa 03             	cmp    dl,0x3
c0020567:	0f 85 70 06 00 00    	jne    c0020bdd <Vm::x87Handler(regs*)+0x851>
c002056d:	e8 c8 fd ff ff       	call   c002033a <Vm::fpuPop()>
c0020572:	55                   	push   ebp
c0020573:	55                   	push   ebp
c0020574:	52                   	push   edx
c0020575:	50                   	push   eax
c0020576:	e8 71 fa ff ff       	call   c001ffec <Vm::fpuFloatToLong(unsigned long long)>
c002057b:	83 c4 10             	add    esp,0x10
c002057e:	89 06                	mov    DWORD PTR [esi],eax
c0020580:	eb 63                	jmp    c00205e5 <Vm::x87Handler(regs*)+0x259>
c0020582:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020586:	84 d2                	test   dl,dl
c0020588:	0f 85 e6 05 00 00    	jne    c0020b74 <Vm::x87Handler(regs*)+0x7e8>
c002058e:	57                   	push   edi
c002058f:	57                   	push   edi
c0020590:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020593:	ff 36                	push   DWORD PTR [esi]
c0020595:	e8 49 fa ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c002059a:	5e                   	pop    esi
c002059b:	5f                   	pop    edi
c002059c:	52                   	push   edx
c002059d:	50                   	push   eax
c002059e:	e8 3a fd ff ff       	call   c00202dd <Vm::fpuPush(unsigned long long)>
c00205a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205a7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00205aa:	e9 51 fe ff ff       	jmp    c0020400 <Vm::x87Handler(regs*)+0x74>
c00205af:	80 fa 03             	cmp    dl,0x3
c00205b2:	0f 85 d7 06 00 00    	jne    c0020c8f <Vm::x87Handler(regs*)+0x903>
c00205b8:	57                   	push   edi
c00205b9:	57                   	push   edi
c00205ba:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205bd:	ff 36                	push   DWORD PTR [esi]
c00205bf:	e8 1f fa ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c00205c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205cb:	89 c6                	mov    esi,eax
c00205cd:	89 d7                	mov    edi,edx
c00205cf:	e8 7b fc ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00205d4:	57                   	push   edi
c00205d5:	56                   	push   esi
c00205d6:	52                   	push   edx
c00205d7:	50                   	push   eax
c00205d8:	e8 95 fb ff ff       	call   c0020172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00205dd:	83 c4 20             	add    esp,0x20
c00205e0:	e8 55 fd ff ff       	call   c002033a <Vm::fpuPop()>
c00205e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205e9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00205ec:	e9 12 fe ff ff       	jmp    c0020403 <Vm::x87Handler(regs*)+0x77>
c00205f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205f5:	8d 50 40             	lea    edx,[eax+0x40]
c00205f8:	80 fa 07             	cmp    dl,0x7
c00205fb:	77 29                	ja     c0020626 <Vm::x87Handler(regs*)+0x29a>
c00205fd:	83 ec 0c             	sub    esp,0xc
c0020600:	2d c0 00 00 00       	sub    eax,0xc0
c0020605:	50                   	push   eax
c0020606:	e8 44 fc ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c002060b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020612:	89 c6                	mov    esi,eax
c0020614:	89 d7                	mov    edi,edx
c0020616:	e8 34 fc ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c002061b:	57                   	push   edi
c002061c:	56                   	push   esi
c002061d:	52                   	push   edx
c002061e:	50                   	push   eax
c002061f:	e8 a1 fb ff ff       	call   c00201c5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020624:	eb 2f                	jmp    c0020655 <Vm::x87Handler(regs*)+0x2c9>
c0020626:	8d 50 38             	lea    edx,[eax+0x38]
c0020629:	80 fa 07             	cmp    dl,0x7
c002062c:	77 2f                	ja     c002065d <Vm::x87Handler(regs*)+0x2d1>
c002062e:	83 ec 0c             	sub    esp,0xc
c0020631:	2d c8 00 00 00       	sub    eax,0xc8
c0020636:	50                   	push   eax
c0020637:	e8 13 fc ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c002063c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020643:	89 c6                	mov    esi,eax
c0020645:	89 d7                	mov    edi,edx
c0020647:	e8 03 fc ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c002064c:	57                   	push   edi
c002064d:	56                   	push   esi
c002064e:	52                   	push   edx
c002064f:	50                   	push   eax
c0020650:	e8 a9 fb ff ff       	call   c00201fe <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020655:	83 c4 1c             	add    esp,0x1c
c0020658:	e9 d8 fd ff ff       	jmp    c0020435 <Vm::x87Handler(regs*)+0xa9>
c002065d:	8d 50 30             	lea    edx,[eax+0x30]
c0020660:	80 fa 07             	cmp    dl,0x7
c0020663:	77 0d                	ja     c0020672 <Vm::x87Handler(regs*)+0x2e6>
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	2d d0 00 00 00       	sub    eax,0xd0
c002066d:	e9 99 03 00 00       	jmp    c0020a0b <Vm::x87Handler(regs*)+0x67f>
c0020672:	8d 50 28             	lea    edx,[eax+0x28]
c0020675:	80 fa 07             	cmp    dl,0x7
c0020678:	77 0d                	ja     c0020687 <Vm::x87Handler(regs*)+0x2fb>
c002067a:	83 ec 0c             	sub    esp,0xc
c002067d:	2d d8 00 00 00       	sub    eax,0xd8
c0020682:	e9 c0 03 00 00       	jmp    c0020a47 <Vm::x87Handler(regs*)+0x6bb>
c0020687:	8d 50 20             	lea    edx,[eax+0x20]
c002068a:	80 fa 07             	cmp    dl,0x7
c002068d:	77 1b                	ja     c00206aa <Vm::x87Handler(regs*)+0x31e>
c002068f:	83 ec 0c             	sub    esp,0xc
c0020692:	2d e0 00 00 00       	sub    eax,0xe0
c0020697:	50                   	push   eax
c0020698:	e8 b2 fb ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c002069d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206a4:	89 c6                	mov    esi,eax
c00206a6:	89 d7                	mov    edi,edx
c00206a8:	eb 22                	jmp    c00206cc <Vm::x87Handler(regs*)+0x340>
c00206aa:	8d 50 18             	lea    edx,[eax+0x18]
c00206ad:	80 fa 07             	cmp    dl,0x7
c00206b0:	77 2d                	ja     c00206df <Vm::x87Handler(regs*)+0x353>
c00206b2:	83 ec 0c             	sub    esp,0xc
c00206b5:	6a 00                	push   0x0
c00206b7:	e8 93 fb ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00206bc:	89 c6                	mov    esi,eax
c00206be:	89 d7                	mov    edi,edx
c00206c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206c4:	2d e8 00 00 00       	sub    eax,0xe8
c00206c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00206cc:	e8 7e fb ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00206d1:	57                   	push   edi
c00206d2:	56                   	push   esi
c00206d3:	52                   	push   edx
c00206d4:	50                   	push   eax
c00206d5:	e8 15 fb ff ff       	call   c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206da:	e9 76 ff ff ff       	jmp    c0020655 <Vm::x87Handler(regs*)+0x2c9>
c00206df:	8d 50 10             	lea    edx,[eax+0x10]
c00206e2:	80 fa 07             	cmp    dl,0x7
c00206e5:	77 1b                	ja     c0020702 <Vm::x87Handler(regs*)+0x376>
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	2d f0 00 00 00       	sub    eax,0xf0
c00206ef:	50                   	push   eax
c00206f0:	e8 5a fb ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00206f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206fc:	89 c6                	mov    esi,eax
c00206fe:	89 d7                	mov    edi,edx
c0020700:	eb 22                	jmp    c0020724 <Vm::x87Handler(regs*)+0x398>
c0020702:	3c f7                	cmp    al,0xf7
c0020704:	0f 86 d1 03 00 00    	jbe    c0020adb <Vm::x87Handler(regs*)+0x74f>
c002070a:	83 ec 0c             	sub    esp,0xc
c002070d:	6a 00                	push   0x0
c002070f:	e8 3b fb ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020714:	89 c6                	mov    esi,eax
c0020716:	89 d7                	mov    edi,edx
c0020718:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002071c:	2d f8 00 00 00       	sub    eax,0xf8
c0020721:	89 04 24             	mov    DWORD PTR [esp],eax
c0020724:	e8 26 fb ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020729:	57                   	push   edi
c002072a:	56                   	push   esi
c002072b:	52                   	push   edx
c002072c:	50                   	push   eax
c002072d:	e8 eb fa ff ff       	call   c002021d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020732:	83 c4 1c             	add    esp,0x1c
c0020735:	52                   	push   edx
c0020736:	50                   	push   eax
c0020737:	6a 00                	push   0x0
c0020739:	e9 51 02 00 00       	jmp    c002098f <Vm::x87Handler(regs*)+0x603>
c002073e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020742:	8d 50 40             	lea    edx,[eax+0x40]
c0020745:	80 fa 07             	cmp    dl,0x7
c0020748:	77 37                	ja     c0020781 <Vm::x87Handler(regs*)+0x3f5>
c002074a:	83 ec 0c             	sub    esp,0xc
c002074d:	2d c0 00 00 00       	sub    eax,0xc0
c0020752:	50                   	push   eax
c0020753:	e8 f7 fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002075f:	89 c6                	mov    esi,eax
c0020761:	89 d7                	mov    edi,edx
c0020763:	e8 e7 fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020768:	57                   	push   edi
c0020769:	56                   	push   esi
c002076a:	52                   	push   edx
c002076b:	50                   	push   eax
c002076c:	e8 54 fa ff ff       	call   c00201c5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020771:	83 c4 1c             	add    esp,0x1c
c0020774:	52                   	push   edx
c0020775:	50                   	push   eax
c0020776:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002077a:	2d c0 00 00 00       	sub    eax,0xc0
c002077f:	eb 3d                	jmp    c00207be <Vm::x87Handler(regs*)+0x432>
c0020781:	8d 50 38             	lea    edx,[eax+0x38]
c0020784:	80 fa 07             	cmp    dl,0x7
c0020787:	77 3b                	ja     c00207c4 <Vm::x87Handler(regs*)+0x438>
c0020789:	83 ec 0c             	sub    esp,0xc
c002078c:	2d c8 00 00 00       	sub    eax,0xc8
c0020791:	50                   	push   eax
c0020792:	e8 b8 fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020797:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002079e:	89 c6                	mov    esi,eax
c00207a0:	89 d7                	mov    edi,edx
c00207a2:	e8 a8 fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00207a7:	57                   	push   edi
c00207a8:	56                   	push   esi
c00207a9:	52                   	push   edx
c00207aa:	50                   	push   eax
c00207ab:	e8 4e fa ff ff       	call   c00201fe <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00207b0:	83 c4 1c             	add    esp,0x1c
c00207b3:	52                   	push   edx
c00207b4:	50                   	push   eax
c00207b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207b9:	2d c8 00 00 00       	sub    eax,0xc8
c00207be:	50                   	push   eax
c00207bf:	e9 75 fc ff ff       	jmp    c0020439 <Vm::x87Handler(regs*)+0xad>
c00207c4:	83 c0 18             	add    eax,0x18
c00207c7:	3c 07                	cmp    al,0x7
c00207c9:	0f 87 3b 04 00 00    	ja     c0020c0a <Vm::x87Handler(regs*)+0x87e>
c00207cf:	83 ec 0c             	sub    esp,0xc
c00207d2:	6a 00                	push   0x0
c00207d4:	e8 76 fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00207d9:	89 c6                	mov    esi,eax
c00207db:	89 d7                	mov    edi,edx
c00207dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207e1:	2d e8 00 00 00       	sub    eax,0xe8
c00207e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00207e9:	e8 61 fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00207ee:	57                   	push   edi
c00207ef:	56                   	push   esi
c00207f0:	52                   	push   edx
c00207f1:	50                   	push   eax
c00207f2:	e8 f8 f9 ff ff       	call   c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>
c00207f7:	83 c4 1c             	add    esp,0x1c
c00207fa:	52                   	push   edx
c00207fb:	50                   	push   eax
c00207fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020800:	2d e8 00 00 00       	sub    eax,0xe8
c0020805:	eb b7                	jmp    c00207be <Vm::x87Handler(regs*)+0x432>
c0020807:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002080b:	8d 50 40             	lea    edx,[eax+0x40]
c002080e:	80 fa 07             	cmp    dl,0x7
c0020811:	77 3a                	ja     c002084d <Vm::x87Handler(regs*)+0x4c1>
c0020813:	83 ec 0c             	sub    esp,0xc
c0020816:	2d c0 00 00 00       	sub    eax,0xc0
c002081b:	50                   	push   eax
c002081c:	e8 2e fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020821:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020828:	89 c6                	mov    esi,eax
c002082a:	89 d7                	mov    edi,edx
c002082c:	e8 1e fa ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020831:	57                   	push   edi
c0020832:	56                   	push   esi
c0020833:	52                   	push   edx
c0020834:	50                   	push   eax
c0020835:	e8 8b f9 ff ff       	call   c00201c5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002083a:	83 c4 1c             	add    esp,0x1c
c002083d:	52                   	push   edx
c002083e:	50                   	push   eax
c002083f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020843:	2d c0 00 00 00       	sub    eax,0xc0
c0020848:	e9 9e 01 00 00       	jmp    c00209eb <Vm::x87Handler(regs*)+0x65f>
c002084d:	8d 50 20             	lea    edx,[eax+0x20]
c0020850:	80 fa 07             	cmp    dl,0x7
c0020853:	77 3a                	ja     c002088f <Vm::x87Handler(regs*)+0x503>
c0020855:	83 ec 0c             	sub    esp,0xc
c0020858:	2d e0 00 00 00       	sub    eax,0xe0
c002085d:	50                   	push   eax
c002085e:	e8 ec f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020863:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002086a:	89 c6                	mov    esi,eax
c002086c:	89 d7                	mov    edi,edx
c002086e:	e8 dc f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020873:	57                   	push   edi
c0020874:	56                   	push   esi
c0020875:	52                   	push   edx
c0020876:	50                   	push   eax
c0020877:	e8 73 f9 ff ff       	call   c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>
c002087c:	83 c4 1c             	add    esp,0x1c
c002087f:	52                   	push   edx
c0020880:	50                   	push   eax
c0020881:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020885:	2d e0 00 00 00       	sub    eax,0xe0
c002088a:	e9 5c 01 00 00       	jmp    c00209eb <Vm::x87Handler(regs*)+0x65f>
c002088f:	8d 50 18             	lea    edx,[eax+0x18]
c0020892:	80 fa 07             	cmp    dl,0x7
c0020895:	77 3b                	ja     c00208d2 <Vm::x87Handler(regs*)+0x546>
c0020897:	83 ec 0c             	sub    esp,0xc
c002089a:	6a 00                	push   0x0
c002089c:	e8 ae f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00208a1:	89 c6                	mov    esi,eax
c00208a3:	89 d7                	mov    edi,edx
c00208a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208a9:	2d e8 00 00 00       	sub    eax,0xe8
c00208ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00208b1:	e8 99 f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00208b6:	57                   	push   edi
c00208b7:	56                   	push   esi
c00208b8:	52                   	push   edx
c00208b9:	50                   	push   eax
c00208ba:	e8 30 f9 ff ff       	call   c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>
c00208bf:	83 c4 1c             	add    esp,0x1c
c00208c2:	52                   	push   edx
c00208c3:	50                   	push   eax
c00208c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208c8:	2d e8 00 00 00       	sub    eax,0xe8
c00208cd:	e9 19 01 00 00       	jmp    c00209eb <Vm::x87Handler(regs*)+0x65f>
c00208d2:	8d 50 38             	lea    edx,[eax+0x38]
c00208d5:	80 fa 07             	cmp    dl,0x7
c00208d8:	77 37                	ja     c0020911 <Vm::x87Handler(regs*)+0x585>
c00208da:	83 ec 0c             	sub    esp,0xc
c00208dd:	2d c8 00 00 00       	sub    eax,0xc8
c00208e2:	50                   	push   eax
c00208e3:	e8 67 f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00208e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208ef:	89 c6                	mov    esi,eax
c00208f1:	89 d7                	mov    edi,edx
c00208f3:	e8 57 f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00208f8:	57                   	push   edi
c00208f9:	56                   	push   esi
c00208fa:	52                   	push   edx
c00208fb:	50                   	push   eax
c00208fc:	e8 fd f8 ff ff       	call   c00201fe <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020901:	83 c4 1c             	add    esp,0x1c
c0020904:	52                   	push   edx
c0020905:	50                   	push   eax
c0020906:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002090a:	2d c8 00 00 00       	sub    eax,0xc8
c002090f:	eb 7d                	jmp    c002098e <Vm::x87Handler(regs*)+0x602>
c0020911:	3c f7                	cmp    al,0xf7
c0020913:	76 38                	jbe    c002094d <Vm::x87Handler(regs*)+0x5c1>
c0020915:	83 ec 0c             	sub    esp,0xc
c0020918:	6a 00                	push   0x0
c002091a:	e8 30 f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c002091f:	89 c6                	mov    esi,eax
c0020921:	89 d7                	mov    edi,edx
c0020923:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020927:	2d f8 00 00 00       	sub    eax,0xf8
c002092c:	89 04 24             	mov    DWORD PTR [esp],eax
c002092f:	e8 1b f9 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020934:	57                   	push   edi
c0020935:	56                   	push   esi
c0020936:	52                   	push   edx
c0020937:	50                   	push   eax
c0020938:	e8 e0 f8 ff ff       	call   c002021d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002093d:	83 c4 1c             	add    esp,0x1c
c0020940:	52                   	push   edx
c0020941:	50                   	push   eax
c0020942:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020946:	2d f8 00 00 00       	sub    eax,0xf8
c002094b:	eb 41                	jmp    c002098e <Vm::x87Handler(regs*)+0x602>
c002094d:	8d 50 10             	lea    edx,[eax+0x10]
c0020950:	80 fa 07             	cmp    dl,0x7
c0020953:	0f 87 5a 01 00 00    	ja     c0020ab3 <Vm::x87Handler(regs*)+0x727>
c0020959:	83 ec 0c             	sub    esp,0xc
c002095c:	2d f0 00 00 00       	sub    eax,0xf0
c0020961:	50                   	push   eax
c0020962:	e8 e8 f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020967:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002096e:	89 c6                	mov    esi,eax
c0020970:	89 d7                	mov    edi,edx
c0020972:	e8 d8 f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020977:	57                   	push   edi
c0020978:	56                   	push   esi
c0020979:	52                   	push   edx
c002097a:	50                   	push   eax
c002097b:	e8 9d f8 ff ff       	call   c002021d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020980:	83 c4 1c             	add    esp,0x1c
c0020983:	52                   	push   edx
c0020984:	50                   	push   eax
c0020985:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020989:	2d f0 00 00 00       	sub    eax,0xf0
c002098e:	50                   	push   eax
c002098f:	e8 fe f8 ff ff       	call   c0020292 <Vm::fpuSetReg(int, unsigned long long)>
c0020994:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020998:	e8 9d f9 ff ff       	call   c002033a <Vm::fpuPop()>
c002099d:	e9 5e fa ff ff       	jmp    c0020400 <Vm::x87Handler(regs*)+0x74>
c00209a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00209a6:	8d 50 30             	lea    edx,[eax+0x30]
c00209a9:	80 fa 07             	cmp    dl,0x7
c00209ac:	77 1d                	ja     c00209cb <Vm::x87Handler(regs*)+0x63f>
c00209ae:	83 ec 0c             	sub    esp,0xc
c00209b1:	6a 00                	push   0x0
c00209b3:	e8 97 f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00209b8:	83 c4 0c             	add    esp,0xc
c00209bb:	52                   	push   edx
c00209bc:	50                   	push   eax
c00209bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00209c1:	2d d0 00 00 00       	sub    eax,0xd0
c00209c6:	e9 f3 fd ff ff       	jmp    c00207be <Vm::x87Handler(regs*)+0x432>
c00209cb:	8d 50 28             	lea    edx,[eax+0x28]
c00209ce:	80 fa 07             	cmp    dl,0x7
c00209d1:	77 28                	ja     c00209fb <Vm::x87Handler(regs*)+0x66f>
c00209d3:	83 ec 0c             	sub    esp,0xc
c00209d6:	6a 00                	push   0x0
c00209d8:	e8 72 f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c00209dd:	83 c4 0c             	add    esp,0xc
c00209e0:	52                   	push   edx
c00209e1:	50                   	push   eax
c00209e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00209e6:	2d d8 00 00 00       	sub    eax,0xd8
c00209eb:	50                   	push   eax
c00209ec:	e8 a1 f8 ff ff       	call   c0020292 <Vm::fpuSetReg(int, unsigned long long)>
c00209f1:	e8 44 f9 ff ff       	call   c002033a <Vm::fpuPop()>
c00209f6:	e9 01 fa ff ff       	jmp    c00203fc <Vm::x87Handler(regs*)+0x70>
c00209fb:	8d 50 20             	lea    edx,[eax+0x20]
c00209fe:	80 fa 07             	cmp    dl,0x7
c0020a01:	77 30                	ja     c0020a33 <Vm::x87Handler(regs*)+0x6a7>
c0020a03:	83 ec 0c             	sub    esp,0xc
c0020a06:	2d e0 00 00 00       	sub    eax,0xe0
c0020a0b:	50                   	push   eax
c0020a0c:	e8 3e f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020a11:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a18:	89 c6                	mov    esi,eax
c0020a1a:	89 d7                	mov    edi,edx
c0020a1c:	e8 2e f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020a21:	57                   	push   edi
c0020a22:	56                   	push   esi
c0020a23:	52                   	push   edx
c0020a24:	50                   	push   eax
c0020a25:	e8 48 f7 ff ff       	call   c0020172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a2a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a2e:	e9 54 02 00 00       	jmp    c0020c87 <Vm::x87Handler(regs*)+0x8fb>
c0020a33:	8d 50 18             	lea    edx,[eax+0x18]
c0020a36:	80 fa 07             	cmp    dl,0x7
c0020a39:	0f 87 43 fb ff ff    	ja     c0020582 <Vm::x87Handler(regs*)+0x1f6>
c0020a3f:	83 ec 0c             	sub    esp,0xc
c0020a42:	2d e8 00 00 00       	sub    eax,0xe8
c0020a47:	50                   	push   eax
c0020a48:	e8 02 f8 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020a4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a54:	89 c6                	mov    esi,eax
c0020a56:	89 d7                	mov    edi,edx
c0020a58:	e8 f2 f7 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020a5d:	57                   	push   edi
c0020a5e:	56                   	push   esi
c0020a5f:	52                   	push   edx
c0020a60:	50                   	push   eax
c0020a61:	e8 0c f7 ff ff       	call   c0020172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a66:	83 c4 20             	add    esp,0x20
c0020a69:	e8 cc f8 ff ff       	call   c002033a <Vm::fpuPop()>
c0020a6e:	eb 62                	jmp    c0020ad2 <Vm::x87Handler(regs*)+0x746>
c0020a70:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020a74:	0f 85 0f 01 00 00    	jne    c0020b89 <Vm::x87Handler(regs*)+0x7fd>
c0020a7a:	83 ec 0c             	sub    esp,0xc
c0020a7d:	6a 01                	push   0x1
c0020a7f:	e8 cb f7 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020a84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a8b:	89 c6                	mov    esi,eax
c0020a8d:	89 d7                	mov    edi,edx
c0020a8f:	e8 bb f7 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020a94:	57                   	push   edi
c0020a95:	56                   	push   esi
c0020a96:	52                   	push   edx
c0020a97:	50                   	push   eax
c0020a98:	e8 d5 f6 ff ff       	call   c0020172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a9d:	83 c4 20             	add    esp,0x20
c0020aa0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020aa4:	e8 91 f8 ff ff       	call   c002033a <Vm::fpuPop()>
c0020aa9:	e8 8c f8 ff ff       	call   c002033a <Vm::fpuPop()>
c0020aae:	e9 50 f9 ff ff       	jmp    c0020403 <Vm::x87Handler(regs*)+0x77>
c0020ab3:	3c d9                	cmp    al,0xd9
c0020ab5:	0f 85 b5 02 00 00    	jne    c0020d70 <Vm::x87Handler(regs*)+0x9e4>
c0020abb:	eb bd                	jmp    c0020a7a <Vm::x87Handler(regs*)+0x6ee>
c0020abd:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020ac1:	0f 85 ea 02 00 00    	jne    c0020db1 <Vm::x87Handler(regs*)+0xa25>
c0020ac7:	0f b7 05 40 2b 03 c0 	movzx  eax,WORD PTR ds:0xc0032b40
c0020ace:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020ad2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020ad6:	e9 28 f9 ff ff       	jmp    c0020403 <Vm::x87Handler(regs*)+0x77>
c0020adb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020adf:	84 d2                	test   dl,dl
c0020ae1:	75 0f                	jne    c0020af2 <Vm::x87Handler(regs*)+0x766>
c0020ae3:	83 ec 0c             	sub    esp,0xc
c0020ae6:	ff 36                	push   DWORD PTR [esi]
c0020ae8:	e8 b1 f4 ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c0020aed:	e9 2c 01 00 00       	jmp    c0020c1e <Vm::x87Handler(regs*)+0x892>
c0020af2:	80 fa 01             	cmp    dl,0x1
c0020af5:	75 0f                	jne    c0020b06 <Vm::x87Handler(regs*)+0x77a>
c0020af7:	83 ec 0c             	sub    esp,0xc
c0020afa:	ff 36                	push   DWORD PTR [esi]
c0020afc:	e8 9d f4 ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c0020b01:	e9 81 02 00 00       	jmp    c0020d87 <Vm::x87Handler(regs*)+0x9fb>
c0020b06:	80 fa 04             	cmp    dl,0x4
c0020b09:	75 0f                	jne    c0020b1a <Vm::x87Handler(regs*)+0x78e>
c0020b0b:	83 ec 0c             	sub    esp,0xc
c0020b0e:	ff 36                	push   DWORD PTR [esi]
c0020b10:	e8 89 f4 ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c0020b15:	e9 86 01 00 00       	jmp    c0020ca0 <Vm::x87Handler(regs*)+0x914>
c0020b1a:	80 fa 05             	cmp    dl,0x5
c0020b1d:	75 1b                	jne    c0020b3a <Vm::x87Handler(regs*)+0x7ae>
c0020b1f:	83 ec 0c             	sub    esp,0xc
c0020b22:	6a 00                	push   0x0
c0020b24:	e8 26 f7 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020b29:	89 c7                	mov    edi,eax
c0020b2b:	89 d5                	mov    ebp,edx
c0020b2d:	58                   	pop    eax
c0020b2e:	ff 36                	push   DWORD PTR [esi]
c0020b30:	e8 69 f4 ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c0020b35:	e9 a3 01 00 00       	jmp    c0020cdd <Vm::x87Handler(regs*)+0x951>
c0020b3a:	80 fa 06             	cmp    dl,0x6
c0020b3d:	75 0f                	jne    c0020b4e <Vm::x87Handler(regs*)+0x7c2>
c0020b3f:	83 ec 0c             	sub    esp,0xc
c0020b42:	ff 36                	push   DWORD PTR [esi]
c0020b44:	e8 55 f4 ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c0020b49:	e9 ae 01 00 00       	jmp    c0020cfc <Vm::x87Handler(regs*)+0x970>
c0020b4e:	31 c0                	xor    eax,eax
c0020b50:	80 fa 07             	cmp    dl,0x7
c0020b53:	0f 85 94 02 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020b59:	83 ec 0c             	sub    esp,0xc
c0020b5c:	6a 00                	push   0x0
c0020b5e:	e8 ec f6 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020b63:	89 c7                	mov    edi,eax
c0020b65:	89 d5                	mov    ebp,edx
c0020b67:	58                   	pop    eax
c0020b68:	ff 36                	push   DWORD PTR [esi]
c0020b6a:	e8 2f f4 ff ff       	call   c001ff9e <Vm::fpu32ToInternal(unsigned int)>
c0020b6f:	e9 cb 01 00 00       	jmp    c0020d3f <Vm::x87Handler(regs*)+0x9b3>
c0020b74:	80 fa 03             	cmp    dl,0x3
c0020b77:	0f 85 d3 01 00 00    	jne    c0020d50 <Vm::x87Handler(regs*)+0x9c4>
c0020b7d:	e8 b8 f7 ff ff       	call   c002033a <Vm::fpuPop()>
c0020b82:	51                   	push   ecx
c0020b83:	51                   	push   ecx
c0020b84:	e9 de 01 00 00       	jmp    c0020d67 <Vm::x87Handler(regs*)+0x9db>
c0020b89:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b8d:	80 fa 01             	cmp    dl,0x1
c0020b90:	75 09                	jne    c0020b9b <Vm::x87Handler(regs*)+0x80f>
c0020b92:	57                   	push   edi
c0020b93:	57                   	push   edi
c0020b94:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b96:	e9 e3 01 00 00       	jmp    c0020d7e <Vm::x87Handler(regs*)+0x9f2>
c0020b9b:	80 fa 04             	cmp    dl,0x4
c0020b9e:	75 12                	jne    c0020bb2 <Vm::x87Handler(regs*)+0x826>
c0020ba0:	31 d2                	xor    edx,edx
c0020ba2:	51                   	push   ecx
c0020ba3:	51                   	push   ecx
c0020ba4:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ba6:	52                   	push   edx
c0020ba7:	50                   	push   eax
c0020ba8:	e8 d0 f4 ff ff       	call   c002007d <Vm::fpuLongToFloat(long long)>
c0020bad:	e9 ee 00 00 00       	jmp    c0020ca0 <Vm::x87Handler(regs*)+0x914>
c0020bb2:	31 c0                	xor    eax,eax
c0020bb4:	80 fa 07             	cmp    dl,0x7
c0020bb7:	0f 85 30 02 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020bbd:	83 ec 0c             	sub    esp,0xc
c0020bc0:	6a 00                	push   0x0
c0020bc2:	e8 88 f6 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020bc7:	89 c7                	mov    edi,eax
c0020bc9:	89 d5                	mov    ebp,edx
c0020bcb:	58                   	pop    eax
c0020bcc:	8b 06                	mov    eax,DWORD PTR [esi]
c0020bce:	5a                   	pop    edx
c0020bcf:	31 d2                	xor    edx,edx
c0020bd1:	52                   	push   edx
c0020bd2:	50                   	push   eax
c0020bd3:	e8 a5 f4 ff ff       	call   c002007d <Vm::fpuLongToFloat(long long)>
c0020bd8:	e9 62 01 00 00       	jmp    c0020d3f <Vm::x87Handler(regs*)+0x9b3>
c0020bdd:	84 d2                	test   dl,dl
c0020bdf:	75 0d                	jne    c0020bee <Vm::x87Handler(regs*)+0x862>
c0020be1:	31 d2                	xor    edx,edx
c0020be3:	55                   	push   ebp
c0020be4:	55                   	push   ebp
c0020be5:	8b 06                	mov    eax,DWORD PTR [esi]
c0020be7:	52                   	push   edx
c0020be8:	50                   	push   eax
c0020be9:	e9 d3 01 00 00       	jmp    c0020dc1 <Vm::x87Handler(regs*)+0xa35>
c0020bee:	31 c0                	xor    eax,eax
c0020bf0:	80 fa 02             	cmp    dl,0x2
c0020bf3:	0f 85 f4 01 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020bf9:	83 ec 0c             	sub    esp,0xc
c0020bfc:	6a 00                	push   0x0
c0020bfe:	e8 4c f6 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020c03:	59                   	pop    ecx
c0020c04:	5f                   	pop    edi
c0020c05:	e9 6a f9 ff ff       	jmp    c0020574 <Vm::x87Handler(regs*)+0x1e8>
c0020c0a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020c0e:	84 d2                	test   dl,dl
c0020c10:	75 2a                	jne    c0020c3c <Vm::x87Handler(regs*)+0x8b0>
c0020c12:	50                   	push   eax
c0020c13:	50                   	push   eax
c0020c14:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c17:	ff 36                	push   DWORD PTR [esi]
c0020c19:	e8 c5 f3 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020c1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c25:	89 c6                	mov    esi,eax
c0020c27:	89 d7                	mov    edi,edx
c0020c29:	e8 21 f6 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020c2e:	57                   	push   edi
c0020c2f:	56                   	push   esi
c0020c30:	52                   	push   edx
c0020c31:	50                   	push   eax
c0020c32:	e8 8e f5 ff ff       	call   c00201c5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020c37:	e9 64 01 00 00       	jmp    c0020da0 <Vm::x87Handler(regs*)+0xa14>
c0020c3c:	80 fa 01             	cmp    dl,0x1
c0020c3f:	75 11                	jne    c0020c52 <Vm::x87Handler(regs*)+0x8c6>
c0020c41:	50                   	push   eax
c0020c42:	50                   	push   eax
c0020c43:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c46:	ff 36                	push   DWORD PTR [esi]
c0020c48:	e8 96 f3 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020c4d:	e9 35 01 00 00       	jmp    c0020d87 <Vm::x87Handler(regs*)+0x9fb>
c0020c52:	80 fa 02             	cmp    dl,0x2
c0020c55:	0f 85 54 f9 ff ff    	jne    c00205af <Vm::x87Handler(regs*)+0x223>
c0020c5b:	55                   	push   ebp
c0020c5c:	55                   	push   ebp
c0020c5d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c60:	ff 36                	push   DWORD PTR [esi]
c0020c62:	e8 7c f3 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020c67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c6e:	89 c6                	mov    esi,eax
c0020c70:	89 d7                	mov    edi,edx
c0020c72:	e8 d8 f5 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020c77:	57                   	push   edi
c0020c78:	56                   	push   esi
c0020c79:	52                   	push   edx
c0020c7a:	50                   	push   eax
c0020c7b:	e8 f2 f4 ff ff       	call   c0020172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020c80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c84:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020c87:	83 c4 20             	add    esp,0x20
c0020c8a:	e9 74 f7 ff ff       	jmp    c0020403 <Vm::x87Handler(regs*)+0x77>
c0020c8f:	80 fa 04             	cmp    dl,0x4
c0020c92:	75 2a                	jne    c0020cbe <Vm::x87Handler(regs*)+0x932>
c0020c94:	51                   	push   ecx
c0020c95:	51                   	push   ecx
c0020c96:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c99:	ff 36                	push   DWORD PTR [esi]
c0020c9b:	e8 43 f3 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020ca0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ca7:	89 c6                	mov    esi,eax
c0020ca9:	89 d7                	mov    edi,edx
c0020cab:	e8 9f f5 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020cb0:	57                   	push   edi
c0020cb1:	56                   	push   esi
c0020cb2:	52                   	push   edx
c0020cb3:	50                   	push   eax
c0020cb4:	e8 36 f5 ff ff       	call   c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020cb9:	e9 e2 00 00 00       	jmp    c0020da0 <Vm::x87Handler(regs*)+0xa14>
c0020cbe:	80 fa 05             	cmp    dl,0x5
c0020cc1:	75 28                	jne    c0020ceb <Vm::x87Handler(regs*)+0x95f>
c0020cc3:	83 ec 0c             	sub    esp,0xc
c0020cc6:	6a 00                	push   0x0
c0020cc8:	e8 82 f5 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020ccd:	89 c7                	mov    edi,eax
c0020ccf:	89 d5                	mov    ebp,edx
c0020cd1:	58                   	pop    eax
c0020cd2:	5a                   	pop    edx
c0020cd3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020cd6:	ff 36                	push   DWORD PTR [esi]
c0020cd8:	e8 06 f3 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	55                   	push   ebp
c0020ce1:	57                   	push   edi
c0020ce2:	52                   	push   edx
c0020ce3:	50                   	push   eax
c0020ce4:	e8 06 f5 ff ff       	call   c00201ef <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020ce9:	eb 60                	jmp    c0020d4b <Vm::x87Handler(regs*)+0x9bf>
c0020ceb:	80 fa 06             	cmp    dl,0x6
c0020cee:	75 2a                	jne    c0020d1a <Vm::x87Handler(regs*)+0x98e>
c0020cf0:	51                   	push   ecx
c0020cf1:	51                   	push   ecx
c0020cf2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020cf5:	ff 36                	push   DWORD PTR [esi]
c0020cf7:	e8 e7 f2 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020cfc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020d03:	89 c6                	mov    esi,eax
c0020d05:	89 d7                	mov    edi,edx
c0020d07:	e8 43 f5 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020d0c:	57                   	push   edi
c0020d0d:	56                   	push   esi
c0020d0e:	52                   	push   edx
c0020d0f:	50                   	push   eax
c0020d10:	e8 08 f5 ff ff       	call   c002021d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020d15:	e9 86 00 00 00       	jmp    c0020da0 <Vm::x87Handler(regs*)+0xa14>
c0020d1a:	31 c0                	xor    eax,eax
c0020d1c:	80 fa 07             	cmp    dl,0x7
c0020d1f:	0f 85 c8 00 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020d25:	83 ec 0c             	sub    esp,0xc
c0020d28:	6a 00                	push   0x0
c0020d2a:	e8 20 f5 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020d2f:	89 c7                	mov    edi,eax
c0020d31:	89 d5                	mov    ebp,edx
c0020d33:	58                   	pop    eax
c0020d34:	5a                   	pop    edx
c0020d35:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020d38:	ff 36                	push   DWORD PTR [esi]
c0020d3a:	e8 a4 f2 ff ff       	call   c001ffe3 <Vm::fpu64ToInternal(unsigned long long)>
c0020d3f:	83 c4 10             	add    esp,0x10
c0020d42:	55                   	push   ebp
c0020d43:	57                   	push   edi
c0020d44:	52                   	push   edx
c0020d45:	50                   	push   eax
c0020d46:	e8 d2 f4 ff ff       	call   c002021d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020d4b:	83 c4 0c             	add    esp,0xc
c0020d4e:	eb 53                	jmp    c0020da3 <Vm::x87Handler(regs*)+0xa17>
c0020d50:	31 c0                	xor    eax,eax
c0020d52:	80 fa 02             	cmp    dl,0x2
c0020d55:	0f 85 92 00 00 00    	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020d5b:	83 ec 0c             	sub    esp,0xc
c0020d5e:	6a 00                	push   0x0
c0020d60:	e8 ea f4 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020d65:	59                   	pop    ecx
c0020d66:	5f                   	pop    edi
c0020d67:	52                   	push   edx
c0020d68:	50                   	push   eax
c0020d69:	e8 27 f2 ff ff       	call   c001ff95 <Vm::fpuInternalTo64(unsigned long long)>
c0020d6e:	eb 70                	jmp    c0020de0 <Vm::x87Handler(regs*)+0xa54>
c0020d70:	31 c0                	xor    eax,eax
c0020d72:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020d77:	75 74                	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020d79:	50                   	push   eax
c0020d7a:	50                   	push   eax
c0020d7b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020d7e:	31 d2                	xor    edx,edx
c0020d80:	52                   	push   edx
c0020d81:	50                   	push   eax
c0020d82:	e8 f6 f2 ff ff       	call   c002007d <Vm::fpuLongToFloat(long long)>
c0020d87:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020d8e:	89 c6                	mov    esi,eax
c0020d90:	89 d7                	mov    edi,edx
c0020d92:	e8 b8 f4 ff ff       	call   c002024f <Vm::fpuGetReg(int)>
c0020d97:	57                   	push   edi
c0020d98:	56                   	push   esi
c0020d99:	52                   	push   edx
c0020d9a:	50                   	push   eax
c0020d9b:	e8 5e f4 ff ff       	call   c00201fe <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020da0:	83 c4 1c             	add    esp,0x1c
c0020da3:	52                   	push   edx
c0020da4:	50                   	push   eax
c0020da5:	6a 00                	push   0x0
c0020da7:	e8 e6 f4 ff ff       	call   c0020292 <Vm::fpuSetReg(int, unsigned long long)>
c0020dac:	e9 f2 f7 ff ff       	jmp    c00205a3 <Vm::x87Handler(regs*)+0x217>
c0020db1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020db5:	80 fa 05             	cmp    dl,0x5
c0020db8:	75 11                	jne    c0020dcb <Vm::x87Handler(regs*)+0xa3f>
c0020dba:	55                   	push   ebp
c0020dbb:	55                   	push   ebp
c0020dbc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020dbf:	ff 36                	push   DWORD PTR [esi]
c0020dc1:	e8 81 f2 ff ff       	call   c0020047 <Vm::fpuULongToFloat(unsigned long long)>
c0020dc6:	e9 cf f7 ff ff       	jmp    c002059a <Vm::x87Handler(regs*)+0x20e>
c0020dcb:	31 c0                	xor    eax,eax
c0020dcd:	80 fa 07             	cmp    dl,0x7
c0020dd0:	75 1b                	jne    c0020ded <Vm::x87Handler(regs*)+0xa61>
c0020dd2:	e8 63 f5 ff ff       	call   c002033a <Vm::fpuPop()>
c0020dd7:	51                   	push   ecx
c0020dd8:	51                   	push   ecx
c0020dd9:	52                   	push   edx
c0020dda:	50                   	push   eax
c0020ddb:	e8 0c f2 ff ff       	call   c001ffec <Vm::fpuFloatToLong(unsigned long long)>
c0020de0:	83 c4 10             	add    esp,0x10
c0020de3:	89 06                	mov    DWORD PTR [esi],eax
c0020de5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020de8:	e9 f8 f7 ff ff       	jmp    c00205e5 <Vm::x87Handler(regs*)+0x259>
c0020ded:	83 c4 1c             	add    esp,0x1c
c0020df0:	5b                   	pop    ebx
c0020df1:	5e                   	pop    esi
c0020df2:	5f                   	pop    edi
c0020df3:	5d                   	pop    ebp
c0020df4:	c3                   	ret    

c0020df5 <__static_initialization_and_destruction_0(int, int)>:
c0020df5:	83 ec 0c             	sub    esp,0xc
c0020df8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020dfd:	75 1a                	jne    c0020e19 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020dff:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020e07:	75 10                	jne    c0020e19 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020e09:	83 ec 0c             	sub    esp,0xc
c0020e0c:	68 40 2b 03 c0       	push   0xc0032b40
c0020e11:	e8 76 8e 00 00       	call   c0029c8c <Vm::_FPUState::_FPUState()>
c0020e16:	83 c4 10             	add    esp,0x10
c0020e19:	90                   	nop
c0020e1a:	83 c4 0c             	add    esp,0xc
c0020e1d:	c3                   	ret    

c0020e1e <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020e1e:	83 ec 0c             	sub    esp,0xc
c0020e21:	83 ec 08             	sub    esp,0x8
c0020e24:	68 ff ff 00 00       	push   0xffff
c0020e29:	6a 01                	push   0x1
c0020e2b:	e8 c5 ff ff ff       	call   c0020df5 <__static_initialization_and_destruction_0(int, int)>
c0020e30:	83 c4 10             	add    esp,0x10
c0020e33:	83 c4 0c             	add    esp,0xc
c0020e36:	c3                   	ret    
c0020e37:	90                   	nop

c0020e38 <FAT::getName()>:
c0020e38:	b8 e4 d8 02 c0       	mov    eax,0xc002d8e4
c0020e3d:	c3                   	ret    

c0020e3e <FAT::tell(void*, unsigned long long*)>:
c0020e3e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020e43:	75 06                	jne    c0020e4b <FAT::tell(void*, unsigned long long*)+0xd>
c0020e45:	b8 04 00 00 00       	mov    eax,0x4
c0020e4a:	c3                   	ret    
c0020e4b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e50:	75 06                	jne    c0020e58 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020e52:	b8 04 00 00 00       	mov    eax,0x4
c0020e57:	c3                   	ret    
c0020e58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e5c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020e5f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020e62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e66:	89 01                	mov    DWORD PTR [ecx],eax
c0020e68:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e6b:	b8 00 00 00 00       	mov    eax,0x0
c0020e70:	c3                   	ret    
c0020e71:	90                   	nop

c0020e72 <FAT::stat(void*, unsigned long long*)>:
c0020e72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020e77:	75 06                	jne    c0020e7f <FAT::stat(void*, unsigned long long*)+0xd>
c0020e79:	b8 04 00 00 00       	mov    eax,0x4
c0020e7e:	c3                   	ret    
c0020e7f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e84:	75 06                	jne    c0020e8c <FAT::stat(void*, unsigned long long*)+0x1a>
c0020e86:	b8 04 00 00 00       	mov    eax,0x4
c0020e8b:	c3                   	ret    
c0020e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e90:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020e93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020e96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e9a:	89 01                	mov    DWORD PTR [ecx],eax
c0020e9c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e9f:	b8 00 00 00 00       	mov    eax,0x0
c0020ea4:	c3                   	ret    
c0020ea5:	90                   	nop

c0020ea6 <FAT::~FAT()>:
c0020ea6:	83 ec 0c             	sub    esp,0xc
c0020ea9:	ba 74 d9 02 c0       	mov    edx,0xc002d974
c0020eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb2:	89 10                	mov    DWORD PTR [eax],edx
c0020eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb8:	83 ec 0c             	sub    esp,0xc
c0020ebb:	50                   	push   eax
c0020ebc:	e8 bf 22 ff ff       	call   c0013180 <Filesystem::~Filesystem()>
c0020ec1:	83 c4 10             	add    esp,0x10
c0020ec4:	90                   	nop
c0020ec5:	83 c4 0c             	add    esp,0xc
c0020ec8:	c3                   	ret    
c0020ec9:	90                   	nop

c0020eca <FAT::~FAT()>:
c0020eca:	83 ec 0c             	sub    esp,0xc
c0020ecd:	83 ec 0c             	sub    esp,0xc
c0020ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ed4:	e8 cd ff ff ff       	call   c0020ea6 <FAT::~FAT()>
c0020ed9:	83 c4 10             	add    esp,0x10
c0020edc:	83 ec 08             	sub    esp,0x8
c0020edf:	6a 08                	push   0x8
c0020ee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ee5:	e8 87 1e ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0020eea:	83 c4 10             	add    esp,0x10
c0020eed:	83 c4 0c             	add    esp,0xc
c0020ef0:	c3                   	ret    
c0020ef1:	90                   	nop

c0020ef2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020ef2:	83 ec 1c             	sub    esp,0x1c
c0020ef5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020efc:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020f01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f05:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c0020f0c:	83 f8 ff             	cmp    eax,0xffffffff
c0020f0f:	75 34                	jne    c0020f45 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020f11:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020f15:	88 c2                	mov    dl,al
c0020f17:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c0020f1c:	01 d0                	add    eax,edx
c0020f1e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020f22:	8b 15 a0 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032ba0
c0020f28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f2c:	89 14 85 c0 2b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd440],edx
c0020f33:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c0020f38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020f3c:	89 14 85 40 2c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd3c0],edx
c0020f43:	eb 17                	jmp    c0020f5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020f45:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020f49:	88 c2                	mov    dl,al
c0020f4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f4f:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c0020f56:	01 d0                	add    eax,edx
c0020f58:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020f5c:	83 ec 04             	sub    esp,0x4
c0020f5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f67:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020f6b:	50                   	push   eax
c0020f6c:	e8 8d 5d fe ff       	call   c0006cfe <f_getlabel>
c0020f71:	83 c4 10             	add    esp,0x10
c0020f74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f7d:	75 07                	jne    c0020f86 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020f7f:	b8 00 00 00 00       	mov    eax,0x0
c0020f84:	eb 05                	jmp    c0020f8b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020f86:	b8 01 00 00 00       	mov    eax,0x1
c0020f8b:	83 c4 1c             	add    esp,0x1c
c0020f8e:	c3                   	ret    
c0020f8f:	90                   	nop

c0020f90 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020f90:	57                   	push   edi
c0020f91:	83 ec 58             	sub    esp,0x58
c0020f94:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020f9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020fa0:	b9 0f 00 00 00       	mov    ecx,0xf
c0020fa5:	b8 00 00 00 00       	mov    eax,0x0
c0020faa:	fc                   	cld    
c0020fab:	89 d7                	mov    edi,edx
c0020fad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020faf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020fb3:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c0020fba:	83 f8 ff             	cmp    eax,0xffffffff
c0020fbd:	75 34                	jne    c0020ff3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020fbf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020fc3:	88 c2                	mov    dl,al
c0020fc5:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c0020fca:	01 d0                	add    eax,edx
c0020fcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fd0:	8b 15 a0 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032ba0
c0020fd6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020fda:	89 14 85 c0 2b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd440],edx
c0020fe1:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c0020fe6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020fea:	89 14 85 40 2c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd3c0],edx
c0020ff1:	eb 17                	jmp    c002100a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020ff3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ff7:	88 c2                	mov    dl,al
c0020ff9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020ffd:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c0021004:	01 d0                	add    eax,edx
c0021006:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002100a:	83 ec 08             	sub    esp,0x8
c002100d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0021011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021015:	50                   	push   eax
c0021016:	e8 31 f9 fd ff       	call   c000094c <strcat>
c002101b:	83 c4 10             	add    esp,0x10
c002101e:	83 ec 0c             	sub    esp,0xc
c0021021:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021025:	50                   	push   eax
c0021026:	e8 c1 5e fe ff       	call   c0006eec <f_setlabel>
c002102b:	83 c4 10             	add    esp,0x10
c002102e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021032:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0021037:	75 07                	jne    c0021040 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0021039:	b8 00 00 00 00       	mov    eax,0x0
c002103e:	eb 05                	jmp    c0021045 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0021040:	b8 01 00 00 00       	mov    eax,0x1
c0021045:	83 c4 58             	add    esp,0x58
c0021048:	5f                   	pop    edi
c0021049:	c3                   	ret    

c002104a <FAT::format(LogicalDisk*, int, char const*, int)>:
c002104a:	83 ec 2c             	sub    esp,0x2c
c002104d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0021055:	83 ec 08             	sub    esp,0x8
c0021058:	68 08 d9 02 c0       	push   0xc002d908
c002105d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021061:	e8 32 f8 fd ff       	call   c0000898 <strcmp>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	85 c0                	test   eax,eax
c002106b:	0f 94 c0             	sete   al
c002106e:	84 c0                	test   al,al
c0021070:	74 0d                	je     c002107f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0021072:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002107a:	e9 a6 00 00 00       	jmp    c0021125 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002107f:	83 ec 08             	sub    esp,0x8
c0021082:	68 fa d8 02 c0       	push   0xc002d8fa
c0021087:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002108b:	e8 08 f8 fd ff       	call   c0000898 <strcmp>
c0021090:	83 c4 10             	add    esp,0x10
c0021093:	85 c0                	test   eax,eax
c0021095:	0f 94 c0             	sete   al
c0021098:	84 c0                	test   al,al
c002109a:	74 0a                	je     c00210a6 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002109c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00210a4:	eb 7f                	jmp    c0021125 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00210a6:	83 ec 08             	sub    esp,0x8
c00210a9:	68 00 d9 02 c0       	push   0xc002d900
c00210ae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00210b2:	e8 e1 f7 fd ff       	call   c0000898 <strcmp>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	85 c0                	test   eax,eax
c00210bc:	0f 94 c0             	sete   al
c00210bf:	84 c0                	test   al,al
c00210c1:	74 0a                	je     c00210cd <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00210c3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00210cb:	eb 58                	jmp    c0021125 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00210cd:	83 ec 08             	sub    esp,0x8
c00210d0:	68 ec a3 02 c0       	push   0xc002a3ec
c00210d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00210d9:	e8 ba f7 fd ff       	call   c0000898 <strcmp>
c00210de:	83 c4 10             	add    esp,0x10
c00210e1:	85 c0                	test   eax,eax
c00210e3:	0f 94 c0             	sete   al
c00210e6:	84 c0                	test   al,al
c00210e8:	74 0a                	je     c00210f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00210ea:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00210f2:	eb 31                	jmp    c0021125 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00210f4:	83 ec 08             	sub    esp,0x8
c00210f7:	68 06 d9 02 c0       	push   0xc002d906
c00210fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021100:	e8 93 f7 fd ff       	call   c0000898 <strcmp>
c0021105:	83 c4 10             	add    esp,0x10
c0021108:	85 c0                	test   eax,eax
c002110a:	0f 94 c0             	sete   al
c002110d:	84 c0                	test   al,al
c002110f:	74 0a                	je     c002111b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0021111:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0021119:	eb 0a                	jmp    c0021125 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002111b:	b8 08 00 00 00       	mov    eax,0x8
c0021120:	e9 04 01 00 00       	jmp    c0021229 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021125:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002112c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0021131:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021135:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c002113c:	83 f8 ff             	cmp    eax,0xffffffff
c002113f:	75 34                	jne    c0021175 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0021141:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021145:	88 c2                	mov    dl,al
c0021147:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c002114c:	01 d0                	add    eax,edx
c002114e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0021152:	8b 15 a0 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032ba0
c0021158:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002115c:	89 14 85 c0 2b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd440],edx
c0021163:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c0021168:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002116c:	89 14 85 40 2c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd3c0],edx
c0021173:	eb 17                	jmp    c002118c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0021175:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021179:	88 c2                	mov    dl,al
c002117b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002117f:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c0021186:	01 d0                	add    eax,edx
c0021188:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021190:	88 04 24             	mov    BYTE PTR [esp],al
c0021193:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021197:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002119b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00211a3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00211a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00211b0:	83 ec 0c             	sub    esp,0xc
c00211b3:	68 00 20 00 00       	push   0x2000
c00211b8:	e8 cf e6 fe ff       	call   c000f88c <malloc>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211c4:	68 00 20 00 00       	push   0x2000
c00211c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211d1:	50                   	push   eax
c00211d2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00211d6:	50                   	push   eax
c00211d7:	e8 5b 61 fe ff       	call   c0007337 <f_mkfs>
c00211dc:	83 c4 10             	add    esp,0x10
c00211df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00211e8:	75 07                	jne    c00211f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00211ea:	b8 00 00 00 00       	mov    eax,0x0
c00211ef:	eb 38                	jmp    c0021229 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00211f1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00211f6:	75 17                	jne    c002120f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00211f8:	83 ec 0c             	sub    esp,0xc
c00211fb:	68 44 d9 02 c0       	push   0xc002d944
c0021200:	e8 4c 1c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0021205:	83 c4 10             	add    esp,0x10
c0021208:	b8 09 00 00 00       	mov    eax,0x9
c002120d:	eb 1a                	jmp    c0021229 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002120f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021213:	83 ec 08             	sub    esp,0x8
c0021216:	50                   	push   eax
c0021217:	68 0c d9 02 c0       	push   0xc002d90c
c002121c:	e8 30 1c ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0021221:	83 c4 10             	add    esp,0x10
c0021224:	b8 01 00 00 00       	mov    eax,0x1
c0021229:	83 c4 2c             	add    esp,0x2c
c002122c:	c3                   	ret    
c002122d:	90                   	nop

c002122e <FAT::tryMount(LogicalDisk*, int)>:
c002122e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021234:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c0021239:	83 f8 14             	cmp    eax,0x14
c002123c:	75 17                	jne    c0021255 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002123e:	83 ec 0c             	sub    esp,0xc
c0021241:	68 1e d9 02 c0       	push   0xc002d91e
c0021246:	e8 4e 97 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c002124b:	83 c4 10             	add    esp,0x10
c002124e:	b0 00                	mov    al,0x0
c0021250:	e9 d7 01 00 00       	jmp    c002142c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021255:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002125c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021262:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021268:	3d 00 02 00 00       	cmp    eax,0x200
c002126d:	74 07                	je     c0021276 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002126f:	b0 00                	mov    al,0x0
c0021271:	e9 b6 01 00 00       	jmp    c002142c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021276:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002127e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021285:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c002128c:	83 f8 ff             	cmp    eax,0xffffffff
c002128f:	74 07                	je     c0021298 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0021291:	b0 01                	mov    al,0x1
c0021293:	e9 94 01 00 00       	jmp    c002142c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021298:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00212a2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00212aa:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00212b1:	88 c2                	mov    dl,al
c00212b3:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c00212b8:	01 d0                	add    eax,edx
c00212ba:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00212c1:	8b 15 a0 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032ba0
c00212c7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00212ce:	89 14 85 c0 2b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd440],edx
c00212d5:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c00212da:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00212e1:	89 14 85 40 2c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd3c0],edx
c00212e8:	83 ec 0c             	sub    esp,0xc
c00212eb:	68 54 02 00 00       	push   0x254
c00212f0:	e8 97 e5 fe ff       	call   c000f88c <malloc>
c00212f5:	83 c4 10             	add    esp,0x10
c00212f8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00212ff:	83 ec 04             	sub    esp,0x4
c0021302:	6a 00                	push   0x0
c0021304:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002130b:	50                   	push   eax
c002130c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021313:	e8 dd 3b fe ff       	call   c0004ef5 <f_mount>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021322:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002132a:	74 19                	je     c0021345 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021336:	e8 71 e5 fe ff       	call   c000f8ac <rfree>
c002133b:	83 c4 10             	add    esp,0x10
c002133e:	b0 00                	mov    al,0x0
c0021340:	e9 e7 00 00 00       	jmp    c002142c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021345:	83 ec 04             	sub    esp,0x4
c0021348:	68 00 01 00 00       	push   0x100
c002134d:	6a 00                	push   0x0
c002134f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021356:	50                   	push   eax
c0021357:	e8 f4 f3 fd ff       	call   c0000750 <memset>
c002135c:	83 c4 10             	add    esp,0x10
c002135f:	83 ec 08             	sub    esp,0x8
c0021362:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021369:	50                   	push   eax
c002136a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021371:	50                   	push   eax
c0021372:	e8 d5 f5 fd ff       	call   c000094c <strcat>
c0021377:	83 c4 10             	add    esp,0x10
c002137a:	83 ec 08             	sub    esp,0x8
c002137d:	68 2c d9 02 c0       	push   0xc002d92c
c0021382:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021389:	50                   	push   eax
c002138a:	e8 bd f5 fd ff       	call   c000094c <strcat>
c002138f:	83 c4 10             	add    esp,0x10
c0021392:	83 ec 04             	sub    esp,0x4
c0021395:	6a 01                	push   0x1
c0021397:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002139e:	50                   	push   eax
c002139f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00213a3:	50                   	push   eax
c00213a4:	e8 ae 3b fe ff       	call   c0004f57 <f_open>
c00213a9:	83 c4 10             	add    esp,0x10
c00213ac:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00213b3:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00213ba:	85 c0                	test   eax,eax
c00213bc:	74 0a                	je     c00213c8 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00213be:	78 2d                	js     c00213ed <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00213c0:	83 e8 04             	sub    eax,0x4
c00213c3:	83 f8 01             	cmp    eax,0x1
c00213c6:	77 25                	ja     c00213ed <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00213c8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00213d0:	83 ec 0c             	sub    esp,0xc
c00213d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00213d7:	50                   	push   eax
c00213d8:	e8 cc 46 fe ff       	call   c0005aa9 <f_close>
c00213dd:	83 c4 10             	add    esp,0x10
c00213e0:	90                   	nop
c00213e1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00213e9:	74 3a                	je     c0021425 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00213eb:	eb 2d                	jmp    c002141a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00213ed:	83 ec 0c             	sub    esp,0xc
c00213f0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00213f7:	e8 b0 e4 fe ff       	call   c000f8ac <rfree>
c00213fc:	83 c4 10             	add    esp,0x10
c00213ff:	83 ec 04             	sub    esp,0x4
c0021402:	6a 00                	push   0x0
c0021404:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002140b:	50                   	push   eax
c002140c:	6a 00                	push   0x0
c002140e:	e8 e2 3a fe ff       	call   c0004ef5 <f_mount>
c0021413:	83 c4 10             	add    esp,0x10
c0021416:	b0 00                	mov    al,0x0
c0021418:	eb 12                	jmp    c002142c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002141a:	a1 a0 2b 03 c0       	mov    eax,ds:0xc0032ba0
c002141f:	40                   	inc    eax
c0021420:	a3 a0 2b 03 c0       	mov    ds:0xc0032ba0,eax
c0021425:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002142c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021432:	c3                   	ret    
c0021433:	90                   	nop

c0021434 <FAT::getFileFirstSector(char const*)>:
c0021434:	53                   	push   ebx
c0021435:	83 ec 28             	sub    esp,0x28
c0021438:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021440:	83 ec 0c             	sub    esp,0xc
c0021443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021447:	e8 40 e4 fe ff       	call   c000f88c <malloc>
c002144c:	83 c4 10             	add    esp,0x10
c002144f:	89 c3                	mov    ebx,eax
c0021451:	a1 d0 2a 03 c0       	mov    eax,ds:0xc0032ad0
c0021456:	83 ec 04             	sub    esp,0x4
c0021459:	50                   	push   eax
c002145a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002145e:	53                   	push   ebx
c002145f:	e8 4c 1f ff ff       	call   c00133b0 <File::File(char const*, Process*)>
c0021464:	83 c4 10             	add    esp,0x10
c0021467:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002146b:	83 ec 08             	sub    esp,0x8
c002146e:	6a 01                	push   0x1
c0021470:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021474:	e8 9b 1f ff ff       	call   c0013414 <File::open(FileOpenMode)>
c0021479:	83 c4 10             	add    esp,0x10
c002147c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021480:	8b 00                	mov    eax,DWORD PTR [eax]
c0021482:	83 c0 0c             	add    eax,0xc
c0021485:	8b 00                	mov    eax,DWORD PTR [eax]
c0021487:	83 ec 0c             	sub    esp,0xc
c002148a:	8d 54 24 14          	lea    edx,[esp+0x14]
c002148e:	52                   	push   edx
c002148f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021493:	52                   	push   edx
c0021494:	6a 00                	push   0x0
c0021496:	6a 04                	push   0x4
c0021498:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002149c:	ff d0                	call   eax
c002149e:	83 c4 20             	add    esp,0x20
c00214a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214a5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00214ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214b3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00214b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00214b9:	83 ec 04             	sub    esp,0x4
c00214bc:	52                   	push   edx
c00214bd:	50                   	push   eax
c00214be:	68 37 d9 02 c0       	push   0xc002d937
c00214c3:	e8 89 19 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00214c8:	83 c4 10             	add    esp,0x10
c00214cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214cf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00214d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00214d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00214d9:	83 ec 0c             	sub    esp,0xc
c00214dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00214e0:	e8 8d 1f ff ff       	call   c0013472 <File::close()>
c00214e5:	83 c4 10             	add    esp,0x10
c00214e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214ec:	ba 00 00 00 00       	mov    edx,0x0
c00214f1:	83 c4 28             	add    esp,0x28
c00214f4:	5b                   	pop    ebx
c00214f5:	c3                   	ret    

c00214f6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00214f6:	57                   	push   edi
c00214f7:	56                   	push   esi
c00214f8:	53                   	push   ebx
c00214f9:	81 ec 50 02 00 00    	sub    esp,0x250
c00214ff:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0021507:	74 0a                	je     c0021513 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0021509:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021511:	75 0a                	jne    c002151d <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0021513:	b8 04 00 00 00       	mov    eax,0x4
c0021518:	e9 29 01 00 00       	jmp    c0021646 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002151d:	83 ec 08             	sub    esp,0x8
c0021520:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021527:	50                   	push   eax
c0021528:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002152f:	e8 7f 4b fe ff       	call   c00060b3 <f_readdir>
c0021534:	83 c4 10             	add    esp,0x10
c0021537:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002153e:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0021545:	83 ec 0c             	sub    esp,0xc
c0021548:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002154f:	83 c0 1a             	add    eax,0x1a
c0021552:	50                   	push   eax
c0021553:	e8 14 f2 fd ff       	call   c000076c <strlen>
c0021558:	83 c4 10             	add    esp,0x10
c002155b:	ba 00 00 00 00       	mov    edx,0x0
c0021560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021568:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002156f:	0f b6 c0             	movzx  eax,al
c0021572:	83 e0 10             	and    eax,0x10
c0021575:	74 07                	je     c002157e <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0021577:	b8 02 00 00 00       	mov    eax,0x2
c002157c:	eb 05                	jmp    c0021583 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002157e:	b8 01 00 00 00       	mov    eax,0x1
c0021583:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021587:	83 ec 08             	sub    esp,0x8
c002158a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021591:	83 c0 1a             	add    eax,0x1a
c0021594:	50                   	push   eax
c0021595:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021599:	83 c0 10             	add    eax,0x10
c002159c:	50                   	push   eax
c002159d:	e8 6a f2 fd ff       	call   c000080c <strcpy>
c00215a2:	83 c4 10             	add    esp,0x10
c00215a5:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00215ac:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00215b3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00215b7:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00215be:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00215c5:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00215cc:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00215d3:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00215da:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00215e1:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00215e8:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00215ef:	89 c6                	mov    esi,eax
c00215f1:	89 d7                	mov    edi,edx
c00215f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215f5:	89 c8                	mov    eax,ecx
c00215f7:	89 fa                	mov    edx,edi
c00215f9:	89 f3                	mov    ebx,esi
c00215fb:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0021602:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0021609:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0021610:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0021617:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002161d:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0021624:	84 c0                	test   al,al
c0021626:	75 07                	jne    c002162f <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0021628:	b8 07 00 00 00       	mov    eax,0x7
c002162d:	eb 17                	jmp    c0021646 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002162f:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0021636:	85 c0                	test   eax,eax
c0021638:	75 07                	jne    c0021641 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002163a:	b8 00 00 00 00       	mov    eax,0x0
c002163f:	eb 05                	jmp    c0021646 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021641:	b8 01 00 00 00       	mov    eax,0x1
c0021646:	81 c4 50 02 00 00    	add    esp,0x250
c002164c:	5b                   	pop    ebx
c002164d:	5e                   	pop    esi
c002164e:	5f                   	pop    edi
c002164f:	c3                   	ret    

c0021650 <FAT::read(void*, unsigned long, void*, int*)>:
c0021650:	83 ec 1c             	sub    esp,0x1c
c0021653:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021658:	74 07                	je     c0021661 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002165a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002165f:	75 07                	jne    c0021668 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021661:	b8 04 00 00 00       	mov    eax,0x4
c0021666:	eb 3d                	jmp    c00216a5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021668:	8d 44 24 08          	lea    eax,[esp+0x8]
c002166c:	50                   	push   eax
c002166d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021671:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021675:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021679:	e8 15 3d fe ff       	call   c0005393 <f_read>
c002167e:	83 c4 10             	add    esp,0x10
c0021681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021685:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021689:	89 c2                	mov    edx,eax
c002168b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002168f:	89 10                	mov    DWORD PTR [eax],edx
c0021691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021695:	85 c0                	test   eax,eax
c0021697:	75 07                	jne    c00216a0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021699:	b8 00 00 00 00       	mov    eax,0x0
c002169e:	eb 05                	jmp    c00216a5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00216a0:	b8 01 00 00 00       	mov    eax,0x1
c00216a5:	83 c4 1c             	add    esp,0x1c
c00216a8:	c3                   	ret    
c00216a9:	90                   	nop

c00216aa <FAT::write(void*, unsigned long, void*, int*)>:
c00216aa:	83 ec 1c             	sub    esp,0x1c
c00216ad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00216b2:	74 07                	je     c00216bb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00216b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00216b9:	75 07                	jne    c00216c2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00216bb:	b8 04 00 00 00       	mov    eax,0x4
c00216c0:	eb 3d                	jmp    c00216ff <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00216c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216c6:	50                   	push   eax
c00216c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00216cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00216cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216d3:	e8 3b 3f fe ff       	call   c0005613 <f_write>
c00216d8:	83 c4 10             	add    esp,0x10
c00216db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216e3:	89 c2                	mov    edx,eax
c00216e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00216e9:	89 10                	mov    DWORD PTR [eax],edx
c00216eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ef:	85 c0                	test   eax,eax
c00216f1:	75 07                	jne    c00216fa <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00216f3:	b8 00 00 00 00       	mov    eax,0x0
c00216f8:	eb 05                	jmp    c00216ff <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00216fa:	b8 01 00 00 00       	mov    eax,0x1
c00216ff:	83 c4 1c             	add    esp,0x1c
c0021702:	c3                   	ret    
c0021703:	90                   	nop

c0021704 <FAT::close(void*)>:
c0021704:	83 ec 1c             	sub    esp,0x1c
c0021707:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002170c:	75 07                	jne    c0021715 <FAT::close(void*)+0x11>
c002170e:	b8 04 00 00 00       	mov    eax,0x4
c0021713:	eb 36                	jmp    c002174b <FAT::close(void*)+0x47>
c0021715:	83 ec 0c             	sub    esp,0xc
c0021718:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002171c:	e8 88 43 fe ff       	call   c0005aa9 <f_close>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021728:	83 ec 0c             	sub    esp,0xc
c002172b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002172f:	e8 68 e1 fe ff       	call   c000f89c <free>
c0021734:	83 c4 10             	add    esp,0x10
c0021737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002173b:	85 c0                	test   eax,eax
c002173d:	75 07                	jne    c0021746 <FAT::close(void*)+0x42>
c002173f:	b8 00 00 00 00       	mov    eax,0x0
c0021744:	eb 05                	jmp    c002174b <FAT::close(void*)+0x47>
c0021746:	b8 01 00 00 00       	mov    eax,0x1
c002174b:	83 c4 1c             	add    esp,0x1c
c002174e:	c3                   	ret    
c002174f:	90                   	nop

c0021750 <FAT::closeDir(void*)>:
c0021750:	83 ec 1c             	sub    esp,0x1c
c0021753:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021758:	75 07                	jne    c0021761 <FAT::closeDir(void*)+0x11>
c002175a:	b8 04 00 00 00       	mov    eax,0x4
c002175f:	eb 36                	jmp    c0021797 <FAT::closeDir(void*)+0x47>
c0021761:	83 ec 0c             	sub    esp,0xc
c0021764:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021768:	e8 24 49 fe ff       	call   c0006091 <f_closedir>
c002176d:	83 c4 10             	add    esp,0x10
c0021770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021774:	83 ec 0c             	sub    esp,0xc
c0021777:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002177b:	e8 1c e1 fe ff       	call   c000f89c <free>
c0021780:	83 c4 10             	add    esp,0x10
c0021783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021787:	85 c0                	test   eax,eax
c0021789:	75 07                	jne    c0021792 <FAT::closeDir(void*)+0x42>
c002178b:	b8 00 00 00 00       	mov    eax,0x0
c0021790:	eb 05                	jmp    c0021797 <FAT::closeDir(void*)+0x47>
c0021792:	b8 01 00 00 00       	mov    eax,0x1
c0021797:	83 c4 1c             	add    esp,0x1c
c002179a:	c3                   	ret    
c002179b:	90                   	nop

c002179c <FAT::seek(void*, unsigned long long)>:
c002179c:	83 ec 2c             	sub    esp,0x2c
c002179f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00217a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00217ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217af:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00217b4:	75 07                	jne    c00217bd <FAT::seek(void*, unsigned long long)+0x21>
c00217b6:	b8 04 00 00 00       	mov    eax,0x4
c00217bb:	eb 2f                	jmp    c00217ec <FAT::seek(void*, unsigned long long)+0x50>
c00217bd:	83 ec 04             	sub    esp,0x4
c00217c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00217cc:	e8 07 43 fe ff       	call   c0005ad8 <f_lseek>
c00217d1:	83 c4 10             	add    esp,0x10
c00217d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00217d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217dc:	85 c0                	test   eax,eax
c00217de:	75 07                	jne    c00217e7 <FAT::seek(void*, unsigned long long)+0x4b>
c00217e0:	b8 00 00 00 00       	mov    eax,0x0
c00217e5:	eb 05                	jmp    c00217ec <FAT::seek(void*, unsigned long long)+0x50>
c00217e7:	b8 01 00 00 00       	mov    eax,0x1
c00217ec:	83 c4 2c             	add    esp,0x2c
c00217ef:	c3                   	ret    

c00217f0 <fatWrapperReadDisk>:
c00217f0:	83 ec 1c             	sub    esp,0x1c
c00217f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00217ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0021802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021806:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002180a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002180f:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c0021816:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002181a:	83 ec 0c             	sub    esp,0xc
c002181d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021821:	52                   	push   edx
c0021822:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021826:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002182a:	50                   	push   eax
c002182b:	e8 9e 4f ff ff       	call   c00167ce <LogicalDisk::read(unsigned long long, int, void*)>
c0021830:	83 c4 20             	add    esp,0x20
c0021833:	83 c4 1c             	add    esp,0x1c
c0021836:	c3                   	ret    

c0021837 <fatWrapperWriteDisk>:
c0021837:	83 ec 1c             	sub    esp,0x1c
c002183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002183e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021842:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021846:	89 04 24             	mov    DWORD PTR [esp],eax
c0021849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002184d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021851:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021856:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c002185d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021861:	83 ec 0c             	sub    esp,0xc
c0021864:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021868:	52                   	push   edx
c0021869:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002186d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021871:	50                   	push   eax
c0021872:	e8 c3 4f ff ff       	call   c001683a <LogicalDisk::write(unsigned long long, int, void*)>
c0021877:	83 c4 20             	add    esp,0x20
c002187a:	83 c4 1c             	add    esp,0x1c
c002187d:	c3                   	ret    

c002187e <fatWrapperIoctl>:
c002187e:	53                   	push   ebx
c002187f:	83 ec 28             	sub    esp,0x28
c0021882:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021886:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002188a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002188e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021892:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021897:	75 31                	jne    c00218ca <fatWrapperIoctl+0x4c>
c0021899:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002189d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00218a1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00218a6:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c00218ad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00218b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00218bd:	66 89 02             	mov    WORD PTR [edx],ax
c00218c0:	b8 00 00 00 00       	mov    eax,0x0
c00218c5:	e9 b2 00 00 00       	jmp    c002197c <fatWrapperIoctl+0xfe>
c00218ca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00218cf:	75 6a                	jne    c002193b <fatWrapperIoctl+0xbd>
c00218d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00218d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00218d9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00218de:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c00218e5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00218eb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00218f1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00218f7:	89 c8                	mov    eax,ecx
c00218f9:	89 da                	mov    edx,ebx
c00218fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00218ff:	c1 e0 0a             	shl    eax,0xa
c0021902:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021907:	8b 0c 8d 80 fb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0480]
c002190e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021914:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002191a:	89 cb                	mov    ebx,ecx
c002191c:	c1 fb 1f             	sar    ebx,0x1f
c002191f:	53                   	push   ebx
c0021920:	51                   	push   ecx
c0021921:	52                   	push   edx
c0021922:	50                   	push   eax
c0021923:	e8 1c 5f 00 00       	call   c0027844 <__udivdi3>
c0021928:	83 c4 10             	add    esp,0x10
c002192b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002192f:	89 01                	mov    DWORD PTR [ecx],eax
c0021931:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021934:	b8 00 00 00 00       	mov    eax,0x0
c0021939:	eb 41                	jmp    c002197c <fatWrapperIoctl+0xfe>
c002193b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021940:	75 07                	jne    c0021949 <fatWrapperIoctl+0xcb>
c0021942:	b8 00 00 00 00       	mov    eax,0x0
c0021947:	eb 33                	jmp    c002197c <fatWrapperIoctl+0xfe>
c0021949:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002194e:	75 19                	jne    c0021969 <fatWrapperIoctl+0xeb>
c0021950:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021954:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021958:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002195c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021962:	b8 00 00 00 00       	mov    eax,0x0
c0021967:	eb 13                	jmp    c002197c <fatWrapperIoctl+0xfe>
c0021969:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002196e:	75 07                	jne    c0021977 <fatWrapperIoctl+0xf9>
c0021970:	b8 00 00 00 00       	mov    eax,0x0
c0021975:	eb 05                	jmp    c002197c <fatWrapperIoctl+0xfe>
c0021977:	b8 04 00 00 00       	mov    eax,0x4
c002197c:	83 c4 28             	add    esp,0x28
c002197f:	5b                   	pop    ebx
c0021980:	c3                   	ret    
c0021981:	90                   	nop

c0021982 <FAT::FAT()>:
c0021982:	83 ec 1c             	sub    esp,0x1c
c0021985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021989:	83 ec 0c             	sub    esp,0xc
c002198c:	50                   	push   eax
c002198d:	e8 ca 17 ff ff       	call   c001315c <Filesystem::Filesystem()>
c0021992:	83 c4 10             	add    esp,0x10
c0021995:	ba 74 d9 02 c0       	mov    edx,0xc002d974
c002199a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002199e:	89 10                	mov    DWORD PTR [eax],edx
c00219a0:	c7 05 a0 2b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032ba0,0x0
c00219aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00219b2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00219b7:	7f 15                	jg     c00219ce <FAT::FAT()+0x4c>
c00219b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219bd:	c7 04 85 c0 2b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd440],0xffffffff
c00219c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00219cc:	eb e4                	jmp    c00219b2 <FAT::FAT()+0x30>
c00219ce:	90                   	nop
c00219cf:	83 c4 1c             	add    esp,0x1c
c00219d2:	c3                   	ret    
c00219d3:	90                   	nop

c00219d4 <FAT::fixFilepath(char*)>:
c00219d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219d8:	8a 00                	mov    al,BYTE PTR [eax]
c00219da:	3c 40                	cmp    al,0x40
c00219dc:	7e 2c                	jle    c0021a0a <FAT::fixFilepath(char*)+0x36>
c00219de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219e2:	8a 00                	mov    al,BYTE PTR [eax]
c00219e4:	83 e8 41             	sub    eax,0x41
c00219e7:	88 c2                	mov    dl,al
c00219e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ed:	88 10                	mov    BYTE PTR [eax],dl
c00219ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f3:	8a 00                	mov    al,BYTE PTR [eax]
c00219f5:	0f be c0             	movsx  eax,al
c00219f8:	8b 04 85 c0 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd440]
c00219ff:	83 c0 30             	add    eax,0x30
c0021a02:	88 c2                	mov    dl,al
c0021a04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a08:	88 10                	mov    BYTE PTR [eax],dl
c0021a0a:	90                   	nop
c0021a0b:	c3                   	ret    

c0021a0c <FAT::open(char const*, void**, FileOpenMode)>:
c0021a0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a1a:	74 0a                	je     c0021a26 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021a1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021a24:	75 0a                	jne    c0021a30 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021a26:	b8 04 00 00 00       	mov    eax,0x4
c0021a2b:	e9 fd 00 00 00       	jmp    c0021b2d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021a30:	83 ec 08             	sub    esp,0x8
c0021a33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a3e:	50                   	push   eax
c0021a3f:	e8 c8 ed fd ff       	call   c000080c <strcpy>
c0021a44:	83 c4 10             	add    esp,0x10
c0021a47:	83 ec 08             	sub    esp,0x8
c0021a4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021a4e:	50                   	push   eax
c0021a4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a56:	e8 79 ff ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021a5b:	83 c4 10             	add    esp,0x10
c0021a5e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021a66:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a6d:	83 e0 01             	and    eax,0x1
c0021a70:	74 08                	je     c0021a7a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021a72:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021a7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a81:	83 e0 04             	and    eax,0x4
c0021a84:	74 10                	je     c0021a96 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021a86:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021a8e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021a96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a9d:	83 e0 02             	and    eax,0x2
c0021aa0:	74 08                	je     c0021aaa <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021aa2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021aaa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021ab1:	83 e0 08             	and    eax,0x8
c0021ab4:	74 08                	je     c0021abe <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021ab6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021abe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021ac5:	83 e0 10             	and    eax,0x10
c0021ac8:	74 08                	je     c0021ad2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021aca:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021ad2:	83 ec 0c             	sub    esp,0xc
c0021ad5:	68 50 02 00 00       	push   0x250
c0021ada:	e8 ad dd fe ff       	call   c000f88c <malloc>
c0021adf:	83 c4 10             	add    esp,0x10
c0021ae2:	89 c2                	mov    edx,eax
c0021ae4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021aeb:	89 10                	mov    DWORD PTR [eax],edx
c0021aed:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021af5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021afe:	83 ec 04             	sub    esp,0x4
c0021b01:	52                   	push   edx
c0021b02:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021b06:	52                   	push   edx
c0021b07:	50                   	push   eax
c0021b08:	e8 4a 34 fe ff       	call   c0004f57 <f_open>
c0021b0d:	83 c4 10             	add    esp,0x10
c0021b10:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021b17:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021b1f:	74 07                	je     c0021b28 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021b21:	b8 01 00 00 00       	mov    eax,0x1
c0021b26:	eb 05                	jmp    c0021b2d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021b28:	b8 00 00 00 00       	mov    eax,0x0
c0021b2d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b33:	c3                   	ret    

c0021b34 <FAT::openDir(char const*, void**)>:
c0021b34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021b3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021b42:	74 0a                	je     c0021b4e <FAT::openDir(char const*, void**)+0x1a>
c0021b44:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021b4c:	75 07                	jne    c0021b55 <FAT::openDir(char const*, void**)+0x21>
c0021b4e:	b8 04 00 00 00       	mov    eax,0x4
c0021b53:	eb 7d                	jmp    c0021bd2 <FAT::openDir(char const*, void**)+0x9e>
c0021b55:	83 ec 08             	sub    esp,0x8
c0021b58:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b63:	50                   	push   eax
c0021b64:	e8 a3 ec fd ff       	call   c000080c <strcpy>
c0021b69:	83 c4 10             	add    esp,0x10
c0021b6c:	83 ec 08             	sub    esp,0x8
c0021b6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b73:	50                   	push   eax
c0021b74:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b7b:	e8 54 fe ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021b80:	83 c4 10             	add    esp,0x10
c0021b83:	83 ec 0c             	sub    esp,0xc
c0021b86:	6a 4c                	push   0x4c
c0021b88:	e8 ff dc fe ff       	call   c000f88c <malloc>
c0021b8d:	83 c4 10             	add    esp,0x10
c0021b90:	89 c2                	mov    edx,eax
c0021b92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021b99:	89 10                	mov    DWORD PTR [eax],edx
c0021b9b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ba4:	83 ec 08             	sub    esp,0x8
c0021ba7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021bab:	52                   	push   edx
c0021bac:	50                   	push   eax
c0021bad:	e8 dd 43 fe ff       	call   c0005f8f <f_opendir>
c0021bb2:	83 c4 10             	add    esp,0x10
c0021bb5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021bbc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021bc4:	74 07                	je     c0021bcd <FAT::openDir(char const*, void**)+0x99>
c0021bc6:	b8 01 00 00 00       	mov    eax,0x1
c0021bcb:	eb 05                	jmp    c0021bd2 <FAT::openDir(char const*, void**)+0x9e>
c0021bcd:	b8 00 00 00 00       	mov    eax,0x0
c0021bd2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021bd8:	c3                   	ret    
c0021bd9:	90                   	nop

c0021bda <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021bda:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021be0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021be8:	75 0a                	jne    c0021bf4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021bea:	b8 04 00 00 00       	mov    eax,0x4
c0021bef:	e9 c9 00 00 00       	jmp    c0021cbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021bf4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021bfc:	75 0a                	jne    c0021c08 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021bfe:	b8 04 00 00 00       	mov    eax,0x4
c0021c03:	e9 b5 00 00 00       	jmp    c0021cbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c08:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021c10:	75 0a                	jne    c0021c1c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021c12:	b8 04 00 00 00       	mov    eax,0x4
c0021c17:	e9 a1 00 00 00       	jmp    c0021cbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c1c:	83 ec 08             	sub    esp,0x8
c0021c1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c26:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021c2d:	50                   	push   eax
c0021c2e:	e8 d9 eb fd ff       	call   c000080c <strcpy>
c0021c33:	83 c4 10             	add    esp,0x10
c0021c36:	83 ec 08             	sub    esp,0x8
c0021c39:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021c40:	50                   	push   eax
c0021c41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c48:	e8 87 fd ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021c4d:	83 c4 10             	add    esp,0x10
c0021c50:	83 ec 08             	sub    esp,0x8
c0021c53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c57:	50                   	push   eax
c0021c58:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021c5f:	50                   	push   eax
c0021c60:	e8 e9 44 fe ff       	call   c000614e <f_stat>
c0021c65:	83 c4 10             	add    esp,0x10
c0021c68:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021c6f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021c76:	85 c0                	test   eax,eax
c0021c78:	74 07                	je     c0021c81 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021c7a:	83 f8 04             	cmp    eax,0x4
c0021c7d:	74 32                	je     c0021cb1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021c7f:	eb 37                	jmp    c0021cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021c81:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021c85:	0f b6 c0             	movzx  eax,al
c0021c88:	83 e0 10             	and    eax,0x10
c0021c8b:	0f 95 c2             	setne  dl
c0021c8e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021c95:	88 10                	mov    BYTE PTR [eax],dl
c0021c97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021c9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021c9e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021ca5:	89 01                	mov    DWORD PTR [ecx],eax
c0021ca7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021caa:	b8 00 00 00 00       	mov    eax,0x0
c0021caf:	eb 0c                	jmp    c0021cbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021cb1:	b8 02 00 00 00       	mov    eax,0x2
c0021cb6:	eb 05                	jmp    c0021cbd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021cb8:	b8 01 00 00 00       	mov    eax,0x1
c0021cbd:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021cc3:	c3                   	ret    

c0021cc4 <FAT::unlink(char const*)>:
c0021cc4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021cd2:	75 07                	jne    c0021cdb <FAT::unlink(char const*)+0x17>
c0021cd4:	b8 04 00 00 00       	mov    eax,0x4
c0021cd9:	eb 5c                	jmp    c0021d37 <FAT::unlink(char const*)+0x73>
c0021cdb:	83 ec 08             	sub    esp,0x8
c0021cde:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ce5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ce9:	50                   	push   eax
c0021cea:	e8 1d eb fd ff       	call   c000080c <strcpy>
c0021cef:	83 c4 10             	add    esp,0x10
c0021cf2:	83 ec 08             	sub    esp,0x8
c0021cf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cf9:	50                   	push   eax
c0021cfa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021d01:	e8 ce fc ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021d06:	83 c4 10             	add    esp,0x10
c0021d09:	83 ec 0c             	sub    esp,0xc
c0021d0c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d10:	50                   	push   eax
c0021d11:	e8 8a 47 fe ff       	call   c00064a0 <f_unlink>
c0021d16:	83 c4 10             	add    esp,0x10
c0021d19:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021d20:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021d27:	85 c0                	test   eax,eax
c0021d29:	75 07                	jne    c0021d32 <FAT::unlink(char const*)+0x6e>
c0021d2b:	b8 00 00 00 00       	mov    eax,0x0
c0021d30:	eb 05                	jmp    c0021d37 <FAT::unlink(char const*)+0x73>
c0021d32:	b8 01 00 00 00       	mov    eax,0x1
c0021d37:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d3d:	c3                   	ret    

c0021d3e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021d3e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021d44:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021d4b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021d52:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021d56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021d5a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021d62:	75 0a                	jne    c0021d6e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021d64:	b8 04 00 00 00       	mov    eax,0x4
c0021d69:	e9 1c 01 00 00       	jmp    c0021e8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021d6e:	83 ec 08             	sub    esp,0x8
c0021d71:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021d78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d7c:	50                   	push   eax
c0021d7d:	e8 8a ea fd ff       	call   c000080c <strcpy>
c0021d82:	83 c4 10             	add    esp,0x10
c0021d85:	83 ec 08             	sub    esp,0x8
c0021d88:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021d8c:	50                   	push   eax
c0021d8d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021d94:	e8 3b fc ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021d99:	83 c4 10             	add    esp,0x10
c0021d9c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021da4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021dac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021db1:	83 e0 01             	and    eax,0x1
c0021db4:	74 08                	je     c0021dbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021db6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021dbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021dc3:	83 e0 02             	and    eax,0x2
c0021dc6:	74 08                	je     c0021dd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021dc8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021dd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021dd5:	83 e0 04             	and    eax,0x4
c0021dd8:	74 08                	je     c0021de2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021dda:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021de2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021de7:	83 e0 08             	and    eax,0x8
c0021dea:	74 08                	je     c0021df4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021dec:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021df4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021df9:	83 e0 01             	and    eax,0x1
c0021dfc:	74 08                	je     c0021e06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021dfe:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021e06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e0b:	83 e0 02             	and    eax,0x2
c0021e0e:	74 08                	je     c0021e18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021e10:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021e18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e1d:	83 e0 04             	and    eax,0x4
c0021e20:	74 08                	je     c0021e2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021e22:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021e2a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e2f:	83 e0 08             	and    eax,0x8
c0021e32:	74 08                	je     c0021e3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021e34:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021e3c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021e43:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021e4a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021e52:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021e5a:	83 ec 04             	sub    esp,0x4
c0021e5d:	52                   	push   edx
c0021e5e:	50                   	push   eax
c0021e5f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021e63:	50                   	push   eax
c0021e64:	e8 d9 4c fe ff       	call   c0006b42 <f_chmod>
c0021e69:	83 c4 10             	add    esp,0x10
c0021e6c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021e73:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021e7a:	85 c0                	test   eax,eax
c0021e7c:	75 07                	jne    c0021e85 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021e7e:	b8 00 00 00 00       	mov    eax,0x0
c0021e83:	eb 05                	jmp    c0021e8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021e85:	b8 01 00 00 00       	mov    eax,0x1
c0021e8a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021e90:	c3                   	ret    
c0021e91:	90                   	nop

c0021e92 <FAT::rename(char const*, char const*)>:
c0021e92:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021e98:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021ea0:	74 0a                	je     c0021eac <FAT::rename(char const*, char const*)+0x1a>
c0021ea2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021eaa:	75 0a                	jne    c0021eb6 <FAT::rename(char const*, char const*)+0x24>
c0021eac:	b8 04 00 00 00       	mov    eax,0x4
c0021eb1:	e9 98 00 00 00       	jmp    c0021f4e <FAT::rename(char const*, char const*)+0xbc>
c0021eb6:	83 ec 08             	sub    esp,0x8
c0021eb9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021ec0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021ec7:	50                   	push   eax
c0021ec8:	e8 3f e9 fd ff       	call   c000080c <strcpy>
c0021ecd:	83 c4 10             	add    esp,0x10
c0021ed0:	83 ec 08             	sub    esp,0x8
c0021ed3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021eda:	50                   	push   eax
c0021edb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021ee2:	e8 ed fa ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021ee7:	83 c4 10             	add    esp,0x10
c0021eea:	83 ec 08             	sub    esp,0x8
c0021eed:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021ef4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ef8:	50                   	push   eax
c0021ef9:	e8 0e e9 fd ff       	call   c000080c <strcpy>
c0021efe:	83 c4 10             	add    esp,0x10
c0021f01:	83 ec 08             	sub    esp,0x8
c0021f04:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f08:	50                   	push   eax
c0021f09:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021f10:	e8 bf fa ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021f15:	83 c4 10             	add    esp,0x10
c0021f18:	83 ec 08             	sub    esp,0x8
c0021f1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f1f:	50                   	push   eax
c0021f20:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021f27:	50                   	push   eax
c0021f28:	e8 22 49 fe ff       	call   c000684f <f_rename>
c0021f2d:	83 c4 10             	add    esp,0x10
c0021f30:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021f37:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021f3e:	85 c0                	test   eax,eax
c0021f40:	75 07                	jne    c0021f49 <FAT::rename(char const*, char const*)+0xb7>
c0021f42:	b8 00 00 00 00       	mov    eax,0x0
c0021f47:	eb 05                	jmp    c0021f4e <FAT::rename(char const*, char const*)+0xbc>
c0021f49:	b8 01 00 00 00       	mov    eax,0x1
c0021f4e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021f54:	c3                   	ret    
c0021f55:	90                   	nop

c0021f56 <FAT::mkdir(char const*)>:
c0021f56:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f5c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021f64:	75 07                	jne    c0021f6d <FAT::mkdir(char const*)+0x17>
c0021f66:	b8 04 00 00 00       	mov    eax,0x4
c0021f6b:	eb 5c                	jmp    c0021fc9 <FAT::mkdir(char const*)+0x73>
c0021f6d:	83 ec 08             	sub    esp,0x8
c0021f70:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021f77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f7b:	50                   	push   eax
c0021f7c:	e8 8b e8 fd ff       	call   c000080c <strcpy>
c0021f81:	83 c4 10             	add    esp,0x10
c0021f84:	83 ec 08             	sub    esp,0x8
c0021f87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f8b:	50                   	push   eax
c0021f8c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021f93:	e8 3c fa ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0021f98:	83 c4 10             	add    esp,0x10
c0021f9b:	83 ec 0c             	sub    esp,0xc
c0021f9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fa2:	50                   	push   eax
c0021fa3:	e8 7b 46 fe ff       	call   c0006623 <f_mkdir>
c0021fa8:	83 c4 10             	add    esp,0x10
c0021fab:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021fb2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021fb9:	85 c0                	test   eax,eax
c0021fbb:	75 07                	jne    c0021fc4 <FAT::mkdir(char const*)+0x6e>
c0021fbd:	b8 00 00 00 00       	mov    eax,0x0
c0021fc2:	eb 05                	jmp    c0021fc9 <FAT::mkdir(char const*)+0x73>
c0021fc4:	b8 01 00 00 00       	mov    eax,0x1
c0021fc9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fcf:	c3                   	ret    

c0021fd0 <FAT::exists(char const*)>:
c0021fd0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021fd6:	83 ec 08             	sub    esp,0x8
c0021fd9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021fe0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021fe4:	50                   	push   eax
c0021fe5:	e8 22 e8 fd ff       	call   c000080c <strcpy>
c0021fea:	83 c4 10             	add    esp,0x10
c0021fed:	83 ec 08             	sub    esp,0x8
c0021ff0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021ff4:	50                   	push   eax
c0021ff5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021ffc:	e8 d3 f9 ff ff       	call   c00219d4 <FAT::fixFilepath(char*)>
c0022001:	83 c4 10             	add    esp,0x10
c0022004:	83 ec 08             	sub    esp,0x8
c0022007:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002200e:	50                   	push   eax
c002200f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0022013:	50                   	push   eax
c0022014:	e8 35 41 fe ff       	call   c000614e <f_stat>
c0022019:	83 c4 10             	add    esp,0x10
c002201c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0022023:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002202a:	85 c0                	test   eax,eax
c002202c:	75 04                	jne    c0022032 <FAT::exists(char const*)+0x62>
c002202e:	b0 01                	mov    al,0x1
c0022030:	eb 02                	jmp    c0022034 <FAT::exists(char const*)+0x64>
c0022032:	b0 00                	mov    al,0x0
c0022034:	81 c4 2c 02 00 00    	add    esp,0x22c
c002203a:	c3                   	ret    
c002203b:	90                   	nop

c002203c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002203c:	b8 08 00 00 00       	mov    eax,0x8
c0022041:	c3                   	ret    

c0022042 <ISO9660::seek(void*, unsigned long long)>:
c0022042:	53                   	push   ebx
c0022043:	b8 04 00 00 00       	mov    eax,0x4
c0022048:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002204c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022050:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022054:	85 d2                	test   edx,edx
c0022056:	74 17                	je     c002206f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0022058:	89 c8                	mov    eax,ecx
c002205a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002205d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0022060:	b8 01 00 00 00       	mov    eax,0x1
c0022065:	73 08                	jae    c002206f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0022067:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002206a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002206d:	31 c0                	xor    eax,eax
c002206f:	5b                   	pop    ebx
c0022070:	c3                   	ret    
c0022071:	90                   	nop

c0022072 <ISO9660::tell(void*, unsigned long long*)>:
c0022072:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022076:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002207a:	85 d2                	test   edx,edx
c002207c:	74 12                	je     c0022090 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002207e:	85 c0                	test   eax,eax
c0022080:	74 0e                	je     c0022090 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0022082:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0022085:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0022088:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002208b:	89 10                	mov    DWORD PTR [eax],edx
c002208d:	31 c0                	xor    eax,eax
c002208f:	c3                   	ret    
c0022090:	b8 04 00 00 00       	mov    eax,0x4
c0022095:	c3                   	ret    

c0022096 <ISO9660::getName()>:
c0022096:	b8 d4 d9 02 c0       	mov    eax,0xc002d9d4
c002209b:	c3                   	ret    

c002209c <ISO9660::stat(void*, unsigned long long*)>:
c002209c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220a4:	85 d2                	test   edx,edx
c00220a6:	74 12                	je     c00220ba <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00220a8:	85 c0                	test   eax,eax
c00220aa:	74 0e                	je     c00220ba <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00220ac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00220af:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00220b2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00220b5:	89 10                	mov    DWORD PTR [eax],edx
c00220b7:	31 c0                	xor    eax,eax
c00220b9:	c3                   	ret    
c00220ba:	b8 04 00 00 00       	mov    eax,0x4
c00220bf:	c3                   	ret    

c00220c0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00220c0:	b8 01 00 00 00       	mov    eax,0x1
c00220c5:	c3                   	ret    

c00220c6 <ISO9660::unlink(char const*)>:
c00220c6:	b8 01 00 00 00       	mov    eax,0x1
c00220cb:	c3                   	ret    

c00220cc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00220cc:	b8 01 00 00 00       	mov    eax,0x1
c00220d1:	c3                   	ret    

c00220d2 <ISO9660::rename(char const*, char const*)>:
c00220d2:	b8 01 00 00 00       	mov    eax,0x1
c00220d7:	c3                   	ret    

c00220d8 <ISO9660::mkdir(char const*)>:
c00220d8:	b8 01 00 00 00       	mov    eax,0x1
c00220dd:	c3                   	ret    

c00220de <ISO9660::close(void*)>:
c00220de:	83 ec 0c             	sub    esp,0xc
c00220e1:	b8 04 00 00 00       	mov    eax,0x4
c00220e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220ea:	85 d2                	test   edx,edx
c00220ec:	74 0e                	je     c00220fc <ISO9660::close(void*)+0x1e>
c00220ee:	83 ec 0c             	sub    esp,0xc
c00220f1:	52                   	push   edx
c00220f2:	e8 a5 d7 fe ff       	call   c000f89c <free>
c00220f7:	83 c4 10             	add    esp,0x10
c00220fa:	31 c0                	xor    eax,eax
c00220fc:	83 c4 0c             	add    esp,0xc
c00220ff:	c3                   	ret    

c0022100 <ISO9660::closeDir(void*)>:
c0022100:	83 ec 0c             	sub    esp,0xc
c0022103:	b8 04 00 00 00       	mov    eax,0x4
c0022108:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002210c:	85 d2                	test   edx,edx
c002210e:	74 0e                	je     c002211e <ISO9660::closeDir(void*)+0x1e>
c0022110:	83 ec 0c             	sub    esp,0xc
c0022113:	52                   	push   edx
c0022114:	e8 83 d7 fe ff       	call   c000f89c <free>
c0022119:	83 c4 10             	add    esp,0x10
c002211c:	31 c0                	xor    eax,eax
c002211e:	83 c4 0c             	add    esp,0xc
c0022121:	c3                   	ret    

c0022122 <ISO9660::~ISO9660()>:
c0022122:	83 ec 0c             	sub    esp,0xc
c0022125:	ba 38 da 02 c0       	mov    edx,0xc002da38
c002212a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212e:	89 10                	mov    DWORD PTR [eax],edx
c0022130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022134:	83 ec 0c             	sub    esp,0xc
c0022137:	50                   	push   eax
c0022138:	e8 43 10 ff ff       	call   c0013180 <Filesystem::~Filesystem()>
c002213d:	83 c4 10             	add    esp,0x10
c0022140:	90                   	nop
c0022141:	83 c4 0c             	add    esp,0xc
c0022144:	c3                   	ret    
c0022145:	90                   	nop

c0022146 <ISO9660::~ISO9660()>:
c0022146:	83 ec 0c             	sub    esp,0xc
c0022149:	83 ec 0c             	sub    esp,0xc
c002214c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022150:	e8 cd ff ff ff       	call   c0022122 <ISO9660::~ISO9660()>
c0022155:	83 c4 10             	add    esp,0x10
c0022158:	83 ec 08             	sub    esp,0x8
c002215b:	6a 08                	push   0x8
c002215d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022161:	e8 0b 0c ff ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0022166:	83 c4 10             	add    esp,0x10
c0022169:	83 c4 0c             	add    esp,0xc
c002216c:	c3                   	ret    

c002216d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002216d:	55                   	push   ebp
c002216e:	31 c9                	xor    ecx,ecx
c0022170:	57                   	push   edi
c0022171:	56                   	push   esi
c0022172:	53                   	push   ebx
c0022173:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0022177:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002217b:	89 eb                	mov    ebx,ebp
c002217d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0022181:	39 ce                	cmp    esi,ecx
c0022183:	7e 17                	jle    c002219c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0022185:	31 d2                	xor    edx,edx
c0022187:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002218b:	7d 13                	jge    c00221a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002218d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022191:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022194:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0022197:	75 0d                	jne    c00221a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0022199:	42                   	inc    edx
c002219a:	eb eb                	jmp    c0022187 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002219c:	31 c0                	xor    eax,eax
c002219e:	eb 0a                	jmp    c00221aa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00221a0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00221a4:	eb 04                	jmp    c00221aa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00221a6:	41                   	inc    ecx
c00221a7:	43                   	inc    ebx
c00221a8:	eb d7                	jmp    c0022181 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00221aa:	5b                   	pop    ebx
c00221ab:	5e                   	pop    esi
c00221ac:	5f                   	pop    edi
c00221ad:	5d                   	pop    ebp
c00221ae:	c3                   	ret    

c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00221af:	57                   	push   edi
c00221b0:	56                   	push   esi
c00221b1:	53                   	push   ebx
c00221b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00221ba:	39 0d a0 2c 03 c0    	cmp    DWORD PTR ds:0xc0032ca0,ecx
c00221c0:	75 08                	jne    c00221ca <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00221c2:	38 05 f4 ea 02 c0    	cmp    BYTE PTR ds:0xc002eaf4,al
c00221c8:	74 2b                	je     c00221f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	a2 f4 ea 02 c0       	mov    ds:0xc002eaf4,al
c00221d2:	68 c0 2c 03 c0       	push   0xc0032cc0
c00221d7:	0f be c0             	movsx  eax,al
c00221da:	6a 01                	push   0x1
c00221dc:	89 0d a0 2c 03 c0    	mov    DWORD PTR ds:0xc0032ca0,ecx
c00221e2:	31 db                	xor    ebx,ebx
c00221e4:	53                   	push   ebx
c00221e5:	51                   	push   ecx
c00221e6:	ff 34 85 7c fa 02 c0 	push   DWORD PTR [eax*4-0x3ffd0584]
c00221ed:	e8 dc 45 ff ff       	call   c00167ce <LogicalDisk::read(unsigned long long, int, void*)>
c00221f2:	83 c4 20             	add    esp,0x20
c00221f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00221f9:	be c0 2c 03 c0       	mov    esi,0xc0032cc0
c00221fe:	b9 00 08 00 00       	mov    ecx,0x800
c0022203:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022205:	5b                   	pop    ebx
c0022206:	5e                   	pop    esi
c0022207:	5f                   	pop    edi
c0022208:	c3                   	ret    
c0022209:	90                   	nop

c002220a <ISO9660::tryMount(LogicalDisk*, int)>:
c002220a:	81 ec 10 08 00 00    	sub    esp,0x810
c0022210:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0022217:	83 c0 41             	add    eax,0x41
c002221a:	0f be c0             	movsx  eax,al
c002221d:	50                   	push   eax
c002221e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022222:	50                   	push   eax
c0022223:	6a 10                	push   0x10
c0022225:	e8 85 ff ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002222a:	83 c4 10             	add    esp,0x10
c002222d:	31 c0                	xor    eax,eax
c002222f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022234:	75 1d                	jne    c0022253 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022236:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002223b:	75 16                	jne    c0022253 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002223d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0022242:	75 0f                	jne    c0022253 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022244:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0022249:	75 08                	jne    c0022253 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002224b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0022250:	0f 94 c0             	sete   al
c0022253:	81 c4 0c 08 00 00    	add    esp,0x80c
c0022259:	c3                   	ret    

c002225a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002225a:	55                   	push   ebp
c002225b:	57                   	push   edi
c002225c:	56                   	push   esi
c002225d:	53                   	push   ebx
c002225e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022264:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002226b:	85 ed                	test   ebp,ebp
c002226d:	0f 84 da 01 00 00    	je     c002244d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0022273:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002227b:	0f 84 cc 01 00 00    	je     c002244d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0022281:	b8 01 00 00 00       	mov    eax,0x1
c0022286:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002228a:	0f 85 c2 01 00 00    	jne    c0022452 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022290:	31 d2                	xor    edx,edx
c0022292:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0022299:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002229c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002229f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00222a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00222a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00222a9:	01 c8                	add    eax,ecx
c00222ab:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00222ae:	11 da                	adc    edx,ebx
c00222b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00222b4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00222b8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00222bc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00222c0:	19 d7                	sbb    edi,edx
c00222c2:	72 11                	jb     c00222d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00222c4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00222c7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00222cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222d3:	eb 0c                	jmp    c00222e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00222d5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00222d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00222dd:	29 ce                	sub    esi,ecx
c00222df:	19 df                	sbb    edi,ebx
c00222e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00222e4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00222e7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00222eb:	c1 e0 0b             	shl    eax,0xb
c00222ee:	01 c8                	add    eax,ecx
c00222f0:	11 da                	adc    edx,ebx
c00222f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00222f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00222f9:	51                   	push   ecx
c00222fa:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222fe:	50                   	push   eax
c00222ff:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022303:	53                   	push   ebx
c0022304:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002230c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022310:	50                   	push   eax
c0022311:	e8 99 fe ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022316:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022319:	b8 00 08 00 00       	mov    eax,0x800
c002231e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022324:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022328:	29 d0                	sub    eax,edx
c002232a:	83 c4 10             	add    esp,0x10
c002232d:	89 f9                	mov    ecx,edi
c002232f:	39 c6                	cmp    esi,eax
c0022331:	83 d9 00             	sbb    ecx,0x0
c0022334:	7d 1b                	jge    c0022351 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0022336:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002233b:	75 12                	jne    c002234f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002233d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022344:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002234a:	e9 fa 00 00 00       	jmp    c0022449 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002234f:	89 f0                	mov    eax,esi
c0022351:	01 d3                	add    ebx,edx
c0022353:	31 d2                	xor    edx,edx
c0022355:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022359:	39 c2                	cmp    edx,eax
c002235b:	7d 14                	jge    c0022371 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002235d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022364:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022368:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002236b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002236e:	42                   	inc    edx
c002236f:	eb e8                	jmp    c0022359 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0022371:	89 c2                	mov    edx,eax
c0022373:	85 c0                	test   eax,eax
c0022375:	79 02                	jns    c0022379 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0022377:	31 d2                	xor    edx,edx
c0022379:	01 c2                	add    edx,eax
c002237b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002237e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0022385:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0022389:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002238d:	99                   	cdq    
c002238e:	01 c1                	add    ecx,eax
c0022390:	11 d3                	adc    ebx,edx
c0022392:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0022396:	29 c6                	sub    esi,eax
c0022398:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002239c:	19 d7                	sbb    edi,edx
c002239e:	89 34 24             	mov    DWORD PTR [esp],esi
c00223a1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00223a5:	b8 ff 07 00 00       	mov    eax,0x7ff
c00223aa:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00223ad:	b8 00 00 00 00       	mov    eax,0x0
c00223b2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00223b6:	7d 43                	jge    c00223fb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00223b8:	52                   	push   edx
c00223b9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00223bd:	50                   	push   eax
c00223be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00223c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00223c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00223ca:	0f ac d0 0b          	shrd   eax,edx,0xb
c00223ce:	50                   	push   eax
c00223cf:	e8 db fd ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223d4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00223dc:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00223e1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00223e9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00223f1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00223f6:	83 c4 10             	add    esp,0x10
c00223f9:	eb aa                	jmp    c00223a5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00223fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ff:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022402:	74 2a                	je     c002242e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0022404:	50                   	push   eax
c0022405:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022409:	50                   	push   eax
c002240a:	8d 74 24 28          	lea    esi,[esp+0x28]
c002240e:	56                   	push   esi
c002240f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022413:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022417:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002241b:	51                   	push   ecx
c002241c:	e8 8e fd ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022421:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022429:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002242b:	83 c4 10             	add    esp,0x10
c002242e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022435:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022439:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002243d:	89 18                	mov    DWORD PTR [eax],ebx
c002243f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022443:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022446:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022449:	31 c0                	xor    eax,eax
c002244b:	eb 05                	jmp    c0022452 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002244d:	b8 04 00 00 00       	mov    eax,0x4
c0022452:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022458:	5b                   	pop    ebx
c0022459:	5e                   	pop    esi
c002245a:	5f                   	pop    edi
c002245b:	5d                   	pop    ebp
c002245c:	c3                   	ret    
c002245d:	90                   	nop

c002245e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002245e:	55                   	push   ebp
c002245f:	57                   	push   edi
c0022460:	56                   	push   esi
c0022461:	53                   	push   ebx
c0022462:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022468:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002246f:	85 ed                	test   ebp,ebp
c0022471:	0f 84 51 02 00 00    	je     c00226c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022477:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002247f:	0f 84 43 02 00 00    	je     c00226c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022485:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022488:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002248b:	75 0a                	jne    c0022497 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002248d:	b8 07 00 00 00       	mov    eax,0x7
c0022492:	e9 36 02 00 00       	jmp    c00226cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0022497:	50                   	push   eax
c0022498:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002249c:	50                   	push   eax
c002249d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00224a4:	53                   	push   ebx
c00224a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00224a8:	c1 e0 0b             	shl    eax,0xb
c00224ab:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00224ae:	c1 e8 0b             	shr    eax,0xb
c00224b1:	50                   	push   eax
c00224b2:	e8 f8 fc ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224ba:	83 c4 10             	add    esp,0x10
c00224bd:	89 c1                	mov    ecx,eax
c00224bf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00224c2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00224c8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00224cb:	84 db                	test   bl,bl
c00224cd:	0f 85 8b 00 00 00    	jne    c002255e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00224d3:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00224d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00224dc:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00224e2:	29 c6                	sub    esi,eax
c00224e4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00224e8:	89 f3                	mov    ebx,esi
c00224ea:	89 f1                	mov    ecx,esi
c00224ec:	c1 fb 1f             	sar    ebx,0x1f
c00224ef:	01 f0                	add    eax,esi
c00224f1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00224f4:	11 da                	adc    edx,ebx
c00224f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00224f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00224fd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022500:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022503:	89 d8                	mov    eax,ebx
c0022505:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0022509:	ba 00 00 00 00       	mov    edx,0x0
c002250e:	19 f8                	sbb    eax,edi
c0022510:	b8 00 00 00 00       	mov    eax,0x0
c0022515:	73 08                	jae    c002251f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022517:	89 f0                	mov    eax,esi
c0022519:	89 fa                	mov    edx,edi
c002251b:	29 c8                	sub    eax,ecx
c002251d:	19 da                	sbb    edx,ebx
c002251f:	89 d7                	mov    edi,edx
c0022521:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022524:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022527:	09 c7                	or     edi,eax
c0022529:	0f 84 5e ff ff ff    	je     c002248d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002252f:	57                   	push   edi
c0022530:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022534:	50                   	push   eax
c0022535:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002253c:	53                   	push   ebx
c002253d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022540:	c1 e0 0b             	shl    eax,0xb
c0022543:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0022547:	c1 e8 0b             	shr    eax,0xb
c002254a:	50                   	push   eax
c002254b:	e8 5f fc ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022550:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022553:	83 c4 10             	add    esp,0x10
c0022556:	25 ff 07 00 00       	and    eax,0x7ff
c002255b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002255e:	31 ff                	xor    edi,edi
c0022560:	56                   	push   esi
c0022561:	6a 28                	push   0x28
c0022563:	6a 00                	push   0x0
c0022565:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022569:	50                   	push   eax
c002256a:	e8 e1 e1 fd ff       	call   c0000750 <memset>
c002256f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022572:	25 ff 07 00 00       	and    eax,0x7ff
c0022577:	89 c6                	mov    esi,eax
c0022579:	83 c6 21             	add    esi,0x21
c002257c:	83 d7 00             	adc    edi,0x0
c002257f:	83 c4 10             	add    esp,0x10
c0022582:	31 c9                	xor    ecx,ecx
c0022584:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002258b:	83 f9 28             	cmp    ecx,0x28
c002258e:	88 04 24             	mov    BYTE PTR [esp],al
c0022591:	0f 94 c2             	sete   dl
c0022594:	88 d0                	mov    al,dl
c0022596:	ba ff 07 00 00       	mov    edx,0x7ff
c002259b:	39 f2                	cmp    edx,esi
c002259d:	ba 00 00 00 00       	mov    edx,0x0
c00225a2:	19 fa                	sbb    edx,edi
c00225a4:	0f 92 c2             	setb   dl
c00225a7:	09 c2                	or     edx,eax
c00225a9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00225ad:	0f 94 c0             	sete   al
c00225b0:	08 d0                	or     al,dl
c00225b2:	75 16                	jne    c00225ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00225b4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00225b8:	74 10                	je     c00225ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00225ba:	8a 04 24             	mov    al,BYTE PTR [esp]
c00225bd:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00225c1:	41                   	inc    ecx
c00225c2:	83 c6 01             	add    esi,0x1
c00225c5:	83 d7 00             	adc    edi,0x0
c00225c8:	eb ba                	jmp    c0022584 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00225ca:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00225d1:	83 ec 0c             	sub    esp,0xc
c00225d4:	8d 74 24 24          	lea    esi,[esp+0x24]
c00225d8:	56                   	push   esi
c00225d9:	e8 8e e1 fd ff       	call   c000076c <strlen>
c00225de:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00225e5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00225e9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00225f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225f4:	5a                   	pop    edx
c00225f5:	25 ff 07 00 00       	and    eax,0x7ff
c00225fa:	59                   	pop    ecx
c00225fb:	01 f8                	add    eax,edi
c00225fd:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022603:	83 e0 02             	and    eax,0x2
c0022606:	3c 01                	cmp    al,0x1
c0022608:	19 c0                	sbb    eax,eax
c002260a:	83 c0 02             	add    eax,0x2
c002260d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022611:	56                   	push   esi
c0022612:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022616:	50                   	push   eax
c0022617:	e8 f0 e1 fd ff       	call   c000080c <strcpy>
c002261c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022620:	83 c4 10             	add    esp,0x10
c0022623:	84 c0                	test   al,al
c0022625:	75 21                	jne    c0022648 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022627:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002262f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022637:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002263f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022646:	eb 28                	jmp    c0022670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022648:	fe c8                	dec    al
c002264a:	75 24                	jne    c0022670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002264c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022654:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002265c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022664:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002266b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022670:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022674:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002267b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022682:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022684:	0f b6 f3             	movzx  esi,bl
c0022687:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002268e:	31 db                	xor    ebx,ebx
c0022690:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022696:	89 df                	mov    edi,ebx
c0022698:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002269b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002269e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00226a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00226a4:	39 c6                	cmp    esi,eax
c00226a6:	19 d7                	sbb    edi,edx
c00226a8:	72 10                	jb     c00226ba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00226aa:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00226b1:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00226b8:	eb 0a                	jmp    c00226c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00226ba:	29 f0                	sub    eax,esi
c00226bc:	19 da                	sbb    edx,ebx
c00226be:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00226c1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00226c4:	31 c0                	xor    eax,eax
c00226c6:	eb 05                	jmp    c00226cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00226c8:	b8 04 00 00 00       	mov    eax,0x4
c00226cd:	81 c4 5c 09 00 00    	add    esp,0x95c
c00226d3:	5b                   	pop    ebx
c00226d4:	5e                   	pop    esi
c00226d5:	5f                   	pop    edi
c00226d6:	5d                   	pop    ebp
c00226d7:	c3                   	ret    

c00226d8 <readRoot(unsigned int*, unsigned int*, char)>:
c00226d8:	57                   	push   edi
c00226d9:	56                   	push   esi
c00226da:	81 ec 38 08 00 00    	sub    esp,0x838
c00226e0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00226e8:	50                   	push   eax
c00226e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00226ed:	50                   	push   eax
c00226ee:	6a 10                	push   0x10
c00226f0:	e8 ba fa ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00226f5:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00226fc:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022700:	b9 22 00 00 00       	mov    ecx,0x22
c0022705:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022707:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002270e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022712:	89 10                	mov    DWORD PTR [eax],edx
c0022714:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002271b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002271f:	89 10                	mov    DWORD PTR [eax],edx
c0022721:	81 c4 44 08 00 00    	add    esp,0x844
c0022727:	b0 01                	mov    al,0x1
c0022729:	5e                   	pop    esi
c002272a:	5f                   	pop    edi
c002272b:	c3                   	ret    

c002272c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002272c:	55                   	push   ebp
c002272d:	57                   	push   edi
c002272e:	56                   	push   esi
c002272f:	53                   	push   ebx
c0022730:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022736:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002273d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022744:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022748:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002274c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022750:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022754:	75 03                	jne    c0022759 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022756:	83 c3 02             	add    ebx,0x2
c0022759:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002275c:	75 03                	jne    c0022761 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002275e:	43                   	inc    ebx
c002275f:	eb f8                	jmp    c0022759 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022761:	51                   	push   ecx
c0022762:	68 00 01 00 00       	push   0x100
c0022767:	6a 00                	push   0x0
c0022769:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002276d:	50                   	push   eax
c002276e:	e8 dd df fd ff       	call   c0000750 <memset>
c0022773:	83 c4 10             	add    esp,0x10
c0022776:	31 d2                	xor    edx,edx
c0022778:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002277b:	84 c0                	test   al,al
c002277d:	74 21                	je     c00227a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002277f:	3c 2f                	cmp    al,0x2f
c0022781:	75 0b                	jne    c002278e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022783:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022787:	bd 01 00 00 00       	mov    ebp,0x1
c002278c:	eb 14                	jmp    c00227a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002278e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022791:	80 f9 19             	cmp    cl,0x19
c0022794:	77 03                	ja     c0022799 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022796:	83 e8 20             	sub    eax,0x20
c0022799:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002279d:	42                   	inc    edx
c002279e:	eb d8                	jmp    c0022778 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00227a0:	31 ed                	xor    ebp,ebp
c00227a2:	83 ec 0c             	sub    esp,0xc
c00227a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00227ac:	e8 db d0 fe ff       	call   c000f88c <malloc>
c00227b1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00227b8:	89 c6                	mov    esi,eax
c00227ba:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00227c0:	c1 ef 0b             	shr    edi,0xb
c00227c3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00227ca:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00227ce:	83 c4 10             	add    esp,0x10
c00227d1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00227d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00227da:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00227e1:	74 28                	je     c002280b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00227e3:	52                   	push   edx
c00227e4:	57                   	push   edi
c00227e5:	50                   	push   eax
c00227e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00227ea:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00227f1:	e8 b9 f9 ff ff       	call   c00221af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00227f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00227fa:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022801:	05 00 08 00 00       	add    eax,0x800
c0022806:	83 c4 10             	add    esp,0x10
c0022809:	eb cb                	jmp    c00227d6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002280b:	83 ec 0c             	sub    esp,0xc
c002280e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022812:	57                   	push   edi
c0022813:	e8 54 df fd ff       	call   c000076c <strlen>
c0022818:	50                   	push   eax
c0022819:	57                   	push   edi
c002281a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022821:	56                   	push   esi
c0022822:	e8 46 f9 ff ff       	call   c002216d <__memmem(unsigned char*, int, unsigned char*, int)>
c0022827:	83 c4 20             	add    esp,0x20
c002282a:	85 c0                	test   eax,eax
c002282c:	75 13                	jne    c0022841 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002282e:	83 ec 0c             	sub    esp,0xc
c0022831:	56                   	push   esi
c0022832:	e8 65 d0 fe ff       	call   c000f89c <free>
c0022837:	83 c4 10             	add    esp,0x10
c002283a:	31 c0                	xor    eax,eax
c002283c:	e9 b3 00 00 00       	jmp    c00228f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022841:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022845:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022849:	c1 e7 08             	shl    edi,0x8
c002284c:	c1 e2 10             	shl    edx,0x10
c002284f:	09 d7                	or     edi,edx
c0022851:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022855:	09 d7                	or     edi,edx
c0022857:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002285b:	c1 e2 18             	shl    edx,0x18
c002285e:	09 d7                	or     edi,edx
c0022860:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022864:	89 d1                	mov    ecx,edx
c0022866:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002286a:	c1 e1 08             	shl    ecx,0x8
c002286d:	c1 e2 10             	shl    edx,0x10
c0022870:	09 ca                	or     edx,ecx
c0022872:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022876:	09 ca                	or     edx,ecx
c0022878:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002287c:	c1 e1 18             	shl    ecx,0x18
c002287f:	09 ca                	or     edx,ecx
c0022881:	89 e9                	mov    ecx,ebp
c0022883:	84 c9                	test   cl,cl
c0022885:	74 3c                	je     c00228c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022887:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002288b:	83 ec 0c             	sub    esp,0xc
c002288e:	56                   	push   esi
c002288f:	e8 08 d0 fe ff       	call   c000f89c <free>
c0022894:	83 c4 0c             	add    esp,0xc
c0022897:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002289e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00228a3:	50                   	push   eax
c00228a4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00228ab:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00228b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00228b6:	52                   	push   edx
c00228b7:	57                   	push   edi
c00228b8:	53                   	push   ebx
c00228b9:	e8 6e fe ff ff       	call   c002272c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00228be:	83 c4 20             	add    esp,0x20
c00228c1:	eb 31                	jmp    c00228f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00228c3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00228c6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00228cd:	d0 e8                	shr    al,1
c00228cf:	89 3b                	mov    DWORD PTR [ebx],edi
c00228d1:	83 e0 01             	and    eax,0x1
c00228d4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00228db:	83 ec 0c             	sub    esp,0xc
c00228de:	89 13                	mov    DWORD PTR [ebx],edx
c00228e0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00228e7:	89 03                	mov    DWORD PTR [ebx],eax
c00228e9:	56                   	push   esi
c00228ea:	e8 ad cf fe ff       	call   c000f89c <free>
c00228ef:	83 c4 10             	add    esp,0x10
c00228f2:	b0 01                	mov    al,0x1
c00228f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00228fa:	5b                   	pop    ebx
c00228fb:	5e                   	pop    esi
c00228fc:	5f                   	pop    edi
c00228fd:	5d                   	pop    ebp
c00228fe:	c3                   	ret    

c00228ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00228ff:	55                   	push   ebp
c0022900:	57                   	push   edi
c0022901:	56                   	push   esi
c0022902:	53                   	push   ebx
c0022903:	83 ec 20             	sub    esp,0x20
c0022906:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002290a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002290e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022912:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002291a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022922:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022927:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002292d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022933:	57                   	push   edi
c0022934:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022938:	50                   	push   eax
c0022939:	8d 44 24 14          	lea    eax,[esp+0x14]
c002293d:	50                   	push   eax
c002293e:	e8 95 fd ff ff       	call   c00226d8 <readRoot(unsigned int*, unsigned int*, char)>
c0022943:	5a                   	pop    edx
c0022944:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022948:	e8 1f de fd ff       	call   c000076c <strlen>
c002294d:	83 c4 10             	add    esp,0x10
c0022950:	83 f8 03             	cmp    eax,0x3
c0022953:	77 17                	ja     c002296c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022955:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022959:	89 03                	mov    DWORD PTR [ebx],eax
c002295b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002295f:	89 06                	mov    DWORD PTR [esi],eax
c0022961:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022968:	b0 01                	mov    al,0x1
c002296a:	eb 19                	jmp    c0022985 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002296c:	50                   	push   eax
c002296d:	55                   	push   ebp
c002296e:	57                   	push   edi
c002296f:	56                   	push   esi
c0022970:	53                   	push   ebx
c0022971:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022975:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022979:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002297d:	e8 aa fd ff ff       	call   c002272c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022982:	83 c4 20             	add    esp,0x20
c0022985:	83 c4 1c             	add    esp,0x1c
c0022988:	5b                   	pop    ebx
c0022989:	5e                   	pop    esi
c002298a:	5f                   	pop    edi
c002298b:	5d                   	pop    ebp
c002298c:	c3                   	ret    
c002298d:	90                   	nop

c002298e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002298e:	57                   	push   edi
c002298f:	56                   	push   esi
c0022990:	53                   	push   ebx
c0022991:	83 ec 10             	sub    esp,0x10
c0022994:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022998:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002299c:	85 ff                	test   edi,edi
c002299e:	0f 84 9d 00 00 00    	je     c0022a41 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00229a4:	85 f6                	test   esi,esi
c00229a6:	0f 84 95 00 00 00    	je     c0022a41 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00229ac:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00229b1:	74 17                	je     c00229ca <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00229b3:	83 ec 0c             	sub    esp,0xc
c00229b6:	68 ef d9 02 c0       	push   0xc002d9ef
c00229bb:	e8 91 04 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00229c0:	83 c4 10             	add    esp,0x10
c00229c3:	b8 03 00 00 00       	mov    eax,0x3
c00229c8:	eb 7c                	jmp    c0022a46 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00229ca:	83 ec 0c             	sub    esp,0xc
c00229cd:	6a 1c                	push   0x1c
c00229cf:	e8 b8 ce fe ff       	call   c000f88c <malloc>
c00229d4:	89 07                	mov    DWORD PTR [edi],eax
c00229d6:	89 c3                	mov    ebx,eax
c00229d8:	58                   	pop    eax
c00229d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00229dd:	50                   	push   eax
c00229de:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00229e1:	50                   	push   eax
c00229e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229e6:	50                   	push   eax
c00229e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229eb:	50                   	push   eax
c00229ec:	56                   	push   esi
c00229ed:	e8 0d ff ff ff       	call   c00228ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229f2:	83 c4 20             	add    esp,0x20
c00229f5:	84 c0                	test   al,al
c00229f7:	74 07                	je     c0022a00 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00229f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00229fe:	74 0b                	je     c0022a0b <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022a00:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022a04:	b8 01 00 00 00       	mov    eax,0x1
c0022a09:	eb 3b                	jmp    c0022a46 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a0f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022a13:	89 03                	mov    DWORD PTR [ebx],eax
c0022a15:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a20:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022a27:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022a31:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022a38:	8a 06                	mov    al,BYTE PTR [esi]
c0022a3a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022a3d:	31 c0                	xor    eax,eax
c0022a3f:	eb 05                	jmp    c0022a46 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022a41:	b8 04 00 00 00       	mov    eax,0x4
c0022a46:	83 c4 10             	add    esp,0x10
c0022a49:	5b                   	pop    ebx
c0022a4a:	5e                   	pop    esi
c0022a4b:	5f                   	pop    edi
c0022a4c:	c3                   	ret    
c0022a4d:	90                   	nop

c0022a4e <ISO9660::exists(char const*)>:
c0022a4e:	83 ec 28             	sub    esp,0x28
c0022a51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a55:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022a59:	52                   	push   edx
c0022a5a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022a5d:	52                   	push   edx
c0022a5e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022a62:	52                   	push   edx
c0022a63:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022a67:	52                   	push   edx
c0022a68:	50                   	push   eax
c0022a69:	e8 91 fe ff ff       	call   c00228ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a6e:	83 c4 3c             	add    esp,0x3c
c0022a71:	c3                   	ret    

c0022a72 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022a72:	56                   	push   esi
c0022a73:	53                   	push   ebx
c0022a74:	83 ec 14             	sub    esp,0x14
c0022a77:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022a7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022a7f:	85 db                	test   ebx,ebx
c0022a81:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022a85:	0f 94 c2             	sete   dl
c0022a88:	85 f6                	test   esi,esi
c0022a8a:	0f 94 c0             	sete   al
c0022a8d:	08 c2                	or     dl,al
c0022a8f:	75 68                	jne    c0022af9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022a91:	85 c9                	test   ecx,ecx
c0022a93:	74 64                	je     c0022af9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022a95:	83 ec 0c             	sub    esp,0xc
c0022a98:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022a9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a9f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022aa5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022aac:	50                   	push   eax
c0022aad:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022ab0:	50                   	push   eax
c0022ab1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022ab5:	50                   	push   eax
c0022ab6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022aba:	50                   	push   eax
c0022abb:	51                   	push   ecx
c0022abc:	e8 3e fe ff ff       	call   c00228ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022ac1:	83 c4 20             	add    esp,0x20
c0022ac4:	ba 01 00 00 00       	mov    edx,0x1
c0022ac9:	84 c0                	test   al,al
c0022acb:	74 31                	je     c0022afe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ad1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022ad8:	89 03                	mov    DWORD PTR [ebx],eax
c0022ada:	ba 00 00 00 00       	mov    edx,0x0
c0022adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ae3:	85 c0                	test   eax,eax
c0022ae5:	0f 95 06             	setne  BYTE PTR [esi]
c0022ae8:	74 14                	je     c0022afe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022aea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022af0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022af7:	eb 05                	jmp    c0022afe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022af9:	ba 04 00 00 00       	mov    edx,0x4
c0022afe:	83 c4 14             	add    esp,0x14
c0022b01:	89 d0                	mov    eax,edx
c0022b03:	5b                   	pop    ebx
c0022b04:	5e                   	pop    esi
c0022b05:	c3                   	ret    

c0022b06 <ISO9660::openDir(char const*, void**)>:
c0022b06:	57                   	push   edi
c0022b07:	56                   	push   esi
c0022b08:	53                   	push   ebx
c0022b09:	83 ec 10             	sub    esp,0x10
c0022b0c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022b10:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022b14:	85 ff                	test   edi,edi
c0022b16:	0f 84 95 00 00 00    	je     c0022bb1 <ISO9660::openDir(char const*, void**)+0xab>
c0022b1c:	85 f6                	test   esi,esi
c0022b1e:	0f 84 8d 00 00 00    	je     c0022bb1 <ISO9660::openDir(char const*, void**)+0xab>
c0022b24:	83 ec 0c             	sub    esp,0xc
c0022b27:	6a 1c                	push   0x1c
c0022b29:	e8 5e cd fe ff       	call   c000f88c <malloc>
c0022b2e:	89 07                	mov    DWORD PTR [edi],eax
c0022b30:	89 c3                	mov    ebx,eax
c0022b32:	59                   	pop    ecx
c0022b33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022b37:	50                   	push   eax
c0022b38:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022b3b:	50                   	push   eax
c0022b3c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b40:	50                   	push   eax
c0022b41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b45:	50                   	push   eax
c0022b46:	56                   	push   esi
c0022b47:	e8 b3 fd ff ff       	call   c00228ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022b4c:	83 c4 20             	add    esp,0x20
c0022b4f:	84 c0                	test   al,al
c0022b51:	74 07                	je     c0022b5a <ISO9660::openDir(char const*, void**)+0x54>
c0022b53:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022b58:	75 21                	jne    c0022b7b <ISO9660::openDir(char const*, void**)+0x75>
c0022b5a:	0f b6 c0             	movzx  eax,al
c0022b5d:	52                   	push   edx
c0022b5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022b62:	50                   	push   eax
c0022b63:	68 15 da 02 c0       	push   0xc002da15
c0022b68:	e8 e4 02 ff ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0022b6d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022b71:	83 c4 10             	add    esp,0x10
c0022b74:	b8 01 00 00 00       	mov    eax,0x1
c0022b79:	eb 3b                	jmp    c0022bb6 <ISO9660::openDir(char const*, void**)+0xb0>
c0022b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b7f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022b83:	89 03                	mov    DWORD PTR [ebx],eax
c0022b85:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b90:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022b97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022b9e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022ba1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022ba8:	8a 06                	mov    al,BYTE PTR [esi]
c0022baa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022bad:	31 c0                	xor    eax,eax
c0022baf:	eb 05                	jmp    c0022bb6 <ISO9660::openDir(char const*, void**)+0xb0>
c0022bb1:	b8 04 00 00 00       	mov    eax,0x4
c0022bb6:	83 c4 10             	add    esp,0x10
c0022bb9:	5b                   	pop    ebx
c0022bba:	5e                   	pop    esi
c0022bbb:	5f                   	pop    edi
c0022bbc:	c3                   	ret    
c0022bbd:	90                   	nop

c0022bbe <ISO9660::ISO9660()>:
c0022bbe:	83 ec 0c             	sub    esp,0xc
c0022bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc5:	83 ec 0c             	sub    esp,0xc
c0022bc8:	50                   	push   eax
c0022bc9:	e8 8e 05 ff ff       	call   c001315c <Filesystem::Filesystem()>
c0022bce:	83 c4 10             	add    esp,0x10
c0022bd1:	ba 38 da 02 c0       	mov    edx,0xc002da38
c0022bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bda:	89 10                	mov    DWORD PTR [eax],edx
c0022bdc:	90                   	nop
c0022bdd:	83 c4 0c             	add    esp,0xc
c0022be0:	c3                   	ret    
c0022be1:	90                   	nop

c0022be2 <SoundChannel::~SoundChannel()>:
c0022be2:	83 ec 0c             	sub    esp,0xc
c0022be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022bec:	83 ec 0c             	sub    esp,0xc
c0022bef:	50                   	push   eax
c0022bf0:	e8 a7 cc fe ff       	call   c000f89c <free>
c0022bf5:	83 c4 10             	add    esp,0x10
c0022bf8:	90                   	nop
c0022bf9:	83 c4 0c             	add    esp,0xc
c0022bfc:	c3                   	ret    
c0022bfd:	90                   	nop

c0022bfe <SoundChannel::setSpeed(float)>:
c0022bfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c06:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022c09:	c3                   	ret    

c0022c0a <SoundChannel::getSpeed()>:
c0022c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c0e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022c11:	c3                   	ret    

c0022c12 <SoundChannel::setVolume(int)>:
c0022c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c16:	83 f8 64             	cmp    eax,0x64
c0022c19:	7e 05                	jle    c0022c20 <SoundChannel::setVolume(int)+0xe>
c0022c1b:	b8 64 00 00 00       	mov    eax,0x64
c0022c20:	85 c0                	test   eax,eax
c0022c22:	79 02                	jns    c0022c26 <SoundChannel::setVolume(int)+0x14>
c0022c24:	31 c0                	xor    eax,eax
c0022c26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c2a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022c2d:	c3                   	ret    

c0022c2e <SoundChannel::getVolume()>:
c0022c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c32:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022c35:	c3                   	ret    

c0022c36 <SoundChannel::pause()>:
c0022c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c3a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022c3e:	c3                   	ret    
c0022c3f:	90                   	nop

c0022c40 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022c40:	83 ec 1c             	sub    esp,0x1c
c0022c43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022c47:	e8 ea ff ff ff       	call   c0022c36 <SoundChannel::pause()>
c0022c4c:	83 c4 04             	add    esp,0x4
c0022c4f:	6a 50                	push   0x50
c0022c51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022c55:	e8 b8 ff ff ff       	call   c0022c12 <SoundChannel::setVolume(int)>
c0022c5a:	83 c4 08             	add    esp,0x8
c0022c5d:	a1 d4 da 02 c0       	mov    eax,ds:0xc002dad4
c0022c62:	50                   	push   eax
c0022c63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022c67:	e8 92 ff ff ff       	call   c0022bfe <SoundChannel::setSpeed(float)>
c0022c6c:	83 c4 08             	add    esp,0x8
c0022c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022c77:	89 10                	mov    DWORD PTR [eax],edx
c0022c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022c8c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c8f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022c94:	75 23                	jne    c0022cb9 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ca3:	0f af c2             	imul   eax,edx
c0022ca6:	85 c0                	test   eax,eax
c0022ca8:	79 03                	jns    c0022cad <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022caa:	83 c0 03             	add    eax,0x3
c0022cad:	c1 f8 02             	sar    eax,0x2
c0022cb0:	05 a0 0f 00 00       	add    eax,0xfa0
c0022cb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cbd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022cc1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cc8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cd3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cde:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022ce1:	c1 e0 02             	shl    eax,0x2
c0022ce4:	83 ec 0c             	sub    esp,0xc
c0022ce7:	50                   	push   eax
c0022ce8:	e8 9f cb fe ff       	call   c000f88c <malloc>
c0022ced:	83 c4 10             	add    esp,0x10
c0022cf0:	89 c2                	mov    edx,eax
c0022cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cf6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022cf9:	83 ec 04             	sub    esp,0x4
c0022cfc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022d00:	50                   	push   eax
c0022d01:	6a 01                	push   0x1
c0022d03:	6a 04                	push   0x4
c0022d05:	e8 5b 5e fe ff       	call   c0008b65 <src_new>
c0022d0a:	83 c4 10             	add    esp,0x10
c0022d0d:	89 c2                	mov    edx,eax
c0022d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d1a:	85 c0                	test   eax,eax
c0022d1c:	74 10                	je     c0022d2e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022d1e:	83 ec 0c             	sub    esp,0xc
c0022d21:	68 98 da 02 c0       	push   0xc002da98
c0022d26:	e8 6e 7c ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0022d2b:	83 c4 10             	add    esp,0x10
c0022d2e:	a0 c0 38 03 c0       	mov    al,ds:0xc00338c0
c0022d33:	83 f0 01             	xor    eax,0x1
c0022d36:	84 c0                	test   al,al
c0022d38:	74 57                	je     c0022d91 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022d3a:	a1 d8 da 02 c0       	mov    eax,ds:0xc002dad8
c0022d3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d43:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d4b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022d53:	7f 35                	jg     c0022d8a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022d55:	83 ec 0c             	sub    esp,0xc
c0022d58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022d5c:	e8 0e 54 00 00       	call   c002816f <__floatsisf>
c0022d61:	83 c4 10             	add    esp,0x10
c0022d64:	8b 15 d8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dad8
c0022d6a:	83 ec 08             	sub    esp,0x8
c0022d6d:	52                   	push   edx
c0022d6e:	50                   	push   eax
c0022d6f:	e8 0d 50 00 00       	call   c0027d81 <__mulsf3>
c0022d74:	83 c4 10             	add    esp,0x10
c0022d77:	89 c2                	mov    edx,eax
c0022d79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d7d:	89 14 85 c0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb40],edx
c0022d84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d88:	eb c1                	jmp    c0022d4b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022d8a:	c6 05 c0 38 03 c0 01 	mov    BYTE PTR ds:0xc00338c0,0x1
c0022d91:	90                   	nop
c0022d92:	83 c4 1c             	add    esp,0x1c
c0022d95:	c3                   	ret    

c0022d96 <SoundChannel::play()>:
c0022d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d9a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022d9e:	c3                   	ret    
c0022d9f:	90                   	nop

c0022da0 <SoundChannel::paused()>:
c0022da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da4:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022da7:	c3                   	ret    

c0022da8 <SoundChannel::getSampleRate()>:
c0022da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dae:	c3                   	ret    
c0022daf:	90                   	nop

c0022db0 <SoundChannel::getBits()>:
c0022db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022db7:	c3                   	ret    

c0022db8 <SoundChannel::getBufferUsed()>:
c0022db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dbc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022dbf:	c3                   	ret    

c0022dc0 <SoundChannel::getBufferSize()>:
c0022dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dc4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022dc7:	c3                   	ret    

c0022dc8 <SoundChannel::unbuffer(float*, int, int)>:
c0022dc8:	56                   	push   esi
c0022dc9:	53                   	push   ebx
c0022dca:	83 ec 40             	sub    esp,0x40
c0022dcd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022dd1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022dd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022dd8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022ddb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022ddf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022de3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022de7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022deb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022def:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022df3:	e8 77 53 00 00       	call   c002816f <__floatsisf>
c0022df8:	5a                   	pop    edx
c0022df9:	89 c6                	mov    esi,eax
c0022dfb:	ff 33                	push   DWORD PTR [ebx]
c0022dfd:	e8 6d 53 00 00       	call   c002816f <__floatsisf>
c0022e02:	59                   	pop    ecx
c0022e03:	5a                   	pop    edx
c0022e04:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022e07:	50                   	push   eax
c0022e08:	e8 74 4f 00 00       	call   c0027d81 <__mulsf3>
c0022e0d:	59                   	pop    ecx
c0022e0e:	5a                   	pop    edx
c0022e0f:	50                   	push   eax
c0022e10:	56                   	push   esi
c0022e11:	e8 2e 51 00 00       	call   c0027f44 <__divsf3>
c0022e16:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e19:	e8 21 66 00 00       	call   c002943f <__extendsfdf2>
c0022e1e:	59                   	pop    ecx
c0022e1f:	5e                   	pop    esi
c0022e20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022e28:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022e30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022e34:	50                   	push   eax
c0022e35:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022e38:	e8 1d 59 fe ff       	call   c000875a <src_process>
c0022e3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e41:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022e44:	83 c4 0c             	add    esp,0xc
c0022e47:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022e4a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022e4d:	29 d0                	sub    eax,edx
c0022e4f:	c1 e0 02             	shl    eax,0x2
c0022e52:	50                   	push   eax
c0022e53:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022e56:	50                   	push   eax
c0022e57:	51                   	push   ecx
c0022e58:	e8 2b d8 fd ff       	call   c0000688 <memmove>
c0022e5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e61:	83 c4 44             	add    esp,0x44
c0022e64:	5b                   	pop    ebx
c0022e65:	5e                   	pop    esi
c0022e66:	c3                   	ret    
c0022e67:	90                   	nop

c0022e68 <SoundChannel::buffer16(unsigned short*, int)>:
c0022e68:	83 ec 18             	sub    esp,0x18
c0022e6b:	68 b4 da 02 c0       	push   0xc002dab4
c0022e70:	e8 24 7b ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0022e75:	31 c0                	xor    eax,eax
c0022e77:	83 c4 1c             	add    esp,0x1c
c0022e7a:	c3                   	ret    
c0022e7b:	90                   	nop

c0022e7c <SoundChannel::buffer8(unsigned char*, int)>:
c0022e7c:	55                   	push   ebp
c0022e7d:	57                   	push   edi
c0022e7e:	56                   	push   esi
c0022e7f:	53                   	push   ebx
c0022e80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e84:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022e88:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022e8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022e8f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022e92:	74 7a                	je     c0022f0e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022e94:	85 ff                	test   edi,edi
c0022e96:	7e 76                	jle    c0022f0e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022e98:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022e9c:	8d 70 01             	lea    esi,[eax+0x1]
c0022e9f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022ea2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ea5:	8b 1c 9d c0 34 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccb40]
c0022eac:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022eaf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022eb2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022eb5:	74 5e                	je     c0022f15 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022eb7:	83 ff 01             	cmp    edi,0x1
c0022eba:	74 4b                	je     c0022f07 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022ebc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022ec0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022ec3:	8d 70 01             	lea    esi,[eax+0x1]
c0022ec6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ec9:	8b 1c 9d c0 34 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccb40]
c0022ed0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ed3:	b8 02 00 00 00       	mov    eax,0x2
c0022ed8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022edb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ede:	75 23                	jne    c0022f03 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022ee0:	eb 27                	jmp    c0022f09 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022ee2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022ee7:	8d 71 01             	lea    esi,[ecx+0x1]
c0022eea:	40                   	inc    eax
c0022eeb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022eee:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022ef1:	8b 1c 9d c0 34 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccb40]
c0022ef8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022efb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022efe:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022f01:	74 06                	je     c0022f09 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022f03:	39 c7                	cmp    edi,eax
c0022f05:	75 db                	jne    c0022ee2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022f07:	89 f8                	mov    eax,edi
c0022f09:	5b                   	pop    ebx
c0022f0a:	5e                   	pop    esi
c0022f0b:	5f                   	pop    edi
c0022f0c:	5d                   	pop    ebp
c0022f0d:	c3                   	ret    
c0022f0e:	5b                   	pop    ebx
c0022f0f:	31 c0                	xor    eax,eax
c0022f11:	5e                   	pop    esi
c0022f12:	5f                   	pop    edi
c0022f13:	5d                   	pop    ebp
c0022f14:	c3                   	ret    
c0022f15:	b8 01 00 00 00       	mov    eax,0x1
c0022f1a:	eb ed                	jmp    c0022f09 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022f1c <SoundDevice::SoundDevice(char const*)>:
c0022f1c:	83 ec 1c             	sub    esp,0x1c
c0022f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f23:	83 ec 08             	sub    esp,0x8
c0022f26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f2a:	50                   	push   eax
c0022f2b:	e8 5e 15 ff ff       	call   c001448e <Device::Device(char const*)>
c0022f30:	83 c4 10             	add    esp,0x10
c0022f33:	ba e4 da 02 c0       	mov    edx,0xc002dae4
c0022f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f3c:	89 10                	mov    DWORD PTR [eax],edx
c0022f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f42:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f50:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022f5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f62:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022f67:	7f 19                	jg     c0022f82 <SoundDevice::SoundDevice(char const*)+0x66>
c0022f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f71:	83 c2 54             	add    edx,0x54
c0022f74:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022f7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022f80:	eb e0                	jmp    c0022f62 <SoundDevice::SoundDevice(char const*)+0x46>
c0022f82:	90                   	nop
c0022f83:	83 c4 1c             	add    esp,0x1c
c0022f86:	c3                   	ret    
c0022f87:	90                   	nop

c0022f88 <SoundDevice::~SoundDevice()>:
c0022f88:	53                   	push   ebx
c0022f89:	83 ec 18             	sub    esp,0x18
c0022f8c:	ba e4 da 02 c0       	mov    edx,0xc002dae4
c0022f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f95:	89 10                	mov    DWORD PTR [eax],edx
c0022f97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f9f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022fa4:	7f 46                	jg     c0022fec <SoundDevice::~SoundDevice()+0x64>
c0022fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022faa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022fae:	83 c2 54             	add    edx,0x54
c0022fb1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022fb5:	85 c0                	test   eax,eax
c0022fb7:	74 2d                	je     c0022fe6 <SoundDevice::~SoundDevice()+0x5e>
c0022fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022fbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022fc1:	83 c2 54             	add    edx,0x54
c0022fc4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022fc8:	85 db                	test   ebx,ebx
c0022fca:	74 1a                	je     c0022fe6 <SoundDevice::~SoundDevice()+0x5e>
c0022fcc:	83 ec 0c             	sub    esp,0xc
c0022fcf:	53                   	push   ebx
c0022fd0:	e8 0d fc ff ff       	call   c0022be2 <SoundChannel::~SoundChannel()>
c0022fd5:	83 c4 10             	add    esp,0x10
c0022fd8:	83 ec 08             	sub    esp,0x8
c0022fdb:	6a 2c                	push   0x2c
c0022fdd:	53                   	push   ebx
c0022fde:	e8 8e fd fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0022fe3:	83 c4 10             	add    esp,0x10
c0022fe6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022fea:	eb b3                	jmp    c0022f9f <SoundDevice::~SoundDevice()+0x17>
c0022fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ff0:	83 ec 0c             	sub    esp,0xc
c0022ff3:	50                   	push   eax
c0022ff4:	e8 5f 11 ff ff       	call   c0014158 <Device::~Device()>
c0022ff9:	83 c4 10             	add    esp,0x10
c0022ffc:	90                   	nop
c0022ffd:	83 c4 18             	add    esp,0x18
c0023000:	5b                   	pop    ebx
c0023001:	c3                   	ret    

c0023002 <SoundDevice::~SoundDevice()>:
c0023002:	83 ec 0c             	sub    esp,0xc
c0023005:	83 ec 0c             	sub    esp,0xc
c0023008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002300c:	e8 77 ff ff ff       	call   c0022f88 <SoundDevice::~SoundDevice()>
c0023011:	83 c4 10             	add    esp,0x10
c0023014:	83 ec 08             	sub    esp,0x8
c0023017:	68 e4 01 00 00       	push   0x1e4
c002301c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023020:	e8 4c fd fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0023025:	83 c4 10             	add    esp,0x10
c0023028:	83 c4 0c             	add    esp,0xc
c002302b:	c3                   	ret    

c002302c <SoundDevice::getFreeChannelNum()>:
c002302c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023030:	31 c0                	xor    eax,eax
c0023032:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002303a:	74 09                	je     c0023045 <SoundDevice::getFreeChannelNum()+0x19>
c002303c:	40                   	inc    eax
c002303d:	83 f8 20             	cmp    eax,0x20
c0023040:	75 f0                	jne    c0023032 <SoundDevice::getFreeChannelNum()+0x6>
c0023042:	83 c8 ff             	or     eax,0xffffffff
c0023045:	c3                   	ret    

c0023046 <SoundDevice::addChannel(SoundChannel*)>:
c0023046:	56                   	push   esi
c0023047:	53                   	push   ebx
c0023048:	51                   	push   ecx
c0023049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002304d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023051:	53                   	push   ebx
c0023052:	e8 d5 ff ff ff       	call   c002302c <SoundDevice::getFreeChannelNum()>
c0023057:	5a                   	pop    edx
c0023058:	83 f8 ff             	cmp    eax,0xffffffff
c002305b:	74 51                	je     c00230ae <SoundDevice::addChannel(SoundChannel*)+0x68>
c002305d:	85 f6                	test   esi,esi
c002305f:	74 4d                	je     c00230ae <SoundDevice::addChannel(SoundChannel*)+0x68>
c0023061:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0023068:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002306f:	75 30                	jne    c00230a1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0023071:	83 ec 0c             	sub    esp,0xc
c0023074:	56                   	push   esi
c0023075:	e8 2e fd ff ff       	call   c0022da8 <SoundChannel::getSampleRate()>
c002307a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0023080:	89 34 24             	mov    DWORD PTR [esp],esi
c0023083:	e8 28 fd ff ff       	call   c0022db0 <SoundChannel::getBits()>
c0023088:	83 c4 0c             	add    esp,0xc
c002308b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0023091:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023093:	50                   	push   eax
c0023094:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002309a:	53                   	push   ebx
c002309b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002309e:	83 c4 10             	add    esp,0x10
c00230a1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00230a7:	b8 01 00 00 00       	mov    eax,0x1
c00230ac:	eb 03                	jmp    c00230b1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00230ae:	83 c8 ff             	or     eax,0xffffffff
c00230b1:	5a                   	pop    edx
c00230b2:	5b                   	pop    ebx
c00230b3:	5e                   	pop    esi
c00230b4:	c3                   	ret    
c00230b5:	90                   	nop

c00230b6 <SoundDevice::removeChannel(int)>:
c00230b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230be:	83 fa 1f             	cmp    edx,0x1f
c00230c1:	77 23                	ja     c00230e6 <SoundDevice::removeChannel(int)+0x30>
c00230c3:	8d 14 90             	lea    edx,[eax+edx*4]
c00230c6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00230cd:	74 17                	je     c00230e6 <SoundDevice::removeChannel(int)+0x30>
c00230cf:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00230d9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00230df:	75 05                	jne    c00230e6 <SoundDevice::removeChannel(int)+0x30>
c00230e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00230e3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00230e6:	c3                   	ret    
c00230e7:	90                   	nop

c00230e8 <SoundDevice::floatTo16(float*, unsigned short*, int)>:
c00230e8:	57                   	push   edi
c00230e9:	56                   	push   esi
c00230ea:	53                   	push   ebx
c00230eb:	31 db                	xor    ebx,ebx
c00230ed:	83 ec 10             	sub    esp,0x10
c00230f0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00230f4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00230f8:	0f 8d d0 00 00 00    	jge    c00231ce <SoundDevice::floatTo16(float*, unsigned short*, int)+0xe6>
c00230fe:	83 ec 0c             	sub    esp,0xc
c0023101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023105:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0023108:	e8 32 63 00 00       	call   c002943f <__extendsfdf2>
c002310d:	83 c4 10             	add    esp,0x10
c0023110:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023114:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023118:	68 00 00 f0 3f       	push   0x3ff00000
c002311d:	6a 00                	push   0x0
c002311f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023127:	e8 9f 52 00 00       	call   c00283cb <__adddf3>
c002312c:	83 c4 10             	add    esp,0x10
c002312f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023133:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023137:	68 00 00 e0 3f       	push   0x3fe00000
c002313c:	6a 00                	push   0x0
c002313e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023142:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023146:	e8 fd 58 00 00       	call   c0028a48 <__muldf3>
c002314b:	83 c4 10             	add    esp,0x10
c002314e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023152:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023156:	68 c0 ff df 40       	push   0x40dfffc0
c002315b:	6a 00                	push   0x0
c002315d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023165:	e8 de 58 00 00       	call   c0028a48 <__muldf3>
c002316a:	59                   	pop    ecx
c002316b:	5f                   	pop    edi
c002316c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023170:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002317c:	e8 9a 61 00 00       	call   c002931b <__truncdfsf2>
c0023181:	5a                   	pop    edx
c0023182:	89 c7                	mov    edi,eax
c0023184:	59                   	pop    ecx
c0023185:	68 00 fe ff 46       	push   0x46fffe00
c002318a:	50                   	push   eax
c002318b:	e8 35 52 00 00       	call   c00283c5 <__gesf2>
c0023190:	83 c4 10             	add    esp,0x10
c0023193:	85 c0                	test   eax,eax
c0023195:	78 08                	js     c002319f <SoundDevice::floatTo16(float*, unsigned short*, int)+0xb7>
c0023197:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002319d:	eb 29                	jmp    c00231c8 <SoundDevice::floatTo16(float*, unsigned short*, int)+0xe0>
c002319f:	50                   	push   eax
c00231a0:	50                   	push   eax
c00231a1:	6a 00                	push   0x0
c00231a3:	57                   	push   edi
c00231a4:	e8 20 52 00 00       	call   c00283c9 <__lesf2>
c00231a9:	83 c4 10             	add    esp,0x10
c00231ac:	85 c0                	test   eax,eax
c00231ae:	7f 08                	jg     c00231b8 <SoundDevice::floatTo16(float*, unsigned short*, int)+0xd0>
c00231b0:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00231b6:	eb 10                	jmp    c00231c8 <SoundDevice::floatTo16(float*, unsigned short*, int)+0xe0>
c00231b8:	83 ec 0c             	sub    esp,0xc
c00231bb:	57                   	push   edi
c00231bc:	e8 1b 63 00 00       	call   c00294dc <lrintf>
c00231c1:	83 c4 10             	add    esp,0x10
c00231c4:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00231c8:	43                   	inc    ebx
c00231c9:	e9 26 ff ff ff       	jmp    c00230f4 <SoundDevice::floatTo16(float*, unsigned short*, int)+0xc>
c00231ce:	83 c4 10             	add    esp,0x10
c00231d1:	5b                   	pop    ebx
c00231d2:	5e                   	pop    esi
c00231d3:	5f                   	pop    edi
c00231d4:	c3                   	ret    
c00231d5:	90                   	nop

c00231d6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00231d6:	57                   	push   edi
c00231d7:	56                   	push   esi
c00231d8:	53                   	push   ebx
c00231d9:	31 db                	xor    ebx,ebx
c00231db:	83 ec 10             	sub    esp,0x10
c00231de:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00231e2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00231e6:	0f 8d cb 00 00 00    	jge    c00232b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00231ec:	83 ec 0c             	sub    esp,0xc
c00231ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231f3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00231f6:	e8 44 62 00 00       	call   c002943f <__extendsfdf2>
c00231fb:	83 c4 10             	add    esp,0x10
c00231fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023202:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023206:	68 00 00 f0 3f       	push   0x3ff00000
c002320b:	6a 00                	push   0x0
c002320d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023215:	e8 b1 51 00 00       	call   c00283cb <__adddf3>
c002321a:	83 c4 10             	add    esp,0x10
c002321d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023221:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023225:	68 00 00 e0 3f       	push   0x3fe00000
c002322a:	6a 00                	push   0x0
c002322c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023234:	e8 0f 58 00 00       	call   c0028a48 <__muldf3>
c0023239:	83 c4 10             	add    esp,0x10
c002323c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023244:	68 00 00 60 40       	push   0x40600000
c0023249:	6a 00                	push   0x0
c002324b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002324f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023253:	e8 f0 57 00 00       	call   c0028a48 <__muldf3>
c0023258:	59                   	pop    ecx
c0023259:	5f                   	pop    edi
c002325a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002325e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002326a:	e8 ac 60 00 00       	call   c002931b <__truncdfsf2>
c002326f:	5a                   	pop    edx
c0023270:	89 c7                	mov    edi,eax
c0023272:	59                   	pop    ecx
c0023273:	68 00 00 fe 42       	push   0x42fe0000
c0023278:	50                   	push   eax
c0023279:	e8 47 51 00 00       	call   c00283c5 <__gesf2>
c002327e:	83 c4 10             	add    esp,0x10
c0023281:	85 c0                	test   eax,eax
c0023283:	78 06                	js     c002328b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0023285:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0023289:	eb 26                	jmp    c00232b1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002328b:	50                   	push   eax
c002328c:	50                   	push   eax
c002328d:	6a 00                	push   0x0
c002328f:	57                   	push   edi
c0023290:	e8 34 51 00 00       	call   c00283c9 <__lesf2>
c0023295:	83 c4 10             	add    esp,0x10
c0023298:	85 c0                	test   eax,eax
c002329a:	7f 06                	jg     c00232a2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002329c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00232a0:	eb 0f                	jmp    c00232b1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00232a2:	83 ec 0c             	sub    esp,0xc
c00232a5:	57                   	push   edi
c00232a6:	e8 31 62 00 00       	call   c00294dc <lrintf>
c00232ab:	83 c4 10             	add    esp,0x10
c00232ae:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00232b1:	43                   	inc    ebx
c00232b2:	e9 2b ff ff ff       	jmp    c00231e2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00232b7:	83 c4 10             	add    esp,0x10
c00232ba:	5b                   	pop    ebx
c00232bb:	5e                   	pop    esi
c00232bc:	5f                   	pop    edi
c00232bd:	c3                   	ret    

c00232be <SoundDevice::getAudio(int, float*, float*)>:
c00232be:	55                   	push   ebp
c00232bf:	57                   	push   edi
c00232c0:	56                   	push   esi
c00232c1:	53                   	push   ebx
c00232c2:	31 db                	xor    ebx,ebx
c00232c4:	83 ec 20             	sub    esp,0x20
c00232c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00232cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00232cf:	c1 e0 02             	shl    eax,0x2
c00232d2:	50                   	push   eax
c00232d3:	6a 00                	push   0x0
c00232d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00232d9:	e8 72 d4 fd ff       	call   c0000750 <memset>
c00232de:	83 c4 10             	add    esp,0x10
c00232e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00232e5:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00232ec:	85 c0                	test   eax,eax
c00232ee:	0f 84 d7 00 00 00    	je     c00233cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00232f4:	83 ec 0c             	sub    esp,0xc
c00232f7:	50                   	push   eax
c00232f8:	e8 a3 fa ff ff       	call   c0022da0 <SoundChannel::paused()>
c00232fd:	83 c4 10             	add    esp,0x10
c0023300:	84 c0                	test   al,al
c0023302:	0f 85 c3 00 00 00    	jne    c00233cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023308:	83 ec 0c             	sub    esp,0xc
c002330b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023312:	e8 17 f9 ff ff       	call   c0022c2e <SoundChannel::getVolume()>
c0023317:	83 c4 10             	add    esp,0x10
c002331a:	85 c0                	test   eax,eax
c002331c:	0f 84 a9 00 00 00    	je     c00233cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023322:	83 ec 0c             	sub    esp,0xc
c0023325:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002332c:	e8 fd f8 ff ff       	call   c0022c2e <SoundChannel::getVolume()>
c0023331:	83 ec 0c             	sub    esp,0xc
c0023334:	50                   	push   eax
c0023335:	e8 35 4e 00 00       	call   c002816f <__floatsisf>
c002333a:	59                   	pop    ecx
c002333b:	5d                   	pop    ebp
c002333c:	31 ed                	xor    ebp,ebp
c002333e:	68 00 00 c8 42       	push   0x42c80000
c0023343:	50                   	push   eax
c0023344:	e8 fb 4b 00 00       	call   c0027f44 <__divsf3>
c0023349:	83 c4 10             	add    esp,0x10
c002334c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023350:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023354:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002335a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002335e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023365:	e8 5e fa ff ff       	call   c0022dc8 <SoundChannel::unbuffer(float*, int, int)>
c002336a:	83 c4 20             	add    esp,0x20
c002336d:	89 c1                	mov    ecx,eax
c002336f:	39 cd                	cmp    ebp,ecx
c0023371:	7d 52                	jge    c00233c5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0023373:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023377:	50                   	push   eax
c0023378:	50                   	push   eax
c0023379:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002337d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023380:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023384:	e8 f8 49 00 00       	call   c0027d81 <__mulsf3>
c0023389:	5a                   	pop    edx
c002338a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002338e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0023394:	e8 d6 4d 00 00       	call   c002816f <__floatsisf>
c0023399:	59                   	pop    ecx
c002339a:	5a                   	pop    edx
c002339b:	50                   	push   eax
c002339c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233a0:	e8 9f 4b 00 00       	call   c0027f44 <__divsf3>
c00233a5:	59                   	pop    ecx
c00233a6:	5a                   	pop    edx
c00233a7:	50                   	push   eax
c00233a8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00233ac:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00233af:	e8 aa 46 00 00       	call   c0027a5e <__addsf3>
c00233b4:	83 c4 10             	add    esp,0x10
c00233b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00233bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00233bf:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00233c2:	45                   	inc    ebp
c00233c3:	eb aa                	jmp    c002336f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00233c5:	39 cf                	cmp    edi,ecx
c00233c7:	7e 02                	jle    c00233cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00233c9:	89 cf                	mov    edi,ecx
c00233cb:	43                   	inc    ebx
c00233cc:	83 fb 20             	cmp    ebx,0x20
c00233cf:	0f 85 10 ff ff ff    	jne    c00232e5 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00233d5:	83 c4 1c             	add    esp,0x1c
c00233d8:	89 f8                	mov    eax,edi
c00233da:	5b                   	pop    ebx
c00233db:	5e                   	pop    esi
c00233dc:	5f                   	pop    edi
c00233dd:	5d                   	pop    ebp
c00233de:	c3                   	ret    
c00233df:	90                   	nop

c00233e0 <PCI::open(int, int, void*)>:
c00233e0:	83 ec 18             	sub    esp,0x18
c00233e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00233e9:	50                   	push   eax
c00233ea:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00233ed:	31 c0                	xor    eax,eax
c00233ef:	83 c4 1c             	add    esp,0x1c
c00233f2:	c3                   	ret    
c00233f3:	90                   	nop

c00233f4 <PCI::close(int, int, void*)>:
c00233f4:	31 c0                	xor    eax,eax
c00233f6:	c3                   	ret    
c00233f7:	90                   	nop

c00233f8 <PCI::PCI()>:
c00233f8:	83 ec 0c             	sub    esp,0xc
c00233fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ff:	83 ec 08             	sub    esp,0x8
c0023402:	68 14 db 02 c0       	push   0xc002db14
c0023407:	50                   	push   eax
c0023408:	e8 e5 06 ff ff       	call   c0013af2 <Bus::Bus(char const*)>
c002340d:	83 c4 10             	add    esp,0x10
c0023410:	ba c0 db 02 c0       	mov    edx,0xc002dbc0
c0023415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023419:	89 10                	mov    DWORD PTR [eax],edx
c002341b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341f:	a3 c4 38 03 c0       	mov    ds:0xc00338c4,eax
c0023424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023428:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002342e:	0f b6 d0             	movzx  edx,al
c0023431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023435:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002343c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023440:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023446:	0f b6 d0             	movzx  edx,al
c0023449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023456:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002345c:	8d 50 01             	lea    edx,[eax+0x1]
c002345f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023463:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023469:	0f b6 d0             	movzx  edx,al
c002346c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023470:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023474:	83 c9 c0             	or     ecx,0xffffffc0
c0023477:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002347b:	90                   	nop
c002347c:	83 c4 0c             	add    esp,0xc
c002347f:	c3                   	ret    

c0023480 <PCI::readBAR8(unsigned int, int)>:
c0023480:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023488:	f6 c2 01             	test   dl,0x1
c002348b:	74 07                	je     c0023494 <PCI::readBAR8(unsigned int, int)+0x14>
c002348d:	83 e2 fc             	and    edx,0xfffffffc
c0023490:	01 c2                	add    edx,eax
c0023492:	ec                   	in     al,dx
c0023493:	c3                   	ret    
c0023494:	83 e2 f0             	and    edx,0xfffffff0
c0023497:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002349a:	c3                   	ret    
c002349b:	90                   	nop

c002349c <PCI::readBAR16(unsigned int, int)>:
c002349c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00234a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00234a4:	f6 c2 01             	test   dl,0x1
c00234a7:	74 08                	je     c00234b1 <PCI::readBAR16(unsigned int, int)+0x15>
c00234a9:	83 e2 fc             	and    edx,0xfffffffc
c00234ac:	01 c2                	add    edx,eax
c00234ae:	66 ed                	in     ax,dx
c00234b0:	c3                   	ret    
c00234b1:	83 e2 f0             	and    edx,0xfffffff0
c00234b4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00234b8:	c3                   	ret    
c00234b9:	90                   	nop

c00234ba <PCI::readBAR32(unsigned int, int)>:
c00234ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00234be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00234c2:	f6 c2 01             	test   dl,0x1
c00234c5:	74 07                	je     c00234ce <PCI::readBAR32(unsigned int, int)+0x14>
c00234c7:	83 e2 fc             	and    edx,0xfffffffc
c00234ca:	01 c2                	add    edx,eax
c00234cc:	ed                   	in     eax,dx
c00234cd:	c3                   	ret    
c00234ce:	83 e2 f0             	and    edx,0xfffffff0
c00234d1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00234d4:	c3                   	ret    
c00234d5:	90                   	nop

c00234d6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00234d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00234da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00234de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00234e2:	f6 c2 01             	test   dl,0x1
c00234e5:	74 07                	je     c00234ee <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00234e7:	83 e2 fc             	and    edx,0xfffffffc
c00234ea:	01 ca                	add    edx,ecx
c00234ec:	ee                   	out    dx,al
c00234ed:	c3                   	ret    
c00234ee:	83 e2 f0             	and    edx,0xfffffff0
c00234f1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00234f4:	c3                   	ret    
c00234f5:	90                   	nop

c00234f6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00234f6:	57                   	push   edi
c00234f7:	56                   	push   esi
c00234f8:	53                   	push   ebx
c00234f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023501:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023505:	f6 c2 01             	test   dl,0x1
c0023508:	74 24                	je     c002352e <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c002350a:	89 d3                	mov    ebx,edx
c002350c:	83 e3 fc             	and    ebx,0xfffffffc
c002350f:	50                   	push   eax
c0023510:	0f b7 c7             	movzx  eax,di
c0023513:	50                   	push   eax
c0023514:	8d 04 33             	lea    eax,[ebx+esi*1]
c0023517:	50                   	push   eax
c0023518:	68 1c db 02 c0       	push   0xc002db1c
c002351d:	e8 2f f9 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0023522:	8d 14 33             	lea    edx,[ebx+esi*1]
c0023525:	89 f8                	mov    eax,edi
c0023527:	66 ef                	out    dx,ax
c0023529:	83 c4 10             	add    esp,0x10
c002352c:	eb 07                	jmp    c0023535 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c002352e:	83 e2 f0             	and    edx,0xfffffff0
c0023531:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0023535:	5b                   	pop    ebx
c0023536:	5e                   	pop    esi
c0023537:	5f                   	pop    edi
c0023538:	c3                   	ret    
c0023539:	90                   	nop

c002353a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002353a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002353e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023542:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023546:	f6 c2 01             	test   dl,0x1
c0023549:	74 07                	je     c0023552 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002354b:	83 e2 fc             	and    edx,0xfffffffc
c002354e:	01 ca                	add    edx,ecx
c0023550:	ef                   	out    dx,eax
c0023551:	c3                   	ret    
c0023552:	83 e2 f0             	and    edx,0xfffffff0
c0023555:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023558:	c3                   	ret    
c0023559:	90                   	nop

c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002355a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002355e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023563:	89 ca                	mov    edx,ecx
c0023565:	c1 e0 10             	shl    eax,0x10
c0023568:	81 e2 fc 00 00 00    	and    edx,0xfc
c002356e:	09 d0                	or     eax,edx
c0023570:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023575:	c1 e2 08             	shl    edx,0x8
c0023578:	09 d0                	or     eax,edx
c002357a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002357f:	c1 e2 0b             	shl    edx,0xb
c0023582:	09 d0                	or     eax,edx
c0023584:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023589:	0d 00 00 00 80       	or     eax,0x80000000
c002358e:	ef                   	out    dx,eax
c002358f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023594:	ed                   	in     eax,dx
c0023595:	83 e1 02             	and    ecx,0x2
c0023598:	0f b6 c9             	movzx  ecx,cl
c002359b:	c1 e1 03             	shl    ecx,0x3
c002359e:	d3 e8                	shr    eax,cl
c00235a0:	c3                   	ret    
c00235a1:	90                   	nop

c00235a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00235a2:	6a 00                	push   0x0
c00235a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235a9:	50                   	push   eax
c00235aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235af:	50                   	push   eax
c00235b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235b5:	50                   	push   eax
c00235b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00235ba:	e8 9b ff ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235bf:	83 c4 14             	add    esp,0x14
c00235c2:	c3                   	ret    
c00235c3:	90                   	nop

c00235c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00235c4:	6a 0e                	push   0xe
c00235c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235cb:	50                   	push   eax
c00235cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235d1:	50                   	push   eax
c00235d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235d7:	50                   	push   eax
c00235d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00235dc:	e8 79 ff ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235e1:	83 c4 14             	add    esp,0x14
c00235e4:	0f b6 c0             	movzx  eax,al
c00235e7:	c3                   	ret    

c00235e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00235e8:	55                   	push   ebp
c00235e9:	57                   	push   edi
c00235ea:	56                   	push   esi
c00235eb:	53                   	push   ebx
c00235ec:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00235f1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00235f6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00235fb:	6a 0a                	push   0xa
c00235fd:	56                   	push   esi
c00235fe:	55                   	push   ebp
c00235ff:	57                   	push   edi
c0023600:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023604:	e8 51 ff ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023609:	6a 0a                	push   0xa
c002360b:	89 c3                	mov    ebx,eax
c002360d:	56                   	push   esi
c002360e:	0f b6 db             	movzx  ebx,bl
c0023611:	55                   	push   ebp
c0023612:	57                   	push   edi
c0023613:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023617:	e8 3e ff ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002361c:	83 c4 28             	add    esp,0x28
c002361f:	25 00 ff 00 00       	and    eax,0xff00
c0023624:	09 d8                	or     eax,ebx
c0023626:	5b                   	pop    ebx
c0023627:	5e                   	pop    esi
c0023628:	5f                   	pop    edi
c0023629:	5d                   	pop    ebp
c002362a:	c3                   	ret    
c002362b:	90                   	nop

c002362c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002362c:	6a 08                	push   0x8
c002362e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023633:	50                   	push   eax
c0023634:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023639:	50                   	push   eax
c002363a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002363f:	50                   	push   eax
c0023640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023644:	e8 11 ff ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023649:	83 c4 14             	add    esp,0x14
c002364c:	0f b6 c4             	movzx  eax,ah
c002364f:	c3                   	ret    

c0023650 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023650:	6a 08                	push   0x8
c0023652:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023657:	50                   	push   eax
c0023658:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002365d:	50                   	push   eax
c002365e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023663:	50                   	push   eax
c0023664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023668:	e8 ed fe ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002366d:	83 c4 14             	add    esp,0x14
c0023670:	c3                   	ret    
c0023671:	90                   	nop

c0023672 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023672:	6a 3c                	push   0x3c
c0023674:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023679:	50                   	push   eax
c002367a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002367f:	50                   	push   eax
c0023680:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023685:	50                   	push   eax
c0023686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002368a:	e8 cb fe ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002368f:	83 c4 14             	add    esp,0x14
c0023692:	c3                   	ret    
c0023693:	90                   	nop

c0023694 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023694:	6a 18                	push   0x18
c0023696:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002369b:	50                   	push   eax
c002369c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00236a1:	50                   	push   eax
c00236a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00236a7:	50                   	push   eax
c00236a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00236ac:	e8 a9 fe ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236b1:	83 c4 14             	add    esp,0x14
c00236b4:	0f b6 c4             	movzx  eax,ah
c00236b7:	c3                   	ret    

c00236b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00236b8:	55                   	push   ebp
c00236b9:	57                   	push   edi
c00236ba:	56                   	push   esi
c00236bb:	53                   	push   ebx
c00236bc:	50                   	push   eax
c00236bd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00236c1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00236c6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00236cb:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00236d0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00236d7:	8d 43 12             	lea    eax,[ebx+0x12]
c00236da:	83 c3 10             	add    ebx,0x10
c00236dd:	0f b6 c0             	movzx  eax,al
c00236e0:	0f b6 db             	movzx  ebx,bl
c00236e3:	50                   	push   eax
c00236e4:	51                   	push   ecx
c00236e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00236e9:	57                   	push   edi
c00236ea:	55                   	push   ebp
c00236eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00236ef:	e8 66 fe ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236f4:	53                   	push   ebx
c00236f5:	89 c6                	mov    esi,eax
c00236f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00236fb:	c1 e6 10             	shl    esi,0x10
c00236fe:	51                   	push   ecx
c00236ff:	57                   	push   edi
c0023700:	55                   	push   ebp
c0023701:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023705:	e8 50 fe ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002370a:	83 c4 2c             	add    esp,0x2c
c002370d:	0f b7 c0             	movzx  eax,ax
c0023710:	5b                   	pop    ebx
c0023711:	09 f0                	or     eax,esi
c0023713:	5e                   	pop    esi
c0023714:	5f                   	pop    edi
c0023715:	5d                   	pop    ebp
c0023716:	c3                   	ret    
c0023717:	90                   	nop

c0023718 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023718:	53                   	push   ebx
c0023719:	ba f8 0c 00 00       	mov    edx,0xcf8
c002371e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0023723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023727:	c1 e1 10             	shl    ecx,0x10
c002372a:	25 fc 00 00 00       	and    eax,0xfc
c002372f:	09 c1                	or     ecx,eax
c0023731:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023736:	c1 e0 08             	shl    eax,0x8
c0023739:	09 c1                	or     ecx,eax
c002373b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023740:	c1 e0 0b             	shl    eax,0xb
c0023743:	09 c1                	or     ecx,eax
c0023745:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002374b:	89 c8                	mov    eax,ecx
c002374d:	ef                   	out    dx,eax
c002374e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023753:	ed                   	in     eax,dx
c0023754:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023759:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002375e:	74 0a                	je     c002376a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023760:	0f b7 d8             	movzx  ebx,ax
c0023763:	89 d0                	mov    eax,edx
c0023765:	c1 e0 10             	shl    eax,0x10
c0023768:	eb 05                	jmp    c002376f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002376a:	66 31 c0             	xor    ax,ax
c002376d:	89 d3                	mov    ebx,edx
c002376f:	09 c3                	or     ebx,eax
c0023771:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023776:	89 c8                	mov    eax,ecx
c0023778:	ef                   	out    dx,eax
c0023779:	ba fc 0c 00 00       	mov    edx,0xcfc
c002377e:	89 d8                	mov    eax,ebx
c0023780:	ef                   	out    dx,eax
c0023781:	5b                   	pop    ebx
c0023782:	c3                   	ret    
c0023783:	90                   	nop

c0023784 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0023784:	55                   	push   ebp
c0023785:	57                   	push   edi
c0023786:	56                   	push   esi
c0023787:	53                   	push   ebx
c0023788:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002378e:	80 3d d0 38 03 c0 00 	cmp    BYTE PTR ds:0xc00338d0,0x0
c0023795:	0f 85 96 00 00 00    	jne    c0023831 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c002379b:	83 ec 0c             	sub    esp,0xc
c002379e:	68 14 01 00 00       	push   0x114
c00237a3:	e8 e4 c0 fe ff       	call   c000f88c <malloc>
c00237a8:	83 c4 0c             	add    esp,0xc
c00237ab:	89 c3                	mov    ebx,eax
c00237ad:	ff 35 d0 2a 03 c0    	push   DWORD PTR ds:0xc0032ad0
c00237b3:	68 33 db 02 c0       	push   0xc002db33
c00237b8:	50                   	push   eax
c00237b9:	e8 f2 fb fe ff       	call   c00133b0 <File::File(char const*, Process*)>
c00237be:	5a                   	pop    edx
c00237bf:	59                   	pop    ecx
c00237c0:	6a 01                	push   0x1
c00237c2:	53                   	push   ebx
c00237c3:	e8 4c fc fe ff       	call   c0013414 <File::open(FileOpenMode)>
c00237c8:	83 c4 0c             	add    esp,0xc
c00237cb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00237cf:	50                   	push   eax
c00237d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00237d4:	50                   	push   eax
c00237d5:	53                   	push   ebx
c00237d6:	e8 e5 fe fe ff       	call   c00136c0 <File::stat(unsigned long long*, bool*)>
c00237db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00237df:	40                   	inc    eax
c00237e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00237e3:	e8 a4 c0 fe ff       	call   c000f88c <malloc>
c00237e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237ec:	a3 cc 38 03 c0       	mov    ds:0xc00338cc,eax
c00237f1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00237f5:	5e                   	pop    esi
c00237f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00237f8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00237fc:	51                   	push   ecx
c00237fd:	50                   	push   eax
c00237fe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023802:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023806:	53                   	push   ebx
c0023807:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002380a:	83 c4 14             	add    esp,0x14
c002380d:	53                   	push   ebx
c002380e:	e8 5f fc fe ff       	call   c0013472 <File::close()>
c0023813:	5f                   	pop    edi
c0023814:	5d                   	pop    ebp
c0023815:	ff 35 cc 38 03 c0    	push   DWORD PTR ds:0xc00338cc
c002381b:	68 4c db 02 c0       	push   0xc002db4c
c0023820:	e8 2c f6 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0023825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023829:	83 c4 10             	add    esp,0x10
c002382c:	a3 c8 38 03 c0       	mov    ds:0xc00338c8,eax
c0023831:	a1 c8 38 03 c0       	mov    eax,ds:0xc00338c8
c0023836:	8b 15 cc 38 03 c0    	mov    edx,DWORD PTR ds:0xc00338cc
c002383c:	89 04 24             	mov    DWORD PTR [esp],eax
c002383f:	31 ff                	xor    edi,edi
c0023841:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023849:	31 f6                	xor    esi,esi
c002384b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023850:	31 db                	xor    ebx,ebx
c0023852:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002385a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002385f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023866:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002386a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023871:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0023875:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023878:	0f 8e 6b 01 00 00    	jle    c00239e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002387e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023881:	d4 40                	aam    0x40
c0023883:	d5 39                	aad    0x39
c0023885:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023889:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002388d:	d4 40                	aam    0x40
c002388f:	d5 39                	aad    0x39
c0023891:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023895:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023899:	d4 40                	aam    0x40
c002389b:	d5 39                	aad    0x39
c002389d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00238a1:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00238a5:	d4 40                	aam    0x40
c00238a7:	d5 39                	aad    0x39
c00238a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00238ad:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00238b1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00238b5:	3c 56                	cmp    al,0x56
c00238b7:	74 45                	je     c00238fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00238b9:	d4 40                	aam    0x40
c00238bb:	d5 39                	aad    0x39
c00238bd:	8d 48 d0             	lea    ecx,[eax-0x30]
c00238c0:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00238c4:	0f b6 c9             	movzx  ecx,cl
c00238c7:	c1 e1 04             	shl    ecx,0x4
c00238ca:	d4 40                	aam    0x40
c00238cc:	d5 39                	aad    0x39
c00238ce:	8d 58 d0             	lea    ebx,[eax-0x30]
c00238d1:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00238d5:	0f b6 db             	movzx  ebx,bl
c00238d8:	09 cb                	or     ebx,ecx
c00238da:	c1 e3 04             	shl    ebx,0x4
c00238dd:	d4 40                	aam    0x40
c00238df:	d5 39                	aad    0x39
c00238e1:	8d 48 d0             	lea    ecx,[eax-0x30]
c00238e4:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00238e8:	0f b6 c9             	movzx  ecx,cl
c00238eb:	09 cb                	or     ebx,ecx
c00238ed:	c1 e3 04             	shl    ebx,0x4
c00238f0:	89 d9                	mov    ecx,ebx
c00238f2:	d4 40                	aam    0x40
c00238f4:	d5 39                	aad    0x39
c00238f6:	8d 58 d0             	lea    ebx,[eax-0x30]
c00238f9:	0f b6 db             	movzx  ebx,bl
c00238fc:	09 cb                	or     ebx,ecx
c00238fe:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023902:	80 f9 44             	cmp    cl,0x44
c0023905:	74 47                	je     c002394e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c0023907:	88 c8                	mov    al,cl
c0023909:	d4 40                	aam    0x40
c002390b:	d5 39                	aad    0x39
c002390d:	83 e8 30             	sub    eax,0x30
c0023910:	0f b6 e8             	movzx  ebp,al
c0023913:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023917:	c1 e5 04             	shl    ebp,0x4
c002391a:	d4 40                	aam    0x40
c002391c:	d5 39                	aad    0x39
c002391e:	83 e8 30             	sub    eax,0x30
c0023921:	0f b6 f0             	movzx  esi,al
c0023924:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023928:	09 ee                	or     esi,ebp
c002392a:	c1 e6 04             	shl    esi,0x4
c002392d:	d4 40                	aam    0x40
c002392f:	d5 39                	aad    0x39
c0023931:	83 e8 30             	sub    eax,0x30
c0023934:	0f b6 e8             	movzx  ebp,al
c0023937:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002393b:	09 ee                	or     esi,ebp
c002393d:	c1 e6 04             	shl    esi,0x4
c0023940:	89 f5                	mov    ebp,esi
c0023942:	d4 40                	aam    0x40
c0023944:	d5 39                	aad    0x39
c0023946:	83 e8 30             	sub    eax,0x30
c0023949:	0f b6 f0             	movzx  esi,al
c002394c:	09 ee                	or     esi,ebp
c002394e:	83 c7 10             	add    edi,0x10
c0023951:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023955:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023958:	3c 0a                	cmp    al,0xa
c002395a:	74 09                	je     c0023965 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c002395c:	45                   	inc    ebp
c002395d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023960:	75 16                	jne    c0023978 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c0023962:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023965:	3c 0a                	cmp    al,0xa
c0023967:	0f 94 c0             	sete   al
c002396a:	0f b6 c0             	movzx  eax,al
c002396d:	01 c7                	add    edi,eax
c002396f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023974:	75 0c                	jne    c0023982 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023976:	eb 15                	jmp    c002398d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023978:	47                   	inc    edi
c0023979:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002397c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023980:	eb d3                	jmp    c0023955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c0023982:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0023987:	0f 85 e8 fe ff ff    	jne    c0023875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002398d:	80 f9 44             	cmp    cl,0x44
c0023990:	74 0b                	je     c002399d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c0023992:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0023997:	0f 85 d8 fe ff ff    	jne    c0023875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002399d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00239a1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00239a5:	c1 e1 04             	shl    ecx,0x4
c00239a8:	83 e8 30             	sub    eax,0x30
c00239ab:	09 c8                	or     eax,ecx
c00239ad:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00239b1:	0f 85 be fe ff ff    	jne    c0023875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00239b7:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00239bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239bf:	c1 e1 04             	shl    ecx,0x4
c00239c2:	83 e8 30             	sub    eax,0x30
c00239c5:	09 c8                	or     eax,ecx
c00239c7:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00239cb:	0f 85 a4 fe ff ff    	jne    c0023875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00239d1:	50                   	push   eax
c00239d2:	50                   	push   eax
c00239d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00239d7:	50                   	push   eax
c00239d8:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00239df:	e8 28 ce fd ff       	call   c000080c <strcpy>
c00239e4:	83 c4 10             	add    esp,0x10
c00239e7:	eb 15                	jmp    c00239fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00239e9:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00239f0:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00239fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00239fe:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023a05:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023a0b:	5b                   	pop    ebx
c0023a0c:	5e                   	pop    esi
c0023a0d:	5f                   	pop    edi
c0023a0e:	5d                   	pop    ebp
c0023a0f:	c3                   	ret    

c0023a10 <PCI::checkBus(unsigned char)>:
c0023a10:	56                   	push   esi
c0023a11:	53                   	push   ebx
c0023a12:	31 db                	xor    ebx,ebx
c0023a14:	51                   	push   ecx
c0023a15:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a1a:	52                   	push   edx
c0023a1b:	53                   	push   ebx
c0023a1c:	43                   	inc    ebx
c0023a1d:	56                   	push   esi
c0023a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a22:	e8 2b 03 00 00       	call   c0023d52 <PCI::checkDevice(unsigned char, unsigned char)>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	83 fb 20             	cmp    ebx,0x20
c0023a2d:	75 eb                	jne    c0023a1a <PCI::checkBus(unsigned char)+0xa>
c0023a2f:	58                   	pop    eax
c0023a30:	5b                   	pop    ebx
c0023a31:	5e                   	pop    esi
c0023a32:	c3                   	ret    
c0023a33:	90                   	nop

c0023a34 <PCI::foundDevice(PCIDeviceInfo)>:
c0023a34:	55                   	push   ebp
c0023a35:	57                   	push   edi
c0023a36:	56                   	push   esi
c0023a37:	53                   	push   ebx
c0023a38:	83 ec 1c             	sub    esp,0x1c
c0023a3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a3f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023a45:	0f 84 52 01 00 00    	je     c0023b9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023a4b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023a4f:	66 81 f9 06 04       	cmp    cx,0x406
c0023a54:	75 2c                	jne    c0023a82 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023a56:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023a5b:	50                   	push   eax
c0023a5c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023a61:	50                   	push   eax
c0023a62:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023a67:	50                   	push   eax
c0023a68:	56                   	push   esi
c0023a69:	e8 26 fc ff ff       	call   c0023694 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023a6e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023a72:	0f b6 c0             	movzx  eax,al
c0023a75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023a79:	83 c4 2c             	add    esp,0x2c
c0023a7c:	5b                   	pop    ebx
c0023a7d:	5e                   	pop    esi
c0023a7e:	5f                   	pop    edi
c0023a7f:	5d                   	pop    ebp
c0023a80:	eb 8e                	jmp    c0023a10 <PCI::checkBus(unsigned char)>
c0023a82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023a86:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023a8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023a90:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023a94:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023a98:	88 d3                	mov    bl,dl
c0023a9a:	85 c0                	test   eax,eax
c0023a9c:	74 33                	je     c0023ad1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023a9e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023aa1:	85 d2                	test   edx,edx
c0023aa3:	74 28                	je     c0023acd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023aa5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023aab:	31 ef                	xor    edi,ebp
c0023aad:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023ab3:	75 18                	jne    c0023acd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023ab5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023ab9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023abf:	75 0c                	jne    c0023acd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023ac1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023ac7:	0f 84 d0 00 00 00    	je     c0023b9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0023acf:	eb c9                	jmp    c0023a9a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023ad1:	66 81 f9 01 06       	cmp    cx,0x601
c0023ad6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023ada:	75 19                	jne    c0023af5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023adc:	83 ec 0c             	sub    esp,0xc
c0023adf:	68 64 01 00 00       	push   0x164
c0023ae4:	e8 a3 bd fe ff       	call   c000f88c <malloc>
c0023ae9:	89 c5                	mov    ebp,eax
c0023aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0023aee:	e8 95 0f 00 00       	call   c0024a88 <SATABus::SATABus()>
c0023af3:	eb 1e                	jmp    c0023b13 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023af5:	66 81 f9 01 01       	cmp    cx,0x101
c0023afa:	75 60                	jne    c0023b5c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023afc:	83 ec 0c             	sub    esp,0xc
c0023aff:	68 70 02 00 00       	push   0x270
c0023b04:	e8 83 bd fe ff       	call   c000f88c <malloc>
c0023b09:	89 c5                	mov    ebp,eax
c0023b0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b0e:	e8 03 03 00 00       	call   c0023e16 <IDE::IDE()>
c0023b13:	58                   	pop    eax
c0023b14:	5a                   	pop    edx
c0023b15:	55                   	push   ebp
c0023b16:	56                   	push   esi
c0023b17:	e8 6e 07 ff ff       	call   c001428a <Device::addChild(Device*)>
c0023b1c:	83 ec 1c             	sub    esp,0x1c
c0023b1f:	b9 09 00 00 00       	mov    ecx,0x9
c0023b24:	fc                   	cld    
c0023b25:	89 e7                	mov    edi,esp
c0023b27:	89 de                	mov    esi,ebx
c0023b29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023b2b:	55                   	push   ebp
c0023b2c:	e8 6b 06 ff ff       	call   c001419c <Device::preOpenPCI(PCIDeviceInfo)>
c0023b31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023b34:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023b38:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023b40:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023b48:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023b50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023b53:	83 c4 4c             	add    esp,0x4c
c0023b56:	5b                   	pop    ebx
c0023b57:	5e                   	pop    esi
c0023b58:	5f                   	pop    edi
c0023b59:	5d                   	pop    ebp
c0023b5a:	ff e0                	jmp    eax
c0023b5c:	83 ec 0c             	sub    esp,0xc
c0023b5f:	68 58 01 00 00       	push   0x158
c0023b64:	e8 23 bd fe ff       	call   c000f88c <malloc>
c0023b69:	89 c5                	mov    ebp,eax
c0023b6b:	58                   	pop    eax
c0023b6c:	5a                   	pop    edx
c0023b6d:	68 5e db 02 c0       	push   0xc002db5e
c0023b72:	55                   	push   ebp
c0023b73:	e8 1c 0a ff ff       	call   c0014594 <DriverlessDevice::DriverlessDevice(char const*)>
c0023b78:	59                   	pop    ecx
c0023b79:	5f                   	pop    edi
c0023b7a:	55                   	push   ebp
c0023b7b:	56                   	push   esi
c0023b7c:	e8 09 07 ff ff       	call   c001428a <Device::addChild(Device*)>
c0023b81:	b9 09 00 00 00       	mov    ecx,0x9
c0023b86:	fc                   	cld    
c0023b87:	89 df                	mov    edi,ebx
c0023b89:	89 de                	mov    esi,ebx
c0023b8b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023b8d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023b91:	83 c4 2c             	add    esp,0x2c
c0023b94:	5b                   	pop    ebx
c0023b95:	5e                   	pop    esi
c0023b96:	5f                   	pop    edi
c0023b97:	5d                   	pop    ebp
c0023b98:	e9 ff 05 ff ff       	jmp    c001419c <Device::preOpenPCI(PCIDeviceInfo)>
c0023b9d:	83 c4 1c             	add    esp,0x1c
c0023ba0:	5b                   	pop    ebx
c0023ba1:	5e                   	pop    esi
c0023ba2:	5f                   	pop    edi
c0023ba3:	5d                   	pop    ebp
c0023ba4:	c3                   	ret    
c0023ba5:	90                   	nop

c0023ba6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023ba6:	55                   	push   ebp
c0023ba7:	57                   	push   edi
c0023ba8:	56                   	push   esi
c0023ba9:	53                   	push   ebx
c0023baa:	83 ec 5c             	sub    esp,0x5c
c0023bad:	8b 6c 24 70          	mov    ebp,DWORD PTR [esp+0x70]
c0023bb1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023bb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023bb9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023bbd:	0f b6 74 24 0c       	movzx  esi,BYTE PTR [esp+0xc]
c0023bc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023bc6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023bca:	0f b6 5c 24 10       	movzx  ebx,BYTE PTR [esp+0x10]
c0023bcf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023bd3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023bd8:	6a 0c                	push   0xc
c0023bda:	57                   	push   edi
c0023bdb:	53                   	push   ebx
c0023bdc:	56                   	push   esi
c0023bdd:	55                   	push   ebp
c0023bde:	e8 77 f9 ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023be3:	57                   	push   edi
c0023be4:	53                   	push   ebx
c0023be5:	56                   	push   esi
c0023be6:	55                   	push   ebp
c0023be7:	e8 fc f9 ff ff       	call   c00235e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023bec:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c0023bf1:	83 c4 24             	add    esp,0x24
c0023bf4:	57                   	push   edi
c0023bf5:	53                   	push   ebx
c0023bf6:	56                   	push   esi
c0023bf7:	55                   	push   ebp
c0023bf8:	e8 75 fa ff ff       	call   c0023672 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023bfd:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0023c01:	6a 3c                	push   0x3c
c0023c03:	57                   	push   edi
c0023c04:	53                   	push   ebx
c0023c05:	56                   	push   esi
c0023c06:	55                   	push   ebp
c0023c07:	e8 4e f9 ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023c0c:	0f b6 c4             	movzx  eax,ah
c0023c0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023c13:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023c17:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023c1b:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0023c20:	83 c4 24             	add    esp,0x24
c0023c23:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023c29:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023c30:	74 7c                	je     c0023cae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023c32:	31 c0                	xor    eax,eax
c0023c34:	8b 15 68 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f568
c0023c3a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023c40:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023c46:	7e 66                	jle    c0023cae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023c48:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023c4b:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023c52:	39 cb                	cmp    ebx,ecx
c0023c54:	75 55                	jne    c0023cab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023c56:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023c5d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023c61:	75 48                	jne    c0023cab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023c63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c67:	83 ec 0c             	sub    esp,0xc
c0023c6a:	68 78 db 02 c0       	push   0xc002db78
c0023c6f:	e8 dd f1 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0023c74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c78:	8b 15 68 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f568
c0023c7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023c82:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023c88:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023c90:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023c94:	52                   	push   edx
c0023c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c99:	53                   	push   ebx
c0023c9a:	68 9d db 02 c0       	push   0xc002db9d
c0023c9f:	e8 ad f1 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0023ca4:	83 c4 20             	add    esp,0x20
c0023ca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023cab:	40                   	inc    eax
c0023cac:	eb 86                	jmp    c0023c34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x8e>
c0023cae:	31 d2                	xor    edx,edx
c0023cb0:	83 ec 0c             	sub    esp,0xc
c0023cb3:	57                   	push   edi
c0023cb4:	53                   	push   ebx
c0023cb5:	56                   	push   esi
c0023cb6:	52                   	push   edx
c0023cb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023cbb:	55                   	push   ebp
c0023cbc:	e8 f7 f9 ff ff       	call   c00236b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023cc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023cc5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023cc9:	42                   	inc    edx
c0023cca:	83 c4 20             	add    esp,0x20
c0023ccd:	83 fa 06             	cmp    edx,0x6
c0023cd0:	75 de                	jne    c0023cb0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10a>
c0023cd2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023cd7:	83 ec 0c             	sub    esp,0xc
c0023cda:	86 e0                	xchg   al,ah
c0023cdc:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023ce1:	6a 02                	push   0x2
c0023ce3:	57                   	push   edi
c0023ce4:	53                   	push   ebx
c0023ce5:	56                   	push   esi
c0023ce6:	55                   	push   ebp
c0023ce7:	e8 6e f8 ff ff       	call   c002355a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023cec:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023cf1:	83 c4 20             	add    esp,0x20
c0023cf4:	57                   	push   edi
c0023cf5:	53                   	push   ebx
c0023cf6:	56                   	push   esi
c0023cf7:	55                   	push   ebp
c0023cf8:	e8 2f f9 ff ff       	call   c002362c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023cfd:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023d01:	57                   	push   edi
c0023d02:	53                   	push   ebx
c0023d03:	56                   	push   esi
c0023d04:	55                   	push   ebp
c0023d05:	e8 98 f8 ff ff       	call   c00235a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023d0a:	b9 09 00 00 00       	mov    ecx,0x9
c0023d0f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023d14:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023d18:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023d1c:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023d20:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023d24:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023d28:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023d2c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023d30:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023d34:	83 ec 0c             	sub    esp,0xc
c0023d37:	fc                   	cld    
c0023d38:	89 e7                	mov    edi,esp
c0023d3a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023d3e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023d40:	55                   	push   ebp
c0023d41:	e8 ee fc ff ff       	call   c0023a34 <PCI::foundDevice(PCIDeviceInfo)>
c0023d46:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023d4c:	5b                   	pop    ebx
c0023d4d:	5e                   	pop    esi
c0023d4e:	5f                   	pop    edi
c0023d4f:	5d                   	pop    ebp
c0023d50:	c3                   	ret    
c0023d51:	90                   	nop

c0023d52 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023d52:	55                   	push   ebp
c0023d53:	57                   	push   edi
c0023d54:	56                   	push   esi
c0023d55:	53                   	push   ebx
c0023d56:	83 ec 0c             	sub    esp,0xc
c0023d59:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023d5d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023d62:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023d67:	6a 00                	push   0x0
c0023d69:	56                   	push   esi
c0023d6a:	57                   	push   edi
c0023d6b:	55                   	push   ebp
c0023d6c:	e8 31 f8 ff ff       	call   c00235a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023d71:	6a 00                	push   0x0
c0023d73:	56                   	push   esi
c0023d74:	57                   	push   edi
c0023d75:	55                   	push   ebp
c0023d76:	e8 2b fe ff ff       	call   c0023ba6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023d7b:	83 c4 20             	add    esp,0x20
c0023d7e:	6a 00                	push   0x0
c0023d80:	56                   	push   esi
c0023d81:	57                   	push   edi
c0023d82:	55                   	push   ebp
c0023d83:	e8 3c f8 ff ff       	call   c00235c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023d88:	83 c4 10             	add    esp,0x10
c0023d8b:	84 c0                	test   al,al
c0023d8d:	79 27                	jns    c0023db6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023d8f:	bb 01 00 00 00       	mov    ebx,0x1
c0023d94:	53                   	push   ebx
c0023d95:	56                   	push   esi
c0023d96:	57                   	push   edi
c0023d97:	55                   	push   ebp
c0023d98:	e8 05 f8 ff ff       	call   c00235a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023d9d:	83 c4 10             	add    esp,0x10
c0023da0:	66 40                	inc    ax
c0023da2:	74 0c                	je     c0023db0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023da4:	53                   	push   ebx
c0023da5:	56                   	push   esi
c0023da6:	57                   	push   edi
c0023da7:	55                   	push   ebp
c0023da8:	e8 f9 fd ff ff       	call   c0023ba6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023dad:	83 c4 10             	add    esp,0x10
c0023db0:	43                   	inc    ebx
c0023db1:	83 fb 08             	cmp    ebx,0x8
c0023db4:	75 de                	jne    c0023d94 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023db6:	83 c4 0c             	add    esp,0xc
c0023db9:	5b                   	pop    ebx
c0023dba:	5e                   	pop    esi
c0023dbb:	5f                   	pop    edi
c0023dbc:	5d                   	pop    ebp
c0023dbd:	c3                   	ret    

c0023dbe <PCI::detect()>:
c0023dbe:	56                   	push   esi
c0023dbf:	53                   	push   ebx
c0023dc0:	53                   	push   ebx
c0023dc1:	31 db                	xor    ebx,ebx
c0023dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023dc7:	6a 00                	push   0x0
c0023dc9:	6a 00                	push   0x0
c0023dcb:	6a 00                	push   0x0
c0023dcd:	56                   	push   esi
c0023dce:	e8 f1 f7 ff ff       	call   c00235c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	a8 80                	test   al,0x80
c0023dd8:	75 21                	jne    c0023dfb <PCI::detect()+0x3d>
c0023dda:	51                   	push   ecx
c0023ddb:	51                   	push   ecx
c0023ddc:	6a 00                	push   0x0
c0023dde:	56                   	push   esi
c0023ddf:	e8 2c fc ff ff       	call   c0023a10 <PCI::checkBus(unsigned char)>
c0023de4:	83 c4 10             	add    esp,0x10
c0023de7:	eb 24                	jmp    c0023e0d <PCI::detect()+0x4f>
c0023de9:	52                   	push   edx
c0023dea:	52                   	push   edx
c0023deb:	53                   	push   ebx
c0023dec:	43                   	inc    ebx
c0023ded:	56                   	push   esi
c0023dee:	e8 1d fc ff ff       	call   c0023a10 <PCI::checkBus(unsigned char)>
c0023df3:	83 c4 10             	add    esp,0x10
c0023df6:	83 fb 08             	cmp    ebx,0x8
c0023df9:	74 12                	je     c0023e0d <PCI::detect()+0x4f>
c0023dfb:	53                   	push   ebx
c0023dfc:	6a 00                	push   0x0
c0023dfe:	6a 00                	push   0x0
c0023e00:	56                   	push   esi
c0023e01:	e8 9c f7 ff ff       	call   c00235a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023e06:	83 c4 10             	add    esp,0x10
c0023e09:	66 40                	inc    ax
c0023e0b:	74 dc                	je     c0023de9 <PCI::detect()+0x2b>
c0023e0d:	58                   	pop    eax
c0023e0e:	5b                   	pop    ebx
c0023e0f:	5e                   	pop    esi
c0023e10:	c3                   	ret    
c0023e11:	90                   	nop

c0023e12 <IDE::close(int, int, void*)>:
c0023e12:	83 c8 ff             	or     eax,0xffffffff
c0023e15:	c3                   	ret    

c0023e16 <IDE::IDE()>:
c0023e16:	83 ec 0c             	sub    esp,0xc
c0023e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e1d:	83 ec 08             	sub    esp,0x8
c0023e20:	68 e4 db 02 c0       	push   0xc002dbe4
c0023e25:	50                   	push   eax
c0023e26:	e8 0d 08 ff ff       	call   c0014638 <HardDiskController::HardDiskController(char const*)>
c0023e2b:	83 c4 10             	add    esp,0x10
c0023e2e:	ba 24 de 02 c0       	mov    edx,0xc002de24
c0023e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e37:	89 10                	mov    DWORD PTR [eax],edx
c0023e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e3d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023e44:	90                   	nop
c0023e45:	83 c4 0c             	add    esp,0xc
c0023e48:	c3                   	ret    
c0023e49:	90                   	nop

c0023e4a <IDE::prepareInterrupt(unsigned char)>:
c0023e4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023e4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023e53:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023e5b:	c3                   	ret    

c0023e5c <selectDrive(unsigned char, unsigned char)>:
c0023e5c:	c3                   	ret    
c0023e5d:	90                   	nop

c0023e5e <IDE::getBase(unsigned char)>:
c0023e5e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023e67:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023e6f:	c3                   	ret    

c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023e70:	55                   	push   ebp
c0023e71:	57                   	push   edi
c0023e72:	56                   	push   esi
c0023e73:	53                   	push   ebx
c0023e74:	83 ec 1c             	sub    esp,0x1c
c0023e77:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023e7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023e7f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023e82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023e86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023e8a:	80 f9 03             	cmp    cl,0x3
c0023e8d:	77 51                	ja     c0023ee0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e93:	0f b6 f2             	movzx  esi,dl
c0023e96:	0f b6 db             	movzx  ebx,bl
c0023e99:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023e9c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023ea0:	83 ca 80             	or     edx,0xffffff80
c0023ea3:	0f b6 d2             	movzx  edx,dl
c0023ea6:	52                   	push   edx
c0023ea7:	6a 0c                	push   0xc
c0023ea9:	56                   	push   esi
c0023eaa:	57                   	push   edi
c0023eab:	e8 c0 ff ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023eb9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023ebd:	ee                   	out    dx,al
c0023ebe:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023ec3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023ec7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023ecb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ecf:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023ed7:	83 c4 2c             	add    esp,0x2c
c0023eda:	5b                   	pop    ebx
c0023edb:	5e                   	pop    esi
c0023edc:	5f                   	pop    edi
c0023edd:	5d                   	pop    ebp
c0023ede:	eb 90                	jmp    c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ee0:	80 fb 07             	cmp    bl,0x7
c0023ee3:	77 12                	ja     c0023ef7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023ee5:	0f b6 d2             	movzx  edx,dl
c0023ee8:	0f b6 db             	movzx  ebx,bl
c0023eeb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023ef3:	89 da                	mov    edx,ebx
c0023ef5:	eb 2f                	jmp    c0023f26 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023ef7:	80 fb 0d             	cmp    bl,0xd
c0023efa:	77 13                	ja     c0023f0f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023efc:	0f b6 d2             	movzx  edx,dl
c0023eff:	0f b6 db             	movzx  ebx,bl
c0023f02:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023f09:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023f0d:	eb 17                	jmp    c0023f26 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023f0f:	80 fb 15             	cmp    bl,0x15
c0023f12:	77 13                	ja     c0023f27 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023f14:	0f b6 d2             	movzx  edx,dl
c0023f17:	0f b6 db             	movzx  ebx,bl
c0023f1a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023f22:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023f26:	ee                   	out    dx,al
c0023f27:	83 c4 1c             	add    esp,0x1c
c0023f2a:	5b                   	pop    ebx
c0023f2b:	5e                   	pop    esi
c0023f2c:	5f                   	pop    edi
c0023f2d:	5d                   	pop    ebp
c0023f2e:	c3                   	ret    
c0023f2f:	90                   	nop

c0023f30 <IDE::read(unsigned char, unsigned char)>:
c0023f30:	55                   	push   ebp
c0023f31:	57                   	push   edi
c0023f32:	56                   	push   esi
c0023f33:	53                   	push   ebx
c0023f34:	83 ec 1c             	sub    esp,0x1c
c0023f37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023f3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023f3f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023f42:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023f46:	3c 03                	cmp    al,0x3
c0023f48:	77 43                	ja     c0023f8d <IDE::read(unsigned char, unsigned char)+0x5d>
c0023f4a:	0f b6 f2             	movzx  esi,dl
c0023f4d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023f50:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023f54:	83 c8 80             	or     eax,0xffffff80
c0023f57:	0f b6 c0             	movzx  eax,al
c0023f5a:	50                   	push   eax
c0023f5b:	6a 0c                	push   0xc
c0023f5d:	56                   	push   esi
c0023f5e:	57                   	push   edi
c0023f5f:	e8 0c ff ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f64:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023f69:	0f b6 c3             	movzx  eax,bl
c0023f6c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023f70:	ec                   	in     al,dx
c0023f71:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023f75:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023f7a:	52                   	push   edx
c0023f7b:	6a 0c                	push   0xc
c0023f7d:	56                   	push   esi
c0023f7e:	57                   	push   edi
c0023f7f:	e8 ec fe ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f84:	83 c4 20             	add    esp,0x20
c0023f87:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023f8b:	eb 49                	jmp    c0023fd6 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023f8d:	80 fb 07             	cmp    bl,0x7
c0023f90:	77 12                	ja     c0023fa4 <IDE::read(unsigned char, unsigned char)+0x74>
c0023f92:	0f b6 d2             	movzx  edx,dl
c0023f95:	0f b6 c3             	movzx  eax,bl
c0023f98:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023fa0:	89 c2                	mov    edx,eax
c0023fa2:	eb 31                	jmp    c0023fd5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023fa4:	80 fb 0d             	cmp    bl,0xd
c0023fa7:	77 13                	ja     c0023fbc <IDE::read(unsigned char, unsigned char)+0x8c>
c0023fa9:	0f b6 d2             	movzx  edx,dl
c0023fac:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023fb3:	0f b6 d3             	movzx  edx,bl
c0023fb6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023fba:	eb 19                	jmp    c0023fd5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023fbc:	31 c0                	xor    eax,eax
c0023fbe:	80 fb 15             	cmp    bl,0x15
c0023fc1:	77 13                	ja     c0023fd6 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023fc3:	0f b6 d2             	movzx  edx,dl
c0023fc6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023fce:	0f b6 d3             	movzx  edx,bl
c0023fd1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023fd5:	ec                   	in     al,dx
c0023fd6:	83 c4 1c             	add    esp,0x1c
c0023fd9:	5b                   	pop    ebx
c0023fda:	5e                   	pop    esi
c0023fdb:	5f                   	pop    edi
c0023fdc:	5d                   	pop    ebp
c0023fdd:	c3                   	ret    

c0023fde <IDE::waitInterrupt(unsigned char)>:
c0023fde:	55                   	push   ebp
c0023fdf:	57                   	push   edi
c0023fe0:	56                   	push   esi
c0023fe1:	53                   	push   ebx
c0023fe2:	31 db                	xor    ebx,ebx
c0023fe4:	83 ec 0c             	sub    esp,0xc
c0023fe7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023feb:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023ff0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023ff8:	89 e8                	mov    eax,ebp
c0023ffa:	84 c0                	test   al,al
c0023ffc:	75 34                	jne    c0024032 <IDE::waitInterrupt(unsigned char)+0x54>
c0023ffe:	52                   	push   edx
c0023fff:	6a 0c                	push   0xc
c0024001:	56                   	push   esi
c0024002:	57                   	push   edi
c0024003:	e8 28 ff ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024008:	83 c4 10             	add    esp,0x10
c002400b:	a8 01                	test   al,0x1
c002400d:	75 2b                	jne    c002403a <IDE::waitInterrupt(unsigned char)+0x5c>
c002400f:	f6 c3 04             	test   bl,0x4
c0024012:	75 16                	jne    c002402a <IDE::waitInterrupt(unsigned char)+0x4c>
c0024014:	83 fb 32             	cmp    ebx,0x32
c0024017:	7e 11                	jle    c002402a <IDE::waitInterrupt(unsigned char)+0x4c>
c0024019:	50                   	push   eax
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	68 80 96 98 00       	push   0x989680
c0024022:	e8 28 aa ff ff       	call   c001ea4f <nanoSleep(unsigned long long)>
c0024027:	83 c4 10             	add    esp,0x10
c002402a:	83 fb 3c             	cmp    ebx,0x3c
c002402d:	74 0b                	je     c002403a <IDE::waitInterrupt(unsigned char)+0x5c>
c002402f:	43                   	inc    ebx
c0024030:	eb be                	jmp    c0023ff0 <IDE::waitInterrupt(unsigned char)+0x12>
c0024032:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002403a:	83 c4 0c             	add    esp,0xc
c002403d:	89 e8                	mov    eax,ebp
c002403f:	5b                   	pop    ebx
c0024040:	5e                   	pop    esi
c0024041:	5f                   	pop    edi
c0024042:	5d                   	pop    ebp
c0024043:	c3                   	ret    

c0024044 <ideChannel0IRQHandler(regs*, void*)>:
c0024044:	83 ec 10             	sub    esp,0x10
c0024047:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002404b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0024052:	6a 07                	push   0x7
c0024054:	6a 00                	push   0x0
c0024056:	50                   	push   eax
c0024057:	e8 d4 fe ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c002405c:	83 c4 1c             	add    esp,0x1c
c002405f:	c3                   	ret    

c0024060 <ideChannel1IRQHandler(regs*, void*)>:
c0024060:	83 ec 10             	sub    esp,0x10
c0024063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024067:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002406e:	6a 07                	push   0x7
c0024070:	6a 01                	push   0x1
c0024072:	50                   	push   eax
c0024073:	e8 b8 fe ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024078:	83 c4 1c             	add    esp,0x1c
c002407b:	c3                   	ret    

c002407c <IDE::enableIRQs(unsigned char, bool)>:
c002407c:	57                   	push   edi
c002407d:	56                   	push   esi
c002407e:	be 04 00 00 00       	mov    esi,0x4
c0024083:	53                   	push   ebx
c0024084:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0024089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002408d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0024092:	0f 94 c0             	sete   al
c0024095:	d1 e0                	shl    eax,1
c0024097:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002409e:	0f b6 c0             	movzx  eax,al
c00240a1:	50                   	push   eax
c00240a2:	6a 0c                	push   0xc
c00240a4:	57                   	push   edi
c00240a5:	53                   	push   ebx
c00240a6:	e8 c5 fd ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ab:	83 c4 10             	add    esp,0x10
c00240ae:	50                   	push   eax
c00240af:	6a 0c                	push   0xc
c00240b1:	57                   	push   edi
c00240b2:	53                   	push   ebx
c00240b3:	e8 78 fe ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c00240b8:	83 c4 10             	add    esp,0x10
c00240bb:	4e                   	dec    esi
c00240bc:	75 f0                	jne    c00240ae <IDE::enableIRQs(unsigned char, bool)+0x32>
c00240be:	5b                   	pop    ebx
c00240bf:	5e                   	pop    esi
c00240c0:	5f                   	pop    edi
c00240c1:	c3                   	ret    

c00240c2 <IDE::open(int, int, void*)>:
c00240c2:	55                   	push   ebp
c00240c3:	57                   	push   edi
c00240c4:	56                   	push   esi
c00240c5:	53                   	push   ebx
c00240c6:	83 ec 1c             	sub    esp,0x1c
c00240c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00240cd:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00240d6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00240df:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00240e6:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00240ed:	0f 85 b0 02 00 00    	jne    c00243a3 <IDE::open(int, int, void*)+0x2e1>
c00240f3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00240f9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00240fd:	83 e0 7f             	and    eax,0x7f
c0024100:	3c 05                	cmp    al,0x5
c0024102:	74 04                	je     c0024108 <IDE::open(int, int, void*)+0x46>
c0024104:	3c 0f                	cmp    al,0xf
c0024106:	75 32                	jne    c002413a <IDE::open(int, int, void*)+0x78>
c0024108:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002410e:	83 e0 fc             	and    eax,0xfffffffc
c0024111:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0024118:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002411e:	83 e0 fc             	and    eax,0xfffffffc
c0024121:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0024128:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002412e:	83 e0 fc             	and    eax,0xfffffffc
c0024131:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0024138:	eb 14                	jmp    c002414e <IDE::open(int, int, void*)+0x8c>
c002413a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0024144:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002414e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0024155:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002415c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024160:	89 c6                	mov    esi,eax
c0024162:	bf f8 0c 00 00       	mov    edi,0xcf8
c0024167:	c1 e6 10             	shl    esi,0x10
c002416a:	89 e8                	mov    eax,ebp
c002416c:	89 fa                	mov    edx,edi
c002416e:	c1 e0 0b             	shl    eax,0xb
c0024171:	09 f0                	or     eax,esi
c0024173:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002417a:	c1 e6 08             	shl    esi,0x8
c002417d:	09 c6                	or     esi,eax
c002417f:	89 f0                	mov    eax,esi
c0024181:	0d 08 00 00 80       	or     eax,0x80000008
c0024186:	ef                   	out    dx,eax
c0024187:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002418c:	89 ca                	mov    edx,ecx
c002418e:	ed                   	in     eax,dx
c002418f:	c1 e8 10             	shr    eax,0x10
c0024192:	3d ff ff 00 00       	cmp    eax,0xffff
c0024197:	0f 84 f5 00 00 00    	je     c0024292 <IDE::open(int, int, void*)+0x1d0>
c002419d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00241a3:	89 fa                	mov    edx,edi
c00241a5:	89 f0                	mov    eax,esi
c00241a7:	ef                   	out    dx,eax
c00241a8:	b0 fe                	mov    al,0xfe
c00241aa:	89 ca                	mov    edx,ecx
c00241ac:	ee                   	out    dx,al
c00241ad:	89 f0                	mov    eax,esi
c00241af:	89 fa                	mov    edx,edi
c00241b1:	ef                   	out    dx,eax
c00241b2:	89 ca                	mov    edx,ecx
c00241b4:	ed                   	in     eax,dx
c00241b5:	3c fe                	cmp    al,0xfe
c00241b7:	0f 85 a9 00 00 00    	jne    c0024266 <IDE::open(int, int, void*)+0x1a4>
c00241bd:	8b 15 68 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f568
c00241c3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00241ca:	74 33                	je     c00241ff <IDE::open(int, int, void*)+0x13d>
c00241cc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00241d2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00241d6:	40                   	inc    eax
c00241d7:	83 ec 0c             	sub    esp,0xc
c00241da:	0f b6 c0             	movzx  eax,al
c00241dd:	50                   	push   eax
c00241de:	55                   	push   ebp
c00241df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241e3:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00241e9:	51                   	push   ecx
c00241ea:	e8 61 41 ff ff       	call   c0018350 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00241ef:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00241f4:	83 c4 1c             	add    esp,0x1c
c00241f7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00241fd:	eb 0a                	jmp    c0024209 <IDE::open(int, int, void*)+0x147>
c00241ff:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0024209:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0024210:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0024217:	c1 e1 10             	shl    ecx,0x10
c002421a:	c1 e0 08             	shl    eax,0x8
c002421d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0024222:	09 c1                	or     ecx,eax
c0024224:	89 fa                	mov    edx,edi
c0024226:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002422d:	c1 e0 0b             	shl    eax,0xb
c0024230:	09 c1                	or     ecx,eax
c0024232:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0024238:	89 c8                	mov    eax,ecx
c002423a:	ef                   	out    dx,eax
c002423b:	be fc 0c 00 00       	mov    esi,0xcfc
c0024240:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0024246:	89 f2                	mov    edx,esi
c0024248:	ee                   	out    dx,al
c0024249:	89 c8                	mov    eax,ecx
c002424b:	89 fa                	mov    edx,edi
c002424d:	ef                   	out    dx,eax
c002424e:	89 f2                	mov    edx,esi
c0024250:	ed                   	in     eax,dx
c0024251:	0f b6 c0             	movzx  eax,al
c0024254:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002425a:	74 46                	je     c00242a2 <IDE::open(int, int, void*)+0x1e0>
c002425c:	83 ec 0c             	sub    esp,0xc
c002425f:	68 fc db 02 c0       	push   0xc002dbfc
c0024264:	eb 34                	jmp    c002429a <IDE::open(int, int, void*)+0x1d8>
c0024266:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002426f:	75 17                	jne    c0024288 <IDE::open(int, int, void*)+0x1c6>
c0024271:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0024276:	74 07                	je     c002427f <IDE::open(int, int, void*)+0x1bd>
c0024278:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002427d:	75 09                	jne    c0024288 <IDE::open(int, int, void*)+0x1c6>
c002427f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0024286:	eb 1a                	jmp    c00242a2 <IDE::open(int, int, void*)+0x1e0>
c0024288:	83 ec 0c             	sub    esp,0xc
c002428b:	68 04 dc 02 c0       	push   0xc002dc04
c0024290:	eb 08                	jmp    c002429a <IDE::open(int, int, void*)+0x1d8>
c0024292:	83 ec 0c             	sub    esp,0xc
c0024295:	68 35 dc 02 c0       	push   0xc002dc35
c002429a:	e8 fa 66 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c002429f:	83 c4 10             	add    esp,0x10
c00242a2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00242a9:	79 1a                	jns    c00242c5 <IDE::open(int, int, void*)+0x203>
c00242ab:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00242b1:	83 e0 fc             	and    eax,0xfffffffc
c00242b4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00242bb:	83 c0 08             	add    eax,0x8
c00242be:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00242c5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00242cb:	89 c2                	mov    edx,eax
c00242cd:	83 e2 0f             	and    edx,0xf
c00242d0:	66 83 fa 08          	cmp    dx,0x8
c00242d4:	75 0a                	jne    c00242e0 <IDE::open(int, int, void*)+0x21e>
c00242d6:	83 e8 02             	sub    eax,0x2
c00242d9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00242e0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00242e6:	89 c2                	mov    edx,eax
c00242e8:	83 e2 0f             	and    edx,0xf
c00242eb:	66 83 fa 08          	cmp    dx,0x8
c00242ef:	75 0a                	jne    c00242fb <IDE::open(int, int, void*)+0x239>
c00242f1:	83 e8 02             	sub    eax,0x2
c00242f4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00242fb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0024302:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0024309:	89 d0                	mov    eax,edx
c002430b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002430e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0024312:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0024316:	8d 4a 01             	lea    ecx,[edx+0x1]
c0024319:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002431e:	0f b6 c9             	movzx  ecx,cl
c0024321:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0024328:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002432b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002432f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0024333:	8d 50 02             	lea    edx,[eax+0x2]
c0024336:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002433b:	0f b6 d2             	movzx  edx,dl
c002433e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0024344:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0024347:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002434b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002434f:	8d 48 03             	lea    ecx,[eax+0x3]
c0024352:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0024357:	0f b6 c9             	movzx  ecx,cl
c002435a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0024360:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0024363:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0024367:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002436b:	8d 50 04             	lea    edx,[eax+0x4]
c002436e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0024374:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024379:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0024380:	66 85 f6             	test   si,si
c0024383:	74 3e                	je     c00243c3 <IDE::open(int, int, void*)+0x301>
c0024385:	0f b6 d2             	movzx  edx,dl
c0024388:	83 c0 05             	add    eax,0x5
c002438b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002438e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0024392:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0024396:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002439c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00243a1:	eb 20                	jmp    c00243c3 <IDE::open(int, int, void*)+0x301>
c00243a3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00243ad:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00243b7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00243be:	e9 02 ff ff ff       	jmp    c00242c5 <IDE::open(int, int, void*)+0x203>
c00243c3:	52                   	push   edx
c00243c4:	52                   	push   edx
c00243c5:	6a 00                	push   0x0
c00243c7:	53                   	push   ebx
c00243c8:	e8 7d fa ff ff       	call   c0023e4a <IDE::prepareInterrupt(unsigned char)>
c00243cd:	59                   	pop    ecx
c00243ce:	5e                   	pop    esi
c00243cf:	6a 01                	push   0x1
c00243d1:	53                   	push   ebx
c00243d2:	e8 73 fa ff ff       	call   c0023e4a <IDE::prepareInterrupt(unsigned char)>
c00243d7:	83 c4 0c             	add    esp,0xc
c00243da:	6a 00                	push   0x0
c00243dc:	6a 00                	push   0x0
c00243de:	53                   	push   ebx
c00243df:	e8 98 fc ff ff       	call   c002407c <IDE::enableIRQs(unsigned char, bool)>
c00243e4:	83 c4 0c             	add    esp,0xc
c00243e7:	6a 00                	push   0x0
c00243e9:	6a 01                	push   0x1
c00243eb:	53                   	push   ebx
c00243ec:	e8 8b fc ff ff       	call   c002407c <IDE::enableIRQs(unsigned char, bool)>
c00243f1:	83 c4 10             	add    esp,0x10
c00243f4:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00243fb:	74 40                	je     c002443d <IDE::open(int, int, void*)+0x37b>
c00243fd:	83 ec 0c             	sub    esp,0xc
c0024400:	68 5f dc 02 c0       	push   0xc002dc5f
c0024405:	e8 47 ea fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c002440a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002440d:	6a 01                	push   0x1
c002440f:	68 44 40 02 c0       	push   0xc0024044
c0024414:	6a 0e                	push   0xe
c0024416:	53                   	push   ebx
c0024417:	e8 e6 fd fe ff       	call   c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002441c:	83 c4 14             	add    esp,0x14
c002441f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0024425:	53                   	push   ebx
c0024426:	6a 01                	push   0x1
c0024428:	68 60 40 02 c0       	push   0xc0024060
c002442d:	6a 0f                	push   0xf
c002442f:	53                   	push   ebx
c0024430:	e8 cd fd fe ff       	call   c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024435:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002443b:	eb 4a                	jmp    c0024487 <IDE::open(int, int, void*)+0x3c5>
c002443d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0024447:	50                   	push   eax
c0024448:	6a 0f                	push   0xf
c002444a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024450:	68 7b dc 02 c0       	push   0xc002dc7b
c0024455:	e8 f7 e9 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c002445a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002445d:	6a 00                	push   0x0
c002445f:	68 44 40 02 c0       	push   0xc0024044
c0024464:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002446a:	53                   	push   ebx
c002446b:	e8 92 fd fe ff       	call   c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024470:	83 c4 14             	add    esp,0x14
c0024473:	53                   	push   ebx
c0024474:	6a 00                	push   0x0
c0024476:	68 60 40 02 c0       	push   0xc0024060
c002447b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0024481:	53                   	push   ebx
c0024482:	e8 7b fd fe ff       	call   c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024487:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024489:	83 c4 20             	add    esp,0x20
c002448c:	83 ec 0c             	sub    esp,0xc
c002448f:	53                   	push   ebx
c0024490:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0024493:	83 c4 0c             	add    esp,0xc
c0024496:	6a 07                	push   0x7
c0024498:	6a 00                	push   0x0
c002449a:	53                   	push   ebx
c002449b:	e8 90 fa ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c00244a0:	83 c4 0c             	add    esp,0xc
c00244a3:	6a 07                	push   0x7
c00244a5:	6a 01                	push   0x1
c00244a7:	53                   	push   ebx
c00244a8:	e8 83 fa ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c00244ad:	83 c4 0c             	add    esp,0xc
c00244b0:	6a 01                	push   0x1
c00244b2:	6a 00                	push   0x0
c00244b4:	53                   	push   ebx
c00244b5:	e8 c2 fb ff ff       	call   c002407c <IDE::enableIRQs(unsigned char, bool)>
c00244ba:	83 c4 0c             	add    esp,0xc
c00244bd:	6a 01                	push   0x1
c00244bf:	6a 01                	push   0x1
c00244c1:	53                   	push   ebx
c00244c2:	e8 b5 fb ff ff       	call   c002407c <IDE::enableIRQs(unsigned char, bool)>
c00244c7:	83 c4 2c             	add    esp,0x2c
c00244ca:	31 c0                	xor    eax,eax
c00244cc:	5b                   	pop    ebx
c00244cd:	5e                   	pop    esi
c00244ce:	5f                   	pop    edi
c00244cf:	5d                   	pop    ebp
c00244d0:	c3                   	ret    
c00244d1:	90                   	nop

c00244d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00244d2:	55                   	push   ebp
c00244d3:	57                   	push   edi
c00244d4:	56                   	push   esi
c00244d5:	53                   	push   ebx
c00244d6:	83 ec 1c             	sub    esp,0x1c
c00244d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00244dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00244e1:	8d 50 f8             	lea    edx,[eax-0x8]
c00244e4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00244e8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00244ec:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00244f0:	80 fa 03             	cmp    dl,0x3
c00244f3:	77 5d                	ja     c0024552 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00244f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00244f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00244fd:	0f b6 db             	movzx  ebx,bl
c0024500:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024503:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0024507:	83 ca 80             	or     edx,0xffffff80
c002450a:	0f b6 d2             	movzx  edx,dl
c002450d:	52                   	push   edx
c002450e:	6a 0c                	push   0xc
c0024510:	53                   	push   ebx
c0024511:	56                   	push   esi
c0024512:	e8 59 f9 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024517:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002451c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024520:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024524:	0f b6 c0             	movzx  eax,al
c0024527:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002452b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002452d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024532:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0024536:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002453a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002453e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0024546:	83 c4 2c             	add    esp,0x2c
c0024549:	5b                   	pop    ebx
c002454a:	5e                   	pop    esi
c002454b:	5f                   	pop    edi
c002454c:	5d                   	pop    ebp
c002454d:	e9 1e f9 ff ff       	jmp    c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024552:	3c 07                	cmp    al,0x7
c0024554:	77 10                	ja     c0024566 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0024556:	0f b6 db             	movzx  ebx,bl
c0024559:	0f b6 d0             	movzx  edx,al
c002455c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024564:	eb 2d                	jmp    c0024593 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024566:	3c 0d                	cmp    al,0xd
c0024568:	77 13                	ja     c002457d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002456a:	0f b6 db             	movzx  ebx,bl
c002456d:	0f b6 c0             	movzx  eax,al
c0024570:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0024577:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002457b:	eb 16                	jmp    c0024593 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002457d:	3c 15                	cmp    al,0x15
c002457f:	77 14                	ja     c0024595 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024581:	0f b6 db             	movzx  ebx,bl
c0024584:	0f b6 c0             	movzx  eax,al
c0024587:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002458f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0024593:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024595:	83 c4 1c             	add    esp,0x1c
c0024598:	5b                   	pop    ebx
c0024599:	5e                   	pop    esi
c002459a:	5f                   	pop    edi
c002459b:	5d                   	pop    ebp
c002459c:	c3                   	ret    
c002459d:	90                   	nop

c002459e <IDE::detect()>:
c002459e:	55                   	push   ebp
c002459f:	57                   	push   edi
c00245a0:	56                   	push   esi
c00245a1:	53                   	push   ebx
c00245a2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00245a8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00245af:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00245b6:	0f 85 be 02 00 00    	jne    c002487a <IDE::detect()+0x2dc>
c00245bc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00245c3:	31 f6                	xor    esi,esi
c00245c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00245cd:	31 ed                	xor    ebp,ebp
c00245cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00245d3:	c1 e0 06             	shl    eax,0x6
c00245d6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00245de:	89 e8                	mov    eax,ebp
c00245e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00245e4:	c1 e0 04             	shl    eax,0x4
c00245e7:	83 c8 a0             	or     eax,0xffffffa0
c00245ea:	0f b6 c0             	movzx  eax,al
c00245ed:	50                   	push   eax
c00245ee:	6a 06                	push   0x6
c00245f0:	56                   	push   esi
c00245f1:	53                   	push   ebx
c00245f2:	e8 79 f8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245f7:	83 c4 0c             	add    esp,0xc
c00245fa:	6a 0c                	push   0xc
c00245fc:	56                   	push   esi
c00245fd:	53                   	push   ebx
c00245fe:	e8 2d f9 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024603:	83 c4 0c             	add    esp,0xc
c0024606:	6a 0c                	push   0xc
c0024608:	56                   	push   esi
c0024609:	53                   	push   ebx
c002460a:	e8 21 f9 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c002460f:	83 c4 0c             	add    esp,0xc
c0024612:	6a 0c                	push   0xc
c0024614:	56                   	push   esi
c0024615:	53                   	push   ebx
c0024616:	e8 15 f9 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c002461b:	83 c4 0c             	add    esp,0xc
c002461e:	6a 0c                	push   0xc
c0024620:	56                   	push   esi
c0024621:	53                   	push   ebx
c0024622:	e8 09 f9 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024627:	68 ec 00 00 00       	push   0xec
c002462c:	6a 07                	push   0x7
c002462e:	56                   	push   esi
c002462f:	53                   	push   ebx
c0024630:	e8 3b f8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024635:	83 c4 1c             	add    esp,0x1c
c0024638:	6a 0c                	push   0xc
c002463a:	56                   	push   esi
c002463b:	53                   	push   ebx
c002463c:	e8 ef f8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024641:	83 c4 0c             	add    esp,0xc
c0024644:	6a 0c                	push   0xc
c0024646:	56                   	push   esi
c0024647:	53                   	push   ebx
c0024648:	e8 e3 f8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c002464d:	83 c4 0c             	add    esp,0xc
c0024650:	6a 0c                	push   0xc
c0024652:	56                   	push   esi
c0024653:	53                   	push   ebx
c0024654:	e8 d7 f8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024659:	83 c4 0c             	add    esp,0xc
c002465c:	6a 0c                	push   0xc
c002465e:	56                   	push   esi
c002465f:	53                   	push   ebx
c0024660:	e8 cb f8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024665:	83 c4 0c             	add    esp,0xc
c0024668:	6a 0c                	push   0xc
c002466a:	56                   	push   esi
c002466b:	53                   	push   ebx
c002466c:	e8 bf f8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024671:	83 c4 10             	add    esp,0x10
c0024674:	84 c0                	test   al,al
c0024676:	0f 84 8b 01 00 00    	je     c0024807 <IDE::detect()+0x269>
c002467c:	31 ff                	xor    edi,edi
c002467e:	50                   	push   eax
c002467f:	6a 0c                	push   0xc
c0024681:	56                   	push   esi
c0024682:	53                   	push   ebx
c0024683:	e8 a8 f8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024688:	83 c4 10             	add    esp,0x10
c002468b:	a8 01                	test   al,0x1
c002468d:	0f 85 8e 01 00 00    	jne    c0024821 <IDE::detect()+0x283>
c0024693:	84 c0                	test   al,al
c0024695:	78 04                	js     c002469b <IDE::detect()+0xfd>
c0024697:	a8 08                	test   al,0x8
c0024699:	75 27                	jne    c00246c2 <IDE::detect()+0x124>
c002469b:	47                   	inc    edi
c002469c:	81 ff 17 01 00 00    	cmp    edi,0x117
c00246a2:	7e da                	jle    c002467e <IDE::detect()+0xe0>
c00246a4:	50                   	push   eax
c00246a5:	50                   	push   eax
c00246a6:	6a 00                	push   0x0
c00246a8:	68 40 4b 4c 00       	push   0x4c4b40
c00246ad:	e8 9d a3 ff ff       	call   c001ea4f <nanoSleep(unsigned long long)>
c00246b2:	83 c4 10             	add    esp,0x10
c00246b5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00246bb:	75 c1                	jne    c002467e <IDE::detect()+0xe0>
c00246bd:	e9 5f 01 00 00       	jmp    c0024821 <IDE::detect()+0x283>
c00246c2:	31 c9                	xor    ecx,ecx
c00246c4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00246c8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00246cc:	83 ec 0c             	sub    esp,0xc
c00246cf:	68 80 00 00 00       	push   0x80
c00246d4:	57                   	push   edi
c00246d5:	6a 00                	push   0x0
c00246d7:	56                   	push   esi
c00246d8:	53                   	push   ebx
c00246d9:	e8 f4 fd ff ff       	call   c00244d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00246de:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00246e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00246e7:	89 d1                	mov    ecx,edx
c00246e9:	c1 e0 06             	shl    eax,0x6
c00246ec:	01 d8                	add    eax,ebx
c00246ee:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00246f5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00246fc:	89 f2                	mov    edx,esi
c00246fe:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024704:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024708:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002470e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024712:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024719:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024721:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024728:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024730:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024736:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002473d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024743:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024747:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002474b:	83 c4 20             	add    esp,0x20
c002474e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024751:	83 c0 02             	add    eax,0x2
c0024754:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002475a:	83 c7 02             	add    edi,0x2
c002475d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024760:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024766:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002476a:	75 e2                	jne    c002474e <IDE::detect()+0x1b0>
c002476c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024770:	c1 e0 06             	shl    eax,0x6
c0024773:	01 d8                	add    eax,ebx
c0024775:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002477b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024782:	66 c1 ea 09          	shr    dx,0x9
c0024786:	83 e2 01             	and    edx,0x1
c0024789:	84 c9                	test   cl,cl
c002478b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024791:	75 2f                	jne    c00247c2 <IDE::detect()+0x224>
c0024793:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024799:	85 c0                	test   eax,eax
c002479b:	74 66                	je     c0024803 <IDE::detect()+0x265>
c002479d:	50                   	push   eax
c002479e:	55                   	push   ebp
c002479f:	56                   	push   esi
c00247a0:	68 97 dc 02 c0       	push   0xc002dc97
c00247a5:	e8 a7 e6 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00247aa:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00247b1:	e8 d6 b0 fe ff       	call   c000f88c <malloc>
c00247b6:	89 c7                	mov    edi,eax
c00247b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00247bb:	e8 78 06 00 00       	call   c0024e38 <ATA::ATA()>
c00247c0:	eb 28                	jmp    c00247ea <IDE::detect()+0x24c>
c00247c2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00247c8:	55                   	push   ebp
c00247c9:	56                   	push   esi
c00247ca:	68 c6 dc 02 c0       	push   0xc002dcc6
c00247cf:	e8 7d e6 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00247d4:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247db:	e8 ac b0 fe ff       	call   c000f88c <malloc>
c00247e0:	89 c7                	mov    edi,eax
c00247e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00247e5:	e8 8e 0c 00 00       	call   c0025478 <ATAPI::ATAPI()>
c00247ea:	5a                   	pop    edx
c00247eb:	59                   	pop    ecx
c00247ec:	57                   	push   edi
c00247ed:	53                   	push   ebx
c00247ee:	e8 97 fa fe ff       	call   c001428a <Device::addChild(Device*)>
c00247f3:	8b 07                	mov    eax,DWORD PTR [edi]
c00247f5:	53                   	push   ebx
c00247f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00247fa:	6a 00                	push   0x0
c00247fc:	57                   	push   edi
c00247fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024800:	83 c4 20             	add    esp,0x20
c0024803:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024807:	4d                   	dec    ebp
c0024808:	74 0a                	je     c0024814 <IDE::detect()+0x276>
c002480a:	bd 01 00 00 00       	mov    ebp,0x1
c002480f:	e9 bb fd ff ff       	jmp    c00245cf <IDE::detect()+0x31>
c0024814:	4e                   	dec    esi
c0024815:	74 63                	je     c002487a <IDE::detect()+0x2dc>
c0024817:	be 01 00 00 00       	mov    esi,0x1
c002481c:	e9 ac fd ff ff       	jmp    c00245cd <IDE::detect()+0x2f>
c0024821:	50                   	push   eax
c0024822:	6a 04                	push   0x4
c0024824:	56                   	push   esi
c0024825:	53                   	push   ebx
c0024826:	e8 05 f7 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c002482b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002482f:	83 c4 0c             	add    esp,0xc
c0024832:	6a 05                	push   0x5
c0024834:	56                   	push   esi
c0024835:	53                   	push   ebx
c0024836:	e8 f5 f6 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c002483b:	83 c4 10             	add    esp,0x10
c002483e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024842:	80 fa 14             	cmp    dl,0x14
c0024845:	75 04                	jne    c002484b <IDE::detect()+0x2ad>
c0024847:	3c eb                	cmp    al,0xeb
c0024849:	eb 07                	jmp    c0024852 <IDE::detect()+0x2b4>
c002484b:	3c 96                	cmp    al,0x96
c002484d:	75 b8                	jne    c0024807 <IDE::detect()+0x269>
c002484f:	80 fa 69             	cmp    dl,0x69
c0024852:	75 b3                	jne    c0024807 <IDE::detect()+0x269>
c0024854:	68 a1 00 00 00       	push   0xa1
c0024859:	6a 07                	push   0x7
c002485b:	56                   	push   esi
c002485c:	53                   	push   ebx
c002485d:	e8 0e f6 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024862:	5f                   	pop    edi
c0024863:	58                   	pop    eax
c0024864:	6a 00                	push   0x0
c0024866:	68 40 42 0f 00       	push   0xf4240
c002486b:	e8 df a1 ff ff       	call   c001ea4f <nanoSleep(unsigned long long)>
c0024870:	83 c4 10             	add    esp,0x10
c0024873:	b1 01                	mov    cl,0x1
c0024875:	e9 4a fe ff ff       	jmp    c00246c4 <IDE::detect()+0x126>
c002487a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024880:	5b                   	pop    ebx
c0024881:	5e                   	pop    esi
c0024882:	5f                   	pop    edi
c0024883:	5d                   	pop    ebp
c0024884:	c3                   	ret    
c0024885:	90                   	nop

c0024886 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0024886:	55                   	push   ebp
c0024887:	57                   	push   edi
c0024888:	56                   	push   esi
c0024889:	53                   	push   ebx
c002488a:	83 ec 1c             	sub    esp,0x1c
c002488d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024891:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024895:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024899:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002489d:	88 c3                	mov    bl,al
c002489f:	84 c0                	test   al,al
c00248a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00248a5:	0f 84 67 01 00 00    	je     c0024a12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00248ab:	83 ec 0c             	sub    esp,0xc
c00248ae:	68 f7 dc 02 c0       	push   0xc002dcf7
c00248b3:	e8 99 e5 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00248b8:	83 c4 10             	add    esp,0x10
c00248bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248bf:	3c 01                	cmp    al,0x1
c00248c1:	75 17                	jne    c00248da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00248c3:	83 ec 0c             	sub    esp,0xc
c00248c6:	b3 13                	mov    bl,0x13
c00248c8:	68 03 dd 02 c0       	push   0xc002dd03
c00248cd:	e8 7f e5 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00248d2:	83 c4 10             	add    esp,0x10
c00248d5:	e9 25 01 00 00       	jmp    c00249ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00248da:	3c 02                	cmp    al,0x2
c00248dc:	0f 85 ef 00 00 00    	jne    c00249d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00248e2:	d1 e6                	shl    esi,1
c00248e4:	09 ee                	or     esi,ebp
c00248e6:	52                   	push   edx
c00248e7:	89 f0                	mov    eax,esi
c00248e9:	6a 01                	push   0x1
c00248eb:	0f b6 f0             	movzx  esi,al
c00248ee:	c1 e6 06             	shl    esi,0x6
c00248f1:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00248f9:	50                   	push   eax
c00248fa:	57                   	push   edi
c00248fb:	e8 30 f6 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024900:	83 c4 10             	add    esp,0x10
c0024903:	89 c6                	mov    esi,eax
c0024905:	a8 01                	test   al,0x1
c0024907:	74 12                	je     c002491b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024909:	83 ec 0c             	sub    esp,0xc
c002490c:	b3 07                	mov    bl,0x7
c002490e:	68 18 dd 02 c0       	push   0xc002dd18
c0024913:	e8 39 e5 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024918:	83 c4 10             	add    esp,0x10
c002491b:	f7 c6 02 00 00 00    	test   esi,0x2
c0024921:	74 12                	je     c0024935 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024923:	83 ec 0c             	sub    esp,0xc
c0024926:	b3 03                	mov    bl,0x3
c0024928:	68 36 dd 02 c0       	push   0xc002dd36
c002492d:	e8 1f e5 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024932:	83 c4 10             	add    esp,0x10
c0024935:	f7 c6 04 00 00 00    	test   esi,0x4
c002493b:	74 12                	je     c002494f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002493d:	83 ec 0c             	sub    esp,0xc
c0024940:	b3 14                	mov    bl,0x14
c0024942:	68 56 dd 02 c0       	push   0xc002dd56
c0024947:	e8 05 e5 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c002494c:	83 c4 10             	add    esp,0x10
c002494f:	f7 c6 08 00 00 00    	test   esi,0x8
c0024955:	74 12                	je     c0024969 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024957:	83 ec 0c             	sub    esp,0xc
c002495a:	b3 03                	mov    bl,0x3
c002495c:	68 36 dd 02 c0       	push   0xc002dd36
c0024961:	e8 eb e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024966:	83 c4 10             	add    esp,0x10
c0024969:	f7 c6 10 00 00 00    	test   esi,0x10
c002496f:	74 12                	je     c0024983 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024971:	83 ec 0c             	sub    esp,0xc
c0024974:	b3 15                	mov    bl,0x15
c0024976:	68 6e dd 02 c0       	push   0xc002dd6e
c002497b:	e8 d1 e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024980:	83 c4 10             	add    esp,0x10
c0024983:	f7 c6 20 00 00 00    	test   esi,0x20
c0024989:	74 12                	je     c002499d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002498b:	83 ec 0c             	sub    esp,0xc
c002498e:	b3 03                	mov    bl,0x3
c0024990:	68 36 dd 02 c0       	push   0xc002dd36
c0024995:	e8 b7 e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c002499a:	83 c4 10             	add    esp,0x10
c002499d:	f7 c6 40 00 00 00    	test   esi,0x40
c00249a3:	74 12                	je     c00249b7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00249a5:	83 ec 0c             	sub    esp,0xc
c00249a8:	b3 16                	mov    bl,0x16
c00249aa:	68 88 dd 02 c0       	push   0xc002dd88
c00249af:	e8 9d e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00249b4:	83 c4 10             	add    esp,0x10
c00249b7:	89 f0                	mov    eax,esi
c00249b9:	84 c0                	test   al,al
c00249bb:	79 42                	jns    c00249ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00249bd:	83 ec 0c             	sub    esp,0xc
c00249c0:	b3 0d                	mov    bl,0xd
c00249c2:	68 a9 dd 02 c0       	push   0xc002dda9
c00249c7:	e8 85 e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00249cc:	83 c4 10             	add    esp,0x10
c00249cf:	eb 2e                	jmp    c00249ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00249d1:	3c 03                	cmp    al,0x3
c00249d3:	75 14                	jne    c00249e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00249d5:	83 ec 0c             	sub    esp,0xc
c00249d8:	b3 17                	mov    bl,0x17
c00249da:	68 bd dd 02 c0       	push   0xc002ddbd
c00249df:	e8 6d e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00249e4:	83 c4 10             	add    esp,0x10
c00249e7:	eb 16                	jmp    c00249ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00249e9:	3c 04                	cmp    al,0x4
c00249eb:	75 12                	jne    c00249ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00249ed:	83 ec 0c             	sub    esp,0xc
c00249f0:	b3 08                	mov    bl,0x8
c00249f2:	68 d3 dd 02 c0       	push   0xc002ddd3
c00249f7:	e8 55 e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00249fc:	83 c4 10             	add    esp,0x10
c00249ff:	50                   	push   eax
c0024a00:	50                   	push   eax
c0024a01:	0f b6 c3             	movzx  eax,bl
c0024a04:	50                   	push   eax
c0024a05:	68 eb dd 02 c0       	push   0xc002ddeb
c0024a0a:	e8 42 e4 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024a0f:	83 c4 10             	add    esp,0x10
c0024a12:	83 c4 1c             	add    esp,0x1c
c0024a15:	88 d8                	mov    al,bl
c0024a17:	5b                   	pop    ebx
c0024a18:	5e                   	pop    esi
c0024a19:	5f                   	pop    edi
c0024a1a:	5d                   	pop    ebp
c0024a1b:	c3                   	ret    

c0024a1c <IDE::polling(unsigned char, unsigned int)>:
c0024a1c:	57                   	push   edi
c0024a1d:	56                   	push   esi
c0024a1e:	53                   	push   ebx
c0024a1f:	bb 04 00 00 00       	mov    ebx,0x4
c0024a24:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024a28:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024a2d:	52                   	push   edx
c0024a2e:	6a 0c                	push   0xc
c0024a30:	56                   	push   esi
c0024a31:	57                   	push   edi
c0024a32:	e8 f9 f4 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024a37:	83 c4 10             	add    esp,0x10
c0024a3a:	4b                   	dec    ebx
c0024a3b:	75 f0                	jne    c0024a2d <IDE::polling(unsigned char, unsigned int)+0x11>
c0024a3d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024a42:	50                   	push   eax
c0024a43:	6a 0c                	push   0xc
c0024a45:	56                   	push   esi
c0024a46:	57                   	push   edi
c0024a47:	e8 e4 f4 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024a4c:	83 c4 10             	add    esp,0x10
c0024a4f:	a8 01                	test   al,0x1
c0024a51:	74 12                	je     c0024a65 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024a53:	83 ec 0c             	sub    esp,0xc
c0024a56:	68 05 de 02 c0       	push   0xc002de05
c0024a5b:	e8 f1 e3 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024a60:	83 c4 10             	add    esp,0x10
c0024a63:	eb 17                	jmp    c0024a7c <IDE::polling(unsigned char, unsigned int)+0x60>
c0024a65:	a8 20                	test   al,0x20
c0024a67:	75 0f                	jne    c0024a78 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024a69:	4b                   	dec    ebx
c0024a6a:	74 10                	je     c0024a7c <IDE::polling(unsigned char, unsigned int)+0x60>
c0024a6c:	84 c0                	test   al,al
c0024a6e:	78 d2                	js     c0024a42 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024a70:	a8 08                	test   al,0x8
c0024a72:	74 ce                	je     c0024a42 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024a74:	31 c0                	xor    eax,eax
c0024a76:	eb 06                	jmp    c0024a7e <IDE::polling(unsigned char, unsigned int)+0x62>
c0024a78:	b0 01                	mov    al,0x1
c0024a7a:	eb 02                	jmp    c0024a7e <IDE::polling(unsigned char, unsigned int)+0x62>
c0024a7c:	b0 02                	mov    al,0x2
c0024a7e:	5b                   	pop    ebx
c0024a7f:	5e                   	pop    esi
c0024a80:	5f                   	pop    edi
c0024a81:	c3                   	ret    

c0024a82 <SATABus::close(int, int, void*)>:
c0024a82:	31 c0                	xor    eax,eax
c0024a84:	c3                   	ret    
c0024a85:	90                   	nop

c0024a86 <SATABus::detect()>:
c0024a86:	c3                   	ret    
c0024a87:	90                   	nop

c0024a88 <SATABus::SATABus()>:
c0024a88:	83 ec 0c             	sub    esp,0xc
c0024a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a8f:	83 ec 08             	sub    esp,0x8
c0024a92:	68 48 de 02 c0       	push   0xc002de48
c0024a97:	50                   	push   eax
c0024a98:	e8 9b fb fe ff       	call   c0014638 <HardDiskController::HardDiskController(char const*)>
c0024a9d:	83 c4 10             	add    esp,0x10
c0024aa0:	ba 04 df 02 c0       	mov    edx,0xc002df04
c0024aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aa9:	89 10                	mov    DWORD PTR [eax],edx
c0024aab:	83 ec 0c             	sub    esp,0xc
c0024aae:	6a 50                	push   0x50
c0024ab0:	e8 28 b5 fe ff       	call   c000ffdd <Phys::allocateContiguousPages(int)>
c0024ab5:	83 c4 10             	add    esp,0x10
c0024ab8:	89 c2                	mov    edx,eax
c0024aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024abe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024ac4:	83 ec 0c             	sub    esp,0xc
c0024ac7:	6a 50                	push   0x50
c0024ac9:	e8 63 cf fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0024ace:	83 c4 10             	add    esp,0x10
c0024ad1:	89 c2                	mov    edx,eax
c0024ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024add:	a1 f0 f6 02 c0       	mov    eax,ds:0xc002f6f0
c0024ae2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024ae6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024aec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024af0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024af6:	83 ec 0c             	sub    esp,0xc
c0024af9:	6a 03                	push   0x3
c0024afb:	6a 50                	push   0x50
c0024afd:	51                   	push   ecx
c0024afe:	52                   	push   edx
c0024aff:	50                   	push   eax
c0024b00:	e8 59 da fe ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024b05:	83 c4 20             	add    esp,0x20
c0024b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b0c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b16:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024b1c:	83 ec 04             	sub    esp,0x4
c0024b1f:	52                   	push   edx
c0024b20:	50                   	push   eax
c0024b21:	68 6c de 02 c0       	push   0xc002de6c
c0024b26:	e8 26 e3 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024b2b:	83 c4 10             	add    esp,0x10
c0024b2e:	90                   	nop
c0024b2f:	83 c4 0c             	add    esp,0xc
c0024b32:	c3                   	ret    
c0024b33:	90                   	nop

c0024b34 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024b34:	83 ec 0c             	sub    esp,0xc
c0024b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b3b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024b3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024b41:	09 c2                	or     edx,eax
c0024b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b4f:	31 c0                	xor    eax,eax
c0024b51:	c1 e9 08             	shr    ecx,0x8
c0024b54:	83 e1 0f             	and    ecx,0xf
c0024b57:	39 c8                	cmp    eax,ecx
c0024b59:	74 0a                	je     c0024b65 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024b5b:	f6 c2 01             	test   dl,0x1
c0024b5e:	74 18                	je     c0024b78 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024b60:	d1 ea                	shr    edx,1
c0024b62:	40                   	inc    eax
c0024b63:	eb f2                	jmp    c0024b57 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024b65:	83 ec 0c             	sub    esp,0xc
c0024b68:	68 90 de 02 c0       	push   0xc002de90
c0024b6d:	e8 27 5e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0024b72:	83 c4 10             	add    esp,0x10
c0024b75:	83 c8 ff             	or     eax,0xffffffff
c0024b78:	83 c4 0c             	add    esp,0xc
c0024b7b:	c3                   	ret    

c0024b7c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024b7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024b80:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024b83:	89 c2                	mov    edx,eax
c0024b85:	c1 ea 08             	shr    edx,0x8
c0024b88:	83 e2 0f             	and    edx,0xf
c0024b8b:	fe ca                	dec    dl
c0024b8d:	75 31                	jne    c0024bc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024b8f:	83 e0 0f             	and    eax,0xf
c0024b92:	3c 03                	cmp    al,0x3
c0024b94:	75 2a                	jne    c0024bc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024b96:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024b99:	b8 02 00 00 00       	mov    eax,0x2
c0024b9e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024ba4:	74 1c                	je     c0024bc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024ba6:	b8 04 00 00 00       	mov    eax,0x4
c0024bab:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024bb1:	74 0f                	je     c0024bc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024bb3:	31 c0                	xor    eax,eax
c0024bb5:	83 fa 03             	cmp    edx,0x3
c0024bb8:	0f 94 c0             	sete   al
c0024bbb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024bbf:	c3                   	ret    
c0024bc0:	31 c0                	xor    eax,eax
c0024bc2:	c3                   	ret    
c0024bc3:	90                   	nop

c0024bc4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024bc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024bc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024bcb:	0f ba e2 0f          	bt     edx,0xf
c0024bcf:	72 f7                	jb     c0024bc8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024bd1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024bd4:	83 ca 10             	or     edx,0x10
c0024bd7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024bda:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024bdd:	83 ca 01             	or     edx,0x1
c0024be0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024be3:	c3                   	ret    

c0024be4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024be4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024be8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024beb:	83 e2 fe             	and    edx,0xfffffffe
c0024bee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024bf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024bf4:	83 e2 ef             	and    edx,0xffffffef
c0024bf7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024bfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024bfd:	0f ba e2 0e          	bt     edx,0xe
c0024c01:	72 f7                	jb     c0024bfa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024c03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024c06:	0f ba e2 0f          	bt     edx,0xf
c0024c0a:	72 ee                	jb     c0024bfa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024c0c:	c3                   	ret    
c0024c0d:	90                   	nop

c0024c0e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024c0e:	55                   	push   ebp
c0024c0f:	57                   	push   edi
c0024c10:	56                   	push   esi
c0024c11:	53                   	push   ebx
c0024c12:	83 ec 1c             	sub    esp,0x1c
c0024c15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c1d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024c21:	53                   	push   ebx
c0024c22:	89 fd                	mov    ebp,edi
c0024c24:	56                   	push   esi
c0024c25:	c1 e5 0a             	shl    ebp,0xa
c0024c28:	e8 b7 ff ff ff       	call   c0024be4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024c2d:	83 ec 0c             	sub    esp,0xc
c0024c30:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024c36:	01 e8                	add    eax,ebp
c0024c38:	89 03                	mov    DWORD PTR [ebx],eax
c0024c3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024c3c:	68 00 04 00 00       	push   0x400
c0024c41:	6a 00                	push   0x0
c0024c43:	50                   	push   eax
c0024c44:	e8 07 bb fd ff       	call   c0000750 <memset>
c0024c49:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024c4f:	89 fa                	mov    edx,edi
c0024c51:	01 e8                	add    eax,ebp
c0024c53:	c1 e7 0d             	shl    edi,0xd
c0024c56:	89 03                	mov    DWORD PTR [ebx],eax
c0024c58:	c1 e2 08             	shl    edx,0x8
c0024c5b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024c62:	81 c2 00 80 00 00    	add    edx,0x8000
c0024c68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024c6c:	89 d0                	mov    eax,edx
c0024c6e:	83 c4 1c             	add    esp,0x1c
c0024c71:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024c77:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024c7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024c7d:	68 00 01 00 00       	push   0x100
c0024c82:	6a 00                	push   0x0
c0024c84:	50                   	push   eax
c0024c85:	e8 c6 ba fd ff       	call   c0000750 <memset>
c0024c8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c8e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024c94:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024c9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c9e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024ca1:	83 c4 10             	add    esp,0x10
c0024ca4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024cab:	31 ff                	xor    edi,edi
c0024cad:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024cb3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cbd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024cc3:	83 c5 20             	add    ebp,0x20
c0024cc6:	01 f8                	add    eax,edi
c0024cc8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024ccb:	52                   	push   edx
c0024ccc:	68 00 01 00 00       	push   0x100
c0024cd1:	6a 00                	push   0x0
c0024cd3:	50                   	push   eax
c0024cd4:	e8 77 ba fd ff       	call   c0000750 <memset>
c0024cd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cdd:	83 c4 10             	add    esp,0x10
c0024ce0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024ce6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024ced:	01 f8                	add    eax,edi
c0024cef:	81 c7 00 01 00 00    	add    edi,0x100
c0024cf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024cf8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024cfe:	75 b3                	jne    c0024cb3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024d00:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024d04:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024d08:	83 c4 1c             	add    esp,0x1c
c0024d0b:	5b                   	pop    ebx
c0024d0c:	5e                   	pop    esi
c0024d0d:	5f                   	pop    edi
c0024d0e:	5d                   	pop    ebp
c0024d0f:	e9 b0 fe ff ff       	jmp    c0024bc4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024d14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024d14:	55                   	push   ebp
c0024d15:	57                   	push   edi
c0024d16:	56                   	push   esi
c0024d17:	53                   	push   ebx
c0024d18:	31 db                	xor    ebx,ebx
c0024d1a:	83 ec 0c             	sub    esp,0xc
c0024d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024d21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d25:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024d28:	f7 c7 01 00 00 00    	test   edi,0x1
c0024d2e:	0f 84 aa 00 00 00    	je     c0024dde <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024d34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024d38:	89 d8                	mov    eax,ebx
c0024d3a:	c1 e0 07             	shl    eax,0x7
c0024d3d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024d44:	55                   	push   ebp
c0024d45:	56                   	push   esi
c0024d46:	e8 31 fe ff ff       	call   c0024b7c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024d4b:	5a                   	pop    edx
c0024d4c:	83 f8 01             	cmp    eax,0x1
c0024d4f:	59                   	pop    ecx
c0024d50:	75 30                	jne    c0024d82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024d52:	50                   	push   eax
c0024d53:	50                   	push   eax
c0024d54:	53                   	push   ebx
c0024d55:	68 b5 de 02 c0       	push   0xc002deb5
c0024d5a:	e8 f2 e0 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024d5f:	83 c4 0c             	add    esp,0xc
c0024d62:	53                   	push   ebx
c0024d63:	55                   	push   ebp
c0024d64:	56                   	push   esi
c0024d65:	e8 a4 fe ff ff       	call   c0024c0e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024d6a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024d71:	e8 16 ab fe ff       	call   c000f88c <malloc>
c0024d76:	89 c5                	mov    ebp,eax
c0024d78:	89 04 24             	mov    DWORD PTR [esp],eax
c0024d7b:	e8 5c 0d 00 00       	call   c0025adc <SATA::SATA()>
c0024d80:	eb 33                	jmp    c0024db5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024d82:	83 f8 04             	cmp    eax,0x4
c0024d85:	75 47                	jne    c0024dce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024d87:	50                   	push   eax
c0024d88:	50                   	push   eax
c0024d89:	53                   	push   ebx
c0024d8a:	68 cc de 02 c0       	push   0xc002decc
c0024d8f:	e8 bd e0 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024d94:	83 c4 0c             	add    esp,0xc
c0024d97:	53                   	push   ebx
c0024d98:	55                   	push   ebp
c0024d99:	56                   	push   esi
c0024d9a:	e8 6f fe ff ff       	call   c0024c0e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024d9f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024da6:	e8 e1 aa fe ff       	call   c000f88c <malloc>
c0024dab:	89 c5                	mov    ebp,eax
c0024dad:	89 04 24             	mov    DWORD PTR [esp],eax
c0024db0:	e8 d3 10 00 00       	call   c0025e88 <SATAPI::SATAPI()>
c0024db5:	5a                   	pop    edx
c0024db6:	59                   	pop    ecx
c0024db7:	55                   	push   ebp
c0024db8:	56                   	push   esi
c0024db9:	e8 cc f4 fe ff       	call   c001428a <Device::addChild(Device*)>
c0024dbe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024dc1:	56                   	push   esi
c0024dc2:	6a 00                	push   0x0
c0024dc4:	53                   	push   ebx
c0024dc5:	55                   	push   ebp
c0024dc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024dc9:	83 c4 20             	add    esp,0x20
c0024dcc:	eb 10                	jmp    c0024dde <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024dce:	50                   	push   eax
c0024dcf:	50                   	push   eax
c0024dd0:	53                   	push   ebx
c0024dd1:	68 e5 de 02 c0       	push   0xc002dee5
c0024dd6:	e8 76 e0 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0024ddb:	83 c4 10             	add    esp,0x10
c0024dde:	d1 ef                	shr    edi,1
c0024de0:	43                   	inc    ebx
c0024de1:	83 fb 20             	cmp    ebx,0x20
c0024de4:	0f 85 3e ff ff ff    	jne    c0024d28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024dea:	83 c4 0c             	add    esp,0xc
c0024ded:	5b                   	pop    ebx
c0024dee:	5e                   	pop    esi
c0024def:	5f                   	pop    edi
c0024df0:	5d                   	pop    ebp
c0024df1:	c3                   	ret    

c0024df2 <SATABus::open(int, int, void*)>:
c0024df2:	83 ec 14             	sub    esp,0x14
c0024df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024df9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024dff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024e05:	52                   	push   edx
c0024e06:	50                   	push   eax
c0024e07:	e8 08 ff ff ff       	call   c0024d14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024e0c:	31 c0                	xor    eax,eax
c0024e0e:	83 c4 1c             	add    esp,0x1c
c0024e11:	c3                   	ret    

c0024e12 <ATA::close(int, int, void*)>:
c0024e12:	83 ec 0c             	sub    esp,0xc
c0024e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e1f:	85 c0                	test   eax,eax
c0024e21:	74 0c                	je     c0024e2f <ATA::close(int, int, void*)+0x1d>
c0024e23:	83 ec 0c             	sub    esp,0xc
c0024e26:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e28:	50                   	push   eax
c0024e29:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e2c:	83 c4 10             	add    esp,0x10
c0024e2f:	31 c0                	xor    eax,eax
c0024e31:	83 c4 0c             	add    esp,0xc
c0024e34:	c3                   	ret    
c0024e35:	90                   	nop

c0024e36 <ATA::powerSaving(PowerSavingLevel)>:
c0024e36:	c3                   	ret    
c0024e37:	90                   	nop

c0024e38 <ATA::ATA()>:
c0024e38:	83 ec 0c             	sub    esp,0xc
c0024e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e3f:	83 ec 04             	sub    esp,0x4
c0024e42:	68 00 02 00 00       	push   0x200
c0024e47:	68 cd df 02 c0       	push   0xc002dfcd
c0024e4c:	50                   	push   eax
c0024e4d:	e8 7e f8 fe ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e52:	83 c4 10             	add    esp,0x10
c0024e55:	ba 50 df 02 c0       	mov    edx,0xc002df50
c0024e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e5e:	89 10                	mov    DWORD PTR [eax],edx
c0024e60:	90                   	nop
c0024e61:	83 c4 0c             	add    esp,0xc
c0024e64:	c3                   	ret    
c0024e65:	90                   	nop

c0024e66 <ATA::flush(bool)>:
c0024e66:	53                   	push   ebx
c0024e67:	83 ec 08             	sub    esp,0x8
c0024e6a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024e6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e73:	19 c0                	sbb    eax,eax
c0024e75:	83 e0 fd             	and    eax,0xfffffffd
c0024e78:	05 ea 00 00 00       	add    eax,0xea
c0024e7d:	50                   	push   eax
c0024e7e:	6a 07                	push   0x7
c0024e80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e87:	50                   	push   eax
c0024e88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e8e:	e8 dd ef ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e93:	83 c4 0c             	add    esp,0xc
c0024e96:	6a 00                	push   0x0
c0024e98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e9f:	50                   	push   eax
c0024ea0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ea6:	e8 71 fb ff ff       	call   c0024a1c <IDE::polling(unsigned char, unsigned int)>
c0024eab:	83 c4 18             	add    esp,0x18
c0024eae:	5b                   	pop    ebx
c0024eaf:	c3                   	ret    

c0024eb0 <ATA::readyForCommand()>:
c0024eb0:	56                   	push   esi
c0024eb1:	53                   	push   ebx
c0024eb2:	31 db                	xor    ebx,ebx
c0024eb4:	50                   	push   eax
c0024eb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024eb9:	50                   	push   eax
c0024eba:	6a 0c                	push   0xc
c0024ebc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ec3:	50                   	push   eax
c0024ec4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024eca:	e8 61 f0 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c0024ecf:	83 c4 10             	add    esp,0x10
c0024ed2:	a8 88                	test   al,0x88
c0024ed4:	74 23                	je     c0024ef9 <ATA::readyForCommand()+0x49>
c0024ed6:	43                   	inc    ebx
c0024ed7:	83 fb 63             	cmp    ebx,0x63
c0024eda:	7e dd                	jle    c0024eb9 <ATA::readyForCommand()+0x9>
c0024edc:	51                   	push   ecx
c0024edd:	51                   	push   ecx
c0024ede:	6a 00                	push   0x0
c0024ee0:	68 40 42 0f 00       	push   0xf4240
c0024ee5:	e8 65 9b ff ff       	call   c001ea4f <nanoSleep(unsigned long long)>
c0024eea:	83 c4 10             	add    esp,0x10
c0024eed:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ef3:	75 c4                	jne    c0024eb9 <ATA::readyForCommand()+0x9>
c0024ef5:	31 c0                	xor    eax,eax
c0024ef7:	eb 02                	jmp    c0024efb <ATA::readyForCommand()+0x4b>
c0024ef9:	b0 01                	mov    al,0x1
c0024efb:	5a                   	pop    edx
c0024efc:	5b                   	pop    ebx
c0024efd:	5e                   	pop    esi
c0024efe:	c3                   	ret    
c0024eff:	90                   	nop

c0024f00 <ATA::access(unsigned long long, int, void*, bool)>:
c0024f00:	55                   	push   ebp
c0024f01:	57                   	push   edi
c0024f02:	56                   	push   esi
c0024f03:	53                   	push   ebx
c0024f04:	83 ec 2c             	sub    esp,0x2c
c0024f07:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024f0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024f0f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024f13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024f17:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024f1b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024f1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f23:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f2d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024f33:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024f37:	c1 e0 06             	shl    eax,0x6
c0024f3a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024f42:	74 5d                	je     c0024fa1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024f44:	89 fa                	mov    edx,edi
c0024f46:	89 f0                	mov    eax,esi
c0024f48:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024f4c:	c1 ea 1c             	shr    edx,0x1c
c0024f4f:	89 d1                	mov    ecx,edx
c0024f51:	09 c1                	or     ecx,eax
c0024f53:	74 25                	je     c0024f7a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024f55:	31 ed                	xor    ebp,ebp
c0024f57:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024f5e:	89 fa                	mov    edx,edi
c0024f60:	89 f0                	mov    eax,esi
c0024f62:	0f ad d0             	shrd   eax,edx,cl
c0024f65:	d3 ea                	shr    edx,cl
c0024f67:	f6 c1 20             	test   cl,0x20
c0024f6a:	74 02                	je     c0024f6e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024f6c:	89 d0                	mov    eax,edx
c0024f6e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024f72:	45                   	inc    ebp
c0024f73:	83 fd 06             	cmp    ebp,0x6
c0024f76:	75 df                	jne    c0024f57 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024f78:	eb 76                	jmp    c0024ff0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024f7a:	89 f0                	mov    eax,esi
c0024f7c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024f81:	89 fa                	mov    edx,edi
c0024f83:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024f8a:	0f ac d0 10          	shrd   eax,edx,0x10
c0024f8e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024f93:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024f97:	c1 ee 18             	shr    esi,0x18
c0024f9a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024f9f:	eb 56                	jmp    c0024ff7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024fa1:	6a 00                	push   0x0
c0024fa3:	6a 3f                	push   0x3f
c0024fa5:	57                   	push   edi
c0024fa6:	56                   	push   esi
c0024fa7:	e8 98 29 00 00       	call   c0027944 <__umoddi3>
c0024fac:	83 c4 10             	add    esp,0x10
c0024faf:	40                   	inc    eax
c0024fb0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024fb4:	6a 00                	push   0x0
c0024fb6:	68 f0 03 00 00       	push   0x3f0
c0024fbb:	57                   	push   edi
c0024fbc:	56                   	push   esi
c0024fbd:	e8 82 28 00 00       	call   c0027844 <__udivdi3>
c0024fc2:	83 c4 10             	add    esp,0x10
c0024fc5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024fca:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024fd1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024fd6:	6a 00                	push   0x0
c0024fd8:	6a 3f                	push   0x3f
c0024fda:	57                   	push   edi
c0024fdb:	56                   	push   esi
c0024fdc:	e8 63 28 00 00       	call   c0027844 <__udivdi3>
c0024fe1:	83 c4 10             	add    esp,0x10
c0024fe4:	89 c6                	mov    esi,eax
c0024fe6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024feb:	83 e6 0f             	and    esi,0xf
c0024fee:	eb 07                	jmp    c0024ff7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024ff0:	31 f6                	xor    esi,esi
c0024ff2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024ff7:	bf 01 00 00 00       	mov    edi,0x1
c0024ffc:	50                   	push   eax
c0024ffd:	6a 00                	push   0x0
c0024fff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025006:	50                   	push   eax
c0025007:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002500b:	e8 6c f0 ff ff       	call   c002407c <IDE::enableIRQs(unsigned char, bool)>
c0025010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025013:	e8 98 fe ff ff       	call   c0024eb0 <ATA::readyForCommand()>
c0025018:	83 c4 10             	add    esp,0x10
c002501b:	84 c0                	test   al,al
c002501d:	0f 84 5a 02 00 00    	je     c002527d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0025023:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025029:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002502f:	c1 e0 04             	shl    eax,0x4
c0025032:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0025039:	09 c6                	or     esi,eax
c002503b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0025040:	75 05                	jne    c0025047 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0025042:	83 ce a0             	or     esi,0xffffffa0
c0025045:	eb 03                	jmp    c002504a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0025047:	83 ce e0             	or     esi,0xffffffe0
c002504a:	89 f0                	mov    eax,esi
c002504c:	0f b6 f0             	movzx  esi,al
c002504f:	56                   	push   esi
c0025050:	6a 06                	push   0x6
c0025052:	51                   	push   ecx
c0025053:	52                   	push   edx
c0025054:	e8 17 ee ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025059:	83 c4 10             	add    esp,0x10
c002505c:	6a 00                	push   0x0
c002505e:	6a 01                	push   0x1
c0025060:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025067:	50                   	push   eax
c0025068:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002506e:	e8 fd ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025073:	83 c4 10             	add    esp,0x10
c0025076:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002507b:	75 6e                	jne    c00250eb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002507d:	6a 00                	push   0x0
c002507f:	6a 08                	push   0x8
c0025081:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025088:	50                   	push   eax
c0025089:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002508f:	e8 dc ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025094:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0025099:	50                   	push   eax
c002509a:	6a 09                	push   0x9
c002509c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00250a3:	50                   	push   eax
c00250a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250aa:	e8 c1 ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250af:	83 c4 20             	add    esp,0x20
c00250b2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00250b7:	50                   	push   eax
c00250b8:	6a 0a                	push   0xa
c00250ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00250c1:	50                   	push   eax
c00250c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250c8:	e8 a3 ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250cd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00250d2:	50                   	push   eax
c00250d3:	6a 0b                	push   0xb
c00250d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00250dc:	50                   	push   eax
c00250dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250e3:	e8 88 ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250e8:	83 c4 20             	add    esp,0x20
c00250eb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00250f0:	50                   	push   eax
c00250f1:	6a 02                	push   0x2
c00250f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00250fa:	50                   	push   eax
c00250fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025101:	e8 6a ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025106:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002510b:	50                   	push   eax
c002510c:	6a 03                	push   0x3
c002510e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025115:	50                   	push   eax
c0025116:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002511c:	e8 4f ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025121:	83 c4 20             	add    esp,0x20
c0025124:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0025129:	50                   	push   eax
c002512a:	6a 04                	push   0x4
c002512c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025133:	50                   	push   eax
c0025134:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002513a:	e8 31 ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002513f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0025144:	50                   	push   eax
c0025145:	6a 05                	push   0x5
c0025147:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002514e:	50                   	push   eax
c002514f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025155:	e8 16 ed ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002515a:	83 c4 20             	add    esp,0x20
c002515d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0025162:	0f 94 c0             	sete   al
c0025165:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002516a:	74 09                	je     c0025175 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002516c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0025173:	eb 07                	jmp    c002517c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0025175:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002517c:	0f b6 c0             	movzx  eax,al
c002517f:	50                   	push   eax
c0025180:	6a 07                	push   0x7
c0025182:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025189:	50                   	push   eax
c002518a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025190:	e8 db ec ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025195:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0025199:	83 c4 10             	add    esp,0x10
c002519c:	85 f6                	test   esi,esi
c002519e:	0f 84 ba 00 00 00    	je     c002525e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00251a4:	50                   	push   eax
c00251a5:	6a 01                	push   0x1
c00251a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00251ae:	50                   	push   eax
c00251af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00251b5:	e8 62 f8 ff ff       	call   c0024a1c <IDE::polling(unsigned char, unsigned int)>
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00251c3:	84 c0                	test   al,al
c00251c5:	74 2c                	je     c00251f3 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00251c7:	0f b6 f8             	movzx  edi,al
c00251ca:	0f b6 d2             	movzx  edx,dl
c00251cd:	57                   	push   edi
c00251ce:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00251d5:	50                   	push   eax
c00251d6:	52                   	push   edx
c00251d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00251dd:	e8 a4 f6 ff ff       	call   c0024886 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00251e2:	c7 04 24 28 df 02 c0 	mov    DWORD PTR [esp],0xc002df28
c00251e9:	e8 63 dc fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00251ee:	e9 87 00 00 00       	jmp    c002527a <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00251f3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00251f8:	74 33                	je     c002522d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00251fa:	31 ed                	xor    ebp,ebp
c00251fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025200:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0025204:	50                   	push   eax
c0025205:	50                   	push   eax
c0025206:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002520d:	50                   	push   eax
c002520e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025214:	e8 45 ec ff ff       	call   c0023e5e <IDE::getBase(unsigned char)>
c0025219:	89 c2                	mov    edx,eax
c002521b:	89 f8                	mov    eax,edi
c002521d:	66 ef                	out    dx,ax
c002521f:	45                   	inc    ebp
c0025220:	83 c4 10             	add    esp,0x10
c0025223:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0025229:	75 d1                	jne    c00251fc <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002522b:	eb 23                	jmp    c0025250 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002522d:	0f b6 d2             	movzx  edx,dl
c0025230:	51                   	push   ecx
c0025231:	51                   	push   ecx
c0025232:	52                   	push   edx
c0025233:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025239:	e8 20 ec ff ff       	call   c0023e5e <IDE::getBase(unsigned char)>
c002523e:	b9 00 01 00 00       	mov    ecx,0x100
c0025243:	89 c2                	mov    edx,eax
c0025245:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0025249:	fc                   	cld    
c002524a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002524d:	83 c4 10             	add    esp,0x10
c0025250:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0025258:	4e                   	dec    esi
c0025259:	e9 3e ff ff ff       	jmp    c002519c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002525e:	31 ff                	xor    edi,edi
c0025260:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0025265:	74 16                	je     c002527d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0025267:	50                   	push   eax
c0025268:	50                   	push   eax
c0025269:	31 c0                	xor    eax,eax
c002526b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0025270:	0f 94 c0             	sete   al
c0025273:	50                   	push   eax
c0025274:	53                   	push   ebx
c0025275:	e8 ec fb ff ff       	call   c0024e66 <ATA::flush(bool)>
c002527a:	83 c4 10             	add    esp,0x10
c002527d:	83 c4 2c             	add    esp,0x2c
c0025280:	89 f8                	mov    eax,edi
c0025282:	5b                   	pop    ebx
c0025283:	5e                   	pop    esi
c0025284:	5f                   	pop    edi
c0025285:	5d                   	pop    ebp
c0025286:	c3                   	ret    
c0025287:	90                   	nop

c0025288 <ATA::read(unsigned long long, int, void*)>:
c0025288:	57                   	push   edi
c0025289:	b8 04 00 00 00       	mov    eax,0x4
c002528e:	56                   	push   esi
c002528f:	53                   	push   ebx
c0025290:	83 ec 10             	sub    esp,0x10
c0025293:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025297:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002529b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002529e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00252a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00252a6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00252ac:	77 3b                	ja     c00252e9 <ATA::read(unsigned long long, int, void*)+0x61>
c00252ae:	b8 06 00 00 00       	mov    eax,0x6
c00252b3:	85 d2                	test   edx,edx
c00252b5:	74 32                	je     c00252e9 <ATA::read(unsigned long long, int, void*)+0x61>
c00252b7:	50                   	push   eax
c00252b8:	50                   	push   eax
c00252b9:	6a 00                	push   0x0
c00252bb:	52                   	push   edx
c00252bc:	53                   	push   ebx
c00252bd:	57                   	push   edi
c00252be:	56                   	push   esi
c00252bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252c3:	e8 38 fc ff ff       	call   c0024f00 <ATA::access(unsigned long long, int, void*, bool)>
c00252c8:	83 c4 20             	add    esp,0x20
c00252cb:	85 c0                	test   eax,eax
c00252cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252d1:	75 11                	jne    c00252e4 <ATA::read(unsigned long long, int, void*)+0x5c>
c00252d3:	01 1d d8 38 03 c0    	add    DWORD PTR ds:0xc00338d8,ebx
c00252d9:	e8 5e b6 fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c00252de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252e2:	eb 05                	jmp    c00252e9 <ATA::read(unsigned long long, int, void*)+0x61>
c00252e4:	b8 01 00 00 00       	mov    eax,0x1
c00252e9:	83 c4 10             	add    esp,0x10
c00252ec:	5b                   	pop    ebx
c00252ed:	5e                   	pop    esi
c00252ee:	5f                   	pop    edi
c00252ef:	c3                   	ret    

c00252f0 <ATA::write(unsigned long long, int, void*)>:
c00252f0:	57                   	push   edi
c00252f1:	b8 04 00 00 00       	mov    eax,0x4
c00252f6:	56                   	push   esi
c00252f7:	53                   	push   ebx
c00252f8:	83 ec 10             	sub    esp,0x10
c00252fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00252ff:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025303:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025306:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002530a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002530e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025314:	77 3b                	ja     c0025351 <ATA::write(unsigned long long, int, void*)+0x61>
c0025316:	b8 06 00 00 00       	mov    eax,0x6
c002531b:	85 d2                	test   edx,edx
c002531d:	74 32                	je     c0025351 <ATA::write(unsigned long long, int, void*)+0x61>
c002531f:	50                   	push   eax
c0025320:	50                   	push   eax
c0025321:	6a 01                	push   0x1
c0025323:	52                   	push   edx
c0025324:	53                   	push   ebx
c0025325:	57                   	push   edi
c0025326:	56                   	push   esi
c0025327:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002532b:	e8 d0 fb ff ff       	call   c0024f00 <ATA::access(unsigned long long, int, void*, bool)>
c0025330:	83 c4 20             	add    esp,0x20
c0025333:	85 c0                	test   eax,eax
c0025335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025339:	75 11                	jne    c002534c <ATA::write(unsigned long long, int, void*)+0x5c>
c002533b:	01 1d d4 38 03 c0    	add    DWORD PTR ds:0xc00338d4,ebx
c0025341:	e8 f6 b5 fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002534a:	eb 05                	jmp    c0025351 <ATA::write(unsigned long long, int, void*)+0x61>
c002534c:	b8 01 00 00 00       	mov    eax,0x1
c0025351:	83 c4 10             	add    esp,0x10
c0025354:	5b                   	pop    ebx
c0025355:	5e                   	pop    esi
c0025356:	5f                   	pop    edi
c0025357:	c3                   	ret    

c0025358 <ATA::detectCHS()>:
c0025358:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002535c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0025362:	c1 e0 06             	shl    eax,0x6
c0025365:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002536b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0025375:	c7 44 24 04 33 df 02 c0 	mov    DWORD PTR [esp+0x4],0xc002df33
c002537d:	e9 17 56 ff ff       	jmp    c001a999 <Krnl::panic(char const*)>

c0025382 <ATA::open(int, int, void*)>:
c0025382:	53                   	push   ebx
c0025383:	83 ec 08             	sub    esp,0x8
c0025386:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002538a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002538e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025392:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025398:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002539e:	c1 e0 06             	shl    eax,0x6
c00253a1:	01 d0                	add    eax,edx
c00253a3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00253aa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00253b0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00253b7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253c1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00253c7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00253ce:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00253d5:	75 0c                	jne    c00253e3 <ATA::open(int, int, void*)+0x61>
c00253d7:	83 ec 0c             	sub    esp,0xc
c00253da:	53                   	push   ebx
c00253db:	e8 78 ff ff ff       	call   c0025358 <ATA::detectCHS()>
c00253e0:	83 c4 10             	add    esp,0x10
c00253e3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00253e9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00253ef:	c1 e0 06             	shl    eax,0x6
c00253f2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00253f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025403:	d1 e8                	shr    eax,1
c0025405:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002540b:	6a 04                	push   0x4
c002540d:	6a 0c                	push   0xc
c002540f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025416:	50                   	push   eax
c0025417:	52                   	push   edx
c0025418:	e8 53 ea ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002541d:	90                   	nop
c002541e:	90                   	nop
c002541f:	6a 00                	push   0x0
c0025421:	6a 0c                	push   0xc
c0025423:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002542a:	50                   	push   eax
c002542b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025431:	e8 3a ea ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025436:	83 c4 14             	add    esp,0x14
c0025439:	53                   	push   ebx
c002543a:	e8 f9 f2 fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c002543f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025442:	e8 ab 15 ff ff       	call   c00169f2 <createPartitionsForDisk(PhysicalDisk*)>
c0025447:	31 c0                	xor    eax,eax
c0025449:	83 c4 18             	add    esp,0x18
c002544c:	5b                   	pop    ebx
c002544d:	c3                   	ret    

c002544e <ATAPI::write(unsigned long long, int, void*)>:
c002544e:	b8 03 00 00 00       	mov    eax,0x3
c0025453:	c3                   	ret    

c0025454 <ATAPI::close(int, int, void*)>:
c0025454:	83 ec 0c             	sub    esp,0xc
c0025457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025461:	85 c0                	test   eax,eax
c0025463:	74 0c                	je     c0025471 <ATAPI::close(int, int, void*)+0x1d>
c0025465:	83 ec 0c             	sub    esp,0xc
c0025468:	8b 10                	mov    edx,DWORD PTR [eax]
c002546a:	50                   	push   eax
c002546b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002546e:	83 c4 10             	add    esp,0x10
c0025471:	31 c0                	xor    eax,eax
c0025473:	83 c4 0c             	add    esp,0xc
c0025476:	c3                   	ret    
c0025477:	90                   	nop

c0025478 <ATAPI::ATAPI()>:
c0025478:	83 ec 0c             	sub    esp,0xc
c002547b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547f:	83 ec 04             	sub    esp,0x4
c0025482:	68 00 08 00 00       	push   0x800
c0025487:	68 6d e0 02 c0       	push   0xc002e06d
c002548c:	50                   	push   eax
c002548d:	e8 3e f2 fe ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025492:	83 c4 10             	add    esp,0x10
c0025495:	ba 88 df 02 c0       	mov    edx,0xc002df88
c002549a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549e:	89 10                	mov    DWORD PTR [eax],edx
c00254a0:	90                   	nop
c00254a1:	83 c4 0c             	add    esp,0xc
c00254a4:	c3                   	ret    
c00254a5:	90                   	nop

c00254a6 <ATAPI::readyForCommand()>:
c00254a6:	56                   	push   esi
c00254a7:	53                   	push   ebx
c00254a8:	31 db                	xor    ebx,ebx
c00254aa:	50                   	push   eax
c00254ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00254af:	50                   	push   eax
c00254b0:	6a 0c                	push   0xc
c00254b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00254b9:	50                   	push   eax
c00254ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00254c0:	e8 6b ea ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c00254c5:	83 c4 10             	add    esp,0x10
c00254c8:	a8 88                	test   al,0x88
c00254ca:	74 23                	je     c00254ef <ATAPI::readyForCommand()+0x49>
c00254cc:	43                   	inc    ebx
c00254cd:	83 fb 63             	cmp    ebx,0x63
c00254d0:	7e dd                	jle    c00254af <ATAPI::readyForCommand()+0x9>
c00254d2:	51                   	push   ecx
c00254d3:	51                   	push   ecx
c00254d4:	6a 00                	push   0x0
c00254d6:	68 40 42 0f 00       	push   0xf4240
c00254db:	e8 6f 95 ff ff       	call   c001ea4f <nanoSleep(unsigned long long)>
c00254e0:	83 c4 10             	add    esp,0x10
c00254e3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00254e9:	75 c4                	jne    c00254af <ATAPI::readyForCommand()+0x9>
c00254eb:	31 c0                	xor    eax,eax
c00254ed:	eb 02                	jmp    c00254f1 <ATAPI::readyForCommand()+0x4b>
c00254ef:	b0 01                	mov    al,0x1
c00254f1:	5a                   	pop    edx
c00254f2:	5b                   	pop    ebx
c00254f3:	5e                   	pop    esi
c00254f4:	c3                   	ret    
c00254f5:	90                   	nop

c00254f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00254f6:	55                   	push   ebp
c00254f7:	57                   	push   edi
c00254f8:	56                   	push   esi
c00254f9:	53                   	push   ebx
c00254fa:	83 ec 20             	sub    esp,0x20
c00254fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0025501:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0025505:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0025509:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002550d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025511:	6a 01                	push   0x1
c0025513:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002551a:	50                   	push   eax
c002551b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025521:	e8 56 eb ff ff       	call   c002407c <IDE::enableIRQs(unsigned char, bool)>
c0025526:	5e                   	pop    esi
c0025527:	58                   	pop    eax
c0025528:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002552f:	50                   	push   eax
c0025530:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025536:	e8 0f e9 ff ff       	call   c0023e4a <IDE::prepareInterrupt(unsigned char)>
c002553b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002553e:	e8 63 ff ff ff       	call   c00254a6 <ATAPI::readyForCommand()>
c0025543:	83 c4 10             	add    esp,0x10
c0025546:	84 c0                	test   al,al
c0025548:	75 0a                	jne    c0025554 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002554a:	bb 01 00 00 00       	mov    ebx,0x1
c002554f:	e9 57 02 00 00       	jmp    c00257ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025554:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002555a:	c1 e0 04             	shl    eax,0x4
c002555d:	0f b6 c0             	movzx  eax,al
c0025560:	50                   	push   eax
c0025561:	6a 06                	push   0x6
c0025563:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002556a:	50                   	push   eax
c002556b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025571:	e8 fa e8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025576:	6a 00                	push   0x0
c0025578:	6a 01                	push   0x1
c002557a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025581:	50                   	push   eax
c0025582:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025588:	e8 e3 e8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002558d:	83 c4 20             	add    esp,0x20
c0025590:	0f b6 c3             	movzx  eax,bl
c0025593:	0f b6 df             	movzx  ebx,bh
c0025596:	50                   	push   eax
c0025597:	6a 04                	push   0x4
c0025599:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00255a0:	50                   	push   eax
c00255a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00255a7:	e8 c4 e8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00255ac:	53                   	push   ebx
c00255ad:	6a 05                	push   0x5
c00255af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00255b6:	50                   	push   eax
c00255b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00255bd:	e8 ae e8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00255c2:	83 c4 20             	add    esp,0x20
c00255c5:	68 a0 00 00 00       	push   0xa0
c00255ca:	6a 07                	push   0x7
c00255cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00255d3:	50                   	push   eax
c00255d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00255da:	e8 91 e8 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00255df:	83 c4 0c             	add    esp,0xc
c00255e2:	6a 01                	push   0x1
c00255e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00255eb:	50                   	push   eax
c00255ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00255f2:	e8 25 f4 ff ff       	call   c0024a1c <IDE::polling(unsigned char, unsigned int)>
c00255f7:	83 c4 10             	add    esp,0x10
c00255fa:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025600:	84 c0                	test   al,al
c0025602:	74 23                	je     c0025627 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025604:	0f b6 d8             	movzx  ebx,al
c0025607:	0f b6 d2             	movzx  edx,dl
c002560a:	53                   	push   ebx
c002560b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025612:	50                   	push   eax
c0025613:	52                   	push   edx
c0025614:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002561a:	e8 67 f2 ff ff       	call   c0024886 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002561f:	83 c4 10             	add    esp,0x10
c0025622:	e9 84 01 00 00       	jmp    c00257ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025627:	0f b6 d2             	movzx  edx,dl
c002562a:	53                   	push   ebx
c002562b:	53                   	push   ebx
c002562c:	52                   	push   edx
c002562d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025633:	e8 26 e8 ff ff       	call   c0023e5e <IDE::getBase(unsigned char)>
c0025638:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002563c:	b9 06 00 00 00       	mov    ecx,0x6
c0025641:	89 c2                	mov    edx,eax
c0025643:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025646:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002564a:	83 c4 10             	add    esp,0x10
c002564d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025653:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002565a:	85 db                	test   ebx,ebx
c002565c:	0f 84 ec 00 00 00    	je     c002574e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025662:	51                   	push   ecx
c0025663:	51                   	push   ecx
c0025664:	52                   	push   edx
c0025665:	50                   	push   eax
c0025666:	e8 73 e9 ff ff       	call   c0023fde <IDE::waitInterrupt(unsigned char)>
c002566b:	83 c4 10             	add    esp,0x10
c002566e:	84 c0                	test   al,al
c0025670:	0f 84 d4 fe ff ff    	je     c002554a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025676:	56                   	push   esi
c0025677:	56                   	push   esi
c0025678:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002567f:	50                   	push   eax
c0025680:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025686:	e8 bf e7 ff ff       	call   c0023e4a <IDE::prepareInterrupt(unsigned char)>
c002568b:	83 c4 0c             	add    esp,0xc
c002568e:	6a 04                	push   0x4
c0025690:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025697:	50                   	push   eax
c0025698:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002569e:	e8 8d e8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c00256a3:	83 c4 0c             	add    esp,0xc
c00256a6:	89 c6                	mov    esi,eax
c00256a8:	6a 05                	push   0x5
c00256aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00256b1:	50                   	push   eax
c00256b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00256b8:	e8 73 e8 ff ff       	call   c0023f30 <IDE::read(unsigned char, unsigned char)>
c00256bd:	89 f1                	mov    ecx,esi
c00256bf:	0f b6 c0             	movzx  eax,al
c00256c2:	0f b6 f1             	movzx  esi,cl
c00256c5:	c1 e0 08             	shl    eax,0x8
c00256c8:	09 c6                	or     esi,eax
c00256ca:	d1 fe                	sar    esi,1
c00256cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00256d0:	83 c4 10             	add    esp,0x10
c00256d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00256d8:	74 41                	je     c002571b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00256da:	31 c9                	xor    ecx,ecx
c00256dc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00256e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00256e9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00256ed:	75 0a                	jne    c00256f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00256ef:	01 c9                	add    ecx,ecx
c00256f1:	01 cd                	add    ebp,ecx
c00256f3:	4b                   	dec    ebx
c00256f4:	e9 54 ff ff ff       	jmp    c002564d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00256f9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00256fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025702:	51                   	push   ecx
c0025703:	51                   	push   ecx
c0025704:	52                   	push   edx
c0025705:	50                   	push   eax
c0025706:	e8 53 e7 ff ff       	call   c0023e5e <IDE::getBase(unsigned char)>
c002570b:	89 c2                	mov    edx,eax
c002570d:	89 f0                	mov    eax,esi
c002570f:	66 ef                	out    dx,ax
c0025711:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025715:	83 c4 10             	add    esp,0x10
c0025718:	41                   	inc    ecx
c0025719:	eb c1                	jmp    c00256dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002571b:	31 f6                	xor    esi,esi
c002571d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025723:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002572a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002572e:	75 06                	jne    c0025736 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025730:	01 f6                	add    esi,esi
c0025732:	01 f5                	add    ebp,esi
c0025734:	eb bd                	jmp    c00256f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025736:	51                   	push   ecx
c0025737:	51                   	push   ecx
c0025738:	52                   	push   edx
c0025739:	50                   	push   eax
c002573a:	e8 1f e7 ff ff       	call   c0023e5e <IDE::getBase(unsigned char)>
c002573f:	89 c2                	mov    edx,eax
c0025741:	66 ed                	in     ax,dx
c0025743:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025748:	83 c4 10             	add    esp,0x10
c002574b:	46                   	inc    esi
c002574c:	eb cf                	jmp    c002571d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002574e:	51                   	push   ecx
c002574f:	51                   	push   ecx
c0025750:	52                   	push   edx
c0025751:	50                   	push   eax
c0025752:	e8 87 e8 ff ff       	call   c0023fde <IDE::waitInterrupt(unsigned char)>
c0025757:	83 c4 10             	add    esp,0x10
c002575a:	84 c0                	test   al,al
c002575c:	0f 84 e8 fd ff ff    	je     c002554a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025762:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025767:	52                   	push   edx
c0025768:	52                   	push   edx
c0025769:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025770:	50                   	push   eax
c0025771:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025777:	e8 ce e6 ff ff       	call   c0023e4a <IDE::prepareInterrupt(unsigned char)>
c002577c:	83 c4 10             	add    esp,0x10
c002577f:	50                   	push   eax
c0025780:	50                   	push   eax
c0025781:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025788:	50                   	push   eax
c0025789:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002578f:	e8 ca e6 ff ff       	call   c0023e5e <IDE::getBase(unsigned char)>
c0025794:	8d 50 07             	lea    edx,[eax+0x7]
c0025797:	ec                   	in     al,dx
c0025798:	83 c4 10             	add    esp,0x10
c002579b:	a8 88                	test   al,0x88
c002579d:	74 0a                	je     c00257a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002579f:	4b                   	dec    ebx
c00257a0:	75 dd                	jne    c002577f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00257a2:	bb 02 00 00 00       	mov    ebx,0x2
c00257a7:	eb 02                	jmp    c00257ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00257a9:	31 db                	xor    ebx,ebx
c00257ab:	83 c4 1c             	add    esp,0x1c
c00257ae:	89 d8                	mov    eax,ebx
c00257b0:	5b                   	pop    ebx
c00257b1:	5e                   	pop    esi
c00257b2:	5f                   	pop    edi
c00257b3:	5d                   	pop    ebp
c00257b4:	c3                   	ret    
c00257b5:	90                   	nop

c00257b6 <ATAPI::diskRemoved()>:
c00257b6:	83 ec 18             	sub    esp,0x18
c00257b9:	68 79 e0 02 c0       	push   0xc002e079
c00257be:	e8 8e d6 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00257c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257c7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00257ce:	83 c4 1c             	add    esp,0x1c
c00257d1:	c3                   	ret    

c00257d2 <ATAPI::eject()>:
c00257d2:	57                   	push   edi
c00257d3:	b9 03 00 00 00       	mov    ecx,0x3
c00257d8:	53                   	push   ebx
c00257d9:	83 ec 14             	sub    esp,0x14
c00257dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00257e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00257e4:	fc                   	cld    
c00257e5:	31 c0                	xor    eax,eax
c00257e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00257e9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00257ee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00257f3:	50                   	push   eax
c00257f4:	50                   	push   eax
c00257f5:	6a 00                	push   0x0
c00257f7:	6a 00                	push   0x0
c00257f9:	6a 00                	push   0x0
c00257fb:	6a 02                	push   0x2
c00257fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025801:	50                   	push   eax
c0025802:	53                   	push   ebx
c0025803:	e8 ee fc ff ff       	call   c00254f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025808:	83 c4 14             	add    esp,0x14
c002580b:	53                   	push   ebx
c002580c:	e8 a5 ff ff ff       	call   c00257b6 <ATAPI::diskRemoved()>
c0025811:	83 c4 24             	add    esp,0x24
c0025814:	31 c0                	xor    eax,eax
c0025816:	5b                   	pop    ebx
c0025817:	5f                   	pop    edi
c0025818:	c3                   	ret    
c0025819:	90                   	nop

c002581a <ATAPI::diskInserted()>:
c002581a:	53                   	push   ebx
c002581b:	83 ec 14             	sub    esp,0x14
c002581e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025822:	68 90 e0 02 c0       	push   0xc002e090
c0025827:	e8 25 d6 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c002582c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025836:	e8 fd ee fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c002583b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002583f:	83 c4 18             	add    esp,0x18
c0025842:	5b                   	pop    ebx
c0025843:	e9 aa 11 ff ff       	jmp    c00169f2 <createPartitionsForDisk(PhysicalDisk*)>

c0025848 <ATAPI::detectMedia()>:
c0025848:	56                   	push   esi
c0025849:	53                   	push   ebx
c002584a:	83 ec 28             	sub    esp,0x28
c002584d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025851:	6a 0c                	push   0xc
c0025853:	6a 00                	push   0x0
c0025855:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025859:	56                   	push   esi
c002585a:	e8 f1 ae fd ff       	call   c0000750 <memset>
c002585f:	58                   	pop    eax
c0025860:	5a                   	pop    edx
c0025861:	6a 00                	push   0x0
c0025863:	6a 00                	push   0x0
c0025865:	6a 00                	push   0x0
c0025867:	6a 00                	push   0x0
c0025869:	56                   	push   esi
c002586a:	53                   	push   ebx
c002586b:	e8 86 fc ff ff       	call   c00254f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025870:	83 c4 1c             	add    esp,0x1c
c0025873:	6a 0c                	push   0xc
c0025875:	6a 00                	push   0x0
c0025877:	56                   	push   esi
c0025878:	e8 d3 ae fd ff       	call   c0000750 <memset>
c002587d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025882:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025887:	59                   	pop    ecx
c0025888:	58                   	pop    eax
c0025889:	6a 01                	push   0x1
c002588b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002588f:	50                   	push   eax
c0025890:	6a 00                	push   0x0
c0025892:	6a 12                	push   0x12
c0025894:	56                   	push   esi
c0025895:	53                   	push   ebx
c0025896:	e8 5b fc ff ff       	call   c00254f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002589b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002589f:	83 c4 20             	add    esp,0x20
c00258a2:	83 e0 7f             	and    eax,0x7f
c00258a5:	3c 70                	cmp    al,0x70
c00258a7:	74 15                	je     c00258be <ATAPI::detectMedia()+0x76>
c00258a9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00258b0:	75 0c                	jne    c00258be <ATAPI::detectMedia()+0x76>
c00258b2:	83 ec 0c             	sub    esp,0xc
c00258b5:	53                   	push   ebx
c00258b6:	e8 5f ff ff ff       	call   c002581a <ATAPI::diskInserted()>
c00258bb:	83 c4 10             	add    esp,0x10
c00258be:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00258c2:	83 e0 0f             	and    eax,0xf
c00258c5:	3c 02                	cmp    al,0x2
c00258c7:	75 1b                	jne    c00258e4 <ATAPI::detectMedia()+0x9c>
c00258c9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00258ce:	75 2d                	jne    c00258fd <ATAPI::detectMedia()+0xb5>
c00258d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00258d7:	74 24                	je     c00258fd <ATAPI::detectMedia()+0xb5>
c00258d9:	83 ec 0c             	sub    esp,0xc
c00258dc:	53                   	push   ebx
c00258dd:	e8 d4 fe ff ff       	call   c00257b6 <ATAPI::diskRemoved()>
c00258e2:	eb 16                	jmp    c00258fa <ATAPI::detectMedia()+0xb2>
c00258e4:	84 c0                	test   al,al
c00258e6:	75 15                	jne    c00258fd <ATAPI::detectMedia()+0xb5>
c00258e8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00258ef:	75 0c                	jne    c00258fd <ATAPI::detectMedia()+0xb5>
c00258f1:	83 ec 0c             	sub    esp,0xc
c00258f4:	53                   	push   ebx
c00258f5:	e8 20 ff ff ff       	call   c002581a <ATAPI::diskInserted()>
c00258fa:	83 c4 10             	add    esp,0x10
c00258fd:	83 c4 24             	add    esp,0x24
c0025900:	5b                   	pop    ebx
c0025901:	5e                   	pop    esi
c0025902:	c3                   	ret    
c0025903:	90                   	nop

c0025904 <ATAPI::open(int, int, void*)>:
c0025904:	53                   	push   ebx
c0025905:	83 ec 08             	sub    esp,0x8
c0025908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002590c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025914:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002591a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025920:	c1 e0 06             	shl    eax,0x6
c0025923:	01 d0                	add    eax,edx
c0025925:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002592c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025932:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025939:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025943:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025949:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025950:	6a 04                	push   0x4
c0025952:	6a 0c                	push   0xc
c0025954:	51                   	push   ecx
c0025955:	52                   	push   edx
c0025956:	e8 15 e5 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002595b:	90                   	nop
c002595c:	90                   	nop
c002595d:	6a 00                	push   0x0
c002595f:	6a 0c                	push   0xc
c0025961:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025968:	50                   	push   eax
c0025969:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002596f:	e8 fc e4 ff ff       	call   c0023e70 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025974:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002597b:	83 c4 14             	add    esp,0x14
c002597e:	53                   	push   ebx
c002597f:	e8 c4 fe ff ff       	call   c0025848 <ATAPI::detectMedia()>
c0025984:	31 c0                	xor    eax,eax
c0025986:	83 c4 18             	add    esp,0x18
c0025989:	5b                   	pop    ebx
c002598a:	c3                   	ret    
c002598b:	90                   	nop

c002598c <ATAPI::read(unsigned long long, int, void*)>:
c002598c:	55                   	push   ebp
c002598d:	57                   	push   edi
c002598e:	56                   	push   esi
c002598f:	53                   	push   ebx
c0025990:	83 ec 1c             	sub    esp,0x1c
c0025993:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025997:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002599b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002599f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00259a6:	74 41                	je     c00259e9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00259a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00259ac:	b9 03 00 00 00       	mov    ecx,0x3
c00259b1:	fc                   	cld    
c00259b2:	31 c0                	xor    eax,eax
c00259b4:	86 fb                	xchg   bl,bh
c00259b6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00259b8:	c1 c3 10             	rol    ebx,0x10
c00259bb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00259c0:	89 e8                	mov    eax,ebp
c00259c2:	86 fb                	xchg   bl,bh
c00259c4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00259c8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00259cc:	50                   	push   eax
c00259cd:	50                   	push   eax
c00259ce:	55                   	push   ebp
c00259cf:	c1 e5 0b             	shl    ebp,0xb
c00259d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00259d6:	6a 00                	push   0x0
c00259d8:	55                   	push   ebp
c00259d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00259dd:	50                   	push   eax
c00259de:	56                   	push   esi
c00259df:	e8 12 fb ff ff       	call   c00254f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00259e4:	83 c4 20             	add    esp,0x20
c00259e7:	eb 1a                	jmp    c0025a03 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00259e9:	83 ec 0c             	sub    esp,0xc
c00259ec:	56                   	push   esi
c00259ed:	e8 56 fe ff ff       	call   c0025848 <ATAPI::detectMedia()>
c00259f2:	83 c4 10             	add    esp,0x10
c00259f5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00259fc:	75 aa                	jne    c00259a8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00259fe:	b8 02 00 00 00       	mov    eax,0x2
c0025a03:	83 c4 1c             	add    esp,0x1c
c0025a06:	5b                   	pop    ebx
c0025a07:	5e                   	pop    esi
c0025a08:	5f                   	pop    edi
c0025a09:	5d                   	pop    ebp
c0025a0a:	c3                   	ret    
c0025a0b:	90                   	nop

c0025a0c <SATA::close(int, int, void*)>:
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a19:	85 c0                	test   eax,eax
c0025a1b:	74 0c                	je     c0025a29 <SATA::close(int, int, void*)+0x1d>
c0025a1d:	83 ec 0c             	sub    esp,0xc
c0025a20:	8b 10                	mov    edx,DWORD PTR [eax]
c0025a22:	50                   	push   eax
c0025a23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025a26:	83 c4 10             	add    esp,0x10
c0025a29:	31 c0                	xor    eax,eax
c0025a2b:	83 c4 0c             	add    esp,0xc
c0025a2e:	c3                   	ret    
c0025a2f:	90                   	nop

c0025a30 <SATA::powerSaving(PowerSavingLevel)>:
c0025a30:	c3                   	ret    
c0025a31:	90                   	nop

c0025a32 <SATA::open(int, int, void*)>:
c0025a32:	56                   	push   esi
c0025a33:	53                   	push   ebx
c0025a34:	50                   	push   eax
c0025a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025a39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a3d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025a47:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025a4d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025a57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a5b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025a65:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025a6b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025a72:	e8 81 a4 fe ff       	call   c000fef8 <Phys::allocatePage()>
c0025a77:	89 c6                	mov    esi,eax
c0025a79:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025a7f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025a85:	e8 6e a4 fe ff       	call   c000fef8 <Phys::allocatePage()>
c0025a8a:	39 c6                	cmp    esi,eax
c0025a8c:	74 10                	je     c0025a9e <SATA::open(int, int, void*)+0x6c>
c0025a8e:	83 ec 0c             	sub    esp,0xc
c0025a91:	68 b8 df 02 c0       	push   0xc002dfb8
c0025a96:	e8 fe 4e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	83 ec 0c             	sub    esp,0xc
c0025aa1:	6a 02                	push   0x2
c0025aa3:	e8 89 bf fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0025aa8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025aae:	6a 03                	push   0x3
c0025ab0:	50                   	push   eax
c0025ab1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025ab7:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c0025abd:	e8 a6 c7 fe ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025ac2:	83 c4 14             	add    esp,0x14
c0025ac5:	53                   	push   ebx
c0025ac6:	e8 6d ec fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c0025acb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025ace:	e8 1f 0f ff ff       	call   c00169f2 <createPartitionsForDisk(PhysicalDisk*)>
c0025ad3:	83 c4 14             	add    esp,0x14
c0025ad6:	31 c0                	xor    eax,eax
c0025ad8:	5b                   	pop    ebx
c0025ad9:	5e                   	pop    esi
c0025ada:	c3                   	ret    
c0025adb:	90                   	nop

c0025adc <SATA::SATA()>:
c0025adc:	83 ec 0c             	sub    esp,0xc
c0025adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae3:	83 ec 04             	sub    esp,0x4
c0025ae6:	68 00 02 00 00       	push   0x200
c0025aeb:	68 cc df 02 c0       	push   0xc002dfcc
c0025af0:	50                   	push   eax
c0025af1:	e8 da eb fe ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025af6:	83 c4 10             	add    esp,0x10
c0025af9:	ba 3c e0 02 c0       	mov    edx,0xc002e03c
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	89 10                	mov    DWORD PTR [eax],edx
c0025b04:	90                   	nop
c0025b05:	83 c4 0c             	add    esp,0xc
c0025b08:	c3                   	ret    
c0025b09:	90                   	nop

c0025b0a <SATA::access(unsigned long long, int, void*, bool)>:
c0025b0a:	55                   	push   ebp
c0025b0b:	57                   	push   edi
c0025b0c:	56                   	push   esi
c0025b0d:	53                   	push   ebx
c0025b0e:	83 ec 2c             	sub    esp,0x2c
c0025b11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025b15:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025b1d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025b25:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025b2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025b2e:	7e 10                	jle    c0025b40 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025b30:	83 ec 0c             	sub    esp,0xc
c0025b33:	68 dc df 02 c0       	push   0xc002dfdc
c0025b38:	e8 5c 4e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0025b3d:	83 c4 10             	add    esp,0x10
c0025b40:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025b46:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025b4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025b56:	89 d0                	mov    eax,edx
c0025b58:	c1 e0 07             	shl    eax,0x7
c0025b5b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025b5f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025b69:	51                   	push   ecx
c0025b6a:	8d 42 02             	lea    eax,[edx+0x2]
c0025b6d:	51                   	push   ecx
c0025b6e:	c1 e0 07             	shl    eax,0x7
c0025b71:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025b75:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025b79:	50                   	push   eax
c0025b7a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025b80:	e8 af ef ff ff       	call   c0024b34 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025b85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b89:	83 c4 10             	add    esp,0x10
c0025b8c:	b8 01 00 00 00       	mov    eax,0x1
c0025b91:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025b96:	0f 84 cb 01 00 00    	je     c0025d67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025b9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025ba0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025ba4:	c1 e0 09             	shl    eax,0x9
c0025ba7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025bac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025bb0:	74 0e                	je     c0025bc0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025bb2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025bb8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025bbc:	89 c1                	mov    ecx,eax
c0025bbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025bc0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025bc4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025bca:	8d 42 02             	lea    eax,[edx+0x2]
c0025bcd:	c1 e0 07             	shl    eax,0x7
c0025bd0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bd6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025bdc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025be2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025be6:	c1 e1 05             	shl    ecx,0x5
c0025be9:	01 c8                	add    eax,ecx
c0025beb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025bef:	83 e1 01             	and    ecx,0x1
c0025bf2:	89 ce                	mov    esi,ecx
c0025bf4:	8a 08                	mov    cl,BYTE PTR [eax]
c0025bf6:	c1 e6 06             	shl    esi,0x6
c0025bf9:	83 e1 bf             	and    ecx,0xffffffbf
c0025bfc:	09 f1                	or     ecx,esi
c0025bfe:	88 08                	mov    BYTE PTR [eax],cl
c0025c00:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025c02:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025c08:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025c0e:	89 08                	mov    DWORD PTR [eax],ecx
c0025c10:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025c16:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025c1c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025c22:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025c25:	50                   	push   eax
c0025c26:	68 90 00 00 00       	push   0x90
c0025c2b:	6a 00                	push   0x0
c0025c2d:	56                   	push   esi
c0025c2e:	e8 1d ab fd ff       	call   c0000750 <memset>
c0025c33:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025c39:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025c3d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025c43:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025c47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025c4b:	83 c4 10             	add    esp,0x10
c0025c4e:	48                   	dec    eax
c0025c4f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025c54:	89 c1                	mov    ecx,eax
c0025c56:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025c5c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025c61:	09 c8                	or     eax,ecx
c0025c63:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025c69:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025c6c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025c73:	66 25 00 7f          	and    ax,0x7f00
c0025c77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025c7b:	66 0d 27 80          	or     ax,0x8027
c0025c7f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025c84:	66 89 06             	mov    WORD PTR [esi],ax
c0025c87:	19 c0                	sbb    eax,eax
c0025c89:	83 e0 f0             	and    eax,0xfffffff0
c0025c8c:	83 c0 35             	add    eax,0x35
c0025c8f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025c92:	89 e8                	mov    eax,ebp
c0025c94:	c1 e8 10             	shr    eax,0x10
c0025c97:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025c9a:	89 e8                	mov    eax,ebp
c0025c9c:	c1 e8 18             	shr    eax,0x18
c0025c9f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025ca2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025ca6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025ca9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025cad:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025cb0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025cb4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025cb8:	89 d6                	mov    esi,edx
c0025cba:	31 c0                	xor    eax,eax
c0025cbc:	c1 e6 07             	shl    esi,0x7
c0025cbf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025cc3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025cc9:	80 e1 88             	and    cl,0x88
c0025ccc:	74 0a                	je     c0025cd8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025cce:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025cd3:	74 0a                	je     c0025cdf <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025cd5:	40                   	inc    eax
c0025cd6:	eb eb                	jmp    c0025cc3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025cd8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025cdd:	75 0a                	jne    c0025ce9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025cdf:	83 ec 0c             	sub    esp,0xc
c0025ce2:	68 15 e0 02 c0       	push   0xc002e015
c0025ce7:	eb 56                	jmp    c0025d3f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025ce9:	b8 01 00 00 00       	mov    eax,0x1
c0025cee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025cf2:	c1 e2 07             	shl    edx,0x7
c0025cf5:	d3 e0                	shl    eax,cl
c0025cf7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025cfb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025d01:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025d07:	85 c8                	test   eax,ecx
c0025d09:	74 20                	je     c0025d2b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025d0b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025d11:	0f ba e1 1e          	bt     ecx,0x1e
c0025d15:	73 ea                	jae    c0025d01 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025d17:	83 ec 0c             	sub    esp,0xc
c0025d1a:	68 23 e0 02 c0       	push   0xc002e023
c0025d1f:	e8 75 4c ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0025d24:	83 c4 10             	add    esp,0x10
c0025d27:	31 c0                	xor    eax,eax
c0025d29:	eb 3c                	jmp    c0025d67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025d2b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025d31:	0f ba e0 1e          	bt     eax,0x1e
c0025d35:	73 17                	jae    c0025d4e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025d37:	83 ec 0c             	sub    esp,0xc
c0025d3a:	68 23 e0 02 c0       	push   0xc002e023
c0025d3f:	e8 55 4c ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0025d44:	83 c4 10             	add    esp,0x10
c0025d47:	b8 01 00 00 00       	mov    eax,0x1
c0025d4c:	eb 19                	jmp    c0025d67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025d4e:	31 c0                	xor    eax,eax
c0025d50:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025d55:	75 10                	jne    c0025d67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025d57:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025d5d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025d61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025d65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d67:	83 c4 2c             	add    esp,0x2c
c0025d6a:	5b                   	pop    ebx
c0025d6b:	5e                   	pop    esi
c0025d6c:	5f                   	pop    edi
c0025d6d:	5d                   	pop    ebp
c0025d6e:	c3                   	ret    
c0025d6f:	90                   	nop

c0025d70 <SATA::read(unsigned long long, int, void*)>:
c0025d70:	57                   	push   edi
c0025d71:	b8 04 00 00 00       	mov    eax,0x4
c0025d76:	56                   	push   esi
c0025d77:	53                   	push   ebx
c0025d78:	83 ec 10             	sub    esp,0x10
c0025d7b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025d7f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025d83:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025d86:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025d8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025d8e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025d94:	77 3b                	ja     c0025dd1 <SATA::read(unsigned long long, int, void*)+0x61>
c0025d96:	b8 06 00 00 00       	mov    eax,0x6
c0025d9b:	85 d2                	test   edx,edx
c0025d9d:	74 32                	je     c0025dd1 <SATA::read(unsigned long long, int, void*)+0x61>
c0025d9f:	50                   	push   eax
c0025da0:	50                   	push   eax
c0025da1:	6a 00                	push   0x0
c0025da3:	52                   	push   edx
c0025da4:	53                   	push   ebx
c0025da5:	57                   	push   edi
c0025da6:	56                   	push   esi
c0025da7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025dab:	e8 5a fd ff ff       	call   c0025b0a <SATA::access(unsigned long long, int, void*, bool)>
c0025db0:	83 c4 20             	add    esp,0x20
c0025db3:	85 c0                	test   eax,eax
c0025db5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025db9:	75 11                	jne    c0025dcc <SATA::read(unsigned long long, int, void*)+0x5c>
c0025dbb:	01 1d d8 38 03 c0    	add    DWORD PTR ds:0xc00338d8,ebx
c0025dc1:	e8 76 ab fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025dc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025dca:	eb 05                	jmp    c0025dd1 <SATA::read(unsigned long long, int, void*)+0x61>
c0025dcc:	b8 01 00 00 00       	mov    eax,0x1
c0025dd1:	83 c4 10             	add    esp,0x10
c0025dd4:	5b                   	pop    ebx
c0025dd5:	5e                   	pop    esi
c0025dd6:	5f                   	pop    edi
c0025dd7:	c3                   	ret    

c0025dd8 <SATA::write(unsigned long long, int, void*)>:
c0025dd8:	55                   	push   ebp
c0025dd9:	b8 04 00 00 00       	mov    eax,0x4
c0025dde:	57                   	push   edi
c0025ddf:	56                   	push   esi
c0025de0:	53                   	push   ebx
c0025de1:	83 ec 1c             	sub    esp,0x1c
c0025de4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025de8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025dec:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025def:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025df3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025df7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025dfd:	77 56                	ja     c0025e55 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025dff:	b8 06 00 00 00       	mov    eax,0x6
c0025e04:	85 ff                	test   edi,edi
c0025e06:	74 4d                	je     c0025e55 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025e08:	89 ee                	mov    esi,ebp
c0025e0a:	c1 e6 09             	shl    esi,0x9
c0025e0d:	01 fe                	add    esi,edi
c0025e0f:	89 c8                	mov    eax,ecx
c0025e11:	89 da                	mov    edx,ebx
c0025e13:	83 c0 01             	add    eax,0x1
c0025e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025e1a:	83 d2 00             	adc    edx,0x0
c0025e1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025e21:	50                   	push   eax
c0025e22:	50                   	push   eax
c0025e23:	6a 01                	push   0x1
c0025e25:	57                   	push   edi
c0025e26:	81 c7 00 02 00 00    	add    edi,0x200
c0025e2c:	6a 01                	push   0x1
c0025e2e:	53                   	push   ebx
c0025e2f:	51                   	push   ecx
c0025e30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025e34:	e8 d1 fc ff ff       	call   c0025b0a <SATA::access(unsigned long long, int, void*, bool)>
c0025e39:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025e3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025e41:	83 c4 20             	add    esp,0x20
c0025e44:	39 f7                	cmp    edi,esi
c0025e46:	75 c7                	jne    c0025e0f <SATA::write(unsigned long long, int, void*)+0x37>
c0025e48:	01 2d d4 38 03 c0    	add    DWORD PTR ds:0xc00338d4,ebp
c0025e4e:	e8 e9 aa fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025e53:	31 c0                	xor    eax,eax
c0025e55:	83 c4 1c             	add    esp,0x1c
c0025e58:	5b                   	pop    ebx
c0025e59:	5e                   	pop    esi
c0025e5a:	5f                   	pop    edi
c0025e5b:	5d                   	pop    ebp
c0025e5c:	c3                   	ret    
c0025e5d:	90                   	nop

c0025e5e <SATAPI::write(unsigned long long, int, void*)>:
c0025e5e:	b8 03 00 00 00       	mov    eax,0x3
c0025e63:	c3                   	ret    

c0025e64 <SATAPI::close(int, int, void*)>:
c0025e64:	83 ec 0c             	sub    esp,0xc
c0025e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e71:	85 c0                	test   eax,eax
c0025e73:	74 0c                	je     c0025e81 <SATAPI::close(int, int, void*)+0x1d>
c0025e75:	83 ec 0c             	sub    esp,0xc
c0025e78:	8b 10                	mov    edx,DWORD PTR [eax]
c0025e7a:	50                   	push   eax
c0025e7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025e7e:	83 c4 10             	add    esp,0x10
c0025e81:	31 c0                	xor    eax,eax
c0025e83:	83 c4 0c             	add    esp,0xc
c0025e86:	c3                   	ret    
c0025e87:	90                   	nop

c0025e88 <SATAPI::SATAPI()>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8f:	83 ec 04             	sub    esp,0x4
c0025e92:	68 00 08 00 00       	push   0x800
c0025e97:	68 6c e0 02 c0       	push   0xc002e06c
c0025e9c:	50                   	push   eax
c0025e9d:	e8 2e e8 fe ff       	call   c00146d0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025ea2:	83 c4 10             	add    esp,0x10
c0025ea5:	ba 18 e1 02 c0       	mov    edx,0xc002e118
c0025eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eae:	89 10                	mov    DWORD PTR [eax],edx
c0025eb0:	90                   	nop
c0025eb1:	83 c4 0c             	add    esp,0xc
c0025eb4:	c3                   	ret    
c0025eb5:	90                   	nop

c0025eb6 <SATAPI::diskRemoved()>:
c0025eb6:	83 ec 18             	sub    esp,0x18
c0025eb9:	68 78 e0 02 c0       	push   0xc002e078
c0025ebe:	e8 8e cf fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0025ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ec7:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025ece:	83 c4 1c             	add    esp,0x1c
c0025ed1:	c3                   	ret    

c0025ed2 <SATAPI::diskInserted()>:
c0025ed2:	53                   	push   ebx
c0025ed3:	83 ec 14             	sub    esp,0x14
c0025ed6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025eda:	68 8f e0 02 c0       	push   0xc002e08f
c0025edf:	e8 6d cf fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0025ee4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025eeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025eee:	e8 45 e8 fe ff       	call   c0014738 <PhysicalDisk::startCache()>
c0025ef3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025ef7:	83 c4 18             	add    esp,0x18
c0025efa:	5b                   	pop    ebx
c0025efb:	e9 f2 0a ff ff       	jmp    c00169f2 <createPartitionsForDisk(PhysicalDisk*)>

c0025f00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025f00:	55                   	push   ebp
c0025f01:	57                   	push   edi
c0025f02:	56                   	push   esi
c0025f03:	53                   	push   ebx
c0025f04:	83 ec 34             	sub    esp,0x34
c0025f07:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025f0b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025f0f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025f13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025f17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025f1b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025f21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f2b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025f31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025f35:	c1 e0 07             	shl    eax,0x7
c0025f38:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025f3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025f40:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025f4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f4e:	8d 58 02             	lea    ebx,[eax+0x2]
c0025f51:	c1 e3 07             	shl    ebx,0x7
c0025f54:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025f58:	53                   	push   ebx
c0025f59:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025f5f:	e8 d0 eb ff ff       	call   c0024b34 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025f64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025f68:	83 c4 10             	add    esp,0x10
c0025f6b:	b8 01 00 00 00       	mov    eax,0x1
c0025f70:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025f75:	0f 84 85 01 00 00    	je     c0026100 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025f7b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025f83:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025f89:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025f8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f93:	c1 e1 05             	shl    ecx,0x5
c0025f96:	01 c8                	add    eax,ecx
c0025f98:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025f9a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025fa0:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025fa6:	89 08                	mov    DWORD PTR [eax],ecx
c0025fa8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025fae:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025fb4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025fba:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025fbd:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025fc0:	50                   	push   eax
c0025fc1:	68 90 00 00 00       	push   0x90
c0025fc6:	6a 00                	push   0x0
c0025fc8:	53                   	push   ebx
c0025fc9:	e8 82 a7 fd ff       	call   c0000750 <memset>
c0025fce:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025fd2:	b9 0c 00 00 00       	mov    ecx,0xc
c0025fd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025fd9:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025fdf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025fe3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025fe9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025fed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025ff1:	48                   	dec    eax
c0025ff2:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025ff7:	89 c1                	mov    ecx,eax
c0025ff9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025fff:	25 00 00 c0 ff       	and    eax,0xffc00000
c0026004:	09 c8                	or     eax,ecx
c0026006:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002600c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002600f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0026016:	66 25 00 7f          	and    ax,0x7f00
c002601a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002601e:	66 0d 27 80          	or     ax,0x8027
c0026022:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0026026:	66 89 03             	mov    WORD PTR [ebx],ax
c0026029:	89 d0                	mov    eax,edx
c002602b:	c1 ea 18             	shr    edx,0x18
c002602e:	c1 e8 10             	shr    eax,0x10
c0026031:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0026034:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0026037:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002603b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002603e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026042:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0026045:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0026049:	83 c4 10             	add    esp,0x10
c002604c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0026050:	31 c0                	xor    eax,eax
c0026052:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0026056:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c002605c:	80 e2 88             	and    dl,0x88
c002605f:	74 0a                	je     c002606b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0026061:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0026066:	74 0a                	je     c0026072 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0026068:	40                   	inc    eax
c0026069:	eb eb                	jmp    c0026056 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c002606b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0026070:	75 0f                	jne    c0026081 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0026072:	83 ec 0c             	sub    esp,0xc
c0026075:	68 15 e0 02 c0       	push   0xc002e015
c002607a:	e8 1a 49 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c002607f:	eb 3f                	jmp    c00260c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0026081:	ba 01 00 00 00       	mov    edx,0x1
c0026086:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002608a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002608e:	d3 e2                	shl    edx,cl
c0026090:	c1 e0 07             	shl    eax,0x7
c0026093:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0026099:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002609d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00260a3:	85 ca                	test   edx,ecx
c00260a5:	74 23                	je     c00260ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00260a7:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c00260ad:	0f ba e1 1e          	bt     ecx,0x1e
c00260b1:	73 ea                	jae    c002609d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c00260b3:	83 ec 0c             	sub    esp,0xc
c00260b6:	68 a7 e0 02 c0       	push   0xc002e0a7
c00260bb:	e8 91 cd fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00260c0:	83 c4 10             	add    esp,0x10
c00260c3:	b8 01 00 00 00       	mov    eax,0x1
c00260c8:	eb 36                	jmp    c0026100 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00260ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00260d0:	0f ba e0 1e          	bt     eax,0x1e
c00260d4:	73 0a                	jae    c00260e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c00260d6:	83 ec 0c             	sub    esp,0xc
c00260d9:	68 ba e0 02 c0       	push   0xc002e0ba
c00260de:	eb db                	jmp    c00260bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c00260e0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00260e5:	74 17                	je     c00260fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00260e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00260ec:	74 10                	je     c00260fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00260ee:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00260f4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00260f8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00260fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00260fe:	31 c0                	xor    eax,eax
c0026100:	83 c4 2c             	add    esp,0x2c
c0026103:	5b                   	pop    ebx
c0026104:	5e                   	pop    esi
c0026105:	5f                   	pop    edi
c0026106:	5d                   	pop    ebp
c0026107:	c3                   	ret    

c0026108 <SATAPI::eject()>:
c0026108:	57                   	push   edi
c0026109:	b9 03 00 00 00       	mov    ecx,0x3
c002610e:	53                   	push   ebx
c002610f:	83 ec 14             	sub    esp,0x14
c0026112:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0026116:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002611a:	fc                   	cld    
c002611b:	31 c0                	xor    eax,eax
c002611d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002611f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0026124:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0026129:	50                   	push   eax
c002612a:	6a 00                	push   0x0
c002612c:	6a 00                	push   0x0
c002612e:	6a 00                	push   0x0
c0026130:	6a 00                	push   0x0
c0026132:	6a 02                	push   0x2
c0026134:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026138:	50                   	push   eax
c0026139:	53                   	push   ebx
c002613a:	e8 c1 fd ff ff       	call   c0025f00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002613f:	83 c4 14             	add    esp,0x14
c0026142:	53                   	push   ebx
c0026143:	e8 6e fd ff ff       	call   c0025eb6 <SATAPI::diskRemoved()>
c0026148:	83 c4 24             	add    esp,0x24
c002614b:	31 c0                	xor    eax,eax
c002614d:	5b                   	pop    ebx
c002614e:	5f                   	pop    edi
c002614f:	c3                   	ret    

c0026150 <SATAPI::detectMedia()>:
c0026150:	56                   	push   esi
c0026151:	53                   	push   ebx
c0026152:	83 ec 28             	sub    esp,0x28
c0026155:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026159:	6a 0c                	push   0xc
c002615b:	6a 00                	push   0x0
c002615d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0026161:	56                   	push   esi
c0026162:	e8 e9 a5 fd ff       	call   c0000750 <memset>
c0026167:	83 c4 0c             	add    esp,0xc
c002616a:	6a 00                	push   0x0
c002616c:	6a 00                	push   0x0
c002616e:	6a 00                	push   0x0
c0026170:	6a 00                	push   0x0
c0026172:	6a 00                	push   0x0
c0026174:	56                   	push   esi
c0026175:	53                   	push   ebx
c0026176:	e8 85 fd ff ff       	call   c0025f00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002617b:	83 c4 1c             	add    esp,0x1c
c002617e:	6a 0c                	push   0xc
c0026180:	6a 00                	push   0x0
c0026182:	56                   	push   esi
c0026183:	e8 c8 a5 fd ff       	call   c0000750 <memset>
c0026188:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002618d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0026192:	83 c4 0c             	add    esp,0xc
c0026195:	6a 01                	push   0x1
c0026197:	8d 44 24 16          	lea    eax,[esp+0x16]
c002619b:	50                   	push   eax
c002619c:	6a 00                	push   0x0
c002619e:	6a 00                	push   0x0
c00261a0:	6a 12                	push   0x12
c00261a2:	56                   	push   esi
c00261a3:	53                   	push   ebx
c00261a4:	e8 57 fd ff ff       	call   c0025f00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00261a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00261ad:	83 c4 20             	add    esp,0x20
c00261b0:	83 e0 7f             	and    eax,0x7f
c00261b3:	3c 70                	cmp    al,0x70
c00261b5:	74 15                	je     c00261cc <SATAPI::detectMedia()+0x7c>
c00261b7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00261be:	75 0c                	jne    c00261cc <SATAPI::detectMedia()+0x7c>
c00261c0:	83 ec 0c             	sub    esp,0xc
c00261c3:	53                   	push   ebx
c00261c4:	e8 09 fd ff ff       	call   c0025ed2 <SATAPI::diskInserted()>
c00261c9:	83 c4 10             	add    esp,0x10
c00261cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00261d0:	83 e0 0f             	and    eax,0xf
c00261d3:	3c 02                	cmp    al,0x2
c00261d5:	75 1b                	jne    c00261f2 <SATAPI::detectMedia()+0xa2>
c00261d7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00261dc:	75 2d                	jne    c002620b <SATAPI::detectMedia()+0xbb>
c00261de:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00261e5:	74 24                	je     c002620b <SATAPI::detectMedia()+0xbb>
c00261e7:	83 ec 0c             	sub    esp,0xc
c00261ea:	53                   	push   ebx
c00261eb:	e8 c6 fc ff ff       	call   c0025eb6 <SATAPI::diskRemoved()>
c00261f0:	eb 16                	jmp    c0026208 <SATAPI::detectMedia()+0xb8>
c00261f2:	84 c0                	test   al,al
c00261f4:	75 15                	jne    c002620b <SATAPI::detectMedia()+0xbb>
c00261f6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00261fd:	75 0c                	jne    c002620b <SATAPI::detectMedia()+0xbb>
c00261ff:	83 ec 0c             	sub    esp,0xc
c0026202:	53                   	push   ebx
c0026203:	e8 ca fc ff ff       	call   c0025ed2 <SATAPI::diskInserted()>
c0026208:	83 c4 10             	add    esp,0x10
c002620b:	83 c4 24             	add    esp,0x24
c002620e:	5b                   	pop    ebx
c002620f:	5e                   	pop    esi
c0026210:	c3                   	ret    
c0026211:	90                   	nop

c0026212 <SATAPI::open(int, int, void*)>:
c0026212:	56                   	push   esi
c0026213:	53                   	push   ebx
c0026214:	50                   	push   eax
c0026215:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0026219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002621d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0026227:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002622d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0026237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002623b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0026245:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002624b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0026252:	e8 a1 9c fe ff       	call   c000fef8 <Phys::allocatePage()>
c0026257:	89 c6                	mov    esi,eax
c0026259:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002625f:	81 c6 00 10 00 00    	add    esi,0x1000
c0026265:	e8 8e 9c fe ff       	call   c000fef8 <Phys::allocatePage()>
c002626a:	39 c6                	cmp    esi,eax
c002626c:	74 10                	je     c002627e <SATAPI::open(int, int, void*)+0x6c>
c002626e:	83 ec 0c             	sub    esp,0xc
c0026271:	68 cf e0 02 c0       	push   0xc002e0cf
c0026276:	e8 1e 47 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c002627b:	83 c4 10             	add    esp,0x10
c002627e:	83 ec 0c             	sub    esp,0xc
c0026281:	6a 02                	push   0x2
c0026283:	e8 a9 b7 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0026288:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002628e:	6a 03                	push   0x3
c0026290:	50                   	push   eax
c0026291:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0026297:	ff 35 f0 f6 02 c0    	push   DWORD PTR ds:0xc002f6f0
c002629d:	e8 c6 bf fe ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00262a2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00262a9:	83 c4 14             	add    esp,0x14
c00262ac:	53                   	push   ebx
c00262ad:	e8 9e fe ff ff       	call   c0026150 <SATAPI::detectMedia()>
c00262b2:	83 c4 14             	add    esp,0x14
c00262b5:	31 c0                	xor    eax,eax
c00262b7:	5b                   	pop    ebx
c00262b8:	5e                   	pop    esi
c00262b9:	c3                   	ret    

c00262ba <SATAPI::read(unsigned long long, int, void*)>:
c00262ba:	55                   	push   ebp
c00262bb:	57                   	push   edi
c00262bc:	56                   	push   esi
c00262bd:	53                   	push   ebx
c00262be:	83 ec 1c             	sub    esp,0x1c
c00262c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00262c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00262cd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00262d4:	74 19                	je     c00262ef <SATAPI::read(unsigned long long, int, void*)+0x35>
c00262d6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00262db:	7e 2e                	jle    c002630b <SATAPI::read(unsigned long long, int, void*)+0x51>
c00262dd:	83 ec 0c             	sub    esp,0xc
c00262e0:	68 e5 e0 02 c0       	push   0xc002e0e5
c00262e5:	e8 af 46 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00262ea:	83 c4 10             	add    esp,0x10
c00262ed:	eb 1c                	jmp    c002630b <SATAPI::read(unsigned long long, int, void*)+0x51>
c00262ef:	83 ec 0c             	sub    esp,0xc
c00262f2:	55                   	push   ebp
c00262f3:	e8 58 fe ff ff       	call   c0026150 <SATAPI::detectMedia()>
c00262f8:	83 c4 10             	add    esp,0x10
c00262fb:	b8 02 00 00 00       	mov    eax,0x2
c0026300:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0026307:	75 cd                	jne    c00262d6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0026309:	eb 49                	jmp    c0026354 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002630b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002630f:	b9 03 00 00 00       	mov    ecx,0x3
c0026314:	fc                   	cld    
c0026315:	31 c0                	xor    eax,eax
c0026317:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0026319:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002631e:	89 d8                	mov    eax,ebx
c0026320:	86 e0                	xchg   al,ah
c0026322:	c1 c0 10             	rol    eax,0x10
c0026325:	86 e0                	xchg   al,ah
c0026327:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002632b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002632f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0026333:	50                   	push   eax
c0026334:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026338:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002633c:	56                   	push   esi
c002633d:	53                   	push   ebx
c002633e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0026342:	c1 e0 0b             	shl    eax,0xb
c0026345:	50                   	push   eax
c0026346:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002634a:	50                   	push   eax
c002634b:	55                   	push   ebp
c002634c:	e8 af fb ff ff       	call   c0025f00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026351:	83 c4 20             	add    esp,0x20
c0026354:	83 c4 1c             	add    esp,0x1c
c0026357:	5b                   	pop    ebx
c0026358:	5e                   	pop    esi
c0026359:	5f                   	pop    edi
c002635a:	5d                   	pop    ebp
c002635b:	c3                   	ret    

c002635c <AVX::open(int, int, void*)>:
c002635c:	83 ec 0c             	sub    esp,0xc
c002635f:	e8 44 11 00 00       	call   c00274a8 <avxInit>
c0026364:	b8 00 00 00 00       	mov    eax,0x0
c0026369:	83 c4 0c             	add    esp,0xc
c002636c:	c3                   	ret    
c002636d:	90                   	nop

c002636e <AVX::close(int, int, void*)>:
c002636e:	83 ec 0c             	sub    esp,0xc
c0026371:	e8 33 11 00 00       	call   c00274a9 <avxClose>
c0026376:	b8 00 00 00 00       	mov    eax,0x0
c002637b:	83 c4 0c             	add    esp,0xc
c002637e:	c3                   	ret    
c002637f:	90                   	nop

c0026380 <AVX::available()>:
c0026380:	83 ec 0c             	sub    esp,0xc
c0026383:	e8 18 11 00 00       	call   c00274a0 <avxDetect>
c0026388:	85 c0                	test   eax,eax
c002638a:	0f 95 c0             	setne  al
c002638d:	83 c4 0c             	add    esp,0xc
c0026390:	c3                   	ret    
c0026391:	90                   	nop

c0026392 <AVX::save(void*)>:
c0026392:	83 ec 0c             	sub    esp,0xc
c0026395:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026399:	83 ec 0c             	sub    esp,0xc
c002639c:	50                   	push   eax
c002639d:	e8 04 11 00 00       	call   c00274a6 <avxSave>
c00263a2:	83 c4 10             	add    esp,0x10
c00263a5:	90                   	nop
c00263a6:	83 c4 0c             	add    esp,0xc
c00263a9:	c3                   	ret    

c00263aa <AVX::load(void*)>:
c00263aa:	83 ec 0c             	sub    esp,0xc
c00263ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263b1:	83 ec 0c             	sub    esp,0xc
c00263b4:	50                   	push   eax
c00263b5:	e8 ed 10 00 00       	call   c00274a7 <avxLoad>
c00263ba:	83 c4 10             	add    esp,0x10
c00263bd:	90                   	nop
c00263be:	83 c4 0c             	add    esp,0xc
c00263c1:	c3                   	ret    

c00263c2 <AVX::AVX()>:
c00263c2:	83 ec 0c             	sub    esp,0xc
c00263c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c9:	83 ec 08             	sub    esp,0x8
c00263cc:	68 48 e1 02 c0       	push   0xc002e148
c00263d1:	50                   	push   eax
c00263d2:	e8 d7 e3 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c00263d7:	83 c4 10             	add    esp,0x10
c00263da:	ba 58 e1 02 c0       	mov    edx,0xc002e158
c00263df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e3:	89 10                	mov    DWORD PTR [eax],edx
c00263e5:	90                   	nop
c00263e6:	83 c4 0c             	add    esp,0xc
c00263e9:	c3                   	ret    

c00263ea <MMX::available()>:
c00263ea:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00263ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00263f5:	83 e0 20             	and    eax,0x20
c00263f8:	84 c0                	test   al,al
c00263fa:	0f 95 c0             	setne  al
c00263fd:	c3                   	ret    

c00263fe <MMX::open(int, int, void*)>:
c00263fe:	83 ec 0c             	sub    esp,0xc
c0026401:	e8 2c 11 00 00       	call   c0027532 <x87Init>
c0026406:	b8 00 00 00 00       	mov    eax,0x0
c002640b:	83 c4 0c             	add    esp,0xc
c002640e:	c3                   	ret    
c002640f:	90                   	nop

c0026410 <MMX::close(int, int, void*)>:
c0026410:	83 ec 0c             	sub    esp,0xc
c0026413:	e8 34 11 00 00       	call   c002754c <x87Close>
c0026418:	b8 00 00 00 00       	mov    eax,0x0
c002641d:	83 c4 0c             	add    esp,0xc
c0026420:	c3                   	ret    
c0026421:	90                   	nop

c0026422 <MMX::save(void*)>:
c0026422:	83 ec 0c             	sub    esp,0xc
c0026425:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026429:	83 ec 0c             	sub    esp,0xc
c002642c:	50                   	push   eax
c002642d:	e8 ef 10 00 00       	call   c0027521 <x87Save>
c0026432:	83 c4 10             	add    esp,0x10
c0026435:	90                   	nop
c0026436:	83 c4 0c             	add    esp,0xc
c0026439:	c3                   	ret    

c002643a <MMX::load(void*)>:
c002643a:	83 ec 0c             	sub    esp,0xc
c002643d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026441:	83 ec 0c             	sub    esp,0xc
c0026444:	50                   	push   eax
c0026445:	e8 e0 10 00 00       	call   c002752a <x87Load>
c002644a:	83 c4 10             	add    esp,0x10
c002644d:	90                   	nop
c002644e:	83 c4 0c             	add    esp,0xc
c0026451:	c3                   	ret    

c0026452 <MMX::MMX()>:
c0026452:	83 ec 0c             	sub    esp,0xc
c0026455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026459:	83 ec 08             	sub    esp,0x8
c002645c:	68 88 e1 02 c0       	push   0xc002e188
c0026461:	50                   	push   eax
c0026462:	e8 47 e3 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c0026467:	83 c4 10             	add    esp,0x10
c002646a:	ba 98 e1 02 c0       	mov    edx,0xc002e198
c002646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026473:	89 10                	mov    DWORD PTR [eax],edx
c0026475:	90                   	nop
c0026476:	83 c4 0c             	add    esp,0xc
c0026479:	c3                   	ret    

c002647a <SSE::open(int, int, void*)>:
c002647a:	83 ec 0c             	sub    esp,0xc
c002647d:	e8 62 10 00 00       	call   c00274e4 <sseInit>
c0026482:	b8 00 00 00 00       	mov    eax,0x0
c0026487:	83 c4 0c             	add    esp,0xc
c002648a:	c3                   	ret    
c002648b:	90                   	nop

c002648c <SSE::close(int, int, void*)>:
c002648c:	83 ec 0c             	sub    esp,0xc
c002648f:	e8 60 10 00 00       	call   c00274f4 <sseClose>
c0026494:	b8 00 00 00 00       	mov    eax,0x0
c0026499:	83 c4 0c             	add    esp,0xc
c002649c:	c3                   	ret    
c002649d:	90                   	nop

c002649e <SSE::available()>:
c002649e:	83 ec 1c             	sub    esp,0x1c
c00264a1:	e8 1a 10 00 00       	call   c00274c0 <absolutelyNoChanceInHell>
c00264a6:	85 c0                	test   eax,eax
c00264a8:	0f 95 c0             	setne  al
c00264ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00264af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00264b3:	83 c4 1c             	add    esp,0x1c
c00264b6:	c3                   	ret    
c00264b7:	90                   	nop

c00264b8 <SSE::save(void*)>:
c00264b8:	83 ec 0c             	sub    esp,0xc
c00264bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264bf:	83 ec 0c             	sub    esp,0xc
c00264c2:	50                   	push   eax
c00264c3:	e8 10 10 00 00       	call   c00274d8 <sseSave>
c00264c8:	83 c4 10             	add    esp,0x10
c00264cb:	90                   	nop
c00264cc:	83 c4 0c             	add    esp,0xc
c00264cf:	c3                   	ret    

c00264d0 <SSE::load(void*)>:
c00264d0:	83 ec 0c             	sub    esp,0xc
c00264d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264d7:	83 ec 0c             	sub    esp,0xc
c00264da:	50                   	push   eax
c00264db:	e8 fe 0f 00 00       	call   c00274de <sseLoad>
c00264e0:	83 c4 10             	add    esp,0x10
c00264e3:	90                   	nop
c00264e4:	83 c4 0c             	add    esp,0xc
c00264e7:	c3                   	ret    

c00264e8 <SSE::SSE()>:
c00264e8:	83 ec 0c             	sub    esp,0xc
c00264eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ef:	83 ec 08             	sub    esp,0x8
c00264f2:	68 c8 e1 02 c0       	push   0xc002e1c8
c00264f7:	50                   	push   eax
c00264f8:	e8 b1 e2 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c00264fd:	83 c4 10             	add    esp,0x10
c0026500:	ba d8 e1 02 c0       	mov    edx,0xc002e1d8
c0026505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026509:	89 10                	mov    DWORD PTR [eax],edx
c002650b:	90                   	nop
c002650c:	83 c4 0c             	add    esp,0xc
c002650f:	c3                   	ret    

c0026510 <x87::open(int, int, void*)>:
c0026510:	83 ec 0c             	sub    esp,0xc
c0026513:	e8 1a 10 00 00       	call   c0027532 <x87Init>
c0026518:	b8 00 00 00 00       	mov    eax,0x0
c002651d:	83 c4 0c             	add    esp,0xc
c0026520:	c3                   	ret    
c0026521:	90                   	nop

c0026522 <x87::close(int, int, void*)>:
c0026522:	83 ec 0c             	sub    esp,0xc
c0026525:	e8 22 10 00 00       	call   c002754c <x87Close>
c002652a:	b8 00 00 00 00       	mov    eax,0x0
c002652f:	83 c4 0c             	add    esp,0xc
c0026532:	c3                   	ret    
c0026533:	90                   	nop

c0026534 <x87::available()>:
c0026534:	83 ec 0c             	sub    esp,0xc
c0026537:	e8 ca 0f 00 00       	call   c0027506 <x87Detect>
c002653c:	85 c0                	test   eax,eax
c002653e:	0f 95 c0             	setne  al
c0026541:	83 c4 0c             	add    esp,0xc
c0026544:	c3                   	ret    
c0026545:	90                   	nop

c0026546 <x87::save(void*)>:
c0026546:	83 ec 0c             	sub    esp,0xc
c0026549:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002654d:	83 ec 0c             	sub    esp,0xc
c0026550:	50                   	push   eax
c0026551:	e8 cb 0f 00 00       	call   c0027521 <x87Save>
c0026556:	83 c4 10             	add    esp,0x10
c0026559:	90                   	nop
c002655a:	83 c4 0c             	add    esp,0xc
c002655d:	c3                   	ret    

c002655e <x87::load(void*)>:
c002655e:	83 ec 0c             	sub    esp,0xc
c0026561:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026565:	83 ec 0c             	sub    esp,0xc
c0026568:	50                   	push   eax
c0026569:	e8 bc 0f 00 00       	call   c002752a <x87Load>
c002656e:	83 c4 10             	add    esp,0x10
c0026571:	90                   	nop
c0026572:	83 c4 0c             	add    esp,0xc
c0026575:	c3                   	ret    

c0026576 <x87::x87()>:
c0026576:	83 ec 0c             	sub    esp,0xc
c0026579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657d:	83 ec 08             	sub    esp,0x8
c0026580:	68 08 e2 02 c0       	push   0xc002e208
c0026585:	50                   	push   eax
c0026586:	e8 23 e2 fe ff       	call   c00147ae <FPU::FPU(char const*)>
c002658b:	83 c4 10             	add    esp,0x10
c002658e:	ba 18 e2 02 c0       	mov    edx,0xc002e218
c0026593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026597:	89 10                	mov    DWORD PTR [eax],edx
c0026599:	90                   	nop
c002659a:	83 c4 0c             	add    esp,0xc
c002659d:	c3                   	ret    

c002659e <APIC::disable()>:
c002659e:	90                   	nop
c002659f:	c3                   	ret    

c00265a0 <APIC::close(int, int, void*)>:
c00265a0:	55                   	push   ebp
c00265a1:	89 e5                	mov    ebp,esp
c00265a3:	83 ec 08             	sub    esp,0x8
c00265a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ab:	83 c0 3c             	add    eax,0x3c
c00265ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00265b0:	83 ec 0c             	sub    esp,0xc
c00265b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265b6:	ff d0                	call   eax
c00265b8:	83 c4 10             	add    esp,0x10
c00265bb:	b8 00 00 00 00       	mov    eax,0x0
c00265c0:	c9                   	leave  
c00265c1:	c3                   	ret    

c00265c2 <IOAPIC::close(int, int, void*)>:
c00265c2:	b8 00 00 00 00       	mov    eax,0x0
c00265c7:	c3                   	ret    

c00265c8 <APIC::io_wait()>:
c00265c8:	eb 00                	jmp    c00265ca <APIC::io_wait()+0x2>
c00265ca:	eb 00                	jmp    c00265cc <APIC::io_wait()+0x4>
c00265cc:	90                   	nop
c00265cd:	c3                   	ret    

c00265ce <APIC::getBase()>:
c00265ce:	55                   	push   ebp
c00265cf:	89 e5                	mov    ebp,esp
c00265d1:	83 ec 18             	sub    esp,0x18
c00265d4:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00265d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00265df:	83 e0 08             	and    eax,0x8
c00265e2:	84 c0                	test   al,al
c00265e4:	75 07                	jne    c00265ed <APIC::getBase()+0x1f>
c00265e6:	b8 00 00 00 00       	mov    eax,0x0
c00265eb:	eb 21                	jmp    c002660e <APIC::getBase()+0x40>
c00265ed:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00265f2:	83 ec 08             	sub    esp,0x8
c00265f5:	6a 1b                	push   0x1b
c00265f7:	50                   	push   eax
c00265f8:	e8 35 88 fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00265fd:	83 c4 10             	add    esp,0x10
c0026600:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026603:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026606:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026609:	25 00 f0 ff ff       	and    eax,0xfffff000
c002660e:	c9                   	leave  
c002660f:	c3                   	ret    

c0026610 <APIC::eoi(unsigned char)>:
c0026610:	55                   	push   ebp
c0026611:	89 e5                	mov    ebp,esp
c0026613:	83 ec 28             	sub    esp,0x28
c0026616:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026619:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002661c:	83 ec 0c             	sub    esp,0xc
c002661f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026622:	e8 a7 ff ff ff       	call   c00265ce <APIC::getBase()>
c0026627:	83 c4 10             	add    esp,0x10
c002662a:	05 b0 00 00 00       	add    eax,0xb0
c002662f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026632:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026635:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002663b:	90                   	nop
c002663c:	c9                   	leave  
c002663d:	c3                   	ret    

c002663e <APIC::open(int, int, void*)>:
c002663e:	55                   	push   ebp
c002663f:	89 e5                	mov    ebp,esp
c0026641:	57                   	push   edi
c0026642:	56                   	push   esi
c0026643:	53                   	push   ebx
c0026644:	83 ec 2c             	sub    esp,0x2c
c0026647:	83 ec 0c             	sub    esp,0xc
c002664a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002664d:	e8 7c ff ff ff       	call   c00265ce <APIC::getBase()>
c0026652:	83 c4 10             	add    esp,0x10
c0026655:	89 c2                	mov    edx,eax
c0026657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002665a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026660:	0f b6 f8             	movzx  edi,al
c0026663:	89 d0                	mov    eax,edx
c0026665:	ba 00 00 00 00       	mov    edx,0x0
c002666a:	89 c1                	mov    ecx,eax
c002666c:	80 e5 ff             	and    ch,0xff
c002666f:	89 cb                	mov    ebx,ecx
c0026671:	0f b6 f2             	movzx  esi,dl
c0026674:	89 d8                	mov    eax,ebx
c0026676:	89 f2                	mov    edx,esi
c0026678:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002667b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002667e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026682:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026686:	83 e0 00             	and    eax,0x0
c0026689:	09 d0                	or     eax,edx
c002668b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002668f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026692:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026698:	8d 50 01             	lea    edx,[eax+0x1]
c002669b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002669e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00266a4:	0f b6 d0             	movzx  edx,al
c00266a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266aa:	83 c2 08             	add    edx,0x8
c00266ad:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00266b1:	0f b6 c9             	movzx  ecx,cl
c00266b4:	81 c9 00 00 01 00    	or     ecx,0x10000
c00266ba:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00266be:	83 ec 0c             	sub    esp,0xc
c00266c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266c4:	e8 05 ff ff ff       	call   c00265ce <APIC::getBase()>
c00266c9:	83 c4 10             	add    esp,0x10
c00266cc:	05 f0 00 00 00       	add    eax,0xf0
c00266d1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00266d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00266d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00266dc:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00266e3:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00266ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266ed:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266f0:	89 10                	mov    DWORD PTR [eax],edx
c00266f2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00266f9:	a1 50 1e 03 c0       	mov    eax,ds:0xc0031e50
c00266fe:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026701:	7d 7c                	jge    c002677f <APIC::open(int, int, void*)+0x141>
c0026703:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026706:	8b 04 85 60 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1a0]
c002670d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026710:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026713:	8b 04 85 60 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1a0]
c002671a:	c1 e8 08             	shr    eax,0x8
c002671d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026721:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026724:	8b 04 85 60 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1a0]
c002672b:	c1 e8 18             	shr    eax,0x18
c002672e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026731:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026735:	75 40                	jne    c0026777 <APIC::open(int, int, void*)+0x139>
c0026737:	83 ec 0c             	sub    esp,0xc
c002673a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002673d:	e8 8c fe ff ff       	call   c00265ce <APIC::getBase()>
c0026742:	83 c4 10             	add    esp,0x10
c0026745:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026749:	75 07                	jne    c0026752 <APIC::open(int, int, void*)+0x114>
c002674b:	ba 60 03 00 00       	mov    edx,0x360
c0026750:	eb 05                	jmp    c0026757 <APIC::open(int, int, void*)+0x119>
c0026752:	ba 50 03 00 00       	mov    edx,0x350
c0026757:	01 d0                	add    eax,edx
c0026759:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002675c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002675f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026761:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026764:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002676b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002676f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026772:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026775:	89 10                	mov    DWORD PTR [eax],edx
c0026777:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002677a:	e9 7a ff ff ff       	jmp    c00266f9 <APIC::open(int, int, void*)+0xbb>
c002677f:	b8 00 00 00 00       	mov    eax,0x0
c0026784:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026787:	5b                   	pop    ebx
c0026788:	5e                   	pop    esi
c0026789:	5f                   	pop    edi
c002678a:	5d                   	pop    ebp
c002678b:	c3                   	ret    

c002678c <IOAPIC::IOAPIC()>:
c002678c:	83 ec 0c             	sub    esp,0xc
c002678f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026793:	83 ec 08             	sub    esp,0x8
c0026796:	68 48 e2 02 c0       	push   0xc002e248
c002679b:	50                   	push   eax
c002679c:	e8 ed dc fe ff       	call   c001448e <Device::Device(char const*)>
c00267a1:	83 c4 10             	add    esp,0x10
c00267a4:	ba 70 e3 02 c0       	mov    edx,0xc002e370
c00267a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ad:	89 10                	mov    DWORD PTR [eax],edx
c00267af:	90                   	nop
c00267b0:	83 c4 0c             	add    esp,0xc
c00267b3:	c3                   	ret    

c00267b4 <APIC::APIC()>:
c00267b4:	53                   	push   ebx
c00267b5:	83 ec 18             	sub    esp,0x18
c00267b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267bc:	83 ec 08             	sub    esp,0x8
c00267bf:	68 50 e2 02 c0       	push   0xc002e250
c00267c4:	50                   	push   eax
c00267c5:	e8 3e e4 fe ff       	call   c0014c08 <InterruptController::InterruptController(char const*)>
c00267ca:	83 c4 10             	add    esp,0x10
c00267cd:	ba 28 e3 02 c0       	mov    edx,0xc002e328
c00267d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267d6:	89 10                	mov    DWORD PTR [eax],edx
c00267d8:	a0 20 39 03 c0       	mov    al,ds:0xc0033920
c00267dd:	83 f0 01             	xor    eax,0x1
c00267e0:	84 c0                	test   al,al
c00267e2:	0f 84 a1 00 00 00    	je     c0026889 <APIC::APIC()+0xd5>
c00267e8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00267ed:	a0 00 1f 03 c0       	mov    al,ds:0xc0031f00
c00267f2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00267f6:	0f 83 86 00 00 00    	jae    c0026882 <APIC::APIC()+0xce>
c00267fc:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026804:	83 ec 0c             	sub    esp,0xc
c0026807:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002680b:	e8 7c 90 fe ff       	call   c000f88c <malloc>
c0026810:	83 c4 10             	add    esp,0x10
c0026813:	89 c3                	mov    ebx,eax
c0026815:	83 ec 0c             	sub    esp,0xc
c0026818:	53                   	push   ebx
c0026819:	e8 6e ff ff ff       	call   c002678c <IOAPIC::IOAPIC()>
c002681e:	83 c4 10             	add    esp,0x10
c0026821:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026825:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002682a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002682e:	89 14 85 00 39 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc700],edx
c0026835:	a1 e0 38 03 c0       	mov    eax,ds:0xc00338e0
c002683a:	40                   	inc    eax
c002683b:	a3 e0 38 03 c0       	mov    ds:0xc00338e0,eax
c0026840:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0026845:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002684b:	83 ec 08             	sub    esp,0x8
c002684e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026852:	50                   	push   eax
c0026853:	e8 32 da fe ff       	call   c001428a <Device::addChild(Device*)>
c0026858:	83 c4 10             	add    esp,0x10
c002685b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002685f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026861:	83 c0 08             	add    eax,0x8
c0026864:	8b 00                	mov    eax,DWORD PTR [eax]
c0026866:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002686b:	6a 00                	push   0x0
c002686d:	6a 00                	push   0x0
c002686f:	52                   	push   edx
c0026870:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026874:	ff d0                	call   eax
c0026876:	83 c4 10             	add    esp,0x10
c0026879:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002687d:	e9 6b ff ff ff       	jmp    c00267ed <APIC::APIC()+0x39>
c0026882:	c6 05 20 39 03 c0 01 	mov    BYTE PTR ds:0xc0033920,0x1
c0026889:	90                   	nop
c002688a:	83 c4 18             	add    esp,0x18
c002688d:	5b                   	pop    ebx
c002688e:	c3                   	ret    
c002688f:	90                   	nop

c0026890 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026890:	55                   	push   ebp
c0026891:	89 e5                	mov    ebp,esp
c0026893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026896:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002689c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002689f:	72 1d                	jb     c00268be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00268a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268a4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00268aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268ad:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00268b3:	01 d0                	add    eax,edx
c00268b5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00268b8:	73 04                	jae    c00268be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00268ba:	b0 01                	mov    al,0x1
c00268bc:	eb 02                	jmp    c00268c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00268be:	b0 00                	mov    al,0x0
c00268c0:	5d                   	pop    ebp
c00268c1:	c3                   	ret    

c00268c2 <IOAPIC::read(int)>:
c00268c2:	55                   	push   ebp
c00268c3:	89 e5                	mov    ebp,esp
c00268c5:	83 ec 10             	sub    esp,0x10
c00268c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00268d1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00268d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268d7:	0f b6 d0             	movzx  edx,al
c00268da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268dd:	89 10                	mov    DWORD PTR [eax],edx
c00268df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268e2:	83 c0 10             	add    eax,0x10
c00268e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00268e7:	c9                   	leave  
c00268e8:	c3                   	ret    
c00268e9:	90                   	nop

c00268ea <IOAPIC::open(int, int, void*)>:
c00268ea:	55                   	push   ebp
c00268eb:	89 e5                	mov    ebp,esp
c00268ed:	57                   	push   edi
c00268ee:	56                   	push   esi
c00268ef:	53                   	push   ebx
c00268f0:	83 ec 0c             	sub    esp,0xc
c00268f3:	83 ec 0c             	sub    esp,0xc
c00268f6:	68 7b e2 02 c0       	push   0xc002e27b
c00268fb:	e8 51 c5 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0026900:	83 c4 10             	add    esp,0x10
c0026903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026906:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026909:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002690f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026912:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026918:	8b 14 85 40 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce0c0]
c002691f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026922:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002692b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026931:	8b 14 85 c0 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce040]
c0026938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002693b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026944:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002694a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002694d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026953:	0f b6 f8             	movzx  edi,al
c0026956:	89 d0                	mov    eax,edx
c0026958:	ba 00 00 00 00       	mov    edx,0x0
c002695d:	89 c1                	mov    ecx,eax
c002695f:	80 e5 ff             	and    ch,0xff
c0026962:	89 cb                	mov    ebx,ecx
c0026964:	0f b6 f2             	movzx  esi,dl
c0026967:	89 d8                	mov    eax,ebx
c0026969:	89 f2                	mov    edx,esi
c002696b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002696e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026971:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026975:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026979:	83 e0 00             	and    eax,0x0
c002697c:	09 d0                	or     eax,edx
c002697e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026985:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002698b:	8d 50 01             	lea    edx,[eax+0x1]
c002698e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026991:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026997:	0f b6 d0             	movzx  edx,al
c002699a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002699d:	83 c2 08             	add    edx,0x8
c00269a0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00269a4:	0f b6 c9             	movzx  ecx,cl
c00269a7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00269ad:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00269b1:	83 ec 08             	sub    esp,0x8
c00269b4:	6a 01                	push   0x1
c00269b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b9:	e8 04 ff ff ff       	call   c00268c2 <IOAPIC::read(int)>
c00269be:	83 c4 10             	add    esp,0x10
c00269c1:	c1 f8 10             	sar    eax,0x10
c00269c4:	0f b6 c0             	movzx  eax,al
c00269c7:	8d 50 01             	lea    edx,[eax+0x1]
c00269ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269cd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00269d3:	b8 00 00 00 00       	mov    eax,0x0
c00269d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00269db:	5b                   	pop    ebx
c00269dc:	5e                   	pop    esi
c00269dd:	5f                   	pop    edi
c00269de:	5d                   	pop    ebp
c00269df:	c3                   	ret    

c00269e0 <IOAPIC::write(int, int)>:
c00269e0:	55                   	push   ebp
c00269e1:	89 e5                	mov    ebp,esp
c00269e3:	83 ec 10             	sub    esp,0x10
c00269e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00269ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00269f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269f5:	0f b6 d0             	movzx  edx,al
c00269f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00269fb:	89 10                	mov    DWORD PTR [eax],edx
c00269fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026a00:	8d 50 10             	lea    edx,[eax+0x10]
c0026a03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026a06:	89 02                	mov    DWORD PTR [edx],eax
c0026a08:	90                   	nop
c0026a09:	c9                   	leave  
c0026a0a:	c3                   	ret    
c0026a0b:	90                   	nop

c0026a0c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026a0c:	55                   	push   ebp
c0026a0d:	89 e5                	mov    ebp,esp
c0026a0f:	53                   	push   ebx
c0026a10:	83 ec 2c             	sub    esp,0x2c
c0026a13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a16:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0026a19:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026a1c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026a1f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026a22:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026a25:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026a28:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026a2b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026a2e:	88 d8                	mov    al,bl
c0026a30:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026a33:	88 c8                	mov    al,cl
c0026a35:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026a38:	88 d0                	mov    al,dl
c0026a3a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026a3d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026a41:	83 c0 08             	add    eax,0x8
c0026a44:	01 c0                	add    eax,eax
c0026a46:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a49:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026a4d:	83 c0 08             	add    eax,0x8
c0026a50:	01 c0                	add    eax,eax
c0026a52:	40                   	inc    eax
c0026a53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a56:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026a59:	50                   	push   eax
c0026a5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a5d:	e8 60 fe ff ff       	call   c00268c2 <IOAPIC::read(int)>
c0026a62:	83 c4 08             	add    esp,0x8
c0026a65:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026a68:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026a6f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026a72:	c1 e0 18             	shl    eax,0x18
c0026a75:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026a78:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026a7e:	52                   	push   edx
c0026a7f:	50                   	push   eax
c0026a80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a83:	e8 58 ff ff ff       	call   c00269e0 <IOAPIC::write(int, int)>
c0026a88:	83 c4 0c             	add    esp,0xc
c0026a8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a8e:	50                   	push   eax
c0026a8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a92:	e8 2b fe ff ff       	call   c00268c2 <IOAPIC::read(int)>
c0026a97:	83 c4 08             	add    esp,0x8
c0026a9a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026a9d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026aa4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026aab:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026ab2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026ab6:	74 09                	je     c0026ac1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026ab8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026abf:	eb 07                	jmp    c0026ac8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026ac1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026ac8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026acc:	74 09                	je     c0026ad7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026ace:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026ad5:	eb 07                	jmp    c0026ade <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026ad7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026ade:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026ae5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026ae9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026aec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026aef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026af2:	52                   	push   edx
c0026af3:	50                   	push   eax
c0026af4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026af7:	e8 e4 fe ff ff       	call   c00269e0 <IOAPIC::write(int, int)>
c0026afc:	83 c4 0c             	add    esp,0xc
c0026aff:	90                   	nop
c0026b00:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026b03:	c9                   	leave  
c0026b04:	c3                   	ret    
c0026b05:	90                   	nop

c0026b06 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026b06:	55                   	push   ebp
c0026b07:	89 e5                	mov    ebp,esp
c0026b09:	57                   	push   edi
c0026b0a:	56                   	push   esi
c0026b0b:	53                   	push   ebx
c0026b0c:	83 ec 2c             	sub    esp,0x2c
c0026b0f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026b12:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026b15:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026b19:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026b1d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026b21:	74 5a                	je     c0026b7d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026b23:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026b27:	7f 44                	jg     c0026b6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026b29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b2c:	05 c0 e7 02 c0       	add    eax,0xc002e7c0
c0026b31:	8a 00                	mov    al,BYTE PTR [eax]
c0026b33:	0f b6 c0             	movzx  eax,al
c0026b36:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b3c:	66 8b 84 00 e0 1e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce120]
c0026b44:	0f b7 c0             	movzx  eax,ax
c0026b47:	83 e0 02             	and    eax,0x2
c0026b4a:	85 c0                	test   eax,eax
c0026b4c:	74 04                	je     c0026b52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026b4e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026b52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b55:	66 8b 84 00 e0 1e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce120]
c0026b5d:	0f b7 c0             	movzx  eax,ax
c0026b60:	83 e0 08             	and    eax,0x8
c0026b63:	85 c0                	test   eax,eax
c0026b65:	74 16                	je     c0026b7d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026b67:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026b6b:	eb 10                	jmp    c0026b7d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026b6d:	83 ec 0c             	sub    esp,0xc
c0026b70:	68 8c e2 02 c0       	push   0xc002e28c
c0026b75:	e8 1f 3e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0026b7a:	83 c4 10             	add    esp,0x10
c0026b7d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026b81:	a1 e0 38 03 c0       	mov    eax,ds:0xc00338e0
c0026b86:	83 ec 08             	sub    esp,0x8
c0026b89:	50                   	push   eax
c0026b8a:	68 c4 e2 02 c0       	push   0xc002e2c4
c0026b8f:	e8 bd c2 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0026b94:	83 c4 10             	add    esp,0x10
c0026b97:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026b9e:	a1 e0 38 03 c0       	mov    eax,ds:0xc00338e0
c0026ba3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026ba6:	7d 67                	jge    c0026c0f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026ba8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026bab:	8b 04 85 00 39 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc700]
c0026bb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026bb5:	83 ec 08             	sub    esp,0x8
c0026bb8:	52                   	push   edx
c0026bb9:	50                   	push   eax
c0026bba:	e8 d1 fc ff ff       	call   c0026890 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026bbf:	83 c4 10             	add    esp,0x10
c0026bc2:	84 c0                	test   al,al
c0026bc4:	74 44                	je     c0026c0a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026bc6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026bc9:	8b 1c 85 00 39 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc700]
c0026bd0:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026bd4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026bd7:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026bdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bde:	83 c0 20             	add    eax,0x20
c0026be1:	0f b6 f0             	movzx  esi,al
c0026be4:	b8 00 00 00 00       	mov    eax,0x0
c0026be9:	99                   	cdq    
c0026bea:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026bed:	0f b6 c9             	movzx  ecx,cl
c0026bf0:	83 ec 04             	sub    esp,0x4
c0026bf3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026bf6:	57                   	push   edi
c0026bf7:	56                   	push   esi
c0026bf8:	52                   	push   edx
c0026bf9:	50                   	push   eax
c0026bfa:	51                   	push   ecx
c0026bfb:	53                   	push   ebx
c0026bfc:	e8 0b fe ff ff       	call   c0026a0c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026c01:	83 c4 20             	add    esp,0x20
c0026c04:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026c08:	eb 05                	jmp    c0026c0f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026c0a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026c0d:	eb 8f                	jmp    c0026b9e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026c0f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026c12:	83 f0 01             	xor    eax,0x1
c0026c15:	84 c0                	test   al,al
c0026c17:	74 10                	je     c0026c29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026c19:	83 ec 0c             	sub    esp,0xc
c0026c1c:	68 db e2 02 c0       	push   0xc002e2db
c0026c21:	e8 73 3d ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0026c26:	83 c4 10             	add    esp,0x10
c0026c29:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026c2d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026c34:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026c38:	7f 65                	jg     c0026c9f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c40:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026c47:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026c4a:	01 ca                	add    edx,ecx
c0026c4c:	83 c2 54             	add    edx,0x54
c0026c4f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026c53:	85 c0                	test   eax,eax
c0026c55:	75 43                	jne    c0026c9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c5a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c5d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026c64:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026c67:	01 ca                	add    edx,ecx
c0026c69:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026c6c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026c6f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c79:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026c80:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026c83:	01 ca                	add    edx,ecx
c0026c85:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026c8b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026c8e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026c92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c95:	83 e8 20             	sub    eax,0x20
c0026c98:	eb 1a                	jmp    c0026cb4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026c9a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026c9d:	eb 95                	jmp    c0026c34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026c9f:	83 ec 0c             	sub    esp,0xc
c0026ca2:	68 e8 e2 02 c0       	push   0xc002e2e8
c0026ca7:	e8 ed 3c ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0026cac:	83 c4 10             	add    esp,0x10
c0026caf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026cb4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026cb7:	5b                   	pop    ebx
c0026cb8:	5e                   	pop    esi
c0026cb9:	5f                   	pop    edi
c0026cba:	5d                   	pop    ebp
c0026cbb:	c3                   	ret    

c0026cbc <PIC::disable()>:
c0026cbc:	55                   	push   ebp
c0026cbd:	89 e5                	mov    ebp,esp
c0026cbf:	83 ec 10             	sub    esp,0x10
c0026cc2:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026cc8:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026ccc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026ccf:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026cd3:	ee                   	out    dx,al
c0026cd4:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026cda:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026cde:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026ce1:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026ce5:	ee                   	out    dx,al
c0026ce6:	90                   	nop
c0026ce7:	c9                   	leave  
c0026ce8:	c3                   	ret    
c0026ce9:	90                   	nop

c0026cea <PIC::close(int, int, void*)>:
c0026cea:	55                   	push   ebp
c0026ceb:	89 e5                	mov    ebp,esp
c0026ced:	83 ec 08             	sub    esp,0x8
c0026cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cf5:	83 c0 3c             	add    eax,0x3c
c0026cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cfa:	83 ec 0c             	sub    esp,0xc
c0026cfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d00:	ff d0                	call   eax
c0026d02:	83 c4 10             	add    esp,0x10
c0026d05:	b8 00 00 00 00       	mov    eax,0x0
c0026d0a:	c9                   	leave  
c0026d0b:	c3                   	ret    

c0026d0c <PIC::PIC()>:
c0026d0c:	83 ec 0c             	sub    esp,0xc
c0026d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d13:	83 ec 08             	sub    esp,0x8
c0026d16:	68 94 e3 02 c0       	push   0xc002e394
c0026d1b:	50                   	push   eax
c0026d1c:	e8 e7 de fe ff       	call   c0014c08 <InterruptController::InterruptController(char const*)>
c0026d21:	83 c4 10             	add    esp,0x10
c0026d24:	ba c0 e3 02 c0       	mov    edx,0xc002e3c0
c0026d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d2d:	89 10                	mov    DWORD PTR [eax],edx
c0026d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d39:	0f b6 d0             	movzx  edx,al
c0026d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d40:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d51:	0f b6 d0             	movzx  edx,al
c0026d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d58:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d67:	8d 50 01             	lea    edx,[eax+0x1]
c0026d6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026d6e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026d74:	0f b6 d0             	movzx  edx,al
c0026d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026d7f:	83 e1 3f             	and    ecx,0x3f
c0026d82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d90:	0f b6 d0             	movzx  edx,al
c0026d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d97:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026da8:	0f b6 d0             	movzx  edx,al
c0026dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026daf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dbe:	8d 50 01             	lea    edx,[eax+0x1]
c0026dc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026dc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026dcb:	0f b6 d0             	movzx  edx,al
c0026dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026dd6:	83 e1 3f             	and    ecx,0x3f
c0026dd9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026ddd:	90                   	nop
c0026dde:	83 c4 0c             	add    esp,0xc
c0026de1:	c3                   	ret    

c0026de2 <PIC::ioWait()>:
c0026de2:	eb 00                	jmp    c0026de4 <PIC::ioWait()+0x2>
c0026de4:	eb 00                	jmp    c0026de6 <PIC::ioWait()+0x4>
c0026de6:	90                   	nop
c0026de7:	c3                   	ret    

c0026de8 <PIC::getIRQReg(int)>:
c0026de8:	55                   	push   ebp
c0026de9:	89 e5                	mov    ebp,esp
c0026deb:	83 ec 10             	sub    esp,0x10
c0026dee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026df1:	0f b6 c0             	movzx  eax,al
c0026df4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026dfa:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026dfd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026e00:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026e04:	ee                   	out    dx,al
c0026e05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e08:	0f b6 c0             	movzx  eax,al
c0026e0b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026e11:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026e14:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026e17:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026e1b:	ee                   	out    dx,al
c0026e1c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026e22:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026e26:	89 c2                	mov    edx,eax
c0026e28:	ec                   	in     al,dx
c0026e29:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026e2c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026e2f:	0f b6 c0             	movzx  eax,al
c0026e32:	c1 e0 08             	shl    eax,0x8
c0026e35:	89 c1                	mov    ecx,eax
c0026e37:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026e3d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026e41:	89 c2                	mov    edx,eax
c0026e43:	ec                   	in     al,dx
c0026e44:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026e47:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026e4a:	0f b6 c0             	movzx  eax,al
c0026e4d:	09 c8                	or     eax,ecx
c0026e4f:	c9                   	leave  
c0026e50:	c3                   	ret    
c0026e51:	90                   	nop

c0026e52 <PIC::eoi(unsigned char)>:
c0026e52:	55                   	push   ebp
c0026e53:	89 e5                	mov    ebp,esp
c0026e55:	83 ec 14             	sub    esp,0x14
c0026e58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e5b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026e5e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026e62:	75 1e                	jne    c0026e82 <PIC::eoi(unsigned char)+0x30>
c0026e64:	6a 0b                	push   0xb
c0026e66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e69:	e8 7a ff ff ff       	call   c0026de8 <PIC::getIRQReg(int)>
c0026e6e:	83 c4 08             	add    esp,0x8
c0026e71:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026e75:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026e79:	25 80 00 00 00       	and    eax,0x80
c0026e7e:	85 c0                	test   eax,eax
c0026e80:	74 5f                	je     c0026ee1 <PIC::eoi(unsigned char)+0x8f>
c0026e82:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026e86:	75 2d                	jne    c0026eb5 <PIC::eoi(unsigned char)+0x63>
c0026e88:	6a 0b                	push   0xb
c0026e8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e8d:	e8 56 ff ff ff       	call   c0026de8 <PIC::getIRQReg(int)>
c0026e92:	83 c4 08             	add    esp,0x8
c0026e95:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026e99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026e9c:	66 85 c0             	test   ax,ax
c0026e9f:	78 14                	js     c0026eb5 <PIC::eoi(unsigned char)+0x63>
c0026ea1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026ea7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026eab:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026eae:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026eb2:	ee                   	out    dx,al
c0026eb3:	eb 2d                	jmp    c0026ee2 <PIC::eoi(unsigned char)+0x90>
c0026eb5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026eb9:	76 12                	jbe    c0026ecd <PIC::eoi(unsigned char)+0x7b>
c0026ebb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026ec1:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026ec5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026ec8:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026ecc:	ee                   	out    dx,al
c0026ecd:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026ed3:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026ed7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026eda:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026ede:	ee                   	out    dx,al
c0026edf:	eb 01                	jmp    c0026ee2 <PIC::eoi(unsigned char)+0x90>
c0026ee1:	90                   	nop
c0026ee2:	c9                   	leave  
c0026ee3:	c3                   	ret    

c0026ee4 <PIC::remap()>:
c0026ee4:	55                   	push   ebp
c0026ee5:	89 e5                	mov    ebp,esp
c0026ee7:	83 ec 48             	sub    esp,0x48
c0026eea:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026ef1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026ef8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026efe:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026f01:	89 c2                	mov    edx,eax
c0026f03:	ec                   	in     al,dx
c0026f04:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026f07:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026f0a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026f0d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026f13:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026f16:	89 c2                	mov    edx,eax
c0026f18:	ec                   	in     al,dx
c0026f19:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026f1c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026f1f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026f22:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026f28:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026f2c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026f2f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026f32:	ee                   	out    dx,al
c0026f33:	83 ec 0c             	sub    esp,0xc
c0026f36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f39:	e8 a4 fe ff ff       	call   c0026de2 <PIC::ioWait()>
c0026f3e:	83 c4 10             	add    esp,0x10
c0026f41:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026f47:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026f4b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026f4e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026f51:	ee                   	out    dx,al
c0026f52:	83 ec 0c             	sub    esp,0xc
c0026f55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f58:	e8 85 fe ff ff       	call   c0026de2 <PIC::ioWait()>
c0026f5d:	83 c4 10             	add    esp,0x10
c0026f60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026f63:	0f b6 c0             	movzx  eax,al
c0026f66:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026f6c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026f6f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026f72:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026f75:	ee                   	out    dx,al
c0026f76:	83 ec 0c             	sub    esp,0xc
c0026f79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f7c:	e8 61 fe ff ff       	call   c0026de2 <PIC::ioWait()>
c0026f81:	83 c4 10             	add    esp,0x10
c0026f84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f87:	0f b6 c0             	movzx  eax,al
c0026f8a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026f90:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026f93:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026f96:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026f99:	ee                   	out    dx,al
c0026f9a:	83 ec 0c             	sub    esp,0xc
c0026f9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fa0:	e8 3d fe ff ff       	call   c0026de2 <PIC::ioWait()>
c0026fa5:	83 c4 10             	add    esp,0x10
c0026fa8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026fae:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026fb2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026fb5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026fb8:	ee                   	out    dx,al
c0026fb9:	83 ec 0c             	sub    esp,0xc
c0026fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fbf:	e8 1e fe ff ff       	call   c0026de2 <PIC::ioWait()>
c0026fc4:	83 c4 10             	add    esp,0x10
c0026fc7:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026fcd:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026fd1:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026fd4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026fd7:	ee                   	out    dx,al
c0026fd8:	83 ec 0c             	sub    esp,0xc
c0026fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fde:	e8 ff fd ff ff       	call   c0026de2 <PIC::ioWait()>
c0026fe3:	83 c4 10             	add    esp,0x10
c0026fe6:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026fec:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026ff0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026ff3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026ff6:	ee                   	out    dx,al
c0026ff7:	83 ec 0c             	sub    esp,0xc
c0026ffa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ffd:	e8 e0 fd ff ff       	call   c0026de2 <PIC::ioWait()>
c0027002:	83 c4 10             	add    esp,0x10
c0027005:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002700b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002700f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0027012:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027015:	ee                   	out    dx,al
c0027016:	83 ec 0c             	sub    esp,0xc
c0027019:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002701c:	e8 c1 fd ff ff       	call   c0026de2 <PIC::ioWait()>
c0027021:	83 c4 10             	add    esp,0x10
c0027024:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0027028:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002702e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0027031:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0027034:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027037:	ee                   	out    dx,al
c0027038:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002703c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0027042:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0027045:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0027048:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002704b:	ee                   	out    dx,al
c002704c:	90                   	nop
c002704d:	c9                   	leave  
c002704e:	c3                   	ret    
c002704f:	90                   	nop

c0027050 <PIC::open(int, int, void*)>:
c0027050:	55                   	push   ebp
c0027051:	89 e5                	mov    ebp,esp
c0027053:	83 ec 18             	sub    esp,0x18
c0027056:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002705c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0027060:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0027063:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0027067:	ee                   	out    dx,al
c0027068:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002706e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0027072:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0027075:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0027079:	ee                   	out    dx,al
c002707a:	83 ec 0c             	sub    esp,0xc
c002707d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027080:	e8 5f fe ff ff       	call   c0026ee4 <PIC::remap()>
c0027085:	83 c4 10             	add    esp,0x10
c0027088:	b8 00 00 00 00       	mov    eax,0x0
c002708d:	c9                   	leave  
c002708e:	c3                   	ret    
c002708f:	90                   	nop

c0027090 <APICTimer::close(int, int, void*)>:
c0027090:	b8 00 00 00 00       	mov    eax,0x0
c0027095:	c3                   	ret    

c0027096 <apicTimerHandler(regs*, void*)>:
c0027096:	83 ec 0c             	sub    esp,0xc
c0027099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002709d:	8b 00                	mov    eax,DWORD PTR [eax]
c002709f:	99                   	cdq    
c00270a0:	52                   	push   edx
c00270a1:	50                   	push   eax
c00270a2:	6a 00                	push   0x0
c00270a4:	68 00 ca 9a 3b       	push   0x3b9aca00
c00270a9:	e8 96 07 00 00       	call   c0027844 <__udivdi3>
c00270ae:	83 c4 10             	add    esp,0x10
c00270b1:	83 ec 08             	sub    esp,0x8
c00270b4:	52                   	push   edx
c00270b5:	50                   	push   eax
c00270b6:	e8 dc fc fe ff       	call   c0016d97 <timerHandler(unsigned long long)>
c00270bb:	83 c4 10             	add    esp,0x10
c00270be:	90                   	nop
c00270bf:	83 c4 0c             	add    esp,0xc
c00270c2:	c3                   	ret    
c00270c3:	90                   	nop

c00270c4 <APICTimer::write(int)>:
c00270c4:	53                   	push   ebx
c00270c5:	83 ec 28             	sub    esp,0x28
c00270c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00270cc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00270d0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00270d6:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00270db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00270e1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00270e7:	83 ec 0c             	sub    esp,0xc
c00270ea:	50                   	push   eax
c00270eb:	e8 de f4 ff ff       	call   c00265ce <APIC::getBase()>
c00270f0:	83 c4 10             	add    esp,0x10
c00270f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00270f7:	a1 f0 fb 02 c0       	mov    eax,ds:0xc002fbf0
c00270fc:	8b 15 f4 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbf4
c0027102:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027106:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002710a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002710e:	05 e0 03 00 00       	add    eax,0x3e0
c0027113:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0027119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002711d:	05 80 03 00 00       	add    eax,0x380
c0027122:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0027128:	fb                   	sti    
c0027129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002712d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027131:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0027136:	83 d2 00             	adc    edx,0x0
c0027139:	89 c1                	mov    ecx,eax
c002713b:	89 d3                	mov    ebx,edx
c002713d:	a1 f0 fb 02 c0       	mov    eax,ds:0xc002fbf0
c0027142:	8b 15 f4 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbf4
c0027148:	39 c8                	cmp    eax,ecx
c002714a:	89 d0                	mov    eax,edx
c002714c:	19 d8                	sbb    eax,ebx
c002714e:	73 02                	jae    c0027152 <APICTimer::write(int)+0x8e>
c0027150:	eb d7                	jmp    c0027129 <APICTimer::write(int)+0x65>
c0027152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027156:	05 20 03 00 00       	add    eax,0x320
c002715b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0027161:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027165:	05 90 03 00 00       	add    eax,0x390
c002716a:	8b 00                	mov    eax,DWORD PTR [eax]
c002716c:	f7 d0                	not    eax
c002716e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027172:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002717a:	ba 00 00 00 00       	mov    edx,0x0
c002717f:	f7 f3                	div    ebx
c0027181:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027189:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002718f:	0d 00 00 02 00       	or     eax,0x20000
c0027194:	89 c2                	mov    edx,eax
c0027196:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002719a:	05 20 03 00 00       	add    eax,0x320
c002719f:	89 10                	mov    DWORD PTR [eax],edx
c00271a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00271a5:	05 e0 03 00 00       	add    eax,0x3e0
c00271aa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00271b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00271b4:	05 80 03 00 00       	add    eax,0x380
c00271b9:	89 c2                	mov    edx,eax
c00271bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00271bf:	89 02                	mov    DWORD PTR [edx],eax
c00271c1:	90                   	nop
c00271c2:	83 c4 28             	add    esp,0x28
c00271c5:	5b                   	pop    ebx
c00271c6:	c3                   	ret    
c00271c7:	90                   	nop

c00271c8 <APICTimer::open(int, int, void*)>:
c00271c8:	57                   	push   edi
c00271c9:	56                   	push   esi
c00271ca:	53                   	push   ebx
c00271cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00271d1:	83 c0 24             	add    eax,0x24
c00271d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00271d6:	83 ec 08             	sub    esp,0x8
c00271d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271e1:	ff d0                	call   eax
c00271e3:	83 c4 10             	add    esp,0x10
c00271e6:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00271eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00271f1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00271f7:	83 ec 0c             	sub    esp,0xc
c00271fa:	50                   	push   eax
c00271fb:	e8 ce f3 ff ff       	call   c00265ce <APIC::getBase()>
c0027200:	83 c4 10             	add    esp,0x10
c0027203:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0027209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0027213:	0f b6 f8             	movzx  edi,al
c0027216:	89 d0                	mov    eax,edx
c0027218:	ba 00 00 00 00       	mov    edx,0x0
c002721d:	89 c1                	mov    ecx,eax
c002721f:	80 e5 ff             	and    ch,0xff
c0027222:	89 cb                	mov    ebx,ecx
c0027224:	0f b6 f2             	movzx  esi,dl
c0027227:	89 d8                	mov    eax,ebx
c0027229:	89 f2                	mov    edx,esi
c002722b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002722f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0027232:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0027236:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002723a:	83 e0 00             	and    eax,0x0
c002723d:	09 d0                	or     eax,edx
c002723f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0027243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027247:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002724d:	8d 50 01             	lea    edx,[eax+0x1]
c0027250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027254:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002725a:	0f b6 d0             	movzx  edx,al
c002725d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027261:	83 c2 08             	add    edx,0x8
c0027264:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0027268:	0f b6 c9             	movzx  ecx,cl
c002726b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0027271:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0027275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027279:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002727d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0027283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027287:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002728b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0027291:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027295:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002729b:	83 ec 0c             	sub    esp,0xc
c002729e:	51                   	push   ecx
c002729f:	6a 01                	push   0x1
c00272a1:	68 96 70 02 c0       	push   0xc0027096
c00272a6:	52                   	push   edx
c00272a7:	50                   	push   eax
c00272a8:	e8 55 cf fe ff       	call   c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00272ad:	83 c4 20             	add    esp,0x20
c00272b0:	89 c2                	mov    edx,eax
c00272b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272b6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00272bc:	b8 00 00 00 00       	mov    eax,0x0
c00272c1:	5b                   	pop    ebx
c00272c2:	5e                   	pop    esi
c00272c3:	5f                   	pop    edi
c00272c4:	c3                   	ret    
c00272c5:	90                   	nop

c00272c6 <APICTimer::APICTimer()>:
c00272c6:	83 ec 0c             	sub    esp,0xc
c00272c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272cd:	83 ec 08             	sub    esp,0x8
c00272d0:	68 00 e4 02 c0       	push   0xc002e400
c00272d5:	50                   	push   eax
c00272d6:	e8 2d fa fe ff       	call   c0016d08 <Timer::Timer(char const*)>
c00272db:	83 c4 10             	add    esp,0x10
c00272de:	ba 14 e4 02 c0       	mov    edx,0xc002e414
c00272e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e7:	89 10                	mov    DWORD PTR [eax],edx
c00272e9:	90                   	nop
c00272ea:	83 c4 0c             	add    esp,0xc
c00272ed:	c3                   	ret    

c00272ee <PIT::write(int)>:
c00272ee:	83 ec 10             	sub    esp,0x10
c00272f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00272f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00272f9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00272ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027303:	a3 24 39 03 c0       	mov    ds:0xc0033924,eax
c0027308:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002730d:	99                   	cdq    
c002730e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0027312:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027316:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002731d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0027322:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027326:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002732b:	ee                   	out    dx,al
c002732c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027330:	0f b6 c0             	movzx  eax,al
c0027333:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002733a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002733e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027342:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027347:	ee                   	out    dx,al
c0027348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002734c:	c1 f8 08             	sar    eax,0x8
c002734f:	0f b6 c0             	movzx  eax,al
c0027352:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0027359:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002735d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027361:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027366:	ee                   	out    dx,al
c0027367:	90                   	nop
c0027368:	83 c4 10             	add    esp,0x10
c002736b:	c3                   	ret    

c002736c <pitHandler(regs*, void*)>:
c002736c:	83 ec 0c             	sub    esp,0xc
c002736f:	a1 24 39 03 c0       	mov    eax,ds:0xc0033924
c0027374:	99                   	cdq    
c0027375:	52                   	push   edx
c0027376:	50                   	push   eax
c0027377:	6a 00                	push   0x0
c0027379:	68 00 ca 9a 3b       	push   0x3b9aca00
c002737e:	e8 c1 04 00 00       	call   c0027844 <__udivdi3>
c0027383:	83 c4 10             	add    esp,0x10
c0027386:	83 ec 08             	sub    esp,0x8
c0027389:	52                   	push   edx
c002738a:	50                   	push   eax
c002738b:	e8 07 fa fe ff       	call   c0016d97 <timerHandler(unsigned long long)>
c0027390:	83 c4 10             	add    esp,0x10
c0027393:	90                   	nop
c0027394:	83 c4 0c             	add    esp,0xc
c0027397:	c3                   	ret    

c0027398 <PIT::open(int, int, void*)>:
c0027398:	83 ec 0c             	sub    esp,0xc
c002739b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002739f:	8b 00                	mov    eax,DWORD PTR [eax]
c00273a1:	83 c0 24             	add    eax,0x24
c00273a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00273a6:	83 ec 08             	sub    esp,0x8
c00273a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273b1:	ff d0                	call   eax
c00273b3:	83 c4 10             	add    esp,0x10
c00273b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ba:	83 ec 0c             	sub    esp,0xc
c00273bd:	6a 00                	push   0x0
c00273bf:	6a 01                	push   0x1
c00273c1:	68 6c 73 02 c0       	push   0xc002736c
c00273c6:	6a 00                	push   0x0
c00273c8:	50                   	push   eax
c00273c9:	e8 34 ce fe ff       	call   c0014202 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00273ce:	83 c4 20             	add    esp,0x20
c00273d1:	89 c2                	mov    edx,eax
c00273d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00273dd:	b8 00 00 00 00       	mov    eax,0x0
c00273e2:	83 c4 0c             	add    esp,0xc
c00273e5:	c3                   	ret    

c00273e6 <PIT::close(int, int, void*)>:
c00273e6:	83 ec 0c             	sub    esp,0xc
c00273e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ed:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00273f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273fb:	6a 01                	push   0x1
c00273fd:	68 6c 73 02 c0       	push   0xc002736c
c0027402:	6a 00                	push   0x0
c0027404:	50                   	push   eax
c0027405:	e8 42 ce fe ff       	call   c001424c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002740a:	83 c4 10             	add    esp,0x10
c002740d:	b8 00 00 00 00       	mov    eax,0x0
c0027412:	83 c4 0c             	add    esp,0xc
c0027415:	c3                   	ret    

c0027416 <PIT::PIT()>:
c0027416:	83 ec 0c             	sub    esp,0xc
c0027419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002741d:	83 ec 08             	sub    esp,0x8
c0027420:	68 3c e4 02 c0       	push   0xc002e43c
c0027425:	50                   	push   eax
c0027426:	e8 dd f8 fe ff       	call   c0016d08 <Timer::Timer(char const*)>
c002742b:	83 c4 10             	add    esp,0x10
c002742e:	ba 64 e4 02 c0       	mov    edx,0xc002e464
c0027433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027437:	89 10                	mov    DWORD PTR [eax],edx
c0027439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002743d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027443:	0f b6 d0             	movzx  edx,al
c0027446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002744a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027455:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002745b:	0f b6 d0             	movzx  edx,al
c002745e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027462:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0027467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002746b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027471:	8d 50 01             	lea    edx,[eax+0x1]
c0027474:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027478:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002747e:	0f b6 d0             	movzx  edx,al
c0027481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027485:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0027489:	83 e1 3f             	and    ecx,0x3f
c002748c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0027490:	90                   	nop
c0027491:	83 c4 0c             	add    esp,0xc
c0027494:	c3                   	ret    
c0027495:	66 90                	xchg   ax,ax
c0027497:	66 90                	xchg   ax,ax
c0027499:	66 90                	xchg   ax,ax
c002749b:	66 90                	xchg   ax,ax
c002749d:	66 90                	xchg   ax,ax
c002749f:	90                   	nop

c00274a0 <avxDetect>:
c00274a0:	b8 00 00 00 00       	mov    eax,0x0
c00274a5:	c3                   	ret    

c00274a6 <avxSave>:
c00274a6:	c3                   	ret    

c00274a7 <avxLoad>:
c00274a7:	c3                   	ret    

c00274a8 <avxInit>:
c00274a8:	c3                   	ret    

c00274a9 <avxClose>:
c00274a9:	c3                   	ret    

c00274aa <wouldSheSayYes>:
c00274aa:	c3                   	ret    
c00274ab:	49                   	dec    ecx
c00274ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00274b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00274b4:	75 20                	jne    c00274d6 <sseDetect.noSSE+0x1>
c00274b6:	4e                   	dec    esi
c00274b7:	79 61                	jns    c002751a <x87Detect+0x14>
c00274b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00274be:	66 90                	xchg   ax,ax

c00274c0 <absolutelyNoChanceInHell>:
c00274c0:	b8 01 00 00 00       	mov    eax,0x1
c00274c5:	0f a2                	cpuid  
c00274c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00274cd:	74 06                	je     c00274d5 <sseDetect.noSSE>
c00274cf:	b8 01 00 00 00       	mov    eax,0x1
c00274d4:	c3                   	ret    

c00274d5 <sseDetect.noSSE>:
c00274d5:	31 c0                	xor    eax,eax
c00274d7:	c3                   	ret    

c00274d8 <sseSave>:
c00274d8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00274dd:	c3                   	ret    

c00274de <sseLoad>:
c00274de:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00274e3:	c3                   	ret    

c00274e4 <sseInit>:
c00274e4:	e8 49 00 00 00       	call   c0027532 <x87Init>
c00274e9:	0f 20 e0             	mov    eax,cr4
c00274ec:	66 0d 00 06          	or     ax,0x600
c00274f0:	0f 22 e0             	mov    cr4,eax
c00274f3:	c3                   	ret    

c00274f4 <sseClose>:
c00274f4:	c3                   	ret    
c00274f5:	66 90                	xchg   ax,ax
c00274f7:	66 90                	xchg   ax,ax
c00274f9:	66 90                	xchg   ax,ax
c00274fb:	66 90                	xchg   ax,ax
c00274fd:	66 90                	xchg   ax,ax
c00274ff:	90                   	nop

c0027500 <value_37F>:
c0027500:	7f 03                	jg     c0027505 <value_37A+0x1>

c0027502 <value_37E>:
c0027502:	7e 03                	jle    c0027507 <x87Detect+0x1>

c0027504 <value_37A>:
c0027504:	7a 03                	jp     c0027509 <x87Detect+0x3>

c0027506 <x87Detect>:
c0027506:	b8 01 00 00 00       	mov    eax,0x1
c002750b:	0f a2                	cpuid  
c002750d:	f7 c2 01 00 00 00    	test   edx,0x1
c0027513:	74 06                	je     c002751b <x87Detect.nox87>
c0027515:	b8 01 00 00 00       	mov    eax,0x1
c002751a:	c3                   	ret    

c002751b <x87Detect.nox87>:
c002751b:	b8 00 00 00 00       	mov    eax,0x0
c0027520:	c3                   	ret    

c0027521 <x87Save>:
c0027521:	55                   	push   ebp
c0027522:	89 e5                	mov    ebp,esp
c0027524:	9b dd 75 08          	fsave  [ebp+0x8]
c0027528:	c9                   	leave  
c0027529:	c3                   	ret    

c002752a <x87Load>:
c002752a:	55                   	push   ebp
c002752b:	89 e5                	mov    ebp,esp
c002752d:	dd 65 08             	frstor [ebp+0x8]
c0027530:	c9                   	leave  
c0027531:	c3                   	ret    

c0027532 <x87Init>:
c0027532:	9b db e3             	finit  
c0027535:	0f 20 c0             	mov    eax,cr0
c0027538:	66 25 fb ff          	and    ax,0xfffb
c002753c:	66 0d 22 00          	or     ax,0x22
c0027540:	0f 22 c0             	mov    cr0,eax
c0027543:	0f 06                	clts   
c0027545:	d9 2d 04 75 02 c0    	fldcw  WORD PTR ds:0xc0027504
c002754b:	c3                   	ret    

c002754c <x87Close>:
c002754c:	c3                   	ret    
c002754d:	66 90                	xchg   ax,ax
c002754f:	90                   	nop

c0027550 <__do_global_ctors_aux>:
c0027550:	a1 88 a1 02 c0       	mov    eax,ds:0xc002a188
c0027555:	83 f8 ff             	cmp    eax,0xffffffff
c0027558:	74 1a                	je     c0027574 <__do_global_ctors_aux+0x24>
c002755a:	55                   	push   ebp
c002755b:	89 e5                	mov    ebp,esp
c002755d:	53                   	push   ebx
c002755e:	52                   	push   edx
c002755f:	bb 88 a1 02 c0       	mov    ebx,0xc002a188
c0027564:	ff d0                	call   eax
c0027566:	83 eb 04             	sub    ebx,0x4
c0027569:	8b 03                	mov    eax,DWORD PTR [ebx]
c002756b:	83 f8 ff             	cmp    eax,0xffffffff
c002756e:	75 f4                	jne    c0027564 <__do_global_ctors_aux+0x14>
c0027570:	58                   	pop    eax
c0027571:	5b                   	pop    ebx
c0027572:	5d                   	pop    ebp
c0027573:	c3                   	ret    
c0027574:	c3                   	ret    
c0027575:	66 90                	xchg   ax,ax
c0027577:	90                   	nop

c0027578 <__divdi3>:
c0027578:	55                   	push   ebp
c0027579:	57                   	push   edi
c002757a:	56                   	push   esi
c002757b:	53                   	push   ebx
c002757c:	83 ec 1c             	sub    esp,0x1c
c002757f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027583:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027587:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002758a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002758e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027592:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027596:	85 db                	test   ebx,ebx
c0027598:	0f 88 8e 00 00 00    	js     c002762c <__divdi3+0xb4>
c002759e:	89 dd                	mov    ebp,ebx
c00275a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00275a8:	89 d3                	mov    ebx,edx
c00275aa:	85 d2                	test   edx,edx
c00275ac:	79 0d                	jns    c00275bb <__divdi3+0x43>
c00275ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00275b2:	f7 d8                	neg    eax
c00275b4:	83 d2 00             	adc    edx,0x0
c00275b7:	f7 da                	neg    edx
c00275b9:	89 d3                	mov    ebx,edx
c00275bb:	89 c7                	mov    edi,eax
c00275bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00275c0:	85 db                	test   ebx,ebx
c00275c2:	75 48                	jne    c002760c <__divdi3+0x94>
c00275c4:	39 ef                	cmp    edi,ebp
c00275c6:	76 24                	jbe    c00275ec <__divdi3+0x74>
c00275c8:	89 ea                	mov    edx,ebp
c00275ca:	f7 f7                	div    edi
c00275cc:	89 c1                	mov    ecx,eax
c00275ce:	31 f6                	xor    esi,esi
c00275d0:	89 c8                	mov    eax,ecx
c00275d2:	89 f2                	mov    edx,esi
c00275d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00275d8:	85 c9                	test   ecx,ecx
c00275da:	74 07                	je     c00275e3 <__divdi3+0x6b>
c00275dc:	f7 d8                	neg    eax
c00275de:	83 d2 00             	adc    edx,0x0
c00275e1:	f7 da                	neg    edx
c00275e3:	83 c4 1c             	add    esp,0x1c
c00275e6:	5b                   	pop    ebx
c00275e7:	5e                   	pop    esi
c00275e8:	5f                   	pop    edi
c00275e9:	5d                   	pop    ebp
c00275ea:	c3                   	ret    
c00275eb:	90                   	nop
c00275ec:	85 ff                	test   edi,edi
c00275ee:	75 0b                	jne    c00275fb <__divdi3+0x83>
c00275f0:	b8 01 00 00 00       	mov    eax,0x1
c00275f5:	31 d2                	xor    edx,edx
c00275f7:	f7 f3                	div    ebx
c00275f9:	89 c7                	mov    edi,eax
c00275fb:	31 d2                	xor    edx,edx
c00275fd:	89 e8                	mov    eax,ebp
c00275ff:	f7 f7                	div    edi
c0027601:	89 c6                	mov    esi,eax
c0027603:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027606:	f7 f7                	div    edi
c0027608:	89 c1                	mov    ecx,eax
c002760a:	eb c4                	jmp    c00275d0 <__divdi3+0x58>
c002760c:	39 eb                	cmp    ebx,ebp
c002760e:	77 3c                	ja     c002764c <__divdi3+0xd4>
c0027610:	0f bd f3             	bsr    esi,ebx
c0027613:	83 f6 1f             	xor    esi,0x1f
c0027616:	75 40                	jne    c0027658 <__divdi3+0xe0>
c0027618:	39 eb                	cmp    ebx,ebp
c002761a:	72 09                	jb     c0027625 <__divdi3+0xad>
c002761c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002761f:	0f 87 97 00 00 00    	ja     c00276bc <__divdi3+0x144>
c0027625:	b9 01 00 00 00       	mov    ecx,0x1
c002762a:	eb a4                	jmp    c00275d0 <__divdi3+0x58>
c002762c:	f7 d9                	neg    ecx
c002762e:	83 d3 00             	adc    ebx,0x0
c0027631:	f7 db                	neg    ebx
c0027633:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027636:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002763a:	89 dd                	mov    ebp,ebx
c002763c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027644:	e9 5f ff ff ff       	jmp    c00275a8 <__divdi3+0x30>
c0027649:	8d 76 00             	lea    esi,[esi+0x0]
c002764c:	31 f6                	xor    esi,esi
c002764e:	31 c9                	xor    ecx,ecx
c0027650:	e9 7b ff ff ff       	jmp    c00275d0 <__divdi3+0x58>
c0027655:	8d 76 00             	lea    esi,[esi+0x0]
c0027658:	b8 20 00 00 00       	mov    eax,0x20
c002765d:	29 f0                	sub    eax,esi
c002765f:	89 f1                	mov    ecx,esi
c0027661:	d3 e3                	shl    ebx,cl
c0027663:	89 fa                	mov    edx,edi
c0027665:	88 c1                	mov    cl,al
c0027667:	d3 ea                	shr    edx,cl
c0027669:	09 da                	or     edx,ebx
c002766b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002766f:	89 f1                	mov    ecx,esi
c0027671:	d3 e7                	shl    edi,cl
c0027673:	89 eb                	mov    ebx,ebp
c0027675:	88 c1                	mov    cl,al
c0027677:	d3 eb                	shr    ebx,cl
c0027679:	89 f1                	mov    ecx,esi
c002767b:	d3 e5                	shl    ebp,cl
c002767d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027680:	88 c1                	mov    cl,al
c0027682:	d3 ea                	shr    edx,cl
c0027684:	09 d5                	or     ebp,edx
c0027686:	89 e8                	mov    eax,ebp
c0027688:	89 da                	mov    edx,ebx
c002768a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002768e:	89 d3                	mov    ebx,edx
c0027690:	89 c5                	mov    ebp,eax
c0027692:	f7 e7                	mul    edi
c0027694:	39 d3                	cmp    ebx,edx
c0027696:	72 18                	jb     c00276b0 <__divdi3+0x138>
c0027698:	74 0a                	je     c00276a4 <__divdi3+0x12c>
c002769a:	89 e9                	mov    ecx,ebp
c002769c:	31 f6                	xor    esi,esi
c002769e:	e9 2d ff ff ff       	jmp    c00275d0 <__divdi3+0x58>
c00276a3:	90                   	nop
c00276a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00276a7:	89 f1                	mov    ecx,esi
c00276a9:	d3 e7                	shl    edi,cl
c00276ab:	39 c7                	cmp    edi,eax
c00276ad:	73 eb                	jae    c002769a <__divdi3+0x122>
c00276af:	90                   	nop
c00276b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00276b3:	31 f6                	xor    esi,esi
c00276b5:	e9 16 ff ff ff       	jmp    c00275d0 <__divdi3+0x58>
c00276ba:	66 90                	xchg   ax,ax
c00276bc:	31 c9                	xor    ecx,ecx
c00276be:	e9 0d ff ff ff       	jmp    c00275d0 <__divdi3+0x58>
c00276c3:	90                   	nop

c00276c4 <__moddi3>:
c00276c4:	55                   	push   ebp
c00276c5:	57                   	push   edi
c00276c6:	56                   	push   esi
c00276c7:	53                   	push   ebx
c00276c8:	83 ec 2c             	sub    esp,0x2c
c00276cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00276cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00276d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00276d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00276db:	85 db                	test   ebx,ebx
c00276dd:	0f 88 85 00 00 00    	js     c0027768 <__moddi3+0xa4>
c00276e3:	89 de                	mov    esi,ebx
c00276e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00276ed:	89 d7                	mov    edi,edx
c00276ef:	85 d2                	test   edx,edx
c00276f1:	79 09                	jns    c00276fc <__moddi3+0x38>
c00276f3:	f7 d8                	neg    eax
c00276f5:	83 d2 00             	adc    edx,0x0
c00276f8:	f7 da                	neg    edx
c00276fa:	89 d7                	mov    edi,edx
c00276fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027700:	89 cd                	mov    ebp,ecx
c0027702:	85 ff                	test   edi,edi
c0027704:	75 52                	jne    c0027758 <__moddi3+0x94>
c0027706:	89 c3                	mov    ebx,eax
c0027708:	39 f0                	cmp    eax,esi
c002770a:	76 24                	jbe    c0027730 <__moddi3+0x6c>
c002770c:	89 c8                	mov    eax,ecx
c002770e:	89 f2                	mov    edx,esi
c0027710:	f7 f3                	div    ebx
c0027712:	89 d6                	mov    esi,edx
c0027714:	89 f0                	mov    eax,esi
c0027716:	31 d2                	xor    edx,edx
c0027718:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002771c:	85 c9                	test   ecx,ecx
c002771e:	74 07                	je     c0027727 <__moddi3+0x63>
c0027720:	f7 d8                	neg    eax
c0027722:	83 d2 00             	adc    edx,0x0
c0027725:	f7 da                	neg    edx
c0027727:	83 c4 2c             	add    esp,0x2c
c002772a:	5b                   	pop    ebx
c002772b:	5e                   	pop    esi
c002772c:	5f                   	pop    edi
c002772d:	5d                   	pop    ebp
c002772e:	c3                   	ret    
c002772f:	90                   	nop
c0027730:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027734:	85 db                	test   ebx,ebx
c0027736:	75 0d                	jne    c0027745 <__moddi3+0x81>
c0027738:	b8 01 00 00 00       	mov    eax,0x1
c002773d:	31 d2                	xor    edx,edx
c002773f:	f7 f7                	div    edi
c0027741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027745:	89 f0                	mov    eax,esi
c0027747:	31 d2                	xor    edx,edx
c0027749:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002774d:	f7 f7                	div    edi
c002774f:	89 e8                	mov    eax,ebp
c0027751:	f7 f7                	div    edi
c0027753:	89 d6                	mov    esi,edx
c0027755:	eb bd                	jmp    c0027714 <__moddi3+0x50>
c0027757:	90                   	nop
c0027758:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002775c:	39 f7                	cmp    edi,esi
c002775e:	76 20                	jbe    c0027780 <__moddi3+0xbc>
c0027760:	89 c8                	mov    eax,ecx
c0027762:	89 f2                	mov    edx,esi
c0027764:	eb b2                	jmp    c0027718 <__moddi3+0x54>
c0027766:	66 90                	xchg   ax,ax
c0027768:	f7 d9                	neg    ecx
c002776a:	83 d3 00             	adc    ebx,0x0
c002776d:	f7 db                	neg    ebx
c002776f:	89 de                	mov    esi,ebx
c0027771:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027779:	e9 6f ff ff ff       	jmp    c00276ed <__moddi3+0x29>
c002777e:	66 90                	xchg   ax,ax
c0027780:	0f bd c7             	bsr    eax,edi
c0027783:	83 f0 1f             	xor    eax,0x1f
c0027786:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002778a:	75 24                	jne    c00277b0 <__moddi3+0xec>
c002778c:	39 f7                	cmp    edi,esi
c002778e:	72 06                	jb     c0027796 <__moddi3+0xd2>
c0027790:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027794:	77 0c                	ja     c00277a2 <__moddi3+0xde>
c0027796:	89 e9                	mov    ecx,ebp
c0027798:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002779c:	19 fe                	sbb    esi,edi
c002779e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00277a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00277a6:	89 f2                	mov    edx,esi
c00277a8:	e9 6b ff ff ff       	jmp    c0027718 <__moddi3+0x54>
c00277ad:	8d 76 00             	lea    esi,[esi+0x0]
c00277b0:	b8 20 00 00 00       	mov    eax,0x20
c00277b5:	89 c2                	mov    edx,eax
c00277b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00277bb:	29 da                	sub    edx,ebx
c00277bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00277c1:	88 d9                	mov    cl,bl
c00277c3:	d3 e7                	shl    edi,cl
c00277c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00277c9:	88 d1                	mov    cl,dl
c00277cb:	d3 e8                	shr    eax,cl
c00277cd:	09 c7                	or     edi,eax
c00277cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00277d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00277d7:	89 d8                	mov    eax,ebx
c00277d9:	88 d9                	mov    cl,bl
c00277db:	d3 e7                	shl    edi,cl
c00277dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00277e1:	89 f3                	mov    ebx,esi
c00277e3:	88 d1                	mov    cl,dl
c00277e5:	d3 eb                	shr    ebx,cl
c00277e7:	89 c7                	mov    edi,eax
c00277e9:	88 c1                	mov    cl,al
c00277eb:	d3 e6                	shl    esi,cl
c00277ed:	89 e8                	mov    eax,ebp
c00277ef:	88 d1                	mov    cl,dl
c00277f1:	d3 e8                	shr    eax,cl
c00277f3:	09 f0                	or     eax,esi
c00277f5:	89 f9                	mov    ecx,edi
c00277f7:	d3 e5                	shl    ebp,cl
c00277f9:	89 da                	mov    edx,ebx
c00277fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00277ff:	89 d3                	mov    ebx,edx
c0027801:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027805:	89 c6                	mov    esi,eax
c0027807:	89 d1                	mov    ecx,edx
c0027809:	39 d3                	cmp    ebx,edx
c002780b:	72 27                	jb     c0027834 <__moddi3+0x170>
c002780d:	74 21                	je     c0027830 <__moddi3+0x16c>
c002780f:	29 f5                	sub    ebp,esi
c0027811:	19 cb                	sbb    ebx,ecx
c0027813:	89 de                	mov    esi,ebx
c0027815:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027819:	d3 e6                	shl    esi,cl
c002781b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002781f:	89 f9                	mov    ecx,edi
c0027821:	d3 ed                	shr    ebp,cl
c0027823:	09 ee                	or     esi,ebp
c0027825:	89 f0                	mov    eax,esi
c0027827:	d3 eb                	shr    ebx,cl
c0027829:	89 da                	mov    edx,ebx
c002782b:	e9 e8 fe ff ff       	jmp    c0027718 <__moddi3+0x54>
c0027830:	39 c5                	cmp    ebp,eax
c0027832:	73 db                	jae    c002780f <__moddi3+0x14b>
c0027834:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027838:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002783c:	89 d1                	mov    ecx,edx
c002783e:	89 c6                	mov    esi,eax
c0027840:	eb cd                	jmp    c002780f <__moddi3+0x14b>
c0027842:	66 90                	xchg   ax,ax

c0027844 <__udivdi3>:
c0027844:	55                   	push   ebp
c0027845:	57                   	push   edi
c0027846:	56                   	push   esi
c0027847:	53                   	push   ebx
c0027848:	83 ec 1c             	sub    esp,0x1c
c002784b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002784f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027853:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027857:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002785b:	85 d2                	test   edx,edx
c002785d:	75 41                	jne    c00278a0 <__udivdi3+0x5c>
c002785f:	39 f7                	cmp    edi,esi
c0027861:	76 15                	jbe    c0027878 <__udivdi3+0x34>
c0027863:	89 e8                	mov    eax,ebp
c0027865:	89 f2                	mov    edx,esi
c0027867:	f7 f7                	div    edi
c0027869:	31 db                	xor    ebx,ebx
c002786b:	89 da                	mov    edx,ebx
c002786d:	83 c4 1c             	add    esp,0x1c
c0027870:	5b                   	pop    ebx
c0027871:	5e                   	pop    esi
c0027872:	5f                   	pop    edi
c0027873:	5d                   	pop    ebp
c0027874:	c3                   	ret    
c0027875:	8d 76 00             	lea    esi,[esi+0x0]
c0027878:	89 f9                	mov    ecx,edi
c002787a:	85 ff                	test   edi,edi
c002787c:	75 0b                	jne    c0027889 <__udivdi3+0x45>
c002787e:	b8 01 00 00 00       	mov    eax,0x1
c0027883:	31 d2                	xor    edx,edx
c0027885:	f7 f7                	div    edi
c0027887:	89 c1                	mov    ecx,eax
c0027889:	31 d2                	xor    edx,edx
c002788b:	89 f0                	mov    eax,esi
c002788d:	f7 f1                	div    ecx
c002788f:	89 c3                	mov    ebx,eax
c0027891:	89 e8                	mov    eax,ebp
c0027893:	f7 f1                	div    ecx
c0027895:	89 da                	mov    edx,ebx
c0027897:	83 c4 1c             	add    esp,0x1c
c002789a:	5b                   	pop    ebx
c002789b:	5e                   	pop    esi
c002789c:	5f                   	pop    edi
c002789d:	5d                   	pop    ebp
c002789e:	c3                   	ret    
c002789f:	90                   	nop
c00278a0:	39 f2                	cmp    edx,esi
c00278a2:	77 1c                	ja     c00278c0 <__udivdi3+0x7c>
c00278a4:	0f bd da             	bsr    ebx,edx
c00278a7:	83 f3 1f             	xor    ebx,0x1f
c00278aa:	75 24                	jne    c00278d0 <__udivdi3+0x8c>
c00278ac:	39 f2                	cmp    edx,esi
c00278ae:	72 08                	jb     c00278b8 <__udivdi3+0x74>
c00278b0:	39 ef                	cmp    edi,ebp
c00278b2:	0f 87 84 00 00 00    	ja     c002793c <__udivdi3+0xf8>
c00278b8:	b8 01 00 00 00       	mov    eax,0x1
c00278bd:	eb ac                	jmp    c002786b <__udivdi3+0x27>
c00278bf:	90                   	nop
c00278c0:	31 db                	xor    ebx,ebx
c00278c2:	31 c0                	xor    eax,eax
c00278c4:	89 da                	mov    edx,ebx
c00278c6:	83 c4 1c             	add    esp,0x1c
c00278c9:	5b                   	pop    ebx
c00278ca:	5e                   	pop    esi
c00278cb:	5f                   	pop    edi
c00278cc:	5d                   	pop    ebp
c00278cd:	c3                   	ret    
c00278ce:	66 90                	xchg   ax,ax
c00278d0:	b8 20 00 00 00       	mov    eax,0x20
c00278d5:	29 d8                	sub    eax,ebx
c00278d7:	88 d9                	mov    cl,bl
c00278d9:	d3 e2                	shl    edx,cl
c00278db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00278df:	89 fa                	mov    edx,edi
c00278e1:	88 c1                	mov    cl,al
c00278e3:	d3 ea                	shr    edx,cl
c00278e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00278e9:	09 d1                	or     ecx,edx
c00278eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00278ef:	88 d9                	mov    cl,bl
c00278f1:	d3 e7                	shl    edi,cl
c00278f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00278f7:	89 f7                	mov    edi,esi
c00278f9:	88 c1                	mov    cl,al
c00278fb:	d3 ef                	shr    edi,cl
c00278fd:	88 d9                	mov    cl,bl
c00278ff:	d3 e6                	shl    esi,cl
c0027901:	89 ea                	mov    edx,ebp
c0027903:	88 c1                	mov    cl,al
c0027905:	d3 ea                	shr    edx,cl
c0027907:	09 d6                	or     esi,edx
c0027909:	89 f0                	mov    eax,esi
c002790b:	89 fa                	mov    edx,edi
c002790d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027911:	89 d7                	mov    edi,edx
c0027913:	89 c6                	mov    esi,eax
c0027915:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027919:	39 d7                	cmp    edi,edx
c002791b:	72 13                	jb     c0027930 <__udivdi3+0xec>
c002791d:	74 09                	je     c0027928 <__udivdi3+0xe4>
c002791f:	89 f0                	mov    eax,esi
c0027921:	31 db                	xor    ebx,ebx
c0027923:	e9 43 ff ff ff       	jmp    c002786b <__udivdi3+0x27>
c0027928:	88 d9                	mov    cl,bl
c002792a:	d3 e5                	shl    ebp,cl
c002792c:	39 c5                	cmp    ebp,eax
c002792e:	73 ef                	jae    c002791f <__udivdi3+0xdb>
c0027930:	8d 46 ff             	lea    eax,[esi-0x1]
c0027933:	31 db                	xor    ebx,ebx
c0027935:	e9 31 ff ff ff       	jmp    c002786b <__udivdi3+0x27>
c002793a:	66 90                	xchg   ax,ax
c002793c:	31 c0                	xor    eax,eax
c002793e:	e9 28 ff ff ff       	jmp    c002786b <__udivdi3+0x27>
c0027943:	90                   	nop

c0027944 <__umoddi3>:
c0027944:	55                   	push   ebp
c0027945:	57                   	push   edi
c0027946:	56                   	push   esi
c0027947:	53                   	push   ebx
c0027948:	83 ec 1c             	sub    esp,0x1c
c002794b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002794f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027953:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027957:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002795b:	89 da                	mov    edx,ebx
c002795d:	85 c0                	test   eax,eax
c002795f:	75 37                	jne    c0027998 <__umoddi3+0x54>
c0027961:	39 df                	cmp    edi,ebx
c0027963:	76 13                	jbe    c0027978 <__umoddi3+0x34>
c0027965:	89 f0                	mov    eax,esi
c0027967:	f7 f7                	div    edi
c0027969:	89 d0                	mov    eax,edx
c002796b:	31 d2                	xor    edx,edx
c002796d:	83 c4 1c             	add    esp,0x1c
c0027970:	5b                   	pop    ebx
c0027971:	5e                   	pop    esi
c0027972:	5f                   	pop    edi
c0027973:	5d                   	pop    ebp
c0027974:	c3                   	ret    
c0027975:	8d 76 00             	lea    esi,[esi+0x0]
c0027978:	89 fd                	mov    ebp,edi
c002797a:	85 ff                	test   edi,edi
c002797c:	75 0b                	jne    c0027989 <__umoddi3+0x45>
c002797e:	b8 01 00 00 00       	mov    eax,0x1
c0027983:	31 d2                	xor    edx,edx
c0027985:	f7 f7                	div    edi
c0027987:	89 c5                	mov    ebp,eax
c0027989:	89 d8                	mov    eax,ebx
c002798b:	31 d2                	xor    edx,edx
c002798d:	f7 f5                	div    ebp
c002798f:	89 f0                	mov    eax,esi
c0027991:	f7 f5                	div    ebp
c0027993:	89 d0                	mov    eax,edx
c0027995:	eb d4                	jmp    c002796b <__umoddi3+0x27>
c0027997:	90                   	nop
c0027998:	89 f1                	mov    ecx,esi
c002799a:	39 d8                	cmp    eax,ebx
c002799c:	76 0a                	jbe    c00279a8 <__umoddi3+0x64>
c002799e:	89 f0                	mov    eax,esi
c00279a0:	83 c4 1c             	add    esp,0x1c
c00279a3:	5b                   	pop    ebx
c00279a4:	5e                   	pop    esi
c00279a5:	5f                   	pop    edi
c00279a6:	5d                   	pop    ebp
c00279a7:	c3                   	ret    
c00279a8:	0f bd e8             	bsr    ebp,eax
c00279ab:	83 f5 1f             	xor    ebp,0x1f
c00279ae:	75 1c                	jne    c00279cc <__umoddi3+0x88>
c00279b0:	39 d8                	cmp    eax,ebx
c00279b2:	72 04                	jb     c00279b8 <__umoddi3+0x74>
c00279b4:	39 f7                	cmp    edi,esi
c00279b6:	77 08                	ja     c00279c0 <__umoddi3+0x7c>
c00279b8:	89 da                	mov    edx,ebx
c00279ba:	29 fe                	sub    esi,edi
c00279bc:	19 c2                	sbb    edx,eax
c00279be:	89 f1                	mov    ecx,esi
c00279c0:	89 c8                	mov    eax,ecx
c00279c2:	83 c4 1c             	add    esp,0x1c
c00279c5:	5b                   	pop    ebx
c00279c6:	5e                   	pop    esi
c00279c7:	5f                   	pop    edi
c00279c8:	5d                   	pop    ebp
c00279c9:	c3                   	ret    
c00279ca:	66 90                	xchg   ax,ax
c00279cc:	ba 20 00 00 00       	mov    edx,0x20
c00279d1:	29 ea                	sub    edx,ebp
c00279d3:	89 e9                	mov    ecx,ebp
c00279d5:	d3 e0                	shl    eax,cl
c00279d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00279db:	89 f8                	mov    eax,edi
c00279dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00279e1:	88 d1                	mov    cl,dl
c00279e3:	d3 e8                	shr    eax,cl
c00279e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00279e9:	09 c1                	or     ecx,eax
c00279eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00279ef:	89 e9                	mov    ecx,ebp
c00279f1:	d3 e7                	shl    edi,cl
c00279f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00279f7:	89 d8                	mov    eax,ebx
c00279f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00279fd:	88 d1                	mov    cl,dl
c00279ff:	d3 e8                	shr    eax,cl
c0027a01:	89 c7                	mov    edi,eax
c0027a03:	89 e9                	mov    ecx,ebp
c0027a05:	d3 e3                	shl    ebx,cl
c0027a07:	89 f0                	mov    eax,esi
c0027a09:	88 d1                	mov    cl,dl
c0027a0b:	d3 e8                	shr    eax,cl
c0027a0d:	09 d8                	or     eax,ebx
c0027a0f:	89 e9                	mov    ecx,ebp
c0027a11:	d3 e6                	shl    esi,cl
c0027a13:	89 f3                	mov    ebx,esi
c0027a15:	89 fa                	mov    edx,edi
c0027a17:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027a1b:	89 d1                	mov    ecx,edx
c0027a1d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027a21:	89 c6                	mov    esi,eax
c0027a23:	89 d7                	mov    edi,edx
c0027a25:	39 d1                	cmp    ecx,edx
c0027a27:	72 27                	jb     c0027a50 <__umoddi3+0x10c>
c0027a29:	74 21                	je     c0027a4c <__umoddi3+0x108>
c0027a2b:	89 ca                	mov    edx,ecx
c0027a2d:	29 f3                	sub    ebx,esi
c0027a2f:	19 fa                	sbb    edx,edi
c0027a31:	89 d0                	mov    eax,edx
c0027a33:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027a37:	d3 e0                	shl    eax,cl
c0027a39:	89 e9                	mov    ecx,ebp
c0027a3b:	d3 eb                	shr    ebx,cl
c0027a3d:	09 d8                	or     eax,ebx
c0027a3f:	d3 ea                	shr    edx,cl
c0027a41:	83 c4 1c             	add    esp,0x1c
c0027a44:	5b                   	pop    ebx
c0027a45:	5e                   	pop    esi
c0027a46:	5f                   	pop    edi
c0027a47:	5d                   	pop    ebp
c0027a48:	c3                   	ret    
c0027a49:	8d 76 00             	lea    esi,[esi+0x0]
c0027a4c:	39 c3                	cmp    ebx,eax
c0027a4e:	73 db                	jae    c0027a2b <__umoddi3+0xe7>
c0027a50:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027a54:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027a58:	89 d7                	mov    edi,edx
c0027a5a:	89 c6                	mov    esi,eax
c0027a5c:	eb cd                	jmp    c0027a2b <__umoddi3+0xe7>

c0027a5e <__addsf3>:
c0027a5e:	55                   	push   ebp
c0027a5f:	89 e5                	mov    ebp,esp
c0027a61:	57                   	push   edi
c0027a62:	56                   	push   esi
c0027a63:	53                   	push   ebx
c0027a64:	83 ec 08             	sub    esp,0x8
c0027a67:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a6a:	89 fa                	mov    edx,edi
c0027a6c:	89 f8                	mov    eax,edi
c0027a6e:	c1 f8 17             	sar    eax,0x17
c0027a71:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027a74:	c1 e2 08             	shl    edx,0x8
c0027a77:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027a7d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027a80:	89 de                	mov    esi,ebx
c0027a82:	c1 fe 17             	sar    esi,0x17
c0027a85:	c1 e3 08             	shl    ebx,0x8
c0027a88:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a8e:	31 f0                	xor    eax,esi
c0027a90:	0f 88 3b 01 00 00    	js     c0027bd1 <__addsf3+0x173>
c0027a96:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027a99:	29 f1                	sub    ecx,esi
c0027a9b:	85 c9                	test   ecx,ecx
c0027a9d:	7e 54                	jle    c0027af3 <__addsf3+0x95>
c0027a9f:	89 f0                	mov    eax,esi
c0027aa1:	84 c0                	test   al,al
c0027aa3:	75 10                	jne    c0027ab5 <__addsf3+0x57>
c0027aa5:	85 db                	test   ebx,ebx
c0027aa7:	0f 84 aa 02 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027aad:	49                   	dec    ecx
c0027aae:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027ab1:	74 38                	je     c0027aeb <__addsf3+0x8d>
c0027ab3:	eb 13                	jmp    c0027ac8 <__addsf3+0x6a>
c0027ab5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027ab8:	f7 d0                	not    eax
c0027aba:	84 c0                	test   al,al
c0027abc:	0f 84 95 02 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027ac2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027ac8:	83 f9 1f             	cmp    ecx,0x1f
c0027acb:	0f 8f 86 02 00 00    	jg     c0027d57 <__addsf3+0x2f9>
c0027ad1:	89 de                	mov    esi,ebx
c0027ad3:	d3 ee                	shr    esi,cl
c0027ad5:	b8 20 00 00 00       	mov    eax,0x20
c0027ada:	29 c8                	sub    eax,ecx
c0027adc:	89 c1                	mov    ecx,eax
c0027ade:	d3 e3                	shl    ebx,cl
c0027ae0:	31 c0                	xor    eax,eax
c0027ae2:	85 db                	test   ebx,ebx
c0027ae4:	0f 95 c0             	setne  al
c0027ae7:	09 f0                	or     eax,esi
c0027ae9:	01 d0                	add    eax,edx
c0027aeb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027aee:	e9 b6 00 00 00       	jmp    c0027ba9 <__addsf3+0x14b>
c0027af3:	74 5c                	je     c0027b51 <__addsf3+0xf3>
c0027af5:	89 f1                	mov    ecx,esi
c0027af7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0027afa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027afd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027b01:	75 14                	jne    c0027b17 <__addsf3+0xb9>
c0027b03:	85 d2                	test   edx,edx
c0027b05:	0f 84 4c 02 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027b0b:	49                   	dec    ecx
c0027b0c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027b0f:	0f 84 94 00 00 00    	je     c0027ba9 <__addsf3+0x14b>
c0027b15:	eb 12                	jmp    c0027b29 <__addsf3+0xcb>
c0027b17:	89 f0                	mov    eax,esi
c0027b19:	f7 d0                	not    eax
c0027b1b:	84 c0                	test   al,al
c0027b1d:	0f 84 34 02 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027b23:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b29:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b2c:	83 f9 1f             	cmp    ecx,0x1f
c0027b2f:	0f 8f 22 02 00 00    	jg     c0027d57 <__addsf3+0x2f9>
c0027b35:	89 d7                	mov    edi,edx
c0027b37:	d3 ef                	shr    edi,cl
c0027b39:	b8 20 00 00 00       	mov    eax,0x20
c0027b3e:	29 c8                	sub    eax,ecx
c0027b40:	89 c1                	mov    ecx,eax
c0027b42:	d3 e2                	shl    edx,cl
c0027b44:	31 c0                	xor    eax,eax
c0027b46:	85 d2                	test   edx,edx
c0027b48:	0f 95 c0             	setne  al
c0027b4b:	09 f8                	or     eax,edi
c0027b4d:	01 d8                	add    eax,ebx
c0027b4f:	eb 58                	jmp    c0027ba9 <__addsf3+0x14b>
c0027b51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027b54:	8d 70 01             	lea    esi,[eax+0x1]
c0027b57:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0027b5d:	75 32                	jne    c0027b91 <__addsf3+0x133>
c0027b5f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027b63:	75 1f                	jne    c0027b84 <__addsf3+0x126>
c0027b65:	85 d2                	test   edx,edx
c0027b67:	0f 84 e0 01 00 00    	je     c0027d4d <__addsf3+0x2ef>
c0027b6d:	85 db                	test   ebx,ebx
c0027b6f:	0f 84 e2 01 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027b75:	89 d0                	mov    eax,edx
c0027b77:	01 d8                	add    eax,ebx
c0027b79:	0f 89 a9 01 00 00    	jns    c0027d28 <__addsf3+0x2ca>
c0027b7f:	e9 9d 01 00 00       	jmp    c0027d21 <__addsf3+0x2c3>
c0027b84:	85 d2                	test   edx,edx
c0027b86:	0f 85 cb 01 00 00    	jne    c0027d57 <__addsf3+0x2f9>
c0027b8c:	e9 bc 01 00 00       	jmp    c0027d4d <__addsf3+0x2ef>
c0027b91:	31 c0                	xor    eax,eax
c0027b93:	89 f1                	mov    ecx,esi
c0027b95:	f7 d1                	not    ecx
c0027b97:	84 c9                	test   cl,cl
c0027b99:	0f 84 90 01 00 00    	je     c0027d2f <__addsf3+0x2d1>
c0027b9f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027ba2:	d1 e8                	shr    eax,1
c0027ba4:	e9 86 01 00 00       	jmp    c0027d2f <__addsf3+0x2d1>
c0027ba9:	85 c0                	test   eax,eax
c0027bab:	0f 89 7e 01 00 00    	jns    c0027d2f <__addsf3+0x2d1>
c0027bb1:	46                   	inc    esi
c0027bb2:	89 f2                	mov    edx,esi
c0027bb4:	f7 d2                	not    edx
c0027bb6:	84 d2                	test   dl,dl
c0027bb8:	0f 84 6f 01 00 00    	je     c0027d2d <__addsf3+0x2cf>
c0027bbe:	89 c2                	mov    edx,eax
c0027bc0:	83 e2 01             	and    edx,0x1
c0027bc3:	d1 e8                	shr    eax,1
c0027bc5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027bca:	09 d0                	or     eax,edx
c0027bcc:	e9 5e 01 00 00       	jmp    c0027d2f <__addsf3+0x2d1>
c0027bd1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027bd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd8:	89 f0                	mov    eax,esi
c0027bda:	0f b6 c0             	movzx  eax,al
c0027bdd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027be0:	29 c1                	sub    ecx,eax
c0027be2:	85 c9                	test   ecx,ecx
c0027be4:	7e 55                	jle    c0027c3b <__addsf3+0x1dd>
c0027be6:	85 c0                	test   eax,eax
c0027be8:	75 11                	jne    c0027bfb <__addsf3+0x19d>
c0027bea:	85 db                	test   ebx,ebx
c0027bec:	0f 84 65 01 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027bf2:	49                   	dec    ecx
c0027bf3:	75 19                	jne    c0027c0e <__addsf3+0x1b0>
c0027bf5:	89 d0                	mov    eax,edx
c0027bf7:	29 d8                	sub    eax,ebx
c0027bf9:	eb 38                	jmp    c0027c33 <__addsf3+0x1d5>
c0027bfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027bfe:	f7 d0                	not    eax
c0027c00:	84 c0                	test   al,al
c0027c02:	0f 84 4f 01 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027c08:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027c0e:	83 f9 1f             	cmp    ecx,0x1f
c0027c11:	0f 8f 40 01 00 00    	jg     c0027d57 <__addsf3+0x2f9>
c0027c17:	89 de                	mov    esi,ebx
c0027c19:	d3 ee                	shr    esi,cl
c0027c1b:	b8 20 00 00 00       	mov    eax,0x20
c0027c20:	29 c8                	sub    eax,ecx
c0027c22:	89 c1                	mov    ecx,eax
c0027c24:	d3 e3                	shl    ebx,cl
c0027c26:	31 c0                	xor    eax,eax
c0027c28:	85 db                	test   ebx,ebx
c0027c2a:	0f 95 c0             	setne  al
c0027c2d:	09 f0                	or     eax,esi
c0027c2f:	29 c2                	sub    edx,eax
c0027c31:	89 d0                	mov    eax,edx
c0027c33:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027c36:	e9 af 00 00 00       	jmp    c0027cea <__addsf3+0x28c>
c0027c3b:	74 5c                	je     c0027c99 <__addsf3+0x23b>
c0027c3d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027c40:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027c43:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027c47:	75 14                	jne    c0027c5d <__addsf3+0x1ff>
c0027c49:	85 d2                	test   edx,edx
c0027c4b:	0f 84 06 01 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027c51:	48                   	dec    eax
c0027c52:	75 1b                	jne    c0027c6f <__addsf3+0x211>
c0027c54:	89 d8                	mov    eax,ebx
c0027c56:	29 d0                	sub    eax,edx
c0027c58:	e9 8d 00 00 00       	jmp    c0027cea <__addsf3+0x28c>
c0027c5d:	89 f1                	mov    ecx,esi
c0027c5f:	f7 d1                	not    ecx
c0027c61:	84 c9                	test   cl,cl
c0027c63:	0f 84 ee 00 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027c69:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027c72:	83 f8 1f             	cmp    eax,0x1f
c0027c75:	0f 8f dc 00 00 00    	jg     c0027d57 <__addsf3+0x2f9>
c0027c7b:	89 d7                	mov    edi,edx
c0027c7d:	88 c1                	mov    cl,al
c0027c7f:	d3 ef                	shr    edi,cl
c0027c81:	b9 20 00 00 00       	mov    ecx,0x20
c0027c86:	29 c1                	sub    ecx,eax
c0027c88:	d3 e2                	shl    edx,cl
c0027c8a:	31 c0                	xor    eax,eax
c0027c8c:	85 d2                	test   edx,edx
c0027c8e:	0f 95 c0             	setne  al
c0027c91:	09 f8                	or     eax,edi
c0027c93:	29 c3                	sub    ebx,eax
c0027c95:	89 d8                	mov    eax,ebx
c0027c97:	eb 51                	jmp    c0027cea <__addsf3+0x28c>
c0027c99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027c9c:	40                   	inc    eax
c0027c9d:	a8 fe                	test   al,0xfe
c0027c9f:	75 3d                	jne    c0027cde <__addsf3+0x280>
c0027ca1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027ca5:	0f 85 a7 00 00 00    	jne    c0027d52 <__addsf3+0x2f4>
c0027cab:	85 d2                	test   edx,edx
c0027cad:	75 12                	jne    c0027cc1 <__addsf3+0x263>
c0027caf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027cb2:	85 db                	test   ebx,ebx
c0027cb4:	0f 85 9d 00 00 00    	jne    c0027d57 <__addsf3+0x2f9>
c0027cba:	31 ff                	xor    edi,edi
c0027cbc:	e9 96 00 00 00       	jmp    c0027d57 <__addsf3+0x2f9>
c0027cc1:	85 db                	test   ebx,ebx
c0027cc3:	0f 84 8e 00 00 00    	je     c0027d57 <__addsf3+0x2f9>
c0027cc9:	89 d0                	mov    eax,edx
c0027ccb:	29 d8                	sub    eax,ebx
c0027ccd:	79 06                	jns    c0027cd5 <__addsf3+0x277>
c0027ccf:	89 d8                	mov    eax,ebx
c0027cd1:	29 d0                	sub    eax,edx
c0027cd3:	eb 5a                	jmp    c0027d2f <__addsf3+0x2d1>
c0027cd5:	bf 00 00 00 00       	mov    edi,0x0
c0027cda:	74 7b                	je     c0027d57 <__addsf3+0x2f9>
c0027cdc:	eb 4a                	jmp    c0027d28 <__addsf3+0x2ca>
c0027cde:	89 d0                	mov    eax,edx
c0027ce0:	29 d8                	sub    eax,ebx
c0027ce2:	79 12                	jns    c0027cf6 <__addsf3+0x298>
c0027ce4:	89 d8                	mov    eax,ebx
c0027ce6:	29 d0                	sub    eax,edx
c0027ce8:	eb 09                	jmp    c0027cf3 <__addsf3+0x295>
c0027cea:	85 c0                	test   eax,eax
c0027cec:	79 41                	jns    c0027d2f <__addsf3+0x2d1>
c0027cee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027cf3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027cf6:	31 f6                	xor    esi,esi
c0027cf8:	85 c0                	test   eax,eax
c0027cfa:	74 33                	je     c0027d2f <__addsf3+0x2d1>
c0027cfc:	0f bd c8             	bsr    ecx,eax
c0027cff:	83 f1 1f             	xor    ecx,0x1f
c0027d02:	d3 e0                	shl    eax,cl
c0027d04:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027d08:	39 ca                	cmp    edx,ecx
c0027d0a:	7f 10                	jg     c0027d1c <__addsf3+0x2be>
c0027d0c:	29 d1                	sub    ecx,edx
c0027d0e:	41                   	inc    ecx
c0027d0f:	d3 e8                	shr    eax,cl
c0027d11:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027d14:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0027d1a:	eb 13                	jmp    c0027d2f <__addsf3+0x2d1>
c0027d1c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027d1f:	29 ce                	sub    esi,ecx
c0027d21:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d26:	eb 07                	jmp    c0027d2f <__addsf3+0x2d1>
c0027d28:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027d2b:	eb 02                	jmp    c0027d2f <__addsf3+0x2d1>
c0027d2d:	31 c0                	xor    eax,eax
c0027d2f:	89 c2                	mov    edx,eax
c0027d31:	c1 ea 08             	shr    edx,0x8
c0027d34:	a8 7f                	test   al,0x7f
c0027d36:	0f 95 c1             	setne  cl
c0027d39:	09 d1                	or     ecx,edx
c0027d3b:	83 e1 01             	and    ecx,0x1
c0027d3e:	c1 e8 07             	shr    eax,0x7
c0027d41:	21 c8                	and    eax,ecx
c0027d43:	c1 e6 17             	shl    esi,0x17
c0027d46:	09 d6                	or     esi,edx
c0027d48:	8d 3c 30             	lea    edi,[eax+esi*1]
c0027d4b:	eb 0a                	jmp    c0027d57 <__addsf3+0x2f9>
c0027d4d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027d50:	eb 05                	jmp    c0027d57 <__addsf3+0x2f9>
c0027d52:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027d57:	89 f8                	mov    eax,edi
c0027d59:	5a                   	pop    edx
c0027d5a:	59                   	pop    ecx
c0027d5b:	5b                   	pop    ebx
c0027d5c:	5e                   	pop    esi
c0027d5d:	5f                   	pop    edi
c0027d5e:	5d                   	pop    ebp
c0027d5f:	c3                   	ret    

c0027d60 <__subsf3>:
c0027d60:	55                   	push   ebp
c0027d61:	89 e5                	mov    ebp,esp
c0027d63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d66:	05 00 00 00 80       	add    eax,0x80000000
c0027d6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027d6e:	5d                   	pop    ebp
c0027d6f:	e9 ea fc ff ff       	jmp    c0027a5e <__addsf3>

c0027d74 <__negsf2>:
c0027d74:	55                   	push   ebp
c0027d75:	89 e5                	mov    ebp,esp
c0027d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027d7a:	05 00 00 00 80       	add    eax,0x80000000
c0027d7f:	5d                   	pop    ebp
c0027d80:	c3                   	ret    

c0027d81 <__mulsf3>:
c0027d81:	55                   	push   ebp
c0027d82:	89 e5                	mov    ebp,esp
c0027d84:	57                   	push   edi
c0027d85:	56                   	push   esi
c0027d86:	53                   	push   ebx
c0027d87:	83 ec 1c             	sub    esp,0x1c
c0027d8a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027d8d:	89 f0                	mov    eax,esi
c0027d8f:	89 f1                	mov    ecx,esi
c0027d91:	c1 f9 17             	sar    ecx,0x17
c0027d94:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027d97:	c1 e0 08             	shl    eax,0x8
c0027d9a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d9f:	89 c1                	mov    ecx,eax
c0027da1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027da4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027da7:	89 c7                	mov    edi,eax
c0027da9:	c1 ff 17             	sar    edi,0x17
c0027dac:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027db0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027db3:	89 f8                	mov    eax,edi
c0027db5:	0f b6 c0             	movzx  eax,al
c0027db8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027dbb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027dbf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027dc2:	42                   	inc    edx
c0027dc3:	80 e2 fe             	and    dl,0xfe
c0027dc6:	75 7b                	jne    c0027e43 <__mulsf3+0xc2>
c0027dc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027dcc:	74 54                	je     c0027e22 <__mulsf3+0xa1>
c0027dce:	85 c9                	test   ecx,ecx
c0027dd0:	0f 85 64 01 00 00    	jne    c0027f3a <__mulsf3+0x1b9>
c0027dd6:	8d 57 01             	lea    edx,[edi+0x1]
c0027dd9:	80 e2 fe             	and    dl,0xfe
c0027ddc:	75 1f                	jne    c0027dfd <__mulsf3+0x7c>
c0027dde:	85 c0                	test   eax,eax
c0027de0:	b8 00 00 00 00       	mov    eax,0x0
c0027de5:	74 29                	je     c0027e10 <__mulsf3+0x8f>
c0027de7:	53                   	push   ebx
c0027de8:	53                   	push   ebx
c0027de9:	50                   	push   eax
c0027dea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ded:	e8 96 05 00 00       	call   c0028388 <__nesf2>
c0027df2:	83 c4 10             	add    esp,0x10
c0027df5:	85 c0                	test   eax,eax
c0027df7:	0f 85 3a 01 00 00    	jne    c0027f37 <__mulsf3+0x1b6>
c0027dfd:	85 ff                	test   edi,edi
c0027dff:	0f 89 35 01 00 00    	jns    c0027f3a <__mulsf3+0x1b9>
c0027e05:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027e0b:	e9 2a 01 00 00       	jmp    c0027f3a <__mulsf3+0x1b9>
c0027e10:	51                   	push   ecx
c0027e11:	51                   	push   ecx
c0027e12:	50                   	push   eax
c0027e13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e16:	e8 6d 05 00 00       	call   c0028388 <__nesf2>
c0027e1b:	83 c4 10             	add    esp,0x10
c0027e1e:	85 c0                	test   eax,eax
c0027e20:	eb 15                	jmp    c0027e37 <__mulsf3+0xb6>
c0027e22:	85 c9                	test   ecx,ecx
c0027e24:	74 0b                	je     c0027e31 <__mulsf3+0xb0>
c0027e26:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027e29:	01 c9                	add    ecx,ecx
c0027e2b:	78 16                	js     c0027e43 <__mulsf3+0xc2>
c0027e2d:	89 d3                	mov    ebx,edx
c0027e2f:	eb f5                	jmp    c0027e26 <__mulsf3+0xa5>
c0027e31:	89 f8                	mov    eax,edi
c0027e33:	f7 d0                	not    eax
c0027e35:	84 c0                	test   al,al
c0027e37:	75 c4                	jne    c0027dfd <__mulsf3+0x7c>
c0027e39:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027e3e:	e9 f7 00 00 00       	jmp    c0027f3a <__mulsf3+0x1b9>
c0027e43:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e46:	c1 e6 08             	shl    esi,0x8
c0027e49:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027e4f:	8d 57 01             	lea    edx,[edi+0x1]
c0027e52:	80 e2 fe             	and    dl,0xfe
c0027e55:	75 63                	jne    c0027eba <__mulsf3+0x139>
c0027e57:	85 c0                	test   eax,eax
c0027e59:	74 2f                	je     c0027e8a <__mulsf3+0x109>
c0027e5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e5f:	0f 89 d2 00 00 00    	jns    c0027f37 <__mulsf3+0x1b6>
c0027e65:	52                   	push   edx
c0027e66:	52                   	push   edx
c0027e67:	6a 00                	push   0x0
c0027e69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e6c:	e8 dc 04 00 00       	call   c002834d <__eqsf2>
c0027e71:	83 c4 10             	add    esp,0x10
c0027e74:	85 c0                	test   eax,eax
c0027e76:	0f 85 bb 00 00 00    	jne    c0027f37 <__mulsf3+0x1b6>
c0027e7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027e7f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027e85:	e9 b0 00 00 00       	jmp    c0027f3a <__mulsf3+0x1b9>
c0027e8a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027e8d:	50                   	push   eax
c0027e8e:	50                   	push   eax
c0027e8f:	6a 00                	push   0x0
c0027e91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e94:	e8 b4 04 00 00       	call   c002834d <__eqsf2>
c0027e99:	83 c4 10             	add    esp,0x10
c0027e9c:	85 c0                	test   eax,eax
c0027e9e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ea1:	75 0c                	jne    c0027eaf <__mulsf3+0x12e>
c0027ea3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ea7:	0f 89 8a 00 00 00    	jns    c0027f37 <__mulsf3+0x1b6>
c0027ead:	eb cd                	jmp    c0027e7c <__mulsf3+0xfb>
c0027eaf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027eb2:	01 f6                	add    esi,esi
c0027eb4:	78 04                	js     c0027eba <__mulsf3+0x139>
c0027eb6:	89 c3                	mov    ebx,eax
c0027eb8:	eb f5                	jmp    c0027eaf <__mulsf3+0x12e>
c0027eba:	89 c8                	mov    eax,ecx
c0027ebc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ec1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ec7:	f7 e6                	mul    esi
c0027ec9:	85 c0                	test   eax,eax
c0027ecb:	0f 95 c0             	setne  al
c0027ece:	0f b6 c0             	movzx  eax,al
c0027ed1:	09 c2                	or     edx,eax
c0027ed3:	78 03                	js     c0027ed8 <__mulsf3+0x157>
c0027ed5:	01 d2                	add    edx,edx
c0027ed7:	4b                   	dec    ebx
c0027ed8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027ede:	7f 22                	jg     c0027f02 <__mulsf3+0x181>
c0027ee0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ee6:	85 db                	test   ebx,ebx
c0027ee8:	7f 23                	jg     c0027f0d <__mulsf3+0x18c>
c0027eea:	83 fb e9             	cmp    ebx,0xffffffe9
c0027eed:	7c 1a                	jl     c0027f09 <__mulsf3+0x188>
c0027eef:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ef5:	b9 01 00 00 00       	mov    ecx,0x1
c0027efa:	29 d9                	sub    ecx,ebx
c0027efc:	d3 ea                	shr    edx,cl
c0027efe:	31 db                	xor    ebx,ebx
c0027f00:	eb 0b                	jmp    c0027f0d <__mulsf3+0x18c>
c0027f02:	bb ff 00 00 00       	mov    ebx,0xff
c0027f07:	eb 02                	jmp    c0027f0b <__mulsf3+0x18a>
c0027f09:	31 db                	xor    ebx,ebx
c0027f0b:	31 d2                	xor    edx,edx
c0027f0d:	89 d0                	mov    eax,edx
c0027f0f:	c1 e8 08             	shr    eax,0x8
c0027f12:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027f15:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027f1b:	09 fb                	or     ebx,edi
c0027f1d:	c1 e3 17             	shl    ebx,0x17
c0027f20:	09 c3                	or     ebx,eax
c0027f22:	f6 c2 7f             	test   dl,0x7f
c0027f25:	0f 95 c1             	setne  cl
c0027f28:	09 c8                	or     eax,ecx
c0027f2a:	83 e0 01             	and    eax,0x1
c0027f2d:	c1 ea 07             	shr    edx,0x7
c0027f30:	21 c2                	and    edx,eax
c0027f32:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027f35:	eb 03                	jmp    c0027f3a <__mulsf3+0x1b9>
c0027f37:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027f3a:	89 f0                	mov    eax,esi
c0027f3c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f3f:	5b                   	pop    ebx
c0027f40:	5e                   	pop    esi
c0027f41:	5f                   	pop    edi
c0027f42:	5d                   	pop    ebp
c0027f43:	c3                   	ret    

c0027f44 <__divsf3>:
c0027f44:	55                   	push   ebp
c0027f45:	89 e5                	mov    ebp,esp
c0027f47:	57                   	push   edi
c0027f48:	56                   	push   esi
c0027f49:	53                   	push   ebx
c0027f4a:	83 ec 1c             	sub    esp,0x1c
c0027f4d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f50:	89 d8                	mov    eax,ebx
c0027f52:	89 d9                	mov    ecx,ebx
c0027f54:	c1 f9 17             	sar    ecx,0x17
c0027f57:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027f5a:	c1 e0 08             	shl    eax,0x8
c0027f5d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027f62:	89 c1                	mov    ecx,eax
c0027f64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027f67:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f6a:	89 c7                	mov    edi,eax
c0027f6c:	c1 ff 17             	sar    edi,0x17
c0027f6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027f73:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027f76:	89 f8                	mov    eax,edi
c0027f78:	0f b6 c0             	movzx  eax,al
c0027f7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f7e:	29 c6                	sub    esi,eax
c0027f80:	83 c6 7f             	add    esi,0x7f
c0027f83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027f86:	42                   	inc    edx
c0027f87:	80 e2 fe             	and    dl,0xfe
c0027f8a:	0f 85 9c 00 00 00    	jne    c002802c <__divsf3+0xe8>
c0027f90:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027f94:	74 33                	je     c0027fc9 <__divsf3+0x85>
c0027f96:	85 c9                	test   ecx,ecx
c0027f98:	0f 85 c7 01 00 00    	jne    c0028165 <__divsf3+0x221>
c0027f9e:	8d 57 01             	lea    edx,[edi+0x1]
c0027fa1:	80 e2 fe             	and    dl,0xfe
c0027fa4:	75 2f                	jne    c0027fd5 <__divsf3+0x91>
c0027fa6:	85 c0                	test   eax,eax
c0027fa8:	74 2b                	je     c0027fd5 <__divsf3+0x91>
c0027faa:	51                   	push   ecx
c0027fab:	51                   	push   ecx
c0027fac:	6a 00                	push   0x0
c0027fae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fb1:	e8 d2 03 00 00       	call   c0028388 <__nesf2>
c0027fb6:	83 c4 10             	add    esp,0x10
c0027fb9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027fbc:	85 c0                	test   eax,eax
c0027fbe:	0f 85 a1 01 00 00    	jne    c0028165 <__divsf3+0x221>
c0027fc4:	e9 92 01 00 00       	jmp    c002815b <__divsf3+0x217>
c0027fc9:	85 c9                	test   ecx,ecx
c0027fcb:	75 1b                	jne    c0027fe8 <__divsf3+0xa4>
c0027fcd:	8d 57 01             	lea    edx,[edi+0x1]
c0027fd0:	80 e2 fe             	and    dl,0xfe
c0027fd3:	74 1e                	je     c0027ff3 <__divsf3+0xaf>
c0027fd5:	85 ff                	test   edi,edi
c0027fd7:	0f 89 88 01 00 00    	jns    c0028165 <__divsf3+0x221>
c0027fdd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027fe3:	e9 7d 01 00 00       	jmp    c0028165 <__divsf3+0x221>
c0027fe8:	8d 56 ff             	lea    edx,[esi-0x1]
c0027feb:	01 c9                	add    ecx,ecx
c0027fed:	78 3d                	js     c002802c <__divsf3+0xe8>
c0027fef:	89 d6                	mov    esi,edx
c0027ff1:	eb f5                	jmp    c0027fe8 <__divsf3+0xa4>
c0027ff3:	85 c0                	test   eax,eax
c0027ff5:	b8 00 00 00 00       	mov    eax,0x0
c0027ffa:	74 18                	je     c0028014 <__divsf3+0xd0>
c0027ffc:	52                   	push   edx
c0027ffd:	52                   	push   edx
c0027ffe:	50                   	push   eax
c0027fff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028002:	e8 81 03 00 00       	call   c0028388 <__nesf2>
c0028007:	83 c4 10             	add    esp,0x10
c002800a:	85 c0                	test   eax,eax
c002800c:	0f 85 50 01 00 00    	jne    c0028162 <__divsf3+0x21e>
c0028012:	eb c1                	jmp    c0027fd5 <__divsf3+0x91>
c0028014:	56                   	push   esi
c0028015:	56                   	push   esi
c0028016:	50                   	push   eax
c0028017:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002801a:	e8 69 03 00 00       	call   c0028388 <__nesf2>
c002801f:	83 c4 10             	add    esp,0x10
c0028022:	85 c0                	test   eax,eax
c0028024:	0f 84 31 01 00 00    	je     c002815b <__divsf3+0x217>
c002802a:	eb a9                	jmp    c0027fd5 <__divsf3+0x91>
c002802c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002802f:	c1 e3 08             	shl    ebx,0x8
c0028032:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0028038:	8d 57 01             	lea    edx,[edi+0x1]
c002803b:	80 e2 fe             	and    dl,0xfe
c002803e:	75 71                	jne    c00280b1 <__divsf3+0x16d>
c0028040:	85 c0                	test   eax,eax
c0028042:	ba 00 00 00 00       	mov    edx,0x0
c0028047:	74 2f                	je     c0028078 <__divsf3+0x134>
c0028049:	51                   	push   ecx
c002804a:	51                   	push   ecx
c002804b:	52                   	push   edx
c002804c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002804f:	e8 f9 02 00 00       	call   c002834d <__eqsf2>
c0028054:	83 c4 10             	add    esp,0x10
c0028057:	85 c0                	test   eax,eax
c0028059:	0f 85 03 01 00 00    	jne    c0028162 <__divsf3+0x21e>
c002805f:	31 d2                	xor    edx,edx
c0028061:	89 d3                	mov    ebx,edx
c0028063:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028066:	31 f8                	xor    eax,edi
c0028068:	0f 89 f7 00 00 00    	jns    c0028165 <__divsf3+0x221>
c002806e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0028073:	e9 ed 00 00 00       	jmp    c0028165 <__divsf3+0x221>
c0028078:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002807b:	50                   	push   eax
c002807c:	50                   	push   eax
c002807d:	52                   	push   edx
c002807e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028081:	e8 c7 02 00 00       	call   c002834d <__eqsf2>
c0028086:	83 c4 10             	add    esp,0x10
c0028089:	85 c0                	test   eax,eax
c002808b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002808e:	75 16                	jne    c00280a6 <__divsf3+0x162>
c0028090:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028093:	31 fb                	xor    ebx,edi
c0028095:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002809b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00280a1:	e9 bf 00 00 00       	jmp    c0028165 <__divsf3+0x221>
c00280a6:	8d 46 01             	lea    eax,[esi+0x1]
c00280a9:	01 db                	add    ebx,ebx
c00280ab:	78 04                	js     c00280b1 <__divsf3+0x16d>
c00280ad:	89 c6                	mov    esi,eax
c00280af:	eb f5                	jmp    c00280a6 <__divsf3+0x162>
c00280b1:	89 c8                	mov    eax,ecx
c00280b3:	0d 00 00 00 80       	or     eax,0x80000000
c00280b8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00280be:	31 d2                	xor    edx,edx
c00280c0:	39 d8                	cmp    eax,ebx
c00280c2:	72 07                	jb     c00280cb <__divsf3+0x187>
c00280c4:	29 d8                	sub    eax,ebx
c00280c6:	ba 01 00 00 00       	mov    edx,0x1
c00280cb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00280d2:	01 d2                	add    edx,edx
c00280d4:	89 c1                	mov    ecx,eax
c00280d6:	01 c0                	add    eax,eax
c00280d8:	85 c9                	test   ecx,ecx
c00280da:	78 04                	js     c00280e0 <__divsf3+0x19c>
c00280dc:	39 c3                	cmp    ebx,eax
c00280de:	77 05                	ja     c00280e5 <__divsf3+0x1a1>
c00280e0:	29 d8                	sub    eax,ebx
c00280e2:	83 ca 01             	or     edx,0x1
c00280e5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00280e8:	75 e8                	jne    c00280d2 <__divsf3+0x18e>
c00280ea:	85 c0                	test   eax,eax
c00280ec:	0f 95 c0             	setne  al
c00280ef:	0f b6 c0             	movzx  eax,al
c00280f2:	c1 e2 06             	shl    edx,0x6
c00280f5:	09 c2                	or     edx,eax
c00280f7:	78 03                	js     c00280fc <__divsf3+0x1b8>
c00280f9:	01 d2                	add    edx,edx
c00280fb:	4e                   	dec    esi
c00280fc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0028102:	7f 22                	jg     c0028126 <__divsf3+0x1e2>
c0028104:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002810a:	85 f6                	test   esi,esi
c002810c:	7f 23                	jg     c0028131 <__divsf3+0x1ed>
c002810e:	83 fe e9             	cmp    esi,0xffffffe9
c0028111:	7c 1a                	jl     c002812d <__divsf3+0x1e9>
c0028113:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028119:	b9 01 00 00 00       	mov    ecx,0x1
c002811e:	29 f1                	sub    ecx,esi
c0028120:	d3 ea                	shr    edx,cl
c0028122:	31 f6                	xor    esi,esi
c0028124:	eb 0b                	jmp    c0028131 <__divsf3+0x1ed>
c0028126:	be ff 00 00 00       	mov    esi,0xff
c002812b:	eb 02                	jmp    c002812f <__divsf3+0x1eb>
c002812d:	31 f6                	xor    esi,esi
c002812f:	31 d2                	xor    edx,edx
c0028131:	89 d0                	mov    eax,edx
c0028133:	c1 e8 08             	shr    eax,0x8
c0028136:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0028139:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002813f:	09 fe                	or     esi,edi
c0028141:	c1 e6 17             	shl    esi,0x17
c0028144:	09 c6                	or     esi,eax
c0028146:	f6 c2 7f             	test   dl,0x7f
c0028149:	0f 95 c1             	setne  cl
c002814c:	09 c8                	or     eax,ecx
c002814e:	83 e0 01             	and    eax,0x1
c0028151:	c1 ea 07             	shr    edx,0x7
c0028154:	21 c2                	and    edx,eax
c0028156:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0028159:	eb 0a                	jmp    c0028165 <__divsf3+0x221>
c002815b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0028160:	eb 03                	jmp    c0028165 <__divsf3+0x221>
c0028162:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0028165:	89 d8                	mov    eax,ebx
c0028167:	8d 65 f4             	lea    esp,[ebp-0xc]
c002816a:	5b                   	pop    ebx
c002816b:	5e                   	pop    esi
c002816c:	5f                   	pop    edi
c002816d:	5d                   	pop    ebp
c002816e:	c3                   	ret    

c002816f <__floatsisf>:
c002816f:	55                   	push   ebp
c0028170:	89 e5                	mov    ebp,esp
c0028172:	53                   	push   ebx
c0028173:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028176:	85 d2                	test   edx,edx
c0028178:	7e 2b                	jle    c00281a5 <__floatsisf+0x36>
c002817a:	0f bd ca             	bsr    ecx,edx
c002817d:	83 f1 1f             	xor    ecx,0x1f
c0028180:	d3 e2                	shl    edx,cl
c0028182:	89 d0                	mov    eax,edx
c0028184:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028189:	89 c3                	mov    ebx,eax
c002818b:	c1 eb 08             	shr    ebx,0x8
c002818e:	80 e2 7f             	and    dl,0x7f
c0028191:	0f 95 c2             	setne  dl
c0028194:	09 da                	or     edx,ebx
c0028196:	83 e2 01             	and    edx,0x1
c0028199:	c1 e8 07             	shr    eax,0x7
c002819c:	21 c2                	and    edx,eax
c002819e:	b8 9e 00 00 00       	mov    eax,0x9e
c00281a3:	eb 32                	jmp    c00281d7 <__floatsisf+0x68>
c00281a5:	b8 00 00 00 00       	mov    eax,0x0
c00281aa:	74 34                	je     c00281e0 <__floatsisf+0x71>
c00281ac:	f7 da                	neg    edx
c00281ae:	0f bd ca             	bsr    ecx,edx
c00281b1:	83 f1 1f             	xor    ecx,0x1f
c00281b4:	d3 e2                	shl    edx,cl
c00281b6:	89 d0                	mov    eax,edx
c00281b8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00281bd:	89 c3                	mov    ebx,eax
c00281bf:	c1 eb 08             	shr    ebx,0x8
c00281c2:	80 e2 7f             	and    dl,0x7f
c00281c5:	0f 95 c2             	setne  dl
c00281c8:	09 da                	or     edx,ebx
c00281ca:	83 e2 01             	and    edx,0x1
c00281cd:	c1 e8 07             	shr    eax,0x7
c00281d0:	21 c2                	and    edx,eax
c00281d2:	b8 9e 01 00 00       	mov    eax,0x19e
c00281d7:	29 c8                	sub    eax,ecx
c00281d9:	c1 e0 17             	shl    eax,0x17
c00281dc:	09 d8                	or     eax,ebx
c00281de:	01 d0                	add    eax,edx
c00281e0:	5b                   	pop    ebx
c00281e1:	5d                   	pop    ebp
c00281e2:	c3                   	ret    

c00281e3 <__floatunsisf>:
c00281e3:	55                   	push   ebp
c00281e4:	89 e5                	mov    ebp,esp
c00281e6:	53                   	push   ebx
c00281e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00281ea:	31 c0                	xor    eax,eax
c00281ec:	85 d2                	test   edx,edx
c00281ee:	74 32                	je     c0028222 <__floatunsisf+0x3f>
c00281f0:	0f bd ca             	bsr    ecx,edx
c00281f3:	83 f1 1f             	xor    ecx,0x1f
c00281f6:	d3 e2                	shl    edx,cl
c00281f8:	89 d0                	mov    eax,edx
c00281fa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00281ff:	89 c3                	mov    ebx,eax
c0028201:	c1 eb 08             	shr    ebx,0x8
c0028204:	80 e2 7f             	and    dl,0x7f
c0028207:	0f 95 c2             	setne  dl
c002820a:	09 da                	or     edx,ebx
c002820c:	83 e2 01             	and    edx,0x1
c002820f:	c1 e8 07             	shr    eax,0x7
c0028212:	21 c2                	and    edx,eax
c0028214:	b8 9e 00 00 00       	mov    eax,0x9e
c0028219:	29 c8                	sub    eax,ecx
c002821b:	c1 e0 17             	shl    eax,0x17
c002821e:	09 d8                	or     eax,ebx
c0028220:	01 d0                	add    eax,edx
c0028222:	5b                   	pop    ebx
c0028223:	5d                   	pop    ebp
c0028224:	c3                   	ret    

c0028225 <__fixsfsi>:
c0028225:	55                   	push   ebp
c0028226:	89 e5                	mov    ebp,esp
c0028228:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002822b:	89 d1                	mov    ecx,edx
c002822d:	c1 e1 08             	shl    ecx,0x8
c0028230:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0028236:	c1 fa 17             	sar    edx,0x17
c0028239:	78 1c                	js     c0028257 <__fixsfsi+0x32>
c002823b:	83 ea 7f             	sub    edx,0x7f
c002823e:	31 c0                	xor    eax,eax
c0028240:	83 fa 1e             	cmp    edx,0x1e
c0028243:	77 40                	ja     c0028285 <__fixsfsi+0x60>
c0028245:	89 c8                	mov    eax,ecx
c0028247:	0d 00 00 00 80       	or     eax,0x80000000
c002824c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028251:	29 d1                	sub    ecx,edx
c0028253:	d3 e8                	shr    eax,cl
c0028255:	eb 2e                	jmp    c0028285 <__fixsfsi+0x60>
c0028257:	31 c0                	xor    eax,eax
c0028259:	81 c2 81 00 00 00    	add    edx,0x81
c002825f:	78 24                	js     c0028285 <__fixsfsi+0x60>
c0028261:	83 fa 1e             	cmp    edx,0x1e
c0028264:	7e 09                	jle    c002826f <__fixsfsi+0x4a>
c0028266:	83 fa 1f             	cmp    edx,0x1f
c0028269:	75 18                	jne    c0028283 <__fixsfsi+0x5e>
c002826b:	85 c9                	test   ecx,ecx
c002826d:	75 14                	jne    c0028283 <__fixsfsi+0x5e>
c002826f:	89 c8                	mov    eax,ecx
c0028271:	0d 00 00 00 80       	or     eax,0x80000000
c0028276:	b9 1f 00 00 00       	mov    ecx,0x1f
c002827b:	29 d1                	sub    ecx,edx
c002827d:	d3 e8                	shr    eax,cl
c002827f:	f7 d8                	neg    eax
c0028281:	eb 02                	jmp    c0028285 <__fixsfsi+0x60>
c0028283:	31 c0                	xor    eax,eax
c0028285:	5d                   	pop    ebp
c0028286:	c3                   	ret    

c0028287 <__fixunssfsi>:
c0028287:	55                   	push   ebp
c0028288:	89 e5                	mov    ebp,esp
c002828a:	53                   	push   ebx
c002828b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002828e:	89 d3                	mov    ebx,edx
c0028290:	c1 fb 17             	sar    ebx,0x17
c0028293:	83 eb 7f             	sub    ebx,0x7f
c0028296:	31 c0                	xor    eax,eax
c0028298:	83 fb 1f             	cmp    ebx,0x1f
c002829b:	77 18                	ja     c00282b5 <__fixunssfsi+0x2e>
c002829d:	89 d0                	mov    eax,edx
c002829f:	c1 e0 08             	shl    eax,0x8
c00282a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00282a7:	0d 00 00 00 80       	or     eax,0x80000000
c00282ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282b1:	29 d9                	sub    ecx,ebx
c00282b3:	d3 e8                	shr    eax,cl
c00282b5:	5b                   	pop    ebx
c00282b6:	5d                   	pop    ebp
c00282b7:	c3                   	ret    

c00282b8 <__cmpsf2>:
c00282b8:	55                   	push   ebp
c00282b9:	89 e5                	mov    ebp,esp
c00282bb:	57                   	push   edi
c00282bc:	56                   	push   esi
c00282bd:	53                   	push   ebx
c00282be:	83 ec 24             	sub    esp,0x24
c00282c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00282c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00282c7:	e8 4f 10 00 00       	call   c002931b <__truncdfsf2>
c00282cc:	5a                   	pop    edx
c00282cd:	59                   	pop    ecx
c00282ce:	89 c3                	mov    ebx,eax
c00282d0:	c1 e8 17             	shr    eax,0x17
c00282d3:	0f b6 f0             	movzx  esi,al
c00282d6:	89 d8                	mov    eax,ebx
c00282d8:	c1 e8 1f             	shr    eax,0x1f
c00282db:	31 c6                	xor    esi,eax
c00282dd:	c1 e3 08             	shl    ebx,0x8
c00282e0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00282e3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00282e6:	e8 30 10 00 00       	call   c002931b <__truncdfsf2>
c00282eb:	83 c4 10             	add    esp,0x10
c00282ee:	89 c1                	mov    ecx,eax
c00282f0:	c1 e9 17             	shr    ecx,0x17
c00282f3:	0f b6 c9             	movzx  ecx,cl
c00282f6:	89 c7                	mov    edi,eax
c00282f8:	c1 ef 1f             	shr    edi,0x1f
c00282fb:	89 ca                	mov    edx,ecx
c00282fd:	31 fa                	xor    edx,edi
c00282ff:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028302:	c1 e0 08             	shl    eax,0x8
c0028305:	89 c2                	mov    edx,eax
c0028307:	89 d8                	mov    eax,ebx
c0028309:	09 d0                	or     eax,edx
c002830b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0028310:	09 f0                	or     eax,esi
c0028312:	75 08                	jne    c002831c <__cmpsf2+0x64>
c0028314:	31 c0                	xor    eax,eax
c0028316:	39 f9                	cmp    ecx,edi
c0028318:	75 0c                	jne    c0028326 <__cmpsf2+0x6e>
c002831a:	eb 29                	jmp    c0028345 <__cmpsf2+0x8d>
c002831c:	b8 01 00 00 00       	mov    eax,0x1
c0028321:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0028324:	7f 1f                	jg     c0028345 <__cmpsf2+0x8d>
c0028326:	83 c8 ff             	or     eax,0xffffffff
c0028329:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002832c:	7c 17                	jl     c0028345 <__cmpsf2+0x8d>
c002832e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0028334:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002833a:	b8 01 00 00 00       	mov    eax,0x1
c002833f:	39 d3                	cmp    ebx,edx
c0028341:	77 02                	ja     c0028345 <__cmpsf2+0x8d>
c0028343:	19 c0                	sbb    eax,eax
c0028345:	8d 65 f4             	lea    esp,[ebp-0xc]
c0028348:	5b                   	pop    ebx
c0028349:	5e                   	pop    esi
c002834a:	5f                   	pop    edi
c002834b:	5d                   	pop    ebp
c002834c:	c3                   	ret    

c002834d <__eqsf2>:
c002834d:	55                   	push   ebp
c002834e:	89 e5                	mov    ebp,esp
c0028350:	83 ec 24             	sub    esp,0x24
c0028353:	6a 01                	push   0x1
c0028355:	83 ec 0c             	sub    esp,0xc
c0028358:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002835b:	e8 df 10 00 00       	call   c002943f <__extendsfdf2>
c0028360:	83 c4 10             	add    esp,0x10
c0028363:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028366:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028369:	52                   	push   edx
c002836a:	50                   	push   eax
c002836b:	50                   	push   eax
c002836c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002836f:	e8 cb 10 00 00       	call   c002943f <__extendsfdf2>
c0028374:	59                   	pop    ecx
c0028375:	59                   	pop    ecx
c0028376:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028379:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002837c:	52                   	push   edx
c002837d:	50                   	push   eax
c002837e:	e8 35 ff ff ff       	call   c00282b8 <__cmpsf2>
c0028383:	83 c4 20             	add    esp,0x20
c0028386:	c9                   	leave  
c0028387:	c3                   	ret    

c0028388 <__nesf2>:
c0028388:	eb c3                	jmp    c002834d <__eqsf2>

c002838a <__gtsf2>:
c002838a:	55                   	push   ebp
c002838b:	89 e5                	mov    ebp,esp
c002838d:	83 ec 24             	sub    esp,0x24
c0028390:	6a ff                	push   0xffffffff
c0028392:	83 ec 0c             	sub    esp,0xc
c0028395:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028398:	e8 a2 10 00 00       	call   c002943f <__extendsfdf2>
c002839d:	83 c4 10             	add    esp,0x10
c00283a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00283a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00283a6:	52                   	push   edx
c00283a7:	50                   	push   eax
c00283a8:	50                   	push   eax
c00283a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283ac:	e8 8e 10 00 00       	call   c002943f <__extendsfdf2>
c00283b1:	59                   	pop    ecx
c00283b2:	59                   	pop    ecx
c00283b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00283b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00283b9:	52                   	push   edx
c00283ba:	50                   	push   eax
c00283bb:	e8 f8 fe ff ff       	call   c00282b8 <__cmpsf2>
c00283c0:	83 c4 20             	add    esp,0x20
c00283c3:	c9                   	leave  
c00283c4:	c3                   	ret    

c00283c5 <__gesf2>:
c00283c5:	eb c3                	jmp    c002838a <__gtsf2>

c00283c7 <__ltsf2>:
c00283c7:	eb 84                	jmp    c002834d <__eqsf2>

c00283c9 <__lesf2>:
c00283c9:	eb 82                	jmp    c002834d <__eqsf2>

c00283cb <__adddf3>:
c00283cb:	55                   	push   ebp
c00283cc:	89 e5                	mov    ebp,esp
c00283ce:	57                   	push   edi
c00283cf:	56                   	push   esi
c00283d0:	53                   	push   ebx
c00283d1:	83 ec 24             	sub    esp,0x24
c00283d4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283d7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283e0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00283e3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283e6:	89 c8                	mov    eax,ecx
c00283e8:	89 ce                	mov    esi,ecx
c00283ea:	c1 fe 14             	sar    esi,0x14
c00283ed:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00283f0:	89 fb                	mov    ebx,edi
c00283f2:	89 fa                	mov    edx,edi
c00283f4:	c1 e2 0b             	shl    edx,0xb
c00283f7:	c1 e0 0b             	shl    eax,0xb
c00283fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283ff:	c1 eb 15             	shr    ebx,0x15
c0028402:	09 d8                	or     eax,ebx
c0028404:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028407:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002840a:	c1 fe 14             	sar    esi,0x14
c002840d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028410:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028413:	89 f3                	mov    ebx,esi
c0028415:	c1 e3 0b             	shl    ebx,0xb
c0028418:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002841b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002841e:	c1 e3 0b             	shl    ebx,0xb
c0028421:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0028427:	c1 ee 15             	shr    esi,0x15
c002842a:	09 f3                	or     ebx,esi
c002842c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002842f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0028432:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0028435:	0f 88 5f 02 00 00    	js     c002869a <__adddf3+0x2cf>
c002843b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002843e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028441:	85 db                	test   ebx,ebx
c0028443:	0f 8e c7 00 00 00    	jle    c0028510 <__adddf3+0x145>
c0028449:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028450:	75 1a                	jne    c002846c <__adddf3+0xa1>
c0028452:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028455:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028458:	0f 84 b2 05 00 00    	je     c0028a10 <__adddf3+0x645>
c002845e:	4b                   	dec    ebx
c002845f:	75 23                	jne    c0028484 <__adddf3+0xb9>
c0028461:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028464:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028467:	e9 99 00 00 00       	jmp    c0028505 <__adddf3+0x13a>
c002846c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002846f:	f7 d6                	not    esi
c0028471:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028477:	0f 84 93 05 00 00    	je     c0028a10 <__adddf3+0x645>
c002847d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028484:	83 fb 1f             	cmp    ebx,0x1f
c0028487:	7e 42                	jle    c00284cb <__adddf3+0x100>
c0028489:	83 fb 3f             	cmp    ebx,0x3f
c002848c:	0f 8f 7e 05 00 00    	jg     c0028a10 <__adddf3+0x645>
c0028492:	83 e3 1f             	and    ebx,0x1f
c0028495:	89 d9                	mov    ecx,ebx
c0028497:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002849a:	d3 ef                	shr    edi,cl
c002849c:	31 db                	xor    ebx,ebx
c002849e:	85 c9                	test   ecx,ecx
c00284a0:	74 15                	je     c00284b7 <__adddf3+0xec>
c00284a2:	be 20 00 00 00       	mov    esi,0x20
c00284a7:	29 ce                	sub    esi,ecx
c00284a9:	89 f1                	mov    ecx,esi
c00284ab:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00284ae:	d3 e6                	shl    esi,cl
c00284b0:	31 db                	xor    ebx,ebx
c00284b2:	85 f6                	test   esi,esi
c00284b4:	0f 95 c3             	setne  bl
c00284b7:	31 c9                	xor    ecx,ecx
c00284b9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00284bd:	0f 95 c1             	setne  cl
c00284c0:	09 cf                	or     edi,ecx
c00284c2:	09 fb                	or     ebx,edi
c00284c4:	01 da                	add    edx,ebx
c00284c6:	83 d0 00             	adc    eax,0x0
c00284c9:	eb 3a                	jmp    c0028505 <__adddf3+0x13a>
c00284cb:	bf 20 00 00 00       	mov    edi,0x20
c00284d0:	29 df                	sub    edi,ebx
c00284d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00284d8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00284db:	d3 e6                	shl    esi,cl
c00284dd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00284e0:	88 d9                	mov    cl,bl
c00284e2:	d3 ef                	shr    edi,cl
c00284e4:	09 fe                	or     esi,edi
c00284e6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00284e9:	88 d9                	mov    cl,bl
c00284eb:	d3 ef                	shr    edi,cl
c00284ed:	89 fb                	mov    ebx,edi
c00284ef:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00284f2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00284f5:	d3 e7                	shl    edi,cl
c00284f7:	85 ff                	test   edi,edi
c00284f9:	0f 95 c1             	setne  cl
c00284fc:	0f b6 c9             	movzx  ecx,cl
c00284ff:	09 ce                	or     esi,ecx
c0028501:	01 f2                	add    edx,esi
c0028503:	11 d8                	adc    eax,ebx
c0028505:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028508:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002850b:	e9 52 01 00 00       	jmp    c0028662 <__adddf3+0x297>
c0028510:	0f 84 d5 00 00 00    	je     c00285eb <__adddf3+0x220>
c0028516:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028519:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002851c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002851f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028522:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028529:	75 20                	jne    c002854b <__adddf3+0x180>
c002852b:	89 d6                	mov    esi,edx
c002852d:	09 c6                	or     esi,eax
c002852f:	0f 84 db 04 00 00    	je     c0028a10 <__adddf3+0x645>
c0028535:	4b                   	dec    ebx
c0028536:	75 29                	jne    c0028561 <__adddf3+0x196>
c0028538:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002853b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002853e:	01 d1                	add    ecx,edx
c0028540:	11 c6                	adc    esi,eax
c0028542:	89 f0                	mov    eax,esi
c0028544:	89 ca                	mov    edx,ecx
c0028546:	e9 17 01 00 00       	jmp    c0028662 <__adddf3+0x297>
c002854b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002854e:	f7 d6                	not    esi
c0028550:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028556:	0f 84 b4 04 00 00    	je     c0028a10 <__adddf3+0x645>
c002855c:	0d 00 00 00 80       	or     eax,0x80000000
c0028561:	83 fb 1f             	cmp    ebx,0x1f
c0028564:	7e 48                	jle    c00285ae <__adddf3+0x1e3>
c0028566:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028569:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002856c:	83 fb 3f             	cmp    ebx,0x3f
c002856f:	0f 8f 9b 04 00 00    	jg     c0028a10 <__adddf3+0x645>
c0028575:	83 e3 1f             	and    ebx,0x1f
c0028578:	89 d9                	mov    ecx,ebx
c002857a:	89 c7                	mov    edi,eax
c002857c:	d3 ef                	shr    edi,cl
c002857e:	31 db                	xor    ebx,ebx
c0028580:	85 c9                	test   ecx,ecx
c0028582:	74 12                	je     c0028596 <__adddf3+0x1cb>
c0028584:	be 20 00 00 00       	mov    esi,0x20
c0028589:	29 ce                	sub    esi,ecx
c002858b:	89 f1                	mov    ecx,esi
c002858d:	d3 e0                	shl    eax,cl
c002858f:	31 db                	xor    ebx,ebx
c0028591:	85 c0                	test   eax,eax
c0028593:	0f 95 c3             	setne  bl
c0028596:	31 c0                	xor    eax,eax
c0028598:	85 d2                	test   edx,edx
c002859a:	0f 95 c0             	setne  al
c002859d:	09 c7                	or     edi,eax
c002859f:	09 fb                	or     ebx,edi
c00285a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285a4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285a7:	01 da                	add    edx,ebx
c00285a9:	83 d6 00             	adc    esi,0x0
c00285ac:	eb 39                	jmp    c00285e7 <__adddf3+0x21c>
c00285ae:	be 20 00 00 00       	mov    esi,0x20
c00285b3:	29 de                	sub    esi,ebx
c00285b5:	89 c7                	mov    edi,eax
c00285b7:	89 f1                	mov    ecx,esi
c00285b9:	d3 e7                	shl    edi,cl
c00285bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00285be:	89 d7                	mov    edi,edx
c00285c0:	88 d9                	mov    cl,bl
c00285c2:	d3 ef                	shr    edi,cl
c00285c4:	89 f9                	mov    ecx,edi
c00285c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285c9:	09 cf                	or     edi,ecx
c00285cb:	88 d9                	mov    cl,bl
c00285cd:	d3 e8                	shr    eax,cl
c00285cf:	89 f1                	mov    ecx,esi
c00285d1:	d3 e2                	shl    edx,cl
c00285d3:	85 d2                	test   edx,edx
c00285d5:	0f 95 c2             	setne  dl
c00285d8:	0f b6 d2             	movzx  edx,dl
c00285db:	09 d7                	or     edi,edx
c00285dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285e3:	01 fa                	add    edx,edi
c00285e5:	11 c6                	adc    esi,eax
c00285e7:	89 f0                	mov    eax,esi
c00285e9:	eb 77                	jmp    c0028662 <__adddf3+0x297>
c00285eb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00285ee:	46                   	inc    esi
c00285ef:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00285f2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00285f8:	75 41                	jne    c002863b <__adddf3+0x270>
c00285fa:	89 d3                	mov    ebx,edx
c00285fc:	09 c3                	or     ebx,eax
c00285fe:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028605:	75 27                	jne    c002862e <__adddf3+0x263>
c0028607:	85 db                	test   ebx,ebx
c0028609:	0f 84 fb 03 00 00    	je     c0028a0a <__adddf3+0x63f>
c002860f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028612:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028615:	0f 84 f5 03 00 00    	je     c0028a10 <__adddf3+0x645>
c002861b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002861e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028621:	85 c0                	test   eax,eax
c0028623:	0f 89 91 03 00 00    	jns    c00289ba <__adddf3+0x5ef>
c0028629:	e9 85 03 00 00       	jmp    c00289b3 <__adddf3+0x5e8>
c002862e:	85 db                	test   ebx,ebx
c0028630:	0f 85 da 03 00 00    	jne    c0028a10 <__adddf3+0x645>
c0028636:	e9 cf 03 00 00       	jmp    c0028a0a <__adddf3+0x63f>
c002863b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002863e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028641:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028644:	f7 d1                	not    ecx
c0028646:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002864c:	0f 84 70 03 00 00    	je     c00289c2 <__adddf3+0x5f7>
c0028652:	d1 ea                	shr    edx,1
c0028654:	89 c1                	mov    ecx,eax
c0028656:	c1 e1 1f             	shl    ecx,0x1f
c0028659:	09 ca                	or     edx,ecx
c002865b:	d1 e8                	shr    eax,1
c002865d:	e9 6f 03 00 00       	jmp    c00289d1 <__adddf3+0x606>
c0028662:	85 c0                	test   eax,eax
c0028664:	0f 89 67 03 00 00    	jns    c00289d1 <__adddf3+0x606>
c002866a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002866d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028670:	f7 d1                	not    ecx
c0028672:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028678:	0f 84 44 03 00 00    	je     c00289c2 <__adddf3+0x5f7>
c002867e:	89 d1                	mov    ecx,edx
c0028680:	d1 e9                	shr    ecx,1
c0028682:	83 e2 01             	and    edx,0x1
c0028685:	09 ca                	or     edx,ecx
c0028687:	89 c1                	mov    ecx,eax
c0028689:	c1 e1 1f             	shl    ecx,0x1f
c002868c:	09 ca                	or     edx,ecx
c002868e:	d1 e8                	shr    eax,1
c0028690:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028695:	e9 37 03 00 00       	jmp    c00289d1 <__adddf3+0x606>
c002869a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002869d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00286a3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00286a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00286a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00286af:	29 de                	sub    esi,ebx
c00286b1:	85 f6                	test   esi,esi
c00286b3:	0f 8e bd 00 00 00    	jle    c0028776 <__adddf3+0x3ab>
c00286b9:	85 db                	test   ebx,ebx
c00286bb:	75 17                	jne    c00286d4 <__adddf3+0x309>
c00286bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00286c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00286c3:	0f 84 47 03 00 00    	je     c0028a10 <__adddf3+0x645>
c00286c9:	4e                   	dec    esi
c00286ca:	75 20                	jne    c00286ec <__adddf3+0x321>
c00286cc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00286cf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00286d2:	eb 5b                	jmp    c002872f <__adddf3+0x364>
c00286d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00286d7:	f7 d3                	not    ebx
c00286d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00286df:	0f 84 2b 03 00 00    	je     c0028a10 <__adddf3+0x645>
c00286e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00286ec:	83 fe 1f             	cmp    esi,0x1f
c00286ef:	7e 49                	jle    c002873a <__adddf3+0x36f>
c00286f1:	83 fe 3f             	cmp    esi,0x3f
c00286f4:	0f 8f 16 03 00 00    	jg     c0028a10 <__adddf3+0x645>
c00286fa:	83 e6 1f             	and    esi,0x1f
c00286fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028700:	89 f1                	mov    ecx,esi
c0028702:	d3 ef                	shr    edi,cl
c0028704:	31 db                	xor    ebx,ebx
c0028706:	85 f6                	test   esi,esi
c0028708:	74 13                	je     c002871d <__adddf3+0x352>
c002870a:	b9 20 00 00 00       	mov    ecx,0x20
c002870f:	29 f1                	sub    ecx,esi
c0028711:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028714:	d3 e6                	shl    esi,cl
c0028716:	31 db                	xor    ebx,ebx
c0028718:	85 f6                	test   esi,esi
c002871a:	0f 95 c3             	setne  bl
c002871d:	31 c9                	xor    ecx,ecx
c002871f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028723:	0f 95 c1             	setne  cl
c0028726:	09 cf                	or     edi,ecx
c0028728:	09 fb                	or     ebx,edi
c002872a:	29 da                	sub    edx,ebx
c002872c:	83 d8 00             	sbb    eax,0x0
c002872f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028732:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028735:	e9 aa 01 00 00       	jmp    c00288e4 <__adddf3+0x519>
c002873a:	bf 20 00 00 00       	mov    edi,0x20
c002873f:	29 f7                	sub    edi,esi
c0028741:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028744:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028747:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002874a:	d3 e3                	shl    ebx,cl
c002874c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002874f:	89 f1                	mov    ecx,esi
c0028751:	d3 ef                	shr    edi,cl
c0028753:	09 fb                	or     ebx,edi
c0028755:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028758:	89 f1                	mov    ecx,esi
c002875a:	d3 ef                	shr    edi,cl
c002875c:	89 fe                	mov    esi,edi
c002875e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028761:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028764:	d3 e7                	shl    edi,cl
c0028766:	85 ff                	test   edi,edi
c0028768:	0f 95 c1             	setne  cl
c002876b:	0f b6 c9             	movzx  ecx,cl
c002876e:	09 cb                	or     ebx,ecx
c0028770:	29 da                	sub    edx,ebx
c0028772:	19 f0                	sbb    eax,esi
c0028774:	eb b9                	jmp    c002872f <__adddf3+0x364>
c0028776:	0f 84 cd 00 00 00    	je     c0028849 <__adddf3+0x47e>
c002877c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002877f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028782:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028785:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028789:	75 1b                	jne    c00287a6 <__adddf3+0x3db>
c002878b:	89 d6                	mov    esi,edx
c002878d:	09 c6                	or     esi,eax
c002878f:	0f 84 7b 02 00 00    	je     c0028a10 <__adddf3+0x645>
c0028795:	4b                   	dec    ebx
c0028796:	75 24                	jne    c00287bc <__adddf3+0x3f1>
c0028798:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002879b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002879e:	29 d1                	sub    ecx,edx
c00287a0:	19 c6                	sbb    esi,eax
c00287a2:	89 ca                	mov    edx,ecx
c00287a4:	eb 61                	jmp    c0028807 <__adddf3+0x43c>
c00287a6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00287a9:	f7 d6                	not    esi
c00287ab:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00287b1:	0f 84 59 02 00 00    	je     c0028a10 <__adddf3+0x645>
c00287b7:	0d 00 00 00 80       	or     eax,0x80000000
c00287bc:	83 fb 1f             	cmp    ebx,0x1f
c00287bf:	7e 4d                	jle    c002880e <__adddf3+0x443>
c00287c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00287c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00287c7:	83 fb 3f             	cmp    ebx,0x3f
c00287ca:	0f 8f 40 02 00 00    	jg     c0028a10 <__adddf3+0x645>
c00287d0:	83 e3 1f             	and    ebx,0x1f
c00287d3:	89 d9                	mov    ecx,ebx
c00287d5:	89 c7                	mov    edi,eax
c00287d7:	d3 ef                	shr    edi,cl
c00287d9:	31 db                	xor    ebx,ebx
c00287db:	85 c9                	test   ecx,ecx
c00287dd:	74 12                	je     c00287f1 <__adddf3+0x426>
c00287df:	be 20 00 00 00       	mov    esi,0x20
c00287e4:	29 ce                	sub    esi,ecx
c00287e6:	89 f1                	mov    ecx,esi
c00287e8:	d3 e0                	shl    eax,cl
c00287ea:	31 db                	xor    ebx,ebx
c00287ec:	85 c0                	test   eax,eax
c00287ee:	0f 95 c3             	setne  bl
c00287f1:	31 c0                	xor    eax,eax
c00287f3:	85 d2                	test   edx,edx
c00287f5:	0f 95 c0             	setne  al
c00287f8:	09 c7                	or     edi,eax
c00287fa:	09 fb                	or     ebx,edi
c00287fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028802:	29 da                	sub    edx,ebx
c0028804:	83 de 00             	sbb    esi,0x0
c0028807:	89 f0                	mov    eax,esi
c0028809:	e9 d6 00 00 00       	jmp    c00288e4 <__adddf3+0x519>
c002880e:	be 20 00 00 00       	mov    esi,0x20
c0028813:	29 de                	sub    esi,ebx
c0028815:	89 c7                	mov    edi,eax
c0028817:	89 f1                	mov    ecx,esi
c0028819:	d3 e7                	shl    edi,cl
c002881b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002881e:	89 d7                	mov    edi,edx
c0028820:	88 d9                	mov    cl,bl
c0028822:	d3 ef                	shr    edi,cl
c0028824:	89 f9                	mov    ecx,edi
c0028826:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028829:	09 cf                	or     edi,ecx
c002882b:	88 d9                	mov    cl,bl
c002882d:	d3 e8                	shr    eax,cl
c002882f:	89 f1                	mov    ecx,esi
c0028831:	d3 e2                	shl    edx,cl
c0028833:	85 d2                	test   edx,edx
c0028835:	0f 95 c2             	setne  dl
c0028838:	0f b6 d2             	movzx  edx,dl
c002883b:	09 d7                	or     edi,edx
c002883d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028840:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028843:	29 fa                	sub    edx,edi
c0028845:	19 c6                	sbb    esi,eax
c0028847:	eb be                	jmp    c0028807 <__adddf3+0x43c>
c0028849:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002884c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002884f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028855:	75 6a                	jne    c00288c1 <__adddf3+0x4f6>
c0028857:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002885b:	75 58                	jne    c00288b5 <__adddf3+0x4ea>
c002885d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028860:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028863:	89 d6                	mov    esi,edx
c0028865:	09 c6                	or     esi,eax
c0028867:	75 17                	jne    c0028880 <__adddf3+0x4b5>
c0028869:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002886c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002886f:	85 db                	test   ebx,ebx
c0028871:	0f 85 99 01 00 00    	jne    c0028a10 <__adddf3+0x645>
c0028877:	31 ff                	xor    edi,edi
c0028879:	31 c9                	xor    ecx,ecx
c002887b:	e9 90 01 00 00       	jmp    c0028a10 <__adddf3+0x645>
c0028880:	85 db                	test   ebx,ebx
c0028882:	0f 84 88 01 00 00    	je     c0028a10 <__adddf3+0x645>
c0028888:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002888b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002888e:	85 c0                	test   eax,eax
c0028890:	79 10                	jns    c00288a2 <__adddf3+0x4d7>
c0028892:	31 c9                	xor    ecx,ecx
c0028894:	f7 da                	neg    edx
c0028896:	0f 95 c1             	setne  cl
c0028899:	01 c8                	add    eax,ecx
c002889b:	f7 d8                	neg    eax
c002889d:	e9 2f 01 00 00       	jmp    c00289d1 <__adddf3+0x606>
c00288a2:	31 ff                	xor    edi,edi
c00288a4:	31 c9                	xor    ecx,ecx
c00288a6:	89 c3                	mov    ebx,eax
c00288a8:	09 d3                	or     ebx,edx
c00288aa:	0f 84 60 01 00 00    	je     c0028a10 <__adddf3+0x645>
c00288b0:	e9 05 01 00 00       	jmp    c00289ba <__adddf3+0x5ef>
c00288b5:	31 ff                	xor    edi,edi
c00288b7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00288bc:	e9 4f 01 00 00       	jmp    c0028a10 <__adddf3+0x645>
c00288c1:	89 c1                	mov    ecx,eax
c00288c3:	89 d0                	mov    eax,edx
c00288c5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00288c8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00288cb:	89 ca                	mov    edx,ecx
c00288cd:	85 c9                	test   ecx,ecx
c00288cf:	79 2c                	jns    c00288fd <__adddf3+0x532>
c00288d1:	31 c9                	xor    ecx,ecx
c00288d3:	f7 d8                	neg    eax
c00288d5:	0f 95 c1             	setne  cl
c00288d8:	01 ca                	add    edx,ecx
c00288da:	f7 da                	neg    edx
c00288dc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00288df:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00288e2:	eb 19                	jmp    c00288fd <__adddf3+0x532>
c00288e4:	85 c0                	test   eax,eax
c00288e6:	0f 89 e5 00 00 00    	jns    c00289d1 <__adddf3+0x606>
c00288ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00288f1:	89 c1                	mov    ecx,eax
c00288f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288f6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00288f9:	89 d0                	mov    eax,edx
c00288fb:	89 ca                	mov    edx,ecx
c00288fd:	85 d2                	test   edx,edx
c00288ff:	74 59                	je     c002895a <__adddf3+0x58f>
c0028901:	0f bd da             	bsr    ebx,edx
c0028904:	83 f3 1f             	xor    ebx,0x1f
c0028907:	88 d9                	mov    cl,bl
c0028909:	d3 e2                	shl    edx,cl
c002890b:	bf 20 00 00 00       	mov    edi,0x20
c0028910:	89 f9                	mov    ecx,edi
c0028912:	29 d9                	sub    ecx,ebx
c0028914:	89 c6                	mov    esi,eax
c0028916:	d3 ee                	shr    esi,cl
c0028918:	09 d6                	or     esi,edx
c002891a:	88 d9                	mov    cl,bl
c002891c:	d3 e0                	shl    eax,cl
c002891e:	89 c2                	mov    edx,eax
c0028920:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028923:	25 ff 07 00 00       	and    eax,0x7ff
c0028928:	39 d8                	cmp    eax,ebx
c002892a:	7f 22                	jg     c002894e <__adddf3+0x583>
c002892c:	29 c3                	sub    ebx,eax
c002892e:	43                   	inc    ebx
c002892f:	88 d9                	mov    cl,bl
c0028931:	d3 ea                	shr    edx,cl
c0028933:	29 df                	sub    edi,ebx
c0028935:	89 f9                	mov    ecx,edi
c0028937:	89 f0                	mov    eax,esi
c0028939:	d3 e0                	shl    eax,cl
c002893b:	09 c2                	or     edx,eax
c002893d:	89 f0                	mov    eax,esi
c002893f:	88 d9                	mov    cl,bl
c0028941:	d3 e8                	shr    eax,cl
c0028943:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028946:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002894c:	eb 6f                	jmp    c00289bd <__adddf3+0x5f2>
c002894e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028951:	29 d8                	sub    eax,ebx
c0028953:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028956:	89 f0                	mov    eax,esi
c0028958:	eb 59                	jmp    c00289b3 <__adddf3+0x5e8>
c002895a:	85 c0                	test   eax,eax
c002895c:	74 6a                	je     c00289c8 <__adddf3+0x5fd>
c002895e:	0f bd c8             	bsr    ecx,eax
c0028961:	83 f1 1f             	xor    ecx,0x1f
c0028964:	d3 e0                	shl    eax,cl
c0028966:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028969:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002896f:	83 c1 20             	add    ecx,0x20
c0028972:	39 cb                	cmp    ebx,ecx
c0028974:	7f 35                	jg     c00289ab <__adddf3+0x5e0>
c0028976:	29 d9                	sub    ecx,ebx
c0028978:	8d 71 01             	lea    esi,[ecx+0x1]
c002897b:	83 fe 1f             	cmp    esi,0x1f
c002897e:	7e 09                	jle    c0028989 <__adddf3+0x5be>
c0028980:	83 e9 1f             	sub    ecx,0x1f
c0028983:	d3 e8                	shr    eax,cl
c0028985:	89 c3                	mov    ebx,eax
c0028987:	eb 11                	jmp    c002899a <__adddf3+0x5cf>
c0028989:	b9 20 00 00 00       	mov    ecx,0x20
c002898e:	29 f1                	sub    ecx,esi
c0028990:	89 c3                	mov    ebx,eax
c0028992:	d3 e3                	shl    ebx,cl
c0028994:	89 f1                	mov    ecx,esi
c0028996:	d3 e8                	shr    eax,cl
c0028998:	89 c2                	mov    edx,eax
c002899a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002899d:	25 00 f8 ff ff       	and    eax,0xfffff800
c00289a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00289a5:	89 d0                	mov    eax,edx
c00289a7:	89 da                	mov    edx,ebx
c00289a9:	eb 26                	jmp    c00289d1 <__adddf3+0x606>
c00289ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00289ae:	29 cf                	sub    edi,ecx
c00289b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289b3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00289b8:	eb 17                	jmp    c00289d1 <__adddf3+0x606>
c00289ba:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00289bd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289c0:	eb 0f                	jmp    c00289d1 <__adddf3+0x606>
c00289c2:	31 d2                	xor    edx,edx
c00289c4:	31 c0                	xor    eax,eax
c00289c6:	eb 09                	jmp    c00289d1 <__adddf3+0x606>
c00289c8:	89 c2                	mov    edx,eax
c00289ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00289d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289d4:	c1 e1 14             	shl    ecx,0x14
c00289d7:	89 c3                	mov    ebx,eax
c00289d9:	c1 eb 0b             	shr    ebx,0xb
c00289dc:	09 d9                	or     ecx,ebx
c00289de:	89 d3                	mov    ebx,edx
c00289e0:	c1 eb 0b             	shr    ebx,0xb
c00289e3:	c1 e0 15             	shl    eax,0x15
c00289e6:	09 d8                	or     eax,ebx
c00289e8:	89 c7                	mov    edi,eax
c00289ea:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00289f0:	0f 95 c0             	setne  al
c00289f3:	89 c6                	mov    esi,eax
c00289f5:	09 f3                	or     ebx,esi
c00289f7:	83 e3 01             	and    ebx,0x1
c00289fa:	c1 ea 0a             	shr    edx,0xa
c00289fd:	21 da                	and    edx,ebx
c00289ff:	89 f8                	mov    eax,edi
c0028a01:	01 d0                	add    eax,edx
c0028a03:	83 d1 00             	adc    ecx,0x0
c0028a06:	89 c7                	mov    edi,eax
c0028a08:	eb 06                	jmp    c0028a10 <__adddf3+0x645>
c0028a0a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028a0d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028a10:	89 f8                	mov    eax,edi
c0028a12:	89 ca                	mov    edx,ecx
c0028a14:	83 c4 24             	add    esp,0x24
c0028a17:	5b                   	pop    ebx
c0028a18:	5e                   	pop    esi
c0028a19:	5f                   	pop    edi
c0028a1a:	5d                   	pop    ebp
c0028a1b:	c3                   	ret    

c0028a1c <__subdf3>:
c0028a1c:	55                   	push   ebp
c0028a1d:	89 e5                	mov    ebp,esp
c0028a1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028a22:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028a25:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028a2b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0028a2e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028a31:	5d                   	pop    ebp
c0028a32:	e9 94 f9 ff ff       	jmp    c00283cb <__adddf3>

c0028a37 <__negdf2>:
c0028a37:	55                   	push   ebp
c0028a38:	89 e5                	mov    ebp,esp
c0028a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028a3d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028a40:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028a46:	5d                   	pop    ebp
c0028a47:	c3                   	ret    

c0028a48 <__muldf3>:
c0028a48:	55                   	push   ebp
c0028a49:	89 e5                	mov    ebp,esp
c0028a4b:	57                   	push   edi
c0028a4c:	56                   	push   esi
c0028a4d:	53                   	push   ebx
c0028a4e:	83 ec 24             	sub    esp,0x24
c0028a51:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028a54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028a57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028a5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028a5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028a60:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028a63:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a66:	89 c8                	mov    eax,ecx
c0028a68:	c1 f8 14             	sar    eax,0x14
c0028a6b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028a6e:	89 f8                	mov    eax,edi
c0028a70:	89 fb                	mov    ebx,edi
c0028a72:	c1 e3 0b             	shl    ebx,0xb
c0028a75:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028a78:	c1 e1 0b             	shl    ecx,0xb
c0028a7b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028a81:	c1 e8 15             	shr    eax,0x15
c0028a84:	09 c1                	or     ecx,eax
c0028a86:	89 d6                	mov    esi,edx
c0028a88:	89 d0                	mov    eax,edx
c0028a8a:	c1 f8 14             	sar    eax,0x14
c0028a8d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028a90:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028a93:	89 c3                	mov    ebx,eax
c0028a95:	c1 e3 0b             	shl    ebx,0xb
c0028a98:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0028a9b:	c1 e6 0b             	shl    esi,0xb
c0028a9e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028aa4:	c1 e8 15             	shr    eax,0x15
c0028aa7:	09 c6                	or     esi,eax
c0028aa9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028aac:	25 ff 07 00 00       	and    eax,0x7ff
c0028ab1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028ab4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028ab7:	25 ff 07 00 00       	and    eax,0x7ff
c0028abc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028abf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028ac2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028ac5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0028acc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028acf:	40                   	inc    eax
c0028ad0:	a9 fe 07 00 00       	test   eax,0x7fe
c0028ad5:	0f 85 8d 00 00 00    	jne    c0028b68 <__muldf3+0x120>
c0028adb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028ade:	09 c8                	or     eax,ecx
c0028ae0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028ae4:	74 44                	je     c0028b2a <__muldf3+0xe2>
c0028ae6:	85 c0                	test   eax,eax
c0028ae8:	0f 85 31 02 00 00    	jne    c0028d1f <__muldf3+0x2d7>
c0028aee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028af1:	40                   	inc    eax
c0028af2:	a9 fe 07 00 00       	test   eax,0x7fe
c0028af7:	75 13                	jne    c0028b0c <__muldf3+0xc4>
c0028af9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0028afc:	09 f1                	or     ecx,esi
c0028afe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028b02:	74 22                	je     c0028b26 <__muldf3+0xde>
c0028b04:	85 c9                	test   ecx,ecx
c0028b06:	0f 85 0d 02 00 00    	jne    c0028d19 <__muldf3+0x2d1>
c0028b0c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028b10:	0f 89 09 02 00 00    	jns    c0028d1f <__muldf3+0x2d7>
c0028b16:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028b19:	05 00 00 00 80       	add    eax,0x80000000
c0028b1e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028b21:	e9 f9 01 00 00       	jmp    c0028d1f <__muldf3+0x2d7>
c0028b26:	85 c9                	test   ecx,ecx
c0028b28:	eb 2e                	jmp    c0028b58 <__muldf3+0x110>
c0028b2a:	85 c0                	test   eax,eax
c0028b2c:	74 20                	je     c0028b4e <__muldf3+0x106>
c0028b2e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028b31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028b34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028b37:	c1 ef 1f             	shr    edi,0x1f
c0028b3a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0028b3d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028b40:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028b43:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b46:	09 f9                	or     ecx,edi
c0028b48:	78 1e                	js     c0028b68 <__muldf3+0x120>
c0028b4a:	89 c3                	mov    ebx,eax
c0028b4c:	eb e0                	jmp    c0028b2e <__muldf3+0xe6>
c0028b4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028b51:	f7 d0                	not    eax
c0028b53:	a9 ff 07 00 00       	test   eax,0x7ff
c0028b58:	75 b2                	jne    c0028b0c <__muldf3+0xc4>
c0028b5a:	31 ff                	xor    edi,edi
c0028b5c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028b63:	e9 b7 01 00 00       	jmp    c0028d1f <__muldf3+0x2d7>
c0028b68:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028b6b:	40                   	inc    eax
c0028b6c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028b71:	75 57                	jne    c0028bca <__muldf3+0x182>
c0028b73:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028b76:	09 f0                	or     eax,esi
c0028b78:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028b7c:	74 23                	je     c0028ba1 <__muldf3+0x159>
c0028b7e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028b82:	0f 89 91 01 00 00    	jns    c0028d19 <__muldf3+0x2d1>
c0028b88:	85 c0                	test   eax,eax
c0028b8a:	0f 85 89 01 00 00    	jne    c0028d19 <__muldf3+0x2d1>
c0028b90:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028b93:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028b99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028b9c:	e9 7e 01 00 00       	jmp    c0028d1f <__muldf3+0x2d7>
c0028ba1:	85 c0                	test   eax,eax
c0028ba3:	75 0c                	jne    c0028bb1 <__muldf3+0x169>
c0028ba5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028ba9:	0f 89 6a 01 00 00    	jns    c0028d19 <__muldf3+0x2d1>
c0028baf:	eb df                	jmp    c0028b90 <__muldf3+0x148>
c0028bb1:	01 f6                	add    esi,esi
c0028bb3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028bb6:	c1 ea 1f             	shr    edx,0x1f
c0028bb9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028bbc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0028bbf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028bc2:	09 d6                	or     esi,edx
c0028bc4:	78 04                	js     c0028bca <__muldf3+0x182>
c0028bc6:	89 c3                	mov    ebx,eax
c0028bc8:	eb e7                	jmp    c0028bb1 <__muldf3+0x169>
c0028bca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028bd0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028bd6:	89 c8                	mov    eax,ecx
c0028bd8:	f7 e6                	mul    esi
c0028bda:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0028bdd:	89 c7                	mov    edi,eax
c0028bdf:	89 c8                	mov    eax,ecx
c0028be1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028be4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028be7:	89 c1                	mov    ecx,eax
c0028be9:	89 f0                	mov    eax,esi
c0028beb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0028bee:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028bf1:	89 c6                	mov    esi,eax
c0028bf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028bf6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028bf9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028bfc:	31 c0                	xor    eax,eax
c0028bfe:	01 f1                	add    ecx,esi
c0028c00:	0f 92 c0             	setb   al
c0028c03:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028c06:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028c09:	83 d6 00             	adc    esi,0x0
c0028c0c:	01 c7                	add    edi,eax
c0028c0e:	83 d6 00             	adc    esi,0x0
c0028c11:	01 ca                	add    edx,ecx
c0028c13:	0f 92 c1             	setb   cl
c0028c16:	0f b6 c9             	movzx  ecx,cl
c0028c19:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0028c1c:	83 d6 00             	adc    esi,0x0
c0028c1f:	01 cf                	add    edi,ecx
c0028c21:	83 d6 00             	adc    esi,0x0
c0028c24:	31 c9                	xor    ecx,ecx
c0028c26:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028c29:	0f 95 c1             	setne  cl
c0028c2c:	09 cf                	or     edi,ecx
c0028c2e:	85 f6                	test   esi,esi
c0028c30:	78 0c                	js     c0028c3e <__muldf3+0x1f6>
c0028c32:	01 f6                	add    esi,esi
c0028c34:	89 f8                	mov    eax,edi
c0028c36:	c1 e8 1f             	shr    eax,0x1f
c0028c39:	09 c6                	or     esi,eax
c0028c3b:	01 ff                	add    edi,edi
c0028c3d:	4b                   	dec    ebx
c0028c3e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028c44:	0f 8f 85 00 00 00    	jg     c0028ccf <__muldf3+0x287>
c0028c4a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028c50:	85 db                	test   ebx,ebx
c0028c52:	0f 8f 84 00 00 00    	jg     c0028cdc <__muldf3+0x294>
c0028c58:	83 fb cc             	cmp    ebx,0xffffffcc
c0028c5b:	7c 79                	jl     c0028cd6 <__muldf3+0x28e>
c0028c5d:	ba 01 00 00 00       	mov    edx,0x1
c0028c62:	29 da                	sub    edx,ebx
c0028c64:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028c6a:	83 fa 1f             	cmp    edx,0x1f
c0028c6d:	7e 30                	jle    c0028c9f <__muldf3+0x257>
c0028c6f:	83 fa 20             	cmp    edx,0x20
c0028c72:	75 0b                	jne    c0028c7f <__muldf3+0x237>
c0028c74:	31 c0                	xor    eax,eax
c0028c76:	85 ff                	test   edi,edi
c0028c78:	0f 95 c0             	setne  al
c0028c7b:	89 c7                	mov    edi,eax
c0028c7d:	eb 1a                	jmp    c0028c99 <__muldf3+0x251>
c0028c7f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028c82:	89 f0                	mov    eax,esi
c0028c84:	d3 e0                	shl    eax,cl
c0028c86:	09 f8                	or     eax,edi
c0028c88:	0f 95 c0             	setne  al
c0028c8b:	0f b6 c0             	movzx  eax,al
c0028c8e:	89 c7                	mov    edi,eax
c0028c90:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028c95:	29 d9                	sub    ecx,ebx
c0028c97:	d3 ee                	shr    esi,cl
c0028c99:	09 f7                	or     edi,esi
c0028c9b:	31 db                	xor    ebx,ebx
c0028c9d:	eb 3b                	jmp    c0028cda <__muldf3+0x292>
c0028c9f:	83 c3 1f             	add    ebx,0x1f
c0028ca2:	89 f0                	mov    eax,esi
c0028ca4:	88 d9                	mov    cl,bl
c0028ca6:	d3 e0                	shl    eax,cl
c0028ca8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028cab:	89 f8                	mov    eax,edi
c0028cad:	88 d1                	mov    cl,dl
c0028caf:	d3 e8                	shr    eax,cl
c0028cb1:	89 c1                	mov    ecx,eax
c0028cb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028cb6:	09 c8                	or     eax,ecx
c0028cb8:	88 d9                	mov    cl,bl
c0028cba:	d3 e7                	shl    edi,cl
c0028cbc:	31 db                	xor    ebx,ebx
c0028cbe:	85 ff                	test   edi,edi
c0028cc0:	0f 95 c3             	setne  bl
c0028cc3:	89 df                	mov    edi,ebx
c0028cc5:	09 c7                	or     edi,eax
c0028cc7:	88 d1                	mov    cl,dl
c0028cc9:	d3 ee                	shr    esi,cl
c0028ccb:	31 db                	xor    ebx,ebx
c0028ccd:	eb 0d                	jmp    c0028cdc <__muldf3+0x294>
c0028ccf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028cd4:	eb 02                	jmp    c0028cd8 <__muldf3+0x290>
c0028cd6:	31 db                	xor    ebx,ebx
c0028cd8:	31 ff                	xor    edi,edi
c0028cda:	31 f6                	xor    esi,esi
c0028cdc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028cdf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028ce2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028ce7:	09 c3                	or     ebx,eax
c0028ce9:	c1 e3 14             	shl    ebx,0x14
c0028cec:	89 f0                	mov    eax,esi
c0028cee:	c1 e8 0b             	shr    eax,0xb
c0028cf1:	09 c3                	or     ebx,eax
c0028cf3:	89 f8                	mov    eax,edi
c0028cf5:	c1 e8 0b             	shr    eax,0xb
c0028cf8:	c1 e6 15             	shl    esi,0x15
c0028cfb:	09 c6                	or     esi,eax
c0028cfd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028d03:	0f 95 c1             	setne  cl
c0028d06:	09 c8                	or     eax,ecx
c0028d08:	83 e0 01             	and    eax,0x1
c0028d0b:	c1 ef 0a             	shr    edi,0xa
c0028d0e:	21 c7                	and    edi,eax
c0028d10:	01 f7                	add    edi,esi
c0028d12:	83 d3 00             	adc    ebx,0x0
c0028d15:	89 da                	mov    edx,ebx
c0028d17:	eb 03                	jmp    c0028d1c <__muldf3+0x2d4>
c0028d19:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028d1c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d1f:	89 f8                	mov    eax,edi
c0028d21:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028d24:	83 c4 24             	add    esp,0x24
c0028d27:	5b                   	pop    ebx
c0028d28:	5e                   	pop    esi
c0028d29:	5f                   	pop    edi
c0028d2a:	5d                   	pop    ebp
c0028d2b:	c3                   	ret    

c0028d2c <__divdf3>:
c0028d2c:	55                   	push   ebp
c0028d2d:	89 e5                	mov    ebp,esp
c0028d2f:	57                   	push   edi
c0028d30:	56                   	push   esi
c0028d31:	53                   	push   ebx
c0028d32:	83 ec 2c             	sub    esp,0x2c
c0028d35:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028d38:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028d3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028d3e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028d41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028d44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028d47:	89 ce                	mov    esi,ecx
c0028d49:	89 c8                	mov    eax,ecx
c0028d4b:	c1 f8 14             	sar    eax,0x14
c0028d4e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028d51:	89 f8                	mov    eax,edi
c0028d53:	89 fb                	mov    ebx,edi
c0028d55:	c1 e3 0b             	shl    ebx,0xb
c0028d58:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0028d5b:	c1 e6 0b             	shl    esi,0xb
c0028d5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028d64:	c1 e8 15             	shr    eax,0x15
c0028d67:	09 c6                	or     esi,eax
c0028d69:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028d6c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028d6f:	89 c2                	mov    edx,eax
c0028d71:	c1 fa 14             	sar    edx,0x14
c0028d74:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028d77:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028d7a:	89 de                	mov    esi,ebx
c0028d7c:	c1 e6 0b             	shl    esi,0xb
c0028d7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028d82:	c1 e0 0b             	shl    eax,0xb
c0028d85:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d8a:	c1 eb 15             	shr    ebx,0x15
c0028d8d:	09 d8                	or     eax,ebx
c0028d8f:	89 c2                	mov    edx,eax
c0028d91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028d94:	25 ff 07 00 00       	and    eax,0x7ff
c0028d99:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028d9c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028d9f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028da5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028da8:	29 d8                	sub    eax,ebx
c0028daa:	05 ff 03 00 00       	add    eax,0x3ff
c0028daf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028db2:	46                   	inc    esi
c0028db3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028db9:	0f 85 a5 00 00 00    	jne    c0028e64 <__divdf3+0x138>
c0028dbf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028dc2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028dc5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028dc9:	74 2a                	je     c0028df5 <__divdf3+0xc9>
c0028dcb:	85 f6                	test   esi,esi
c0028dcd:	0f 85 cc 02 00 00    	jne    c002909f <__divdf3+0x373>
c0028dd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028dd6:	40                   	inc    eax
c0028dd7:	a9 fe 07 00 00       	test   eax,0x7fe
c0028ddc:	75 26                	jne    c0028e04 <__divdf3+0xd8>
c0028dde:	85 db                	test   ebx,ebx
c0028de0:	74 22                	je     c0028e04 <__divdf3+0xd8>
c0028de2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028de5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028de8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028deb:	09 d0                	or     eax,edx
c0028ded:	0f 85 ac 02 00 00    	jne    c002909f <__divdf3+0x373>
c0028df3:	eb 63                	jmp    c0028e58 <__divdf3+0x12c>
c0028df5:	85 f6                	test   esi,esi
c0028df7:	75 22                	jne    c0028e1b <__divdf3+0xef>
c0028df9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028dfc:	40                   	inc    eax
c0028dfd:	a9 fe 07 00 00       	test   eax,0x7fe
c0028e02:	74 36                	je     c0028e3a <__divdf3+0x10e>
c0028e04:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028e08:	0f 89 91 02 00 00    	jns    c002909f <__divdf3+0x373>
c0028e0e:	89 f8                	mov    eax,edi
c0028e10:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028e16:	e9 80 02 00 00       	jmp    c002909b <__divdf3+0x36f>
c0028e1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028e1e:	01 f6                	add    esi,esi
c0028e20:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028e23:	c1 ef 1f             	shr    edi,0x1f
c0028e26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028e29:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028e2c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028e2f:	09 f7                	or     edi,esi
c0028e31:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028e34:	78 2e                	js     c0028e64 <__divdf3+0x138>
c0028e36:	89 c8                	mov    eax,ecx
c0028e38:	eb e1                	jmp    c0028e1b <__divdf3+0xef>
c0028e3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028e3d:	09 d0                	or     eax,edx
c0028e3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028e43:	74 0f                	je     c0028e54 <__divdf3+0x128>
c0028e45:	85 c0                	test   eax,eax
c0028e47:	74 bb                	je     c0028e04 <__divdf3+0xd8>
c0028e49:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028e4c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028e4f:	e9 4b 02 00 00       	jmp    c002909f <__divdf3+0x373>
c0028e54:	85 c0                	test   eax,eax
c0028e56:	75 ac                	jne    c0028e04 <__divdf3+0xd8>
c0028e58:	31 ff                	xor    edi,edi
c0028e5a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028e5f:	e9 3b 02 00 00       	jmp    c002909f <__divdf3+0x373>
c0028e64:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028e67:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028e6a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028e70:	75 6b                	jne    c0028edd <__divdf3+0x1b1>
c0028e72:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028e75:	09 d6                	or     esi,edx
c0028e77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028e7b:	74 28                	je     c0028ea5 <__divdf3+0x179>
c0028e7d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028e80:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028e83:	85 f6                	test   esi,esi
c0028e85:	0f 85 14 02 00 00    	jne    c002909f <__divdf3+0x373>
c0028e8b:	31 ff                	xor    edi,edi
c0028e8d:	31 c9                	xor    ecx,ecx
c0028e8f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028e92:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028e95:	0f 89 04 02 00 00    	jns    c002909f <__divdf3+0x373>
c0028e9b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028ea0:	e9 fa 01 00 00       	jmp    c002909f <__divdf3+0x373>
c0028ea5:	85 f6                	test   esi,esi
c0028ea7:	75 1b                	jne    c0028ec4 <__divdf3+0x198>
c0028ea9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028eac:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028eaf:	25 00 00 00 80       	and    eax,0x80000000
c0028eb4:	31 c9                	xor    ecx,ecx
c0028eb6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028ebb:	89 cf                	mov    edi,ecx
c0028ebd:	89 c1                	mov    ecx,eax
c0028ebf:	e9 db 01 00 00       	jmp    c002909f <__divdf3+0x373>
c0028ec4:	01 d2                	add    edx,edx
c0028ec6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028ec9:	c1 eb 1f             	shr    ebx,0x1f
c0028ecc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028ecf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028ed2:	8d 48 01             	lea    ecx,[eax+0x1]
c0028ed5:	09 da                	or     edx,ebx
c0028ed7:	78 04                	js     c0028edd <__divdf3+0x1b1>
c0028ed9:	89 c8                	mov    eax,ecx
c0028edb:	eb e7                	jmp    c0028ec4 <__divdf3+0x198>
c0028edd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028ee0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028ee6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028eec:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028eef:	39 d6                	cmp    esi,edx
c0028ef1:	77 0d                	ja     c0028f00 <__divdf3+0x1d4>
c0028ef3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028ef6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028ef9:	72 1b                	jb     c0028f16 <__divdf3+0x1ea>
c0028efb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028efe:	75 16                	jne    c0028f16 <__divdf3+0x1ea>
c0028f00:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028f03:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028f06:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028f09:	83 de 00             	sbb    esi,0x0
c0028f0c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028f0f:	ba 01 00 00 00       	mov    edx,0x1
c0028f14:	eb 02                	jmp    c0028f18 <__divdf3+0x1ec>
c0028f16:	31 d2                	xor    edx,edx
c0028f18:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028f1f:	31 ff                	xor    edi,edi
c0028f21:	01 ff                	add    edi,edi
c0028f23:	89 d1                	mov    ecx,edx
c0028f25:	c1 e9 1f             	shr    ecx,0x1f
c0028f28:	09 cf                	or     edi,ecx
c0028f2a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028f2d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028f30:	89 da                	mov    edx,ebx
c0028f32:	89 f3                	mov    ebx,esi
c0028f34:	8d 34 36             	lea    esi,[esi+esi*1]
c0028f37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028f3a:	c1 e9 1f             	shr    ecx,0x1f
c0028f3d:	09 ce                	or     esi,ecx
c0028f3f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028f42:	01 c9                	add    ecx,ecx
c0028f44:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028f47:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028f4a:	85 db                	test   ebx,ebx
c0028f4c:	78 29                	js     c0028f77 <__divdf3+0x24b>
c0028f4e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028f51:	72 07                	jb     c0028f5a <__divdf3+0x22e>
c0028f53:	75 3c                	jne    c0028f91 <__divdf3+0x265>
c0028f55:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028f58:	77 37                	ja     c0028f91 <__divdf3+0x265>
c0028f5a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028f5d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028f60:	31 d2                	xor    edx,edx
c0028f62:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028f65:	0f 97 c2             	seta   dl
c0028f68:	29 d6                	sub    esi,edx
c0028f6a:	89 d9                	mov    ecx,ebx
c0028f6c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028f6f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028f72:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028f75:	eb 17                	jmp    c0028f8e <__divdf3+0x262>
c0028f77:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028f7a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028f7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028f80:	0f 97 c1             	seta   cl
c0028f83:	0f b6 c9             	movzx  ecx,cl
c0028f86:	29 ce                	sub    esi,ecx
c0028f88:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028f8b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028f8e:	83 ca 01             	or     edx,0x1
c0028f91:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028f94:	75 8b                	jne    c0028f21 <__divdf3+0x1f5>
c0028f96:	c1 e7 09             	shl    edi,0x9
c0028f99:	89 d1                	mov    ecx,edx
c0028f9b:	c1 e9 17             	shr    ecx,0x17
c0028f9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028fa1:	09 f3                	or     ebx,esi
c0028fa3:	0f 95 c3             	setne  bl
c0028fa6:	0f b6 db             	movzx  ebx,bl
c0028fa9:	c1 e2 09             	shl    edx,0x9
c0028fac:	09 d3                	or     ebx,edx
c0028fae:	89 ca                	mov    edx,ecx
c0028fb0:	09 fa                	or     edx,edi
c0028fb2:	78 0c                	js     c0028fc0 <__divdf3+0x294>
c0028fb4:	01 d2                	add    edx,edx
c0028fb6:	89 d9                	mov    ecx,ebx
c0028fb8:	c1 e9 1f             	shr    ecx,0x1f
c0028fbb:	09 ca                	or     edx,ecx
c0028fbd:	01 db                	add    ebx,ebx
c0028fbf:	48                   	dec    eax
c0028fc0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028fc5:	0f 8f 83 00 00 00    	jg     c002904e <__divdf3+0x322>
c0028fcb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028fd1:	85 c0                	test   eax,eax
c0028fd3:	0f 8f 82 00 00 00    	jg     c002905b <__divdf3+0x32f>
c0028fd9:	83 f8 cc             	cmp    eax,0xffffffcc
c0028fdc:	7c 77                	jl     c0029055 <__divdf3+0x329>
c0028fde:	be 01 00 00 00       	mov    esi,0x1
c0028fe3:	29 c6                	sub    esi,eax
c0028fe5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028feb:	83 fe 1f             	cmp    esi,0x1f
c0028fee:	7e 2f                	jle    c002901f <__divdf3+0x2f3>
c0028ff0:	83 fe 20             	cmp    esi,0x20
c0028ff3:	75 0a                	jne    c0028fff <__divdf3+0x2d3>
c0028ff5:	85 db                	test   ebx,ebx
c0028ff7:	0f 95 c3             	setne  bl
c0028ffa:	0f b6 db             	movzx  ebx,bl
c0028ffd:	eb 1a                	jmp    c0029019 <__divdf3+0x2ed>
c0028fff:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0029002:	89 d7                	mov    edi,edx
c0029004:	d3 e7                	shl    edi,cl
c0029006:	89 f9                	mov    ecx,edi
c0029008:	09 d9                	or     ecx,ebx
c002900a:	0f 95 c3             	setne  bl
c002900d:	0f b6 db             	movzx  ebx,bl
c0029010:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0029015:	29 c1                	sub    ecx,eax
c0029017:	d3 ea                	shr    edx,cl
c0029019:	09 d3                	or     ebx,edx
c002901b:	31 c0                	xor    eax,eax
c002901d:	eb 3a                	jmp    c0029059 <__divdf3+0x32d>
c002901f:	83 c0 1f             	add    eax,0x1f
c0029022:	89 d7                	mov    edi,edx
c0029024:	88 c1                	mov    cl,al
c0029026:	d3 e7                	shl    edi,cl
c0029028:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002902b:	89 df                	mov    edi,ebx
c002902d:	89 f1                	mov    ecx,esi
c002902f:	d3 ef                	shr    edi,cl
c0029031:	89 f9                	mov    ecx,edi
c0029033:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0029036:	09 cf                	or     edi,ecx
c0029038:	88 c1                	mov    cl,al
c002903a:	d3 e3                	shl    ebx,cl
c002903c:	85 db                	test   ebx,ebx
c002903e:	0f 95 c3             	setne  bl
c0029041:	0f b6 db             	movzx  ebx,bl
c0029044:	09 fb                	or     ebx,edi
c0029046:	89 f1                	mov    ecx,esi
c0029048:	d3 ea                	shr    edx,cl
c002904a:	31 c0                	xor    eax,eax
c002904c:	eb 0d                	jmp    c002905b <__divdf3+0x32f>
c002904e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0029053:	eb 02                	jmp    c0029057 <__divdf3+0x32b>
c0029055:	31 c0                	xor    eax,eax
c0029057:	31 db                	xor    ebx,ebx
c0029059:	31 d2                	xor    edx,edx
c002905b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002905e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0029061:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0029067:	09 c8                	or     eax,ecx
c0029069:	c1 e0 14             	shl    eax,0x14
c002906c:	89 d1                	mov    ecx,edx
c002906e:	c1 e9 0b             	shr    ecx,0xb
c0029071:	09 c8                	or     eax,ecx
c0029073:	89 c6                	mov    esi,eax
c0029075:	89 d9                	mov    ecx,ebx
c0029077:	c1 e9 0b             	shr    ecx,0xb
c002907a:	c1 e2 15             	shl    edx,0x15
c002907d:	09 ca                	or     edx,ecx
c002907f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0029085:	0f 95 c0             	setne  al
c0029088:	09 c1                	or     ecx,eax
c002908a:	83 e1 01             	and    ecx,0x1
c002908d:	c1 eb 0a             	shr    ebx,0xa
c0029090:	21 cb                	and    ebx,ecx
c0029092:	01 d3                	add    ebx,edx
c0029094:	89 d8                	mov    eax,ebx
c0029096:	83 d6 00             	adc    esi,0x0
c0029099:	89 f2                	mov    edx,esi
c002909b:	89 c7                	mov    edi,eax
c002909d:	89 d1                	mov    ecx,edx
c002909f:	89 f8                	mov    eax,edi
c00290a1:	89 ca                	mov    edx,ecx
c00290a3:	83 c4 2c             	add    esp,0x2c
c00290a6:	5b                   	pop    ebx
c00290a7:	5e                   	pop    esi
c00290a8:	5f                   	pop    edi
c00290a9:	5d                   	pop    ebp
c00290aa:	c3                   	ret    

c00290ab <__floatsidf>:
c00290ab:	55                   	push   ebp
c00290ac:	89 e5                	mov    ebp,esp
c00290ae:	56                   	push   esi
c00290af:	53                   	push   ebx
c00290b0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00290b3:	85 db                	test   ebx,ebx
c00290b5:	7e 15                	jle    c00290cc <__floatsidf+0x21>
c00290b7:	0f bd cb             	bsr    ecx,ebx
c00290ba:	83 f1 1f             	xor    ecx,0x1f
c00290bd:	d3 e3                	shl    ebx,cl
c00290bf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00290c5:	b8 1e 04 00 00       	mov    eax,0x41e
c00290ca:	eb 21                	jmp    c00290ed <__floatsidf+0x42>
c00290cc:	b8 00 00 00 00       	mov    eax,0x0
c00290d1:	ba 00 00 00 00       	mov    edx,0x0
c00290d6:	74 2a                	je     c0029102 <__floatsidf+0x57>
c00290d8:	f7 db                	neg    ebx
c00290da:	0f bd cb             	bsr    ecx,ebx
c00290dd:	83 f1 1f             	xor    ecx,0x1f
c00290e0:	d3 e3                	shl    ebx,cl
c00290e2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00290e8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00290ed:	29 c8                	sub    eax,ecx
c00290ef:	c1 e0 14             	shl    eax,0x14
c00290f2:	89 c1                	mov    ecx,eax
c00290f4:	89 de                	mov    esi,ebx
c00290f6:	c1 ee 0b             	shr    esi,0xb
c00290f9:	09 f1                	or     ecx,esi
c00290fb:	89 ca                	mov    edx,ecx
c00290fd:	c1 e3 15             	shl    ebx,0x15
c0029100:	89 d8                	mov    eax,ebx
c0029102:	5b                   	pop    ebx
c0029103:	5e                   	pop    esi
c0029104:	5d                   	pop    ebp
c0029105:	c3                   	ret    

c0029106 <__floatunsidf>:
c0029106:	55                   	push   ebp
c0029107:	89 e5                	mov    ebp,esp
c0029109:	56                   	push   esi
c002910a:	53                   	push   ebx
c002910b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002910e:	85 db                	test   ebx,ebx
c0029110:	74 2a                	je     c002913c <__floatunsidf+0x36>
c0029112:	0f bd cb             	bsr    ecx,ebx
c0029115:	83 f1 1f             	xor    ecx,0x1f
c0029118:	d3 e3                	shl    ebx,cl
c002911a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0029120:	b8 1e 04 00 00       	mov    eax,0x41e
c0029125:	29 c8                	sub    eax,ecx
c0029127:	c1 e0 14             	shl    eax,0x14
c002912a:	89 c1                	mov    ecx,eax
c002912c:	89 de                	mov    esi,ebx
c002912e:	c1 ee 0b             	shr    esi,0xb
c0029131:	09 f1                	or     ecx,esi
c0029133:	89 ca                	mov    edx,ecx
c0029135:	c1 e3 15             	shl    ebx,0x15
c0029138:	89 d8                	mov    eax,ebx
c002913a:	eb 04                	jmp    c0029140 <__floatunsidf+0x3a>
c002913c:	31 c0                	xor    eax,eax
c002913e:	31 d2                	xor    edx,edx
c0029140:	5b                   	pop    ebx
c0029141:	5e                   	pop    esi
c0029142:	5d                   	pop    ebp
c0029143:	c3                   	ret    

c0029144 <__fixdfsi>:
c0029144:	55                   	push   ebp
c0029145:	89 e5                	mov    ebp,esp
c0029147:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002914a:	89 d1                	mov    ecx,edx
c002914c:	c1 e1 0b             	shl    ecx,0xb
c002914f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0029158:	c1 e8 15             	shr    eax,0x15
c002915b:	09 c1                	or     ecx,eax
c002915d:	c1 fa 14             	sar    edx,0x14
c0029160:	78 1f                	js     c0029181 <__fixdfsi+0x3d>
c0029162:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0029168:	31 c0                	xor    eax,eax
c002916a:	83 fa 1e             	cmp    edx,0x1e
c002916d:	77 40                	ja     c00291af <__fixdfsi+0x6b>
c002916f:	89 c8                	mov    eax,ecx
c0029171:	0d 00 00 00 80       	or     eax,0x80000000
c0029176:	b9 1f 00 00 00       	mov    ecx,0x1f
c002917b:	29 d1                	sub    ecx,edx
c002917d:	d3 e8                	shr    eax,cl
c002917f:	eb 2e                	jmp    c00291af <__fixdfsi+0x6b>
c0029181:	31 c0                	xor    eax,eax
c0029183:	81 c2 01 04 00 00    	add    edx,0x401
c0029189:	78 24                	js     c00291af <__fixdfsi+0x6b>
c002918b:	83 fa 1e             	cmp    edx,0x1e
c002918e:	7e 09                	jle    c0029199 <__fixdfsi+0x55>
c0029190:	83 fa 1f             	cmp    edx,0x1f
c0029193:	75 18                	jne    c00291ad <__fixdfsi+0x69>
c0029195:	85 c9                	test   ecx,ecx
c0029197:	75 14                	jne    c00291ad <__fixdfsi+0x69>
c0029199:	89 c8                	mov    eax,ecx
c002919b:	0d 00 00 00 80       	or     eax,0x80000000
c00291a0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00291a5:	29 d1                	sub    ecx,edx
c00291a7:	d3 e8                	shr    eax,cl
c00291a9:	f7 d8                	neg    eax
c00291ab:	eb 02                	jmp    c00291af <__fixdfsi+0x6b>
c00291ad:	31 c0                	xor    eax,eax
c00291af:	5d                   	pop    ebp
c00291b0:	c3                   	ret    

c00291b1 <__fixunsdfsi>:
c00291b1:	55                   	push   ebp
c00291b2:	89 e5                	mov    ebp,esp
c00291b4:	53                   	push   ebx
c00291b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00291b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00291bb:	89 d3                	mov    ebx,edx
c00291bd:	c1 fb 14             	sar    ebx,0x14
c00291c0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00291c6:	31 c0                	xor    eax,eax
c00291c8:	83 fb 1f             	cmp    ebx,0x1f
c00291cb:	77 1d                	ja     c00291ea <__fixunsdfsi+0x39>
c00291cd:	89 d0                	mov    eax,edx
c00291cf:	c1 e0 0b             	shl    eax,0xb
c00291d2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00291d7:	c1 e9 15             	shr    ecx,0x15
c00291da:	09 c8                	or     eax,ecx
c00291dc:	0d 00 00 00 80       	or     eax,0x80000000
c00291e1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00291e6:	29 d9                	sub    ecx,ebx
c00291e8:	d3 e8                	shr    eax,cl
c00291ea:	5b                   	pop    ebx
c00291eb:	5d                   	pop    ebp
c00291ec:	c3                   	ret    

c00291ed <__cmpdf2>:
c00291ed:	55                   	push   ebp
c00291ee:	89 e5                	mov    ebp,esp
c00291f0:	57                   	push   edi
c00291f1:	56                   	push   esi
c00291f2:	53                   	push   ebx
c00291f3:	83 ec 0c             	sub    esp,0xc
c00291f6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00291f9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00291fc:	89 ca                	mov    edx,ecx
c00291fe:	c1 ea 14             	shr    edx,0x14
c0029201:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0029207:	89 cb                	mov    ebx,ecx
c0029209:	c1 fb 1f             	sar    ebx,0x1f
c002920c:	31 da                	xor    edx,ebx
c002920e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0029211:	89 df                	mov    edi,ebx
c0029213:	c1 e7 0b             	shl    edi,0xb
c0029216:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0029219:	c1 e1 0b             	shl    ecx,0xb
c002921c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029222:	c1 eb 15             	shr    ebx,0x15
c0029225:	09 d9                	or     ecx,ebx
c0029227:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002922a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002922d:	89 ce                	mov    esi,ecx
c002922f:	c1 ee 14             	shr    esi,0x14
c0029232:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0029238:	89 cb                	mov    ebx,ecx
c002923a:	c1 fb 1f             	sar    ebx,0x1f
c002923d:	31 de                	xor    esi,ebx
c002923f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0029242:	89 df                	mov    edi,ebx
c0029244:	c1 e7 0b             	shl    edi,0xb
c0029247:	c1 e1 0b             	shl    ecx,0xb
c002924a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029250:	c1 eb 15             	shr    ebx,0x15
c0029253:	09 d9                	or     ecx,ebx
c0029255:	89 d3                	mov    ebx,edx
c0029257:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002925d:	43                   	inc    ebx
c002925e:	83 fb 01             	cmp    ebx,0x1
c0029261:	77 08                	ja     c002926b <__cmpdf2+0x7e>
c0029263:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0029266:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0029269:	75 68                	jne    c00292d3 <__cmpdf2+0xe6>
c002926b:	89 f3                	mov    ebx,esi
c002926d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0029273:	43                   	inc    ebx
c0029274:	83 fb 01             	cmp    ebx,0x1
c0029277:	77 06                	ja     c002927f <__cmpdf2+0x92>
c0029279:	89 fb                	mov    ebx,edi
c002927b:	09 cb                	or     ebx,ecx
c002927d:	75 54                	jne    c00292d3 <__cmpdf2+0xe6>
c002927f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0029282:	09 f8                	or     eax,edi
c0029284:	09 c8                	or     eax,ecx
c0029286:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0029289:	75 12                	jne    c002929d <__cmpdf2+0xb0>
c002928b:	8d 42 01             	lea    eax,[edx+0x1]
c002928e:	83 f8 01             	cmp    eax,0x1
c0029291:	77 0a                	ja     c002929d <__cmpdf2+0xb0>
c0029293:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029296:	31 c0                	xor    eax,eax
c0029298:	83 fb 01             	cmp    ebx,0x1
c002929b:	76 36                	jbe    c00292d3 <__cmpdf2+0xe6>
c002929d:	b8 01 00 00 00       	mov    eax,0x1
c00292a2:	39 f2                	cmp    edx,esi
c00292a4:	7f 2d                	jg     c00292d3 <__cmpdf2+0xe6>
c00292a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00292ab:	7c 26                	jl     c00292d3 <__cmpdf2+0xe6>
c00292ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00292b0:	77 07                	ja     c00292b9 <__cmpdf2+0xcc>
c00292b2:	72 16                	jb     c00292ca <__cmpdf2+0xdd>
c00292b4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00292b7:	76 0a                	jbe    c00292c3 <__cmpdf2+0xd6>
c00292b9:	89 d0                	mov    eax,edx
c00292bb:	c1 f8 1f             	sar    eax,0x1f
c00292be:	83 c8 01             	or     eax,0x1
c00292c1:	eb 10                	jmp    c00292d3 <__cmpdf2+0xe6>
c00292c3:	b8 00 00 00 00       	mov    eax,0x0
c00292c8:	73 09                	jae    c00292d3 <__cmpdf2+0xe6>
c00292ca:	89 d0                	mov    eax,edx
c00292cc:	c1 f8 1f             	sar    eax,0x1f
c00292cf:	83 e0 02             	and    eax,0x2
c00292d2:	48                   	dec    eax
c00292d3:	83 c4 0c             	add    esp,0xc
c00292d6:	5b                   	pop    ebx
c00292d7:	5e                   	pop    esi
c00292d8:	5f                   	pop    edi
c00292d9:	5d                   	pop    ebp
c00292da:	c3                   	ret    

c00292db <__eqdf2>:
c00292db:	55                   	push   ebp
c00292dc:	89 e5                	mov    ebp,esp
c00292de:	50                   	push   eax
c00292df:	6a 01                	push   0x1
c00292e1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00292e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00292e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00292ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00292ed:	e8 fb fe ff ff       	call   c00291ed <__cmpdf2>
c00292f2:	83 c4 18             	add    esp,0x18
c00292f5:	c9                   	leave  
c00292f6:	c3                   	ret    

c00292f7 <__nedf2>:
c00292f7:	eb e2                	jmp    c00292db <__eqdf2>

c00292f9 <__gtdf2>:
c00292f9:	55                   	push   ebp
c00292fa:	89 e5                	mov    ebp,esp
c00292fc:	50                   	push   eax
c00292fd:	6a ff                	push   0xffffffff
c00292ff:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0029302:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0029305:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0029308:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002930b:	e8 dd fe ff ff       	call   c00291ed <__cmpdf2>
c0029310:	83 c4 18             	add    esp,0x18
c0029313:	c9                   	leave  
c0029314:	c3                   	ret    

c0029315 <__gedf2>:
c0029315:	eb e2                	jmp    c00292f9 <__gtdf2>

c0029317 <__ltdf2>:
c0029317:	eb c2                	jmp    c00292db <__eqdf2>

c0029319 <__ledf2>:
c0029319:	eb c0                	jmp    c00292db <__eqdf2>

c002931b <__truncdfsf2>:
c002931b:	55                   	push   ebp
c002931c:	89 e5                	mov    ebp,esp
c002931e:	57                   	push   edi
c002931f:	56                   	push   esi
c0029320:	53                   	push   ebx
c0029321:	83 ec 0c             	sub    esp,0xc
c0029324:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0029327:	89 d1                	mov    ecx,edx
c0029329:	c1 f9 14             	sar    ecx,0x14
c002932c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002932f:	89 df                	mov    edi,ebx
c0029331:	c1 e7 0b             	shl    edi,0xb
c0029334:	89 d0                	mov    eax,edx
c0029336:	c1 e0 0b             	shl    eax,0xb
c0029339:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002933e:	c1 eb 15             	shr    ebx,0x15
c0029341:	09 d8                	or     eax,ebx
c0029343:	89 cb                	mov    ebx,ecx
c0029345:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002934b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0029351:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0029357:	0f 86 9e 00 00 00    	jbe    c00293fb <__truncdfsf2+0xe0>
c002935d:	85 db                	test   ebx,ebx
c002935f:	75 0a                	jne    c002936b <__truncdfsf2+0x50>
c0029361:	c1 fa 17             	sar    edx,0x17
c0029364:	30 d2                	xor    dl,dl
c0029366:	e9 84 00 00 00       	jmp    c00293ef <__truncdfsf2+0xd4>
c002936b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0029371:	83 fe 83             	cmp    esi,0xffffff83
c0029374:	7d 4b                	jge    c00293c1 <__truncdfsf2+0xa6>
c0029376:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002937b:	29 f1                	sub    ecx,esi
c002937d:	83 f9 1f             	cmp    ecx,0x1f
c0029380:	7f 6b                	jg     c00293ed <__truncdfsf2+0xd2>
c0029382:	0d 00 00 00 80       	or     eax,0x80000000
c0029387:	89 c3                	mov    ebx,eax
c0029389:	d3 eb                	shr    ebx,cl
c002938b:	be 01 00 00 00       	mov    esi,0x1
c0029390:	d3 e6                	shl    esi,cl
c0029392:	4e                   	dec    esi
c0029393:	21 f0                	and    eax,esi
c0029395:	09 f8                	or     eax,edi
c0029397:	0f 95 c0             	setne  al
c002939a:	0f b6 c0             	movzx  eax,al
c002939d:	09 c3                	or     ebx,eax
c002939f:	89 d9                	mov    ecx,ebx
c00293a1:	c1 e9 08             	shr    ecx,0x8
c00293a4:	f6 c3 7f             	test   bl,0x7f
c00293a7:	0f 95 c0             	setne  al
c00293aa:	09 c8                	or     eax,ecx
c00293ac:	83 e0 01             	and    eax,0x1
c00293af:	c1 eb 07             	shr    ebx,0x7
c00293b2:	21 c3                	and    ebx,eax
c00293b4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00293ba:	09 d1                	or     ecx,edx
c00293bc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00293bf:	eb 76                	jmp    c0029437 <__truncdfsf2+0x11c>
c00293c1:	83 c6 80             	add    esi,0xffffff80
c00293c4:	7e 1d                	jle    c00293e3 <__truncdfsf2+0xc8>
c00293c6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00293cc:	75 0b                	jne    c00293d9 <__truncdfsf2+0xbe>
c00293ce:	09 f8                	or     eax,edi
c00293d0:	74 09                	je     c00293db <__truncdfsf2+0xc0>
c00293d2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00293d7:	eb 02                	jmp    c00293db <__truncdfsf2+0xc0>
c00293d9:	31 c0                	xor    eax,eax
c00293db:	c1 fa 17             	sar    edx,0x17
c00293de:	80 ca ff             	or     dl,0xff
c00293e1:	eb 0e                	jmp    c00293f1 <__truncdfsf2+0xd6>
c00293e3:	c1 fa 1f             	sar    edx,0x1f
c00293e6:	c1 e2 08             	shl    edx,0x8
c00293e9:	09 ca                	or     edx,ecx
c00293eb:	eb 04                	jmp    c00293f1 <__truncdfsf2+0xd6>
c00293ed:	31 d2                	xor    edx,edx
c00293ef:	31 c0                	xor    eax,eax
c00293f1:	c1 e2 17             	shl    edx,0x17
c00293f4:	c1 e8 08             	shr    eax,0x8
c00293f7:	09 d0                	or     eax,edx
c00293f9:	eb 3c                	jmp    c0029437 <__truncdfsf2+0x11c>
c00293fb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0029401:	89 ca                	mov    edx,ecx
c0029403:	c1 fa 0b             	sar    edx,0xb
c0029406:	c1 e2 08             	shl    edx,0x8
c0029409:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002940c:	31 db                	xor    ebx,ebx
c002940e:	85 ff                	test   edi,edi
c0029410:	0f 95 c3             	setne  bl
c0029413:	09 d8                	or     eax,ebx
c0029415:	89 c3                	mov    ebx,eax
c0029417:	c1 eb 08             	shr    ebx,0x8
c002941a:	a8 7f                	test   al,0x7f
c002941c:	0f 95 c2             	setne  dl
c002941f:	89 d6                	mov    esi,edx
c0029421:	09 de                	or     esi,ebx
c0029423:	83 e6 01             	and    esi,0x1
c0029426:	c1 e8 07             	shr    eax,0x7
c0029429:	21 f0                	and    eax,esi
c002942b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002942e:	09 ca                	or     edx,ecx
c0029430:	c1 e2 17             	shl    edx,0x17
c0029433:	09 da                	or     edx,ebx
c0029435:	01 d0                	add    eax,edx
c0029437:	83 c4 0c             	add    esp,0xc
c002943a:	5b                   	pop    ebx
c002943b:	5e                   	pop    esi
c002943c:	5f                   	pop    edi
c002943d:	5d                   	pop    ebp
c002943e:	c3                   	ret    

c002943f <__extendsfdf2>:
c002943f:	55                   	push   ebp
c0029440:	89 e5                	mov    ebp,esp
c0029442:	57                   	push   edi
c0029443:	56                   	push   esi
c0029444:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029447:	89 d1                	mov    ecx,edx
c0029449:	c1 f9 17             	sar    ecx,0x17
c002944c:	c1 e2 08             	shl    edx,0x8
c002944f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029455:	89 c8                	mov    eax,ecx
c0029457:	80 e4 f8             	and    ah,0xf8
c002945a:	8d 71 01             	lea    esi,[ecx+0x1]
c002945d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029463:	75 27                	jne    c002948c <__extendsfdf2+0x4d>
c0029465:	81 e1 ff 00 00 00    	and    ecx,0xff
c002946b:	75 18                	jne    c0029485 <__extendsfdf2+0x46>
c002946d:	85 d2                	test   edx,edx
c002946f:	74 20                	je     c0029491 <__extendsfdf2+0x52>
c0029471:	41                   	inc    ecx
c0029472:	01 d2                	add    edx,edx
c0029474:	79 fb                	jns    c0029471 <__extendsfdf2+0x32>
c0029476:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002947c:	29 c8                	sub    eax,ecx
c002947e:	05 81 03 00 00       	add    eax,0x381
c0029483:	eb 0c                	jmp    c0029491 <__extendsfdf2+0x52>
c0029485:	05 00 07 00 00       	add    eax,0x700
c002948a:	eb 05                	jmp    c0029491 <__extendsfdf2+0x52>
c002948c:	05 80 03 00 00       	add    eax,0x380
c0029491:	c1 e0 14             	shl    eax,0x14
c0029494:	89 c1                	mov    ecx,eax
c0029496:	89 d0                	mov    eax,edx
c0029498:	c1 e8 0b             	shr    eax,0xb
c002949b:	09 c1                	or     ecx,eax
c002949d:	c1 e2 15             	shl    edx,0x15
c00294a0:	89 d0                	mov    eax,edx
c00294a2:	89 ca                	mov    edx,ecx
c00294a4:	5e                   	pop    esi
c00294a5:	5f                   	pop    edi
c00294a6:	5d                   	pop    ebp
c00294a7:	c3                   	ret    
c00294a8:	66 90                	xchg   ax,ax
c00294aa:	66 90                	xchg   ax,ax
c00294ac:	66 90                	xchg   ax,ax
c00294ae:	66 90                	xchg   ax,ax

c00294b0 <fabs>:
c00294b0:	83 ec 0c             	sub    esp,0xc
c00294b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00294ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00294be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00294c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00294c7:	dd 04 24             	fld    QWORD PTR [esp]
c00294ca:	83 c4 0c             	add    esp,0xc
c00294cd:	c3                   	ret    
c00294ce:	66 90                	xchg   ax,ax

c00294d0 <lrint>:
c00294d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00294d4:	83 ec 04             	sub    esp,0x4
c00294d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00294da:	58                   	pop    eax
c00294db:	c3                   	ret    

c00294dc <lrintf>:
c00294dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00294e0:	83 ec 04             	sub    esp,0x4
c00294e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00294e6:	58                   	pop    eax
c00294e7:	c3                   	ret    

Disassembly of section .init:

c00294e8 <_init>:
c00294e8:	55                   	push   ebp
c00294e9:	89 e5                	mov    ebp,esp
c00294eb:	e8 28 6c fd ff       	call   c0000118 <frame_dummy>
c00294f0:	e8 5b e0 ff ff       	call   c0027550 <__do_global_ctors_aux>
c00294f5:	5d                   	pop    ebp
c00294f6:	c3                   	ret    

Disassembly of section .fini:

c00294f7 <_fini>:
c00294f7:	55                   	push   ebp
c00294f8:	89 e5                	mov    ebp,esp
c00294fa:	e8 a9 6b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00294ff:	5d                   	pop    ebp
c0029500:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029502 <Computer::~Computer()>:
c0029502:	83 ec 0c             	sub    esp,0xc
c0029505:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c002950a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950e:	89 10                	mov    DWORD PTR [eax],edx
c0029510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029514:	83 ec 0c             	sub    esp,0xc
c0029517:	50                   	push   eax
c0029518:	e8 3b ac fe ff       	call   c0014158 <Device::~Device()>
c002951d:	83 c4 10             	add    esp,0x10
c0029520:	90                   	nop
c0029521:	83 c4 0c             	add    esp,0xc
c0029524:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029526 <Computer::~Computer()>:
c0029526:	83 ec 0c             	sub    esp,0xc
c0029529:	83 ec 0c             	sub    esp,0xc
c002952c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029530:	e8 cd ff ff ff       	call   c0029502 <Computer::~Computer()>
c0029535:	83 c4 10             	add    esp,0x10
c0029538:	83 ec 08             	sub    esp,0x8
c002953b:	68 ec 01 00 00       	push   0x1ec
c0029540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029544:	e8 28 98 fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029549:	83 c4 10             	add    esp,0x10
c002954c:	83 c4 0c             	add    esp,0xc
c002954f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029550 <idleCommon()>:
c0029550:	83 ec 0c             	sub    esp,0xc
c0029553:	fa                   	cli    
c0029554:	ff 05 a8 2a 03 c0    	inc    DWORD PTR ds:0xc0032aa8
c002955a:	e8 ed 51 ff ff       	call   c001e74c <schedule()>
c002955f:	a1 a8 2a 03 c0       	mov    eax,ds:0xc0032aa8
c0029564:	48                   	dec    eax
c0029565:	a3 a8 2a 03 c0       	mov    ds:0xc0032aa8,eax
c002956a:	75 01                	jne    c002956d <idleCommon()+0x1d>
c002956c:	fb                   	sti    
c002956d:	83 c4 0c             	add    esp,0xc
c0029570:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029572 <LinkedList<UnixFile>::~LinkedList()>:
c0029572:	90                   	nop
c0029573:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029574 <LinkedList<UnixFile>::LinkedList()>:
c0029574:	83 ec 0c             	sub    esp,0xc
c0029577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029585:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002958c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029590:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295b7:	83 ec 0c             	sub    esp,0xc
c00295ba:	68 e6 b3 02 c0       	push   0xc002b3e6
c00295bf:	e8 8d 98 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00295c4:	83 c4 10             	add    esp,0x10
c00295c7:	90                   	nop
c00295c8:	83 c4 0c             	add    esp,0xc
c00295cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00295cc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00295cc:	83 ec 0c             	sub    esp,0xc
c00295cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295d4:	75 10                	jne    c00295e6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00295d6:	83 ec 0c             	sub    esp,0xc
c00295d9:	68 00 b4 02 c0       	push   0xc002b400
c00295de:	e8 b6 13 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00295e3:	83 c4 10             	add    esp,0x10
c00295e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ec:	85 c0                	test   eax,eax
c00295ee:	74 34                	je     c0029624 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00295f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295f7:	85 c0                	test   eax,eax
c00295f9:	74 29                	je     c0029624 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00295fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029606:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029611:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002961b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029622:	eb 65                	jmp    c0029689 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	8b 00                	mov    eax,DWORD PTR [eax]
c002962a:	85 c0                	test   eax,eax
c002962c:	75 4b                	jne    c0029679 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002962e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029632:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029635:	85 c0                	test   eax,eax
c0029637:	75 40                	jne    c0029679 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029641:	89 10                	mov    DWORD PTR [eax],edx
c0029643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002964b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002964e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002965c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029660:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029663:	85 c0                	test   eax,eax
c0029665:	74 22                	je     c0029689 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029667:	83 ec 0c             	sub    esp,0xc
c002966a:	68 22 b4 02 c0       	push   0xc002b422
c002966f:	e8 25 13 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029674:	83 c4 10             	add    esp,0x10
c0029677:	eb 10                	jmp    c0029689 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029679:	83 ec 0c             	sub    esp,0xc
c002967c:	68 2c b4 02 c0       	push   0xc002b42c
c0029681:	e8 13 13 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029686:	83 c4 10             	add    esp,0x10
c0029689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029690:	8d 50 01             	lea    edx,[eax+0x1]
c0029693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029697:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002969a:	90                   	nop
c002969b:	83 c4 0c             	add    esp,0xc
c002969e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00296a0 <LinkedList<UnixFile>::getFirstElement()>:
c00296a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00296a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00296a8 <LinkedList<UnixFile>::removeFirst()>:
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296af:	8b 00                	mov    eax,DWORD PTR [eax]
c00296b1:	85 c0                	test   eax,eax
c00296b3:	75 12                	jne    c00296c7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00296b5:	83 ec 0c             	sub    esp,0xc
c00296b8:	68 38 b4 02 c0       	push   0xc002b438
c00296bd:	e8 d7 12 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00296c2:	83 c4 10             	add    esp,0x10
c00296c5:	eb 7e                	jmp    c0029745 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00296c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296d1:	85 c0                	test   eax,eax
c00296d3:	74 10                	je     c00296e5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00296d5:	83 ec 0c             	sub    esp,0xc
c00296d8:	68 83 b4 02 c0       	push   0xc002b483
c00296dd:	e8 b7 12 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00296e2:	83 c4 10             	add    esp,0x10
c00296e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00296eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296ee:	85 c0                	test   eax,eax
c00296f0:	75 33                	jne    c0029725 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00296f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029700:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002970b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002970e:	83 f8 01             	cmp    eax,0x1
c0029711:	74 21                	je     c0029734 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029713:	83 ec 0c             	sub    esp,0xc
c0029716:	68 5c b4 02 c0       	push   0xc002b45c
c002971b:	e8 79 12 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029720:	83 c4 10             	add    esp,0x10
c0029723:	eb 0f                	jmp    c0029734 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029729:	8b 00                	mov    eax,DWORD PTR [eax]
c002972b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002972e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029732:	89 10                	mov    DWORD PTR [eax],edx
c0029734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029738:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002973b:	8d 50 ff             	lea    edx,[eax-0x1]
c002973e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029742:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029745:	83 c4 0c             	add    esp,0xc
c0029748:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002974a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002974a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002974e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029751:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029752 <DriverlessDevice::~DriverlessDevice()>:
c0029752:	ba 5c bc 02 c0       	mov    edx,0xc002bc5c
c0029757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002975b:	89 10                	mov    DWORD PTR [eax],edx
c002975d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029761:	50                   	push   eax
c0029762:	e8 f1 a9 fe ff       	call   c0014158 <Device::~Device()>
c0029767:	83 c4 04             	add    esp,0x4
c002976a:	90                   	nop
c002976b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002976c <DriverlessDevice::~DriverlessDevice()>:
c002976c:	83 ec 0c             	sub    esp,0xc
c002976f:	83 ec 0c             	sub    esp,0xc
c0029772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029776:	e8 d7 ff ff ff       	call   c0029752 <DriverlessDevice::~DriverlessDevice()>
c002977b:	83 c4 10             	add    esp,0x10
c002977e:	83 ec 08             	sub    esp,0x8
c0029781:	68 58 01 00 00       	push   0x158
c0029786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002978a:	e8 e2 95 fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c002978f:	83 c4 10             	add    esp,0x10
c0029792:	83 c4 0c             	add    esp,0xc
c0029795:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029796 <LinkedList<Device>::addElement(Device*)>:
c0029796:	83 ec 0c             	sub    esp,0xc
c0029799:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002979e:	75 10                	jne    c00297b0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00297a0:	83 ec 0c             	sub    esp,0xc
c00297a3:	68 00 b4 02 c0       	push   0xc002b400
c00297a8:	e8 ec 11 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00297ad:	83 c4 10             	add    esp,0x10
c00297b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00297b6:	85 c0                	test   eax,eax
c00297b8:	74 3a                	je     c00297f4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00297ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297c1:	85 c0                	test   eax,eax
c00297c3:	74 2f                	je     c00297f4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00297c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297d0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00297d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00297e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297e8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00297f2:	eb 68                	jmp    c002985c <LinkedList<Device>::addElement(Device*)+0xc6>
c00297f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00297fa:	85 c0                	test   eax,eax
c00297fc:	75 4e                	jne    c002984c <LinkedList<Device>::addElement(Device*)+0xb6>
c00297fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029802:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029805:	85 c0                	test   eax,eax
c0029807:	75 43                	jne    c002984c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029811:	89 10                	mov    DWORD PTR [eax],edx
c0029813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029817:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002981b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002981e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029825:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002982f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029833:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029836:	85 c0                	test   eax,eax
c0029838:	74 22                	je     c002985c <LinkedList<Device>::addElement(Device*)+0xc6>
c002983a:	83 ec 0c             	sub    esp,0xc
c002983d:	68 22 b4 02 c0       	push   0xc002b422
c0029842:	e8 52 11 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029847:	83 c4 10             	add    esp,0x10
c002984a:	eb 10                	jmp    c002985c <LinkedList<Device>::addElement(Device*)+0xc6>
c002984c:	83 ec 0c             	sub    esp,0xc
c002984f:	68 2c b4 02 c0       	push   0xc002b42c
c0029854:	e8 40 11 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029859:	83 c4 10             	add    esp,0x10
c002985c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029860:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029863:	8d 50 01             	lea    edx,[eax+0x1]
c0029866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002986d:	90                   	nop
c002986e:	83 c4 0c             	add    esp,0xc
c0029871:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029872 <LinkedList<Device>::LinkedList()>:
c0029872:	83 ec 0c             	sub    esp,0xc
c0029875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029879:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002987f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029883:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002988a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029899:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00298aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00298b5:	83 ec 0c             	sub    esp,0xc
c00298b8:	68 e6 b3 02 c0       	push   0xc002b3e6
c00298bd:	e8 8f 95 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c00298c2:	83 c4 10             	add    esp,0x10
c00298c5:	90                   	nop
c00298c6:	83 c4 0c             	add    esp,0xc
c00298c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00298ca <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00298ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00298d0:	85 c0                	test   eax,eax
c00298d2:	75 0e                	jne    c00298e2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00298d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298db:	85 c0                	test   eax,eax
c00298dd:	75 03                	jne    c00298e2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00298df:	b0 01                	mov    al,0x1
c00298e1:	c3                   	ret    
c00298e2:	b0 00                	mov    al,0x0
c00298e4:	90                   	nop
c00298e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00298e6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00298e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00298ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00298ee <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00298ee:	83 ec 0c             	sub    esp,0xc
c00298f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00298f7:	85 c0                	test   eax,eax
c00298f9:	75 15                	jne    c0029910 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00298fb:	83 ec 0c             	sub    esp,0xc
c00298fe:	68 38 b4 02 c0       	push   0xc002b438
c0029903:	e8 91 10 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029908:	83 c4 10             	add    esp,0x10
c002990b:	e9 88 00 00 00       	jmp    c0029998 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029914:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029917:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002991a:	85 c0                	test   eax,eax
c002991c:	0f 95 c0             	setne  al
c002991f:	84 c0                	test   al,al
c0029921:	74 10                	je     c0029933 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029923:	83 ec 0c             	sub    esp,0xc
c0029926:	68 83 b4 02 c0       	push   0xc002b483
c002992b:	e8 69 10 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029930:	83 c4 10             	add    esp,0x10
c0029933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029937:	8b 00                	mov    eax,DWORD PTR [eax]
c0029939:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002993c:	85 c0                	test   eax,eax
c002993e:	0f 94 c0             	sete   al
c0029941:	84 c0                	test   al,al
c0029943:	74 33                	je     c0029978 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002994f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029953:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002995a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029961:	83 f8 01             	cmp    eax,0x1
c0029964:	74 21                	je     c0029987 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	68 5c b4 02 c0       	push   0xc002b45c
c002996e:	e8 26 10 ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029973:	83 c4 10             	add    esp,0x10
c0029976:	eb 0f                	jmp    c0029987 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002997c:	8b 00                	mov    eax,DWORD PTR [eax]
c002997e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029985:	89 10                	mov    DWORD PTR [eax],edx
c0029987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002998b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002998e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029995:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029998:	83 c4 0c             	add    esp,0xc
c002999b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002999c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002999c:	83 ec 0c             	sub    esp,0xc
c002999f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00299a4:	75 10                	jne    c00299b6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00299a6:	83 ec 0c             	sub    esp,0xc
c00299a9:	68 00 b4 02 c0       	push   0xc002b400
c00299ae:	e8 e6 0f ff ff       	call   c001a999 <Krnl::panic(char const*)>
c00299b3:	83 c4 10             	add    esp,0x10
c00299b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00299bc:	85 c0                	test   eax,eax
c00299be:	74 34                	je     c00299f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00299c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00299c7:	85 c0                	test   eax,eax
c00299c9:	74 29                	je     c00299f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00299cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00299d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00299d6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00299d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00299e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00299e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00299eb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00299f2:	eb 65                	jmp    c0029a59 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00299f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00299fa:	85 c0                	test   eax,eax
c00299fc:	75 4b                	jne    c0029a49 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00299fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029a05:	85 c0                	test   eax,eax
c0029a07:	75 40                	jne    c0029a49 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029a11:	89 10                	mov    DWORD PTR [eax],edx
c0029a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029a1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029a25:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a33:	85 c0                	test   eax,eax
c0029a35:	74 22                	je     c0029a59 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029a37:	83 ec 0c             	sub    esp,0xc
c0029a3a:	68 22 b4 02 c0       	push   0xc002b422
c0029a3f:	e8 55 0f ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029a44:	83 c4 10             	add    esp,0x10
c0029a47:	eb 10                	jmp    c0029a59 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029a49:	83 ec 0c             	sub    esp,0xc
c0029a4c:	68 2c b4 02 c0       	push   0xc002b42c
c0029a51:	e8 43 0f ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029a56:	83 c4 10             	add    esp,0x10
c0029a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a60:	8d 50 01             	lea    edx,[eax+0x1]
c0029a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a67:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029a6a:	90                   	nop
c0029a6b:	83 c4 0c             	add    esp,0xc
c0029a6e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029a70 <ACPI::~ACPI()>:
c0029a70:	83 ec 0c             	sub    esp,0xc
c0029a73:	ba 88 c6 02 c0       	mov    edx,0xc002c688
c0029a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a7c:	89 10                	mov    DWORD PTR [eax],edx
c0029a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a82:	83 ec 0c             	sub    esp,0xc
c0029a85:	50                   	push   eax
c0029a86:	e8 cd a6 fe ff       	call   c0014158 <Device::~Device()>
c0029a8b:	83 c4 10             	add    esp,0x10
c0029a8e:	90                   	nop
c0029a8f:	83 c4 0c             	add    esp,0xc
c0029a92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029a94 <ACPI::~ACPI()>:
c0029a94:	83 ec 0c             	sub    esp,0xc
c0029a97:	83 ec 0c             	sub    esp,0xc
c0029a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a9e:	e8 cd ff ff ff       	call   c0029a70 <ACPI::~ACPI()>
c0029aa3:	83 c4 10             	add    esp,0x10
c0029aa6:	83 ec 08             	sub    esp,0x8
c0029aa9:	68 68 12 00 00       	push   0x1268
c0029aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab2:	e8 ba 92 fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029ab7:	83 c4 10             	add    esp,0x10
c0029aba:	83 c4 0c             	add    esp,0xc
c0029abd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029abe <LinkedList<Device>::~LinkedList()>:
c0029abe:	90                   	nop
c0029abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029ac0 <LinkedList<Device>::isEmpty()>:
c0029ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0029ac6:	85 c0                	test   eax,eax
c0029ac8:	75 0e                	jne    c0029ad8 <LinkedList<Device>::isEmpty()+0x18>
c0029aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029ad1:	85 c0                	test   eax,eax
c0029ad3:	75 03                	jne    c0029ad8 <LinkedList<Device>::isEmpty()+0x18>
c0029ad5:	b0 01                	mov    al,0x1
c0029ad7:	c3                   	ret    
c0029ad8:	b0 00                	mov    al,0x0
c0029ada:	90                   	nop
c0029adb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029adc <LinkedList<Device>::getFirstElement()>:
c0029adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0029ae2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029ae4 <LinkedList<Device>::removeFirst()>:
c0029ae4:	83 ec 0c             	sub    esp,0xc
c0029ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0029aed:	85 c0                	test   eax,eax
c0029aef:	75 15                	jne    c0029b06 <LinkedList<Device>::removeFirst()+0x22>
c0029af1:	83 ec 0c             	sub    esp,0xc
c0029af4:	68 38 b4 02 c0       	push   0xc002b438
c0029af9:	e8 9b 0e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029afe:	83 c4 10             	add    esp,0x10
c0029b01:	e9 87 00 00 00       	jmp    c0029b8d <LinkedList<Device>::removeFirst()+0xa9>
c0029b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029b0d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029b13:	85 c0                	test   eax,eax
c0029b15:	74 10                	je     c0029b27 <LinkedList<Device>::removeFirst()+0x43>
c0029b17:	83 ec 0c             	sub    esp,0xc
c0029b1a:	68 83 b4 02 c0       	push   0xc002b483
c0029b1f:	e8 75 0e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029b24:	83 c4 10             	add    esp,0x10
c0029b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0029b2d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029b33:	85 c0                	test   eax,eax
c0029b35:	75 33                	jne    c0029b6a <LinkedList<Device>::removeFirst()+0x86>
c0029b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029b53:	83 f8 01             	cmp    eax,0x1
c0029b56:	74 24                	je     c0029b7c <LinkedList<Device>::removeFirst()+0x98>
c0029b58:	83 ec 0c             	sub    esp,0xc
c0029b5b:	68 5c b4 02 c0       	push   0xc002b45c
c0029b60:	e8 34 0e ff ff       	call   c001a999 <Krnl::panic(char const*)>
c0029b65:	83 c4 10             	add    esp,0x10
c0029b68:	eb 12                	jmp    c0029b7c <LinkedList<Device>::removeFirst()+0x98>
c0029b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029b70:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b7a:	89 10                	mov    DWORD PTR [eax],edx
c0029b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029b83:	8d 50 ff             	lea    edx,[eax-0x1]
c0029b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b8a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029b8d:	83 c4 0c             	add    esp,0xc
c0029b90:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029b92 <CPU::~CPU()>:
c0029b92:	83 ec 0c             	sub    esp,0xc
c0029b95:	ba 78 ca 02 c0       	mov    edx,0xc002ca78
c0029b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9e:	89 10                	mov    DWORD PTR [eax],edx
c0029ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba4:	83 ec 0c             	sub    esp,0xc
c0029ba7:	50                   	push   eax
c0029ba8:	e8 ab a5 fe ff       	call   c0014158 <Device::~Device()>
c0029bad:	83 c4 10             	add    esp,0x10
c0029bb0:	90                   	nop
c0029bb1:	83 c4 0c             	add    esp,0xc
c0029bb4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029bb6 <CPU::~CPU()>:
c0029bb6:	83 ec 0c             	sub    esp,0xc
c0029bb9:	83 ec 0c             	sub    esp,0xc
c0029bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc0:	e8 cd ff ff ff       	call   c0029b92 <CPU::~CPU()>
c0029bc5:	83 c4 10             	add    esp,0x10
c0029bc8:	83 ec 08             	sub    esp,0x8
c0029bcb:	68 98 11 00 00       	push   0x1198
c0029bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bd4:	e8 98 91 fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029bd9:	83 c4 10             	add    esp,0x10
c0029bdc:	83 c4 0c             	add    esp,0xc
c0029bdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029be0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029be0:	90                   	nop
c0029be1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029be2 <ThreadControlBlock::ThreadControlBlock()>:
c0029be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029be6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029bf1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029bfc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c07:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c12:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c1d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c25:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029c29:	90                   	nop
c0029c2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029c2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029c2c:	83 ec 0c             	sub    esp,0xc
c0029c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c53:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c68:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029c6f:	83 ec 0c             	sub    esp,0xc
c0029c72:	68 e6 b3 02 c0       	push   0xc002b3e6
c0029c77:	e8 d5 91 fe ff       	call   c0012e51 <Dbg::kprintf(char const*, ...)>
c0029c7c:	83 c4 10             	add    esp,0x10
c0029c7f:	90                   	nop
c0029c80:	83 c4 0c             	add    esp,0xc
c0029c83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029c84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029c88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029c8b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029c8c <Vm::_FPUState::_FPUState()>:
c0029c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c90:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029c97:	90                   	nop
c0029c98:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029c9a <PCI::~PCI()>:
c0029c9a:	83 ec 0c             	sub    esp,0xc
c0029c9d:	ba c0 db 02 c0       	mov    edx,0xc002dbc0
c0029ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ca6:	89 10                	mov    DWORD PTR [eax],edx
c0029ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cac:	83 ec 0c             	sub    esp,0xc
c0029caf:	50                   	push   eax
c0029cb0:	e8 73 9e fe ff       	call   c0013b28 <Bus::~Bus()>
c0029cb5:	83 c4 10             	add    esp,0x10
c0029cb8:	90                   	nop
c0029cb9:	83 c4 0c             	add    esp,0xc
c0029cbc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029cbe <PCI::~PCI()>:
c0029cbe:	83 ec 0c             	sub    esp,0xc
c0029cc1:	83 ec 0c             	sub    esp,0xc
c0029cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cc8:	e8 cd ff ff ff       	call   c0029c9a <PCI::~PCI()>
c0029ccd:	83 c4 10             	add    esp,0x10
c0029cd0:	83 ec 08             	sub    esp,0x8
c0029cd3:	68 58 01 00 00       	push   0x158
c0029cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cdc:	e8 90 90 fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029ce1:	83 c4 10             	add    esp,0x10
c0029ce4:	83 c4 0c             	add    esp,0xc
c0029ce7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029ce8 <IDE::~IDE()>:
c0029ce8:	83 ec 0c             	sub    esp,0xc
c0029ceb:	ba 24 de 02 c0       	mov    edx,0xc002de24
c0029cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cf4:	89 10                	mov    DWORD PTR [eax],edx
c0029cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cfa:	83 ec 0c             	sub    esp,0xc
c0029cfd:	50                   	push   eax
c0029cfe:	e8 6b a9 fe ff       	call   c001466e <HardDiskController::~HardDiskController()>
c0029d03:	83 c4 10             	add    esp,0x10
c0029d06:	90                   	nop
c0029d07:	83 c4 0c             	add    esp,0xc
c0029d0a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029d0c <IDE::~IDE()>:
c0029d0c:	83 ec 0c             	sub    esp,0xc
c0029d0f:	83 ec 0c             	sub    esp,0xc
c0029d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d16:	e8 cd ff ff ff       	call   c0029ce8 <IDE::~IDE()>
c0029d1b:	83 c4 10             	add    esp,0x10
c0029d1e:	83 ec 08             	sub    esp,0x8
c0029d21:	68 70 02 00 00       	push   0x270
c0029d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d2a:	e8 42 90 fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029d2f:	83 c4 10             	add    esp,0x10
c0029d32:	83 c4 0c             	add    esp,0xc
c0029d35:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029d36 <SATABus::~SATABus()>:
c0029d36:	83 ec 0c             	sub    esp,0xc
c0029d39:	ba 04 df 02 c0       	mov    edx,0xc002df04
c0029d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d42:	89 10                	mov    DWORD PTR [eax],edx
c0029d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d48:	83 ec 0c             	sub    esp,0xc
c0029d4b:	50                   	push   eax
c0029d4c:	e8 1d a9 fe ff       	call   c001466e <HardDiskController::~HardDiskController()>
c0029d51:	83 c4 10             	add    esp,0x10
c0029d54:	90                   	nop
c0029d55:	83 c4 0c             	add    esp,0xc
c0029d58:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029d5a <SATABus::~SATABus()>:
c0029d5a:	83 ec 0c             	sub    esp,0xc
c0029d5d:	83 ec 0c             	sub    esp,0xc
c0029d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d64:	e8 cd ff ff ff       	call   c0029d36 <SATABus::~SATABus()>
c0029d69:	83 c4 10             	add    esp,0x10
c0029d6c:	83 ec 08             	sub    esp,0x8
c0029d6f:	68 64 01 00 00       	push   0x164
c0029d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d78:	e8 f4 8f fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029d7d:	83 c4 10             	add    esp,0x10
c0029d80:	83 c4 0c             	add    esp,0xc
c0029d83:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029d84 <ATA::~ATA()>:
c0029d84:	83 ec 0c             	sub    esp,0xc
c0029d87:	ba 50 df 02 c0       	mov    edx,0xc002df50
c0029d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d90:	89 10                	mov    DWORD PTR [eax],edx
c0029d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d96:	83 ec 0c             	sub    esp,0xc
c0029d99:	50                   	push   eax
c0029d9a:	e8 c1 a9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0029d9f:	83 c4 10             	add    esp,0x10
c0029da2:	90                   	nop
c0029da3:	83 c4 0c             	add    esp,0xc
c0029da6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029da8 <ATA::~ATA()>:
c0029da8:	83 ec 0c             	sub    esp,0xc
c0029dab:	83 ec 0c             	sub    esp,0xc
c0029dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029db2:	e8 cd ff ff ff       	call   c0029d84 <ATA::~ATA()>
c0029db7:	83 c4 10             	add    esp,0x10
c0029dba:	83 ec 08             	sub    esp,0x8
c0029dbd:	68 7c 01 00 00       	push   0x17c
c0029dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dc6:	e8 a6 8f fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029dcb:	83 c4 10             	add    esp,0x10
c0029dce:	83 c4 0c             	add    esp,0xc
c0029dd1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029dd2 <ATAPI::~ATAPI()>:
c0029dd2:	83 ec 0c             	sub    esp,0xc
c0029dd5:	ba 88 df 02 c0       	mov    edx,0xc002df88
c0029dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dde:	89 10                	mov    DWORD PTR [eax],edx
c0029de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029de4:	83 ec 0c             	sub    esp,0xc
c0029de7:	50                   	push   eax
c0029de8:	e8 73 a9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0029ded:	83 c4 10             	add    esp,0x10
c0029df0:	90                   	nop
c0029df1:	83 c4 0c             	add    esp,0xc
c0029df4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029df6 <ATAPI::~ATAPI()>:
c0029df6:	83 ec 0c             	sub    esp,0xc
c0029df9:	83 ec 0c             	sub    esp,0xc
c0029dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e00:	e8 cd ff ff ff       	call   c0029dd2 <ATAPI::~ATAPI()>
c0029e05:	83 c4 10             	add    esp,0x10
c0029e08:	83 ec 08             	sub    esp,0x8
c0029e0b:	68 80 01 00 00       	push   0x180
c0029e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e14:	e8 58 8f fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029e19:	83 c4 10             	add    esp,0x10
c0029e1c:	83 c4 0c             	add    esp,0xc
c0029e1f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029e20 <SATA::~SATA()>:
c0029e20:	83 ec 0c             	sub    esp,0xc
c0029e23:	ba 3c e0 02 c0       	mov    edx,0xc002e03c
c0029e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e2c:	89 10                	mov    DWORD PTR [eax],edx
c0029e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e32:	83 ec 0c             	sub    esp,0xc
c0029e35:	50                   	push   eax
c0029e36:	e8 25 a9 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0029e3b:	83 c4 10             	add    esp,0x10
c0029e3e:	90                   	nop
c0029e3f:	83 c4 0c             	add    esp,0xc
c0029e42:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029e44 <SATA::~SATA()>:
c0029e44:	83 ec 0c             	sub    esp,0xc
c0029e47:	83 ec 0c             	sub    esp,0xc
c0029e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e4e:	e8 cd ff ff ff       	call   c0029e20 <SATA::~SATA()>
c0029e53:	83 c4 10             	add    esp,0x10
c0029e56:	83 ec 08             	sub    esp,0x8
c0029e59:	68 7c 01 00 00       	push   0x17c
c0029e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e62:	e8 0a 8f fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029e67:	83 c4 10             	add    esp,0x10
c0029e6a:	83 c4 0c             	add    esp,0xc
c0029e6d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029e6e <SATAPI::~SATAPI()>:
c0029e6e:	83 ec 0c             	sub    esp,0xc
c0029e71:	ba 18 e1 02 c0       	mov    edx,0xc002e118
c0029e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e7a:	89 10                	mov    DWORD PTR [eax],edx
c0029e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e80:	83 ec 0c             	sub    esp,0xc
c0029e83:	50                   	push   eax
c0029e84:	e8 d7 a8 fe ff       	call   c0014760 <PhysicalDisk::~PhysicalDisk()>
c0029e89:	83 c4 10             	add    esp,0x10
c0029e8c:	90                   	nop
c0029e8d:	83 c4 0c             	add    esp,0xc
c0029e90:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029e92 <SATAPI::~SATAPI()>:
c0029e92:	83 ec 0c             	sub    esp,0xc
c0029e95:	83 ec 0c             	sub    esp,0xc
c0029e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e9c:	e8 cd ff ff ff       	call   c0029e6e <SATAPI::~SATAPI()>
c0029ea1:	83 c4 10             	add    esp,0x10
c0029ea4:	83 ec 08             	sub    esp,0x8
c0029ea7:	68 80 01 00 00       	push   0x180
c0029eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029eb0:	e8 bc 8e fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029eb5:	83 c4 10             	add    esp,0x10
c0029eb8:	83 c4 0c             	add    esp,0xc
c0029ebb:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029ebc <AVX::~AVX()>:
c0029ebc:	83 ec 0c             	sub    esp,0xc
c0029ebf:	ba 58 e1 02 c0       	mov    edx,0xc002e158
c0029ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ec8:	89 10                	mov    DWORD PTR [eax],edx
c0029eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ece:	83 ec 0c             	sub    esp,0xc
c0029ed1:	50                   	push   eax
c0029ed2:	e8 0d a9 fe ff       	call   c00147e4 <FPU::~FPU()>
c0029ed7:	83 c4 10             	add    esp,0x10
c0029eda:	90                   	nop
c0029edb:	83 c4 0c             	add    esp,0xc
c0029ede:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029ee0 <AVX::~AVX()>:
c0029ee0:	83 ec 0c             	sub    esp,0xc
c0029ee3:	83 ec 0c             	sub    esp,0xc
c0029ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029eea:	e8 cd ff ff ff       	call   c0029ebc <AVX::~AVX()>
c0029eef:	83 c4 10             	add    esp,0x10
c0029ef2:	83 ec 08             	sub    esp,0x8
c0029ef5:	68 58 01 00 00       	push   0x158
c0029efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029efe:	e8 6e 8e fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029f03:	83 c4 10             	add    esp,0x10
c0029f06:	83 c4 0c             	add    esp,0xc
c0029f09:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029f0a <MMX::~MMX()>:
c0029f0a:	83 ec 0c             	sub    esp,0xc
c0029f0d:	ba 98 e1 02 c0       	mov    edx,0xc002e198
c0029f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f16:	89 10                	mov    DWORD PTR [eax],edx
c0029f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f1c:	83 ec 0c             	sub    esp,0xc
c0029f1f:	50                   	push   eax
c0029f20:	e8 bf a8 fe ff       	call   c00147e4 <FPU::~FPU()>
c0029f25:	83 c4 10             	add    esp,0x10
c0029f28:	90                   	nop
c0029f29:	83 c4 0c             	add    esp,0xc
c0029f2c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029f2e <MMX::~MMX()>:
c0029f2e:	83 ec 0c             	sub    esp,0xc
c0029f31:	83 ec 0c             	sub    esp,0xc
c0029f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f38:	e8 cd ff ff ff       	call   c0029f0a <MMX::~MMX()>
c0029f3d:	83 c4 10             	add    esp,0x10
c0029f40:	83 ec 08             	sub    esp,0x8
c0029f43:	68 58 01 00 00       	push   0x158
c0029f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f4c:	e8 20 8e fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029f51:	83 c4 10             	add    esp,0x10
c0029f54:	83 c4 0c             	add    esp,0xc
c0029f57:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029f58 <SSE::~SSE()>:
c0029f58:	83 ec 0c             	sub    esp,0xc
c0029f5b:	ba d8 e1 02 c0       	mov    edx,0xc002e1d8
c0029f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f64:	89 10                	mov    DWORD PTR [eax],edx
c0029f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f6a:	83 ec 0c             	sub    esp,0xc
c0029f6d:	50                   	push   eax
c0029f6e:	e8 71 a8 fe ff       	call   c00147e4 <FPU::~FPU()>
c0029f73:	83 c4 10             	add    esp,0x10
c0029f76:	90                   	nop
c0029f77:	83 c4 0c             	add    esp,0xc
c0029f7a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029f7c <SSE::~SSE()>:
c0029f7c:	83 ec 0c             	sub    esp,0xc
c0029f7f:	83 ec 0c             	sub    esp,0xc
c0029f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f86:	e8 cd ff ff ff       	call   c0029f58 <SSE::~SSE()>
c0029f8b:	83 c4 10             	add    esp,0x10
c0029f8e:	83 ec 08             	sub    esp,0x8
c0029f91:	68 58 01 00 00       	push   0x158
c0029f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f9a:	e8 d2 8d fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029f9f:	83 c4 10             	add    esp,0x10
c0029fa2:	83 c4 0c             	add    esp,0xc
c0029fa5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029fa6 <x87::~x87()>:
c0029fa6:	83 ec 0c             	sub    esp,0xc
c0029fa9:	ba 18 e2 02 c0       	mov    edx,0xc002e218
c0029fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fb2:	89 10                	mov    DWORD PTR [eax],edx
c0029fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fb8:	83 ec 0c             	sub    esp,0xc
c0029fbb:	50                   	push   eax
c0029fbc:	e8 23 a8 fe ff       	call   c00147e4 <FPU::~FPU()>
c0029fc1:	83 c4 10             	add    esp,0x10
c0029fc4:	90                   	nop
c0029fc5:	83 c4 0c             	add    esp,0xc
c0029fc8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029fca <x87::~x87()>:
c0029fca:	83 ec 0c             	sub    esp,0xc
c0029fcd:	83 ec 0c             	sub    esp,0xc
c0029fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fd4:	e8 cd ff ff ff       	call   c0029fa6 <x87::~x87()>
c0029fd9:	83 c4 10             	add    esp,0x10
c0029fdc:	83 ec 08             	sub    esp,0x8
c0029fdf:	68 58 01 00 00       	push   0x158
c0029fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fe8:	e8 84 8d fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c0029fed:	83 c4 10             	add    esp,0x10
c0029ff0:	83 c4 0c             	add    esp,0xc
c0029ff3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029ff4 <IOAPIC::~IOAPIC()>:
c0029ff4:	83 ec 0c             	sub    esp,0xc
c0029ff7:	ba 70 e3 02 c0       	mov    edx,0xc002e370
c0029ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a000:	89 10                	mov    DWORD PTR [eax],edx
c002a002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a006:	83 ec 0c             	sub    esp,0xc
c002a009:	50                   	push   eax
c002a00a:	e8 49 a1 fe ff       	call   c0014158 <Device::~Device()>
c002a00f:	83 c4 10             	add    esp,0x10
c002a012:	90                   	nop
c002a013:	83 c4 0c             	add    esp,0xc
c002a016:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002a018 <IOAPIC::~IOAPIC()>:
c002a018:	83 ec 0c             	sub    esp,0xc
c002a01b:	83 ec 0c             	sub    esp,0xc
c002a01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a022:	e8 cd ff ff ff       	call   c0029ff4 <IOAPIC::~IOAPIC()>
c002a027:	83 c4 10             	add    esp,0x10
c002a02a:	83 ec 08             	sub    esp,0x8
c002a02d:	68 68 01 00 00       	push   0x168
c002a032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a036:	e8 36 8d fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c002a03b:	83 c4 10             	add    esp,0x10
c002a03e:	83 c4 0c             	add    esp,0xc
c002a041:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c002a042 <APIC::~APIC()>:
c002a042:	83 ec 0c             	sub    esp,0xc
c002a045:	ba 28 e3 02 c0       	mov    edx,0xc002e328
c002a04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a04e:	89 10                	mov    DWORD PTR [eax],edx
c002a050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a054:	83 ec 0c             	sub    esp,0xc
c002a057:	50                   	push   eax
c002a058:	e8 51 ac fe ff       	call   c0014cae <InterruptController::~InterruptController()>
c002a05d:	83 c4 10             	add    esp,0x10
c002a060:	90                   	nop
c002a061:	83 c4 0c             	add    esp,0xc
c002a064:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002a066 <APIC::~APIC()>:
c002a066:	83 ec 0c             	sub    esp,0xc
c002a069:	83 ec 0c             	sub    esp,0xc
c002a06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a070:	e8 cd ff ff ff       	call   c002a042 <APIC::~APIC()>
c002a075:	83 c4 10             	add    esp,0x10
c002a078:	83 ec 08             	sub    esp,0x8
c002a07b:	68 58 21 00 00       	push   0x2158
c002a080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a084:	e8 e8 8c fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c002a089:	83 c4 10             	add    esp,0x10
c002a08c:	83 c4 0c             	add    esp,0xc
c002a08f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002a090 <PIC::~PIC()>:
c002a090:	83 ec 0c             	sub    esp,0xc
c002a093:	ba c0 e3 02 c0       	mov    edx,0xc002e3c0
c002a098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a09c:	89 10                	mov    DWORD PTR [eax],edx
c002a09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0a2:	83 ec 0c             	sub    esp,0xc
c002a0a5:	50                   	push   eax
c002a0a6:	e8 03 ac fe ff       	call   c0014cae <InterruptController::~InterruptController()>
c002a0ab:	83 c4 10             	add    esp,0x10
c002a0ae:	90                   	nop
c002a0af:	83 c4 0c             	add    esp,0xc
c002a0b2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c002a0b4 <PIC::~PIC()>:
c002a0b4:	83 ec 0c             	sub    esp,0xc
c002a0b7:	83 ec 0c             	sub    esp,0xc
c002a0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a0be:	e8 cd ff ff ff       	call   c002a090 <PIC::~PIC()>
c002a0c3:	83 c4 10             	add    esp,0x10
c002a0c6:	83 ec 08             	sub    esp,0x8
c002a0c9:	68 58 21 00 00       	push   0x2158
c002a0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a0d2:	e8 9a 8c fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c002a0d7:	83 c4 10             	add    esp,0x10
c002a0da:	83 c4 0c             	add    esp,0xc
c002a0dd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002a0de <APICTimer::~APICTimer()>:
c002a0de:	83 ec 0c             	sub    esp,0xc
c002a0e1:	ba 14 e4 02 c0       	mov    edx,0xc002e414
c002a0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0ea:	89 10                	mov    DWORD PTR [eax],edx
c002a0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0f0:	83 ec 0c             	sub    esp,0xc
c002a0f3:	50                   	push   eax
c002a0f4:	e8 45 cc fe ff       	call   c0016d3e <Timer::~Timer()>
c002a0f9:	83 c4 10             	add    esp,0x10
c002a0fc:	90                   	nop
c002a0fd:	83 c4 0c             	add    esp,0xc
c002a100:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002a102 <APICTimer::~APICTimer()>:
c002a102:	83 ec 0c             	sub    esp,0xc
c002a105:	83 ec 0c             	sub    esp,0xc
c002a108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a10c:	e8 cd ff ff ff       	call   c002a0de <APICTimer::~APICTimer()>
c002a111:	83 c4 10             	add    esp,0x10
c002a114:	83 ec 08             	sub    esp,0x8
c002a117:	68 60 01 00 00       	push   0x160
c002a11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a120:	e8 4c 8c fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c002a125:	83 c4 10             	add    esp,0x10
c002a128:	83 c4 0c             	add    esp,0xc
c002a12b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002a12c <PIT::~PIT()>:
c002a12c:	83 ec 0c             	sub    esp,0xc
c002a12f:	ba 64 e4 02 c0       	mov    edx,0xc002e464
c002a134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a138:	89 10                	mov    DWORD PTR [eax],edx
c002a13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a13e:	83 ec 0c             	sub    esp,0xc
c002a141:	50                   	push   eax
c002a142:	e8 f7 cb fe ff       	call   c0016d3e <Timer::~Timer()>
c002a147:	83 c4 10             	add    esp,0x10
c002a14a:	90                   	nop
c002a14b:	83 c4 0c             	add    esp,0xc
c002a14e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002a150 <PIT::~PIT()>:
c002a150:	83 ec 0c             	sub    esp,0xc
c002a153:	83 ec 0c             	sub    esp,0xc
c002a156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a15a:	e8 cd ff ff ff       	call   c002a12c <PIT::~PIT()>
c002a15f:	83 c4 10             	add    esp,0x10
c002a162:	83 ec 08             	sub    esp,0x8
c002a165:	68 5c 01 00 00       	push   0x15c
c002a16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a16e:	e8 fe 8b fe ff       	call   c0012d71 <operator delete(void*, unsigned long)>
c002a173:	83 c4 10             	add    esp,0x10
c002a176:	83 c4 0c             	add    esp,0xc
c002a179:	c3                   	ret    
